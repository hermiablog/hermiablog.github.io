<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS核心知识点（一）</title>
      <link href="/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="CSS基础认知"><a href="#CSS基础认知" class="headerlink" title="CSS基础认知"></a>CSS基础认知</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><blockquote><p>CSS又称层叠样式表，它是一种标记语言，而不是编程语言</p><p>作用：给html标签添加样式</p><p>CSS已经发展到CSS3，在最新版本3.0中，增加了大量功能，以前只能用JS才能实现的现在用CSS3也能做到</p><p>要清楚CSS3新增了哪些功能，与之前版本的不同在哪</p><p>web前端三大核心基础：</p></blockquote><table><thead><tr><th>分层</th><th>语言</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td>结构层</td><td>HTML</td><td>搭建结构、放置部件、描述语义</td><td>骨骼</td></tr><tr><td>样式层</td><td>CSS</td><td>美化页面，实现布局</td><td>皮肤</td></tr><tr><td>行为层</td><td>JavaScript</td><td>实现交互效果，数据收发、表单验证等</td><td>神经</td></tr></tbody></table><h3 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h3><h4 id="CSS规则集：选择器-声明块"><a href="#CSS规则集：选择器-声明块" class="headerlink" title="CSS规则集：选择器+声明块"></a>CSS规则集：选择器+声明块</h4><ul><li>选择器是指需要改变样式的html元素</li><li>声明块用<code>&#123;&#125;</code>包裹，里面有多条声明，每条声明块之间用<code>;</code>间隔</li><li>每条声明包含一个属性名称和一个值，以冒号分隔<ul><li>最后一条声明可以不写<code>;</code>，但为了统一标准，建议书写完整</li></ul></li></ul><h4 id="CSS样式的书写方式"><a href="#CSS样式的书写方式" class="headerlink" title="CSS样式的书写方式"></a>CSS样式的书写方式</h4><ul><li><strong>方式一</strong>：每一行一条声明，选择器与声明之间一个空格，冒号后面一个空格</li></ul><pre><code>p &#123;    color: red;    font-size: 20px;&#125;</code></pre><blockquote><p>开发中使用方式一，方便阅读和修改</p></blockquote><ul><li><strong>方式二</strong>：选择器和声明写在一行</li></ul><pre><code>p &#123;color: red;font-size: 20px;&#125;</code></pre><ul><li>项目上线时，会把CSS样式进行压缩，压缩后就是方式二的写法</li></ul><h4 id="CSS注释"><a href="#CSS注释" class="headerlink" title="CSS注释"></a>CSS注释</h4><ul><li>注释方式：<code>/* 注释 */</code></li><li>位置：只能放置在style里</li><li>快捷键：<code>ctrl+/</code></li></ul><blockquote><p>与html注释的区别：</p></blockquote><ul><li>写法：<code>&lt;!-- 注释--&gt;</code></li><li>能放置在html的任何位置</li></ul><h4 id="CSS的书写位置"><a href="#CSS的书写位置" class="headerlink" title="CSS的书写位置"></a>CSS的书写位置</h4><ul><li><strong>方式一</strong>：行内样式<ul><li>在标签中加入style属性</li></ul></li></ul><pre><code>&lt;h2 style=&quot;color: red&gt;行内样式&lt;/h2&gt;</code></pre><ul><li><strong>方式二</strong>：内嵌样式&#x2F;内部样式<ul><li>在<code>&lt;head&gt;&lt;/head&gt;</code>标签对中写style属性</li><li>在HTML5中，type可以不写</li></ul></li></ul><pre><code>&lt;head&gt;省略html框架&lt;style type=&quot;text/css&quot;&gt;h1 &#123;    color: bule;    font-size: 20px    &#125;&lt;/style&gt;&lt;/head&gt;</code></pre><ul><li><strong>方式三</strong>：外链样式&#x2F;外部样式<ul><li>新建一个<code>.css</code>文件，使用link标签引入到界面中</li><li>link标签要写在head中</li><li>优点：多个网页可以共用一个CSS样式文件</li></ul></li></ul><pre><code>&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;文件路径&quot;/&gt;&lt;/head&gt;</code></pre><blockquote><p>&#96;rel&#x3D;”stylesheet可以不写”</p></blockquote><ul><li><strong>方式四</strong>：导入式样式<ul><li>导入<code>.css</code>的文件</li><li>缺点：使用导入式的样式表，页面加载完成后才会加载样式；所以在CSS文件加载完成之前，网页就会呈现没有CSS样式的裸奔现象</li></ul></li></ul><pre><code>&lt;style&gt;    @import url(文件路径)&lt;/style&gt;</code></pre><ul><li>实际开发中很少用到</li></ul><blockquote><p>总结：CSS4 种书写位置特点与区别</p><table><thead><tr><th>引入方式</th><th>书写位置</th><th>作用范围</th><th>优先级</th><th>使用场景</th></tr></thead><tbody><tr><td>行内样式</td><td>css 样式写在标签的 style 属性中</td><td>当前标签</td><td>最高配合</td><td>JS 或特殊需求</td></tr><tr><td>内嵌样式</td><td>写在<style>标签中</td><td>当前页面</td><td>由书写位置和选择器优先级来共同决定</td><td>小案例 或 对网站首页首次打开速度要求很高的网页需要；如：百度、腾讯首页</td></tr><tr><td>外链样式</td><td>css 样式写在单独 css 文件中，通过 link 标签引入</td><td>多个页面</td><td>由书写位置和选择器优先级来共同决定</td><td>项目开发中高频使用</td></tr><tr><td>导入式样式</td><td>把@import 放在style标签中或 CSS 文件中，用于导入外部 CSS 样式文件</td><td>被导入的页面</td><td>最低</td><td>项目开发中几乎不用（用作了解即可）</td></tr></tbody></table></blockquote><h4 id="CSS样式的优先级"><a href="#CSS样式的优先级" class="headerlink" title="CSS样式的优先级"></a>CSS样式的优先级</h4><blockquote><p>&#x3D;&#x3D;行内样式&#x3D;&#x3D;的优先级最高</p><p>内联样式和外部样式优先级相同，按照&#x3D;&#x3D;就近原则&#x3D;&#x3D;渲染：渲染离标签更近的</p></blockquote><h3 id="三、CSS选择器"><a href="#三、CSS选择器" class="headerlink" title="三、CSS选择器"></a>三、CSS选择器</h3><h4 id="选择器分类"><a href="#选择器分类" class="headerlink" title="选择器分类"></a>选择器分类</h4><ul><li>传统 CSS2.1 选择器<ul><li>标签选择器和 id 选择器</li><li>class（类）选择器</li><li>复合选择器</li><li>伪类</li><li>CSS3 新增选择器</li></ul></li><li>元素关系选择器<ul><li>序号选择器</li><li>属性选择器</li><li>CSS3 新增伪类</li><li>伪元素</li></ul></li><li>层叠性和选择器权重计算</li></ul><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><ul><li>又称元素选择器&#x2F;类型选择器</li><li>直接使用&#x3D;&#x3D;元素的标签名&#x3D;&#x3D;当做选择器，将选择页面上的&#x3D;&#x3D;所有<strong>该种标签</strong>&#x3D;&#x3D;，无论位置深浅</li><li>作用：由于覆盖面非常大，所以适用于标签样式的初始化</li></ul><pre><code>ul&#123;  list-style:none;&#125;a &#123;  text-decoration:none;&#125;</code></pre><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><ul><li>id选择器是使用元素的id属性来选择特定元素</li><li>写法：<code>#+id名</code></li><li>作用:元素的id是唯一的，所以用于选择一个唯一的元素</li><li>id的正确命名规范：<ul><li>只能由字母、数字、下划线<code>_</code>、短横线<code>-</code>构成</li><li>不能以数字开头</li><li>区分大小写</li><li>最好多个单词之间以<code>-</code>分割</li></ul></li></ul><pre><code>&lt;style&gt;   #box1 &#123;       color:orange;   &#125;&lt;/style&gt;&lt;body&gt;   &lt;h3 id=&quot;box1&quot;&gt;三级标题&lt;/h3&gt;&lt;/body&gt;</code></pre><h4 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h4><ul><li>class属性表示”类名”</li><li>类名的命名规范与id相同</li><li>写法：<code>.+class名</code><ul><li>多个标签可以使用相同的类名</li><li>同一个标签可以属于多个类，类名之间用空格隔开</li></ul></li><li>原始类<ul><li>应用场景：组件化开发</li><li>在网页项目前，可以将所有的常用字号、文字、颜色、行高、外边距、内边距等设置为单独的类</li><li>HTML标签就可以”按需选择”它的类名，以快速添加样式</li></ul></li></ul><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><ul><li>可以作用于页面当中的所有元素</li><li>基本不用，对性能消耗过大</li><li>写法：<code>*</code></li></ul><pre><code>* &#123;  color:green;&#125;</code></pre><h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><table><thead><tr><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>后代选择器</td><td><code>.box .para</code></td><td>选择类名为box的标签 内部的类名为para的标签</td></tr><tr><td>交集选择器</td><td><code>li.para</code></td><td>选择既是li标签，也属于para类的标签</td></tr><tr><td>并集选择器</td><td><code>ul,ol</code></td><td>选择所有ul和ol标签</td></tr></tbody></table><ol><li>后代选择器</li></ol><ul><li>在CSS中，使用&#x3D;&#x3D;空格&#x3D;&#x3D;表示<code>后代</code>，不一定是“儿子”</li><li>后代选择器可以有很多空格，表示隔开好几代</li><li>会同时选择满足条件的子和孙</li></ul><ol start="2"><li>交集选择器</li></ol><ul><li>没有空格</li><li>选择同时满足多个条件的标签</li></ul><ol start="3"><li>并集选择器</li></ol><ul><li>也叫做<code>分组选择器</code>，逗号表示分组</li><li>同时选择多个标签</li></ul><ol start="4"><li>复合选择器：选择器可以任意搭配结合</li></ol><h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h4><blockquote><p>伪类是添加到选择器的描述性词语，指定要选择元素的特殊状态</p><p>超链接拥有四个特殊状态</p><table><thead><tr><th>伪类</th><th>描述</th></tr></thead><tbody><tr><td><code>a:link</code></td><td>没有被访问的超级链接</td></tr><tr><td><code>a:visited</code></td><td>已经被访问过的超级链接</td></tr><tr><td><code>a:hover</code></td><td>正在被鼠标悬停的超级链接</td></tr><tr><td><code>a:active</code></td><td>正在被激活的超级链接(按下按键，但还没有松开按键)</td></tr><tr><td><strong>爱恨准则</strong></td><td></td></tr></tbody></table></blockquote><ul><li>a标签的伪类书写，按照”爱恨准则”的顺序，否则会与伪类不生效</li><li>LOVE HATE:<code>:link</code>、<code>:visited</code>、<code>:hover</code>、<code>:active</code></li></ul><pre><code>&lt;style&gt;    /*      顺序不能乱 ，爱恨准则 LOVE HATE      :link  -&gt; :visited -&gt; :hover -&gt; :active    */    a:link &#123;      color:red;    &#125;    a:visited &#123;      color:blue;    &#125;    a:hover &#123;      color: green;    &#125;    a:active &#123;      color:yellow;    &#125;&lt;/style&gt;</code></pre><blockquote><p><strong>注</strong></p></blockquote><ul><li>遵守了爱恨准则，但<code>a:link</code>不生效，是因为之前访问过的网址会被浏览器记录，就会显示<code>a:visited</code>的样式(修改网址或清除浏览记录即可)</li><li>四个样式可以根据实际情况单独使用</li><li>伪类<code>:hover</code>不仅可以用在a标签上，还可以用在其他标签上</li></ul><h4 id="元素关系选择器"><a href="#元素关系选择器" class="headerlink" title="元素关系选择器"></a>元素关系选择器</h4><ul><li>子选择器<ul><li><code>.bov&gt;p &#123; &#125;</code></li><li>两个标签要为父子关系，当使用<code>&gt;</code>符号分割两个元素时，他只会匹配那些作为第一个元素的直接后代元素</li><li>从IE7开始兼容</li></ul></li><li>相邻兄弟选择器<ul><li><code>.bov+p&#123; &#125;</code></li><li>第二个元素紧跟在第一个元素之后，并且这两个元素都属于同一个父元素的子元素</li><li>只会选择紧跟着的一个，就算有两个相同元素在第一个元素后面</li><li>a+b即选择紧跟在a后面的第一个b</li><li>从IE7开始兼容</li></ul></li><li>通用兄弟选择器<ul><li><code>.box~p&#123; &#125;</code></li><li><code>a~b</code>表示选择a元素&#x3D;&#x3D;之后&#x3D;&#x3D;所有的同级b元素</li><li>a之前的b元素是选择不到的</li><li>从IE7开始兼容</li></ul></li></ul><h4 id="序号选择器"><a href="#序号选择器" class="headerlink" title="序号选择器"></a>序号选择器</h4><table><thead><tr><th>选择器</th><th>描述</th><th>兼容性</th></tr></thead><tbody><tr><td><code>:first-child</code></td><td>第一个子元素</td><td>IE7</td></tr><tr><td><code>:last-child</code></td><td>最后一个子元素</td><td>IE9</td></tr><tr><td><code>:nth-child(n)</code></td><td>第n个子元素</td><td>IE9</td></tr><tr><td><code>:nth-last-child(n)</code></td><td>倒数第n个子元素</td><td>IE9</td></tr><tr><td><code>:nth-of-type(n)</code></td><td>第n个某类型子元素</td><td>IE9</td></tr><tr><td><code>:nth-last-of-type(n)</code></td><td>倒数第n个某类型子元素</td><td>IE9</td></tr><tr><td><code>:only-child</code></td><td>选择没有任何兄弟元素的元素</td><td></td></tr></tbody></table><blockquote><p>注：</p></blockquote><ul><li>动态值写法：()可以写成<code>an+b</code>的形式也可以用关键词，<ul><li>n是自然数，从0开始计算</li><li>a,b必须是整数，可正可负</li><li>2n&#x3D;偶数&#x3D;even,2n+1&#x3D;奇数&#x3D;odds，</li></ul></li><li><code>nth-of-type(n)</code>和<code>nth-last-of-type(n)</code>键选择&#x3D;&#x3D;同种标签&#x3D;&#x3D;指定序号的子元素</li></ul><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><ul><li>写法：<code>标签[属性]</code><table><thead><tr><th>案例</th><th>描述</th><th>兼容性</th></tr></thead><tbody><tr><td><code>img[alt]</code></td><td>选择有alt属性的img标签</td><td>IE9</td></tr><tr><td><code>img[alt=&quot;icon&quot;]</code></td><td>选择alt属性是icon的img标签,属性里只能有icon这几个词</td><td>IE9</td></tr><tr><td><code>img[alt^=&quot;icon&quot;]</code></td><td>选择alt属性以icon开头的img标签,只有icon或者是以它开头都行</td><td>IE9</td></tr><tr><td><code>img[alt$=&quot;icon&quot;]</code></td><td>选择alt属性以icon结尾的img标签,只有icon或者以icon结尾的都行</td><td>IE9</td></tr><tr><td><code>img[alt*=&quot;icon&quot;]</code></td><td>选择alt属性中包含icon文字的img标签，sscion&#x2F;icon-c&#x2F;icon button都可以</td><td>IE9</td></tr><tr><td><code>img[alt~=&quot;icon&quot;]</code></td><td>选择alt属性中<strong>有空格隔开</strong>的icon字样的的img标签,只有icon属性&#x2F;有包含icon在内的多个属性值</td><td>IE9</td></tr><tr><td>&#96;img[alt</td><td>&#x3D;”icon”]&#96;</td><td>选择alt属性以<code>icon-</code>开头的img标签,只有icon属性&#x2F;以icon-开头的属性都行</td></tr></tbody></table></li><li>以上标签、属性、文字都可以替换</li><li>注：实际开发中用的很少，只做了解即可</li></ul><h4 id="CSS3新增伪类"><a href="#CSS3新增伪类" class="headerlink" title="CSS3新增伪类"></a>CSS3新增伪类</h4><table><thead><tr><th>伪类</th><th>描述</th></tr></thead><tbody><tr><td><code>:focus</code></td><td>选择当前获得焦点的表单元素</td></tr><tr><td><code>:checked</code></td><td>选择当前已经勾选的单选按钮或复选框</td></tr><tr><td><code>:empty</code></td><td>选择空标签</td></tr><tr><td><code>:enabled</code></td><td>选择当前有效的表单元素</td></tr><tr><td><code>:disabled</code></td><td>选择当前无效的表单元素</td></tr><tr><td><code>:root</code></td><td>选择根元素，即<code>&lt;html&gt;</code>标签</td></tr></tbody></table><blockquote><p><code>:focus</code>：</p></blockquote><ul><li>可修改当前获得焦点的表单元素样式</li><li>自带outline样式<blockquote><p><code>:checked</code></p></blockquote></li><li>可以用来修改复选框&#x2F;单选框样式(原样式优先级太高，用div模拟复选框&#x2F;单选框)，区别：单选框选中后不能取消</li><li>用label标签绑定复选框<code>input:checkbox</code>(&#x2F;单选框<code>input:radio</code>)、div.box、以及div下的div.item</li><li>设置新选择框.box的样式、.item:被选中后的样式</li><li>用<code>display:none</code>隐藏原选择框和.item</li><li><code>input:checked+ .box .item &#123;dispaly:block&#125;</code>表示被选中后，.box下的.item显示出来<blockquote><p><code>:empty</code>:只能是空内容，有空格的标签不会被选中</p></blockquote></li></ul><h4 id="CSS3新增伪元素"><a href="#CSS3新增伪元素" class="headerlink" title="CSS3新增伪元素"></a>CSS3新增伪元素</h4><ul><li>CSS3新增了”伪元素”特性，表示”虚拟动态创建的元素”</li><li>伪元素用双冒号<code>::</code>表示，IE8及以上兼容单冒号<code>:</code></li><li>语法：<code>element::before&#123; &#125;</code></li></ul><table><thead><tr><th>CSS3新增伪元素</th><th>描述</th></tr></thead><tbody><tr><td><code>::before</code></td><td>匹配选中的元素的第一个元素</td></tr><tr><td><code>::after</code></td><td>匹配选中元素的最后一个子元素</td></tr><tr><td><code>::selection</code></td><td>选择器匹配被用户选取的部分</td></tr><tr><td><code>::first-letter</code></td><td>会选中某元素中的第一行的第一个字母</td></tr><tr><td><code>::first-line</code></td><td>会选中某元素第一行的全部文字</td></tr><tr><td><code>::placeholder</code></td><td>自定义表单元素的占位文本样式</td></tr></tbody></table><blockquote><p><code>::before</code>和<code>::after</code></p></blockquote><ul><li><p>企业应用：各种小图标、CSS精灵图</p></li><li><p>这两个伪元素必须使用<code>content</code>属性表示其内容，绝对不能省掉</p></li><li><p>为选中的元素添加修饰性的内容，此元素默认为行内元素</p></li><li><p>第一种情况：给子元素&#x2F;没有子元素的盒子加，就是给对应标签的前&#x2F;后新增<code>content</code>内容及样式</p></li></ul><pre><code>&lt;div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;!-- 给这种情况加伪元素就算新增内容 --&gt;</code></pre><ul><li>第二种情况：给父元素加，就会新增一个行内元素及样式</li></ul><pre><code>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;!-- &gt;这种情况就是新增行内元素 --&gt;</code></pre><img src="weiyuansu.png"><blockquote><p><code>::selection</code></p></blockquote><ul><li>被选中的部分会改变样式</li><li>只能向<code>::selection</code>选择器应用少量的CSS属性:color、background、cursor以及outline<blockquote><p><code>::first-letter</code></p></blockquote></li><li>会选中某元素的第一行的第一个字母</li><li>必须是块级元素<blockquote><p><code>::first-line1</code></p></blockquote></li><li>会选中某元素的第一行的全部文字</li><li>必须是块级元素</li></ul><h4 id="CSS-选择器的权重计算"><a href="#CSS-选择器的权重计算" class="headerlink" title="CSS 选择器的权重计算"></a>CSS 选择器的权重计算</h4><ol><li>层叠性</li></ol><ul><li>CSS 全名叫 层叠式样式表 ，层叠性是它很重要的性质</li><li>层叠性：多个选择器可以同时作用于同一个标签，效果叠加</li></ul><ol start="2"><li>层叠性的冲突处理</li></ol><ul><li>多个选择器定义同一元素的冲突问题</li><li>CSS 有严密的处理冲突的规则</li><li>id 权重 &gt; class权重 &gt; 标签权重 &gt; 通配符权重</li></ul><ol start="3"><li>复杂选择器权重计算</li></ol><ul><li>复杂选择器可以通过（id的个数，class的个数，标签的个数）的形式，计算权重</li></ul><ol start="4"><li>!important 提升权重</li></ol><ul><li>如果我们需要将某个选择器的某条属性提升权重，可以在属性后边写上 <code>!important</code></li><li>实际企业中，不允许使用 <code>!important</code> ，因为这会带来不经意的样式冲突</li></ul><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><blockquote><p>开关按钮</p></blockquote><ul><li><code>input:checked</code>里面可以直接写按下开关后的样式</li><li>优化：用伪元素替代没有内容的标签</li></ul><h2 id="CSS文本属性、字体属性、列表属性"><a href="#CSS文本属性、字体属性、列表属性" class="headerlink" title="CSS文本属性、字体属性、列表属性"></a>CSS文本属性、字体属性、列表属性</h2><h3 id="一、CSS字体属性"><a href="#一、CSS字体属性" class="headerlink" title="一、CSS字体属性"></a>一、CSS字体属性</h3><h4 id="color属性"><a href="#color属性" class="headerlink" title="color属性"></a>color属性</h4><ul><li>可设置文本内容的字体颜色</li><li>color属性有四种表示法：</li></ul><blockquote><p><strong>英文单词表示法</strong></p></blockquote><ul><li>应用场景：仅用于学习和测试，工作中不常用</li></ul><pre><code>color:red;</code></pre><blockquote><p><strong>十六进制表示法</strong></p></blockquote><ul><li>设计图中标注的颜色通常为十六进制表示</li><li>每一种颜色分量都是0~255的数字，十六进制的ff就是十进制的255</li><li>如果颜色值是两两相同，并且有三对，<code>#aabbcc</code>的形式可以简写为<code>#abc</code></li><li>常用的十六进制表示法</li></ul><table><thead><tr><th>色值</th><th>描述</th></tr></thead><tbody><tr><td><code>#000</code></td><td>黑色</td></tr><tr><td><code>#fff</code></td><td>白色</td></tr><tr><td><code>#ccc</code>、<code>#333</code>、<code>#2f2f2f</code>、<code>#666</code>、<code>#ddd</code></td><td>灰色</td></tr></tbody></table><blockquote><p><strong>rgb()表示法</strong></p></blockquote><ul><li>rgb是红蓝绿三个单词的缩写</li><li>三个数字的范围是0~255,数字之间用<code>,</code>分隔</li></ul><pre><code>color:rgb(255,0,0);&lt;!-- 红色 --&gt;</code></pre><blockquote><p><strong>rgba()表示法</strong></p></blockquote><ul><li>前三个数字是颜色,范围是0~255</li><li>第四个参数是透明度，范围是0~1，值越大越不透明</li><li>rgba()表示法从IE9开始兼容</li></ul><pre><code>color: rgba(255,0,0,0.5)</code></pre><h4 id="font-size属性"><a href="#font-size属性" class="headerlink" title="font-size属性"></a>font-size属性</h4><ul><li>font-size属性用来设置文字的字号大小</li><li>单位通常为px(像素)、%(百分比)；移动端还会学习em、rem、vw、vh单位</li><li>网页文字正文默认为为16px，1em&#x3D;两个字符</li><li>浏览器最小支持12px字号</li><li><strong>面试题</strong>：如何在页面中设置小于12px的字体(学到动画时会讲)</li><li>百分比是相对于父元素的font-size而言</li></ul><pre><code>&lt;style&gt;.fon1 &#123;font-size:12px;&#125;.fon2 &#123;font-size:16px;&#125;div p &#123;font-size:50%;&#125;&lt;/style&gt;&lt;body&gt;    &lt;p&gt;这是一段默认大小的文字&lt;/p&gt;    &lt;p class=&quot;fon1&quot;&gt;字体大小为12px&lt;/p&gt;    &lt;div class=&quot;fot2&quot;&gt;        父元素为16px        &lt;p&gt;字体大小为父元素的50%&lt;/p&gt;    &lt;/div&gt;&lt;/body&gt;  </code></pre><h4 id="font-weight属性"><a href="#font-weight属性" class="headerlink" title="font-weight属性"></a>font-weight属性</h4><ul><li>用来设置字体的粗细程度</li><li>可以用属性值或者数字来设置大小</li><li>数字介于1~1000之间，数字越大，字体越粗</li><li>最终的粗细要在当前字体可行的精细范围之内<table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>normal</code></td><td>正常粗细，与400等值</td></tr><tr><td><code>bold</code></td><td>加粗，与700等值</td></tr><tr><td><code>lighter</code></td><td>比从父元素继承来的值更细(处在字体可行的粗细值范围内)，大多数中文字体不支持</td></tr><tr><td><code>bolder</code></td><td>比从父元素继承来的值更粗(处于字体可行的粗细范围内)大多数中文字体不支持</td></tr></tbody></table></li></ul><pre><code>&lt;style&gt;      .we1 &#123; font-weight: normal; &#125;      .we2 &#123;font-weight: bold; &#125;      .we3 &#123;font-weight: 500;&#125;      .we4 &#123;font-weight: lighter;&#125;      .we5 &#123;font-weight: bolder;&#125;  &lt;/style&gt;&lt;body&gt;    &lt;p class=&quot;we1&quot;&gt;正常粗细&lt;/p&gt;    &lt;p class=&quot;we2&quot;&gt;加粗文本&lt;/p&gt;    &lt;div class=&quot;we3&quot;&gt;        父元素为600        &lt;p class=&quot;we4&quot;&gt;比父元素更细&lt;/p&gt;        &lt;p class=&quot;we5&quot;&gt;比父元素更粗&lt;/p&gt;    &lt;/div&gt;&lt;/body&gt;</code></pre><h4 id="4-font-style属性"><a href="#4-font-style属性" class="headerlink" title="4.font-style属性"></a>4.font-style属性</h4><ul><li>设置字体的倾斜<table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>normal</code></td><td>取消倾斜，把默认倾斜的<code>i</code>、<code>em</code>等标签设置为不倾斜</td></tr><tr><td><code>italic</code></td><td>设置为倾斜字体(常用)，如果当前字体没有可用的斜体版本，会选用<code>oblique</code>替代</td></tr><tr><td><code>oblique</code></td><td>设置为倾斜字体，用常规字体模拟(不常用)</td></tr></tbody></table></li></ul><pre><code>&lt;style&gt;    .sty1 &#123;font-style: normal;&#125;    .sty2 &#123;font-style: italic;&#125;    .sty3 &#123;font-style: oblique;&#125;&lt;/style&gt;&lt;body&gt;    &lt;i&gt;这是一个默认倾斜字体&lt;/i&gt; &lt;br&gt;    &lt;i class=&quot;sty1&quot;&gt;把默认倾斜设置为不倾斜&lt;/i&gt;    &lt;p class=&quot;sty2&quot;&gt;italic下把不倾斜的设置为倾斜&lt;/p&gt;    &lt;p class=&quot;sty3&quot;&gt;oblique下把不倾斜设置为倾斜&lt;/p&gt;&lt;/body&gt;</code></pre><h4 id="font-family-字体类型"><a href="#font-family-字体类型" class="headerlink" title="font-family 字体类型"></a>font-family 字体类型</h4><ul><li>用于设置字体类型，浏览器默认字体为”微软雅黑”</li><li>可以设置多个字体类型，字体之间用<code>,</code>分隔，如果第一个字体浏览器不支持，则会往后找；若都不支持，则会使用默认字体；</li></ul><pre><code>font-family:&quot;Times New Rowman&quot;,Times,serif;</code></pre><blockquote><p>注：</p></blockquote><ul><li>中文字体要用<code>&quot;&quot;</code>包裹，英文字体中若有空格，也要用<code>&quot;&quot;</code>(不加也可以)</li><li>字体通常必须是用户计算机已经安装好的字体，所以设置为:”微软雅黑””宋体”较多</li><li>中文字体也可以用英文名</li></ul><table><thead><tr><th>中文字体名</th><th>英文字体名</th></tr></thead><tbody><tr><td>“微软雅黑”</td><td>“Microsoft Yahei”</td></tr><tr><td>“宋体”</td><td>“SimSun”</td></tr></tbody></table><h4 id="font-face自定义字体"><a href="#font-face自定义字体" class="headerlink" title="@font-face自定义字体"></a>@font-face自定义字体</h4><ul><li>用来设置用户电脑里没有的字体，用户浏览网页时会下载相关字体</li><li>准备工作<ul><li>必须自己定义新的字体(需要有字体文件)</li><li>用户加载网页时会同时下载字体文件</li><li>字体文件需要同时拥有五种格式的文件,因为根据操作系统和浏览器不同，有<code>eot</code>、<code>woff2</code>、<code>woff</code>、<code>ttf</code>、<code>svg</code></li></ul></li><li>如何定义字体</li></ul><pre><code>@font-face&#123;    font-family: ;/*字体类型*/    src: url();  /*引入字体类型*/&#125;</code></pre><ul><li>怎么做？<ul><li>获得字体文件：建议使用免费可商用的阿里巴巴普惠字体，地址：<a href="https://www.iconfont.cn/webfont">https://www.iconfont.cn/webfont</a></li><li>输入要定义的文字，选择字体，下载字体包</li><li>使用@font-face声明字体</li><li>定义使用webfont的样式</li><li>为文字加上对应样式<br>  注：可以直接复制demo的内容</li></ul></li></ul><pre><code>&lt;style&gt;  @font-face &#123;  &#125;&lt;!-- 使用font-face声明字体 --&gt;  .web-font &#123;  &#125;&lt;!-- 定义使用 webfont 的样式 --&gt;&lt;/style&gt;&lt;body&gt;&lt;p&gt;要定义的文字&lt;/p&gt;&lt;/body&gt;</code></pre><h3 id="二、CSS文本属性"><a href="#二、CSS文本属性" class="headerlink" title="二、CSS文本属性"></a>二、CSS文本属性</h3><h4 id="text-decoration属性-修饰线"><a href="#text-decoration属性-修饰线" class="headerlink" title="text-decoration属性-修饰线"></a>text-decoration属性-修饰线</h4><ul><li>用于设置文本的修饰线外观</li><li>text-decoration是以下四个属性的简写</li><li>可以写在一行，以空格分隔</li><li><strong>注</strong>：其他三个属性的前提是<code>line</code></li></ul><table><thead><tr><th>属性</th><th>属性值</th></tr></thead><tbody><tr><td>text-decoration-line</td><td>下划线<code>underline</code>、删除线<code>line-through</code>、没有修饰线<code>none</code></td></tr><tr><td>text-decoration-color</td><td>文本修饰的颜色</td></tr><tr><td>text-decoration-style</td><td>波浪线<code>wavy</code>、实线<code>solid</code>、虚线<code>dashed</code></td></tr><tr><td>text-decoration-thickness</td><td>文本修饰线的粗细</td></tr></tbody></table><pre><code>&lt;style&gt;    p &#123;text-decoration:underline red 5px;&#125;    div &#123;text-decoration:wavy underline purple 3px;&#125;    /*有underline才有wavy*/&lt;/style&gt;&lt;body&gt;    &lt;p&gt;有红色下划线的文本，下划线粗5px&lt;/p&gt;    &lt;div&gt;一行有紫色波浪线的文本，线粗3px&lt;/div&gt;&lt;/body&gt;</code></pre><h4 id="text-indent首行缩进"><a href="#text-indent首行缩进" class="headerlink" title="text-indent首行缩进"></a>text-indent首行缩进</h4><ul><li>定义首行文本内容之前的缩进量</li><li>常用单位是<code>em</code>、<code>2em</code>是两个字符的宽度</li><li>默认字符大小是16px，如果没有单独设置，那么2em&#x3D;32px</li></ul><pre><code>&lt;style&gt;        .line1 &#123;font-size:2em;&#125;        /*字体大小为32px*/        .line2 &#123;text-indent:2em;&#125;        /*首行缩进2em，也就是32px*/        .line3 &#123;font-size:2em;text-indent:2em;&#125;        /*字体大小为32px,首行缩进4em=64px*/&lt;/style&gt;&lt;body&gt;    &lt;p class=&quot;line1&quot;&gt;默认文本，设置字体大小是两字符&lt;/p&gt;    &lt;p class=&quot;line2&quot;&gt;首行缩进两字符&lt;/p&gt;    &lt;p class=&quot;line3&quot;&gt;首行缩进两字符，字体大小为两字符&lt;/p&gt;&lt;/body&gt;</code></pre><h4 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h4><ul><li><p>行高的测量方式</p><img src="测量行高.png"></li><li><p>①②是行高测量上的定义，&#x3D;&#x3D;③&#x3D;&#x3D;是行高的真实定义：文字所占空间高度的总高，文字在这个高度的垂直方向&#x3D;&#x3D;居中&#x3D;&#x3D;显示</p></li><li><p>主段落内容的行高至少应为<code>1.5</code></p></li><li><p>如果文字的大小要随页面的缩放而变化，请使用无单位的数值，以确保行高会等比例的缩放</p></li><li><p>行高的值</p><table><thead><tr><th>单位</th><th>实例</th><th>说明</th></tr></thead><tbody><tr><td>px</td><td><code>line-height:30px;</code></td><td>行高为30px</td></tr><tr><td>数值表示法</td><td><code>line-height:2;</code></td><td>字号大小的两倍这是<strong>最推荐</strong>的写法，工作中常用倍数是<code>1.25,1.5,1.75</code></td></tr><tr><td>百分比表示法</td><td><code>line-height:200%;</code></td><td>字号大小的两倍</td></tr><tr><td>normal</td><td><code>line-height:normal</code>;</td><td>取决于客户端。桌面浏览器(包括Firefox)使用默认值，约为<code>1.2</code>，这取决于元素的<code>font-family</code></td></tr></tbody></table></li></ul><pre><code>&lt;style&gt;     .p1 &#123;line-height:20px;          background-color:skyblue;&#125;      div &#123;line-height:40px;          background-color: red;          font-family:&quot;宋体&quot;&#125;      .p2 &#123;line-height: 3;          background-color: aqua;          font-family: &quot;微软雅黑&quot;;&#125;      .p3 &#123;line-heigt:normal;          background-color:coral;&#125;  &lt;/style&gt; &lt;body&gt; &lt;p class=&quot;p1&quot;&gt;设置行高为20px&lt;/p&gt;  &lt;div&gt;这是一行行高40px的宋体&lt;/div&gt;  &lt;p class=&quot;p2&quot;&gt;这是行高为3的微软雅黑&lt;/p&gt;  &lt;p class=&quot;p3&quot;&gt;行高为normal的文字&lt;/p&gt; &lt;/body&gt;</code></pre><h4 id="行文本垂直、水平居中"><a href="#行文本垂直、水平居中" class="headerlink" title="行文本垂直、水平居中"></a>行文本垂直、水平居中</h4><ul><li>行文本垂直居中<ul><li>设置**行高&#x3D;盒子高度(height)**，即可实现单行文本垂直居中</li><li>对行内块元素无效</li></ul></li></ul><pre><code>line-height: height的高度；</code></pre><ul><li>text-align属性<ul><li>定义<strong>行内内容</strong>(例如文字、图片、行内块元素)相对它的块父元素的对齐方式</li><li>注：块级元素不能用这个属性</li><li>常用属性值：<code>left</code>、<code>right</code>、<code>center</code></li></ul></li></ul><pre><code>&lt;style&gt;   .l &#123;text-align: left;&#125;   .c &#123;text-align:center;&#125;   .r &#123;text-align:right;&#125;&lt;/style&gt;&lt;body&gt;   &lt;p class=&quot;l&quot;&gt;这是居左文字&lt;/p&gt;   &lt;p class=&quot;c&quot;&gt;这是居中文字&lt;/p&gt;   &lt;p class=&quot;r&quot;&gt;这是居右文字&lt;/p&gt;&lt;/body&gt;</code></pre><h4 id="font合写属性"><a href="#font合写属性" class="headerlink" title="font合写属性"></a>font合写属性</h4><ul><li>font属性可以用来作为<code>font-style</code>、<code>font-weight</code>、<code>font-size</code>、<code>line-height</code>、<code>font-family</code>属性的合写</li><li>写法<ul><li>font属性连写时，必须设置<code>font-size</code>和<code>font-family</code>才能生效</li><li><code>font-style</code>和<code>font-weight</code>必须放在<code>font-size</code>之前</li><li>连写时任何未指定的值都将设置为其对应的初始值，所以即使没有写行高，也有默认行高1.2<br> -行高写在<code>fon-size</code>后面，用<code>/</code>分隔</li></ul></li></ul><pre><code>font:italic 20px/1.2 &quot;宋体&quot;;</code></pre><h4 id="word-spacing字间距"><a href="#word-spacing字间距" class="headerlink" title="word-spacing字间距"></a>word-spacing字间距</h4><ul><li>对中文无效，仅对英文单词有效<table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>正常的单词间距，有字体和&#x2F;或浏览器定义</td></tr><tr><td>长度</td><td>通过指定具体额外间距来增加字体的单词间距,可以是负数</td></tr></tbody></table></li></ul><h4 id="letter-spacing字符间距"><a href="#letter-spacing字符间距" class="headerlink" title="letter-spacing字符间距"></a>letter-spacing字符间距</h4><ul><li>用于设置文本字符的间距</li><li>对中文和英文都有效，单词会被分隔成一个个字母</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>正常的单词间距，有字体和&#x2F;或浏览器定义</td></tr><tr><td>长度</td><td>通过指定具体额外间距来增加字体的单词间距,可以是负数</td></tr></tbody></table><pre><code>&lt;style&gt;    .word1 &#123;word-spacing:normal;&#125;    .word2 &#123;word-spacing:-10px;&#125;    .letter1 &#123;letter-spacing:10px;&#125;    .letter2 &#123;letter-spacing:-10px;&#125;    .lo &#123;letter-spacing:10px;&#125;    &lt;/style&gt;&lt;body&gt;    &lt;p class=&quot;word1&quot;&gt;I love you ,我爱你,正常间距&lt;/p&gt;    &lt;p class=&quot;word2&quot;&gt;I love you ,我爱你,负间距&lt;/p&gt;    &lt;p class=&quot;letter1&quot;&gt;I love you ,我爱你,10Px间距&lt;/p&gt;    &lt;p class=&quot;letter2&quot;&gt;I love you ，我爱你，负间距&lt;/p&gt;    &lt;div&gt;I love you&lt;p class=&quot;lo&quot;&gt;我爱你&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><h3 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a>列表样式</h3><h4 id="list-style-type"><a href="#list-style-type" class="headerlink" title="list-style-type"></a>list-style-type</h4><ul><li>设置列表项标记的类型</li><li>实际开发中的一般会把前面的标记类型去掉，用做好的小图标替代</li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>无标记(去掉圆点)</td></tr><tr><td>disc</td><td>默认，实心圆</td></tr><tr><td>circle</td><td>空心圆</td></tr><tr><td>square</td><td>实心方块</td></tr><tr><td>decimal</td><td>数字</td></tr><tr><td>decimai-leading-zero</td><td>0开头的数字，01、02、03</td></tr><tr><td>lower-alpha</td><td>小写英文字母</td></tr><tr><td>upper-alpha</td><td>大写英文字母</td></tr><tr><td>……</td><td>标记的类型有20多项，但实际开发中几乎不用</td></tr></tbody></table><p><strong>联系之前在HTML学过的列表标签</strong>:</p><ul><li>注：<code>style=&quot;&quot;</code>等于写在<code>&lt;style&gt;</code>标签里</li></ul><table><thead><tr><th>html(已废弃)</th><th>CSS</th></tr></thead><tbody><tr><td><code>type=&quot;circle&quot;</code></td><td><code>style=&quot;list-style-type:circle&quot;</code></td></tr><tr><td><code>ol-li</code></td><td><code>list-type:decimal</code></td></tr></tbody></table><h4 id="2-list-style-image"><a href="#2-list-style-image" class="headerlink" title="2.list-style-image"></a>2.list-style-image</h4><ul><li>用来指定列表中的列表标记图像，几乎不用</li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>URL</td><td>图像的路径</td></tr><tr><td>none</td><td>默认，无图形被现实</td></tr><tr><td>inherit</td><td>规定从父元素继承该属性的值</td></tr></tbody></table><h4 id="3-list-style-position"><a href="#3-list-style-position" class="headerlink" title="3.list-style-position"></a>3.list-style-position</h4><ul><li>规定列表中列表项目标记的位置，几乎不用</li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>inside</td><td>列表标记项目放置在文本以内，环绕文本并根据标记对齐</td></tr><tr><td>outside</td><td>默认，标记位于文本的左侧、且放置在文本以外，环绕文本不根据标记对齐</td></tr><tr><td>inherit</td><td>规定从父元素继承该属性的值</td></tr></tbody></table><h4 id="4-list-style"><a href="#4-list-style" class="headerlink" title="4.list-style"></a>4.list-style</h4><ul><li>这是以上三个的综合写法</li></ul><pre><code>list-style:delcima-leading-zero outside;</code></pre><ul><li>实际开发中用的最多的是去掉标记:<code>list-style-type:none;</code>、<code>list-style:none;</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS核心知识点（三）</title>
      <link href="/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="浮动、BFC规范、清除浮动的最佳实践"><a href="#浮动、BFC规范、清除浮动的最佳实践" class="headerlink" title="浮动、BFC规范、清除浮动的最佳实践"></a>浮动、BFC规范、清除浮动的最佳实践</h2><h3 id="一、实现CSS布局的几种策略"><a href="#一、实现CSS布局的几种策略" class="headerlink" title="一、实现CSS布局的几种策略"></a>一、实现CSS布局的几种策略</h3><blockquote><ul><li><strong>网页布局的本质是</strong>：用CSS来摆放盒子，把盒子摆放到页面对应位置。</li><li>CSS中提供了以下几种不同的CSS<strong>布局策略</strong>，来实现页面的布局<ul><li>正常布局流</li><li>浮动布局</li><li>定位布局</li><li>表格布局(<code>display:table;</code>)</li><li>响应式设计</li><li>弹性布局</li><li>网格布局</li><li>多列布局<blockquote><p>以上每种布局方式，都有自己的用途，也有各自的优缺点，相互辅助；通过理解各个布局方法的设计理念，我们能够找到构建理想网页需要的布局方案</p></blockquote></li></ul></li></ul></blockquote><h3 id="二、正常布局流"><a href="#二、正常布局流" class="headerlink" title="二、正常布局流"></a>二、正常布局流</h3><blockquote><p>概念：</p><ul><li>在不对页面进行任何布局控制时，浏览器默认的HTML布局方式</li><li>正常的布局流就是规定了。在默认情况下块级元素和内联元素的排版方式</li></ul></blockquote><ol><li><p>正常布局流中，块级元素的排列方式</p><blockquote><ul><li>块级盒子会从包含块的顶部开始，按序垂直排列</li><li>同级盒子间的垂直距离会由“margin”属性决定</li><li>相邻两个块级盒子之间的垂直距离会遵循外边距折叠原则</li></ul></blockquote></li><li><p>正常布局流中，内联元素排版方式</p><blockquote><ul><li>盒子会从包含块的顶部开始，按序水平排列</li><li>只有水平外边距(垂直方向无效)、边框和内边距会被保留</li><li>这些盒子可以以不同方式在垂直方向对齐：可以在底部对齐或顶部对齐，或者按文字底部进行对齐???</li></ul></blockquote></li></ol><blockquote><blockquote><p>注意：所有的HTML元素本质上都是一个盒子模型，并具有盒模型的结构和属性</p></blockquote></blockquote><h3 id="三、浮动布局"><a href="#三、浮动布局" class="headerlink" title="三、浮动布局"></a>三、浮动布局</h3><ol><li>浮动布局起源<blockquote><p><strong>最初</strong></p><ul><li>引入<code>float</code>属性是为了能让web开发人员实现简单的布局，包括在一列文本中浮动的图像，文字环绕在他的左边或右边</li><li>但web开发人员很快意识到，任何东西都可以浮动，而不仅仅是图像，所以浮动的使用范围扩大了</li></ul></blockquote></li><li>浮动是如何工作的<blockquote><ul><li>把一个元素”浮动”(float)起来，会改变该元素本身和在正常布局流(normal flow)中跟随它的其他元素的行为</li><li>这一元素会浮动到左侧或右侧，并且从正常布局流中移除，这时候其他的周围内容就会在这个被设置浮动的元素周围环绕</li><li><strong>简单理解</strong><br> 当元素添加浮动后，元素就会<strong>脱离文档流</strong>，按照指定方向(左右)发生移动，遇到父级边界或者相邻的浮动元素就会停下来，同时会影响到他后面元素的排版行为<ul><li>文档流：文档中可显示对象在排列时所占据的位置&#x2F;空间(在页面中占位置)</li><li>脱离文档流：元素相当于漂浮起来，不占据页面中的位置</li></ul></li></ul></blockquote></li><li>浮动的本质和要点<blockquote><ul><li>浮动的本质功能：用来实现并排</li><li>浮动使用要点：要浮动，并排的盒子<strong>都要</strong>设置浮动</li><li>父盒子要有足够的宽度，否则子盒子会掉下去</li></ul></blockquote></li><li>如何产生浮动<blockquote><ul><li>给需要浮动的元素添加float属性，对应值如下：<table><thead><tr><th>属性</th><th>值</th></tr></thead><tbody><tr><td><code>float</code></td><td>①<code>none</code>默认值，元素不浮动    ②<code>left</code>元素向左浮动    ③<code>right</code>元素向右浮动    ④<code>inherit</code>规定应该从父元素继承float属性的值(一般不用)</td></tr></tbody></table></li></ul></blockquote></li></ol><h3 id="四、元素浮动的特性"><a href="#四、元素浮动的特性" class="headerlink" title="四、元素浮动的特性"></a>四、元素浮动的特性</h3><ol><li>元素添加浮动后，脱离文档流<blockquote><p>同时会影响其后面的元素，但不影响它前面的元素</p></blockquote></li><li>如果父元素的宽度不够<blockquote><p>子元素在放不下的情况下会换行显示</p></blockquote></li><li>浮动的顺序贴靠特性<blockquote><p>子盒子会按顺序进行贴靠，如果没有足够空间，则会寻找前一个兄弟元素</p></blockquote></li><li>元素浮动后，具有行内块级元素特性<blockquote><ul><li>浮动的元素不再区分块级元素、行内元素，因为已经脱离了标准文档流</li><li>浮动后，任何标签都能设置宽高，但不独占一行</li></ul></blockquote></li><li>浮动的元素会造成父元素高度塌陷<blockquote><ul><li>当<strong>父元素没有设置高度</strong>、且子元素设置浮动时，父元素会形成高度塌陷</li><li>因为子元素浮动后不占据页面空间</li></ul></blockquote></li><li>浮动对文字的影响<blockquote><ul><li>会形成常见的文字环绕效果，其实现方式主要是将图片左&#x2F;右浮动</li><li>浮动后其相邻文字就会环绕图片排列</li><li>图片&#x2F;子盒子要放在文字前&#x2F;中间；若放在文字后，则没有环绕效果</li></ul></blockquote></li><li>使用浮动实现网页布局<blockquote><ul><li>垂直显示的盒子，不要设置浮动，只有并排显示的盒子才需要设置浮动</li><li>每个盒子都是独立存在的，盒子内部也可以继续使用浮动</li><li>注意点：<ul><li>先搭建好框架</li><li>使用语义化标签、进行注释</li><li>对最后一个盒子的处理<code>last-child</code></li><li>在实践中发现，ul的四个li，最靠近右边的是第一个,因为右浮动，从右往左排列</li></ul></li></ul></blockquote></li></ol><h3 id="五、BFC规范和浏览器差异"><a href="#五、BFC规范和浏览器差异" class="headerlink" title="五、BFC规范和浏览器差异"></a>五、BFC规范和浏览器差异</h3><blockquote><ul><li>BFC(Box Formatting Context，块级格式上下文)是页面上的一个隔离的独立容器</li><li>容器里的子元素和容器外的元素互不干扰</li><li>元素浮动的第五个特性：“父元不设高度，子元浮动，会造成父元素高度塌陷”，其原因就是这个盒子没有形成BFC</li></ul></blockquote><ol><li>创建BFC的方法<blockquote><ul><li>方法1：float的值不是<code>none</code><ul><li>缺点：该方法可以实现效果，但没有意义，不可能随意给盒子设置浮动</li></ul></li><li>方法2：position的值不是<code>static</code>或<code>relative</code><ul><li>缺点：该方法可以实现，但不靠谱</li></ul></li><li>方法3：display的值是<code>inline-block</code>、<code>flex</code>、<code>inline-flex</code><ul><li>缺点：该方法可以实现，但没有意义，因为不可能随意更改盒子类型</li></ul></li><li>方法4：<code>overflow:hidden;</code><ul><li>缺点：该方法可以实现，但不满足所有的场景，例如想要使溢出的元素显示的情况；</li><li>但这是非常好用的方法，比其他方式使用的更多</li></ul></li></ul></blockquote></li><li>BFC的其他作用<blockquote><ul><li>BFC可以取消盒子margin塌陷：<ul><li>方法1：既可以解决父子元素也可以解决兄弟元素的外边距塌陷</li><li>方法2：可以解决父子元素之间的塌陷，但兄弟元素无效</li><li>方法3：<code>inline-block</code>和<code>inline-flex</code>的效果和方法1一样，但转成行内块元素时，相邻的行内块元素会产生空白间隙。<code>flex</code>对兄弟元素无效，只能解决父子元素之间的塌陷</li><li>方法4：可以解决<strong>父子元素</strong>之间垂直方向外边距塌陷问题，但解决不了兄弟元素之间的塌陷</li></ul></li><li>BFC可以阻止元素被浮动元素覆盖</li></ul></blockquote></li><li>浏览器差异<blockquote><ul><li>IE6、7浏览器使用haslayout机制和BFC规范略有差异</li></ul></blockquote><ul><li>比如：IE浏览器可以使用zoom:1属性，让盒子拥有layout<blockquote><ul><li>如果要制作兼容到IE6、7的网页时，尽量让网页布局变得简单，内部有浮动的盒子要设置height属性，规范编程，就没有问题</li></ul></blockquote></li></ul></li></ol><h3 id="六、清除浮动"><a href="#六、清除浮动" class="headerlink" title="六、清除浮动"></a>六、清除浮动</h3><blockquote><ul><li>清除浮动：浮动一定要封闭到一个盒子中，否则就会对页面后续元素产生影响</li></ul></blockquote><ol><li>清除浮动方法1<blockquote><ul><li>给父盒子设置<code>clear:both;</code>属性</li><li><code>clear</code>表示清除浮动对自己的影响，<code>both</code>表示左右浮动全部清除</li><li>该方法不推荐。父盒子不会被撑起来。</li></ul></blockquote></li><li>清除浮动方法2<blockquote><ul><li>在两个父盒子之间”隔墙”隔一个携带<code>clear:both;</code>的盒子</li><li>可以清除浮动，但不能撑起盒子。而且新增一个div对页面有影响</li><li>不推荐</li></ul></blockquote></li><li>清除浮动方法3<blockquote><ul><li>原理是让内部有浮动的父盒子形成BFC，它就能关闭住内部的浮动</li><li>在创建BFC的四个方法中，最好的方法是<code>overflow:hidden;</code>，但这个方法有局限性</li><li>不能解决兄弟元素的外边距塌陷</li></ul></blockquote></li><li>清除浮动方法4——最佳方法<blockquote><ul><li>使用<code>::after</code>伪元素，给盒子添加最后一个子元素</li><li>给<code>::after</code>设置<code>clear:both</code></li><li>别忘了写<code>content=&quot;&quot;;</code></li><li><code>display:block</code>,伪元素默认是行内元素，所以要把它转化为块级元素。若不转换，则父元素不能被撑起来。</li><li>不能解决兄弟元素的外边距塌陷</li><li>强烈推荐</li></ul></blockquote></li></ol><h3 id="七、浮动实战应用"><a href="#七、浮动实战应用" class="headerlink" title="七、浮动实战应用"></a>七、浮动实战应用</h3><blockquote><ul><li>浮动的元素一般都会在其外边套一个标准流</li></ul></blockquote><ol><li>实现左右两列式布局</li><li>实现一行多列式布局</li><li>三列式布局，中间自适应<blockquote><ul><li>注意点：<ul><li>body里先写左右，再写中间。左右盒子各自浮动，再填充中间元素</li><li>用怪异盒模型保持内边距和边框不变</li><li>用外边距控制中间元素位置</li><li>用伪元素+clear:both来清除浮动</li></ul></li></ul></blockquote></li><li>多行多列式布局</li><li>实现整站结构布局</li><li>作业1：前端必会的三种CSS布局技术</li><li>作业2：酷狗音乐热门榜单</li><li>小米商城产品展示效果</li></ol><h2 id="CSS定位、层叠顺序、层叠上下文"><a href="#CSS定位、层叠顺序、层叠上下文" class="headerlink" title="CSS定位、层叠顺序、层叠上下文"></a>CSS定位、层叠顺序、层叠上下文</h2><blockquote><ul><li>CSS中利用position属性用于指定一个元素在文档中的定位方式。元素的定位方式有五种类型：<table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>static</code></td><td>没有定位，元素出现在正常的流中(默认值，可以忽略)</td></tr><tr><td><code>relative</code></td><td>相对定位，相对于自身正常位置进行位置的调整</td></tr><tr><td><code>absolute</code></td><td>绝对定位，相对于其最近的定位的父元素定位，进行位置的调整</td></tr><tr><td><code>fixed</code></td><td>固定定位，相对于浏览器窗口进行位置调整</td></tr><tr><td><code>sticky</code></td><td>粘性定位，是基于用户的滚动位置来定位</td></tr></tbody></table><blockquote><p><code>static</code>相当于元素没有加定位效果，如果元素加了定位，后面需要去掉，可以添加<code>position:static;</code>|</p></blockquote></li></ul></blockquote><h3 id="一、相对定位"><a href="#一、相对定位" class="headerlink" title="一、相对定位"></a>一、相对定位</h3><blockquote><p>盒子可以想对自己&#x3D;&#x3D;原来的位置&#x3D;&#x3D;进行调整，称之为相对定位</p><ul><li>给需要添加相对定位的元素，加上<code>position:relative;</code></li><li>元素的位置通过(位置描述词):<code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>属性进行位置调整</li><li>属性值可以是正数也可以是负数<table><thead><tr><th>定位的位置属性</th><th>描述</th></tr></thead><tbody><tr><td><code>top</code></td><td>向下移动</td></tr><tr><td><code>bottom</code></td><td>向上移动</td></tr><tr><td><code>left</code></td><td>向右移动</td></tr><tr><td><code>right</code></td><td>向左移动</td></tr><tr><td>值可以为负数</td><td>即往规定方向相反移动</td></tr></tbody></table></li></ul></blockquote><blockquote><p>相对定位的特点</p><ul><li>相对定位的元素，会在“老家留坑”，本质上仍然是在原来的位置，即:元素的初始位置占据的空间会被保留</li><li>只不过渲染在新的地方而已，渲染的图形可以比喻成影子，不会对页面其他元素产生任何影响</li></ul></blockquote><h3 id="二、相对定位应用场景"><a href="#二、相对定位应用场景" class="headerlink" title="二、相对定位应用场景"></a>二、相对定位应用场景</h3><blockquote><ul><li>用来微调元素自身的位置(案例1，2，3)</li><li>可以当做绝对定位的参考盒子(绝对定位中会讲到)</li><li>用来提升自身的层级</li></ul></blockquote><ol><li>鼠标滑动到元素，元素少量位置偏移动画 <img src="相对定位应用场景1.gif"></li><li>网站导航 <img src="相对定位场景2.png"></li><li>导航(鼠标滑动带过下划线)<blockquote><ul><li>鼠标滑过时，背景颜色和a标签的文字一起变化。其前提是a标签是&#x3D;&#x3D;块级元素&#x3D;&#x3D;</li><li>知识点：块级元素没有设置宽高时，将自动撑满父盒子，但并不是继承！！！ <img src="相对定位场景3.png"></li></ul></blockquote></li><li>水平进度条<blockquote><ul><li>右浮动实现元素从右往左开始排列成一行，第一个排在最后面，最后一个排在最左边</li><li>通过相对定位微调线条位置，使其与圆形在垂直方向对其</li><li>利用<code>~</code>后续兄弟选择器，来选择他后面的元素，修改样式 <img src="相对定位场景4.png"></li></ul></blockquote></li></ol><h3 id="三、绝对定位"><a href="#三、绝对定位" class="headerlink" title="三、绝对定位"></a>三、绝对定位</h3><blockquote><p>盒子可以在浏览器中以坐标进行位置精准描述，拥有自己的绝对位置</p><ul><li>给需要添加绝对定位的元素，加上<code>position:absolute;</code></li><li>元素的位置通过(位置描述词)：<code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>属性进行调整位置</li><li>属性值可以是正数或负数<table><thead><tr><th>定位的位置属性</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>到上边的距离</td></tr><tr><td>bottom</td><td>到下边的距离</td></tr><tr><td>left</td><td>到左边的距离</td></tr><tr><td>right</td><td>到右边的距离</td></tr></tbody></table></li></ul></blockquote><blockquote><p><strong>绝对定位元素8大特性：</strong></p><ol><li>绝对定位的元素，相对离自己最近的定位的父元素进行位置调整</li></ol><ul><li>若父元素未定位(没有<code>position: ;</code>)，则用祖先元素定位，绝对定位是相对于定位的祖先元素进行位置调整</li></ul><ol start="2"><li>如果没有定位的父元素，则相对body进行位置调整</li><li>元素完全脱离文档流，释放器原本所占据的空间</li></ol><ul><li>不会对其他元素造成任何干扰，而是对他们进行压盖</li><li>脱离文档流的方法：浮动、绝对定位、固定定位</li><li>使用绝对定位的元素将会是一种漂浮状态</li></ul><ol start="4"><li>元素的层级提升，会覆盖在其他元素上</li><li>行内元素加上定位后，会具有行内块元素特性，支持宽高设置</li><li><code>margin:auto;</code>水平居中失效，因为它变成了行内块元素</li><li>定位元素未设置宽高情况下，同时设置top和bottom会改变元素高，同时设置left、right会改变元素宽</li><li>在元素设置了宽高情况下，同时设置top与bottom，会以top值为主，bottom不生效；同时设置left与right，则以left为主，right不生效</li></ol><ul><li>top &gt; bottom,left &gt; right</li></ul></blockquote><blockquote><p><strong>使盒子水平、垂直居中</strong></p><ol><li>方法1：</li></ol><ul><li>垂直居中：top&#x3D; [父盒子高度-子盒占位高(content+padding+border+margin)]&#x2F;2</li><li>水平居中：left&#x3D;[父盒子宽度-子盒占位宽(content+padding+border+margin)]&#x2F;2</li></ul><ol start="2"><li>方法2：</li></ol><ul><li>垂直居中：top:50%，margin-top:<code>-</code>自己高度的一半</li><li>水平居中：left:50%,margin-left:<code>-</code>自己宽度的一半</li><li>记得用负号</li></ul></blockquote><blockquote><p><strong>应用场景</strong></p><ul><li>绝对定位用来制作<strong>压盖、遮罩</strong>效果</li><li>结合CSS精灵使用</li><li>结合JS实现动画</li><li>绝对定位应用非常多，灵活度也很高，靠经验积累</li></ul></blockquote><ol><li>绝对定位实现黑色半透明遮罩层<blockquote><p>注意：</p><ul><li>伪元素+.hover的写法：<code>.box:hover::after</code>，中间不用空格</li></ul></blockquote></li><li>绝对定位实现带三角的会话框<blockquote><p>注意：</p><ul><li>用<code>border-radius</code>使背景图片&#x2F;图片变成圆形</li></ul></blockquote></li></ol><h3 id="四、固定定位"><a href="#四、固定定位" class="headerlink" title="四、固定定位"></a>四、固定定位</h3><blockquote><p><strong>介绍</strong></p><ul><li>给需要添加固定定位的元素加上position:fixed;</li><li>元素的位置通过位置描述词：left、top、right、bottom属性进行位置调整</li><li>属性值可以是正数或负数</li><li>固定定位只能以页面为参考点，并没有绝对定位的参考点</li><li>固定定位脱离标准文档流</li><li>除了其位置是相对于浏览器窗口而言以外，其他与绝对定位的特性一致</li></ul></blockquote><blockquote><p><strong>应用场景</strong></p><blockquote><p>不管浏览器的滚动条如何滚动，元素始终相对于&#x3D;&#x3D;浏览器窗口&#x3D;&#x3D;的位置不变</p></blockquote><ol><li>固定定位实现返回顶部</li><li>常见的登录弹窗效果 我的疑问：</li></ol><ul><li>点击登录怎么跳出登录框？a标签的href是否可以链接它？<ul><li>目前学到的东西还做不到</li></ul></li><li>点击登录框的取消，怎么返回原页面<ul><li>目前学到的东西还做不到</li></ul></li><li>mask的尺寸问题，怎么全页面遮罩？绝对定位top&#x3D;0,left&#x3D;0？<ul><li>固定定位，四个方向距离都&#x3D;0</li></ul></li><li>登录框怎么垂直、水平居中在页面上，不论界面怎么缩放。<ul><li>固定定位</li></ul></li></ul><pre><code>position:fixed;top:50%left:50%transform:translate(-50%,-50%)</code></pre><ol start="3"><li>左右固定，中间自适应</li></ol></blockquote><h3 id="五、粘性定位"><a href="#五、粘性定位" class="headerlink" title="五、粘性定位"></a>五、粘性定位</h3><blockquote><blockquote><p>它的诞生就是为了实现字母排序显示效果(应用场景2)<br><strong>粘性定位解读：</strong></p></blockquote><ul><li>给需要的添加粘性定位的元素，加上position:sticky;</li><li>粘性定位可以看做是相对定位与固定定位的混合产物(这里的固定定位，并不是上面第四点的position:fixed;只是具有相似点)</li><li>当滚动高度小于元素所在位置时，元素以&#x3D;&#x3D;相对&#x3D;&#x3D;定位呈现</li><li>当滚动高度大于元素所在位置时，元素以&#x3D;&#x3D;固定&#x3D;&#x3D;定位呈现</li><li>当滚动高度大于(元素的父元素底部与浏览器高)时，元素相对于父元素定位，一起移走</li><li>粘性定位相对离他最近的一个拥有“滚动机制”的祖先元素(当该祖先的overflow是hidden、scroll、auto、overplay时)定位&#x3D;&#x3D;或者&#x3D;&#x3D;直接块级父元素定位<blockquote><p>注意：</p></blockquote></li><li>当body为最近”滚动机制”的祖先，此时要看到元素相对浏览器固定效果，元素的&#x3D;&#x3D;直接父元素&#x3D;&#x3D;高度一定要大于元素本身</li><li>当元素的父级拥有”滚动机制”，若有滚动条，则元素固定在父级元素的最顶部</li></ul></blockquote><ol><li>当body为最近滚动机制的祖先<blockquote><ul><li>使用粘性定位的元素，其父元素高度一定要大于它自身的高度</li><li>使用粘性定位的元素，其父元素高度一定要大于它自身的高度</li><li>当滚动高度小于元素所在位置时，该元素随滚动条一起移动，但相对位置不变</li><li>当元素所在位置&lt;滚动高度&lt;其父元素的底部，该元素固定在顶部，与body的距离&#x3D;设置的position值</li><li>当元素所在位置大于其父元素底部时，该元素底部与父元素底部重合后，一起移走</li></ul></blockquote></li><li>当父元素拥有滚动机制<blockquote><ul><li>父盒子具有overflow，且父盒子高度比它大</li><li>当滚动body的滚动条时，该盒子会整体随页面滑动</li><li>当滚动高度小于元素所在位置时，该元素随滚动条一起移动，但相对位置不变</li><li>当元素所在位置&lt;滚动高度&lt;其父元素的底部，该元素固定在顶部，与body的距离&#x3D;设置的position值</li><li>由于父盒子高度一定小于子元素总高度(不然不会出现滚动条)，所以元素所在位置不会大于其父元素底部</li></ul></blockquote></li></ol><blockquote><p><strong>粘性定位应用场景</strong></p><ol><li>头部和左侧吸顶盒效果</li></ol><ul><li>我自己做的存在的问题<ul><li>左边侧栏无法实现效果</li><li>右侧盒子的书写方式可以更简洁，用序号选择器</li></ul></li><li>看视频后的解决方式<ul><li>左右侧栏用一个盒子包裹起来，左右浮动</li><li>一定要消除浮动，不然父盒子高度塌陷就实现不了粘性定位</li><li>给父盒子加上外边距以保持与第二个盒子之间的距离</li><li>给右侧栏加:nth-child()控制颜色,偶数2n,奇数2n-1</li></ul></li></ul><ol start="2"><li>字母排序显示效果</li></ol><ul><li>注意：用定义列表dl dt dd</li></ul><ol start="3"><li>表格首行冻结</li></ol><ul><li>注意：<ul><li>使表格贴合父盒子：width: 100%;</li><li>将表格边框合并成单边框：border-collapse: collapse;</li></ul></li></ul></blockquote><h3 id="六、定位的总结"><a href="#六、定位的总结" class="headerlink" title="六、定位的总结"></a>六、定位的总结</h3><blockquote><table><thead><tr><th>定位类型</th><th>描述</th><th>应用场景</th></tr></thead><tbody><tr><td>相对定位relative</td><td>相对自身原来的位置占位，站着原来的位置</td><td>1.微调元素的位置，但还占据着原来的空间 2.只想提升元素的层级，但还是站着原来的空间</td></tr><tr><td>绝对定位absolute</td><td>相对离自己最近的定位的父元素定位，原来的位置被释放，相当于悬浮在页面中，会覆盖在其他元素的上面显示</td><td>1.一个元素想覆盖在另一个元素上 2.配合JS来实现动画效果</td></tr><tr><td>固定定位fixed</td><td>相对浏览器窗口进行定位</td><td>你想让一个元素相对浏览器的位置一直不动</td></tr><tr><td>粘性定位</td><td>相对离自己最近的拥有滚动机制的父元素定位，或，直接父元素定位</td><td>吸附效果、冻结效果</td></tr></tbody></table></blockquote><h3 id="七、z-index设置定位元素层叠顺序"><a href="#七、z-index设置定位元素层叠顺序" class="headerlink" title="七、z-index设置定位元素层叠顺序"></a>七、z-index设置定位元素层叠顺序</h3><blockquote><blockquote><p>定位的元素脱离了正常文档流，它相当于漂浮在文档上面。那如果有很多元素都用了定位，那如何确定这些元素的层叠顺序？&gt;&gt;z-index就是用来指定定位元素的堆叠顺序</p></blockquote></blockquote><blockquote><p>同一层叠上下文中z-index值的特性</p><ul><li>默认值是0</li><li>值可正可负</li><li>z-index值相同的元素，写在后面的会覆盖前面的</li><li>值越大，元素越在上面显示</li><li>只针对定位元素有效，对其他元素无效</li></ul></blockquote><h3 id="八、CSS中的层叠上下文"><a href="#八、CSS中的层叠上下文" class="headerlink" title="八、CSS中的层叠上下文"></a>八、CSS中的层叠上下文</h3><ol><li>什么是层叠上下文<blockquote><ul><li>它是一个HTML中的三维概念</li><li>在css2.1规范中有明确强调，每个css盒模型都是处在一个三维空间里面，他们分别处在平面的X轴、Y轴以及表示层叠的Z轴<img src="层叠上下文.png">>注意： </li><li>但并不是所有的盒子都会在Z轴发生层叠，默认情况下，HTML元素使沿XY轴平铺，元素默认从上到下、从左往右依次排列 </li><li>一旦发生堆叠，就能感受到Z轴的存在。不管有无层叠，Z轴都存在</li></ul></blockquote></li></ol><blockquote><p><strong>具象化解释：</strong></p><ul><li>body这个html根元素，天生具有上下文。它是爷爷，其他所有元素都同属于&#96;body&#96;&#96;这个层叠上下文。</li><li>在body中可以放普通元素，还可以放创建了层叠上下文的元素,就像爷爷可以有很多儿子。每个儿子，各自等级不同、先后顺序也不同；创建了层叠上下文的元素就像当了官，它比普通元素等级更高，而且官越高等级越高。</li><li>每个儿子还会生更多孩子，也就是爷爷的孙子。子凭父贵，父亲等级越高，它在孙子辈里等级就越高。</li><li>这里的爷爷、儿子、孙子等辈分是指不同的层叠上下文。与父盒子盒&#x2F;父元子元有区别</li></ul></blockquote><blockquote><ul><li>问题1：怎么当官？(怎么提高&#x2F;降低元素的等级) 原理<ul><li>在同一层叠上下文中，创建了层叠上下文的**&gt;**普通元素</li><li>在同一层叠上下文中，z-index值越高的官越大，未设置z-index的定位元素默认z-index&#x3D;0</li><li>在同一层叠上下文中，相同等级的元素，写在后面的比写在前面的大，后面的覆盖前面的 </li><li>方法<ul><li><ol><li>后出生(写在后面)</li></ol></li><li><ol start="2"><li>当官(创建层叠上下文)</li></ol></li><li><ol start="3"><li>提高官职(提高z-index的值)</li></ol></li></ul></li></ul></li></ul></blockquote><ol><li>创建层叠上下文的方法<blockquote><ul><li>天生的：body(又称为根层叠上下文)<ul><li>我们在写body中的HTML时，默认就是处在根层叠上下文中</li></ul></li><li>定位元素的传统层叠上下文(当官老办法，但限制于定位元素)<ul><li><code>position:relative/absolute</code>的定位元素，当其z-index的值不是auto的时候就会创建层叠上下文</li><li><code>position:fixed/sticky</code>的定位元素直接创建，不用管z-index的值</li></ul></li><li>CSS3时代的新方法(新时代新办法)<ul><li>z-index不是auto的flex项(父元素display:flex|&gt;   inline-flex)会创建层叠上下文</li><li>元素的opacity值不是1</li><li>元素的transform值不是none</li><li>元素的mix-blend-mode的值不是normal</li><li>元素filter值不是none</li><li>元素的isolation值是isolate</li><li>will-change指定的属性值为上面的任意一个</li><li>元素的-webkit-overflow-scrollin设为touch</li></ul></li></ul></blockquote></li></ol><blockquote><ul><li>问题2：普通元素分三六九等吗？怎么分？(普通元素的层级) <img src="层叠顺序.png">- ！！！首先在同一层叠上下文中，背景和边框<z-index=负数<普通元素<z-index=0的定位元素<z-index值为正数的定位元素- 普通元素： block块级元素==<==float浮动盒子==<==inline或line-block盒子>在爷爷面前是这套规矩，在儿子辈、孙子辈等每一个小社会也遵循这套规矩，只新增**子凭父贵**这一条规矩</li></ul></blockquote><ol><li>如何确定两个元素的层叠顺序<blockquote><ul><li>先确定它们父亲是谁(确定他们所在的层叠上下文)</li><li>如果是同一父亲，那就直接比较元素类型、先后顺序、z-index的值</li><li>如果不是同一父亲，那就比较父亲之间的官级大小，子凭父贵</li></ul></blockquote></li></ol><h3 id="九、阿里图标库-icon-font"><a href="#九、阿里图标库-icon-font" class="headerlink" title="九、阿里图标库-icon-font"></a>九、阿里图标库-icon-font</h3><blockquote><p>可以下载各种样式的图标 使用方法</p><ul><li>把每个图标直接下载到本地</li><li>加入购物车，添加至项目中下载压缩包(压缩包里会有使用方法)<ul><li>Unicode引用：<ul><li>把第一步中的url改成自己电脑的相对路径</li><li>在第二步复制的代码中.iconfont中修改颜色大小</li><li>在第三步的内容中填写自己想要的图标编码</li></ul></li><li>Font class引用：<ul><li>把第一步中的href地址改成自己电脑里的相对路径</li><li>修改第二步的类名，根据图标下的名字&#x2F;看iconfon.css</li><li>修改图标颜色、大小：首先这些已经设置过了，若要修改则需提高优先级</li></ul></li><li>symbol引用</li></ul></li></ul></blockquote><h3 id="十、综合实践"><a href="#十、综合实践" class="headerlink" title="十、综合实践"></a>十、综合实践</h3><ol><li>酷狗音乐精选歌单效果<blockquote><ul><li>a标签包裹全部元素</li><li>遮罩要放在最上面，position+::after就可以实现</li></ul></blockquote></li><li>小米商城右侧悬浮菜单</li><li>带左右按钮的自动轮播图效果布局</li><li>CSS实现二级导航下拉菜单<blockquote><ul><li>下拉菜单：用绝对定位</li><li>下拉菜单和导航栏的居中对齐：left:50%,margin-left:自身宽度的一半</li><li>鼠标放置效果：给导航栏的li设置:hover</li></ul></blockquote></li><li>CSS时间轴效果布局<blockquote><ul><li>时间轴布局重要！！！</li><li>限制宽度，利用左右浮动的盒子，设置左右边框样式来绘制时间轴</li><li>双引号样式：字体：Arial</li></ul></blockquote></li></ol><h2 id="margin负值的最佳实践"><a href="#margin负值的最佳实践" class="headerlink" title="margin负值的最佳实践"></a>margin负值的最佳实践</h2><h3 id="一、margin负值特性"><a href="#一、margin负值特性" class="headerlink" title="一、margin负值特性"></a>一、margin负值特性</h3><ul><li>margin-left设置负值时，元素自身向左移动，后面的元素也向左移动</li><li>margin-right设置负值时，自身不受影响，右边元素向左移动</li><li>margin-top设置负值时，元素自身向上移动，下面的元素也向上移</li><li>margin-bottom设置负值时，自身不受影响，下方元素向上移动<blockquote><p>right和bottom设置负值时，就像是在页面上减小了占位，后面的元素随之补上，但实际上占位并没有变</p></blockquote></li></ul><h3 id="二、margin塌陷时合并规则"><a href="#二、margin塌陷时合并规则" class="headerlink" title="二、margin塌陷时合并规则"></a>二、margin塌陷时合并规则</h3><ul><li>&#x3D;&#x3D;口诀&#x3D;&#x3D;：符号相同时，看绝对值，听老大的；符号不同时，相加减</li></ul><blockquote><p>介绍</p></blockquote><ul><li>margin重叠也叫塌陷、合并、床头</li><li>只针对垂直方向，不针对水平方向<br><strong>分两种情况</strong><ul><li>兄弟元素之间：上下外边距重叠</li><li>父子元素之间：上下外边距合并(父元未设置内边距和边框时)</li></ul></li><li>应用场景和最佳实践</li></ul><ol><li>等高布局-左右布局：不管做左边盒子中内容多少，其高度都会随右边的粉色盒子变高</li></ol><ul><li>给左边盒子，用&#x3D;&#x3D;正值&#x3D;&#x3D;pdding-bottom增加盒子高度，并且加相同值的&#x3D;&#x3D;负值&#x3D;&#x3D;的margin-bottom抵消内边距的占位</li><li>给父盒子加overflow-hidden</li></ul><ol start="2"><li>一行多列网格布局</li></ol><ul><li>margin-left:-1px;使边框重叠在一起</li></ul><ol start="3"><li>头像叠加效果</li></ol><ul><li>先让每个子盒向左移动负外边距</li><li>然后单独修改第一个盒子的左外边距</li></ul><ol start="4"><li>元素水平垂直居中</li></ol><ul><li>先利用绝对定位使子盒子移动父盒子宽高的一半</li><li>top:50%、left:50%</li><li>再利用负外边距使子盒反向移动自身宽高的一半</li><li>一定给父盒子加相对定位</li></ul><ol start="5"><li>圣杯布局</li></ol><h2 id="圆角、阴影、文本图像处理、CSS函数"><a href="#圆角、阴影、文本图像处理、CSS函数" class="headerlink" title="圆角、阴影、文本图像处理、CSS函数"></a>圆角、阴影、文本图像处理、CSS函数</h2><h3 id="一、圆角"><a href="#一、圆角" class="headerlink" title="一、圆角"></a>一、圆角</h3><ol><li>简介</li></ol><ul><li><p>border-radius用来设置元素的(4个方向)外边框1&#x2F;4圆角效果 </p><table><thead><tr><th>圆角类型</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>圆角边框</td><td>当使用一个半径时，确定一个圆，表示四个不同方向上边框圆角的半径大小</td><td>border-radius:50px;</td></tr><tr><td>椭圆边框</td><td>当使用两个半径时，确定一个椭圆；两个半径之间用&#x3D;&#x3D;反斜杠&#x3D;&#x3D;&#x2F;分隔，第一个值是水平半径，第二个值是垂直半径</td><td>border-radius:50px&#x2F;30px;</td></tr></tbody></table></li><li><p>圆角效果：是从边框四个角出发，根据半径得到圆心，与四条边相交，得到的1&#x2F;4圆角</p></li></ul><ol><li><p>圆的4种不同值写法：顺时针方向</p><table><thead><tr><th>属性值</th><th>举例</th><th>说明</th></tr></thead><tbody><tr><td>单值写法</td><td>border-radius:50px;</td><td>上右下左四个方向的圆角半径</td></tr><tr><td>双值写法</td><td>border-radius:30px 40px;</td><td>斜对角；第一个值：左上角和右下角；第二个值：右上角和左下角</td></tr><tr><td>三值写法</td><td>border-radius:30px 50px 80px;</td><td>分别表示：左上角，右上角和左下角，右下角；</td></tr><tr><td>四值写法</td><td>border:10px 20px 30px 40px;</td><td>分别表示：左上角，右上角，右下角，左下角</td></tr></tbody></table></li><li><p>椭圆的4种不同值的写法</p><table><thead><tr><th>属性值</th><th>举例</th><th>说明</th></tr></thead><tbody><tr><td>单值写法</td><td>border-radius:50px&#x2F;30px;</td><td>50px表示四个不同方向椭圆的水平半径，30px表示四个不同方向椭圆垂直半径</td></tr><tr><td>双值写法</td><td>border-radius:10px 20px&#x2F;30px 50px;</td><td>斜对角；左上角和右下角：水平半径10px，垂直半径30px；右上角和左下角：水平半径30px，垂直半径50px</td></tr><tr><td>三值写法</td><td>border-radius:30px 50px 60px&#x2F;20px 30px 50px;</td><td>分别表示：左上角30px&#x2F;20px，右上角和左下角50px&#x2F;30px，右下角60px&#x2F;50px；</td></tr><tr><td>四值写法</td><td>border:10px 20px 30px 40px&#x2F;40px 30px 20px 10px;</td><td>分别表示：左上角10px&#x2F;40px，右上角20px&#x2F;30px，右下角30px&#x2F;20px，左下角40px&#x2F;10px</td></tr></tbody></table></li><li><p>百分比表示法</p></li></ol><ul><li>百分比是相对于当前元素的&#x3D;&#x3D;可视宽高&#x3D;&#x3D;而言的</li><li>水平半径相当于元素的可视宽而言，水平半径&#x3D;(width+padding+border)*百分比</li><li>垂直半径相当于元素的可视高而言，垂直半径&#x3D;(height+padding+border)*百分比</li></ul><ol start="4"><li>单独设置四个方向圆角-小属性</li></ol><ul><li>此时，写一个值表示圆，写两个值表示椭圆，&#x3D;&#x3D;并且椭圆&#x3D;&#x3D;的两个值不需要用反斜杠分隔</li><li>先上下后左右</li><li>主要是用来层叠大属性的 <table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>border-top-left-radius</td><td>左上角</td></tr><tr><td>border-top-right-radius</td><td>右上角</td></tr><tr><td>border-bottom-left-radius</td><td>左下角</td></tr><tr><td>border-bottom-right-radius</td><td>右下角</td></tr></tbody></table></li></ul><pre><code>左上角椭圆：border-top-left-radius:30px 40px;右下角圆：border-bottom-right-radius:30px;</code></pre><h3 id="二、盒子阴影"><a href="#二、盒子阴影" class="headerlink" title="二、盒子阴影"></a>二、盒子阴影</h3><blockquote><p>box-shadow给盒子添加阴影效果，阴影是<strong>不占空间</strong>的</p></blockquote><ul><li>写法：<code>box-shadow:[inset] X偏移 Y偏移 模糊半径 [扩散半径] 颜色;</code>(右和上为正值方向)</li><li><code>[]</code>：表示这个值可以省略不写</li><li>inset:表示内阴影，当需要设置内阴影时，才添加</li><li>X偏移:阴影在x轴(水平)方向偏移量；正值表向右偏移，负值表向左偏移</li><li>Y偏移:阴影在Y轴(垂直)方向偏移量；正值表向上偏移，负值表向下偏移</li><li>模糊半径：值只能大于等于0，表示阴影的模糊半径</li><li>扩散半径：取正值表示阴影扩大，取负值表示阴影收缩。默认为0，此时阴影与元素同样大</li><li>颜色表示阴影的颜色</li></ul><ol><li>简单阴影</li></ol><ul><li><code>box-shadow:x偏移 y偏移 模糊量 颜色；</code></li></ul><ol start="2"><li>阴影扩展</li></ol><ul><li><code>box-shadow:x偏移 y偏移 模糊量 扩散半径 颜色；</code></li></ul><ol start="3"><li>内阴影</li></ol><ul><li><code>box-shadow:inset X偏移 Y偏移 模糊半径 扩散半径 颜色;</code></li></ul><ol start="4"><li>多个阴影</li></ol><ul><li>如果一个盒子有多个阴影，则每个阴影之间用<code>,</code>分隔</li><li>当阴影个数<code>&gt;1</code>时，阴影应用顺序为从前往后(z轴)，第一个指定阴影在最顶部显示</li><li>内阴影不管写在哪个位置，都会在外阴影上面</li></ul><ol start="5"><li>去掉阴影</li></ol><ul><li><code>box-shadow:none;</code></li></ul><ol start="6"><li>实战案例-纸张效果</li></ol><h3 id="三、文本阴影"><a href="#三、文本阴影" class="headerlink" title="三、文本阴影"></a>三、文本阴影</h3><ul><li><code>text-shadow</code>用来为文字添加阴影</li><li><code>text-shadow:X偏移 Y偏移 模糊半径 颜色;</code></li><li>多个阴影之间用逗号分隔</li><li>当阴影个数<code>&gt;1</code>时，阴影应用顺序从前到后，第一个指定阴影在最顶部显示</li></ul><h3 id="四、文本溢出显示省略号"><a href="#四、文本溢出显示省略号" class="headerlink" title="四、文本溢出显示省略号"></a>四、文本溢出显示省略号</h3><ol><li>单行文本溢出显示省略号</li></ol><ul><li>写法：</li></ul><pre><code>&lt;!-- 文字不换行 --&gt;white-space:nowrap;&lt;!-- 超出显示省略号 --&gt;text-overflow:ellipsis;&lt;!-- 超出部分隐藏 --&gt;overflow:hidden;</code></pre><ol start="2"><li>多行文本溢出显示省略号</li></ol><pre><code>&lt;!-- 超出部分隐藏 --&gt;overflow:hidden;&lt;!-- 超出显示省略号 --&gt;text-overflow:ellipsis;&lt;!-- 对象作为弹性盒子模型显示 --&gt;display:-webkit-box;&lt;!-- 快容器中的内容限制为指定行数 --&gt;-webkit-line-clamp:2;&lt;!-- 弹性盒子对象的子元素排列方式为竖排 --&gt;-webkit-box-orient:vertical;</code></pre><blockquote><p>注意：只有当元素的高&#x3D;<code>line-height</code>大小*<code>-webkit-line-clamp</code>时，才能显示出正确的效果</p></blockquote><ul><li>所以，一定要写行高，盒子高度根据行高和指定显示行数来设置，例如想让行高为25px的两行文字显示，则盒子高度为50px。</li></ul><h3 id="五、元素不透明度"><a href="#五、元素不透明度" class="headerlink" title="五、元素不透明度"></a>五、元素不透明度</h3><ul><li><p><code>opacity</code>指定了一个元素的不透明度</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>元素完全透明(即元素不可见)</td></tr><tr><td>0.0~1.0之间</td><td>元素半透明(元素背后的背景可见)</td></tr><tr><td>1</td><td>元素完全不透明(元素后面的背景不可见)</td></tr></tbody></table></li><li><p>如果超出0.0~1.0的范围，也会有效，但是会被解析为在取值范围内&#x3D;&#x3D;最靠近&#x3D;&#x3D;他的值|</p></li><li><p>可以用<code>opacity:0</code>隐藏一个元素，因为opacity会让这个元素及其子元素一起透明。</p></li><li><p>当<code>opacity</code>的属性值不为1时，元素会创建自己的层叠上下文</p></li></ul><blockquote><p>对比学习</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>visibility:hidden</code></td><td>隐藏元素，但元素还占着原有的空间，在DOM树中</td></tr><tr><td><code>display:none</code></td><td>元素隐藏，不站着原来的空间，不在DOM树中</td></tr><tr><td><code>background-color:rgba(0,0,0,0.1)</code></td><td>仅背景颜色透明，并不影响元素中的内容</td></tr><tr><td><code>opacity:0;</code></td><td>元素透明，连同其内容和子元素一起透明掉</td></tr><tr><td><code>overflow:hidden</code></td><td>内容超出部分隐藏，影响的是子元素</td></tr></tbody></table></blockquote><h3 id="六、filter滤镜-图片模糊"><a href="#六、filter滤镜-图片模糊" class="headerlink" title="六、filter滤镜-图片模糊"></a>六、filter滤镜-图片模糊</h3><blockquote><p><code>filter:blur()</code>函数用于将高斯模糊效果应用于元素(图像)</p></blockquote><ul><li>单位是px</li><li>可以利用<code>filter:blur</code>与<code>background-size</code>的结合来实现背景模糊效果<ul><li>将背景放大到150%，然后模糊。参考艾编程官网老师们的简介</li></ul></li></ul><h3 id="七、object-fit-图片裁剪"><a href="#七、object-fit-图片裁剪" class="headerlink" title="七、object-fit 图片裁剪"></a>七、object-fit 图片裁剪</h3><ul><li>指定&#x3D;&#x3D;可替换元素&#x3D;&#x3D;的内容应该如何适应到其使用的高度和宽度确定的框</li><li>典型的可替换元素包括：img、video、iframe、embed</li><li>这个效果类似于<code>background-size</code><ul><li>但<code>object-fit</code> 在对齐时，是从元素框中间向两边的方式来填充</li><li>而<code>background-size</code>默认是是从左上角向右下角来填充，如果想设置以中间向两边，需要设置<code>background-position:center</code></li></ul></li></ul><p>|属性值|描述|<br>|contain|被替换的内容将被缩放，<strong>保持元素的宽高比</strong>，<strong>全部</strong>填充在内容框内|<br>|cover|被替换的内容将被缩放，<strong>保持元素的宽高比****，</strong>填满**整个内容框|<br>|fill|默认效果，被替换的内容正好填充元素的内容框，内容可能会被拉伸或压缩变形|<br>|none|被替换的内容保持其原有的尺寸|<br>|scale-down|内容的尺寸与<code>none</code>或<code>contain</code>中的一个相同，取决于他们两个之间谁得到的对象尺寸会更小一些|</p><ul><li>应用：防止图片拉伸或挤压-用户头像<ul><li>父盒子设置宽高</li><li>图片宽高设置100%全适应</li><li>添加<code>object-fit:cover</code>来等比例裁剪图片尺寸</li></ul></li></ul><h3 id="八、防止拖拽文本域"><a href="#八、防止拖拽文本域" class="headerlink" title="八、防止拖拽文本域"></a>八、防止拖拽文本域</h3><ul><li>resize属性规定是否可让用户调整元素的尺寸</li><li><code>textarea</code>表示多行文本框，拖动它的右下角可调整尺寸</li><li>写法：<code>textarea:none;</code></li></ul><h3 id="九、calc函数"><a href="#九、calc函数" class="headerlink" title="九、calc函数"></a>九、calc函数</h3><ul><li>用于动态计算长度值</li><li>写法：<code>width:calc(100px + 200px);</code></li><li>使用要点：<ul><li>支持<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>运算</li><li>运算符前后都需要保留一个空格，否则不生效，<code>*</code>、<code>/</code>可以没有空格，但建议有</li><li>任何长度值都可以使用calc()函数进行计算</li><li>可以使用百分比、px、em、rem等单位</li><li>使用标准的数学运算优先级规则</li></ul></li></ul><h3 id="十、var函数"><a href="#十、var函数" class="headerlink" title="十、var函数"></a>十、var函数</h3><ol><li><code>:root</code>选择器</li></ol><ul><li>用于匹配文档的htmlm根元素</li><li>与html选择器的区别在于：<code>:root</code>选择器的优先级要高于html标签选择器</li></ul><ol start="2"><li>var函数解读</li></ol><ul><li>var函数用于插入自定义的属性值</li><li>如果一个属性值在<strong>多处</strong>被使用，该方法就很有用</li><li>自定义属性一定要以<code>--</code>开头</li><li>&#x3D;&#x3D;就近原则&#x3D;&#x3D;，自定义属性会沿着父元素一直往外找，以最近找到的为主</li><li>应用场景：<ul><li>通常自定义属性值是写在:root选择器中，并且:root选择器会放在css的最上面，这样所有选择器就能用到这个自定义变量属性</li></ul></li><li>写法：</li></ul><pre><code>:root&#123;    &lt;!-- 自定义属性 --&gt;    --font-color:red;&#125;h3&#123;    color:var(--font-color);&#125;</code></pre><h3 id="十一、专项案例训练"><a href="#十一、专项案例训练" class="headerlink" title="十一、专项案例训练"></a>十一、专项案例训练</h3><ol><li>CSS开发天猫登录注册页<blockquote><p>没想到的地方</p></blockquote></li></ol><ul><li>天猫logo和登录框放在一个盒子里居中</li><li>表单元素：<code>option</code>、<code>input</code></li><li>区号部分：<ul><li>select：背景为选择图标，字体颜色设置为透明，宽高设置为图标大小</li><li>option：字体颜色为黑色</li></ul></li></ul><pre><code>&lt;dix class=&quot;box&quot;&gt; &lt;i&gt;+86&lt;/i&gt; &lt;select name=&quot;&quot; id=&quot;&quot;&gt; &lt;option value=&quot;+86&quot;&gt;+86中国大陆&lt;/option&gt;&lt;/select&gt;&lt;/div&gt;</code></pre><ul><li><code>pointer-events:none;</code>：盒子不受指针、click的影响</li><li>span标签之间的间隙：父盒子font-size&#x3D;0；</li><li>有些地方可以用怪异盒模型</li><li>最后一行可以用<code>text-align:right</code>水平居右，还有<code>cursor:pointer</code></li></ul><blockquote><p>需要用到JS的地方</p></blockquote><ul><li>区号，i绑定ption的value</li><li>登录方式的切换</li></ul><ol start="2"><li>CSS表格布局(QQ音乐排行榜效果)<blockquote><p>老师做的：</p></blockquote></li></ol><ul><li>用table标签</li><li>边框处理：缩小边距——<code>border-spacing:0</code>,边框重合——<code>border-collapse:collapse</code></li><li>不同列单独设置：在table和tr之间写上下面的代码，span表示<strong>选多少列</strong>，class是各列的类名</li></ul><pre><code>&lt;table&gt;  &lt;colgroup&gt;    &lt;col span=&quot;&quot; class=&quot;&quot;&gt; &lt;/clogroup&gt;</code></pre><ul><li>滑动效果：歌名变色，出现三个按钮，歌曲介绍有省略号<ul><li>三个按钮用display</li><li>省略号：滑动之后宽度缩短，并用单行文本溢出省略代码</li></ul></li><li>第三列不能设置宽度，自适应。用right、left</li></ul><h2 id="transtion过渡动画与animation自定义动画"><a href="#transtion过渡动画与animation自定义动画" class="headerlink" title="transtion过渡动画与animation自定义动画"></a>transtion过渡动画与animation自定义动画</h2><h3 id="一、transition过渡动画"><a href="#一、transition过渡动画" class="headerlink" title="一、transition过渡动画"></a>一、transition过渡动画</h3><blockquote><p><strong>如何理解过渡动画？</strong></p></blockquote><ul><li>一个元素由A状态经过一段时间变化成B状态。我们只需要定义其开始和结束的状态</li><li>而它中间的状态会自己添加”补间动画”</li><li>以前，网页的特效基本都是由JS定时器实现的，现在追捕改为使用CSS3过渡</li><li>优点：动画更细腻，内存开销小</li><li>兼容性：移动PC都兼容，但是需要加上对应的浏览器前缀<br><strong>过渡动画何时发生？</strong></li><li>当属性值发生变化时，才会触发transition动画</li><li>transition动画主要与<code>:hover</code>配合，来实现鼠标滑动动画效果</li></ul><ol><li>基本语法<blockquote><p><code>transition:transition-property transition-duration [transition-timing-function] [transition-delay];</code></p><ul><li>后面两个可以省略不写</li></ul></blockquote></li></ol><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>transition-property</code></td><td>指定CSS属性的name，哪些属性要过渡</td></tr><tr><td><code>transition-duration</code></td><td>transition效果需要指定多少秒或毫秒才能完成，动画时间</td></tr><tr><td><code>transition-timing-function</code></td><td>指定transition效果的转速曲线，变化曲线</td></tr><tr><td><code>transition-delay</code></td><td>定义transition效果开始的时候(延迟时间)</td></tr></tbody></table><ol start="2"><li>可参与过渡的属性<blockquote><p><strong>可参与过渡的属性</strong></p></blockquote></li></ol><ul><li>所有数值类型的属性，都可参与过度</li><li>比如：width、height、left、top、border-radius、font-size、opacity </li><li>背景颜色和文字都可以被过渡</li><li>所有的变形(包括2D和3D)都能被过渡</li><li>在CSS中90%的属性都可以辈过渡<blockquote><p><strong>不能</strong>参与过渡动画的属性</p></blockquote></li><li>float和position</li><li>display无法过渡</li><li>font-family等</li></ul><ol start="3"><li>特殊属性：all</li></ol><ul><li>需要所有属性参与过渡，即定义为all</li><li>all不要随意使用，会引发效率问题，如果只需要某一个属性过渡，还是要指定特定的属性</li></ul><ol start="4"><li>定义多个过渡动画</li></ol><ul><li>多个过渡动画之间用<code>,</code>隔开</li></ul><ol start="5"><li>过渡的四个小属性<table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>transition-property</code></td><td>指定CSS属性的name，哪些属性要过渡</td></tr><tr><td><code>transition-duration</code></td><td>transition效果需要指定多少秒或毫秒才能完成，动画时间</td></tr><tr><td><code>transition-timing-function</code></td><td>指定transition效果的转速曲线，变化曲线</td></tr><tr><td><code>transition-delay</code></td><td>定义transition效果开始的时候(延迟时间)</td></tr></tbody></table></li></ol><ul><li>多个值之间用逗号隔开，没有指定的值，以属性第一个值为准</li></ul><ol start="6"><li>时间函数</li></ol><ul><li>时间函数(transition-timing-function),管理着动画在单位帧内播放的速度曲线<blockquote><p><strong>时间函数的预设值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>linear</code></td><td>规定以相同速度开始至结束的过渡效果cubic-bezier(0,0,1,1)</td></tr><tr><td><code>ease</code></td><td>规定慢速开始，然后变快，然后慢速结束的过渡效果(cubic-bezier(0.25,0.1,0.25,1))</td></tr><tr><td><code>ease-in</code></td><td>规定以慢速开始的过渡效果cubic-bezier(0.42,0,1,1)</td></tr><tr><td><code>ease-out</code></td><td>规定以慢速结束的过渡效果cubic-bezier(0,0,0.58,1)</td></tr><tr><td><code>ease-in-out</code></td><td>等于以慢速开始和结束的过渡效果cubic-bezier(0.42,0,0.58,1)</td></tr><tr><td><code>cubic-bezier(n,n,n,n)</code></td><td>在cubic-bezier函数中定义自己的值，0~1之间</td></tr></tbody></table></blockquote></li></ul><blockquote><p>贝塞尔曲线用法</p></blockquote><ul><li>官方网址上在线生成<a href="https://cubic-bezier.com/">https://cubic-bezier.com/</a></li><li>还可以在网页上右击审查元素，在代码的控制面板当中来调整贝塞尔曲线，来调节运动速度</li></ul><h3 id="二、transition过渡动画实战案例"><a href="#二、transition过渡动画实战案例" class="headerlink" title="二、transition过渡动画实战案例"></a>二、transition过渡动画实战案例</h3><ol><li>鼠标滑动，背景从透明到半透明效果</li><li>鼠标滑动，文字从下往上滑动效果</li></ol><ul><li>父盒子设置相对定位、overflow-hidden</li><li>用盒子装文字，设置绝对定位，鼠标滑动时bottom改变</li></ul><ol start="3"><li>商城右侧通栏导航</li></ol><ul><li>鼠标滑动后出现的框，在点击之前，宽度&#x3D;0，字体颜色为透明色</li></ul><h3 id="三、animation自定义动画"><a href="#三、animation自定义动画" class="headerlink" title="三、animation自定义动画"></a>三、animation自定义动画</h3><blockquote><p>步骤：先定义动画，再调用动画</p></blockquote><ol><li>动画的定义<blockquote><p><strong>使用<code>@keyframes</code>关键帧来定义动画</strong></p></blockquote></li></ol><ul><li>建动画的原理是，将一套CSS样式逐渐变化为另一套样式</li><li>在动画过程中，您可以多次更改CSS样式的设定</li><li>动画执行各阶段时间，可以通过百分比来规定改变发生的时间，或者通过关键词<code>from</code>和<code>to</code></li><li><code>from</code>和<code>to</code>等价于0%和100%,from和0%是动画的开始时间，to和100%是动画的结束时间</li><li>动画名是自己起的</li><li>写法</li></ul><pre><code>@keyframes 动画名&#123;&lt;!-- 起始状态 --&gt;from/0% &#123;样式&#125;&lt;!-- 结束状态 --&gt;to/100%&#123;样式&#125;&#125;</code></pre><ol start="2"><li>调用动画<blockquote><p>使用animation属性</p></blockquote></li></ol><ul><li>写法：</li><li>复合写法：<ul><li>简单版：</li><li><pre><code></code></pre></li><li>animation:动画名 动画完成时间 时间函数 延迟时间；</li><li><pre><code></code></pre></li><li>完整版：</li><li><pre><code></code></pre></li><li>animation:动画名 动画完成时间 时间函数 延迟时间 播放次数 是否反向播放 动画不播放或完成时状态 动画是否正在运行或已暂停；</li></ul></li><li>类似transition</li></ul><ol start="3"><li>多关键帧动画</li></ol><ul><li>用百分比分别表示动画执行的时间节点</li><li>设置多个时间节点，每个节点都可以设置不同状态</li></ul><ol start="4"><li>animation完整写法——小属性<table><thead><tr><th>属性</th><th>说明</th><th>属性值</th></tr></thead><tbody><tr><td><code>animation-name</code></td><td>指定应用的一系列动画名，即@keyframes定义的动画名</td><td>none表示不调用动画，动画名：由大小写敏感的字母a-z、数字0-9、下划线、短横线组成，不能以数字开头</td></tr><tr><td><code>animation-duration</code></td><td>指定动画周期时长，需要多少秒或毫秒完成</td><td>默认值为0s，表示无动画。时长单位为秒(s)&#x2F;毫秒(ms)</td></tr><tr><td><code>animation-timing-function</code></td><td>设置动画将如何完成一个周期</td><td>和transition一致的linear、ease、ease-in、ease-out、ease-in0out、贝塞尔函数；不一样的是steps(n,start&#x2F;end)</td></tr><tr><td><code>animation-delay</code></td><td>设置动画在启动前的延迟间隔时间</td><td>默认为0s，表示立即执行；时长单位为s&#x2F;ms</td></tr><tr><td><code>animation-iteration-count</code></td><td>定义动画的播放次数</td><td>n:一个数字，动画播放次数；<code>infinite</code>无限次播放</td></tr><tr><td><code>animation-direction</code></td><td>指定是否应该轮流反向播放动画</td><td><code>normal</code>:默认值，动画正常播放；<code>reverse</code>:动画反向播放，动画按步后退的效果；<code>alternate</code>:动画在奇数次正向播放，在偶数次反向播放；<code>alternate-reverse</code>:东湖在奇数次反向播放，在偶数次正向播放；</td></tr><tr><td><code>animation-fill-mode</code></td><td>规定当动画不播放时(动画完成时&#x2F;动画延迟未播放时)，要应用到的元素的样式</td><td><code>none</code>:默认值，动画在动画执行之前和之后不会应用任何样式到目标元素；<code>forwards</code>:在动画结束后，动画将停止在最后结束状态；<code>backwards</code>:在动画结束后，动画将停止在最开始的状态；<code>both</code>:动画遵循<code>forwards</code>和<code>backwards</code>的规则，也就是说，动画会在两个方向上扩展动画属性</td></tr><tr><td><code>animation-play-state</code></td><td>指定动画是否正在运行或已暂停</td><td><code>pause</code>:暂停动画；<code>running</code>:正在运行动画；</td></tr></tbody></table></li></ol><blockquote><p><code>animation-play-state</code>通常与<code>:hover</code>配合使用，当鼠标划上去时，可以暂停或开启动画</p></blockquote><ol start="5"><li>animation指定多组动画</li></ol><ul><li>用来指定一组或多组动画时，每组之间用逗号分隔</li></ul><ol start="6"><li>steps帧动画</li></ol><ul><li>steps定义一个动画从开始到结束，动画的<strong>每一帧</strong>中经历的步数</li><li>steps的特殊性：它设置的是<strong>每一步</strong>动画的跳跃步数，而不是整个动画的跳跃步数</li><li><code>start</code>:开始是在第一帧动画结束的位置</li><li><code>end</code>:开始是在第一帧动画开始的位置</li><li>盒子的右侧是起始点<blockquote><p>走路案例</p></blockquote></li><li>移动的是background-position</li></ul><ol start="7"><li>transition与animation的区别</li></ol><ul><li>1、transition是过渡，是样式值得变化过程，只有开始和结束；animation其实也叫关键帧，通过和@keyframe结合可以设置中间帧的状态</li><li>2、animation配合@keyframe可以不通过触发事件直接触发过程，而transition需要通过hover或者js事件来配合触发</li><li>3、animation可以设置很多的属性，比如循环次数、动画的结束状态等等，transition只能触发一次</li><li>4、animation可以结合@keyframe设置每一帧，但transition只有开始和结束这两帧</li></ul><h3 id="四、animationn-css动画库"><a href="#四、animationn-css动画库" class="headerlink" title="四、animationn.css动画库"></a>四、animationn.css动画库</h3><ol><li><p>是什么？</p><blockquote><ul><li>animation.css是非常强大的跨平台的预设css3动画库</li><li>内置了很多典型的css3动画，兼容性好，使用方便</li><li>英文网：<a href="http://animate.style/(%E8%8B%B1%E6%96%87%E7%BD%91%E6%9B%B4%E5%A5%BD)">http://animate.style/(英文网更好)</a></li></ul></blockquote></li><li><p>怎么用？</p></li></ol><ul><li>1、下载animate.css文件</li><li>2、在页面引入animate.css文件</li></ul><pre><code>&lt;!--引用时，要注意引用入的地址 --&gt;link rel=&quot;stylesheet&quot; href=&quot;./css/animate.css&quot; /&gt;</code></pre><ul><li>3、在网站的右侧选择想要的效果，复制其样式名</li><li>4、在需要应用的元素上加<code>.animate_animated</code>和需要的效果样式名</li></ul><pre><code>&lt;!-- 应用  bounce 这个样式效果 --&gt;&lt;div class=&quot;box animate__animated &gt;animate__bounce&quot;&gt;&lt;/div&gt;</code></pre><blockquote><p>注意：link要写在style前面</p></blockquote><h2 id="transform-2D与3D转换"><a href="#transform-2D与3D转换" class="headerlink" title="transform 2D与3D转换"></a>transform 2D与3D转换</h2><h3 id="一、transform属性"><a href="#一、transform属性" class="headerlink" title="一、transform属性"></a>一、transform属性</h3><ul><li>在CSS中，利用<code>transform</code>这个属性实现对元素的旋转、缩放、倾斜、平移</li><li>transform属性的值可以是<code>none</code>或一个或多个css变换函数</li><li>transform的值不是none时，元素会创建自己的层叠上下文</li></ul><ol><li><p>transform的2D变换函数</p><table><thead><tr><th>属性值</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>translate(x,y)</td><td>x,y为长度单位，可以是px也可以是百分比；x表示元素在x轴上的移动量，y表示元素在y轴上的移动量，如果y轴不写，默认为0</td><td>transform:translate(100px,200px)</td></tr><tr><td>translateX(x)</td><td>表示元素在平面x轴上的位移量</td><td>transform:translateX(300px)</td></tr><tr><td>translateY(y)</td><td>表示元素在平面Y轴上的位移量</td><td>transform:translateY(300px)</td></tr><tr><td>rotate(ax)</td><td>ax代表旋转的角度，正角表示顺时针旋转，负角表示逆时针旋转</td><td>transform:rotate(30deg)</td></tr><tr><td>scaleX(x)</td><td>x数字类型，表示元素在x轴上的缩放比</td><td>transform:scaleX(2)</td></tr><tr><td>scaleY(y)</td><td>y数字类型，表示元素在y轴上的缩放比</td><td>transform:scaleY(2)</td></tr><tr><td>scale(x,y)</td><td>当只有x没有y时，则y默认为x，元素在x,y轴上均匀缩放</td><td>transform:scale(2,3)</td></tr><tr><td>skew(ax,ay)</td><td>ax,ay各表示一个角度</td><td>transform:skew(30deg,30deg)</td></tr><tr><td>skewX(ax)</td><td>ax表示一个角度，表示沿着x横坐标扭曲元素的角度，形成水平拉伸效果</td><td>transform:skewX(30deg)</td></tr><tr><td>skewY(ay)</td><td>ay表示一个角度，表示沿着y纵坐标扭曲元素的角度，形成垂直拉伸效果</td><td>transform:skewY(30deg)</td></tr></tbody></table></li><li><p>transform的3D转换属性值</p><table><thead><tr><th>属性值</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>translateZ(z)</td><td>元素在3D空间z轴方向上的位移量</td><td>transform:translateZ(200px)</td></tr><tr><td>translate3d(x,y,z)</td><td>分别表示元素在x,y,z轴坐标上的位移量，该值不能使用百分比，如果使用会被认为是无效属性</td><td>transform:translate3d(50px,30px,50px)</td></tr><tr><td>rotateX(ax)</td><td>表示元素绕x轴旋转一定角度，ax表示度数，可以为正，也可以为负</td><td>transform:rotateX(30deg);</td></tr><tr><td>rotateY(ay)</td><td>表示元素绕Y轴旋转一定角度，ay表示度数，可以为正也可以为负</td><td>transform:rotateY(30deg);</td></tr><tr><td>rotateZ(az)</td><td>表示元素绕Z轴旋转一定角度，az表示度数，可以为正也可以为负</td><td>transform:rotateZ(30deg);</td></tr></tbody></table></li></ol><h3 id="二、2D转换"><a href="#二、2D转换" class="headerlink" title="二、2D转换"></a>二、2D转换</h3><ol><li>2D平面</li></ol><ul><li>下图这个x和y轴，就是基于2D平面图形，后期所有的2D动画特效都是在这个2D的平面上操作</li><li>注意事项：<ul><li>元素的左上角坐标为(0,0)</li><li>(0,0)坐标的右方，为x轴的正方向</li><li>(0,0)坐标的下方，为y轴的正方向<img src="2D.png"></li></ul></li></ul><ol><li>translate位移</li></ol><ul><li><p>css中通过给<code>transform</code>添加<code>translate(x,y)</code>、<code>translateX(x)</code>、<code>translateY(y)</code>来实现元素的水平或垂直位移</p></li><li><p><strong>translate(x,y)</strong></p></li><li><p>x和y是长度值length，可以是px，也可以是%百分比</p></li><li><p>x表示元素在x轴上的位移量，为正表示向右移动，为负表示向左移动</p></li><li><p>y表示元素在y轴上的位移量，为正表示向下移动，为负表示向上移动 </p></li><li><p>位移和相对定位非常像，位移也会”在老家留坑”，即会占据原来的位置 </p></li><li><p>同时不会对其他元素造成影响，相当于悬浮在其他元素上</p></li><li><p>创建了自己的层叠上下文</p></li><li><p>长度单位可以为px，也可以为百分比</p></li><li><p>x,y为百分比时，这个百分比是相对元素自身的可视宽高而言的</p></li><li><p>在标准盒子模型下</p><ul><li>水平位移：(width+左右padding+左右border)*x%</li><li>垂直位移：(width+左右padding+左右border)*y%</li></ul></li><li><p>特殊情况：y值不写，默认为0</p><ul><li><code>transform:translate(x)</code>&#x3D;<code>transform:translate(x,0)</code></li></ul></li><li><p><strong>translateX(x)与translateY(y)</strong></p></li><li><p><code>translateX(x)</code>实现元素在X轴的位移量</p></li><li><p><code>translateY(y)</code>实现元素在Y轴的位移量</p></li><li><p>本质上translate(x,y)是translateX与translateY两者的复合写法</p></li><li><p>transform后面如果跟多个变换函数，则各函数之间用<strong>空格</strong>隔开</p></li><li><p><strong>注意</strong></p></li></ul><pre><code>transform:translateX(10px);transform:transformY(10px);</code></pre><blockquote><p>这样写，后面的会覆盖前面的，只有transformY有效</p></blockquote><ul><li><p>正确写法是：<code>transform:translateX(10px) translateY(10px);</code> 用空格隔开</p></li><li><p><strong>translate与绝对定位结合实现元素水平垂直居中</strong></p></li><li><p>先利用绝对定位，<code>top:50%;left:50%;</code></p></li><li><p>再利用translate，&#96;transform:translate(-50%,-50%)</p></li><li><p>相比之前用的margin负值，可以不用知道盒子宽高，调整也不受影响</p></li></ul><ol start="3"><li>缩放scale</li></ol><ul><li><p>写法：<code>transform:scale(ax,ay)</code></p></li><li><p><strong>scale(x,y)</strong></p></li><li><p>xy可以用不带单位的数字或百分比表示，分别表示元素的宽高缩放比</p></li><li><p>值&gt;1：放大；值&lt;1：缩小</p></li><li><p>当只有x，没有y时，y默认为等于x，元素宽高同时均匀缩放</p></li><li><p>百分比是相对于元素的可视宽高而言的</p></li><li><p><strong>scaleX(x)与scaleY(y)</strong></p></li><li><p>本质上scale(x,y)是scaleX(x)与scaleY(y)的复合写法</p></li><li><p><code>transform:scale(x,y)</code>等于<code>transform:scaleX(x) scaleY(y)</code></p></li><li><p>可以利用transform-origin设置变换原点</p></li></ul><ol start="4"><li>斜切skew</li></ol><ul><li>实现元素斜切效果</li><li>写法：&#96;transform:skew(ax,ay)</li><li><code>skewX(ax)</code>:用于水平拉伸，使元素的每个点在水平方向上扭曲一定的角度</li><li><code>skewY(ay)</code>:用于垂直拉伸，使元素的每个点在垂直方向上扭曲一定的角度</li><li>ax,ay表示一个角度</li><li>单位为<code>deg</code>，正负数都可以</li><li>可以利用transform-origin设置变换原点</li></ul><ol start="5"><li>旋转rotate</li></ol><ul><li>元素旋转效果</li><li>写法<code>transform:rotate(ax)</code></li><li><code>ax</code>表示旋转的角度，正数表示顺时针，负数表示逆时针</li><li>单位是<code>deg</code></li><li>在三角形案例中可知，多次改变旋转角度，都是参考<strong>最初</strong>的视角，不是参考上一次旋转！</li><li>可以利用transform-origin设置变换原点</li></ul><ol start="6"><li>设置原点transform-origin</li></ol><ul><li>设置元素的变换原点</li><li>缩放、斜切、旋转都可以设置原点</li><li>默认值：<code>transform-origin:50% 50% 0;</code>，分别表示x,y,z轴，在2D转换中只需要前两个值</li><li>x,y的值可以是px、百分比、关键词</li><li>但z的值只能是px</li></ul><blockquote><p><strong>关键词</strong></p></blockquote><ul><li>类似于<code>background-position</code></li><li>(left,right)、(top,bottom)、center，这三组可以任意搭配<table><thead><tr><th>关键词</th><th>描述</th></tr></thead><tbody><tr><td>默认原点</td><td><code>transform-origin:center</code></td></tr><tr><td>left</td><td>原点为左边框中点，&#x3D;<code>left center</code></td></tr><tr><td>right</td><td>右边框中点，&#x3D;<code>right center</code></td></tr><tr><td>top</td><td>上边框中点，&#x3D;<code>top center</code></td></tr><tr><td>bottom</td><td>下边框中点，&#x3D;<code>bottom center</code></td></tr><tr><td>top left</td><td>原点为左上角，相当于坐标(0 0)</td></tr><tr><td>top right</td><td>元素右上角</td></tr><tr><td>bottom left</td><td>左下角</td></tr><tr><td>bottom right</td><td>右下角</td></tr></tbody></table></li></ul><blockquote><p><strong>数值表示法px</strong></p></blockquote><ul><li>y省略不写时，默认为元素的垂直中心点<blockquote><p><strong>百分比表示法</strong></p></blockquote></li><li>相对的是元素自身的可视宽高而言</li></ul><ol start="7"><li><p>2D转换综合写法顺序问题</p><blockquote><ul><li>同时使用多个变换，其多个变换函数之间用空格隔开</li><li>转换函数的顺序会影响转换的效果，比如先旋转会影响坐标轴方向</li><li>旋转之后，坐标轴也会跟着旋转，位移的方向就要按照旋转后的坐标轴来</li><li>所以当同时使用旋转和位移时，一定要注意书写顺序</li></ul></blockquote></li><li><p>使2D转换有动画效果<br><code>transition:transform 2s;</code></p><blockquote><ul><li>分清楚<code>transition</code>和<code>transform</code></li></ul></blockquote></li></ol><h3 id="2D转换实战应用"><a href="#2D转换实战应用" class="headerlink" title="2D转换实战应用"></a>2D转换实战应用</h3><ol><li><p>旋转的三角形</p><blockquote><p>注意点</p><ul><li>旋转的角度以最原始的状态为基准，而不是参考上一次旋转</li></ul></blockquote></li><li><p>QQ音乐效果</p><blockquote><ul><li>图片、按钮、遮罩层都有动画效果</li><li>隐藏元素的方式：opacity、rgba、display等</li></ul></blockquote></li></ol><h3 id="四、3D转换"><a href="#四、3D转换" class="headerlink" title="四、3D转换"></a>四、3D转换</h3><blockquote><p>在3D动画中，元素是围绕坐标x,y,z轴来变换的</p><ul><li>3D坐标图<img src="3D坐标图.png">- 元素左上角的坐标为(0,0,0)- x轴右边为正方向，y轴下方为正方向，z轴垂直电脑屏幕，射出屏幕的这头为正方向</li></ul></blockquote><ol><li>透视perspective<blockquote><p>没有<strong>透视定义</strong>，不成3D</p><ul><li>透视是指在平面上描绘物体的空间关系的方法或技术</li><li>要在平面上描绘物体的空间立体感，需要遵循透视原理中的近大远小规则</li></ul></blockquote></li></ol><blockquote><p><strong>视点</strong></p><ul><li>当我们站的越远，我们看到的物体就越小 </li><li>css3中3Dtransform透视点是在浏览器的前方<img src="视点.png"></li></ul></blockquote><blockquote><p><strong>perspective属性</strong></p><ul><li>在css3中，用<code>perspective</code>属性来设置透视距，即模拟人站在离屏幕多远的地方来看电脑上显示的元素</li><li>比如：<code>perspective:800px;</code>意思就是在离屏幕800px的地方看到这个元素</li><li>如果元素往z轴正方向移动，离我们越近，看到物体就越大</li><li>如果元素往z轴负方向移动，离我们越远，看到的物体就越小</li><li>注意：<code>perspective</code>这个属性要设置在父元素上面</li></ul></blockquote><ol><li><p>translate3D位移</p><blockquote><ul><li>**translateX(x)、translateY(y)**，与2D位移是一样的效果</li><li>**translateZ(z)**：<ul><li>表示垂直于电脑屏幕方向的位移量</li><li>必须配合<code>perspective</code>属性，用它来定义透视强度</li><li><code>translateZ=0</code>：图形大小正常显示</li><li><code>0 &lt; translateZ &lt; perspective值</code>：图形变大</li><li><code>translateZ &gt;= perspective</code>图片不见，相当于图片在你后面,你肯定是看不见的</li><li><code>translateZ &lt; 0</code>：图形变小</li></ul></li><li>translate3d(x,y,z)<ul><li>表示元素在x,y,z轴三个坐标上的位移量</li><li>z的值不能使用百分比，如使用则会被认为是无效属性</li></ul></li></ul></blockquote></li><li><p>rotate 3D旋转</p><blockquote><ul><li>css中通过给<code>transform</code>添加以下变换函数来实现3D旋转效果<table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>rotateX(ax)</td><td>表示元素绕x轴旋转一定的角度，ax表示度数，可正可负</td></tr><tr><td>rotateY(ay)</td><td>表示元素绕y轴旋转一定的角度，ay表示度数，可正可负</td></tr><tr><td>rotateZ(az)</td><td>表示元素绕z轴旋转一定的角度，az表示度数，可正可负</td></tr></tbody></table></li><li>旋转方向</li><li>左手法则：大拇指指向正方向，四指的方向就是旋转的方向<img src="3D旋转.png">>rotateZ(az)和2d转换rotate(ax)效果一样</li></ul></blockquote></li><li><p>transform-style</p><blockquote><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>flat</td><td>表示所有子元素在2D平面呈现</td></tr><tr><td>preserve-3D</td><td>表示所有子元素在3D空间中呈现</td></tr></tbody></table></blockquote></li></ol><h3 id="五、实战案例"><a href="#五、实战案例" class="headerlink" title="五、实战案例"></a>五、实战案例</h3><ol><li>飞行的火箭<blockquote><ul><li>火箭左上角和右下角方向来回移动</li><li>气流动画效果：旋转后坐标轴变化，线条沿Y轴上下移动，用opacity实现隐藏效果</li></ul></blockquote></li><li>创建3D导航<blockquote><ul><li>关键是改变旋转原点<code>transform-origin</code></li><li>给两个a标签加父盒子.container,鼠标滑动设置在父盒子上</li><li>第二个a标签的初始状态是x轴反方向旋转90度，这样就藏在了第一个盒子下面,而且！它的原点要设置在上边框的中点</li><li>点击父盒子时，往x轴的正方向翻转90度，旋转原点是3D盒子的中心<code>transform-origin:50% 50% 高度的一半</code></li><li>想要有立体效果：在父盒子上加<code>transform-style: preserve-3d;</code></li></ul></blockquote></li><li>翻书效果<blockquote><ul><li>每一页构建一个父盒子，里面放正反两面，点击父盒子翻页</li><li>改变原点为左边框中点</li><li>反面比正面里电脑更远才能显示：改变<code>translateZ(z)</code></li><li>每一页都比前一页层级更低：改变<code>z-index</code>，整本书需要用JS实现</li><li>反面翻过来仍正面显示：在父盒子翻转180度的基础上再翻转180度</li><li>每一页有正反面两面的立体效果：在每页父盒子设置<code>transform-style:preserve-3D</code></li><li>注意位移和旋转的顺序，旋转会改变方向</li></ul></blockquote></li><li>长方体<blockquote><ul><li>将六个面都放在父盒子之中，用绝对定位固定在同一位置；</li><li>父盒子要用3D</li><li>通过位移旋转来移动每个面，先移动再旋转更简单</li><li>左右面若想正面朝外，则移动到合适位置再改变原点旋转</li><li>给父盒子设置旋转动画可以看到3D效果</li></ul></blockquote></li><li>鼠标移入文字划入效果<blockquote><ul><li>没注意到的地方：<ul><li>需要换行的文字，左右间距用绝对定位设置</li></ul></li></ul></blockquote></li><li>鼠标悬停缩放动画<blockquote><ul><li>没考虑到的地方<ul><li>鼠标悬停时的遮罩：缩小0.8，有盒子阴影，白色边框<br>注意：</li><li>遮罩层原本和父盒子宽高一致，加上边框后会偏移</li><li>缩放时是居中缩放，所以遮罩层要向上向下移动边框宽度的距离</li></ul></li></ul></blockquote></li><li>鼠标移入旋转动画<blockquote><p>没想到的地方</p><ul><li>背景模糊：受上一案例影响，只想到用盒子阴影，但本案例并不适合，实际应该滤镜效果<code>filter</code><br>不一致的地方：</li><li>遮罩效果<ul><li>长方形旋转角度：遮罩盒子宽度等于父盒子对角线的长度(勾股定理)，高度自拟，<code>top=-50%</code>，转换原点改为左侧，然后旋转，可以在检查页面调试角度</li><li>旋转效果：原遮罩盒子高度为0，top&#x3D;0,left&#x3D;0;鼠标滑动后再设置效果</li></ul></li></ul></blockquote></li><li>loading动画<blockquote><ul><li>设置var函数：写在style里，或写在行内，用<code>style=--name:值</code>。var函数一定要以<code>--</code>开头，后面接属性名和属性值。</li><li>var与函数运算结合，一定要在外面套上<code>calc()</code></li><li>var函数与动画结合：<code>transform:rotate(calc(var(--i)*40deg))</code></li><li>小圆围成一个大圆：先把小圆都放在父盒子顶部中间，设置原点为父盒子中点，但一定是以起始位置的xy轴为起点<ul><li><code>transform-origin:15px 140px</code>，140px就是大圆的半径<img src="loading动画.png"></li></ul></li><li>小圆轮流亮起：设置延迟效果，也要用到var函数</li></ul></blockquote></li><li>吃豆豆动画效果<blockquote><ul><li>嘴巴咬合效果：两个长方形朝不同方向旋转，父盒子边框变成圆(我一点都没想到！！！)</li><li>豆豆移动效果：盒子阴影!!!+translate+animation</li><li>细节：<ul><li>豆豆和头部都使用定位，豆豆写在后面，所以在头部上面，需要提高头部的层级</li><li>豆豆的移动速度等于嘴巴张合一轮的时间(嘴巴动画要使用alternate)</li></ul></li></ul></blockquote></li><li>鼠标悬停 3D 旋转动画效果<blockquote><ul><li>注意点<ul><li>背面的文字和图片在旋转前就要设置<code>rotate(180deg)</code>，否则在鼠标悬停旋转180度后会恢复初始状态</li></ul></li></ul></blockquote></li><li>3D旋转木马效果<blockquote><ul><li>点击第二个盒子实现旋转效果，其父盒子设置视距，其子盒子放置图片。要想让谁的子盒子有3D效果，就给谁设置<code>transform-style</code></li><li>图片怎么实现环绕效果：用绝对定位使他们都处于中心，先旋转一定的角度，在往z轴的方向移动,var函数+rotateY+translateZ</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS核心知识点（二）</title>
      <link href="/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="CSS-display属性、背景属性、其他常用属性"><a href="#CSS-display属性、背景属性、其他常用属性" class="headerlink" title="CSS display属性、背景属性、其他常用属性"></a>CSS display属性、背景属性、其他常用属性</h2><h3 id="一、display属性"><a href="#一、display属性" class="headerlink" title="一、display属性"></a>一、display属性</h3><h4 id="display属性的作用"><a href="#display属性的作用" class="headerlink" title="display属性的作用"></a>display属性的作用</h4><blockquote><p><code>display</code>属性可以设置元素的<strong>内部</strong>和<strong>外部</strong>显示类型</p></blockquote><ul><li>外部显示类型：<ul><li>元素的外部显示类型有block块、inline内联等</li><li>外部显示类型将决定该元素在<strong>流式布局</strong>中的表现</li></ul></li><li>内部显示类型：<ul><li>内部显示类型flex布局、grid网格布局、流失布局等</li><li>元素的内部显示类型可以控制其子元素的布局方式</li></ul></li></ul><blockquote><p>流式布局(文档流或常规流)</p></blockquote><ul><li>它是指在对布局进行任何更改之前(默认情况下)，在页面上显示”块”和”内联”元素的方式</li><li>简单来说，它是一种排版方式，这种排版方式规定了块级和内联元素在页面中如何排版显示</li></ul><blockquote><p>流式布局中<strong>块级元素</strong>排版方式</p></blockquote><ul><li>块级盒子会从包含块的顶部开始，按序<strong>垂直</strong>排列</li><li>同级盒子间的垂直距离会由<code>margin</code>属性决定</li><li>相邻两个块级盒子之间的垂直间距会遵循外边距折叠原则被折叠</li></ul><blockquote><p>流式布局中<strong>内联元素</strong>排版方式</p></blockquote><ul><li>盒子会从包含块的顶部开始，按序<strong>水平</strong>排列</li><li>只有水平外边距、边框和内边距会被保留</li><li>这些盒子可以以不同方式在垂直方向上对齐：可以底部对齐或顶部对齐，或者按文字底部进行对齐</li></ul><h4 id="元素外部显示类型"><a href="#元素外部显示类型" class="headerlink" title="元素外部显示类型"></a>元素外部显示类型</h4><blockquote><p>display通过以下属性值来制定元素的显示类型</p></blockquote><ul><li>bolck 块级</li><li>inline-block 行内块</li><li>inline 行内</li></ul><blockquote><p>元素显示类型分为：块级和内联等<br>内联(行内)元素又分为：inline内联元素和inline-block行内块元素(可替换元素)</p></blockquote><ol><li>block块级元素</li></ol><ul><li>常见的块级元素有：<br><code>p</code>、<code>div</code>、<code>ul</code>、<code>ol</code>、<code>li</code>、<code>h</code>、<code>dl</code>等</li><li>块级元素的特点<ul><li>独占一行</li><li>可以设置宽高</li><li>在不设置宽高的情况下，宽默认为父元素内容区宽</li><li>一般来说块级元素里可以放任意元素，不过文字类元素标签内不能放其他块元素：<ul><li>p标签里不能放p和div标签</li><li>h1~h6标签里不能放p,div标签</li></ul></li></ul></li></ul><ol start="2"><li>inline-block行内块元素</li></ol><ul><li>以下元素具有行内块元素的特性，但本质上叫”可替换元素”(归类归到行内元素):<br> <code>img</code>、<code>表单类元素</code>、<code>video</code>、<code>audio</code>等</li><li>行内块元素的特点 <ul><li>相邻的行内块元素&#x2F;行内元素会在一行显示、放不下时会换行</li><li>相邻的行内块元素之间会有<strong>空白间隙</strong>(后面有案例解决这个问题)</li><li>元素默认宽为它本身内容宽</li><li>可设置width、height属性</li></ul></li></ul><ol start="3"><li>inline内联&#x2F;行内元素</li></ol><ul><li>常见的行内元素有：<code>a</code>、<code>strong</code>、<code>span</code>、<code>i</code>、<code>del</code>等</li><li>行内元素特点：<ul><li>相邻的行内元素会在一行显示，放不下时会换行显示</li><li>宽高的设置是无效的，其宽高随内容撑开</li><li>行内元素只能放文本或其他行内元素</li></ul></li><li>注意<ul><li><code>&lt;a&gt;</code>标签里不能再放<code>&lt;a&gt;</code>标签</li><li>但<code>&lt;a&gt;</code>标签里可以放块级元素</li><li>实际开发中，在某些情况下会把a标签转换为块级元素</li></ul></li></ul><blockquote><p>总结:三种元素类型对比</p><table><thead><tr><th>元素类型</th><th>排列方式</th><th>盒模型属性</th><th>内容</th></tr></thead><tbody><tr><td>块级block</td><td>独占一行</td><td>宽高有效</td><td>任意元素，p&#x2F;h特别</td></tr><tr><td>行内块line-block</td><td>不独占</td><td>可设置高</td><td>行内或行内块元素</td></tr><tr><td>内联inline</td><td>不独占</td><td>宽高设置无效</td><td>行内&#x2F;文本元素，a特别</td></tr></tbody></table></blockquote><ol start="4"><li>相互转换</li></ol><ul><li><code>display:block;</code>将元素转换为块级元素</li><li><code>diaplay:inline;</code>将元素转换为行内元素</li><li><code>display：inline-block</code>将元素转换为行内块</li></ul><ol start="5"><li>隐藏元素<table><thead><tr><th>属性</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>diaplay:none;</code></td><td>隐藏元素</td><td>可以将元素隐藏；只要父元素隐藏，子孙元素就没有任何办法可见。元素隐藏后不会占空间，就好比页面中没有加过这个元素</td></tr><tr><td><code>display:hidden：</code></td><td>隐藏元素</td><td>将元素隐藏；如果父元素隐藏，子孙元素会隐藏，但是给子孙加上<code>visibility:visible;</code>时，子孙可见；隐藏后仍占其位置，会留下空白区域。基本不用</td></tr></tbody></table></li></ol><ul><li>注：<code>display</code>除<code>none</code>以外的值，均为显示元素</li></ul><ol start="6"><li>常见大厂面试题</li></ol><ul><li><code>display:none;</code>和<code>visibility:hidden;</code>二者的区别？<table><thead><tr><th>区别</th><th>display:none;</th><th>visibility:hidden;</th></tr></thead><tbody><tr><td>空间占据性</td><td>不占空间</td><td>占空间</td></tr><tr><td>回流与渲染性</td><td>会产生回流与重绘</td><td>不会产生回流，只会产生重绘</td></tr><tr><td>对子孙元素的影响</td><td>子孙元素全部不可见，并没有任何办法可见</td><td>子孙元素全部不可见，但是加上<code>visibility:visible；</code>就可见</td></tr></tbody></table></li></ul><ol start="7"><li>去掉行内块元素默认的空白间隙<blockquote><p>产生间隙的原因</p></blockquote></li></ol><ul><li>元素被当成行内元素排版的时候，元素之间的空白符(空格&#x2F;回车、换行等)都会被浏览器处理</li><li>根据white-space的处理方式(默认为normal，合并多余空白)，原来HTML代码中的空白符被转换成了一个空白符，所以元素之间出现了空隙</li><li>这些元素之间的间距会随着字体的大小而变化</li></ul><blockquote><p>解决办法</p></blockquote><ul><li>给父元素加上<code>font-size:0px;</code>,给子元素重写<code>font-size</code></li><li>给元素添加<code>float</code></li><li>图片间的空隙，给图片添加<code>display:block;</code>变成块级元素后，独占一行，空白间隔消失;更好的办法是添加<code>vertical-align:top;</code></li></ul><h3 id="二、background背景属性"><a href="#二、background背景属性" class="headerlink" title="二、background背景属性"></a>二、background背景属性</h3><h4 id="background-color背景颜色"><a href="#background-color背景颜色" class="headerlink" title="background-color背景颜色"></a>background-color背景颜色</h4><ul><li>背景颜色可以用十六进制、rgb()、rgba()、英文单词表示</li><li>padding区域是有背景颜色的</li></ul><h4 id="background-image图片"><a href="#background-image图片" class="headerlink" title="background-image图片"></a>background-image图片</h4><ul><li>用于设置背景图片</li><li>图片路径要写在<code>url()</code>圆括号里，可以是相对路径，也可以是绝对路径</li><li>地址相对路径是从CSS样式的位置出发(特别注意外部样式)</li><li>写法：<code>background-image: url();</code></li></ul><h4 id="background-repeat重复"><a href="#background-repeat重复" class="headerlink" title="background-repeat重复"></a>background-repeat重复</h4><ul><li>用来设置背景图片的重复模式</li><li>属性值<table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>repeat;</code></td><td>x,y均平铺(默认)</td></tr><tr><td><code>repeat-x;</code></td><td>x平铺</td></tr><tr><td><code>repeat-y;</code></td><td>y平铺</td></tr><tr><td><code>no-repeat;</code></td><td>不平铺</td></tr></tbody></table></li></ul><h4 id="background-position-背景图片位置"><a href="#background-position-背景图片位置" class="headerlink" title="background-position 背景图片位置"></a>background-position 背景图片位置</h4><ul><li><p>用来控制背景图片在盒子中&#x3D;&#x3D;显示&#x3D;&#x3D;的开始位置</p></li><li><p>背景图片位置默认是从padding区开始计算，要将内边距算进去</p></li><li><p>写法：<code>background-position:  ;</code></p></li><li><p>位置表示法</p><table><thead><tr><th>写法</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>数值表达法(x y)</td><td>两个值</td><td>x：与盒子左边距离 y与盒子上边距离</td></tr><tr><td>数值表达法(x)</td><td>单个值</td><td>数值只表示x，垂直方向居中显示</td></tr><tr><td>百分比表达法(x% y%)</td><td>两个值</td><td>左偏移量&#x3D;(容器width+左右padding-背景图width)<code>*</code>百分比,上偏移量&#x3D;(容器height+上下padding-背景图height)<code>*</code>百分比</td></tr><tr><td>百分比表达法(x%)</td><td>单个值</td><td>该值表示x%，垂直方向水平居中</td></tr><tr><td>关键字表达法</td><td>两个值</td><td>垂直方向 水平方向</td></tr><tr><td>关键字表达法</td><td>单个值</td><td>center被省略</td></tr></tbody></table></li><li><p>负值情况：</p><ul><li>在数值和百分比表达法下，可以使用负值</li><li>右是水平的正方向，<strong>下是垂直的正方向</strong>。所以负值代表向左、向上移动</li></ul></li><li><p>关键词表达法<br>可以用<code>(top、bottom)</code>、<code>(center)</code>、<code>(left、right)</code>三组中的任意两个组的一个值进行组合，也可以用单个值</p><ul><li>单一关键字与对应组合关键字表示法<table><thead><tr><th>单一关键字</th><th>等价的组合关键字</th></tr></thead><tbody><tr><td>center</td><td>center center</td></tr><tr><td>top</td><td>top center或center top</td></tr><tr><td>bottom</td><td>bottom center或center bottom</td></tr><tr><td>left</td><td>left center或center left</td></tr><tr><td>right</td><td>right center或center right</td></tr></tbody></table></li></ul></li></ul><h4 id="background复合属性"><a href="#background复合属性" class="headerlink" title="background复合属性"></a>background复合属性</h4><blockquote><ul><li><code>background-color</code>、<code>background-image</code>、<code>background-repeat</code>、<code>background-position</code>可以进行合写</li><li>不包括background-size&#x2F;clip&#x2F;origin&#x2F;attachment!!!</li><li>合写用的非常多，而其中的单条一般用来进行层叠</li><li>写法：<br><code>background:red url() no-repeat 10px 20px;</code></li><li>复合写法中，省略未写的值会以默认值替代<ul><li>背景色默认为透明色</li><li>背景图片默认为没有</li><li>重复默认为左右平铺</li><li>图片位置默认为0% 0%</li></ul></li></ul></blockquote><h4 id="CSS精灵图"><a href="#CSS精灵图" class="headerlink" title="CSS精灵图"></a>CSS精灵图</h4><blockquote><ul><li>将多个小图标合并制作在一张图上</li><li>使用<code>background-position</code>属性单独显示其中一个</li><li>这样的技术叫做CSS精灵技术，也叫作CSS雪碧图</li><li>CSS精灵可以减少HTTP请求数，加快网页显示速度，但缺点也很明显：不方便测量，后期改动麻烦</li><li>适用于小图，大图不合适</li><li>使用Pxcook测量距离,注意正负值</li></ul></blockquote><h4 id="background-attachment-背景固定"><a href="#background-attachment-背景固定" class="headerlink" title="background-attachment 背景固定"></a>background-attachment 背景固定</h4><blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>scroll</code></td><td>默认值，背景图片相对于元素本身固定，但随页面滚动而滚动</td></tr><tr><td><code>fixed</code></td><td>背景相对于视口固定。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动</td></tr><tr><td><code>local</code></td><td>背景相对于元素的内容固定，如果一个元素拥有滚动机制，背景会随元素的内容滚动，同时背景图片随着页面的滚动而滚动</td></tr></tbody></table></blockquote><blockquote><ul><li>srcoll <img src="scroll.gif">背景图随页面滚动条移动，但不随元素内容移动</li><li>fixed <img src="fixed.gif">背景图固定在页面左上角，不随元素且不随页面滚动</li><li>local <img src="local.gif">背景图随页面一起滚动，也随元素内容滚动</li></ul></blockquote><h4 id="background-size背景尺寸"><a href="#background-size背景尺寸" class="headerlink" title="background-size背景尺寸"></a>background-size背景尺寸</h4><blockquote><p><code>backgroung-size: ;</code></p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>x y</td><td>分别表示背景图的宽高</td></tr><tr><td>x% y%</td><td>百分比是相对于盒子的宽高而言</td></tr><tr><td>x auto</td><td>x可以是数值也可以是百分比，auto是相对于宽来自动缩放</td></tr><tr><td>contain</td><td>背景图片智能改变尺寸以容纳到盒子里，把图片全部展示出来</td></tr><tr><td>cover</td><td>智能改变尺寸以撑满盒子，填充盒子的每个角落</td></tr></tbody></table></blockquote><h4 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h4><blockquote><ul><li>设置元素的背景(图片或颜色)是否延展到边框、内边距、内容<table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>border-box</td><td>默认值，背景绘制在边框方框内</td></tr><tr><td>padding-box</td><td>背景绘制在内边距方框内</td></tr><tr><td>content-box</td><td>背景绘制在内容方框内</td></tr><tr><td>text</td><td>背景被裁剪成文字的前景色</td></tr></tbody></table></li><li>使用text时，要将文字颜色设置为透明才能看到效果</li></ul></blockquote><pre class=" language-css"><code class="language-css"><span class="token number">.</span>box<span class="token number">4</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* background-image:linear-gradient(to right,red, blue, green); */</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(../../src/image/peakflower.webp)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 背景被裁剪成文字的前景色,可以用渐变或图片*/</span>    <span class="token property">background-clip</span><span class="token punctuation">:</span>text<span class="token punctuation">;</span>    <span class="token property">-webkit-background-clip</span><span class="token punctuation">:</span>text<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 除文字下的背景以外都隐藏 */</span>     <span class="token property">color</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 文字颜色设置为透明 */</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h4 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h4><blockquote><ul><li>背景图片的定位区域<table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>padding-box</td><td>背景图片的摆放以padding区域为参考(默认值)</td></tr><tr><td>border-box</td><td>背景图片的摆放以border区域为参考</td></tr><tr><td>content-box</td><td>背景图片的摆放以content区域为参考</td></tr></tbody></table></li></ul></blockquote><img src="origin.png"><h3 id="三、线性渐变"><a href="#三、线性渐变" class="headerlink" title="三、线性渐变"></a>三、线性渐变</h3><ul><li>在background-image属性下，创建线性渐变背景</li><li>用<code>,</code>分隔方向和不同颜色<br><code>background-image:linear-gradient(direction,color);</code><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>direction</code></td><td>指定渐变的方向</td></tr><tr><td><code>color</code></td><td>用于指定渐变的起止颜色</td></tr></tbody></table></li></ul><ol><li>方向</li></ol><ul><li>未设置角度：则默认从上而下渐变</li><li>用关键词来指定渐变方向<ul><li>to (top,bottom) (left,right)</li></ul></li><li>用度数来指定渐变方向,度数单位为deg,顺时间方向<br><code>background-image:linear-gradient(45deg,red,blue)</code></li></ul><ol start="2"><li>颜色</li></ol><ul><li>多个颜色值，可以用百分数定义纯净的该颜色的起始点，百分数写在颜色后面(颜色的分布范围是从前往起始点渗透)<br>background-img:linear-gradient(red 40%,blue 50%)&#96;</li><li>转换中点是指：两个颜色相互融合的交点</li><li>默认转换中点：两个颜色转换的中点</li><li>自定义转换中点：在两个颜色之间添加未标记的%，以指示颜色的中转位置<br><code>background-img:linear-gradient(red,40%,blue)</code></li><li>未设置0%和100%的终止色<ul><li>默认情况下，如果不带0%终止的颜色，则起始色为声明的第一个颜色</li><li>最后一种颜色将持续到100%标记，或者如果在最后一个没有声明长度时，则在100%标记处</li></ul></li></ul><pre><code>.box7 &#123;    background-image: linear-gradient(yellow,red,blue);    &#125;.box8 &#123;    background-image: linear-gradient(green 0%,20%，yellow ,red,blue,green100%);    &lt;!-- green 0%表示纯净的绿色在0%，但0%处是看不到的所以能看到的是更浅的绿色渗透出来,20%的地方是黄绿两色的转换中点 --&gt;    &#125;</code></pre><ul><li>没有颜色转换的情况<ul><li>纯净色的终止点就是转换中点</li></ul></li></ul><pre><code>.box &#123;    background-image: linear-gradient(yellow 20%,20%,red,blue);    &#125;</code></pre><ol start="3"><li>浏览器私有前缀<blockquote><p>不同浏览器有不同的私有前缀，用来对实验性质的CSS属性加以标识</p><table><thead><tr><th>浏览器</th><th>前缀</th></tr></thead><tbody><tr><td>Chrome浏览器</td><td><code>-webkit-</code></td></tr><tr><td>Firefox火狐</td><td><code>-moz-</code></td></tr><tr><td>IE、Edge</td><td><code>-ms-</code></td></tr><tr><td>欧朋</td><td><code>-o-</code></td></tr></tbody></table></blockquote></li></ol><pre><code>background-image:-webkit-linear-gradient(to top,gold,red)background-image:-moz-linear-gradient(to top,gold,red)background-image:-ms-linear-gradient(to top,gold,red)background-image:-o-linear-gradient(to top,gold,red)</code></pre><ol start="4"><li>渐变色工具<br><a href="https://c.runoob.com/more/gradients/#Omolon">https://c.runoob.com/more/gradients/#Omolon</a></li></ol><h3 id="四、径向渐变"><a href="#四、径向渐变" class="headerlink" title="四、径向渐变"></a>四、径向渐变</h3><blockquote><ul><li>盒子的background-image属性可以用radial-gradient()形式创建径向渐变背景图</li><li>径向渐变由其中心点、边缘形状轮廓、两个或多个色值结束点定义而成</li></ul></blockquote><ol><li>设置颜色节点<br><code>color 10%</code>：设置颜色转换中点<br><code>color,10%,</code>：设置颜色起始点</li><li>设置径向渐变的形状 shape<br><code>ellipse</code>表示椭圆形(默认)<br><code>circle</code>表示圆形</li><li>指定径向渐变中心位置 position<br><code>at 10px 20px</code></li><li>指定不同尺寸的大小<br>|值|描述|<br>|<code>fathest-corner</code>|(默认)：渐变的边缘形状与容器距离渐变中心点最远的一个角相交|<br>|<code>closest-corner</code>|渐变的边缘形状与容器距离渐变中心点最近的一个角相交(水平与垂直边相交)|<br>|<code>fathest-side</code>|与closest-side相反，边缘形状与容器距离渐变中心点最远的一边相切(或最远的垂直或水平边)|<br>|<code>closest-side</code>|圆形：渐变的边缘形状与容器距离渐变中心点最近的一边想切；椭圆：距离渐变中心点最近的垂直和水平边相切|<blockquote><ul><li>径向渐变-椭圆<img src="径向渐变-椭圆.png"></li><li>径向渐变-圆<img src="径向渐变-圆.png"></li><li>注意：<code>shape</code>、<code>position</code>、<code>尺寸的关键词</code>，彼此之间用&#x3D;&#x3D;空格&#x3D;&#x3D;分隔，但是与颜色之间用<code>,</code>分隔。</li></ul></blockquote></li></ol><h3 id="五、背景相关属性的补充"><a href="#五、背景相关属性的补充" class="headerlink" title="五、背景相关属性的补充"></a>五、背景相关属性的补充</h3><blockquote><ul><li><code>background-image/size/position/repeat</code>后面都可以设置多个值，每组值之间用<strong>逗号</strong>分隔<ul><li>每个属性之间用逗号分割的值，都按顺序<strong>一一对应</strong>，如果后面的值没有写，则以当前属性设置的<strong>第一组值</strong>为默认显示</li></ul></li><li>线性渐变&#x2F;径向渐变实质上是绘制背景图片，所以既可以和<code>url()</code>写在一起，又可以被&#96;size&#x2F;position&#x2F;repeat等属性控制</li></ul></blockquote><h3 id="六、其他常用属性"><a href="#六、其他常用属性" class="headerlink" title="六、其他常用属性"></a>六、其他常用属性</h3><h4 id="1-cursor鼠标样式"><a href="#1-cursor鼠标样式" class="headerlink" title="1.cursor鼠标样式"></a>1.cursor鼠标样式</h4><blockquote><ul><li>设置光标的类型，在鼠标指针悬停在元素上时显示相应样式</li><li>可以用属性值设置样式，也可以用图片设置光标样式(即用url自定义)</li><li>使用方式：<code>cursor:url(自定义图片地址),pointer;</code></li></ul></blockquote><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>需使用的自定义光标的URL.注释:请在此列表的末端始终定义一种普通的光标，一方没有由URL定义的可用光标</td></tr><tr><td>default</td><td>默认光标(通常是一个箭头)</td></tr><tr><td>auto</td><td>默认，浏览器设置的光标</td></tr><tr><td>crosshair</td><td>光标呈现为十字线</td></tr><tr><td>pointer</td><td>光标呈现为指示链接的指针(一只手)</td></tr><tr><td>move</td><td>此光标指示某对象可被移动,四个箭头</td></tr><tr><td>n-resize</td><td>此光标指示矩形框的边缘可被向上(向北)移动</td></tr><tr><td>s-resize</td><td>向下(南)</td></tr><tr><td>w-resize</td><td>向左(西)</td></tr><tr><td>e-resize</td><td>向右(东)</td></tr><tr><td>ne-resize</td><td>东北向</td></tr><tr><td>nw-resize</td><td>西北向</td></tr><tr><td>se-resize</td><td>东南向</td></tr><tr><td>sw-resize</td><td>西南向</td></tr><tr><td>text</td><td>此光标指示文本</td></tr><tr><td>wait</td><td>此光标指示程序正忙(转圈圈&#x2F;一只表&#x2F;沙漏)</td></tr><tr><td>help</td><td>此光标指示可用的帮助(一个问号或一个气球)</td></tr></tbody></table><blockquote><p>关于url这个值需要注意：</p></blockquote><ul><li>图片地址，在实际开发中一般为绝对路径</li><li>图片大小最好是<code>32*32</code>的大小(各浏览器支持大小不一，但32都ok)</li><li>图片格式，不同浏览器格式不一，可以是<code>png</code>、<code>svg</code>、<code>ico</code>、<code>cur</code>，一般以ico和cur为主</li><li>ico在线图标生成器：<code>https://www.bitbug.net/</code><ul><li>文件路径有中文时，可以从浏览器复制地址</li></ul></li></ul><h4 id="2-outline外轮廓"><a href="#2-outline外轮廓" class="headerlink" title="2.outline外轮廓"></a>2.outline外轮廓</h4><blockquote><p>用于设置元素周围的轮廓，其用法与borser属性一样</p><ul><li>语法：<code>outline:1px solid red;</code></li></ul></blockquote><blockquote><p>小属性：</p></blockquote><ul><li><code>outline-width</code>边框宽</li><li><code>outline-style</code>边框风格</li><li><code>outline-color</code>边框颜色</li></ul><blockquote><p><code>outline</code>与<code>border</code>的区别</p></blockquote><ul><li><code>outline</code>不占据空间，绘制于元素内容周围的轮廓，不参与盒子模型的占位计算，不会因为添加这个属性，而造成盒子占位空间变化</li><li><code>outline</code>没办法单独控制某一边效果，也就是没有<code>outline-left</code>等属性</li><li><code>border</code>参与盒子模型计算，会因为边框值的变化而造成盒子占位空间的变化</li></ul><blockquote><p>去掉表单元素默认的<code>outline</code>属性</p></blockquote><ul><li><code>outline</code>的值设置为<code>0</code>或<code>none</code>会移除元素的默认轮廓</li><li>表单元素为了增加其可访问性(聚焦提示)，都有默认的outline值.在点击该元素后会出现黑色的外轮廓<img src="outlin.png"></li></ul><pre><code> input &#123;    outline:none; &#125;</code></pre><h4 id="3-overflow超出部分隐藏"><a href="#3-overflow超出部分隐藏" class="headerlink" title="3.overflow超出部分隐藏"></a>3.overflow超出部分隐藏</h4><blockquote><p>该属性规定当内容一出元素框时该做什么</p></blockquote><ul><li>属性值<table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>默认值，内容溢出，会呈现在元素框之外</td></tr><tr><td>hidden</td><td>内容溢出，则溢出内容不可见</td></tr><tr><td>scroll</td><td>不管内容是否溢出，都会显示滚动条</td></tr><tr><td>auto</td><td>内容溢出，则显示滚动条以便查看其余内容；若不溢出，则不显示滚动条</td></tr><tr><td>inherit</td><td>规定应该从父元素继承<code>overflow</code>属性的值</td></tr></tbody></table></li></ul><blockquote><p>overflow-x和overflow-y</p></blockquote><ul><li>overflow-x:水平方向溢出设置</li><li>overflow-y:垂直方向溢出设置</li><li>注意：是里面的盒子宽&#x2F;高比外面大，才是出效果，overflow要设置在外面盒子的样式中</li></ul><h4 id="4-vertical-align属性"><a href="#4-vertical-align属性" class="headerlink" title="4.vertical-align属性"></a>4.vertical-align属性</h4><blockquote><p>指定<strong>行内元素、行内块元素、表格单元格元素</strong>的&#x3D;&#x3D;垂直&#x3D;&#x3D;对齐方式</p><ul><li>对<strong>块级元素</strong>是无效的<table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>baseline</td><td>使元素的基线与父元素的<strong>基线</strong>对齐</td></tr><tr><td>sub</td><td>使元素的基线与父元素的<strong>下标基线</strong>对齐</td></tr><tr><td>super</td><td>使元素的基线与父元素的<strong>上标基线</strong>对齐</td></tr><tr><td>text-top</td><td>使元素的<strong>顶部</strong>与父元素的<strong>字体顶部</strong>对齐</td></tr><tr><td>text-bottom</td><td>使元素的<strong>底部</strong>与父元素的<strong>字体底部</strong>对齐</td></tr><tr><td>middle</td><td>使元素的中部与父元素的基线加上父元素x-height(x高度)的一半对齐</td></tr><tr><td>数值(px)</td><td>使元素的基线对齐到与父元素的基线之上的给定长度，可以是负数</td></tr><tr><td>百分比</td><td>使元素的基线对齐到父元素的基线至上的给定百分比，该百分比是<code>line-height</code>属性的百分比，可以是负数</td></tr><tr><td>top</td><td>使元素及其后代元素的顶部与整行的顶部对齐</td></tr><tr><td>bottom</td><td>使元素及其后代元素的底部与整行的底部对齐</td></tr></tbody></table></li></ul></blockquote><blockquote><ul><li>小写字母x的下边缘线就是我们的基线</li><li>无论内容中有无x，都是以x下边缘为基线<img src="baseline.png"></li></ul></blockquote><blockquote><p>应用场景</p></blockquote><ul><li>用于控制文字与行内块元素或图片在垂直方向上的对齐方式</li><li>用于设置表格单元中内容的垂直对齐方式</li></ul><blockquote><p>对比</p></blockquote><ol><li>行文本&#x3D;&#x3D;垂直&#x3D;&#x3D;居中<br><code>line-height:盒子高度</code></li></ol><ul><li>对行内块元素无效</li></ul><ol start="2"><li>text-align属性</li></ol><ul><li>定义**行内内容(例如文字、图片、行内块元素)**相对于他的父元素的&#x3D;&#x3D;水平&#x3D;&#x3D;对齐方式</li></ul><ol start="3"><li>vertical-align属性</li></ol><ul><li>指定**行内元素、行内块元素、表格单元格元素的&#x3D;&#x3D;垂直&#x3D;&#x3D;对齐方式</li><li>对于块级元素无效</li></ul><h4 id="5-案例"><a href="#5-案例" class="headerlink" title="5.案例"></a>5.案例</h4><ol><li>常用的a标签布局按钮</li><li>水平居中的轮播图按钮</li><li>常见的产品展示效果-水壶</li><li>常见的分页导航</li><li>小米官网左侧菜单<blockquote><ul><li><code>:hover</code>：鼠标放上去之后变样式</li></ul></blockquote></li><li>精美的Tab选项卡菜单<blockquote><ul><li>圆角</li></ul></blockquote></li></ol><h2 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h2><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><ul><li>网页本质上是由一个个盒子模型拼凑而成，每个盒子里放置相关的图片、文字、视频等内容</li><li>所有HTML标签都可以看成矩形盒子，具有盒子模型结构</li><li>盒模型由四个部分组成，分别是:<code>content</code>、<code>padding</code>、<code>border</code>、<code>margin</code></li><li>盒模型有5个属性:宽<code>width</code>、高<code>height</code>、边框<code>boder</code>、内边距<code>padding</code>、外边距<code>margin</code><img src="盒子模型.png"></li><li>注:<code>width</code>、<code>height</code>不是盒子的总宽度，而是内容<code>content</code>的宽高</li></ul></blockquote><h4 id="2-width和height属性"><a href="#2-width和height属性" class="headerlink" title="2. width和height属性"></a>2. width和height属性</h4><blockquote><ul><li>width属性<ul><li>单位:px、移动端开发(百分比、rem等单位)</li><li>如果不设置width,块级元素会被撑满(但不意味着width可以继承，是无法继承的)，非块级元素只能被内容撑开</li><li>块级元素的宽度可以设置，非块级元素无效</li></ul></li><li>height属性<ul><li>如果不设置height属性，它将自动被其内容撑开，若没有内容，则height默认是0</li><li>块级元素的高度可以设置，非块级元素由内容撑开</li></ul></li><li>总结<ul><li>块级元素支持设置宽高，没有设置时，宽度自动撑满它的父元素；高度为内容高度，无内容时<strong>高度</strong>为0；</li><li>内联元素设置宽高无效，没有设置时，宽高由内容决定，无内容时<strong>宽高</strong>默认为0</li></ul></li></ul></blockquote><blockquote><table><thead><tr><th>类型</th><th>元素</th><th>性质</th></tr></thead><tbody><tr><td>块级元素</td><td>h1~h6、p、div、ul&#x2F;ol-li、dtdd、figure、figcaption、form、table、canvas、pre</td><td>独占一行、默认自上而下排列，可以设置宽高</td></tr><tr><td>内联元素&#x2F;行内元素</td><td>a、span、lable、strong、em、mark、datalist</td><td>不会自占一行，宽高由内容撑起</td></tr><tr><td>特殊内联元素&#x2F;行内块级元素&#x2F;可替换元素</td><td>img、audio、video、input、select-option、textarea</td><td>不独占一行，可以设置宽高</td></tr></tbody></table></blockquote><h4 id="3-border属性"><a href="#3-border属性" class="headerlink" title="3. border属性"></a>3. border属性</h4><blockquote><ul><li>三要素:线宽度、线型、线颜色<br> 写法：<code>border:2px solid red</code>;以空格分隔<ul><li>线型:<table><thead><tr><th>常见线型值</th><th>描述</th></tr></thead><tbody><tr><td>solid</td><td>实线</td></tr><tr><td>dashed</td><td>虚线</td></tr><tr><td>dotted</td><td>点状线</td></tr><tr><td>double</td><td>双边框</td></tr><tr><td>groove</td><td>定义3D凹槽边框，效果取决于border-color的值</td></tr><tr><td>ridge</td><td>定义3D垄状边框，效果取决于boder-color的值</td></tr><tr><td>inset</td><td>3D inset 边框，其效果取决于 border-color的值</td></tr><tr><td>outset</td><td>3D outset 边框，其效果取决于 border-color 的值</td></tr><tr><td>none</td><td>无边框</td></tr><tr><td>hidden</td><td>隐藏边框</td></tr></tbody></table></li></ul></li></ul></blockquote><blockquote><ul><li>三要素的小属性：</li><li>注：是为了层叠大属性用的，进行局部修改<table><thead><tr><th>小属性</th><th>描述</th></tr></thead><tbody><tr><td>border-width</td><td>线宽</td></tr><tr><td>border-style</td><td>线型</td></tr><tr><td>border-color</td><td>线颜色</td></tr></tbody></table></li></ul></blockquote><blockquote><ul><li>四个方向的边框<table><thead><tr><th>大属性</th><th>小属性</th><th>描述</th></tr></thead><tbody><tr><td>border-top</td><td>border-top-width&#x2F;style&#x2F;color</td><td>上边框</td></tr><tr><td>border-right</td><td>border-right-width&#x2F;style&#x2F;color</td><td>右边框</td></tr><tr><td>border-bottom</td><td>同上</td><td>下边框</td></tr><tr><td>border-left</td><td>同上</td><td>左边框</td></tr></tbody></table></li><li>去掉边框<br>去掉左边框：<code>border-left:none;</code></li></ul></blockquote><h4 id="4-border的应用场景"><a href="#4-border的应用场景" class="headerlink" title="4. border的应用场景"></a>4. border的应用场景</h4><blockquote><ul><li>制作三角形<ul><li>不输入文字，把宽高设置为0</li><li>边框会聚集成正方形，每一边都是一个三角形，只要把其他三边设置成<code>transparent</code>透明色就可以了</li></ul></li></ul><pre class=" language-css"><code class="language-css">div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">30</span>px solid transparent<span class="token punctuation">;</span> <span class="token property">border-top-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&lt;body> &lt;div>&lt;/div>&lt;/body></code></pre></blockquote><blockquote><ul><li>圆角属性border-radius<ul><li>该属性单位通常为<code>px</code>，表示圆角的半径</li><li>还可以使用百分比做单位，表示圆角起始于每条边的哪里</li><li>不输入文本内容，设置圆角</li><li>赋值方式：<ul><li>同时设置四个角<code>border-radius:20px;</code></li><li>单独设置四个角<code>border-radius:10px 20px 30px 40px;</code>分别代表“上右下左”</li><li>单独设置每一个角：小属性</li></ul></li></ul></li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>border-top-left-radius</code></td><td>左上角</td></tr><tr><td><code>border-top-right-radius</code></td><td>右上角</td></tr><tr><td><code>border-bottom-left-radius</code></td><td>左下角</td></tr><tr><td><code>border-bottom-right-radius</code></td><td>右下角</td></tr></tbody></table><pre><code>border-radius:50%; /*盒子为正方形时是圆*/border-radius:  px;/*圆，数值正方形宽度的一半*/border-radius: 50%;/*盒子为长方形时是椭圆*/</code></pre></blockquote><h4 id="5-padding内边距"><a href="#5-padding内边距" class="headerlink" title="5. padding内边距"></a>5. padding内边距</h4><blockquote><ul><li>padding是边框内壁到内容之间的距离</li></ul></blockquote><blockquote><ul><li>数值的写法，以空格分隔<table><thead><tr><th>数值</th><th>说明</th><th>示范</th></tr></thead><tbody><tr><td>四个数值</td><td>分别表示<code>上右下左</code></td><td><code>padding:10px 20px 30px 40px</code></td></tr><tr><td>&#x3D;&#x3D;三个数值&#x3D;&#x3D;</td><td>分别表示<code>上、左右、下</code></td><td><code>padding:10px 20px 30px</code></td></tr><tr><td>两个数值</td><td><code>上下、左右</code></td><td><code>padding:10px 20px</code></td></tr><tr><td>一个数值</td><td>四个边距相等</td><td><code>padding:10px;</code></td></tr></tbody></table></li><li>应用场景：如果需要设置父子间间距，即给父元素添加内边距来实现</li></ul></blockquote><blockquote><ul><li>小属性：四个方向可以分别设置，用来层叠大属性<table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>padding-top</code></td><td>上内边距</td></tr><tr><td><code>padding-right</code></td><td>右内边距</td></tr><tr><td><code>padding-bottom</code></td><td>下内边距&#96;</td></tr><tr><td><code>padding-left</code></td><td>左内边距</td></tr></tbody></table></li></ul></blockquote><blockquote><p><code>padding-bottom:100%;</code>可以使元素高度等于宽度</p></blockquote><h4 id="6-margin外边距"><a href="#6-margin外边距" class="headerlink" title="6. margin外边距"></a>6. margin外边距</h4><blockquote><ul><li>是盒子与其他盒子之间的距离</li><li>有四个方向可以分别设置</li></ul></blockquote><blockquote><ul><li>数值的写法与<code>padding</code>相同<table><thead><tr><th>数值</th><th>说明</th><th>示范</th></tr></thead><tbody><tr><td>四个数值</td><td>分别表示<code>上右下左</code></td><td><code>padding:10px 20px 30px 40px</code></td></tr><tr><td>&#x3D;&#x3D;三个数值&#x3D;&#x3D;</td><td>分别表示<code>上、左右、下</code></td><td><code>padding:10px 20px 30px</code></td></tr><tr><td>两个数值</td><td><code>上下、左右</code></td><td><code>padding:10px 20px</code></td></tr><tr><td>一个数值</td><td>四个边距相等</td><td><code>padding:10px;</code></td></tr></tbody></table></li></ul></blockquote><blockquote><ul><li>小属性：四个方向可以分别设置，用来层叠大属性<table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>margin-top</code></td><td>上外边距</td></tr><tr><td><code>margin-right</code></td><td>右外边距</td></tr><tr><td><code>margin-bottom</code></td><td>下外边距</td></tr><tr><td><code>margin-left</code></td><td>左外边距</td></tr></tbody></table><blockquote><p>注意：</p></blockquote></li><li>如果数值是百分比，则是以其&#x3D;&#x3D;父盒子的宽度&#x3D;&#x3D;为基础的，等于父盒子宽度的百分之几</li></ul></blockquote><blockquote><ul><li>margin的塌陷</li><li>又称为：外间距重叠&#x2F;外边距合并&#x2F;外边距穿透</li></ul><ol><li>兄弟元素之间，<strong>垂直</strong>方向：上下外边距出现塌陷</li></ol><ul><li>第一个元素的下外边距与第二个元素的上外边距会发生合并</li><li>margin不会叠加，只以大值为准</li><li>解决办法：<ul><li>任何一个元素加上<code>display:inline-block;</code></li><li>把外边距只加在其中一个元素上</li><li>任意一个元素margin换成对应的<code>padding</code>：把其中一个盒子外边距删除，然后套上透明色，内边距为原本的margin的盒子或者套上<code>padding-top</code>&#x3D;margin的盒子</li></ul></li></ul><ol start="2"><li>margin在<strong>水平</strong>方向上不会塌陷</li><li>父子元素之间，垂直方向：上外边距塌陷</li></ol><ul><li>当一个元素包含在另一元素中时，如果父元素没有设置内边距<strong>或</strong>边框把外边距分隔开，他们的上外边距也会发生塌陷(合并)</li><li>原本子元素设置margin后会与父元素的边框产生距离，但因为发生塌陷，所以父子元素上边框重叠，子元素的外边距穿透出去，与父元素的外边距合并</li><li>塌陷是最大值为主</li><li>解决办法：<ul><li>给父元素加上<code>overfiow:hidden</code>;但子元素超出的部分会被隐藏</li><li>给父元素添加<code>border</code>边框；但占位宽会多两像素</li><li>把子元素外边距删除，然后套上透明色，内边距为原本的margin的盒子或者套上<code>padding-top</code>&#x3D;margin的盒子</li><li>还有更多方法，学完浮动、定位后会讲解</li></ul></li><li>垂直或者父子元素的解决办法3：</li></ul><pre><code>&lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;&lt;div style=&quot;padding-top:30px;&quot;&gt;  &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre></blockquote><blockquote><ul><li>margin负值</li><li>讲完浮动后再学习</li></ul></blockquote><h4 id="7-去掉元素的默认样式"><a href="#7-去掉元素的默认样式" class="headerlink" title="7. 去掉元素的默认样式"></a>7. 去掉元素的默认样式</h4><blockquote><ul><li>网页中的元素为了展示元素本身的用途和结构，都会给元素添加默认的样式</li><li>常见的默认样式如下：<ul><li><code>body</code>的默认margin&#x3D;8px</li><li><code>ul</code>添加了默认的<code>padding</code>、<code>list-style</code>、<code>margin</code></li><li>a标签添加了默认的颜色、下划线</li><li>p标签有默认的<code>margin</code></li></ul></li><li>怎么做？<ul><li>用通配符选择器；实际工作中不使用<br><code>* &#123;margin:0;padding:0;&#125;</code></li><li>使用并集选择器，用<code>,</code>分隔</li></ul></li></ul><pre><code>body,ul,p &#123;    margin:0;padding:0;    &#125;</code></pre></blockquote><h4 id="8-盒子的水平居中"><a href="#8-盒子的水平居中" class="headerlink" title="8. 盒子的水平居中"></a>8. 盒子的水平居中</h4><blockquote><ul><li>将盒子的左右margin设置为<code>auto</code>，将盒子水平居中，只对块级元素有效</li><li><code>auto</code>用在上下外边距时没有用</li><li>文字、图片、行内块元素水平居中：<code>text-align:center</code></li><li>块级元素水平居中，是给元素自身加上<code>margin:0 auto;</code></li><li>盒子的垂直居中，需要使用绝对定位技术实现(后边会讲到)</li></ul></blockquote><h4 id="9-盒子模型占位计算"><a href="#9-盒子模型占位计算" class="headerlink" title="9. 盒子模型占位计算"></a>9. 盒子模型占位计算</h4><blockquote><ul><li>盒模型内容区大小：</li><li>在标准盒子模型中，决定了父元中的子元素能占据的最大宽高<ul><li>如果只有一个子元素，其宽度超过父元，就会溢出(对内联元素无效，因为内联元素不能设置宽高)</li><li>如果有多个子元素(行内元素、行内块元素)，子元的宽度加起来超过了父元，那么超过的那些子元就会换行显示。(块级元素本来就独占一行)</li></ul></li></ul></blockquote><blockquote><ul><li>盒模型可视宽高：在页面呈现效果的区域<ul><li>可视宽度：内容区宽度+左右内边距+左右边框</li><li>可视高度：内容区高度+上下内边距+上下边框</li></ul></li></ul></blockquote><blockquote><ul><li>实际占位宽高</li><li>决定了这个元素在父元素中的占据面积<ul><li>实际宽度：内容区宽度+左右内边距+左右边框左右外边距</li><li>实际高度：内容区高度+左右内边距+左右边框左右外边距</li></ul></li></ul></blockquote><h3 id="怪异盒模型-IE盒子模型，CSS3新增"><a href="#怪异盒模型-IE盒子模型，CSS3新增" class="headerlink" title="怪异盒模型(IE盒子模型，CSS3新增)"></a>怪异盒模型(IE盒子模型，CSS3新增)</h3><h4 id="1-盒模型分为两种"><a href="#1-盒模型分为两种" class="headerlink" title="1. 盒模型分为两种"></a>1. 盒模型分为两种</h4><blockquote><ul><li>标准盒模型：盒子大小会因为设置的内外边距和边框而变化，即：外扩</li><li>怪异盒模型：盒子的实际大小是设置的大小(width、height),不会因为内外边距、边框的大小而变化，即内缩</li><li>二者之间的区别：<ul><li>标准盒模型的width和height设置的是内容区；而在怪异盒模型中，width和height包括内容区、边框、内边距</li><li>尺寸计算公式不同</li></ul></li></ul></blockquote><h4 id="2-计算公式"><a href="#2-计算公式" class="headerlink" title="2.计算公式"></a>2.计算公式</h4><blockquote><ul><li>width&#x3D;内容区宽度+边框+内边距</li><li>height&#x3D;内容区高度+边框+内边距</li><li>在以上公式中，除内容区以外的都可以设置宽高，所以内容区的宽高可以反推计算</li></ul></blockquote><h4 id="3-盒模型转换"><a href="#3-盒模型转换" class="headerlink" title="3. 盒模型转换"></a>3. 盒模型转换</h4><blockquote><p>通过<code>box-sizing</code>属性切换盒子模型</p><ul><li><code>box-sizing:content-box;</code>是默认值，盒子以标准盒子模型特性来渲染</li><li><code>box-sizing:border-box;</code>使盒子以怪异盒子模型特性来渲染</li></ul></blockquote><h4 id="4-button-按钮"><a href="#4-button-按钮" class="headerlink" title="4. button 按钮"></a>4. button 按钮</h4><blockquote><ul><li><code>button</code>标签自带<code>box-sizing:border;</code>属性</li><li>所以<code>div</code>和<code>button</code>的大小是有差异的，button内缩，div外扩</li></ul></blockquote><h4 id="5-box-sizing应用场景"><a href="#5-box-sizing应用场景" class="headerlink" title="5. box-sizing应用场景"></a>5. box-sizing应用场景</h4><blockquote><ul><li><code>box-sizing</code>属性大量应用于移动网页制作中，因为它结合百分比布局、弹性布局等非常好用，在PC页面开发中使用较少</li><li>该属性兼容到IE9</li><li>若我们期望不管内容、边框、内边距大小如何变化，元素的可视宽高始终不变时，就可以给元素添加<code>box-sizing:border-box;</code>属性，以怪异盒模型来渲染</li><li>不管元素的占位宽如何变化，始终保持边框和内边距不变，希望通过改变内容区大小来达到目的</li><li>常见的响应式开发中、栅格系统等</li></ul></blockquote><h3 id="前端切图工具"><a href="#前端切图工具" class="headerlink" title="前端切图工具"></a>前端切图工具</h3><table><thead><tr><th>软件名称</th><th>功能</th><th>描述</th><th>官网下载地址</th></tr></thead><tbody><tr><td>Snipaste</td><td>截图+贴图</td><td>个人模仿他人效果可用</td><td><a href="https://zh.snipaste.com/">https://zh.snipaste.com/</a></td></tr><tr><td>PxCook</td><td>标注+代码生成(psd)</td><td>是一款连接设计师到开发者之间的协作工具</td><td><a href="https://www.fancynode.com.cn/pxcook/">https://www.fancynode.com.cn/pxcook/</a></td></tr><tr><td>Photoshop</td><td>专业的图片软件处理工具</td><td>实际企业开发设计软件</td><td><a href="https://www.adobe.com/cn/products/photoshop.html">https://www.adobe.com/cn/products/photoshop.html</a></td></tr><tr><td>蓝湖</td><td>产品设计协作平台</td><td>实际企业团队开发协作</td><td><a href="https://lanhuapp.com/">https://lanhuapp.com/</a></td></tr></tbody></table><h4 id="1-photoshop设计软件"><a href="#1-photoshop设计软件" class="headerlink" title="1.photoshop设计软件"></a>1.photoshop设计软件</h4><blockquote><p>助理老师破解版安装教程</p><ul><li>下载、解压压缩包</li><li>&#x3D;&#x3D;断网安装&#x3D;&#x3D;，断网后直接点击Set-up-exe进入安装，过程中不需要任何操作，等待5-10分钟即可</li><li>安装好后,通过window键打开</li><li>使用时，把对应的psd设计稿拖动到软件区域即可</li></ul></blockquote><h4 id="2-PxCook像素大厨"><a href="#2-PxCook像素大厨" class="headerlink" title="2.PxCook像素大厨"></a>2.PxCook像素大厨</h4><blockquote><ul><li>设计师可以免去繁琐的标注功能，前端工程师也可以更加直观的查看设计稿中的元素的内容，间距，尺寸和样式等</li><li>它还可以为工程师直接呈现选中元素的多平台样式代码和素材切图</li><li>官方使用教程：<a href="https://www.fancynode.com.cn/pxcook/docs?ids=qa/pay">https://www.fancynode.com.cn/pxcook/docs?ids=qa/pay</a></li></ul></blockquote><h4 id="3-PS与PxCook配合"><a href="#3-PS与PxCook配合" class="headerlink" title="3.PS与PxCook配合"></a>3.PS与PxCook配合</h4><blockquote><ul><li>设计师用PS设计稿设计好的PSD的效果图后，接下来的工作就是交给程序员来开发成网页</li><li>首先程序员需要把PSD设计稿按开发的需求标记qieytu切图，导出需要的图片素材</li></ul></blockquote><blockquote><ul><li>连接Pxcook和PS</li></ul><ol><li>打开PS–&gt;编辑–&gt;远程连接–&gt;启用远程连接–&gt;设置密码</li><li>打开Pxcook，点击右上角的小刀图标，输入密码，连接成功</li></ol></blockquote><blockquote><ul><li>标记切图：<ul><li>打开pxccok，建立新项目</li><li>将图片拖入PS–&gt;选择图层–&gt;窗口–&gt;扩展功能–&gt;pxccok切图–&gt;选择设备类型、分辨率、保存–&gt;导出到pxcook</li><li>在pxcook后，点击黑色区域，就可以看到PNG，点击保存</li></ul></li><li>分析效果图<ul><li>分析结构，上下结构&#x2F;左右结构</li><li>先拿到效果图，分析它的html结构</li><li>清除默认样式(样式初始化)</li><li>搭建html结构，再写CSS样式</li></ul></li><li>自定义切图的尺寸<ul><li>首先需要确保被标记的图层为图层组，若不是则需要打组</li><li>建立一个组，然后把所需的图层放入组内</li><li>在组内创建一个名为<code>@bounds</code>或<code>#</code>的·图层，通过矩形工具，在该图层内绘制一个举行来描述要切除切片的范围</li><li>打开扩展工具——pxccok标记为切图–&gt;保存–&gt;导入pxcook<br>注意：自定义切图导出到pxcook界面也是完整图，双击项目图，左边就会出现自定义切图<img src="自定义切图.png"></li></ul></li></ul></blockquote><h4 id="4-出现的问题"><a href="#4-出现的问题" class="headerlink" title="4.出现的问题"></a>4.出现的问题</h4><blockquote><ul><li>PS安装后打开时一直在加载中</li></ul><ol><li>打开编辑–&gt;首选项–&gt;常规–&gt;勾选”停用主页屏幕”<img src="PS停用主页屏幕.png"></li></ol><ul><li>PS扩展界面无法打开</li></ul><ol><li>打开注册器(在win中搜索注册器，或者按住快捷键”WIN+R”,输入”regedit”)</li><li>打开以下路径：”计算机\HKEY_CURRENT_USER\Software\Adobe\CSXS.9”</li><li>新建字符串值，输入名称”PlayerDebugMode”，值为”1”</li><li>重新打开PS即可</li></ol></blockquote><h2 id="CSS-三大特性：继承、层叠性、优先级"><a href="#CSS-三大特性：继承、层叠性、优先级" class="headerlink" title="CSS 三大特性：继承、层叠性、优先级"></a>CSS 三大特性：继承、层叠性、优先级</h2><blockquote><p>在实际的开发中，经常会遇到CSS应用时的冲突问题。比如本来应该产生效果的样式没有生效，或有时候不想要的效果硬实现了。<br>CSS三大特性：继承性、层叠性、优先级就是为解决这些问题而来的。</p></blockquote><h3 id="一、CSS继承性"><a href="#一、CSS继承性" class="headerlink" title="一、CSS继承性"></a>一、CSS继承性</h3><ul><li>CSS的继承性是指特定的CSS属性会向下传递到子孙元素。即祖先元素设置，后代元素即生效</li></ul><h4 id="CSS继承性遵循”就近原则”"><a href="#CSS继承性遵循”就近原则”" class="headerlink" title="CSS继承性遵循”就近原则”"></a>CSS继承性遵循”就近原则”</h4><blockquote><ul><li>如果元素自身没有设置某个具有可继承的属性，则会向他的父元素继承</li><li>如果父元素没有，则再往上继承父元素的父元素的这个属性，一层一层向上找，如果找不到，就以默认的样式显示</li></ul></blockquote><blockquote><p>如何查看元素的默认值?</p></blockquote><ul><li>要了解一个属性的默认值，可以把这个属性值设置为<code>initial</code>，然后审查元素，在computed&#x2F;styles面板中可以看到其默认值，如<code>color:initial</code></li></ul><h4 id="可继承和不可继承属性有哪些"><a href="#可继承和不可继承属性有哪些" class="headerlink" title="可继承和不可继承属性有哪些"></a>可继承和不可继承属性有哪些</h4><blockquote><p>可继承属性:<strong>文本相关的属性</strong>普遍具有继承性，只需要给祖先标签设置，即可在后代所有标签中生效</p></blockquote><ul><li>字体系列：font-size、font-family、font-style、font、font-weight</li><li>文本系列：color、text-align、text-indent、line-height、word-spacing、letter-spacing、text-transform</li><li>列表布局属性：list-style、list-style-type、list-style-image、list-style-image</li><li>光标属性：cursor光标显示为何种形态</li><li>元素可见性：visibility控制元素显示和隐藏</li></ul><blockquote><p>不可继承属性</p></blockquote><ul><li>盒子模型：display、margin、border、padding、height、min-height、max-height、width、min-width、max-width</li><li>定位相关：position、left、right、top、bottom、z-index</li><li>浮动：float、clear</li><li>其他：background、overflow、table-layout、vertical-align、page-break-after、page-bread-before、unicode-bidi</li></ul><h4 id="特殊情况："><a href="#特殊情况：" class="headerlink" title="特殊情况："></a>特殊情况：</h4><ul><li>a标签的color值默认不继承，它自带默认效果</li></ul><h4 id="line-height的继承性"><a href="#line-height的继承性" class="headerlink" title="line-height的继承性"></a>line-height的继承性</h4><blockquote><p><code>line-height</code>的值有三种单位，在继承时是有差异的</p><table><thead><tr><th>父元素line-height值</th><th>继承规则</th><th>子元素line-height值</th></tr></thead><tbody><tr><td>50px</td><td>直接继承该值</td><td>50px</td></tr><tr><td>2</td><td>直接继承该比例</td><td>2</td></tr><tr><td>200%</td><td>继承百分比<strong>计算后</strong>的值</td><td>40px</td></tr></tbody></table></blockquote><ul><li>数值表示法和百分比表示法是以<code>font-size</code>为依据的<img src="line-height.png"></li></ul><h4 id="body标签样式初始化"><a href="#body标签样式初始化" class="headerlink" title="body标签样式初始化"></a>body标签样式初始化</h4><blockquote><p>因为文字相关属性具有继承性，所以通常会设置<code>&lt;body&gt;</code>标签的字号、颜色、行高等，这样就能当做整个网页的默认样式了</p></blockquote><h4 id="设置继承性"><a href="#设置继承性" class="headerlink" title="设置继承性"></a>设置继承性</h4><blockquote><p>默认不继承的属性想要继承，可以把属性值设置为<code>inherit</code>，表示这个属性的值继承父元素的<br>扩展补充知识</p></blockquote><ul><li><code>initial</code>：设置属性值和浏览器默认样式相同</li><li><code>inherit</code>：设置属性值默认继承父元素</li><li><code>unset</code>：为以上两个值的组合；如果属性有继承性，则继承父元素，没有则为默认值(不设置也是这个效果)</li></ul><h3 id="二、CSS层叠性"><a href="#二、CSS层叠性" class="headerlink" title="二、CSS层叠性"></a>二、CSS层叠性</h3><blockquote><ul><li>层叠性是CSS的一个基本特征，它是一个定义了如何合并来自多个源(css规则)的属性值的算法</li><li>它在CSS中处于核心地位，CSS的全称：层叠样式表正式强调了这一点</li></ul></blockquote><h4 id="CSS层叠性解读"><a href="#CSS层叠性解读" class="headerlink" title="CSS层叠性解读"></a>CSS层叠性解读</h4><blockquote><ul><li>层叠性是指多个CSS规则可以作用于同一个标签，效果叠加，并不完全覆盖</li><li>CSS的层叠性有两层含义：<strong>叠加</strong>和<strong>覆盖</strong></li><li>不同选择器作用于同一元素，不同属性会<strong>叠加</strong>，相同属性会<strong>覆盖</strong></li><li>在覆盖时需要遵循两大原则：”就近原则”和”优先级”</li></ul></blockquote><h4 id="CSS的叠加原理"><a href="#CSS的叠加原理" class="headerlink" title="CSS的叠加原理"></a>CSS的叠加原理</h4><blockquote><ul><li>不同选择器作用于同一元素，不同属性会叠加作用于元素</li></ul></blockquote><h4 id="CSS的覆盖原则"><a href="#CSS的覆盖原则" class="headerlink" title="CSS的覆盖原则"></a>CSS的覆盖原则</h4><blockquote><p>就近原则</p></blockquote><ul><li>当两个或多个<strong>优先级相同</strong>的选择器作用到同一个元素时。如果出现相同的属性，则以写在后面的选择器中的属性为主</li></ul><blockquote><p>优先级</p></blockquote><ul><li>当两条或多条规则(选择器)作用到同一个元素，如果出现相同的属性，则以优先级高的为主</li></ul><h4 id="层叠性的冲突处理"><a href="#层叠性的冲突处理" class="headerlink" title="层叠性的冲突处理"></a>层叠性的冲突处理</h4><ul><li>不同CSS规则集同时作用于同一个标签，不同属性相互叠加，相同属性会覆盖</li><li>相同属性覆盖，首先需要计算选择器的权重，最后以选择器权重高的为主</li><li>如果选择器权重相同，则写在后面的会覆盖写在前面的</li><li>如果想要实现的效果，因为选择器权重低而不生效，则通过提高选择器权重来达到效果</li></ul><h3 id="三、CSS选择器优先级"><a href="#三、CSS选择器优先级" class="headerlink" title="三、CSS选择器优先级"></a>三、CSS选择器优先级</h3><ul><li>当多个CSS规则集同时作用于同一个HTML标签时，不同属性会叠加，但相同属性会发生覆盖</li><li>在发生覆盖时，浏览器通过选择器的优先级来判断以哪个选择器中的属性值为主，从而在该元素上应用这些属性值</li></ul><h4 id="单个选择器类型的权重"><a href="#单个选择器类型的权重" class="headerlink" title="单个选择器类型的权重"></a>单个选择器类型的权重</h4><ul><li><p>基础选择器：id选择器&gt;class选择器&gt;标签选择器&gt;通配符选择器</p></li><li><p>本质上不同类型的选择器有不同的分数值，分数值越高，选择器的权重越高</p><table><thead><tr><th>选择器的类型</th><th>实例</th><th>选择器权重</th><th>等级</th></tr></thead><tbody><tr><td>!important</td><td><code>div&#123;color:red!important;&#125;</code></td><td>无穷大</td><td>特级</td></tr><tr><td>行内样式(style属性中样式)</td><td><code>style=&#39;color:red&#39;;</code></td><td>1000</td><td>第一等级</td></tr><tr><td>id选择器</td><td>#id</td><td>0100</td><td>第二等级</td></tr><tr><td>class、伪类、属性选择器</td><td><code>.box</code>、<code>:hover</code>、<code>type=text</code></td><td>0010</td><td>第三等级</td></tr><tr><td>标签选择器、伪元素选择器</td><td><code>div1、</code>::after&#96;</td><td>0001</td><td>第四等级</td></tr><tr><td>通配符、子选择器、相邻选择器等</td><td><code>*</code>、<code>&gt;</code>、<code>+</code>、<code>~</code></td><td>0000</td><td></td></tr><tr><td>继承的样式</td><td></td><td>0000</td><td></td></tr></tbody></table></li><li><p>通配符<code>*</code>权重实际是要大于继承的样式的；因为只有在没有设置样式是才会继承或者使用默认样式</p></li></ul><h4 id="复杂选择器优先级计算"><a href="#复杂选择器优先级计算" class="headerlink" title="复杂选择器优先级计算"></a>复杂选择器优先级计算</h4><ul><li>优先级就是分配给指定的CSS声明的一个权重</li><li>选择器的优先级是由选择器中的每一种**选择器类型的数值(权值)**相加的最终结果来决定</li><li>一个选择器的优先级是有四个部分相加计算得来的(数值越大，代表选择器的优先级越高)<br><strong>以下是复杂选择器的权重计算规则</strong></li><li>这里的行内样式<code>&lt;p style=&quot;color:red&quot;&gt;&lt;/p&gt;</code>并不是选择器，但我们把它放在一起，是因为它会影响我们最终的结果<table><thead><tr><th>选择器</th><th>千位</th><th>百位</th><th>十位</th><th>个位</th><th>优先级</th></tr></thead><tbody><tr><td>行内样式</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1000</td></tr><tr><td><code>div p</code></td><td>0</td><td>0</td><td>0</td><td>2</td><td>0002</td></tr><tr><td><code>#box div p</code></td><td>0</td><td>1</td><td>0</td><td>2</td><td>0102</td></tr></tbody></table></li></ul><p>|<code>.box .item h3</code>|0|0|2|1|0021|<br>|<code>.box:hover p</code>|0|0|2|1|0021|</p><blockquote><p>注意事项：</p></blockquote><ul><li>在进行选择器权重计算时不允许进行<strong>进位</strong></li><li>例如，20个类选择器仅仅意味着20个十位，而不能视为两个百位；也就是说，无论多少个类选择器的权重叠加，都不会超过一个ID选择器</li><li>在比较选择器优先级时，从左往右比较，一位一位比较</li></ul><h4 id="important提升权重"><a href="#important提升权重" class="headerlink" title="!important提升权重"></a><code>!important</code>提升权重</h4><ul><li>当在一个样式声明中使用一个<code>!important</code>规则时，此声明将覆盖任何其他声明，只要CSS声明属性值后面带<code>!important</code>，就一定以它为主</li><li>从技术上讲，<code>!important</code>与优先级无关，但它与最终结果直接相关</li></ul><blockquote><p>注意：慎用<code>!important</code></p></blockquote><ul><li>因为这会带来样式的冲突，后面某个地方，需要重写这个样式时，会发现根本无效。一般你在利用第三方组件或css框架时，如果不能充下央视，那将会失去很多色彩</li><li>在某些情况下是一定要用的，比如在之前学的自定义字体时，<code>font-family</code>属性后面加了<code>!important</code>关键字</li></ul><h4 id="总结：CSS选择器优先级"><a href="#总结：CSS选择器优先级" class="headerlink" title="总结：CSS选择器优先级"></a>总结：CSS选择器优先级</h4><blockquote><p>首先要找到，有<strong>哪些选择器</strong>在控制标签元素的样式，然后按以下五步来分析</p></blockquote><ul><li>第一步：找有没有带<code>important</code>关键词的CSS声明，有就一定以他为主，没有看第二步</li><li>第二步：找有没有行内样式，有则以行内样式为主，没有看第三步</li><li>第三步：看选择器的优先级，优先级高的为主，如果优先级相同，则看第四步</li><li>第四步：优先级相同，以写在后面的为主。如果没有选择器作用于当前标签，则看第五步</li><li>看此CSS属性是否具有继承性，如果有，则继承父元素的样式，如果没有，则以默认样式显示</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>onlineOrdering-applet</title>
      <link href="/2023/11/27/onlineOrdering-applet/"/>
      <url>/2023/11/27/onlineOrdering-applet/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><a href="https://github.com/hermiablog/onlineOrdering-applet">小程序链接</a></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="main.png" width="200"><img src="menu.png" width="200"><img src="cart.png" width="200"><img src="order.png" width="200"><img src="me.png" width="200"><h2 id="项目创建过程"><a href="#项目创建过程" class="headerlink" title="项目创建过程"></a>项目创建过程</h2><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>将项目的通用样式写在<code>app.wxss</code>中<blockquote><ul><li>在根目录<code>page</code>下设置主题色、字号、字体颜色等</li><li>注意：<code>page</code>要设置<code>min-height=100%;</code>才会占满屏幕</li></ul></blockquote></li><li>清除常用组件的自带样式<blockquote><ul><li>将外边距、内边距都设置为0</li><li>将组件都设置为怪异盒模型</li></ul></blockquote></li><li>新建<code>src</code>文件夹，用于存放不可动态获取的图片、图标</li><li>新建<code>component</code>文件夹，用于存放自定义组件</li><li>自定义<code>icon</code>组件，实现<code>icon</code>图标的复用<blockquote><ul><li>新建<code>iconfont</code>文件夹，保存图标<code>wxss</code>文件</li><li>单独存放有利于随时替换</li></ul></blockquote></li></ol><pre><code>order-online├─ .eslintrc.js├─ app.js├─ app.json├─ app.wxss├─ component│  └─ icon│     ├─ icon.js│     ├─ icon.json│     ├─ icon.wxml│     └─ icon.wxss├─ iconfont│  └─ iconfont.wxss├─ pages│  └─ index│     ├─ index.js│     ├─ index.json│     ├─ index.wxml│     └─ index.wxss├─ project.config.json├─ project.private.config.json├─ sitemap.json├─ src│  └─ icon│     ├─ cart.png│     ├─ index.png│     ├─ menu.png│     ├─ order.png│     ├─ selected-cart.png│     ├─ selected-index.png│     ├─ selected-menu.png│     ├─ selected-order.png│     ├─ selected-user.png│     ├─ takeBySelf.png│     ├─ user.png│     └─ waimai.png└─ utils   └─ util.js</code></pre><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><h4 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h4><ol><li>需要实现的效果</li></ol><ul><li>在顶部搜索框，输入产品名，可跳转到对应产品</li><li>选择取餐方式后，跳转到菜单页，并保存取餐方式</li><li>点击新品图片，可跳转到对应产品</li></ul><ol start="2"><li>难点</li></ol><ul><li><p>顶部导航与胶囊按钮对齐</p><blockquote><ul><li>自定义导航<code>navigation</code></li><li>实现不同机型和开发工具的适配</li></ul></blockquote></li><li><p>搜索后跳转到对应产品&#x3D;&#x3D;(需补充)&#x3D;&#x3D;</p></li></ul><h4 id="第一步：实现tabBar"><a href="#第一步：实现tabBar" class="headerlink" title="第一步：实现tabBar"></a>第一步：实现<code>tabBar</code></h4><ol><li>根据项目需要，确认使用原生<code>tabBar</code></li><li>创建对应页面的文件</li><li>下载<code>tabBar</code>图标，存放至<code>src/icon</code>文件夹</li><li>在<code>app.json</code>里进行配置</li></ol><h4 id="第二步：自定义导航栏，并处理兼容性"><a href="#第二步：自定义导航栏，并处理兼容性" class="headerlink" title="第二步：自定义导航栏，并处理兼容性"></a>第二步：自定义导航栏，并处理兼容性</h4><blockquote><p>参考微信开发者社区回答：<a href="https://developers.weixin.qq.com/community/develop/article/doc/000aa842274d58cb15f74f81f56013">https://developers.weixin.qq.com/community/develop/article/doc/000aa842274d58cb15f74f81f56013</a></p><ul><li>新建<code>navigation-bar</code>组件构建自定义导航栏</li><li>菜单页引入该组件</li></ul></blockquote><p><strong><code>navigation-bar</code>组件内：</strong></p><blockquote><p><strong>实现对齐和适配的思路：</strong></p><ul><li>正常来讲，<code>iOS</code>和<code>Android</code>下的胶囊按钮的位置以及大小都是相同且不变的，我们可以通过胶囊按钮的位置和大小再配合 <code>wx.getSystemInfo</code> 或者 <code>wx.getSystemInfoSync</code> 中得到的 <code>statusBarHeight</code> 来计算出导航栏的位置和大小。</li><li>顶部导航区，包括状态栏、导航栏(导航条+胶囊)，都设置固定定位</li></ul></blockquote><blockquote><p><strong>实现步骤：</strong></p></blockquote><ol><li><p>首先需要知道不同<code>iOS</code>和<code>Android</code>下的胶囊按钮的位置以及大小</p><blockquote><ul><li>根据开发者的文档可知(非官方数据，自己进行微调)：</li></ul><pre><code>// iOS  top 4px  right 7px  width 87px  height 32px// Android  top 8px  right 10px  width 95px  height 32px// 开发者工具模拟器（iOS）  top 6px  right 10px  width 87px  height 32px// 开发者工具模拟器（Android）  top 8px  right 10px  width 87px  height 32px</code></pre><ul><li>这里<code>top</code>的值是从 <code>statusBarHeight</code> 作为原点开始计算的</li><li>因此最终位置还得加上状态栏的高度</li></ul></blockquote></li><li><p>通过<code>wx.getSystemInfoSync</code>可以得到状态栏<code>statusBarHeight</code>的位置和宽高</p><blockquote><ul><li>状态栏的宽度也就是可使用窗口宽度(手机屏幕宽度)</li></ul></blockquote></li><li><p>计算导航条的位置和大小</p><blockquote><ul><li>导航条要和胶囊平齐，所以：</li><li>top&#x3D;胶囊的top<blockquote><p>把胶囊离右边框的距离作为导航条的内边距</p></blockquote></li><li>left&#x3D;0</li><li>宽度&#x3D;可使用窗口宽度-胶囊右边距-胶囊宽度-导航条内边距&#x3D;可使用窗口宽度-胶囊宽度-胶囊右边距*3<blockquote><p>注意：胶囊的top是以状态栏为原点，但导航条是以屏幕左上角为原点</p></blockquote></li><li>height&#x3D;胶囊的height</li></ul></blockquote></li><li><p>计算整个导航栏(导航条+胶囊)的位置和大小</p><blockquote><ul><li>top&#x3D;状态栏的高度</li><li>left&#x3D;0</li><li>宽度&#x3D;可使用窗口宽度</li><li>高度&#x3D;<code>胶囊的height+胶囊的上外边距*2</code>&#x3D;<code>(胶囊的top-状态栏高度)*2+胶囊的height</code></li></ul></blockquote></li><li><p>格式化</p><blockquote><ul><li>前面的得到的所有数据都是对象的形式</li><li>而在页面上设置样式时，要在标签里用<code>style=&quot;&quot;</code>的方式</li><li>所以要把对象格式的数据，转为成字符串</li></ul><pre><code>formatStyle(position) &#123;  //声明一个数组，存放遍历出来的数据，加px  let styles = []  for (let key in position) &#123; styles.push(`$&#123;key&#125;: $&#123;position[key]&#125;px;`)  &#125;  // 将数组转成字符串，把逗号替换成空格  return styles.join(&#39; &#39;)&#125;</code></pre><ul><li>因为<code>wx.getSystemInfoSync()</code>得到的可使用窗口宽度，单位是px</li></ul></blockquote></li></ol><h4 id="第三步：搜索框"><a href="#第三步：搜索框" class="headerlink" title="第三步：搜索框"></a>第三步：搜索框</h4><ul><li>提高顶部导航区的层级，否则就会被<code>swiper</code>覆盖</li><li>搜索图标的显隐：在输入时，搜索图标自动消失</li><li>给输入框绑定<code>bind:input</code>事件，在<code>data</code>里设置一个变量<code>iconShow</code>来控制图标的显隐</li></ul><h4 id="第四步：顶部的swiper与底部banner区"><a href="#第四步：顶部的swiper与底部banner区" class="headerlink" title="第四步：顶部的swiper与底部banner区"></a>第四步：顶部的<code>swiper</code>与底部<code>banner</code>区</h4><blockquote><ul><li><code>swiper</code>使用<code>swiper</code>与<code>swiper-item</code>结合实现</li><li><code>banner</code>区的跳转&#x3D;&#x3D;(需补充)&#x3D;&#x3D;</li></ul></blockquote><h4 id="第五步-取餐方式跳转"><a href="#第五步-取餐方式跳转" class="headerlink" title="第五步 取餐方式跳转"></a>第五步 取餐方式跳转</h4><ol><li>思路<blockquote><ul><li>选择取餐方式之后进入菜单页面</li><li>菜单页面会根据点进来的方式，显示外卖还是自取，所以从首页跳转到菜单页必须<strong>携带参数</strong></li><li>根据之前学习过的声明式导航和编程式导航可知，这两种方式在跳转到<code>tabBar</code>页面时，不能携带参数</li></ul></blockquote></li></ol><blockquote><blockquote><p>解决方案：<br><a href="https://developers.weixin.qq.com/community/develop/article/doc/00000453df06f07a5c8d91ef856c13">参考回答</a></p></blockquote><ul><li>全局变量：通过<code>App</code>全局对象存放全局变量</li><li>数据缓存：通过存储到数据缓存中。</li><li>事件通信：通过事件通信通道。</li><li><code>wx.reLaunch(Object object)</code>，<code>url</code>路径后可以带参数，参数与路径之间使用<code>?</code>分隔</li></ul></blockquote><h4 id="数据动态化"><a href="#数据动态化" class="headerlink" title="数据动态化"></a>数据动态化</h4><img src="./src/首页获取数据.png"><ol><li>单独配置发起网络请求的方法(全局可使用)</li></ol><ul><li><p>新建<code>config</code>文件</p><blockquote><ul><li>新建<code>api.js</code>文件，保存服务器接口根地址</li><li>新建<code>exception-message</code>文件，保存错误码字典</li></ul></blockquote></li><li><p>在<code>utils</code>文件夹中</p><blockquote><ul><li>新建<code>wxToPromise</code>文件，用于转换原生不支持<code>Promise</code>的官方<code>API</code></li><li>新建<code>http</code>文件<ul><li><code>request</code>方法：用于通过<code>wxToPromise</code>获得带有数据的<code>promise</code>对象，并进行错误信息比对</li><li><code>_showError</code>方法，如果发生请求错误，用于在页面展示错误信息</li></ul></li></ul></blockquote></li></ul><ol start="2"><li>新建<code>model</code>文件夹<blockquote><ul><li>新建<code>Home</code>类，用于获取首页数据</li></ul></blockquote></li></ol><h3 id="菜单页"><a href="#菜单页" class="headerlink" title="菜单页"></a>菜单页</h3><h4 id="基础准备-1"><a href="#基础准备-1" class="headerlink" title="基础准备"></a>基础准备</h4><ol><li>需要实现的效果</li></ol><ul><li>获取离自己最近的店及距离(需要申请<code>wx.getLocation</code>接口)</li><li>点击左侧菜单栏，可获取对应分类的产品</li><li>点击产品，可选择产品规格、数量等</li><li>加入购物车后，其他页面的变化</li></ul><ol start="2"><li>难点</li></ol><ul><li>左侧导航与右侧商品的关联</li><li>选品框：产品规格的选择、价格与数量联动、所选信息在其他页面上的使用</li></ul><blockquote><ul><li>取消整个页面的滚动条：在<code>json</code>中配置”disableScroll”: true&#96;</li></ul></blockquote><h4 id="数据动态化-1"><a href="#数据动态化-1" class="headerlink" title="数据动态化"></a>数据动态化</h4><ul><li>新建<code>Menu</code>模块，获取菜单页数据</li><li>其他与首页类似</li></ul><h4 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h4><ol><li>顶部</li></ol><ul><li>为了将它固定在顶部，不随页面滚动，使用粘性定位</li><li>右侧的取餐方式，根据参数选中，默认为外卖<blockquote><ul><li>创建变量<code>takeWayIndex</code>保存参数</li><li>在<code>onLoad</code>生命周期函数里通过<code>options</code>获取首页传来的参数</li><li>注意！：<strong>只有</strong>点击首页的选择框跳转，<code>options</code>才会获取参数，但，如果首次加载是直接点击<code>tabBar</code>到菜单页，那<code>options</code>就是一个空对象<code>&#123;&#125;</code></li><li>因此只在<code>options</code>不为空对象时，修改<code>takeWayIndex</code></li><li>要使用<code>(JSON.stringify(options) === &quot;&#123;&#125;&quot;)</code>进行判断；携带了参数时，<code>options</code>也是对象，所以不能通过数据类型判断</li></ul></blockquote></li></ul><ol start="2"><li>下方商品列表</li></ol><ul><li>为了实现竖向滚动，左右都设为<code>scroll-view</code></li><li>左侧分类及右侧<code>banner</code>：动态获取数据，列表渲染</li><li>左侧选中状态：<blockquote><ul><li>创建一个变量<code>navLeftIndex</code>表示当前选中分类的索引，</li><li>绑定点击事件，使用自定义属性将当前被点击的分类下标传入，修改<code>navLeftIndex</code>；</li><li>只有当<code>navLeftIndex===index</code>时，被选中样式才会生效</li><li>为了不让选中标识影响文字，我给每个分类都设置了<code>divider </code>，选中时，只改变颜色</li></ul></blockquote></li></ul><ol start="3"><li>右侧商品栏</li></ol><ul><li>顶部<code>banner</code></li><li>动态渲染商品列表</li></ul><ol start="4"><li>如何点击左侧分类，右侧获取对应商品</li></ol><ul><li>定义变量<code>navLeftIndex</code>保存左侧被点击分类的索引</li><li>左侧被点击时，通过自定义属性修改<code>navLeftIndex</code>变量</li><li>右侧产品在进行列表渲染，根据<code>navLeftIndex</code>获取商品数据</li></ul><h4 id="选品页"><a href="#选品页" class="headerlink" title="选品页"></a>选品页</h4><ol><li><p>基础准备</p><blockquote><ul><li>新建组件<code>product-detail</code>，作为点击商品列表时打开的选品页</li><li>父页面：菜单页</li><li>需引入的子组件：图标组件<code>icon</code>、数量组件<code>cartNum</code><ul><li>数量组件也引用了图标组件<code>icon</code></li></ul></li></ul></blockquote></li><li><p>难点：</p><blockquote><ul><li>获取所点击的产品数据，并列表渲染嵌套了三层的数据</li><li>规格选择</li><li>金额与数量的联动，以及在其他页面的使用</li><li>商品加入购物车后，对其他页面的影响</li></ul></blockquote></li><li><p>本页面需要实现的效果及方法</p></li></ol><ul><li><p>选品页的打开与关闭</p><blockquote><ul><li>在父页面定义一个变量<code>detailFlag</code>，作为开关，默认为<code>true</code>；通过属性绑定将<code>detailFlag</code>传给组件</li><li>当父页面的产品发生点击事件时，将<code>detailFlag</code>修改为<code>false</code></li><li>组件的父容器<code>container</code>通过<code>hidden</code>属性来控制显隐</li><li>组件页面的关闭按钮，在被点击时，将<code>detailFlag</code>修改为<code>true</code></li></ul></blockquote></li><li><p>页面数据的动态化</p><blockquote><ul><li>在父页面的产品被点击时，保存该产品的<code>id</code></li><li>在<code>Menu</code>模块里，写一个静态方法，获取商品详情数据，保存在<code>detailInfo</code>变量里</li><li>通过属性绑定将该商品的数据传给组件，这样组件接收到的数据就是每次点击的商品数据了</li><li>使用<code>Mustache</code>语法将数据绑定到页面</li><li>注意产品规格的数据渲染，可定义<code>wx:for-item=&quot;&quot;</code>来区分子项：<ul><li>产品数据的<code>specs</code>里有三个规格</li><li>不同规格下有对应id和<code>specsDesc</code></li><li><code>specsDesc</code>放置的是不同的选择项及其<code>id</code></li></ul></li></ul></blockquote></li><li><p>商品规格的选择</p><blockquote><p>我踩过的坑</p><ul><li>一开始我选择的是<code>navLeftIndex===index</code>的方法，发现每个规格都会同时选中同一个选项</li></ul></blockquote></li></ul><blockquote><p>解决办法：<br><img src="./src/选品页.png"></p></blockquote><blockquote><ul><li>选中条件：选项的<code>isActive</code>为<code>true</code>；</li><li>而<code>isActive</code>在接口里已经定义了，也有默认选项；因此，需要改变页面所渲染的数据<code>detailInfo</code></li><li>如何改变？<ul><li>在点击规格选项时，将当前选项的id、当前规格的id、当前规格的所有数据都传到<code>js</code>里</li><li>在点击事件的事件处理函数里，for循环遍历当前规格的所有数据，先将所有选项的<code>isActive</code>改为<code>false</code>，再根据选项id，将该选项的<code>isActive</code>改为<code>true</code></li><li>遍历<code>detailInfo</code>，根据当前规格的id找到该规格下的数据，替换成前面修改过的；再将修改后的<code>detailInfo</code>更新到页面中</li></ul></li></ul></blockquote><ul><li>商品金额与数量的联动<blockquote><ul><li>数量的增减使用的是另一个组件</li></ul></blockquote></li></ul><blockquote><p>先分析下逻辑</p><ul><li>在产品点击后，数量默认为最小值1，此时选品框里的金额，就等于产品的单价</li><li>当数量增减时，金额等于单价*数量</li></ul></blockquote><blockquote><p>思路：</p><ul><li>数量组件需要通过事件绑定的方式将数量传给选品组件</li><li>选品组件定义一个变量<code>num</code>保存从子组件接收的值</li><li>选品组件定义一个变量<code>totalMoney</code>保存金额，默认为0，使用三元运算，当它为0时，页面使用接口里的值</li><li>和数量组件绑定的事件处理函数中，根据传来的<code>num</code>修改金额<blockquote><p>这样金额就和数量绑定在了一起，但存在以下问题：</p></blockquote></li></ul></blockquote><blockquote><p>问题：</p><ul><li>关闭选品框后，再打开另一产品，金额和数量不变</li></ul><p>解决方法：</p><ul><li>在关闭按钮的点击事件中，将金额重置为0，这样页面就会使用原始数据；将数量重置为最小值</li></ul></blockquote><ul><li>数量组件的优化<blockquote><p><strong>优化1：</strong>当数量达到边界值时，不再改变，且颜色变灰，表示不能再点击</p><ul><li>去掉图标组件的默认颜色，只声明类型(否则替换不了颜色，优先级太高)</li><li>父组件如何改变子组件的样式类？使用外部样式类<ul><li>在子组件中的<code>js</code>文件里用<code>externalClasses</code>定义外部样式类名，并写入对应标签的<code>class</code>中</li><li>父组件就可以直接在标签中用<code>外部样式类名=&quot;类名&quot;</code>的方式定义样式</li><li>当数量超过临界值时，就改变样式</li></ul></li></ul></blockquote></li></ul><blockquote><p><strong>优化2</strong>：点击事件的触发</p><ul><li>尝试1：使用<code>pointer-events: none;</code>发现无效，确认是小程序不支持该属性</li><li>尝试2：定义一个变量<code>isHandleClick</code>作为开关<ul><li>只在<code>isHandleClick</code>为<code>true</code>时才能点击</li><li>当<code>num</code>超过某一边的边界值时，<code>isHandleClick</code>变为<code>false</code>，不能再点击了，但！另一边的按钮也同时不能点击了</li></ul></li><li>尝试3：定义两个变量：<code>isAddClick</code>和<code>isMinClick</code><ul><li>这两个变量分别控制增加和减少按钮</li><li>和前面一样，当关闭选品页时，变量要重置，因此把这两个变量定义在选品组件里，通过属性绑定的方式传给数量组件</li><li>在增减按钮的点击事件函数中，根据临界值修改变量</li></ul></li></ul></blockquote><h4 id="Storage本地存储"><a href="#Storage本地存储" class="headerlink" title="Storage本地存储"></a>Storage本地存储</h4><ul><li><p>商品在选品时，加入购物车后，其他页面要显示对应的商品信息</p></li><li><p>因此需要将加入购物车的商品信息存在本地存储中</p></li><li><p>统一封装storage</p><blockquote><ul><li>在<code>utils</code>文件夹里，创建<code>storage.js</code>文件</li></ul></blockquote></li></ul><pre><code>/** * 微信小程序标准版：统一封装的 storage 操作类 */class Storage &#123;  //类数组，通过[属性]的方式调用  types = &#123;    1: &#39;get&#39;, // get    2: &#39;set&#39;, // set    3: &#39;rm&#39; // rm  &#125;  /**   * 检验本地存储 key 是否合法   * @param &#123;String&#125; key | 要操作的键值   * @param &#123;Number&#125; type | 类型，是 get set rm    * @param &#123;Boolean&#125; emptyFlag | 是否判断为空情况，默认判断 true，false 为不判断   */  checkKeyType(key, type, emptyFlag = true) &#123;    if (typeof key != &#39;string&#39;) &#123;      throw new Error(`Storage $&#123;this.types[type]&#125; func: key must be string`)      return false    &#125;    if (emptyFlag) &#123;      let tmpKey = key.TrimStr()      if (tmpKey == &#39;&#39;) &#123;        throw new Error(`Storage $&#123;this.types[type]&#125; func: key can not be empty`)        return false      &#125;      return tmpKey;    &#125;    return key  &#125;  /**   * get方法 从本地缓存中获取指定key的值   * @param &#123;String&#125; key | 要操作的键值   * @param &#123;Boolean&#125; syncFlag | 同步状态，默认 false (异步)，true 为同步   */  get = (key, syncFlag = false) =&gt; &#123;    const tmpKey = this.checkKeyType(key, 1)    if (tmpKey) &#123;      const errMsg = &#39;Storage get: failed to get data&#39;      return new Promise((resolve, reject) =&gt; &#123;        if (syncFlag) &#123;          let res = wx.getStorageSync(tmpKey)          if (res) &#123;            resolve(JSON.parse(res))          &#125; else &#123;            reject(errMsg)          &#125;        &#125; else &#123;          wx.getStorage(&#123;            key: tmpKey,            success: (res) =&gt; &#123;              resolve(JSON.parse(res.data))            &#125;,            fail: (err) =&gt; &#123;              reject(errMsg)            &#125;          &#125;)        &#125;      &#125;)    &#125;  &#125;  /**   * 将数据保存在本地存储的指定key中 会覆盖掉原来该 key 对应的内容   * @param &#123;String&#125; key | 要操作的键值   * @param &#123;*&#125; data | 要存储的值，会转换为 JSON 串进行存储   * @param &#123;Boolean&#125; syncFlag | 同步状态，默认 false (异步)，true 为同步   */  set = (key, data, syncFlag) =&gt; &#123;    const tmpKey = this.checkKeyType(key, 2)    if (tmpKey) &#123;      const sucMsg = &#39;Storage set: set data successfully&#39;      const errMsg = &#39;Storage set: failed to set data&#39;      return new Promise((resolve, reject) =&gt; &#123;        let tmpData = JSON.stringify(data)        if (syncFlag) &#123;          try &#123;            wx.setStorageSync(tmpKey, tmpData)            resolve(sucMsg)          &#125; catch (err) &#123;            console.log(err)            reject(errMsg)          &#125;        &#125; else &#123;          wx.setStorage(&#123;            data: tmpData,            key: tmpKey,            success: () =&gt; &#123;              resolve(sucMsg)            &#125;,            fail: (err) =&gt; &#123;              console.log(err)              reject(errMsg)            &#125;          &#125;)        &#125;      &#125;)    &#125;  &#125;  /**   * 可以移除本地存储中指定key的数据 如果不指定则清除全部数据   * @param &#123;String&#125; key | 要操作的键值，为空则清空所有，有值则清空指定的值   * @param &#123;Boolean*&#125; syncFlag | 同步状态，默认 false (异步)，true 为同步   */  rm = (key = &#39;&#39;, syncFlag = false) =&gt; &#123;    let tmpKey = this.checkKeyType(key, 3, false)    tmpKey = tmpKey.TrimStr()    const sucMsg = &#39;Storage rm: rm data successfully&#39;    const errMsg = &#39;Storage rm: failed to rm data&#39;    return new Promise((resolve, reject) =&gt; &#123;      if (tmpKey == &#39;&#39;) &#123;        if (syncFlag) &#123;          try &#123;            wx.clearStorageSync()            resolve(sucMsg)          &#125; catch (err) &#123;            console.log(err)            reject(errMsg)          &#125;        &#125; else &#123;          wx.clearStorage(&#123;            success: (res) =&gt; &#123;              resolve(sucMsg)            &#125;,            fail: (err) =&gt; &#123;              console.log(err)              reject(errMsg)            &#125;          &#125;)        &#125;      &#125; else &#123;        if (syncFlag) &#123;          try &#123;            wx.removeStorageSync(tmpKey)            resolve(sucMsg)          &#125; catch (err) &#123;            console.log(err)            reject(errMsg)          &#125;        &#125; else &#123;          wx.removeStorage(&#123;            key: tmpKey,            success: () =&gt; &#123;              resolve(sucMsg)            &#125;,            fail: (err) =&gt; &#123;              console.log(err)              reject(errMsg)            &#125;          &#125;)        &#125;      &#125;    &#125;)  &#125;&#125;/** * 清除字符串前后的空格 */String.prototype.TrimStr = function () &#123;  return this.replace(/(^\s*)|(\s*$)/g, &#39;&#39;);&#125;export &#123;  Storage&#125;</code></pre><ul><li>使用：<blockquote><ul><li>在<code>app.js</code>顶部引入并注册 App 上</li></ul></blockquote></li></ul><pre><code>// app.jsimport &#123; Storage &#125; from &#39;./utils/storage&#39;const storage = new Storage();App(&#123;  storage,  getStorage: storage.get,  setStorage: storage.set,  rmStorage: storage.rm,...省略&#125;)</code></pre><blockquote><ul><li>在页面中使用</li></ul></blockquote><pre><code>// component/product-detail/product-detail.js//获取应用实例const app = getApp()Component(&#123;  //app打点的方式调用&#125;)</code></pre><h4 id="加入购物车-详情页"><a href="#加入购物车-详情页" class="headerlink" title="加入购物车(详情页)"></a>加入购物车(详情页)</h4><ol><li>实现效果</li></ol><ul><li>当用户选择商品数量，点击添加购物车后，能将该商品信息及选择数量保存在缓存中，使其他页面也能得到该数据</li><li>交互效果：弹出提示框，超过库存或添加成功</li><li>徽标：商品添加购物车后，购物车的tabBar部分会出现相应的数量</li></ul><ol start="2"><li>难点</li></ol><ul><li>相同的<code>key</code>保存的数据会被覆盖</li><li>数量组件、选品页面、购物车页面之间的数据传递</li></ul><ol start="3"><li>实现步骤</li></ol><ul><li><p>给<code>加入购物车按钮</code>添加点击事件</p></li><li><p>变量<code>selectNum</code>，用于保存当次选择的数量，即数量组件传过来的值</p></li><li><p>变量<code>numInCart</code>，用于当前产品已添加的总数</p><blockquote><ul><li>以上两个字段都要添加到<code>storage</code>里面，设置两个变量的目的在于：重复添加同一产品时，<code>numInCart</code>保存着上一次添加的数量，<code>selectNum</code>为本次添加的数量，需要相加后更新到<code>numInCart</code>中，作为总数</li></ul></blockquote></li><li><p>用<code>cartInfo</code>作为key值，在本地存储中保存购物数据</p></li><li><p>由于同一key的数据会被覆盖，而商品数据不止一条；因此，把商品数据都放入数组中，新数据<code>push</code>进数组</p></li><li><p>在更新<code>cartInfo</code>时，会遇到三种情况</p><blockquote><ul><li>第一种，第一次添加时，<code>storage</code>中没有<code>cartInfo</code>数据<ul><li>为<code>detailInfo</code>添加<code>numInCart</code>字段，表示添加商品的总数，就等于<code>selectNum</code></li><li>声明一个空数组，并将<code>detailInfo</code>存进数组</li><li>使用<code>setStorage</code>方法，将数组加入本地缓存</li></ul></li><li>第二种，<code>cartInfo</code>已经有该商品</li><li>第三种，<code>cartInfo</code>没有该商品</li></ul></blockquote></li><li><p>后面两种情况：</p><blockquote><ul><li>首先需要判断是否已经存过<ul><li>声明一个变量作为标志<code>isExist</code>，默认为<code>false</code>，表示缓存中没有该商品</li><li>获取缓存中的<code>cartInfo</code>，并进行遍历</li><li>将缓存中数据的id与当前商品的id进行对比，如果相等就将<code>isExist</code>修改为<code>true</code></li></ul></li><li><code>isExist</code>为<code>true</code>，存在同一产品：<ul><li>将两次添加的数量相加</li><li>判断库存，如果不超过库存，就添加进<code>storage</code>，超过了就提示</li></ul></li><li><code>isExist</code>为<code>false</code>，没存过：<ul><li>更新<code>numInCart</code></li><li>判断库存，如果不超过库存，就添加进<code>storage</code>，超过了就提示</li></ul></li></ul></blockquote></li></ul><ol start="4"><li>购物车的徽标<br><strong>效果：</strong></li></ol><ul><li>初始化时，并没有徽标</li><li>商品加入购物车后，徽标显示当前添加的商品数量(不是杯数)</li></ul><p><strong>什么时候更新徽标数据</strong></p><ul><li>用户在关闭详情页时，此时已成功加入购物车</li><li>整个小程序在启动时，需要先获取本地存储中是否有数据<blockquote><ul><li>当数据存储在本地缓存中指定的key中，除非用户主动删除或因存储空间原因被系统清理，否则数据都一直可用</li></ul></blockquote></li><li>切换到购物车页面时，要获取最新数据</li></ul><h3 id="购物车页面"><a href="#购物车页面" class="headerlink" title="购物车页面"></a>购物车页面</h3><h4 id="基础准备-2"><a href="#基础准备-2" class="headerlink" title="基础准备"></a>基础准备</h4><ul><li>数据来源：本地缓存<code>storage</code></li><li>效果：<blockquote><ul><li>展示已选择商品的名称、价格、规格、数量等信息</li><li>商品结算时，金额与数量之间的联动、跳转到订单页结算</li><li>滑动删除商品</li></ul></blockquote></li><li>难点<blockquote><ul><li>单选&#x2F;全选商品时，总金额与数量之间的逻辑处理</li></ul></blockquote></li></ul><h4 id="购物车布局"><a href="#购物车布局" class="headerlink" title="购物车布局"></a>购物车布局</h4><ol><li>商品列表布局<blockquote><ul><li>拿到<code>storage</code>里的数据，遍历数据</li><li>规格需要三层遍历，分隔线<code>/</code>用伪元素做</li><li>选择按钮：给商品数据添加<code>selected</code>字段，用<code>wx:if</code>和<code>wx:else</code>控制显隐</li></ul></blockquote></li></ol><p><strong>细节：</strong></p><blockquote><ul><li>用户可以直接在购物车页面修改数量，因此需要保存修改后的值，更新页面</li><li>当页面隐藏&#x2F;切换时，要获取购物车页面的最新数据，并更新到<code>cartInfo</code>中</li></ul></blockquote><ol><li><p>空购物车界面</p><blockquote><ul><li>单独封装成自定义组件，实现复用</li></ul></blockquote></li><li><p>底部提交订单栏和滑动删除按钮</p></li></ol><p><strong>布局实现：使用<code>vant</code>组件</strong></p><blockquote><ul><li>初始化<code>npm -y</code></li><li>安装npm包：<code>npm i @vant/weapp -S --production</code></li><li>将 <code>app.json</code> 中的 <code>&quot;style&quot;: &quot;v2&quot;</code> 去除</li><li>打开微信开发者工具，点击 工具 -&gt; 构建<code>npm</code></li><li>在页面的<code>json</code>文件中引入组件</li></ul></blockquote><pre><code>&quot;usingComponents&quot;: &#123;  &quot;van-swipe-cell&quot;: &quot;@vant/weapp/swipe-cell/index&quot;,  &quot;van-submit-bar&quot;: &quot;@vant/weapp/submit-bar/index&quot;&#125;</code></pre><blockquote><ul><li>根据对应文档使用组件</li></ul></blockquote><p><strong>底部提交订单栏——js逻辑</strong></p><ul><li>效果<blockquote><ul><li>点击全选，可实现全选&#x2F;全不选购物车中所有商品</li><li>总金额会随选中的商品及其数量的变化而变化</li><li>结算的数量由<code>selected</code>字段决定</li></ul></blockquote></li><li>思路：<blockquote><p><strong>全选</strong></p><ul><li>声明一个变量<code>selectedAll</code>，作为全选的标识，默认为<code>false</code>，即没有全选</li><li>在全选按钮的点击事件中<ul><li>如果<code>selectedAll</code>为<code>false</code>，那就遍历购物车中所有商品，将<code>selected</code>字段都修改成<code>true</code>；修改完之后，再将<code>selectedAll</code>改为<code>true</code>，也就是已经<strong>全选</strong>了</li><li>在下一次点击时，看到<code>selectedAll</code>为<code>true</code>，就将购物车中所有商品的<code>selected</code>字段都修改成<code>false</code>，再将<code>selectedAll</code>改为<code>false</code>，这样就能实现<strong>全不选</strong></li><li>更新总金额和选择数量</li></ul></li></ul><p><strong>单选</strong></p><ul><li>拿到当前点击的商品数据，添加<code>selected</code>字段，并且值为相反值<br><code> cartInfo[index].selected = !cartInfo[index].selected</code><ul><li><code>selected</code>默认为<code>false</code>，这样既添加了新字段，又实现了两次点击的值相反</li><li>更新总金额和选择数量<br>细节：</li></ul></li><li>选中商品的数量为0时，结算按钮为灰色，不能点击；用三元运算符控制</li></ul></blockquote></li></ul><blockquote><p><strong>总金额和选择数量</strong></p><ul><li>由于单选或全选时都要更新总金额，因此单独定义一个方法<code>_updataMoney</code></li><li>声明一个变量<code>payMoney</code>，保存总金额</li><li>每次调用该方法，都会将<code>cartInfo</code>遍历一次，计算所有<code>selected</code>等于<code>true</code>的数据的 <strong>总金额和数量</strong></li><li>定义一个变量<code>isSelectedAll</code>，作为全选标志，默认为<code>true</code><ul><li>在遍历<code>cartInfo</code>时，任一商品的<code>selected</code>等于<code>false</code>，<code>isSelectedAll</code>就变成<code>false</code>，表示没有全选，因此将<code>selectedAll</code>修改为<code>false</code></li><li>在遍历完之后，如果<code>isSelectedAll</code>仍为<code>true</code>，就表示单选了购物车中所有商品，此时全选按钮应该亮起，因此将<code>selectedAll</code>修改为<code>true</code></li></ul></li><li>更新<code>cartInfo</code>和本地缓存</li></ul></blockquote><p><strong>滑动删除</strong></p><blockquote><ul><li>根据文档，使用<code>vant</code>组件进行布局</li><li>给删除按钮添加点击事件，用自定义属性传递索引</li><li>根据索引，找到当前点击的商品数据，把它从<code>cartInfo</code>数组中删除</li><li>调用方法更新总金额</li><li>更新缓存</li></ul></blockquote><p><strong>去结算</strong></p><blockquote><ul><li>声明一个空对象<code>acountData</code>保存要传递给订单页的数据</li><li>在结算按钮的点击事件中，将所有被选中的商品保存到一个空数组中</li><li>将总金额和结算数组保存到<code>acountData</code>对象中</li><li>将<code>acountData</code>作为新的<code>key</code>存入本地缓存，订单页可以通过该<code>key</code>获取数据</li><li>跳转到订单页</li></ul></blockquote><h3 id="订单页"><a href="#订单页" class="headerlink" title="订单页"></a>订单页</h3><p><strong>效果</strong></p><ul><li>滑动&#x2F;点击切换tabs标签可查看不同状态的订单</li><li>付款</li></ul><p><strong>难点</strong></p><ul><li>通过<code>WXS</code>和节流函数优化频繁划动切换带来的性能问题</li><li>支付成功后，删除购物车中的商品</li></ul><p><strong>布局</strong></p><ul><li>顶部分类栏</li><li>加入购物车的商品动态渲染</li><li>空订单时的界面：复用组件</li></ul><h4 id="实现tabs标签的切换"><a href="#实现tabs标签的切换" class="headerlink" title="实现tabs标签的切换"></a>实现tabs标签的切换</h4><ol><li>原理</li></ol><ul><li>在点击&#x2F;滑动事件中，将目标索引传入js中，保存在<code>currentTabIndex</code>中，当<code>tabs</code>标签的索引等于<code>currentTabIndex</code>时，激活选中样式</li><li>最重要的是传入目标索引，点击切换比较简单</li></ul><ol start="2"><li><p>滑动切换<br><strong>思路</strong></p><blockquote><ul><li>在视图层<code>wxml、wxs</code>中处理<code>touchmove</code>事件，在处理完成之后，再将事件的结果传给逻辑层</li><li>控制灵敏度：计算手指触摸开始和结束的距离，当该距离在一定范围内时，再向逻辑层传递结果</li></ul></blockquote></li><li><p>节流优化</p></li></ol><ul><li>在接收滑动&#x2F;点击事件传来的<code>index</code>时，引入节流函数，控制执行频率</li></ul><h4 id="与购物车页面相关"><a href="#与购物车页面相关" class="headerlink" title="与购物车页面相关"></a>与购物车页面相关</h4><ol><li><p>点击结算之后删除商品</p><blockquote><ul><li>循环遍历加入本地缓存中的<code>acountList</code>数组，与<code>cartInfo</code>数据进行对比，删除相同数据，更新缓存和页面的<code>cartInfo</code></li></ul></blockquote></li><li><p><code>acountData</code>的调整</p><blockquote><ul><li>如果用户分几次结算商品，那么为了不覆盖前面的数据</li><li>应该先获取缓存中的商品数组和金额，然后将本次的商品<code>push</code>进去，计算总金额时也要加上前面的，最后更新缓存</li></ul></blockquote></li></ol><h3 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h3><ul><li><p>布局</p><blockquote><ul><li>创建两种状态的登录框</li><li>下方的列表在登录状态不同时，也应该不一样</li></ul></blockquote></li><li><p>开放能力</p><blockquote><ul><li>微信官方有在线客服和意见反馈的功能</li><li>将 <code>button</code> 组件 <code>open-type</code> 的值设置为 <code>contact</code>，当用户点击后就会进入客服会话</li><li>将 <code>button</code> 组件 <code>open-type</code> 的值设置为 <code>feedback</code>，当用户点击后就会打开“意见反馈”页面，用户可提交反馈内容并上传日志</li></ul></blockquote></li></ul><h4 id="授权登录——云开发"><a href="#授权登录——云开发" class="headerlink" title="授权登录——云开发"></a>授权登录——云开发</h4><p><strong>步骤：</strong></p><ul><li><p>使用<code>wx.getUserProfile</code>获取用户头像和昵称</p></li><li><p>创建云开发环境</p><blockquote><ul><li>在项目根目录 <code>project.config.json</code> 项目配置文件中，初始化配置云函数的文件夹的目录</li><li>在项目根目录中，新建 <code>cloud</code> 文件夹，并选择项目对应的环境</li></ul></blockquote></li><li><p>初始化</p><blockquote><ul><li>在云开发控制台中，创建数据表 <code>users</code> 用于存储用户信息</li><li>在 <code>cloud</code> 文件夹上右键 -&gt; 选择”新建 <code>Node.js</code> 云函数”，输入云函数名称 <code>login</code> 即可新建成功</li><li>在小程序 <code>app.js</code> 中初始化云函数</li><li>上传并部署云函数(每次修改云函数都要重新上传)</li><li>在微信端调用云函数，将<code>wx.getUserProfile</code>获取的用户头像和昵称等用户信息传给后端，用于生成用户账号</li></ul></blockquote></li><li><p>在<code>cloud/login/index.js</code>中编写根据<code>openId</code>查询用户信息的方法，根据查询返回的数组的长度来决定下一步是注册还是登录</p></li><li><p>注册用户账号</p><blockquote><ul><li>在 <code>cloud/login/index.js</code> 云函数中完成用户信息的注册，在数据库中新增用户数据</li><li>当用户注册成功后，根据 ID 快速查询当前用户的信息，并返回给前端</li><li>上传并部署云函数</li></ul></blockquote></li><li><p>实现登录逻辑</p><blockquote><ul><li>如果已经注册，就可以返回根据<code>openId</code>到的查询用户信息</li></ul></blockquote></li><li><p>小程序页面逻辑</p><blockquote><ul><li>获取登录后的数据，并将数据库中真实的用户信息同步到本地存储中，做数据的持久化</li><li>当页面切换时，实时获取最新的用户数据</li><li>注意：要在云开发控制台中，修改数据库的权限，选择所有用户可读</li></ul></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> applet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML及vscode</title>
      <link href="/2023/11/19/HTML%E5%8F%8Avscode/"/>
      <url>/2023/11/19/HTML%E5%8F%8Avscode/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><div class="markmap-container" style="height:400px">  <svg data="{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;HTML&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;定义&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;描述网页的语言 / 超文本标记语言&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;超出文本的限制：可使用img/audio/vedio等&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;超链接文本：实现文件间的跳转&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;html骨架&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;文档声明：!DOCTYPE&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;告诉浏览器的解析器，用什么规范来解析页面&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;语言类型：lang=&amp;quot;en&amp;quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;声明语言类型&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;网页配置：head&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;网页标题：title&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;meta：元标签&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[26,27]},&quot;v&quot;:&quot;声明网页字符编码集：charset&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[28,29]},&quot;v&quot;:&quot;UTF-8：全球语言&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[30,31]},&quot;v&quot;:&quot;gbk：汉语、英语、少量日韩&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[32,33]},&quot;v&quot;:&quot;ASCII：英语&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[34,35]},&quot;v&quot;:&quot;http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[36,37]},&quot;v&quot;:&quot;IE8及以上版本使用当前版本的最高级标准模式去渲染网页&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[38,39]},&quot;v&quot;:&quot;name&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[40,41]},&quot;v&quot;:&quot;移动端适配：viewport&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:11,&quot;p&quot;:{&quot;lines&quot;:[42,43]},&quot;v&quot;:&quot;宽度为设备实际宽度：width=device-width&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:11,&quot;p&quot;:{&quot;lines&quot;:[44,45]},&quot;v&quot;:&quot;不需要缩放：initial-scale=1.0&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[46,47]},&quot;v&quot;:&quot;网页关键词：key&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[48,49]},&quot;v&quot;:&quot;网页描述：description&quot;}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[50,51]},&quot;v&quot;:&quot;网页内容：body&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[52,53]},&quot;v&quot;:&quot;HTML5优点/新特性&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[54,55]},&quot;v&quot;:&quot;形成了HTML5标准的文档声明，不再基于SGML&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[56,57]},&quot;v&quot;:&quot;新增了语义化标签&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[58,59]},&quot;v&quot;:&quot;支持多媒体：audio、vedio&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[60,61]},&quot;v&quot;:&quot;画布canvas可以绘制各种形状&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[62,63]},&quot;v&quot;:&quot;可以使用SOL数据库、支持存储离线数据：sessionStorage、localStorage&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[64,65]},&quot;v&quot;:&quot;新的文档属性：document.visibilityState&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[66,67]},&quot;v&quot;:&quot;支持定位、拖动和放置&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[68,69]},&quot;v&quot;:&quot;语义化&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[70,71]},&quot;v&quot;:&quot;概念&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[72,73]},&quot;v&quot;:&quot;使用有英文语义的标签&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[74,75]},&quot;v&quot;:&quot;作用/原因&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[76,77]},&quot;v&quot;:&quot;在没有样式的情况下，也能够看得懂网页框架&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[78,79]},&quot;v&quot;:&quot;爬虫依赖标签来确定上下文和关键词的权重，语义化有利于SEO优化&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[80,81]},&quot;v&quot;:&quot;国际化，各国开发者都能看得懂&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[82,83]},&quot;v&quot;:&quot;提供可维护性，减少差异&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[84,85]},&quot;v&quot;:&quot;有利于帮助辅助技术更好地转义网页，例如无障碍阅读&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[86,87]},&quot;v&quot;:&quot;html标签&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[88,89]},&quot;v&quot;:&quot;块级元素&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[90,91]},&quot;v&quot;:&quot;标题：h1~h6&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[92,93]},&quot;v&quot;:&quot;段落p&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[94,95]},&quot;v&quot;:&quot;div&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[96,97]},&quot;v&quot;:&quot;列表标签ul~li，ol~li&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[98,99]},&quot;v&quot;:&quot;定义列表dl dt dd&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[100,101]},&quot;v&quot;:&quot;表单form&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[102,103]},&quot;v&quot;:&quot;action属性：规定向何处发送数据&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[104,105]},&quot;v&quot;:&quot;methods属性：规定发送数据的HTTP方法&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[106,107]},&quot;v&quot;:&quot;行内块元素&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[108,109]},&quot;v&quot;:&quot;img&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[110,111]},&quot;v&quot;:&quot;gif：动画、布尔透明、无兼容问题&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[112,113]},&quot;v&quot;:&quot;jpg：失真压缩法，色彩丰富&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[114,115]},&quot;v&quot;:&quot;png：支持透明，高保真&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[116,117]},&quot;v&quot;:&quot;webp：文件小，动画，透明，兼容性相对不好&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[118,119]},&quot;v&quot;:&quot;svg：矢量图，体积小，动画&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[120,121]},&quot;v&quot;:&quot;audio&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[122,123]},&quot;v&quot;:&quot;vedio&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[124,125]},&quot;v&quot;:&quot;input(不同的type属性有不同作用)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[126,127]},&quot;v&quot;:&quot;text：单行文本&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[128,129]},&quot;v&quot;:&quot;radio：单选框&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[130,131]},&quot;v&quot;:&quot;checkbox：多选框&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[132,133]},&quot;v&quot;:&quot;button：按钮&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[134,135]},&quot;v&quot;:&quot;submit：提交&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[136,137]},&quot;v&quot;:&quot;password：密码&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[138,139]},&quot;v&quot;:&quot;reset：重置&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[140,141]},&quot;v&quot;:&quot;select&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[142,143]},&quot;v&quot;:&quot;option&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[144,145]},&quot;v&quot;:&quot;textarea&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[146,147]},&quot;v&quot;:&quot;行内元素&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[148,149]},&quot;v&quot;:&quot;a标签&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[150,151]},&quot;v&quot;:&quot;span&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[152,153]},&quot;v&quot;:&quot;label&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[154,155]},&quot;v&quot;:&quot;空白折叠现象&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[156,157]},&quot;v&quot;:&quot;多个换行或多个空格会被解析成一个空格&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[158,159]},&quot;v&quot;:&quot;转义符&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[160,161]},&quot;v&quot;:&quot;空格：&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[162,163]},&quot;v&quot;:&quot;&amp;amp;：&amp;amp;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[164,165]},&quot;v&quot;:&quot;版权符：©&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[166,167]},&quot;v&quot;:&quot;商标：®&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[168,169]},&quot;v&quot;:&quot;&amp;lt;：&amp;lt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[170,171]},&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;paragraph&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[170,171]},&quot;v&quot;:&quot;：&amp;gt;&quot;}]}]}]}]}"></svg></div><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><h3 id="1、HTML是什么"><a href="#1、HTML是什么" class="headerlink" title="1、HTML是什么"></a>1、HTML是什么</h3><ul><li>HTML是用来描述网页的语言，又称“超文本标记语言”<blockquote><p>超文本有两层含义</p><ul><li>超出了文本的限制：他可以加入图片、视频、音频、链接等</li><li>超级链接文本：可以从一个文件跳转到另一个文件，与世界各地主机的文件相连</li></ul></blockquote></li></ul><h3 id="2、HTML骨架"><a href="#2、HTML骨架" class="headerlink" title="2、HTML骨架"></a>2、HTML骨架</h3><h4 id="文档声明DTD："><a href="#文档声明DTD：" class="headerlink" title="文档声明DTD："></a>文档声明DTD：</h4><pre><code>&lt;!DOCTYPE html&gt;</code></pre><blockquote><p>它并不是HTML标签，文档声明以下的都是HTML标签<br>作用：告诉浏览器的解析器使用HTML5的标准模式<br>HTML 4.01有三种声明：严格版、过渡版、框架版</p></blockquote><h4 id="声明语言类型"><a href="#声明语言类型" class="headerlink" title="声明语言类型"></a>声明语言类型</h4><pre><code>&lt;html lang=&quot;en&quot;&gt;</code></pre><blockquote><p>en：英语，zh：中文；网站有多国语言时修改</p></blockquote><h4 id="head标签"><a href="#head标签" class="headerlink" title="head标签"></a>head标签</h4><pre><code>&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;</code></pre><blockquote><p>head标签里面是对网页的配置</p></blockquote><h4 id="声明网页字符编码集"><a href="#声明网页字符编码集" class="headerlink" title="声明网页字符编码集"></a>声明网页字符编码集</h4><pre><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></pre><blockquote><p>meta是元标签，charset是字符集<br>在中国字符集有两种类型：”UTF-8”和”gb2312”</p></blockquote><table><thead><tr><th>字符集</th><th>涵盖字符</th><th>1个汉字的字节数</th><th>适用场景</th></tr></thead><tbody><tr><td>UTF-8</td><td>涵盖全球所有国家、民族的文字和大量图形字符</td><td>3</td><td>非汉字文字的网页</td></tr><tr><td>gb2312(gbk)</td><td>收录所有汉字字符、英语，少量韩文、日文、少量图形字符</td><td>2</td><td>只有汉语和英语的网页</td></tr><tr><td>ASCII</td><td>只有英文</td><td></td><td></td></tr><tr><td>ISO-8859-1</td><td>西欧字符</td><td></td><td></td></tr><tr><td>Unicode</td><td>世界通用</td><td></td><td>它只是符号集，并不是编码方式；具体编码方式包括UTF-8、UTF-16、UTF-32</td></tr></tbody></table><blockquote><p>由上表可以看出，gbk更加节省字节，有利于SEO优化<br>注意：VScode的设置要与此处一致，否则会乱码。且live serve插件不支持gbk</p></blockquote><h4 id="IE8及以上版本都使用当前版本所对应的最高级标准模式去渲染"><a href="#IE8及以上版本都使用当前版本所对应的最高级标准模式去渲染" class="headerlink" title="IE8及以上版本都使用当前版本所对应的最高级标准模式去渲染"></a>IE8及以上版本都使用当前版本所对应的最高级标准模式去渲染</h4><pre><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</code></pre><blockquote><p><code>X-UA-Compatible</code> 是IE8的专有meta属性，他告诉IE8采用何种IE版本去渲染网页<br>最佳兼容模式方案：</p></blockquote><pre><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt;</code></pre><blockquote><p><code>chrome=1</code>表示将允许站点在使用了谷歌浏览器内嵌框架的客户端渲染</p></blockquote><h4 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h4><ul><li>宽度为设备实际宽度，不需要缩放</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ul><li>keywords</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>关键词内容<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li>description</li></ul><pre><code>&lt;meta name=&quot;description&quot; content=&quot;描述的内容&quot;/&gt;</code></pre><h4 id="网页标题"><a href="#网页标题" class="headerlink" title="网页标题"></a>网页标题</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></code></pre><h4 id="body标签"><a href="#body标签" class="headerlink" title="body标签"></a>body标签</h4><blockquote><p>里面包括网页的头部、主要内容、页脚各个部分</p></blockquote><h3 id="3、浏览器内核"><a href="#3、浏览器内核" class="headerlink" title="3、浏览器内核"></a>3、浏览器内核</h3><table><thead><tr><th>浏览器</th><th>内核</th></tr></thead><tbody><tr><td>IE、世界之窗浏览器</td><td>Trident</td></tr><tr><td>Edge</td><td>WebKit</td></tr><tr><td>chrome&#x2F;opera</td><td>Blink</td></tr><tr><td>Firefox（火狐）</td><td>Gecko</td></tr><tr><td>Safari（苹果）</td><td>webkit</td></tr><tr><td>360、猎豹、2345浏览器</td><td>trident+blink</td></tr><tr><td>UC、搜狗、遨游、QQ浏览器</td><td>trident+webkit</td></tr></tbody></table><h2 id="二、HTML标签及属性"><a href="#二、HTML标签及属性" class="headerlink" title="二、HTML标签及属性"></a>二、HTML标签及属性</h2><h3 id="1、标题标签"><a href="#1、标题标签" class="headerlink" title="1、标题标签"></a>1、标题标签</h3><p>h1~h6</p><table><thead><tr><th>html写法</th><th>markdown写法</th></tr></thead><tbody><tr><td><h1>一级标题</h1></td><td># H1</td></tr><tr><td><h2>二级标题</h2></td><td>## H2</td></tr><tr><td><h3>三级标题</h3></td><td>### H3</td></tr><tr><td><h4>四级标题</h4></td><td>#### H4</td></tr><tr><td><h5>五级标题</h5></td><td>##### H5</td></tr><tr><td><h6>六级标题</h6></td><td>###### H6</td></tr></tbody></table><h3 id="2、段落标签"><a href="#2、段落标签" class="headerlink" title="2、段落标签"></a>2、段落标签</h3><pre><code>&lt;p&gt;段落&lt;/p&gt;</code></pre><h3 id="3、HTML5特性"><a href="#3、HTML5特性" class="headerlink" title="3、HTML5特性"></a>3、HTML5特性</h3><h4 id="空白折叠现象：多个换行和多个空格都会被折叠成一个空格"><a href="#空白折叠现象：多个换行和多个空格都会被折叠成一个空格" class="headerlink" title="空白折叠现象：多个换行和多个空格都会被折叠成一个空格"></a>空白折叠现象：多个换行和多个空格都会被折叠成一个空格</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>空白折叠现象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>文字之间   的  多个空格会被折叠成一个空格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>多个空行会被省略<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    标签内壁和文字之间的空格会被忽略<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>效果展示：</p><h3>空白折叠现象</h3><h3>文字之间   的  多个空格会被折叠成一个空格</h3><h3>多个空行会被省略</h3><p>    标签内壁和文字之间的空格会被忽略</p><h4 id="常用转义符"><a href="#常用转义符" class="headerlink" title="常用转义符"></a>常用转义符</h4><pre class=" language-html"><code class="language-html">空格：<span class="token entity" title="&nbsp;">&amp;nbsp;</span>小于号：<span class="token entity" title="&lt;">&amp;lt;</span>大于号：<span class="token entity" title="&gt;">&amp;gt;</span>&amp;符号：<span class="token entity" title="&amp;">&amp;amp;</span>单引号：<span class="token entity" title="&quot;">&amp;quot;</span>版权符：<span class="token entity" title="&copy;">&amp;copy;</span>已注册商标：<span class="token entity" title="&reg;">&amp;reg;</span></code></pre><p>效果展示：<br>空格：&nbsp;<br>小于号：&lt;<br>大于号：&gt;<br>&amp;符号：&amp;<br>单引号：&quot;<br>版权符：&copy;<br>已注册商标：&reg;</p><blockquote><p>注：千万不要忘了分号;</p></blockquote><h3 id="4、列表标签"><a href="#4、列表标签" class="headerlink" title="4、列表标签"></a>4、列表标签</h3><h4 id="无序列表：ul-li"><a href="#无序列表：ul-li" class="headerlink" title="无序列表：ul li"></a>无序列表：ul li</h4><ul>    <li>ul、li是一对父子标签，必须同时存在</li>    <li>ul中只能嵌套li，但是li可以嵌套任何标签</li>    <li>type属性：</li>        <ul>            <li>旧版本使用type="square/circle/disc"</li>            <li>在html5中用CSS定义其type属性 style="list-style-type:cicle/square/disc"</li>        </ul>    </li></ul><ul type="disc">    <li>默认样式：实心圆disc</li></ul><ul style="list-style-type:circle">    <li>空心圆：circle</li></ul><ul style="list-style-type:square">    <li>实心正方形：square</li></ul><blockquote><p>markdown语法：</p><ul><li>实心圆：减号-+空格</li><li>空心圆：tab+减号-+一个空格</li></ul></blockquote><h4 id="有序列表-ol-li"><a href="#有序列表-ol-li" class="headerlink" title="有序列表 ol li"></a>有序列表 ol li</h4><ol>    <li>ol li也是父子标签，ol只能嵌套li，但li可以嵌套任何标签</li>    <li>有顺序的列表</li>    <li>type属性：type="1/A/a/I/i"</li>        <ol type="1">            <li>Java</li>            <li>C++</li>            <li>python</li>        </ol>    <li>start属性：指定起始值</li>        <ol type="I" start="3">            <li>Java</li>            <li>C++</li>            <li>python</li>        </ol>    <li>reversed属性：倒序，直接填写该单词</li>        <ol type="A" start="3" reversed >            <li>Java</li>            <li>C++</li>            <li>python</li>        </ol></ol><blockquote><p>markdown中直接输入数字+.+一个空格<br>根据上下顺序编号，而不是输入的数字</p></blockquote><pre><code>1. first5. second3. third </code></pre><p>效果：</p><ol><li>first</li><li>second</li><li>third</li></ol><h4 id="定义列表-dl-dt-dd"><a href="#定义列表-dl-dt-dd" class="headerlink" title="定义列表 dl dt dd"></a>定义列表 dl dt dd</h4><dl>    <dt>定义项1</dt>    <dd>解释说明1</dd>    <dd>解释说明2</dd>    <dt>定义项2</dt>    <dd>解释说明1</dd></dl><dl>    <dt>定义项3</dt>    <dd>解释说明1</dd></dt><blockquote><ul><li>dt dl可交替出现，也可以不交替出现(此时放在不同的dl中)</li><li>应用场景可参考小米官网底部</li><li>markdown语法：第一行术语，第二行冒号+一个空格+定义<br>定义项<br>: 解释说明</li></ul></blockquote><h3 id="5、多媒体标签"><a href="#5、多媒体标签" class="headerlink" title="5、多媒体标签"></a>5、多媒体标签</h3><h4 id="图片标签img"><a href="#图片标签img" class="headerlink" title="图片标签img"></a>图片标签img</h4><ul><li>正确写法：</li></ul><pre><code>&lt;img src=&quot; &quot; alt=&quot; &quot; width=&quot; &quot; height=&quot; &quot;/&gt;</code></pre><img src="3.avif"/><blockquote><p>pc端以上四要素必须填写<br>移动端必须填写alt属性，且需要表现出图片的含义</p></blockquote><ul><li>alt属性：图片的文本描述</li><li>width、height属性：图片宽度高度</li><li>src图片路径：<ul><li>相对路径：从当前网页出发，找到图片的路径。.&#x2F;是当前目录；..&#x2F;是返回上一级目录。</li><li>绝对路径：图片的精确地址</li></ul></li></ul><blockquote><p>markdown语法：<code>![alt](图片路径)</code></p></blockquote><h4 id="超级链接a标签"><a href="#超级链接a标签" class="headerlink" title="超级链接a标签"></a>超级链接a标签</h4><ul><li>正确写法：</li></ul><pre><code>&lt;a herf=&quot;链接&quot; title=&quot;悬停文本&quot; target=&quot;网页跳转方式&quot;&gt;网页显示&lt;/a&gt;</code></pre><p><a href="https://www.baidu.com" title="百度知道" target="_self">百度一下</a></p><blockquote><p>a标签是网页之间跳转的方式<br>href属性：支持相对属性和绝对属性<br>title属性：悬停文本<br>target属性：网页跳转的方式</p><ul><li>_blank&#x2F;blank:在新窗口打开网页</li></ul></blockquote><ul><li><p>_self:默认，当前页面跳转</p></li><li><p>_parent:在父窗口中打开</p></li><li><p>_top:在当前窗体打开链接，并替换当前的整个窗体</p><blockquote><ul><li>下面三个标签在网页上看效果一样，但在框架页中效果不同</li></ul></blockquote></li><li><p>点击图片跳转网页：</p><a href="https://www.baidu.com" title="手机"><img src="1.jpg"></a></li><li><p>页面锚点</p></li></ul><blockquote><p>给B处设置id，A处a标签链接为该id，点击A处则会跳转至B处</p></blockquote><pre><code>&lt;a href=&quot;#id名&quot;&gt;名称&lt;/a&gt;&lt;p id=&quot; &quot;&gt;名称&lt;/p&gt;</code></pre><p>效果：<br><a href="#yyhbq">语义化标签</a></p><blockquote><p>markdown语法：<br><a href="#A%E5%A4%84%E5%90%8D%E7%A7%B0-id%E5%90%8D-id">A处</a><br>B处 {id名-id}</p></blockquote><p><a href="#7%E3%80%81%E8%A1%A8%E6%A0%BC%E6%A0%87%E7%AD%BE-bg-id">表格标签</a></p><ul><li>下载链接<blockquote><p>支持exe、zip、rar、word、excel等格式的文件<br>链接为文件地址</p></blockquote></li></ul><p><a href="D:\arry\30天计划\配件\前端学习资料-超链接.docx">前端学习资料</a></p><ul><li><p>邮件链接</p><blockquote><p>链接为mailto:邮箱地址<br><a href="1234@qq.com">给我发邮件</a></p></blockquote></li><li><p>电话链接</p><blockquote><p>链接为tel:电话号码<br><a href="1234">给我打电话</a></p></blockquote></li></ul><h4 id="音频标签audio"><a href="#音频标签audio" class="headerlink" title="音频标签audio"></a>音频标签audio</h4><ul><li>正确写法1：</li></ul><pre><code>&lt;audio controls src=&quot;路径&quot; autoplay loop&gt;提示语&lt;/audio&gt;</code></pre><p><audio controls src="D:\arry\30天计划\配件\音标篇004.mp3" autoplay loop>抱歉，您的浏览器不支持audio标签，请升级您的浏览器哦</audio></p><ul><li><p>controls：显示播放空间</p></li><li><p>src：文件路径</p></li><li><p>提示语：浏览器不兼容时的文字显示</p></li><li><p>autoplay：自动播放</p></li><li><p>loop：循环播放</p></li><li><p>正确写法2(加入source标签)：</p></li></ul><pre><code>&lt;audio controls&gt;    &lt;source src=&quot;音频.mp3&quot; type=&quot;audio/mpeg&quot; autoplay loop/&gt;    &lt;source src=&quot;音频.ogg&quot; type=&quot;audio/ogg&quot; autoplay loop/&gt;    &lt;source src=&quot;音频.wav&quot; type=&quot;audio/wav&quot; autoplay loop/&gt;抱歉，您的浏览器不支持audio标签，请升级您的浏览器哦&lt;/audio&gt;</code></pre><ul><li>source标签为媒体元素定义媒体资源</li></ul><blockquote><p>它给浏览器提供多种格式的文件，浏览器会选择其支持的格式进行播放；如果都支持则任选一个，默认是第一个。</p></blockquote><table><thead><tr><th>Format</th><th>MIME-type</th><th>说明</th></tr></thead><tbody><tr><td>MP3</td><td>audio&#x2F;mpeg</td><td>一种音频压缩技术，用来大幅度的降低音频数</td></tr><tr><td>Ogg</td><td>audio&#x2F;ogg</td><td>新的音频压缩技术，完全免费，无专利限制</td></tr><tr><td>Wav</td><td>audio&#x2F;wav</td><td>由微软公司开发，声音质量接近CD</td></tr><tr><td><audio controls></td><td></td><td></td></tr></tbody></table><pre><code>&lt;source src=&quot;D:\arry\30天计划\配件\音标篇004.mp3&quot; type=&quot;audio/mpeg&quot; autoplay loop&gt;</code></pre><p>抱歉，您的浏览器不支持audio标签，请升级您的浏览器哦<br></audio></p><h4 id="视频标签video"><a href="#视频标签video" class="headerlink" title="视频标签video"></a>视频标签video</h4><ul><li>正确写法1：</li></ul><pre><code>&lt;video controls src=&quot;D:\arry\30天计划\配件\mi.mp4&quot; autoplay loop&gt;抱歉，您的浏览器不支持audio标签，请升级您的浏览器哦&lt;/video&gt;</code></pre><p><video controls src="D:\arry\30天计划\配件\mi.mp4" autoplay loop>抱歉，您的浏览器不支持audio标签，请升级您的浏览器哦</video></p><ul><li>正确写法2(加入source标签)：</li></ul><pre><code>&lt;video controls&gt;    &lt;source src=&quot;文件.mp4&quot; type=&quot;video.mp4&quot;/&gt;    &lt;source src=&quot;文件.webm&quot; type=&quot;video.webm&quot;/&gt;    &lt;source src=&quot;文件.ogv&quot; type=&quot;video.ogv&quot;/&gt;    &lt;source src=&quot;文件.avi&quot; type=&quot;video.avi&quot;/&gt;&lt;/video&gt;</code></pre><table><thead><tr><th>Format</th><th>MIME-type</th><th>说明</th></tr></thead><tbody><tr><td>mp4</td><td>video&#x2F;mp4</td><td>mp4即mpeg4,使用H264视频解编码器和AAC音频解编码器</td></tr><tr><td>webm</td><td>video&#x2F;webm</td><td>使用VP8视频解编码器和Vorbis音频解编码器</td></tr><tr><td>ogv</td><td>video&#x2F;ogv</td><td>支持256色和RLE压缩，它对视频文件采用了一种有损压缩方式</td></tr><tr><td>avi</td><td>video&#x2F;avi</td><td>使用Theora视频解编码器和Vorbis音频解编码器</td></tr></tbody></table><blockquote><p>视频和音频一样使用autoplay、loop标签<br>markdown语法：<a href="%E8%B7%AF%E5%BE%84/%E7%BD%91%E5%9D%80/%E9%93%BE%E6%8E%A5">title</a></p><blockquote><p>效果：<a href="https://www.baidu.com/">title</a></p></blockquote></blockquote><h3 id="6、表单元素-form"><a href="#6、表单元素-form" class="headerlink" title="6、表单元素 form"></a>6、表单元素 form</h3><ul><li>作用：收集不同类型的用户输入</li><li>属性<ul><li>action:提交表单时，向何处发送表单数据</li><li>method:规定发送表单数据的HTTP方法</li></ul></li><li>元素</li></ul><table><thead><tr><th>作用</th><th>标签</th><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>单行文本框</td><td>input</td><td>type&#x3D;”text”</td><td>单标签</td></tr><tr><td></td><td>input</td><td>value&#x3D;””</td><td>文本框的值</td></tr><tr><td></td><td>input</td><td>placeholder&#x3D;””</td><td>提示文本</td></tr><tr><td></td><td>input</td><td>disabled</td><td>表示禁用</td></tr><tr><td>多行文本框</td><td>textarea</td><td>cols</td><td>定义行数</td></tr><tr><td></td><td>textarea</td><td>rows</td><td>定义列数</td></tr><tr><td>密码框</td><td>input</td><td>type&#x3D;”password”</td><td>会隐藏内容</td></tr><tr><td>lable标签</td><td>lable</td><td></td><td>用lable标签包裹单选按钮和文字，则文字与按钮绑定</td></tr><tr><td>按钮</td><td>input</td><td>type&#x3D;”button”</td><td>普通按钮</td></tr><tr><td></td><td>input</td><td>type&#x3D;”submit”</td><td>提交按钮</td></tr><tr><td></td><td>input</td><td>type&#x3D;”reset”</td><td>重置按钮</td></tr><tr><td>单选按钮</td><td>input</td><td>type&#x3D;”radio”</td><td></td></tr><tr><td></td><td>input</td><td>name&#x3D;”自定义名称”</td><td>name名称相同时互斥</td></tr><tr><td></td><td>input</td><td>value&#x3D;””</td><td>向服务器提交的值</td></tr><tr><td></td><td>input</td><td>checked</td><td>默认选中</td></tr><tr><td>复选框(多选)</td><td>input</td><td>type&#x3D;”checkbox”</td><td></td></tr><tr><td></td><td>input</td><td>name&#x3D;””</td><td>同组复选框name值相同</td></tr><tr><td></td><td>input</td><td>value\checked</td><td>与单选按钮相同</td></tr><tr><td>下拉菜单</td><td>select</td><td></td><td>包裹option</td></tr><tr><td></td><td>select</td><td>option</td><td>内部选项</td></tr></tbody></table><ul><li>以下是html5新增控件，兼容到IE9，手机端完全兼容<table><thead><tr><th>作用</th><th>标签</th><th>属性</th></tr></thead><tbody><tr><td>颜色选择</td><td>input</td><td>color</td></tr><tr><td>日期时间选择</td><td>input</td><td>date\time\datetime</td></tr><tr><td>电子邮件</td><td>input</td><td>email</td></tr><tr><td>文件选择</td><td>input</td><td>file</td></tr><tr><td>数字输入</td><td>input</td><td>number，可设置min、max</td></tr><tr><td>拖拽条</td><td>input</td><td>range，可设置min、max</td></tr><tr><td>搜索框</td><td>input</td><td>search</td></tr><tr><td>网址输入</td><td>input</td><td>url</td></tr><tr><td>备选框</td><td>input</td><td>datalist</td></tr></tbody></table></li><li>效果：<form>  <p>用户名：<input type="text" placeholder="真实姓名"/>  </p>  <p>年龄：<input type="text" value="22" disabled>  </p>  <p>  常住地址:  <textarea cols="100" rows="2"></textarea>  </p>  <p>请输入密码：<input type="password"/>  </p>  <p>性别：  <lable><input type="radio" name="sex"/>男</lable>  <lable><input type="radio" name="sex"/>女</lable>  <lable><input type="radio" name="sex"/>保密</lable>  </p>  <p>  爱好：  <lable><input type="checkbox" name="爱好">篮球</lable>  <lable><input type="checkbox" name="爱好">书画</lable>  <lable><input type="checkbox" name="爱好">游戏</lable>  </p>  <p>  省份：  <select>  <option value="湖南省">湖南省</option>  <option value="湖北省">湖北省</option>  <option value="海南省">海南省</option>  </select>  市区：  <select>  <option value="长沙市">长沙市</option>  <option value="湘潭市">湘潭市</option>  <option value="深圳市">深圳市</option>  </select>  </p>  <p>  <input type="button" value="这是一个普通按钮"><br>  <input type="submit">这个会跳转<br>  <input type="reset">  </p>  <p>颜色选择：<input type="color"></p>  <p>日期：<input type="date"></p>  <p>编程语言有：  <input type="text" list="language">  <datalist id="language">      <option value="JAVA">JAVA</option>      <option value="python">python</option>      <option value="c++">c++</option>  </p></form></li></ul><h3 id="7、表格标签-bg-id"><a href="#7、表格标签-bg-id" class="headerlink" title="7、表格标签 {bg-id}"></a>7、表格标签 {bg-id}</h3><ul><li>标签属性：<ul><li>border：表格的边框<blockquote><p>HTML的大部分table标签属性已被CSS替代</p></blockquote></li></ul></li><li>表格头部<ul><li>table定义表格</li><li>thead页眉</li><li>caption表格标题</li><li>tr表格的行</li><li>th定义表头</li></ul></li></ul><pre><code>&lt;table border=&quot;1&quot;&gt;    &lt;thead&gt;    &lt;caption&gt;版本规划任务分配表&lt;/caption&gt;    &lt;tr&gt;        &lt;th&gt;需求：V0.3版本规划&lt;/th&gt;        &lt;th&gt;优先级&lt;/th&gt;        &lt;th&gt;任务分解&lt;/th&gt;        &lt;th&gt;产品负责人&lt;/th&gt;    &lt;/tr&gt;    &lt;/thead&gt;&lt;/table&gt;</code></pre><p>-主体</p><ul><li>tbody表格的主体</li><li>tr表格的行</li><li>td表格的单元</li></ul><pre><code>&lt;tbody&gt;    &lt;tr&gt;    &lt;td&gt;功能模块&lt;/td&gt;    &lt;td&gt;具体事项&lt;/td&gt;    &lt;td&gt;3&lt;/td&gt;    &lt;td&gt;任务2&lt;/td&gt;    &lt;td&gt;熊二&lt;/td&gt;    &lt;/tr&gt;&lt;/tbody&gt;</code></pre><ul><li>尾部</li></ul><pre><code>&lt;tfoot&gt;</code></pre><ul><li>跨行跨列(合并单元格)-td或th标签的属性</li><li>colspan：跨列</li><li>rowspan：跨行</li><li>实战<table border="1">   <thead>  <caption>版本规划任务分配表</caption> <tr>  <th colspan="2">需求：V0.3版本规划</th>  <th>优先级</th>  <th>任务分解</th>  <th>产品负责人</th> </tr>  </thead>  <tbody> <tr>  <td rowspan="3">功能模块1</td>  <td>具体事项1</td>  <td>3</td>  <td>任务1</td>  <td rowspan="3">@熊二</td> </tr> <tr>  <td rowspan="2">具体事项2</td>  <td>4</td>  <td>任务2</td> </tr> <tr>  <td>1</td>  <td>任务3</td> </tr> <tfoot> <tr>  <td colspan="5">备注</td> </tr> <tr>  <td colspan="5">……</td> </tr> </tfoot>  </tbody></table></li></ul><blockquote><p>markdown语法：</p><ul><li>表头：管道符(|)+三个以上减号-</li><li>表格：管道符(|)<br>管道符不需要对齐<br>对齐方式：在减号旁添加冒号；居左：—，居中：—：，居右—：<br>可以在表格中添加：’’的代码(不能是代码块)、强调、链接<br>我的疑问：markdown怎么跨单元格</li></ul></blockquote><h3 id="8、语义化标签"><a href="#8、语义化标签" class="headerlink" title="8、语义化标签"></a>8、语义化标签</h3><h4 id="yyhbq">语义化标签</h4><ul><li><p>文本格式化标签</p><table><thead><tr><th>标签</th><th>说明</th><th>markdown写法</th></tr></thead><tbody><tr><td>b</td><td>粗体(已被CSS替代)</td><td><strong>粗体</strong></td></tr><tr><td>i</td><td>斜体(已被CSS替代)</td><td><em>斜体</em></td></tr><tr><td>u</td><td>下划线(已被CSS替代)</td><td><del>删除线</del></td></tr><tr><td>em</td><td>着重强调</td><td></td></tr><tr><td>strong</td><td>特别重要的文字</td><td></td></tr><tr><td>mark</td><td>高亮文本</td><td>&#x3D;&#x3D;高亮&#x3D;&#x3D;</td></tr><tr><td>sub</td><td>下标</td><td>H<del>2</del>O</td></tr><tr><td>sup</td><td>上标</td><td>X^2^</td></tr><tr><td>del</td><td>删除线</td><td></td></tr><tr><td>pre</td><td>预格式文本</td><td></td></tr><tr><td>figure</td><td>用以规定独立的流内容</td><td></td></tr><tr><td>figcaption</td><td>figure的标题</td><td></td></tr></tbody></table></li><li><p><code>pre</code>被包围在<code>&lt;pre&gt;</code>标签，元素中的文本通常会保留空格和换行符。<br>而文本也会呈现为等宽字体。</p></li></ul><pre><code>&lt;pre&gt;被包围在 pre 标签  元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。 &lt;/pre&gt;&lt;figure&gt;    &lt;figcaption&gt;小米家电&lt;/figcaption&gt;    &lt;img src=&quot;家电.webp&quot; &quot;width=20&quot;&gt;&lt;/figure&gt;&lt;figure&gt;    &lt;img src=&quot;&quot;&gt;    &lt;figcaption&gt;小米家电&lt;/figcaption&gt;&lt;/figure&gt;</code></pre><ul><li>HTML5区块标签<table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>span</td><td>文本中的区块标签</td></tr><tr><td>header</td><td>页头</td></tr><tr><td>nav</td><td>导航条</td></tr><tr><td>main</td><td>网页核心部分</td></tr><tr><td>article</td><td>文档的核心内容</td></tr><tr><td>section</td><td>文档的区域</td></tr><tr><td>aside</td><td>非必要内容：广告等</td></tr><tr><td>footer</td><td>页脚</td></tr></tbody></table></li></ul><pre><code>&lt;p&gt;商品价格：&lt;span&gt;苹果&lt;/span&gt;5元&lt;/p&gt;</code></pre><ul><li>网页的排版：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>网站logo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>网页的导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>广告栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>商品标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>商品信息1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>页脚<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span></code></pre><h3 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><table><thead><tr><th>写法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>‘’</td><td>原代码显示</td><td>单个代码、短语用</td></tr><tr><td>&#96;&#96;&#96;html</td><td>代码块</td><td>前后各三个，标注语言后会自动添加颜色</td></tr><tr><td>[数字&#x2F;单词]</td><td>脚注</td><td>添加注释和引用</td></tr><tr><td>-空格[空格]空格文字</td><td>待办事项</td><td>方框中加x是已完成，空格是未完成</td></tr><tr><td>表情符</td><td>表情</td><td>可以直接复制表情或者使用其简码</td></tr></tbody></table><blockquote><p>脚注的标识符可以标注数字或者英文单词<br>标注可以写在在除其他元素中的任何地方<br>英语[^1]  语文[^2]<br>[^1]:my footnote.<br>[^2]:hihihi</p></blockquote><pre><code>英语[^1]  [^1]:my footnote.</code></pre><blockquote><p>任务列表</p></blockquote><ul><li><input disabled="" type="checkbox"> 阅读</li><li><input checked="" disabled="" type="checkbox"> 运动</li></ul><pre><code>- [ ] 阅读- [x] 运动</code></pre><blockquote><p>表情</p><blockquote><p>😀</p></blockquote></blockquote><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><ul><li><p>自动url链接<br>   百度：<a href="http://www.baidu.com/">http://www.baidu.com</a></p></li><li><p>禁用url链接<br>  加上符号：<code>http://www.baidu.com</code></p></li><li><p>徽章</p><ul><li>格式：<a href="%E8%B6%85%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80"><img src="/%E5%9B%BE%E7%89%87%E6%BA%90%E5%9C%B0%E5%9D%80" alt="图片文字说明"></a></li><li>先获取在线徽章的地址，然后按照语言规则手动拼接</li><li><a href="https://github.com/snowdreams1006"><img src="https://img.shields.io/badge/github-snowdreams1006-brightgreen.svg" alt="github"></a></li></ul></li></ul><blockquote><p>徽章图形制作网站：<a href="https://shields.io/">https://shields.io/</a><br>相关知识点：<a href="https://segmentfault.com/search?q=%E5%BE%BD%E7%AB%A0">https://segmentfault.com/search?q=%E5%BE%BD%E7%AB%A0</a> </p></blockquote><h2 id="三、VScode基础配置"><a href="#三、VScode基础配置" class="headerlink" title="三、VScode基础配置"></a>三、VScode基础配置</h2><h3 id="1、下载：官网下载"><a href="#1、下载：官网下载" class="headerlink" title="1、下载：官网下载"></a>1、下载：官网下载</h3><h3 id="2、插件安装："><a href="#2、插件安装：" class="headerlink" title="2、插件安装："></a>2、插件安装：</h3><ul><li>简体中文语言包： chinese</li><li>图标：Material Icon Theme</li><li>通过编辑器打开默认浏览器：open in brower</li><li>开启本地服务，即时刷新：live server</li><li>自动修改标签对： auto rename tag</li><li>将代码生成一张图片：carbon-now-sh</li><li>格式化代码：prettier-code-formatter;打开设置中的save勾选保存时格式化文件</li></ul><h3 id="3、常用快捷键"><a href="#3、常用快捷键" class="headerlink" title="3、常用快捷键"></a>3、常用快捷键</h3><ul><li>单行注释：ctrl+&#x2F;</li><li>多行注释2：alt+shift+A</li><li>移动行：alt+up&#x2F;down</li><li>显示、隐藏目录栏：ctrl+b</li><li>控制台终端显示&#x2F;隐藏：ctrl+~</li><li>多行编辑：ctrl+alt+up&#x2F;down</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客介绍及搭建过程分享</title>
      <link href="/2023/11/16/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%88%86%E4%BA%AB/"/>
      <url>/2023/11/16/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><blockquote><p>写这篇文的目的</p></blockquote><ul><li>记录自己搭建过程，便于以后快速复用</li><li>总结经验和自己踩的坑，给其他小伙伴一些参考(由于是搭建后写的，所以没有参考图片)</li></ul><blockquote><p>介绍</p></blockquote><ul><li>初步效果参考我的博客：<a href="https://hermiablog.com/">hermia的个人博客</a></li><li>本博客基于Hexo框架，使用github托管</li><li>使用自定义域名：<code>hermiablog.com</code></li><li>hexo主题：<code>hexo-theme-matery</code></li></ul><blockquote><p>主题特性</p></blockquote><ul><li>简单漂亮，文章内容美观易读</li><li>Material Design 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 Banner 图片(我选的图片都很美，期待你的每天访问哦)</li><li>瀑布流式的博客文章列表（文章无特色图片时会有漂亮的图片代替）</li><li>时间轴式的归档页</li><li>词云的标签页和雷达图的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 MathJax</li><li>TOC 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li>Gitalk、Gitment、Valine 和 Disqus 评论模块（推荐使用 Gitalk）</li><li>集成了不蒜子统计、谷歌分析（Google Analytics）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能<ul><li>博客正在建设中，更多功能敬请期待….</li></ul></li></ul><blockquote><p>跟着本篇文章，你会实现：</p></blockquote><ul><li>使用<code>github用户名.github.io</code>&#x2F;自定义域名访问博客</li><li>设置自己喜欢的主题</li></ul><blockquote><p>软件准备</p></blockquote><ul><li>git</li><li>Node.js</li><li>任一编辑器</li><li>注意：命令行操作使用git，文件内容编辑使用vscode</li></ul><blockquote><p>参考官方文档</p></blockquote><ul><li><a href="https://docs.github.com/zh/pages">Github Pages文档</a></li><li><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></li></ul><h3 id="低配版：github域名-默认hexo主题"><a href="#低配版：github域名-默认hexo主题" class="headerlink" title="低配版：github域名+默认hexo主题"></a>低配版：github域名+默认hexo主题</h3><blockquote><p>步骤</p></blockquote><ul><li>新建本地仓库</li><li>安装hexo</li><li>创建github仓库</li><li>链接远程仓库</li><li>部署</li></ul><h4 id="新建本地仓库"><a href="#新建本地仓库" class="headerlink" title="新建本地仓库"></a>新建本地仓库</h4><blockquote><p>我的电脑里同时使用了gitee和github仓库，且使用了不同的用户名及邮箱，因此</p><ul><li>不能使用全局的用户名、邮箱配置</li><li>所以在使用SSH链接远程仓库时要单独配置</li></ul></blockquote><ul><li>首先在本地新建空文件夹myblog</li><li>注意：<strong>不要</strong>使用<code>git init</code>来初始化仓库</li><li>因为hexo安装必须在空文件夹</li></ul><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><ul><li>右击刚刚新建的文件夹myblog，点击Git Bash Here打开git窗口</li><li>输入<code>npm install -g hexo-cli</code>安装Hexo</li><li>验证是否安装成功<code>hexo -v</code></li><li>初始化Hexo：<code>hexo init</code></li><li>查看是否能在本地启动成功：<code>hexo s</code>；启动服务器，访问网址之后可以看到hexo的初始界面；停止服务器：<code>ctrl+c</code></li></ul><pre><code>npm install -g hexo-clihexo -vhexo inithexo s</code></pre><blockquote><p>Hexo相关目录文件</p></blockquote><ul><li>node_modules是node.js各种库的目录</li><li>public是生成的网页文件目录</li><li>scaffolds里面就三个文件，存储着新文章和新页面的初始设置</li><li>source是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件</li><li>themes存放着主题文件，一般也用不到。<ul><li>我们平时写文章只需要关注source&#x2F;_posts这个文件夹就行了</li></ul></li></ul><h4 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h4><blockquote><p>注意：仓库名必须是<code>用户名.github.io</code>，这有这样做，部署完之后才能使用<code>http://用户名.github.io</code>访问</p></blockquote><ul><li>打开<code>https://github.com/</code>，新建一个项目仓库</li><li>选择公开仓库和需要README文件</li><li>git仓库默认主分支名为main，建议修改为master，和本地仓库的主分支名相同</li></ul><h4 id="使用SSH密钥链接远程仓库"><a href="#使用SSH密钥链接远程仓库" class="headerlink" title="使用SSH密钥链接远程仓库"></a>使用SSH密钥链接远程仓库</h4><ul><li>回到本地仓库的git界面</li><li>绑定用户名和邮箱</li></ul><pre><code># 全局git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;# 局部git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;# 查看用用户名和邮箱信息是否配置成功git config  --list</code></pre><blockquote><ul><li>如果你和我一样有多个仓库，就去掉 –global</li><li>邮箱就是你github绑定的邮箱</li><li>检查是否配置成功</li></ul></blockquote><ul><li>创建SSH</li></ul><pre><code>ssh-keygen -t rsa -C 邮箱名</code></pre><blockquote><ul><li>后面是自己注册github的邮箱，然后敲三次回车</li></ul></blockquote><ul><li>接着就会发现<code>C:\Users\用户名</code>下多了一个.ssh目录，打开后有一个公钥，一个私钥。id_rsa.pub是公钥</li><li>我们需要打开它，复制里面的内容</li><li>打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，标题随意取，把刚刚复制id_rsa.pub里面的信息粘贴到钥匙框</li><li>在git bash输入<code>ssh -T git@github.com</code>；如果出现<code>...successfully...</code>就成功了</li></ul><h4 id="将hexo和GitHub关联"><a href="#将hexo和GitHub关联" class="headerlink" title="将hexo和GitHub关联"></a>将hexo和GitHub关联</h4><ul><li>打开本地仓库，博客文件夹，在根目录找到<code>_config.yml</code>文件，使用vscode或任一编辑器打开</li><li>修改配置：</li></ul><pre><code>deploy:  type: git  repository: github地址  branch: master</code></pre><blockquote><ul><li>获取repository：打开github仓库–&gt;Code–&gt;复制SSH地址填入即可</li><li>注意：hexo的所有文件，在修改时切记<strong>冒号后面有空格</strong>，否则报错</li></ul></blockquote><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><ul><li>安装deploy-git</li></ul><pre><code>npm install hexo-deployer-git --save</code></pre><ul><li>依次执行以下命令</li></ul><pre><code># 清除缓存文件 (db.json) 和已生成的静态文件 (public)hexo c# 生成静态文件hexo g# 部署网站hexo d</code></pre><blockquote><ul><li>注意：虽然我们使用的是git，但是<code>hexo d</code>会自动把文件传到github上；不需要再使用<code>git push</code>了</li></ul></blockquote><ul><li>完成以上步骤，你就可以使用xxx.github.io来访问你的博客啦</li><li>以后写文章，只需要以下命令</li></ul><pre><code>hexo new post &quot;文章标题&quot;hexo chexo ghexo d</code></pre><h4 id="如果你使用的是多仓库"><a href="#如果你使用的是多仓库" class="headerlink" title="如果你使用的是多仓库"></a>如果你使用的是多仓库</h4><ul><li>如果你出现<code>Please tell me who you are</code>报错</li><li>如果你和我一样使用多仓库，那么：<blockquote><ul><li>首先不要设置全局git用户名&#x2F;邮箱</li></ul></blockquote></li></ul><pre><code># 删除全局设置git config --global --unset user.namegit config --global --unset user.email</code></pre><blockquote><ul><li>打开博客文件夹，点击<code>.deploy_git</code>文件夹–&gt;点击窗口上的查看–&gt;显示隐藏目录</li><li>此时就会出现git的隐藏目录<code>.git</code></li><li>进去之后，打开<code>config</code>配置文件，添加以下内容，注意空格</li></ul></blockquote><pre><code>[user]email = your email name = your name</code></pre><h3 id="高配版：自定义域名-HTTPS加密协议-自定义主题"><a href="#高配版：自定义域名-HTTPS加密协议-自定义主题" class="headerlink" title="高配版：自定义域名+HTTPS加密协议+自定义主题"></a>高配版：自定义域名+HTTPS加密协议+自定义主题</h3><h4 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h4><ul><li>首先，自定义域名需要花钱买，华为云&#x2F;腾讯云&#x2F;阿里云都可以</li><li>购买之后需要解析域名</li><li>打开github仓库–&gt;点击setting–&gt;找到pages–&gt;拉到Custom domain处，填写你购买的域名</li><li>此时项目根目录会自动生成CNAME文件</li></ul><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="git——多仓库配置"><a href="#git——多仓库配置" class="headerlink" title="git——多仓库配置"></a>git——多仓库配置</h4><blockquote><p>!!!首先 多仓库配置 绝对不要把用户名及邮箱设置为全局</p></blockquote><ul><li>git安装后，点击文件夹–&gt;右击 git bash here打开</li><li>初始化本地仓库</li></ul><pre><code>git init</code></pre><ul><li>设置用户名和有效</li></ul><pre><code>git config  user.name &quot;你的名字（一定要是英文的）&quot;git config  user.email &quot;你的邮箱&quot;# 查看用用户名和邮箱信息是否配置成功git config --global --list# 删除全局设置git config --global --unset user.namegit config --global --unset user.email</code></pre><blockquote><p>添加SSH公钥</p></blockquote><ul><li>创建SSH密钥对</li></ul><pre><code>ssh-keygen -t rsa -C 邮箱名</code></pre><ul><li>如果不需要设置密码，可以直接按Enter键</li><li>之后就会在用户主目录下的<code>.ssh</code>文件夹中生成以下两个文件：</li></ul><pre><code>id_rsaid_rsa.pub</code></pre><ul><li>其中id_rsa为私钥，id_rsa.pub为公钥</li><li>因为有两个仓库，所有有两份，因此需要在<code>.ssh</code>文件夹中分开命名<ul><li>gitee仓库的密钥：id_rsa_gitee和id._rsa_gitee.pub</li><li>github仓库的密钥：id_rsa_github和id._rsa_github.pub</li></ul></li><li>将自定义路径的私钥添加到ssh秘钥搜索列表中</li></ul><pre><code>//连接认证agent（身份验证代理）ssh-agent bash//修改私钥路径ssh-add ~/.ssh/id_rsa_github</code></pre><ul><li>将公钥内容粘贴到自己github&#x2F;Gitee的设置中<ul><li>用记事本打开id._rsa.pub文件，复制内容</li><li>登录自己的github或gitee，在个人设置中找到“安全设置”–“ssh公钥”，标题自定，将公钥粘贴进去</li></ul></li><li>测试本机能否与github&#x2F;gitee使用ssh通信</li></ul><pre><code>ssh -T git@gitee.com//或ssh -T git@github.com</code></pre><ul><li><p>ssh返回 “……successfully ……”，这表示可以与远程愉快的通信了 </p></li><li><p>本地仓库与GitHub远程仓库进行关联</p></li></ul><pre><code>git remote add origin 远程仓库地址(HTTP/SSH)</code></pre><h4 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h4><ul><li>在本地新建README文件</li></ul><pre><code>touch README.md</code></pre><ul><li><p>git add README.md命令，将刚刚新建的文件添加到暂存区中</p></li><li><p>git status命令来检测当前git仓库的状态</p></li><li><p>git commit -m “XXX”命令，将暂存区中的更改保存到版本库中，并对本次的更改添加注释</p></li><li><p>git status命令来检测当前git仓库的状态</p></li><li><p>git log，查看你的版本库</p></li><li><p>创建新分支：git branch 分支名</p></li><li><p>查看所有分支：git branch</p></li><li><p>切换分支：git checkout 分支名</p></li><li><p>push到远程仓库上面：git push origin 分支名</p></li><li><p>git branch -r 查看远程分支</p></li><li><p>git branch -a 查看本地仓库和远程分支（a是all的简写）</p></li></ul><blockquote><p>在分支上新建文件</p></blockquote><ul><li>切换到需要提交的分支上面 git checkout hexo</li><li>在hexo分支上新建文件 touch blogDesc.md</li><li>修改文档 vim blogDesc.md</li><li>编辑 i </li><li>保存 esc :wq</li><li>提交到分支上面<ul><li>git add 文件名&#x2F;.()</li><li>git commit -m “描述”</li><li>git push -u origin hexo</li></ul></li><li>切换到主分支上面<ul><li>git checkout master</li></ul></li><li>将本地分支和合并到本地主分支上<ul><li>git merge hexo</li></ul></li><li>远程到仓库<ul><li>git pull origin main</li></ul></li></ul><blockquote><p>删除分支</p></blockquote><ul><li>查看所有的分支<ul><li>git branch -a</li></ul></li><li>删除远程分支<ul><li>git push origin –delete hello</li></ul></li><li>删除本地分支<ul><li>git branch -D hello</li></ul></li></ul><blockquote><p>远程分支操作</p></blockquote><ul><li>从远程仓库中,把对应的远程分支下载到本地仓库中,保持本地分支和远程分支名称相同</li></ul><pre><code>#从远程仓库中,把对应的远程分支下载到本地仓库中,并把下载的本地分支进行重命名git checkout -b 本地分支的名称 远程仓库名称/远程分支名称</code></pre><ul><li>将本地分支推送到远程仓库</li></ul><pre><code># -u 表示把本地分支和远程分支进行关联,只在第一次推送的时候需要带-u参数git push -u 远程仓库的名称 本地分支的名称:远程分支的名称</code></pre><ul><li>拉取远程分支的最新代码</li></ul><pre><code>#从远程仓库,拉取当前分支最新的代码,保持当前分支的代码和远程分支代码一致git pull</code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>新建文章 hexo new post 标题</li><li>部署</li></ul><pre><code>#清理之前的生成hexo c# 生成静态网站hexo g#开启本地服务 ctrl+c 停止hexo s#上传到githubhexo d</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

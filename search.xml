<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客介绍及搭建过程分享</title>
      <link href="/2023/11/16/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%88%86%E4%BA%AB/"/>
      <url>/2023/11/16/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><blockquote><p>写这篇文的目的</p></blockquote><ul><li>记录自己搭建过程，便于以后快速复用</li><li>总结经验和自己踩的坑，给其他小伙伴一些参考(由于是搭建后写的，所以没有参考图片)</li></ul><blockquote><p>介绍</p></blockquote><ul><li>初步效果参考我的博客：<a href="https://hermiablog.com/">hermia的个人博客</a></li><li>本博客基于Hexo框架，使用github托管</li><li>使用自定义域名：<code>hermiablog.com</code></li><li>hexo主题：<code>hexo-theme-matery</code></li></ul><blockquote><p>主题特性</p></blockquote><ul><li>简单漂亮，文章内容美观易读</li><li>Material Design 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 Banner 图片(我选的图片都很美，期待你的每天访问哦)</li><li>瀑布流式的博客文章列表（文章无特色图片时会有漂亮的图片代替）</li><li>时间轴式的归档页</li><li>词云的标签页和雷达图的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 MathJax</li><li>TOC 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li>Gitalk、Gitment、Valine 和 Disqus 评论模块（推荐使用 Gitalk）</li><li>集成了不蒜子统计、谷歌分析（Google Analytics）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能<ul><li>博客正在建设中，更多功能敬请期待….</li></ul></li></ul><blockquote><p>跟着本篇文章，你会实现：</p></blockquote><ul><li>使用<code>github用户名.github.io</code>&#x2F;自定义域名访问博客</li><li>设置自己喜欢的主题</li></ul><blockquote><p>软件准备</p></blockquote><ul><li>git</li><li>Node.js</li><li>任一编辑器</li><li>注意：命令行操作使用git，文件内容编辑使用vscode</li></ul><blockquote><p>参考官方文档</p></blockquote><ul><li><a href="https://docs.github.com/zh/pages">Github Pages文档</a></li><li><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></li></ul><h3 id="低配版：github域名-默认hexo主题"><a href="#低配版：github域名-默认hexo主题" class="headerlink" title="低配版：github域名+默认hexo主题"></a>低配版：github域名+默认hexo主题</h3><blockquote><p>步骤</p></blockquote><ul><li>新建本地仓库</li><li>安装hexo</li><li>创建github仓库</li><li>链接远程仓库</li><li>部署</li></ul><h4 id="新建本地仓库"><a href="#新建本地仓库" class="headerlink" title="新建本地仓库"></a>新建本地仓库</h4><blockquote><p>我的电脑里同时使用了gitee和github仓库，且使用了不同的用户名及邮箱，因此</p><ul><li>不能使用全局的用户名、邮箱配置</li><li>所以在使用SSH链接远程仓库时要单独配置</li></ul></blockquote><ul><li>首先在本地新建空文件夹myblog</li><li>注意：<strong>不要</strong>使用<code>git init</code>来初始化仓库</li><li>因为hexo安装必须在空文件夹</li></ul><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><ul><li>右击刚刚新建的文件夹myblog，点击Git Bash Here打开git窗口</li><li>输入<code>npm install -g hexo-cli</code>安装Hexo</li><li>验证是否安装成功<code>hexo -v</code></li><li>初始化Hexo：<code>hexo init</code></li><li>查看是否能在本地启动成功：<code>hexo s</code>；启动服务器，访问网址之后可以看到hexo的初始界面；停止服务器：<code>ctrl+c</code></li></ul><pre><code>npm install -g hexo-clihexo -vhexo inithexo s</code></pre><blockquote><p>Hexo相关目录文件</p></blockquote><ul><li>node_modules是node.js各种库的目录</li><li>public是生成的网页文件目录</li><li>scaffolds里面就三个文件，存储着新文章和新页面的初始设置</li><li>source是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件</li><li>themes存放着主题文件，一般也用不到。<ul><li>我们平时写文章只需要关注source&#x2F;_posts这个文件夹就行了</li></ul></li></ul><h4 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h4><blockquote><p>注意：仓库名必须是<code>用户名.github.io</code>，这有这样做，部署完之后才能使用<code>http://用户名.github.io</code>访问</p></blockquote><ul><li>打开<code>https://github.com/</code>，新建一个项目仓库</li><li>选择公开仓库和需要README文件</li><li>git仓库默认主分支名为main，建议修改为master，和本地仓库的主分支名相同</li></ul><h4 id="使用SSH密钥链接远程仓库"><a href="#使用SSH密钥链接远程仓库" class="headerlink" title="使用SSH密钥链接远程仓库"></a>使用SSH密钥链接远程仓库</h4><ul><li>回到本地仓库的git界面</li><li>绑定用户名和邮箱</li></ul><pre><code># 全局git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;# 局部git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;# 查看用用户名和邮箱信息是否配置成功git config  --list</code></pre><blockquote><ul><li>如果你和我一样有多个仓库，就去掉 –global</li><li>邮箱就是你github绑定的邮箱</li><li>检查是否配置成功</li></ul></blockquote><ul><li>创建SSH</li></ul><pre><code>ssh-keygen -t rsa -C 邮箱名</code></pre><blockquote><ul><li>后面是自己注册github的邮箱，然后敲三次回车</li></ul></blockquote><ul><li>接着就会发现<code>C:\Users\用户名</code>下多了一个.ssh目录，打开后有一个公钥，一个私钥。id_rsa.pub是公钥</li><li>我们需要打开它，复制里面的内容</li><li>打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，标题随意取，把刚刚复制id_rsa.pub里面的信息粘贴到钥匙框</li><li>在git bash输入<code>ssh -T git@github.com</code>；如果出现<code>...successfully...</code>就成功了</li></ul><h4 id="将hexo和GitHub关联"><a href="#将hexo和GitHub关联" class="headerlink" title="将hexo和GitHub关联"></a>将hexo和GitHub关联</h4><ul><li>打开本地仓库，博客文件夹，在根目录找到<code>_config.yml</code>文件，使用vscode或任一编辑器打开</li><li>修改配置：</li></ul><pre><code>deploy:  type: git  repository: github地址  branch: master</code></pre><blockquote><ul><li>获取repository：打开github仓库–&gt;Code–&gt;复制SSH地址填入即可</li><li>注意：hexo的所有文件，在修改时切记<strong>冒号后面有空格</strong>，否则报错</li></ul></blockquote><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><ul><li>安装deploy-git</li></ul><pre><code>npm install hexo-deployer-git --save</code></pre><ul><li>依次执行以下命令</li></ul><pre><code># 清除缓存文件 (db.json) 和已生成的静态文件 (public)hexo c# 生成静态文件hexo g# 部署网站hexo d</code></pre><blockquote><ul><li>注意：虽然我们使用的是git，但是<code>hexo d</code>会自动把文件传到github上；不需要再使用<code>git push</code>了</li></ul></blockquote><ul><li>完成以上步骤，你就可以使用xxx.github.io来访问你的博客啦</li><li>以后写文章，只需要以下命令</li></ul><pre><code>hexo new post &quot;文章标题&quot;hexo chexo ghexo d</code></pre><h4 id="如果你使用的是多仓库"><a href="#如果你使用的是多仓库" class="headerlink" title="如果你使用的是多仓库"></a>如果你使用的是多仓库</h4><ul><li>如果你出现<code>Please tell me who you are</code>报错</li><li>如果你和我一样使用多仓库，那么：<blockquote><ul><li>首先不要设置全局git用户名&#x2F;邮箱</li></ul></blockquote></li></ul><pre><code># 删除全局设置git config --global --unset user.namegit config --global --unset user.email</code></pre><blockquote><ul><li>打开博客文件夹，点击<code>.deploy_git</code>文件夹–&gt;点击窗口上的查看–&gt;显示隐藏目录</li><li>此时就会出现git的隐藏目录<code>.git</code></li><li>进去之后，打开<code>config</code>配置文件，添加以下内容，注意空格</li></ul></blockquote><pre><code>[user]email = your email name = your name</code></pre><h3 id="高配版：自定义域名-HTTPS加密协议-自定义主题"><a href="#高配版：自定义域名-HTTPS加密协议-自定义主题" class="headerlink" title="高配版：自定义域名+HTTPS加密协议+自定义主题"></a>高配版：自定义域名+HTTPS加密协议+自定义主题</h3><h4 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h4><ul><li>首先，自定义域名需要花钱买，华为云&#x2F;腾讯云&#x2F;阿里云都可以</li><li>购买之后需要解析域名</li><li>打开github仓库–&gt;点击setting–&gt;找到pages–&gt;拉到Custom domain处，填写你购买的域名</li><li>此时项目根目录会自动生成CNAME文件</li></ul><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="git——多仓库配置"><a href="#git——多仓库配置" class="headerlink" title="git——多仓库配置"></a>git——多仓库配置</h4><blockquote><p>!!!首先 多仓库配置 绝对不要把用户名及邮箱设置为全局</p></blockquote><ul><li>git安装后，点击文件夹–&gt;右击 git bash here打开</li><li>初始化本地仓库</li></ul><pre><code>git init</code></pre><ul><li>设置用户名和有效</li></ul><pre><code>git config  user.name &quot;你的名字（一定要是英文的）&quot;git config  user.email &quot;你的邮箱&quot;# 查看用用户名和邮箱信息是否配置成功git config --global --list# 删除全局设置git config --global --unset user.namegit config --global --unset user.email</code></pre><blockquote><p>添加SSH公钥</p></blockquote><ul><li>创建SSH密钥对</li></ul><pre><code>ssh-keygen -t rsa -C 邮箱名</code></pre><ul><li>如果不需要设置密码，可以直接按Enter键</li><li>之后就会在用户主目录下的<code>.ssh</code>文件夹中生成以下两个文件：</li></ul><pre><code>id_rsaid_rsa.pub</code></pre><ul><li>其中id_rsa为私钥，id_rsa.pub为公钥</li><li>因为有两个仓库，所有有两份，因此需要在<code>.ssh</code>文件夹中分开命名<ul><li>gitee仓库的密钥：id_rsa_gitee和id._rsa_gitee.pub</li><li>github仓库的密钥：id_rsa_github和id._rsa_github.pub</li></ul></li><li>将自定义路径的私钥添加到ssh秘钥搜索列表中</li></ul><pre><code>//连接认证agent（身份验证代理）ssh-agent bash//修改私钥路径ssh-add ~/.ssh/id_rsa_github</code></pre><ul><li>将公钥内容粘贴到自己github&#x2F;Gitee的设置中<ul><li>用记事本打开id._rsa.pub文件，复制内容</li><li>登录自己的github或gitee，在个人设置中找到“安全设置”–“ssh公钥”，标题自定，将公钥粘贴进去</li></ul></li><li>测试本机能否与github&#x2F;gitee使用ssh通信</li></ul><pre><code>ssh -T git@gitee.com//或ssh -T git@github.com</code></pre><ul><li><p>ssh返回 “……successfully ……”，这表示可以与远程愉快的通信了 </p></li><li><p>本地仓库与GitHub远程仓库进行关联</p></li></ul><pre><code>git remote add origin 远程仓库地址(HTTP/SSH)</code></pre><h4 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h4><ul><li>在本地新建README文件</li></ul><pre><code>touch README.md</code></pre><ul><li><p>git add README.md命令，将刚刚新建的文件添加到暂存区中</p></li><li><p>git status命令来检测当前git仓库的状态</p></li><li><p>git commit -m “XXX”命令，将暂存区中的更改保存到版本库中，并对本次的更改添加注释</p></li><li><p>git status命令来检测当前git仓库的状态</p></li><li><p>git log，查看你的版本库</p></li><li><p>创建新分支：git branch 分支名</p></li><li><p>查看所有分支：git branch</p></li><li><p>切换分支：git checkout 分支名</p></li><li><p>push到远程仓库上面：git push origin 分支名</p></li><li><p>git branch -r 查看远程分支</p></li><li><p>git branch -a 查看本地仓库和远程分支（a是all的简写）</p></li></ul><blockquote><p>在分支上新建文件</p></blockquote><ul><li>切换到需要提交的分支上面 git checkout hexo</li><li>在hexo分支上新建文件 touch blogDesc.md</li><li>修改文档 vim blogDesc.md</li><li>编辑 i </li><li>保存 esc :wq</li><li>提交到分支上面<ul><li>git add 文件名&#x2F;.()</li><li>git commit -m “描述”</li><li>git push -u origin hexo</li></ul></li><li>切换到主分支上面<ul><li>git checkout master</li></ul></li><li>将本地分支和合并到本地主分支上<ul><li>git merge hexo</li></ul></li><li>远程到仓库<ul><li>git pull origin main</li></ul></li></ul><blockquote><p>删除分支</p></blockquote><ul><li>查看所有的分支<ul><li>git branch -a</li></ul></li><li>删除远程分支<ul><li>git push origin –delete hello</li></ul></li><li>删除本地分支<ul><li>git branch -D hello</li></ul></li></ul><blockquote><p>远程分支操作</p></blockquote><ul><li>从远程仓库中,把对应的远程分支下载到本地仓库中,保持本地分支和远程分支名称相同</li></ul><pre><code>#从远程仓库中,把对应的远程分支下载到本地仓库中,并把下载的本地分支进行重命名git checkout -b 本地分支的名称 远程仓库名称/远程分支名称</code></pre><ul><li>将本地分支推送到远程仓库</li></ul><pre><code># -u 表示把本地分支和远程分支进行关联,只在第一次推送的时候需要带-u参数git push -u 远程仓库的名称 本地分支的名称:远程分支的名称</code></pre><ul><li>拉取远程分支的最新代码</li></ul><pre><code>#从远程仓库,拉取当前分支最新的代码,保持当前分支的代码和远程分支代码一致git pull</code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>新建文章 hexo new post 标题</li><li>部署</li></ul><pre><code>#清理之前的生成hexo c# 生成静态网站hexo g#开启本地服务 ctrl+c 停止hexo s#上传到githubhexo d</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

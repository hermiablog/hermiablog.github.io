<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS核心知识点（六）</title>
      <link href="/2023/12/04/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2023/12/04/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>本章节我们来学习数组相关的方法，操作数组的方法非常多，我们先学习 <code>ES5</code> 中的一些方法，等学习到 <code>ES6</code> 之后，再学习 ES6 中新增的相关方法。</p></blockquote><h3 id="一、数组的头尾操作"><a href="#一、数组的头尾操作" class="headerlink" title="一、数组的头尾操作"></a>一、数组的头尾操作</h3><blockquote><ul><li>首先我们来学习，如何在数组的头部或尾部添加元素或删除元素的操作<table><thead><tr><th>实例方法</th><th>描述</th><th>是否更改原数组</th></tr></thead><tbody><tr><td>push()</td><td>将一个或多个元素添加到数组的末尾，并返回该数组的新长度</td><td>是</td></tr><tr><td>pop()</td><td>从数组中删除最后一个元素，并返回被删除元素的值</td><td>是</td></tr><tr><td>unshift()</td><td>将一个或多个元素添加到数组的头部，并返回该数组的新长度</td><td>是</td></tr><tr><td>shift()</td><td>从数组中删除第一个元素，并返回该元素的值</td><td>是</td></tr></tbody></table></li></ul></blockquote><ol><li><p>push()方法</p><blockquote><ul><li>向数组的末尾添加<strong>一个或多个</strong>元素，每个元素之间用<code>,</code>逗号隔开</li><li>并<strong>返回</strong>数组的<strong>新长度</strong></li><li>括号内是要新增的元素</li></ul><pre><code>var arr = [1, 2, 3];</code></pre></blockquote><p>&#x2F;&#x2F; 向数组的尾部添加元素4<br>arr.push(4);<br>&#x2F;&#x2F; 向数组的尾部添加5，’我’ ,同时用变量len接受数据的新长度<br>var len &#x3D; arr.push(5, “我”);</p><blockquote></blockquote><p>console.log(arr);<br>console.log(“数组的长度：” + len); &#x2F;&#x2F; 数组的长度：6</p><blockquote><pre><code>&gt;push 方法根据 length 属性来决定从哪里开始插入给定的值</code></pre></blockquote></li><li><p>pop() 方法</p><blockquote><ul><li>从数组中<strong>删除最后一个</strong>元素，并<strong>返回</strong>该元素（被删除元素）的<strong>值</strong></li><li>当数组为<strong>空</strong>时，返回值为<code>undefined</code></li></ul><pre><code>var arr = [12, 23, 56, 11];var item = arr.pop();</code></pre></blockquote><p>console.log(arr); &#x2F;&#x2F; 输出删除最后一项后的值 [12, 23, 56]<br>console.log(item); &#x2F;&#x2F; 返回被删除元素的值 11</p><blockquote><pre><code>&gt;pop 方法根据 length 属性来确定最后一个元素的位置</code></pre></blockquote></li><li><p>unshift() 方法</p><blockquote><ul><li>一个或多个元素<strong>添加</strong>到数组的<strong>开头</strong>，每个元素之间用<code>,</code>逗号隔开</li><li>并<strong>返回</strong>该数组的<strong>新长度</strong></li></ul><pre><code>var arr = [12, 23, 56, 11];arr.unshift(66);var len = arr.unshift(0);console.log(len); // 6console.log(arr); // [0, 66, 12, 23, 56, 11]</code></pre></blockquote></li><li><p>shift() 方法</p><blockquote><ul><li>从数组中<strong>删除第一个</strong>元素，并返回该元素的值</li><li>当数组为<strong>空</strong>时，返回值为<code>undefined</code></li></ul><pre><code>var arr = [12, 23, 56, 11];var item = arr.shift(); // 删除数组中下标为0的项</code></pre></blockquote><p>console.log(item); &#x2F;&#x2F; 返回被删除的项 12<br>console.log(arr); &#x2F;&#x2F; [23, 56, 11]</p><blockquote><pre><code></code></pre></blockquote></li><li><p>案例：筛选数组中所有大于等于 10 的元素</p><blockquote><pre><code>var arr = [1, 3, 68, 33, 5, 9, 34, 55];function filter(arr) &#123;  var arr2 = [];  for (var i = 0; i &lt;= arr.length; i++) &#123; if (arr[i] &gt;= 10) &#123;   arr2.push(arr[i]); &#125;  &#125;  return arr2;&#125;console.log(filter(arr));</code></pre></blockquote></li></ol><h3 id="二、数组中元素的（增、删、改、查）"><a href="#二、数组中元素的（增、删、改、查）" class="headerlink" title="二、数组中元素的（增、删、改、查）"></a>二、数组中元素的（增、删、改、查）</h3><blockquote><p>如果我们要对数组中非头尾的元素，做相关的增、删、改、查操作，就需要用到下面的这些方法</p><table><thead><tr><th>实例方法</th><th>描述</th><th>是否更改原数组</th></tr></thead><tbody><tr><td>slice()</td><td>（查询）：提取原数组的一部分并返回一个新数组</td><td>否</td></tr><tr><td>splice()</td><td>（新增）：在指定位置插入一项或多项新元素;（删除）：在指定位置删除指定项;（更新）：在指定位置删除指定项，同时在此处添加一项或多项</td><td>是</td></tr></tbody></table></blockquote><ol><li>slice()方法<blockquote><ul><li>查询原数组中的一部分元素，然后将查询到的元素<strong>复制</strong>到一个新数组，并将新数组返回</li><li>slice() 方法<strong>不会更改</strong>原数组</li><li>slice() 中返回的元素是从原数组中<strong>浅拷贝</strong>过来的。</li></ul></blockquote></li></ol><p><strong>浅拷贝：</strong></p><blockquote><ul><li>数组中的值如果是<strong>基本类型</strong>，直接把值拷贝一份过来，修改拷贝后的数组<strong>不会影响</strong>原数组</li><li>如果是<strong>引用类型</strong>，拷贝的是引用类型的<strong>地址</strong>，当修改 slice()返回数组中的引用类型值时，<strong>原数组也会变</strong></li></ul></blockquote><p><strong>语法：</strong></p><blockquote><p><code>slice(start, end);</code></p><ul><li><code>start</code>和<code>end</code>表示查找的起始与结束索引，其值<strong>可正可负</strong>，<strong>正索引</strong>是从左往右数，下标从 <code>0</code> 开始，<strong>负索引</strong>是从右往左数，下标从<code>-1</code> 开始</li><li>不论正负索引，元素查找方向，都是从起始索引<strong>从左往右</strong>查找，从右到左只能得到空数组<code>[]</code></li><li>查找的元素，不包含结束索引的值</li><li>如果只有一个参数，表示起始位置，从这个位置提取往后<strong>所有元素</strong>。</li><li><code>start</code> 的默认值可以理解为 <code>0</code>，<code>end</code> 的默认值可以理解为<strong>数组长度-1(索引的最大值)</strong></li><li><code>arr.slice()</code> 相当于把整个数组浅拷贝一份</li><li>特殊情况：当起始索引和结束索引为同一值时，结果为<code>[]</code></li></ul></blockquote><blockquote><pre><code>var arr = [1, 2, 3, 4, 5, 6];// 两个参数都是正数console.log(arr.slice(1, 3)); //2,3console.log(arr.slice(3, 2)); //[]</code></pre></blockquote><p>&#x2F;&#x2F; 两个参数都是负数<br>console.log(arr.slice(-1, -3)); &#x2F;&#x2F;[]<br>console.log(arr.slice(-3, -1)); &#x2F;&#x2F;4,5</p><blockquote></blockquote><p>&#x2F;&#x2F; 参数一正一负<br>console.log(arr.slice(1, -2)); &#x2F;&#x2F;2,3,4<br>console.log(arr.slice(-2, 4)); &#x2F;&#x2F;[]</p><blockquote></blockquote><p>&#x2F;&#x2F; 只有一个参数<br>console.log(arr.slice(1)); &#x2F;&#x2F;2,3,4,5,6<br>console.log(arr.slice(-4)); &#x2F;&#x2F;3,4,5,6</p><blockquote></blockquote><p>&#x2F;&#x2F; 注意：<br>console.log(arr.slice(3, -1)); &#x2F;&#x2F;4,5<br>console.log(arr.slice(-2, 4)); &#x2F;&#x2F;[]<br>console.log(arr.slice(3, -3)); &#x2F;&#x2F;[]</p><blockquote><pre><code></code></pre></blockquote><ol start="2"><li>splice()方法<blockquote><ul><li><code>splice()</code>方法，可以实现对数组中元素的 删除，添加，更新（删除并替换）操作</li><li>被删除的元素组成一个数组，被返回，如果没有删除元素，则返回空数组</li><li>语法：<code>splice(index, deleteCount, item1, item2, itemN);</code></li><li><code>splice</code> 删除元素，包含 index 索引位置元素</li><li><code>index</code> 表索引，索引<strong>可正可负</strong>，<strong>正</strong>表示从左往右数，下标从 <code>0</code> 开始，<strong>负</strong>表示从右往左数，下标从<code>-1</code> 开始<ul><li>如果<strong>超过</strong>数组长度，表示从数组尾部开始添加内容</li><li>如果是<strong>负值</strong>，表示数组尾部开始的第几位（尾部第一位表示<code>-1</code>）</li></ul></li><li><code>deleteCount</code> 表示删除长度，<strong>0 和负数</strong>不删除，如果<strong>不写</strong>，表示 index 处删除往后<strong>所有元素</strong>（包括 index 处元素）</li><li><code>item1,item2...</code>可选，表示要添加进数组的元素，从 <code>index</code>位置开始</li></ul></blockquote></li></ol><ul><li><p>添加元素</p><blockquote><ul><li><code>deleteCount=0</code></li></ul><pre><code>var arr = [1, 2, 3, 4, 5];// 从下标1位置前面插入两个数var arr1 = arr.splice(1, 0, &quot;A&quot;, &quot;B&quot;);console.log(arr); // [1, &#39;A&#39;, &#39;B&#39;, 2, 3, 4, 5]console.log(arr1); // []</code></pre></blockquote></li><li><p>删除元素</p><blockquote><ul><li>没有新增元素</li></ul><pre><code>var arr = [1, 2, 3, 4, 5];var arr1 = arr.splice(1, 2);console.log(arr); // [1, 4, 5]console.log(arr1); // [2, 3]</code></pre></blockquote><p>var arr &#x3D; [1, 2, 3, 4, 5];<br>var arr1 &#x3D; arr.splice(2); &#x2F;&#x2F; 删除索引2后所有元素，包括索引2位置上元素<br>console.log(arr); &#x2F;&#x2F; [1, 2]<br>console.log(arr1); &#x2F;&#x2F; [3, 4, 5]</p><blockquote><pre><code></code></pre></blockquote></li><li><p>更新（删除并替换）元素</p><blockquote><pre><code>var arr = [1, 2, 3, 4, 5];// 从下标1的位置，删除2个元素（包括下标1的元素），然后再加两个元素var arr1 = arr.splice(1, 2, &quot;A&quot;, &quot;B&quot;);console.log(arr); // [1, &#39;A&#39;, &#39;B&#39;, 4, 5]console.log(arr1); // [2, 3]</code></pre></blockquote></li><li><p>index 下标为<strong>负数</strong>时</p><blockquote><ul><li>index 为负数，表示从后往前找元素的位置，从后往前，元素下标从<code>-1</code>开始</li></ul><pre><code>var arr = [1, 2, 3, 4, 5];// 从倒数第三个元素开始，删除 2个元素（包括倒数第三个）var arr1 = arr.splice(-3, 2);console.log(arr); // [1, 2, 5]console.log(arr1); // [3,4]</code></pre></blockquote></li></ul><h3 id="三、数组与字符串相互转换"><a href="#三、数组与字符串相互转换" class="headerlink" title="三、数组与字符串相互转换"></a>三、数组与字符串相互转换</h3><table><thead><tr><th>实例方法</th><th>描述</th><th>是否更改原数组</th></tr></thead><tbody><tr><td>join()</td><td>将一个数组的所有元素以特定的某种字符连接成一个字符串，并返回这个字符串</td><td>不会</td></tr><tr><td>toString()</td><td>将数组转换为字符串，然后返回该 字符串</td><td>不会</td></tr></tbody></table><blockquote><ul><li>以下方法为字符串的实例方法</li></ul></blockquote><table><thead><tr><th>实例方法</th><th>描述</th></tr></thead><tbody><tr><td>split()</td><td>根据指定的分隔符将一个<strong>字符串</strong>分割成一个字符串<strong>数组</strong></td></tr><tr><td>charAt()</td><td>从一个字符串中返回指定的字符<code>str.charAt(index)</code></td></tr></tbody></table><ol><li><p>join()方法</p><blockquote><ul><li>将一个<strong>数组</strong>的所有元素以<strong>特定</strong>的<strong>某种字符</strong>连接成一个字符串，并<strong>返回</strong>这个字符串</li><li>如果<strong>不指定</strong>连接字符，则默认以<code>,</code>逗号来分隔连接</li><li>这个方法<strong>不会改变</strong>原数组，会生成一个新的字符串</li></ul><pre><code>var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;];var str = arr.join();console.log(str); // a,b,c,dconsole.log(arr); // [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]</code></pre></blockquote><p>var str2 &#x3D; arr.join(“”);<br>console.log(str2); &#x2F;&#x2F; abcd<br>var str3 &#x3D; arr.join(“<strong>“);<br>console.log(str3); &#x2F;&#x2F;  a</strong>b<strong>c</strong>d</p><blockquote><pre><code></code></pre></blockquote></li><li><p>toString()方法</p><blockquote><ul><li>将数组转成以<code>,</code>逗号分隔的字符串，同时返回该字符串</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1,2,3</span></code></pre></blockquote></li></ol><blockquote><ul><li><code>toString</code>方法在内部调用<code>join()</code>方法拼接数组中的元素并返回一个字符串，其中包含用逗号分隔的每个数组元素</li></ul><pre><code>var arr = [1, 2, 3, 4];  var str = arr.toString();console.log(str);</code></pre></blockquote><p>&#x2F;&#x2F; 修改原型上join方法<br>Array.prototype.join &#x3D; function () {<br>var str &#x3D; “”;<br>for (var i &#x3D; 0; i &lt; this.length; i++) {<br>  str +&#x3D; this[i] + “<em>“;<br>}<br>return str;<br>};<br>&#x2F;&#x2F; 也可以只修改当前实例的join方法 arr.join&#x3D;function(){  }<br>console.log(arr.toString());<br>&#x2F;&#x2F;1</em>2<em>3</em>4*</p><blockquote><pre><code></code></pre></blockquote><ol start="3"><li>split()方法 字符串操作方法<blockquote><ul><li>数组的<code>join()</code>方法可以使数组转为字符串</li><li>字符串的<code>split()</code>方法可以使字符串转为数组<img src="./src/字符串和数组相互转换.png"></li></ul></blockquote></li></ol><blockquote><ul><li><code>split()</code>可以使字符串以某种分隔符进行分隔，分隔后的字符串组成一个数组返回</li><li>分隔符为<strong>空字符串</strong>，则将原字符串中每个字符的数组形式返回</li></ul><pre><code>var str = &quot;a*b*c*d&quot;;var arr1 = str.split(&quot;&quot;);var arr2 = str.split(&quot;*&quot;);console.log(arr1); // [&#39;a&#39;, &#39;*&#39;, &#39;b&#39;, &#39;*&#39;, &#39;c&#39;, &#39;*&#39;, &#39;d&#39;]console.log(arr2); // [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</code></pre></blockquote><p>“a-b-c-d-e-f-g-h”.split(“”); &#x2F;&#x2F; [‘a’, ‘-‘, ‘b’, ‘-‘, ‘c’, ‘-‘, ‘d’, ‘-‘, ‘e’, ‘-‘, ‘f’, ‘-‘, ‘g’, ‘-‘, ‘h’]<br>“a-b-c-d-e-f-g-h”.split(“-“); &#x2F;&#x2F; [‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’, ‘g’, ‘h’]</p><blockquote><pre><code></code></pre></blockquote><blockquote><ul><li>回顾之前讲的<code>rgb(2,33,55)</code>颜色的分隔</li></ul><pre><code>var rgb = &quot;rgb(2,33,55)&quot;;//只要不是[0-9]之间的单个或多个数字，其它字符都可以做为分隔符来分隔字符串var rgbArr = rgb.split(/[^\d]+/);console.log(rgbArr);</code></pre><ul><li><code>\d</code> 表示 0-9之间的任意数字 </li><li><code>[^\d]</code> 排除0-9之间的任意数字  </li><li><code>+</code>表示前面的字符可以出现<strong>任意次</strong></li></ul><pre><code>var url =  &quot;https://www.icodingedu.com/goods/show/42?targetId=71&amp;preview=0&quot;;var obj = &#123;&#125;;var str = url.split(&quot;?&quot;)[1].split(&quot;&amp;&quot;);//url.split(&quot;?&quot;)[1] = targetId=71&amp;preview=0//url.split(&quot;?&quot;)[1].split(&quot;&amp;&quot;) = [&#39;targetId=71&#39;, &#39;preview=0&#39;]console.log(str); //  [&#39;targetId=71&#39;, &#39;preview=0&#39;]for (let i = 0; i &lt; str.length; i++) &#123;  var param = str[i].split(&quot;=&quot;);  obj[param[0]] = param[1];&#125;//i=0时,param=str[0].split(&quot;=&quot;)//即：param=targetId=71.split(&quot;=&quot;) =[&#39;targetId&#39;,&#39;71&#39;]//obj[targetId]=71console.log(obj); // &#123;targetId: &#39;71&#39;, preview: &#39;0&#39;&#125;</code></pre></blockquote><ol start="5"><li><p>charAt()方法 字符串操作方法</p><blockquote><p><code>str.charAt(index);</code></p><ul><li><code>charAt()</code> 方法从一个字符串中返回指定的字符</li><li>一个介于 0 和字符串长度减 1 之间的整数</li><li>如果没有提供索引，charAt() 将使用 0</li><li>字符串中的字符从左向右索引，第一个字符的索引值为 <code>0</code>，最后一个字符（假设该字符位于字符串 str 中）的索引值为 <code>str.length - 1</code></li></ul><pre><code>var str = &quot;我爱你!&quot;;console.log(str.charAt(0)); // 我console.log(str.charAt(1)); // 爱console.log(str.charAt(2)); // 你</code></pre></blockquote></li><li><p>字符串与数组相似点</p><blockquote><ul><li>字符串也可以像数组一样，使用下标进行访问</li><li>也可以用 charAt()方法来访问，charAt()</li><li>字符串可以像数组一样，利用 for 循环来遍历</li><li>没有负索引</li></ul><pre><code>var str = &quot;我爱你!&quot;;console.log(str[0]);// 我console.log(str[1]);// 爱console.log(str[2]);// 你console.log(str[-1]); //undefinedconsole.log(str[4]);//undefinedvar str = &quot;我爱你!&quot;;for (var i = 0; i &lt; str.length; i++) &#123;  console.log(str[i]);&#125;</code></pre></blockquote></li></ol><blockquote><blockquote><p>但字符串并不是类数组</p><ul><li>尽管它具有length属性、能通过下标访问，但它的数据类型不是对象，它是基本数据类型</li></ul></blockquote></blockquote><h3 id="四、判断数组中元素方法"><a href="#四、判断数组中元素方法" class="headerlink" title="四、判断数组中元素方法"></a>四、判断数组中元素方法</h3><table><thead><tr><th>实例方法</th><th>描述</th><th>是否更改原数组</th></tr></thead><tbody><tr><td>indexOf()</td><td>返回在数组中可以找到给定元素的第一个索引，如果不存在，则返回 -1</td><td>否</td></tr><tr><td>lastIndexOf()</td><td>返回指定元素在数组中的最后一个的索引，如果不存在则返回-1;从指定位置开始<strong>逆向</strong>查找（即从后往前找）</td><td>否</td></tr><tr><td>includes()</td><td>用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false</td><td>否</td></tr></tbody></table><blockquote><p>三者共同点：</p><ul><li>都是全等，不适合引用数据类型</li><li>都包含起始位置</li></ul></blockquote><ol><li><p>indexOf() 方法</p><blockquote><ul><li>返回在数组中可以找到给定元素的<strong>第一个索引</strong>，如果不存在，则返回 <code>-1</code>。</li><li>查找时，使用的是（<strong>全等运算</strong><code>===</code>)，所以不适合引用数据类型</li><li>语法：<code>indexOf(searchElement, fromIndex);</code><ul><li>searchElement 要查找的元素</li><li>fromIndex 开始查找的位置（索引）</li></ul></li><li><code>fromindex</code>可正可负，正从0开始，负从-1开始；并且包含起始位置元素</li><li>如果<code>fromindex</code>不写，则默认从下标为0的元素开始查找</li><li>查找方向只能是<strong>从左往右</strong>，而且不会回头</li><li><code>fromindex</code>为负时，返回的索引为正索引</li></ul><pre><code>var arr = [2, 9, 1, 1, 5, 2, 4, 9];//不写index，默认从0开始console.log(arr.indexOf(2)); //0//index可以为正，并包含起始元素console.log(arr.indexOf(9, 1)); //1//index可以为负console.log(arr.indexOf(9, -arr.length)); //1//找不到的时候，返回-1console.log(arr.indexOf(&quot;a&quot;)); //-1//只能从左往右，不会回头console.log(arr.indexOf(1, 4)); //-1console.log(arr.indexOf(1, -3)); //-1</code></pre><blockquote><p>特别注意，用负索引时，一定记得查找方向是从左往右，易出错</p></blockquote></blockquote></li><li><p>lastIndexOf()</p><blockquote><ul><li>返回指定元素在数组中的<strong>最后一个</strong>的索引，如果不存在则返回 -1</li><li>内容判断使用的 <strong>全等(&#x3D;&#x3D;&#x3D;)</strong></li><li>从指定位置开始<strong>逆向查找</strong>（即从后往前找）</li><li>语法：<code>lastIndexOf(searchElement, fromIndex);</code></li><li><code>fromIndex</code>查找的的开始下标，默认值为 <code>arr.length-1</code>,（即从后向前查找整个数组）</li><li>如果 <code>fromIndex</code> 为负值，从指定位置向前查找</li><li>如果 <code>fromIndex</code> <strong>负值的绝对值</strong>大于数组长度，则数组不会被查找，返回-1</li><li>如果 <code>fromIndex</code> <strong>正数的绝对值</strong>大于数组长度，则整个数组都会被查找</li><li><code>fromindex</code>为负时，返回的索引为正索引<blockquote><p>注意：方向是<strong>从右往左</strong>查找，但找的是数组<strong>从左往右</strong>数该元素最后一个的索引，也就是从右往左遇到的第一个</p></blockquote></li></ul><pre><code>var arr = [1, 3, 4, 5, 3, 8, 1];//index不写console.log(arr.lastIndexOf(3)); //4//index为正值console.log(arr.lastIndexOf(1, 1)); //0//index为负值console.log(arr.lastIndexOf(1, -2)); //0//index超过数组长度console.log(arr.lastIndexOf(1, 8)); //6console.log(arr.lastIndexOf(1, -8)); //-1</code></pre></blockquote></li><li><p>includes() 方法</p><blockquote><ul><li>用来判断一个数组<strong>是否包含</strong>一个指定的值</li><li>根据情况，如果包含则返回 <code>true</code>，否则返回 <code>false</code></li><li>查找时，使用的是(<strong>全等</strong>运算&#x3D;&#x3D;&#x3D;)</li><li>语法：<code>includes(searchElement, fromIndex);</code></li><li>查找方向：从左往右</li><li>如果fromIndex超过<code>&gt;=</code>数组长度，直接返回 false</li><li>如果<code>fromindex</code>不写，则默认从下标为<code>0</code>的元素开始查找</li><li>包含起始位置的元素</li></ul><pre><code>var arr = [1, 3, 4, 5, 3, 8, 1];console.log(arr.includes(1)); //trueconsole.log(arr.includes(1, 3)); //trueconsole.log(arr.includes(1, 8)); //falseconsole.log(arr.includes(6)); //falseconsole.log(arr.includes(3, -1)); //falseconsole.log(arr.includes(4, -5)); //true</code></pre></blockquote></li><li><p>应用案例：数组去重</p><blockquote><ul><li>创建一个空数组，如果数组内的元素和新数组的元素不一样，则把该元素放入新数组</li></ul></blockquote></li></ol><blockquote><pre><code>function unique(arr) &#123;  // 如果传入的类型不是数组，啥也不做  if (!Array.isArray(arr)) &#123;    return;  &#125;  var result = [];  for (var i = 0; i &lt; arr.length; i++) &#123;    // if(!~result.indexOf(arr[i]))    if (!result.includes(arr[i])) &#123;      result.push(arr[i]);    &#125;  &#125;  return result;&#125;var arr = [1,1, 2,2,&quot;true&quot;,&quot;true&quot;,true,true,undefined,undefined,null,null,[]，[],NaN,NaN,&quot;NaN&quot;,&#123;&#125;,&#123;&#125;,function () &#123;&#125;,function () &#123;&#125;];  console.log(unique(arr));//这种方式，是没有办法过滤 引用类型的,但针对基本数据类型没有问题</code></pre></blockquote><pre><code>5. 案例：查找元素在数组中所有索引（下标）&gt;- 利用 `indexOf` 方法，返回查找到的元素索引&gt;- 如果返回索引不为`-1`，把索引添加到新数组，&gt;- 则继续从当前索引的**下一个索引位置**开始查找，找到就返回索引继续查找，找不到则停止查找。&gt;```function findIndexs(arr, element) &#123;  var indexArr = [];  var _index = arr.indexOf(element);  // 返回索引不是-1，则继续查找 _index!=-1  //while (~_index)  while (_index!==-1) &#123;    indexArr.push(_index);    _index = arr.indexOf(element, _index + 1);  &#125;  return indexArr;&#125;var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;b&quot;, &quot;b&quot;, &quot;f&quot;, &quot;b&quot;];console.log(findIndexs(arr, &quot;b&quot;));&gt;```### 五、数组拼接与反转|实例方法|描述|是否更改原数组||---|---|---||concat()|方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组|否||reverse()|方法将数组中元素的位置颠倒，并返回该数组;该方法会改变原数组。|是|1. concat()方法&gt;- 用于合并两个或多个数组&gt;- 此方法不会更改现有数组，而是返回一个**新数组**&gt;- concat 返回的新数组是元素的**浅拷贝**&gt;- 也可以像`.push`一样合并基本数据类型&gt;```var arr1 = [1, 2, 3, 4];var arr2 = [5, 6, 7, 8];var arr3 = [9, 10, 11, 12];//合并数组arr1,arr2,arr3var newArr = arr2.concat(arr1, arr3);//在数组最后添加基本数据类型var newArr = arr1.concat(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);//还可以混用var newArr = arr2.concat(&quot;a&quot;, &quot;b&quot;, arr3);console.log(newArr);&gt;```2. reverse()方法&gt;- `reverse()`方法可以将一个数组中的全部项**顺序反过来**显示。&gt;- 它会改变原数组。&gt;```var arr = [1, 2, 3, 4, 5];arr.reverse();console.log(arr); // [5,4,3,2,1]&gt;```&gt;- 与其他方法结合，将字符串进行倒序显示 &gt;```var str = &quot;清晨我上马&quot;;var arr = str.split(&quot;&quot;);arr.reverse();var str2 = arr.join(&quot;&quot;);console.log(str2); // 马上我晨清&gt;```### 六、筛选数组元素|方法|描述|是否更改原数组||---|---|---||filter()|返回所有通过函数测试成功的元素;其返回值为测试成功的元素组成的新数组|不会||find()|返回数组中满足提供的测试函数的第一个元素的值;否则返回`undefined` |不会|&gt;&gt;判断条件都写在return后面，结果为true时才会通过&gt;&gt;- 回调函数`function (element, index, array)`这块相当于一个for循环遍历,`filter\find\forEach`都是如此&gt;``` var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]; arr.filter(function (element, index, array) &#123;   console.log(element + &quot;-&quot; + index + &quot;-&quot; + arr); &#125;); arr.find(function (element, index, array) &#123;   console.log(element + &quot;-&quot; + index + &quot;-&quot; + arr); &#125;); arr.forEach(function (element, index, array) &#123;   console.log(element + &quot;-&quot; + index + &quot;-&quot; + arr); &#125;); //结果都是： //a-0-a,b,c,d,e //b-1-a,b,c,d,e //c-2-a,b,c,d,e //d-3-a,b,c,d,e //e-4-a,b,c,d,e&gt;```1. filter()方法&gt;- 返回所有通过函数测试成功的元素，其返回值为测试成功的元素组成的**新数组**&gt;- 语法：&gt;```// 回调函数filter(callbackFn);filter(callbackFn, thisArg);&gt;// 内联回调函数filter(function (element) &#123;  /* … */&#125;);filter(function (element, index) &#123;  /* … */&#125;);filter(function (element, index, array) &#123;  /* … */&#125;);//完整版filter(function (element, index, array) &#123;  /* … */&#125;, thisArg);&gt;```- **详细解读**&gt;- callbackFn 用来测试数组中每个元素的函数，返回 `true`表示该元素通过测试，保留该元素，`false`则不保留&gt;- callbackFn 函数，接受以下三个参数&gt;   - element 数组中当前正在处理的元素&gt;   - index 正在处理的元素在数组中的索引&gt;   - array 调用了 filter()的数组本身&gt;- thisArg 可选，执行 callbackFn 时，用于 this 的值- 案例：找出数组中所有小于 10 的元素&gt;```// 筛选出所有小于10的元素var arr = [1, 22, 5, 12, 45, 9, 10, 33, 8];var arr2 = arr.filter(function (value) &#123;  return value &lt; 10;&#125;);console.log(arr2); //  [1, 5, 9, 8]&gt;```- 灵活运用判断条件&gt;- 只要结果是true就能通过&gt;- 可以是`return el&gt;10`&gt;- 也可以是布尔类型的：&gt;```var arr = [&quot;bc&quot;, &quot;cad&quot;, &quot;aff&quot;, &quot;scs&quot;];var result = arr.filter(function (el) &#123;  //将数组转换成字符串  var arr = el.split(&quot;&quot;);  console.log(arr);  //查找包含&quot;a&quot;的元素  var boole = arr.includes(&quot;a&quot;);  //返回包含&quot;a&quot;的元素的数组  return boole;&#125;);console.log(result);&gt;```- 自已封装简单版 filter 方法&gt;```// 大于等于10var arr = [1, 3, 68, 33, 5, 9, 34, 55];function filter(arr) &#123;  var arr2 = [];  for (var i = 0; i &lt;= arr.length; i++) &#123;    if (arr[i] &gt;= 10) &#123;      arr2.push(arr[i]);    &#125;  &#125;  return arr2;&#125;console.log(filter(arr));&gt;&gt;/**&gt; * 找到数组中所有满足测试函数条件的元素&gt; * @param arr 查找的数组&gt; * @param fn 测试函数&gt; */function filter(arr, fn) &#123;  var arr2 = [];  for (var i = 0; i &lt;= arr.length; i++) &#123;    // 为真，就添加    if (fn(arr[i])) &#123;      arr2.push(arr[i]);    &#125;  &#125;  return arr2;&#125;// 定义数组var arr = [1, 3, 68, 33, 5, 9, 34, 55];// 筛选出大于等于10的元素var arr2 = filter(arr, function (value) &#123;  return value &gt;= 10;&#125;);console.log(arr2);// 筛选出小于等于10的元素var arr3 = filter(arr, function (value) &#123;  return value &lt; 10;&#125;);console.log(arr3);&gt;```2. find() 方法&gt;- 返回数组中满足提供的测试函数的**第一个元素的值**。否则返回 `undefined`&gt;```// 回调函数find(callbackFn);find(callbackFn, thisArg);// 内联回调函数find(function (element) &#123;  /* … */&#125;);find(function (element, index) &#123;  /* … */&#125;);find(function (element, index, array) &#123;  /* … */&#125;);//完整版find(function (element, index, array) &#123;  /* … */&#125;, thisArg);&gt;```- 详细解读&gt;- callbackFn 用来测试数组中每个元素的函数&gt;- callbackFn 有三个参数&gt;   - element 当前数组中正在遍历到的元素&gt;   - index 当前数组中正在遍历到的索引&gt;   - array 当前调用 find 方法的数组&gt;- 执行回调时用作 this 的对象。- 筛选出小于10的第一个元素&gt;```var arr = [1, 22, 5, 12, 45, 9, 10, 33, 8];var arr2 = arr.find(function (value) &#123;  return value &lt; 10;&#125;);console.log(arr2); //  [1]&gt;```&gt;- 也可以像filter一样，与其他方法结合使用### 七、数组排序|方法|描述|是否更改变原数组||---|---|----||sort()|用于对数组的元素进行排序|是|- 语法&gt;```// 无函数sort();// 内联比较函数  函数可以是匿名的sort(function compareFn(a, b) &#123;  /* … */&#125;);&gt;```1. sort()未指定函数参数&gt;- 当 `sort` 中没有给定参数时，数组中的元素会先被转换为**字符串**，然后比较的时候是按 `Unicode` 编码来进行排序&gt;- 英文字母对应的 Unicode 编码&gt;   - `A~Z` 对应 `65~ 90` 也就是A的Unicode编码是65 、 Z 的Unicode编码是 90&gt;   - `a~z` 对应 `97~122`&gt;   - `0~9` 对应 `48~57`&gt;```var arr = [&quot;A&quot;, &quot;Z&quot;, &quot;b&quot;, 1, 80, 9, 100, 70, &quot;a&quot;];arr.sort();console.log(arr); // [1, 100, 70, 80, 9, &#39;A&#39;, &#39;Z&#39;, &#39;a&#39;, &#39;b&#39;]&gt;```&gt;&gt;在没有函数做为参数时，这种比较本质上是没有办法做数字数组的排序2. sort()指定函数参数&gt;- sort中的函数，可以自拟函数名，也可以是匿名函数&gt;- `a，b `是用于比较的两个元素&gt;- 函数返回值为`a-b`，则数组按**升序**排序，即从小到大&gt;- 函数返回值为`b-a`,则数组按**降序**排序，即从大到小&gt;```sort(function compareFn(a, b) &#123;  return a - b;&#125;);&gt;// sort中的函数，也可以是匿名函数sort(function (a, b) &#123;  return b - a;&#125;);&gt;```- 如何理解：a-b 即升序，b-a 即降序&gt;在之前的数组中我们学过冒泡排序，冒泡排序的原则就是如果相邻的两个数(a,b)比较时&gt;- 如果 a-b 大于 0，交换两者位置，即大的数 a 的放后面，小的 b 放前面，升序&gt;- 如果 b-a 大于 0 ，交换两者位置，即大的数 b 放在前面，小的数 a 放在后面，降序&gt;&gt;所以你可以把这里的 a 和 b 当成数组成**相邻的**两个比较元素&gt;- 如果`compareFn(a, b)`**大于** 0 ，b会被排列到 a 之前。&gt;- 如果`compareFn(a, b)`**小于** 0 ，那么 a会被排列到 b 之前；&gt;- 如果`compareFn(a, b)`**等于** 0 ，a和b的相对位置不变。3. 冒泡排序法封装成函数&gt;```// 封装冒泡排序function bubbleSort(arr, fn) &#123;  // 数组长度  var len = arr.length;  // 当前是否是有序的  var isSorted;  var flag = 0;  // 有序的边界  var sortBorder = len - 1;  // 外层for控制交换轮数  for (var i = 0; i &lt; len - 1; i++) &#123;    // 内层for控制每一轮，元素交换次数处理    isSorted = true; // 有序标记，每轮开始默认为有序，如果一旦发生交换，就会变成flag=false,无序&gt;    for (var j = 0; j &lt; sortBorder; j++) &#123;      if (fn(arr[j], arr[j + 1]) &gt; 0) &#123;        // 交换两元素位置        var tmp; // 用来交换两个变量的中间变量        tmp = arr[j];        arr[j] = arr[j + 1];        arr[j + 1] = tmp;        isSorted = false;        // 把无序列表的边界，更新为最后一次交换元素的位置        flag = j;      &#125;    &#125;    if (!isSorted) &#123;      sortBorder = flag;    &#125;    // 这一轮多次交换下来，flag没有变为false,说明没有发生元素交换，此时数组已是有序的    if (isSorted) &#123;      break; // 退出最外层for循环    &#125;  &#125;&#125;&gt;// 排序数组var arr = [2, 3, 4, 1, 5, 6, 7, 8, 9, 35, 76];bubbleSort(arr, function (a, b) &#123;  return a - b; // 升序&#125;);console.log(arr); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 35, 76]&gt;bubbleSort(arr, function (a, b) &#123;  return b - a; // 降序&#125;);console.log(arr); // [76, 35, 9, 8, 7, 6, 5, 4, 3, 2, 1]&gt;```### 八、forEach数组遍历&gt;- `forEach()`方法对数组的每个元素执行一次给定的函数&gt;- 返回值为`undefined`&gt;- 会更改原数组&gt;```// 回调函数forEach(callbackFn, thisArg);forEach(function (element, index, array) &#123;/* … */&#125;, thisArg);&gt;```&gt;- callbackFn 为数组中每个元素执行的函数，函数带有以下三个参数：&gt;   - element 当前数组中正在遍历到的元素&gt;   - index 当前数组中正在遍历到的索引&gt;   - array `forEach()`方法正在操作的数组&gt;- thisArg可选参数，当执行回调函数`callbackFn`时，用作`this`的值，如果此参数不写，其`callbackFn`函数中this指向全局对象- forEach底层逻辑&gt;```//用forEach方法实现var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;];arr.forEach(function (el, index, arr) &#123;  if (el == &quot;c&quot;) &#123;    arr.splice(index, 1);  &#125;&#125;);console.log(arr);&gt;//底层逻辑就是用for循环遍历function forEach(arr, fn) &#123;  for (var i = 0; i &lt; arr.length; i++) &#123;    //for循环把每个元素拿出来后，要做的操作    fn(arr[i], i, arr);  &#125;&#125;forEach(arr, function (el, index, arr) &#123;  //想做的操作&#125;);&gt;```&gt;- 从性能方面来说，`forEach`比单独用`for循环`来实现是要差的，但差别不大，主要原因是`forEach`没执行一次都要调用一次回调函数&gt;- 但在实际开发中，倾向于用`forEach`，因为性能差别不大，而`forEach`可读性更强### 九、数组相关方法总结|实例方法|描述|是否改变原数组|返回结果||---|----|---|---||push()|将一个或多个元素添加到数组的末尾，并返回该数组的新长度|会|原数组的新长度||pop()|从数组中删除最后一个元素，并返回该元素的值|会|返回被删除元素||unshift()|将一个或多个元素添加到数组的头部，并返回该数组的新长度|会|原数组的新长度||shift()|从数组中删除第一个元素，并返回该元素的值|会|被删除元素||slice()|（查询）：提取原数组的一部分并返回一个新数组|不会|将查询到元素组成的新数组返回||splice()|（新增）：在指定位置插入一项或多项新元素；（删除）：在指定位置删除指定项；（更新）：在指定位置删除指定项，同时在此处添加一项或多项|会|返回被删除元素组成的数组||join()|将一个数组的所有元素以特定的某种字符连接成一个字符串|不会|并返回连接后的字符串||toString()|将数组转换为字符串|不会|返回该字符串||indexOf()|返回在数组中可以找到给定元素的第一个索引，如果不存在，则返回 -1。|不会|返回元素索引或-1||lastIndexOf()|返回指定元素在数组中的最后一个的索引，如果不存在则返回 -1;从指定位置开始逆向查找（即从后往前找）|否|返回指定元素在数组中的最后一个的索引||includes()|用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false|不会|返回值为 true 或 false||concat()|方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组|不会|将合并成的新数组返回||reverse()|方法将数组中元素的位置颠倒，并返回该数组|会|返回置返后的原数组||sort()|对数组中的元素进行排序（降序或升序）|会|返回排序后的原数组||filter|返回所有通过函数测试成功的元素；其返回值为测试成功的元素组成的新数组|不会|返回符合要求的所有元素||find|返回数组中满足提供的测试函数的第一个元素的值；否则返回 undefined (opens new window)|不会|返回符合要求的第一个元素||forEach|forEach()方法对数组的每个元素执行一次给定的函数|会|返回值为undefined|### 十、综合应用案例1. 求数组中每一项的总和、平均数&gt;- `forEach()`方法对数组的每个元素执行一次给定的函数&gt;``` function sum(arr) &#123; var sum = 0; socreArr.forEach(function (el) &#123;   sum += el; &#125;); return sum; &#125; var socreArr = [99, 96, 95, 89, 86, 88, 67, 53, 69, 36]; var result = sum(socreArr); console.log(result); console.log(result / socreArr.length);&gt;```2. 随机样本：请随机从原来数组中取 3 项&gt;- 取随机下标：`Math.random()`&gt;- 过滤数组和数字&gt;   - `Array.isArray()`确定输入的是数组&gt;   - Number转数字，`NaN`永远不等于它自身- 取样后，把原数组中的元素给删除了&gt;- 删除数组中的元素：`splice`&gt;```  function randomArr(arr, k) &#123;  var randomArr = [];  //过滤数组  if (!Array.isArray(arr)) return;  //若转数字后是NaN,则返回0  Number(k) !== Number(k) ? 0 : Number(k);  //如果k大于数组长度，则k等于数组长度  if (k &gt; arr.length) &#123;    k = arr.length;  &#125;  for (var i = 0; i &lt; k; i++) &#123;    //遍历k次，生成k个随机下标,n是每次的随机下标    var n = (Math.random() * arr.length) &gt;&gt; 0;    //将随机下标添加到新数组中    randomArr.push(arr[n]);    //删除已生成的下标,splice包括起始元素    arr.splice(n, 1);  &#125;  return randomArr;&#125;var arr = [2, 1, 5, 8, 6, 9, 4, 3, 7];console.log(randomArr(arr, &quot;5&quot;));&gt;```- 取样后，不动原数组&gt;- 不删除已出现元素，但不能重复出现,用`includes`&gt;```  function randomArr(arr, k) &#123;  var randomArr = [];  //过滤数组  if (!Array.isArray(arr)) return;  //若转数字后是NaN,则返回0  Number(k) !== Number(k) ? 0 : Number(k);  //如果k大于数组长度，则k等于数组长度  if (k &gt; arr.length) &#123;    k = arr.length;  &#125;  for (var i = 0; i &lt; k; i++) &#123;    //遍历k次，生成k个随机下标,n是每次的随机下标    var n = (Math.random() * arr.length) &gt;&gt; 0;    //如果新数组中不包括该随机数，则将该元素加进新数组    if (!randomArr.includes(arr[n])) &#123;      //将随机下标添加到新数组中      randomArr.push(arr[n]);    &#125; else &#123;      i--;    &#125;  &#125;  return randomArr;&#125;var arr = [2, 1, 5, 8, 6, 9, 4, 3, 7];console.log(randomArr(arr, 4));&gt;```2. 手写 Flatten 方法，实现数组的扁平化 (面试题)- 方法1：递归&gt;```var arr = [1, 2, 3, [4, [5], [6]], 7, 8];function flatten(arr) &#123;  var newArr = [];  for (var i = 0; i &lt; arr.length; i++) &#123;    if (Array.isArray(arr[i])) &#123;      // 是数组,递归调用；这一步很关键！      newArr = newArr.concat(flatten(arr[i])); // concat返回新的拼接好的数组    &#125; else &#123;      newArr.push(arr[i]);    &#125;  &#125;  return newArr;&#125;console.log(flatten(arr));&gt;```- 方法2：forEach+递归&gt;```var arr = [1, 2, 3, [4, [5], [6]], 7, 8];function flatten(arr) &#123;  var newArr = [];  arr.forEach(function (el) &#123;    if (Array.isArray(el)) &#123;      // 是数组,递归调用      newArr = newArr.concat(flatten(el)); // concat返回新的拼接好的数组    &#125; else &#123;      newArr.push(el);    &#125;  &#125;);  return newArr;&#125;console.log(flatten(arr));&gt;```</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（五）</title>
      <link href="/2023/12/04/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2023/12/04/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、函数的理解"><a href="#一、函数的理解" class="headerlink" title="一、函数的理解"></a>一、函数的理解</h3><blockquote><ul><li>函数就是语句的<strong>封装</strong>，可以让封装后的代码很方便的被反复使用</li><li>函数具有<strong>一次定义，多次调用</strong>‘的优点</li><li>使用函数，可以<strong>简化代码</strong>，让代码更具有可读性</li></ul></blockquote><p><strong>计算任意两个数之间所有数之和</strong></p><blockquote><ul><li>比如1-10，10-20，20-30 等</li><li>按照之前的学习，我们只能根据初始值和范围写for循环，而且每计算一次，就要写一次 for 循环</li></ul><pre><code>var sum = 0;for (var i = 1; i &lt;= 10; i++) &#123;  sum += i;&#125;console.log(sum); // 55</code></pre></blockquote><p>var sum &#x3D; 0;<br>for (var i &#x3D; 10; i &lt;&#x3D; 20; i++) {<br>  sum +&#x3D; i;<br>}<br>console.log(sum); &#x2F;&#x2F; 165</p><blockquote><pre><code></code></pre></blockquote><blockquote><blockquote><p>有了函数之后，我们就可以实现输入起始的两个数，自动就出来我们想要的结果</p></blockquote></blockquote><h3 id="二、函数的声明和调用"><a href="#二、函数的声明和调用" class="headerlink" title="二、函数的声明和调用"></a>二、函数的声明和调用</h3><blockquote><ul><li>和变量一样，函数必须<strong>先定义</strong>（声明）然后才能使用</li><li>定义一个函数，有两种方式</li></ul></blockquote><ol><li><p>方式1：以<strong>函数声明</strong>的方式-创建一个函数</p><blockquote><ul><li>使用<code>function</code>关键字声明函数，必需全部<strong>小写</strong>，function是 “功能” 的意思</li><li>函数名必须符合<strong>JS标识符命名规则</strong></li><li>( ) 圆括号中是<strong>形参列表</strong>，即使没有形参，也必须书写圆括号</li><li>{ } 大括号里是<strong>函数体语句</strong></li></ul><pre><code>// 声明函数function 函数名() &#123;  // 函数体语句&#125;</code></pre></blockquote><p>function hello() {<br>  console.log(“大家好！”);<br>}</p><blockquote><pre><code></code></pre></blockquote></li><li><p>方式2：以函数<strong>表达式</strong>的方式创建一个函数</p><blockquote><ul><li><code>function()&#123; &#125;</code>是一个<strong>匿名函数</strong>，即<strong>没有函数名</strong>的函数。</li><li>但是我们最后要使用这个函数，所以我们把这个匿名函数赋值给了一个<strong>变量</strong></li><li>后面我们通过这个变量来调用这个函数</li><li>匿名函数，经常以<strong>回调函数</strong>的形式出现</li></ul><pre><code>var 变量 = function () &#123;  // 函数体语句&#125;;</code></pre></blockquote><p>var hello &#x3D; function () {<br>  console.log(“大家好！”);<br>};</p><blockquote><pre><code></code></pre></blockquote></li><li><p>函数的调用</p><blockquote><ul><li>调用函数非常简单，只需在<strong>函数名字&#x2F;变量名后书写圆括号对</strong>即可</li><li>所谓函数的调用，就是执行函数体内的所有语句。<blockquote><p>函数被声明后，是不会自动执行的，只有被调用才会被执行</p></blockquote></li></ul></blockquote></li></ol><blockquote><ul><li>通过方式1声明的函数：</li></ul><pre><code>function hello() &#123;  console.log(&quot;大家好！&quot;);&#125;hello();// 函数定义一次，可以多次调用hello();hello();</code></pre><ul><li>通过方式2声明的函数：</li></ul><pre><code>var hello = function () &#123;  console.log(&quot;大家好！&quot;);&#125;;hello();// 函数定义一次，可以多次调用hello();</code></pre></blockquote><ol start="4"><li>函数类型判断<blockquote><ul><li>利用 typeof 来检测函数类型，得到 function</li></ul><pre><code>function fn() &#123;&#125;typeof fn;console.log(typeof fn); // &#39;function&#39;console.log(typeof fn === &quot;function&quot;);//true</code></pre></blockquote></li></ol><h3 id="三、函数的参数"><a href="#三、函数的参数" class="headerlink" title="三、函数的参数"></a>三、函数的参数</h3><ol><li>函数参数分类<table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>形参</td><td>在<strong>声明函数</strong>时，我们可以在函数名后面的小括号（）中添加一些参数，这些参数被称为形参</td></tr><tr><td>实参</td><td>在<strong>调用函数</strong>时，我们可以在函数名后面的小括号（）中，添加的参数，这些参数被称为实参</td></tr></tbody></table></li></ol><blockquote><ul><li>在函数的()中可以指定<code>&gt;=0</code>个参数，参数可以是<strong>任意类型</strong></li><li>多个参数之间用<code>,逗号</code>隔开</li></ul><pre><code>// 函数声明，这里的a,b被称为形参function sum(a, b) &#123;  console.log(a + b);&#125;</code></pre></blockquote><p>&#x2F;&#x2F; 调用函数<br>sum(1, 2); &#x2F;&#x2F; 这里的 1，2 被称为 实参<br>sum(2, 3); &#x2F;&#x2F; 这里的 2，3 被称为 实参</p><blockquote><pre><code></code></pre></blockquote><ol start="2"><li>形参与实参的关系<blockquote><ul><li>在函数调用时，<strong>实参</strong>会将其值，<strong>赋值</strong>给到函数声明时对应的<strong>形参</strong>。</li><li>实参与形参在赋值时，是<strong>一一对应</strong>的顺序，所以顺序不要弄错<br><strong>我们以下面这个代码的执行过程来作为讲解</strong></li></ul><pre><code>// 函数声明，这里的a,b被称为 形参function sum(a, b) &#123;  console.log(a + b);&#125;// 调用函数，sum(1, 2); // 这里的 1，2被称为 实参</code></pre></blockquote></li></ol><blockquote><ul><li>代码从上往下执行</li><li>遇到<code>sum(1,2)</code>被调用，相当于就要<strong>开始执行</strong>sum函数。</li><li>在执行代码前，还有一个<strong>预解析</strong>的过程，这个时候，会根据形参个数，来创建对应的变量，<strong>接收</strong>传过来的实参的值。相当于如下代码：</li></ul><pre><code>function sum() &#123;  var a = 1;  var b = 2;  console.log(a + b);//3&#125;</code></pre></blockquote><ol start="3"><li>实参与形参个数不同时<br><strong>情况1：当实参个数 &gt; 形参个数时</strong><blockquote><ul><li>对函数本身的功能<strong>并没有任何的影响</strong></li><li>实参和形参一一对应，多余的实参没有对应的形参接应它，但也不会有什么影响</li></ul></blockquote></li></ol><p><strong>情况2：当实参个数 &lt; 形参个数时</strong></p><blockquote><ul><li>会引发报错，最终得不到想要的结果</li><li>因为如果对应的形参没有接受到对应实参的值，则默认值是<code>undefined</code></li></ul><pre><code>// a,b,c 是形参function sum(a, b, c) &#123;  // 这里的c没有接受任何值，则默认值是undefined，undefined 进行任何运算结果都是 NaN  var sum = a + b + c;  console.log(sum);&#125;</code></pre></blockquote><p>&#x2F;&#x2F; 2,5 是实参<br>sum(2, 5); &#x2F;&#x2F; NaN</p><blockquote><pre><code>&gt;在实际开发中，实参和形参尽量相同，否则会引发报错或 NaN</code></pre></blockquote><p><strong>总结：形参和实参</strong></p><table><thead><tr><th>参数个数</th><th>输出结果</th></tr></thead><tbody><tr><td>实参 &#x3D; 形参</td><td>正常输出结果</td></tr><tr><td>实参 &gt; 形参</td><td>正常输出结果</td></tr><tr><td>实参 &lt; 形参</td><td>形参默认值为undefined，多出的形参没有对应实参，则最后得不到想要的结果</td></tr></tbody></table><ol start="4"><li>参数默认值<blockquote><ul><li>如果实参的个数小于形成，那函数在调用后，则会报错，或得不到想要的结果。那有没有办法可以规避这种问题呢 ？有，就是我们接下来要讲到的参数的默认值。</li></ul></blockquote></li></ol><blockquote><ul><li>在函数<strong>声明时</strong>，我们可以给<strong>形参赋值</strong>，这个值我们称为参数的默认值</li><li>如果在函数调用时，<strong>没有</strong>传入对应的实参，则参数值就以默认值代替</li><li>如果<strong>传入了</strong>对应的实参，参数值就以实参传过来的值为准。</li></ul></blockquote><p><strong>方式1：</strong></p><blockquote><pre><code>function sum(a=0,b) &#123;    console.log(a + b);&#125;sum(); // NaN  没有对应实参，则 采用默认值 a=0,b=undefined ,即a+b=NaNsum(1); // NaN 只传了第1个实参，则a=1,b=undefined，即a+b=NaNsum(1, 2); // 3 传入2个实参，则a=1,b=2,即a+b=3sum(,2); // 报错</code></pre><blockquote><ul><li>注意形参与实参在接受值时，是一一对应关系</li><li>绝对不要这样写：<code>sum(,2);</code></li></ul></blockquote></blockquote><p><strong>方式2：</strong></p><blockquote><pre><code>// 形参a，b同时赋初始值function sum(a, b) &#123;  // a,b 如果没有值，则默认为undefined，undefined转boolean是false  a = a || 0; // a有值，则用a的值，没值用0代替  b = b || 0; // b有值，则用b的值，没值用0代替  console.log(a + b);&#125;</code></pre><blockquote><p>形参，在函数内部<strong>不需要</strong>用 <code>var</code> 声明，直接使用就可以</p><ul><li>注意场景：当a等于布尔值为<code>false</code>的值时，不适合用该方法，例如：null、undefined、””</li></ul></blockquote></blockquote><ol start="5"><li>案例1：计算任意两个数之间所有数之和<blockquote><ul><li>首先要<strong>判断</strong>输入的<strong>是否是数字</strong>，如果不是数字，则把参数默认值设为 0</li><li>然后要<strong>判断两个数的大小</strong>，<strong>for 循环</strong>遍历两个数之间的所有数，用<strong>累加器</strong>累加</li><li>最后输出累加器的值。</li></ul></blockquote></li></ol><p><strong>知识点1：</strong></p><blockquote><p><code>条件表达式 ? 表达式1 : 表达式2;</code><br><strong>执行流程：</strong></p><ul><li>首先对条件表达式进行求值</li><li>如果条件表达式的值为 true，则执行语句 1，并返回执行结果</li><li>如果条件表达式的值为 false，则执行语句 2，并返回执行结果</li></ul></blockquote><p><strong>知识点2：</strong></p><blockquote><p>判断是否为数字</p><ul><li><code>typeof</code>的值为<code>number</code></li><li><code>NaN</code>为不是数字的数字类型，所以typeof筛不掉它</li><li><code>isNaN</code>：判断这个参数是否“不是数值”<blockquote><p>所以数字同时满足<code>typeof a === &quot;number&quot;</code>和<code>!isNaN()</code>为true;</p></blockquote></li></ul></blockquote><blockquote><pre><code>function sum(a, b) &#123;  // 如果a是数字，则返回a，否则返回0  a = typeof a === &quot;number&quot; &amp;&amp; !isNaN(a) ? a : 0;  // 如果b是数字，则返回b，否则返回0  b = typeof b === &quot;number&quot; &amp;&amp; !isNaN(b) ? b : 0;  var sum = 0;  if (a &gt;= b) &#123;    for (var i = b; i &lt;= a; i++) &#123;      sum += i;    &#125;  &#125; else &#123;    for (var i = a; i &lt;= b; i++) &#123;      sum += i;    &#125;  &#125;  console.log(sum);&#125;sum(-1, -2); // -3sum(1, 2); // 3sum(-1, 5); // 14sum(); // 0sum(&quot;-1&quot;, 0); // 0</code></pre></blockquote><p><strong>总结：判断是否为纯数字</strong></p><blockquote><p>方法1：</p><ul><li>先用<code>Number</code>或者<code>+</code>转换成数字类型<ul><li>缺陷：<code>&quot;&quot;</code>会被转成0</li></ul></li><li>用<code>isNaN</code>判断是不是数字，<code>NaN</code>为不是数字的数字类型，可以过滤<code>NaN</code></li></ul></blockquote><blockquote><p>方法2：</p><ul><li>同时满足”数字类型”和数字</li><li>typeof() &#x3D;&#x3D;&#x3D; “Number”，typeof 返回值的类型都是字符串类型，所以要加<strong>双引号</strong></li><li>isNaN()为<code>false</code></li></ul></blockquote><ol start="6"><li><p>案例2:写一个函数，该函数对用户输入的用户名进行验证</p><blockquote><ul><li>当用户输入的用户名&lt;4 位数时，弹出提示“用户名不能小于 4 位数”</li><li>当用户输入的用户名&gt;&#x3D;4 位并且&lt;&#x3D;8 位时，弹出提示”用户名格式正确”</li><li>当用户输入的用户名&gt;8 位数时，弹出提示“用户名不能大于 8 位数”</li></ul><pre><code>function userMatch(username) &#123;  if (username.length &lt; 4) &#123; alert(&quot;用户名不能小于4位&quot;);  &#125; else if (username.length &lt;= 8) &#123; alert(&quot;用户名格式正确&quot;);  &#125; else &#123; alert(&quot;用户名不能大于8位&quot;);  &#125;&#125;var username = prompt(&quot;请输入用户名&quot;);userMatch(username);</code></pre></blockquote></li><li><p><code>arguments</code> 实参列表</p><blockquote><p>如果我们在函数声明时，<strong>不确定</strong>我们到底要几个<strong>形参数</strong>，而希望在函数调用时，传递几个实参，就接受几个实参。这个时候 <code>arguments</code> 就派上用场了。</p><ul><li>arguments实际上是当前函数的一个<strong>内置对象</strong>，函数调用时创建</li><li>函数内arguments表示它接收到的实参列表</li></ul></blockquote></li></ol><blockquote><p>arguments 是一个<strong>类数组对象</strong>，所谓的类数组对象，具有以下特点：</p><ul><li>具有 <code>length</code> 属性</li><li>可以用<code>[]</code>方括号书写，用下标方式访问对象中属性值，下标从 <code>0</code> 开始</li><li><strong>不具备</strong>数组的所有方法，如<code>push,pop,unshift,shift</code>等方法，arguments 都没有</li></ul></blockquote><blockquote><blockquote><p>不管用户传入多少个实际参数，永远能够计算他们的和</p></blockquote><pre><code>function sum() &#123;  var sum = 0;  for (var i = 0; i &lt; arguments.length; i++) &#123;    sum += arguments[i];  &#125;  console.log(&quot;所有参数的和是：&quot; + sum);&#125;</code></pre></blockquote><p>sum(11, 22, 33, 44, 55); &#x2F;&#x2F; 165<br>sum(66); &#x2F;&#x2F; 66<br>sum(-3, 9); &#x2F;&#x2F; 6</p><blockquote><pre><code></code></pre></blockquote><ol start="8"><li>arguments 的注意事项<blockquote><ul><li>函数内<code>arguments</code>表示它接收到的<strong>实参</strong>列表</li><li><code>arguments</code>对象的值<strong>不反映</strong>参数的<strong>默认值</strong></li></ul><pre><code>function sum(a = 1, b = 2) &#123;  console.log(arguments);//[3,5, callee:(...) ,Symbol(Symbol.iterator): ƒ]  console.log(arguments[0]);//3  console.log(arguments[1]);//5&#125;sum(3, 5);sum();</code></pre></blockquote></li></ol><p><strong>参数的作用</strong></p><blockquote><ul><li>如果函数体内的某些值不能固定，我们可以在调用函数时，通过实参的形式传递不同值进去。</li><li>如上面代码中，求两个数的和，这两个数 a,b 的值是不固定的，就可以通过传参来解决</li></ul></blockquote><p><strong>函数的封装</strong></p><blockquote><ul><li>所谓函数的封装，就是把具有一定功能的代码，通过<strong>函数的形式</strong>封装起来</li><li>当我们需要使用的时候，只需要调用下这个函数就可以。</li></ul></blockquote><ol start="9"><li>类数组转换为数组<blockquote><p>arguments 是一个<strong>类数组</strong>对象，所谓的类数组对象，具有以下特点</p><ul><li>肯定是一个<strong>对象</strong>，同时具有 <code>length</code> 属性</li><li>可以用<code>[]</code>方括号，书写下标方式访问对象中属性值，下标从 <code>0</code> 开始</li><li>它<strong>并不拥有全部</strong>的 Array 对象的操作方法，如push,pop,unshift,shift等方法，arguments 都没有<blockquote><p>类数组是一个对象，他是 <code>Object</code> 的实例，而数组是 <code>Array</code> 的实例，所以类数组并不具有 Array 对象的方法<br>但类数组和数组，他们的<strong>原型终点</strong>都指向 <code>Object</code> 的原型，所以他们都具有 <code>Object</code> 对象上的方法</p></blockquote></li></ul><pre><code>function fn() &#123;  var isArr = Array.isArray(arguments);  console.log(isArr); // false  不是数组  console.log(typeof arguments); // object  是一个对象  console.log(arguments instanceof Object); // true 是Object的实例&#125;fn();</code></pre></blockquote></li></ol><p><strong>类数组转换为数组的几种方法：</strong></p><blockquote><blockquote><p>我们想要类数组拥有数组的相关方法，则可以把类数组转换为数组再操作。</p></blockquote><ul><li>for 循环遍历</li></ul><pre><code>// for循环遍历function fn() &#123;  var arr = [];  // 将arguments中元素取出，放到一个新数组中，后面操作的都是这个新数组  for (var i = 0; i &lt; arguments.length; i++) &#123;    arr[i] = arguments[i];  &#125;  // 接下来操作arr这个数组就好  arr.push(&quot;A&quot;);  console.log(arr); // [1, 2, 3, &#39;A&#39;]&#125;fn(1, 2, 3);</code></pre><blockquote><p>注意，并不是直接把类数组转换成数组，而是定义一个新数组，将类数组的元素取出来放入新数组中，操作新数组</p></blockquote></blockquote><blockquote><ul><li>使用数组的 <code>slice() </code>和 <code>concat() </code>方法</li></ul><pre><code>function fn() &#123;  // 本质是把arguments中元素遍历后放到一个新数组中，换成后将新数组返回。  var arr = Array.prototype.slice.call(arguments);  // var arr = Array.prototype.concat.apply([], arguments);  arr.push(&quot;A&quot;);  console.log(arr);  console.log(arguments); // arguments并没有做任何改变&#125;fn(1, 2, 3);</code></pre></blockquote><blockquote><ul><li>Array.from：该静态方法从可迭代或类数组对象创建一个新的浅拷贝的数组实例。</li><li>Array.apply</li></ul><pre><code>// 创建一个类数组对象var obj = &#123;  length: 2,  0: 1,  1: 2,&#125;;// var arr = Array.from(obj);var arr = Array.apply(null, obj);arr.push(&quot;A&quot;);console.log(arr);</code></pre></blockquote><p><strong>常见的类数组有</strong></p><blockquote><ul><li>arguments、NodeList，HTMLCollection 、DOMTokenList 等<blockquote><p><strong>特别注意</strong></p><ul><li>字符串，有 <code>length</code> 属性，也可以<code>[]</code>括号的方式访问元素，但是他<strong>不是一个对象</strong>，所以他不是类数组。</li></ul></blockquote></li></ul></blockquote><ol start="10"><li>案例：编写一个函数，根据输入的参数，在页面输出所有参数相加的公式<blockquote><ul><li><code>fn(1)</code> 得到 <code>0+1=1</code></li><li><code>fn(1,2)</code> 得到 <code>1+2=3</code></li><li><code>fn(1,2,3)</code> 得到 <code>1+2+3=6</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拼接字符串</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>sum <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//累加器</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  str <span class="token operator">=</span> <span class="token string">"0+"</span> <span class="token operator">+</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//只有一个数时</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  str <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//非末尾数时</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  str <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//最后一位数，不需要带+号</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0+1=1</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1+2=3</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1+2+4=7</span></code></pre></blockquote></li></ol><h3 id="四、函数返回值"><a href="#四、函数返回值" class="headerlink" title="四、函数返回值"></a>四、函数返回值</h3><blockquote><ul><li>函数体内可以使用<code>return</code>关键字来返回<strong>函数的返回值</strong></li><li><code>return</code>可以返回<strong>任意类型的值</strong>，即函数返回值可以是任意类型，但只能返回一个值</li><li><code>return</code>后面的值，就是函数调用执行后的返回值</li></ul><pre><code>function sum(a, b) &#123;  return a + b;&#125;var result = sum(1, 3);console.log(result); // 4</code></pre></blockquote><blockquote><ul><li>return 后面只能返回 1 个值，如果多个值，则以最后一个为准</li></ul><pre><code>function fn() &#123;  return 1, &quot;A&quot;, [1, 2, 3];&#125;console.log(fn()); // [1, 2, 3]</code></pre></blockquote><blockquote><ul><li>函数里没有<code>return</code> 或 <code>return ;</code> ，则函数的返回值是<code>undefined</code>;</li></ul><pre><code>function fn() &#123;  console.log(&quot;没有返回值&quot;);&#125;console.log(fn());//没有返回值//undefined</code></pre></blockquote><blockquote><ul><li>函数的返回值，可以被一个变量接收，这个变量可以参与后续的使用<blockquote><p>return 只能出现在函数中，出现在其它地方会报错</p></blockquote></li></ul></blockquote><ol><li>遇见 <code>return</code> 即<strong>退出</strong>函数<blockquote><ul><li>函数中<code>return</code>语句<strong>之后</strong>的内容，是不会被执行的</li><li><code>return</code>相当于<strong>立即退出</strong>函数</li><li><code>return</code>只能出现在<strong>函数体</strong>中</li></ul></blockquote></li></ol><blockquote><blockquote><p>只有第一个<code>console.log(result);</code>会被执行</p></blockquote><pre><code>function sum(a, b) &#123;    console.log(&quot;return前内容&quot;);    return a + b;    console.log(result);   &#125;  var result = sum(1, 3);  console.log(result);   //return前内容  //4</code></pre></blockquote><blockquote><blockquote><p>遇到return 立即退出函数体</p></blockquote><pre><code>function max(a, b) &#123;  if (a &gt; b) return a;  return b;&#125;console.log(max(12, 5)); // 12console.log(max(5, 6)); // 6</code></pre></blockquote><ol start="2"><li><p>return 与 if 的结合</p><blockquote><ul><li>结合if语句的时候，如果if语句体中<strong>只有一条</strong>语句，不需要写<code>&#123; &#125;</code><br><strong>题目：请编写一个函数，判断一个数字是否是偶数</strong></li></ul><pre><code>function checkEven(n) &#123;  // if(n % 2 == 0)&#123;  //   return true;  // &#125;  // return false;</code></pre></blockquote><p>  &#x2F;&#x2F; 单行语句，也可以省略{} ,在实际工作中类似写法很常见<br>  if (n % 2 &#x3D;&#x3D; 0) return true;<br>  return false;<br>}</p><blockquote></blockquote><p>var result &#x3D; checkEven(5);<br>console.log(result); &#x2F;&#x2F; false</p><blockquote><pre><code></code></pre></blockquote></li><li><p>return 与循环语句结合</p><blockquote><ul><li>return 可以在函数体中与 <code>if</code> 语句，<code>循环语句</code>结合使用<br><strong>题目：</strong></li><li>找出数组<code>[200,500,900,1200,1500]</code>中比600大的第一个值出现的位置，并将其返回。</li></ul><pre><code>var arr = [200, 500, 900, 1200, 1500];  function firstIndex(n) &#123;   for (var i = 0; i &lt; arr.length; i++) &#123;     if (arr[i] &gt;= n) return i;   &#125; &#125;  var _index = firstIndex(600);  console.log(_index);</code></pre></blockquote></li><li><p>return、break、continue 三者区别</p><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>break</td><td>在循环语句中使用，结束当前循环体（如 for 循环，while 循环）</td></tr><tr><td>continue</td><td>在循环语句中使用，跳出本次循环，继续执行下一次循环（如：for 循环，while 循环）</td></tr><tr><td>return</td><td>return 关键 字，只能出现在函数体中，不仅能退出循环，退出函数体，还能将 return 语句中的值返回，其返回值为函数返回值</td></tr></tbody></table></li></ol><blockquote><ul><li>break 退出当前 for 循环</li></ul><pre><code>function fn() &#123;  for (var i = 0; i &lt; 10; i++) &#123;    if (i == 3) &#123;      break;    &#125;    console.log(i);  &#125;  console.log(&quot;break,continue退出时，我会出来&quot;);&#125;fn();//0//1//2//break,continue退出时，我会出来</code></pre></blockquote><blockquote><ul><li>continue 跳出本次循环，继续执行下一次循环</li></ul><pre><code>function fn() &#123;  for (var i = 0; i &lt; 10; i++) &#123;    if (i == 3) &#123;      continue;    &#125;    console.log(i);  &#125;  console.log(&quot;break,continue退出时，我会出来&quot;);&#125;fn();//0 1 2 4 5 6 7 8 9//break,continue退出时，我会出来</code></pre></blockquote><blockquote><ul><li>return 不仅能退出循环，<strong>退出函数体</strong></li></ul><pre><code>function fn() &#123;  for (var i = 0; i &lt; 10; i++) &#123;    if (i == 3) &#123;      return;    &#125;    console.log(i);  &#125;  console.log(&quot;break,continue退出时，我会出来&quot;);&#125;fn();//0 1 2</code></pre></blockquote><h3 id="五、函数作为参数"><a href="#五、函数作为参数" class="headerlink" title="五、函数作为参数"></a>五、函数作为参数</h3><ol><li>函数做为参数的应用<blockquote><ul><li>函数作为函数的参数，在实际的开发中经常用到，特别是我们常用的各种API（那些封装好的函数就叫做API），其参数经常是一个函数。</li><li>所以理解函数做为函数的参数，在内部是如何处理的，对我们学习API方法是非常用帮助的。</li></ul></blockquote></li></ol><ul><li><p>函数fn2作为函数fn的参数，函数fn2不带参数时</p><blockquote><pre><code>// 声明一个函数，其参数a也是一个参数function fn(a) &#123;a(); // 内部执行函数a&#125;// 声明一个函数function fn2() &#123;console.log(&quot;我是在fn的内部被调用&quot;);&#125;// 调用fn函数，把函数fn2作为fn函数的参数fn(fn2);</code></pre></blockquote></li><li><p>函数fn2 作为函数fn的参数，函数fn2带参数时（非常重要，一定要掌握）</p><blockquote><pre><code>// 声明一个函数，其参数a是一个函数function fn(a) &#123;a(2, 4); // 调用函数&#125;// 声明一个函数function fn2(a, b) &#123;console.log(a + b);&#125;// 调用fn函数，把函数fn2作为fn函数的参数fn(fn2); // 6</code></pre></blockquote><p>&#x2F;&#x2F; fn(fn2(2,4));   错误的用法</p><blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><blockquote><p>初学常见错误</p></blockquote><ul><li>函数带参数时，常会引发这种错误的使用<code>fn(fn2(2,4))</code></li><li>这里的<code>fn2(2,4)</code>被调用，返回值为<code>undefined</code>，相当于传过去的实参是<code>undefined</code>(因为没有return)</li><li><strong>切记：</strong> 函数做为参数，是没有办法把实参传过去，实参只能在函数调用的时候传递</li></ul></blockquote><ol start="2"><li>手写一个函数，返回数组中最大值或最小值</li></ol><ul><li><p>写一个函数，返回数组中最大值</p><blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//声明函数find(arr)</span> <span class="token keyword">function</span> <span class="token function">find1</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">var</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//max &lt; arr[i]</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">return</span> max<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//遍历之后返回最大值</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//声明数组</span> <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用函数</span> <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">find1</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li><li><p>写一个函数，返回数组中最小值</p><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">find2</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">var</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// min > arr[i]</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     min <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">return</span> min<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">find2</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li></ul><blockquote><blockquote><p>我们对比以上两个函数会发现：</p></blockquote><ul><li>他们的实现除了<code>if (max &lt; arr[i])</code>和<code>if (min &gt; arr[i])</code>不一样，其它全一样</li><li>那我们是不是可以写一个函数，把<code>max</code>和<code>arr[i]</code>作为函数的参数，让用户来决定输出最大值还是最小值</li></ul></blockquote><ul><li>根据函数参数，来决定返回数组中最大值，还是数组中最小值<blockquote><ul><li>用不同函数作为参数</li></ul><pre><code>function minmax(arr, fn) &#123; var value = arr[0]; for (var i = 1; i &lt; arr.length; i++) &#123;   // fn1:max-arr[i] &lt; 0,a-b&lt;0   // fn2:arr[i]-min &lt; 0,b-a&lt;0   if (fn(value, arr[i]) &lt; 0) &#123;     value = arr[i];   &#125; &#125; return value; &#125; var arr = [1, 4, 5, 6, 2, 40, 39, 58]; function fn1(a, b) &#123; return a - b; &#125; function fn2(a, b) &#123; return b - a; &#125; var max = minmax(arr, fn1); var min = minmax(arr, fn2); console.log(max, min);</code></pre></blockquote></li></ul><ol start="3"><li>手写一个 filter 函数<blockquote><ul><li>函数功能： 实现返回数组中所有大于&#x2F;小于 n 的元素，返回值为所有满足条件的元素组成的数组</li></ul></blockquote></li></ol><blockquote><blockquote><p>返回<strong>大于10</strong>的元素</p></blockquote><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">filter1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// arr[i]-value>0</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       arr2<span class="token punctuation">[</span>arr2<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> arr2<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">filter1</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><blockquote><blockquote><p>返回<strong>小于10</strong>的值</p></blockquote><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">filter2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// value-arr[i]>0</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       arr2<span class="token punctuation">[</span>arr2<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> arr2<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">filter2</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><blockquote><blockquote><p>封装成方法：</p></blockquote><pre><code>function filter(arr, fn) &#123;   var arr2 = [];   var len = arr.length;   for (var i = 0; i &lt; len; i++) &#123;     // value-arr[i]&gt;0     if (fn(arr[i], value) &gt; 0) &#123;       arr2[arr2.length] = arr[i];     &#125;   &#125;   return arr2; &#125; function fn1(a, b) &#123;   // a=arr[i],b=value   return a - b; &#125; function fn2(a, b) &#123;   // a=arr[i],b=value   return b - a; &#125; //测试：改变value、arr，选择范围 //   比10更大的 var arr1 = [1, 15, 6, 10, 12, 13, 9]; var value = 10; var moreMax = filter(arr1, fn1); console.log(moreMax); //   比8更小的 var value = 8; var moreMin = filter(arr1, fn2); console.log(moreMin);</code></pre></blockquote><ol start="4"><li>函数作为参数的常见 API<blockquote><ul><li>在后期的学习中，我们经常会碰到方法的参数是一个函数，所以这个点一定要理解透。<blockquote><p>学好一个 API，本质就是掌握以下三点：</p><ul><li>这个 <code>API</code> 方法的<strong>主要功能</strong>是什么。</li><li>作为<strong>函数参数的函数</strong>，他的功能是什么，他的参数是什么，有什么用。</li><li>了解 API 方法，<strong>内部</strong>大概是如何实现的。</li></ul></blockquote></li></ul></blockquote></li></ol><blockquote><ul><li>以下是数组中常见的方法，其参数是一个函数</li></ul><pre><code>// 排序函数sort(function(a,b)&#123;    return a-b;&#125;)</code></pre></blockquote><p>&#x2F;&#x2F; 返回数组中满足条件的元素组成一个新数组（过滤数组中不满足条件的）<br>filter(function(element, index, array) {<br>    return element &gt;10;<br>}</p><blockquote></blockquote><p>&#x2F;&#x2F; 返回满足条件的 第一个元素<br>find(function(element) {<br>    return element &gt;10;<br>})</p><blockquote><pre><code></code></pre></blockquote><blockquote><pre><code>// 定义数组var arr = [1, 3, 34, 5, 20, 68, 56];</code></pre></blockquote><p>&#x2F;&#x2F; 返回数组中所有大于10的元素组成的新数组<br>var result &#x3D; arr.filter(function (value) {<br>  return value &gt; 10;<br>});<br>console.log(result); &#x2F;&#x2F; [34, 20, 68, 56]</p><blockquote></blockquote><p>&#x2F;&#x2F; 返回数组中第一个大于10的元素<br>var result2 &#x3D; arr.find(function (value) {<br>  return value &gt; 10;<br>});<br>console.log(result2); &#x2F;&#x2F; 34</p><blockquote></blockquote><p>&#x2F;&#x2F; 数组升序排序<br>arr.sort(function (a, b) {<br>  return a - b; &#x2F;&#x2F; a-b 升序  b-a 降序<br>});<br>console.log(arr); &#x2F;&#x2F;  [1, 3, 5, 20, 34, 56, 68]</p><blockquote><pre><code></code></pre></blockquote><p><strong>强烈建议</strong></p><blockquote><ul><li>在学习相关 API 时，如果 API 中的参数是一个函数，可以尝试自己去实现这个方法。</li><li>只有这样，你未来在应用这个 API 时，才能保持最大的灵活性，把优势发挥到最大。</li></ul></blockquote><h3 id="六、作用域和作用域链"><a href="#六、作用域和作用域链" class="headerlink" title="六、作用域和作用域链"></a>六、作用域和作用域链</h3><blockquote><p>以下关于作用域和作用域链，我们并不涉及底层执行原理，底层执行原理在对象讲完后再讲。<br><strong>作用域：</strong></p><ul><li>可以理解为一套规则，这套规则规定了变量的作用范围。在 <code>JS</code> 中我们就是根据这套规则来查找变量的。</li></ul></blockquote><ol><li>作用域的分类<blockquote><p>JS 中有 3 种类型作用域：全局作用域、函数作用域、块级作用域（ES6 中新增）<br><strong>全局作用域：</strong></p><ul><li>直接编写在<code>&lt;script&gt;</code>标签中的<code>JS</code>代码<strong>或</strong>单独的<code>JS</code> 文件中代码，都是在全局作用域</li><li>声明在全局作用域中的变量为<strong>全局变量</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ul><li>a是全局变量，fn和fn2是全局变量也称全局函数</li></ul></blockquote></li></ol><p><strong>函数作用域：</strong></p><blockquote><ul><li>函数作用域，也称为局部作用域，所有写在<strong>函数内部</strong>的代码，就是在函数作用域中。</li><li>声明在函数作用域中的变量为<strong>局部变量</strong></li></ul><pre><code>var a = 2;  function fn() &#123;&#125;  function fn2() &#123;    var b = 3;    function fn3() &#123;      console.log(&quot;fn3中&quot;);    &#125;  &#125;</code></pre><ul><li>fn2函数体中的变量 b，函数fn3 都是在函数作用域中</li></ul></blockquote><p><strong>块级作用域</strong>： </p><blockquote><ul><li>使用 let 或 const 关键字声明的变量，会形成块级作用域，暂不做介绍，等学到 ES6 时再讲</li></ul></blockquote><ol start="2"><li>作用域中变量访问权限<blockquote><ul><li>在<strong>全局</strong>作用域中，是<strong>没有办法</strong>访问到<strong>函数</strong>作用域中的变量（局部变量）（除闭包外）</li></ul><pre><code>var a = 2; // 全局作用域中function fn() &#123;  var b = 3; // 函数作用域中&#125;// 全局作用域是不能访问函数作用域中变量console.log(b); // Uncaught ReferenceError: b is not defined</code></pre></blockquote></li></ol><blockquote><ul><li>在<strong>函数</strong>作用域中，是<strong>可以</strong>访问全局作用域中的变量（全局变量）</li></ul><pre><code>var a = 2; // 全局作用域function fn() &#123;  var b = 3; // 函数作用域  console.log(a); // 2  函数作用域，是可以访问全局作用域中的变量&#125;fn();</code></pre></blockquote><ol start="3"><li>作用域链<blockquote><ul><li>当在一个函数内部嵌套一个函数时，就会发生作用域的嵌套。其<strong>内部函数</strong>可以访问到<strong>外层函数</strong>和<strong>全局作用域</strong>中的变量，其就是沿着作用域链<strong>一层一层</strong>来查找的。</li><li>你可以把作用域理解为，当函数发生嵌套时，内层函数会沿着嵌套的作用域一层层往外查找变量，这种查找方式就好比作用域形成了一个链条，故称为作用域链查找。</li></ul></blockquote></li></ol><ul><li><p><strong>作用域链查找规则</strong></p><blockquote><ul><li>在函数作用域中，操作一个变量时，会由当前函数作用域向外层作用域寻找变量</li><li>如果在<strong>当前作用域</strong>中能找到，就直接使用</li><li>如果找不到就向<strong>上一层</strong>作用域中寻找，找到就直接使用</li><li>如果一直找到<strong>全局作用域</strong>中依然找不到，则会报错。</li></ul><pre><code>var a = 1;function fn() &#123;var b = 2;console.log(a); // 1function fn2() &#123;  var c = 3;  console.log(b); // 2  console.log(c); // 3&#125;fn2();&#125;fn();</code></pre></blockquote><p>&#x2F;&#x2F; 代码从上往下执行，当fn()被执行后，就会执行fn函数体中的代码，当执行到console.log(a)时，在当前函数作用域中，没有变量a，其就会往fn函数的外层作用域，即全局作用域中去查找，找到a&#x3D;1,然后在控制台打印1<br>&#x2F;&#x2F; 接着执行fn2(),当执行到console.log(b)，他会先在当前作用域中找，找不到，则往外层作用域中找，最后在fn函数作用域中找到，b&#x3D;2,直接使用值，在控制台输出2<br>&#x2F;&#x2F; 接着执行console.log(c),首先在当前作用域找，找到了c&#x3D;3，则直接在控制台输出3</p><blockquote><pre><code></code></pre></blockquote></li><li><p><strong>遮蔽效应</strong></p><blockquote><ul><li>所谓的遮蔽效应是指，如果函数中定义了和全局同名的变量，则<strong>函数内</strong>的变量会将全局的变量“遮蔽”</li></ul><pre><code>var a = 2;function fn() &#123;var a = 3;console.log(a); // 3&#125;fn();</code></pre></blockquote></li><li><p><strong>形参也是局部变量</strong></p><blockquote><pre><code>var a = 12;function fn(a) &#123;  //形参相当于 var a;  console.log(a); // 8&#125;fn(8);console.log(a); // 12</code></pre></blockquote></li><li><p><strong>特殊的全局变量</strong></p><blockquote><ul><li><strong>非严格模式</strong>下,在函数里没有用 <code>var</code> 关键字声明的变量，是<strong>全局变量</strong> (但严格模式下会报错)</li></ul><pre><code>function fn() &#123;a = 4;&#125;fn(); // 函数调用后，a全局变量会被创建console.log(a, window.a); // 4 4</code></pre></blockquote></li></ul><blockquote><pre><code>function fn() &#123;  &quot;use strict&quot;;  a = 4;&#125;fn(); console.log(a, window.a); // ncaught ReferenceError: a is not defined</code></pre></blockquote><ol start="4"><li>严格模式<blockquote><p>在 ES5 中增加了严格模式概念，在严格模式下，之前的一些不规范的写法在这种模式下会被处理掉，甚至会直接抛出错误。<br><strong>为什么使用严格模式 ？</strong></p><ul><li>严格模式消除了 JavaScript 语法的一些不合理、不严谨之处，减少一些怪异行为</li><li>消除代码运行一些不安全之处，保证代码运行的安全</li><li>提高代码编译效率，增加运行速度</li><li>为未来新版本的 JavaScript 做好铺垫</li></ul></blockquote></li></ol><ul><li><p>对<strong>整个</strong> JS 代码开启严格模式:</p><blockquote><ul><li>在所有 JS 代码的<strong>最前面</strong>加上”use strict”</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">// 'use strict ' 是一个预处理执令，告诉JS引擎启用严格模式</span><span class="token string">"use strict"</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在严格模式下，定义变量必需用var关键词</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught ReferenceError: a is not defined</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote></li><li><p><strong>单独指定</strong>一个函数在严格模式下执行</p><blockquote><ul><li>只需要把”use strict”放在函数体的最前面。函数体中的代码就需要遵顺严格模式</li></ul><pre><code>c = 4;console.log(c); // 4</code></pre></blockquote><p>function b() {<br>“use strict”; &#x2F;&#x2F; 严格模式只能函数体内有效<br>a &#x3D; 4;<br>console.log(a); &#x2F;&#x2F; Uncaught ReferenceError: a is not defined<br>}<br>b();</p><blockquote><pre><code></code></pre></blockquote></li></ul><ol start="5"><li><p>在严格模式下：</p><blockquote><ul><li>变量必须<strong>先声明，再使用</strong>（声明变量用 var、const、let）</li><li>在严格模式中，全局作用域中的函数内部 <code>this</code> 默认指向 <code>undefined</code><ul><li>而在非严格模式中，全局作用域中的函数内部 this 默认指向 <code>window</code></li></ul></li><li>函数参数不能重名<ul><li>非严格模式下，允许重复变量命名</li></ul></li><li>禁止使用 <code>with</code></li></ul></blockquote></li><li><p>静态作用域和动态作用域</p><blockquote><ul><li>静态作用域：又称词法作用域，是指作用域在词法阶段就被确定了<strong>（函数定义的位置就决定了函数的作用域）</strong>，以后是不会改变。</li><li>动态作用域：函数的作用域在函数调用时才决定的。<blockquote><p>特别注意：Javascript采用的是词法作用域 ( 静态作用域 )</p></blockquote></li></ul><pre><code> var a = 3; var b = 4; function fn(a) &#123;function fn2(b) &#123;  fn3(b); //fn3(4)=4  fn3(); //undefined&#125;function fn3(b) &#123;  console.log(b); //4&#125;fn2(b); //b=4 &#125; fn(a); //a=3</code></pre></blockquote></li><li><p>测试题</p><blockquote><pre><code> var a = 3; var b = 4; function fn(a) &#123;function fn2(b) &#123;  var b = 2;  console.log(a); //3  fn3(b); //b=2  fn3(); //undefined  fn4();&#125;function fn3(b) &#123;  console.log(b); //2&#125;function fn4() &#123;  console.log(b); //4&#125;fn2(b); //b=4 &#125; fn(a); //a=3</code></pre></blockquote></li></ol><blockquote><pre><code> var a = 1; var b = 3; var c = 2; function fn(a) &#123;   var b = 3;   console.log(a, b);//1,3   function fn2(b) &#123;     //b=c=2     var c = 4;     console.log(a);//1     console.log(b);//2     console.log(c);//4   &#125;   fn2(c);//c=2 &#125; fn(a);//a=1</code></pre></blockquote><h3 id="七、变量提升与函数声明提升"><a href="#七、变量提升与函数声明提升" class="headerlink" title="七、变量提升与函数声明提升"></a>七、变量提升与函数声明提升</h3><blockquote><p>以下关于变量和函数提升，我们并不涉及底层执行原理，底层执行原理在对象讲完后再讲。</p></blockquote><ul><li>在讲解变量提升与函数声明提升前，我们先来看下面这一段代码<blockquote><pre><code>console.log(a); // undefinedfn(); // undefinedvar a = 2;console.log(a); // 2function fn() &#123;console.log(a);&#125;fn(); // 2console.log(c);//报错</code></pre></blockquote></li></ul><p><strong>我们都知道</strong></p><blockquote><ul><li><code>Javascript</code> 代码是按顺序从上往下执行的，若按这个逻辑来理解的话<ul><li>当执行到第 1 行时，由于a这个变量还没有被声明，那肯定是要报错的，但这里没有报错，而是输出了<code>undefined</code></li><li>同理，当执行到第 2 行时，fn 这个函数还没有声明，那肯定也会报错，但同样没有报错，输出了<code>undefined</code></li></ul></li><li>但是当我们使用全程<strong>没有声明</strong>的c时，则直接报错</li></ul></blockquote><p><strong>由此我们可以得出如下三个结论：</strong></p><blockquote><ul><li>JS 在执行过程中，若使用了<strong>未声明</strong>的变量，那 JS 执行就会<strong>报错</strong></li><li>如果在一个变量<strong>声明之前使用他</strong>，不会报错，但输出值为 <code>undefined</code></li><li>如果在一个函数<strong>声明前</strong>使用它，不会出错，<strong>可以正常执行</strong></li></ul></blockquote><ol><li>变量提升和函数提升<blockquote><ul><li>js是边编译，边执行的，所以他在执行js代码前，有一个预编译的过程</li></ul></blockquote></li></ol><ul><li>变量提升<blockquote><ul><li>是指使用 var 关键字声明的变量会被提升到当前作用域的最顶部</li><li>变量提升，提升的是变量，变量提升后，变量的默认值是undefined</li></ul></blockquote></li><li>函数提升<blockquote><ul><li>是指使用函数声明创建的函数，其也会被提升到当前作用域的最前面</li><li>这里要区分函数声明和函数表达式</li></ul></blockquote></li></ul><blockquote><pre><code>console.log(a);b();var a = 2;function b() &#123;  console.log(&quot;要注意我喽！&quot;);&#125;</code></pre></blockquote><p>&#x2F;&#x2F; 上面代码，会先把带var声明的变量和用function声明的函数，提升到当前作用域的最前面<br>&#x2F;&#x2F; 提升后代码其形式如下：<br>var a;<br>function b() {<br>  console.log(“要注意我喽！”);<br>}<br>console.log(a);<br>b();<br>a &#x3D; 2;</p><blockquote></blockquote><p>&#x2F;&#x2F; 提升后，其代码执行流程如下：<br>&#x2F;&#x2F; - 代码从上往下执行<br>&#x2F;&#x2F; - 执行到第1行，a的默认值是undefined<br>&#x2F;&#x2F; - 执行到第2行，是函数声明，啥也不做，往下继续执行<br>&#x2F;&#x2F; - 执行到第5行，打印a,，结果是undefined<br>&#x2F;&#x2F; - 执行到第6行，调用函数，函数体中打印  <strong>”要注意我喽！“</strong></p><blockquote><pre><code></code></pre></blockquote><ol start="2"><li>函数提升，区分函数声明与函数表达式<blockquote><ul><li>函数声明：<code>function b()&#123;&#125;;</code></li><li>函数表达式：<code>var a=function b()&#123;&#125;;</code></li></ul></blockquote></li></ol><blockquote><pre><code>console.log(a);console.log(b);b();a();var a = function () &#123;  console.log(&quot;我在a函数中&quot;);&#125;;function b() &#123;  console.log(&quot;我在b函数中&quot;);&#125;</code></pre></blockquote><p>&#x2F;&#x2F; 首先把var和function声明的函数，提升到当前作用域最前面，提升后代码如下：<br>var a;<br>function b() {<br>  console.log(“我在b函数中”);<br>}<br>console.log(a);<br>console.log(b);<br>b();<br>a();<br>a &#x3D; function () {<br>  console.log(“我在a函数中”);<br>};</p><blockquote></blockquote><p>&#x2F;&#x2F; 提升后代码，代码从上往下执行<br>&#x2F;&#x2F; 执行到console.log(a); 在控制台输出 undefined,因为此时a声明了，但没有赋值,默认值为undefined<br>&#x2F;&#x2F; 执行到console.log(b); 在控制台输出整个 b的函数声明<br>&#x2F;&#x2F; 执行到 b() ，调用函数,在控制台输出  “我在b函数中”<br>&#x2F;&#x2F; 执行到a()，因为些时a还是undefined，所以没有办法调用，即报错</p><blockquote><pre><code></code></pre></blockquote><ol start="3"><li>函数提升优先级<strong>高于</strong>变量提升<blockquote><p><strong>在同一作用域下</strong></p><ul><li>如果出现<strong>同名的</strong>函数和变量，则在变量和函数提升时，会以<strong>函数</strong>为主</li><li>同名的函数在函数声明提升时，写在后面的会<strong>覆盖</strong>前面的</li></ul></blockquote></li></ol><p><strong>同名的函数</strong></p><blockquote><pre><code>a(); // 2function a() &#123;  console.log(&quot;1&quot;);&#125;function a() &#123;  console.log(&quot;2&quot;);&#125;a(); // 2//预编译之后：//后面的覆盖前面的function a() &#123;  console.log(&quot;2&quot;);&#125;a();a();</code></pre></blockquote><p><strong>同名的变量和函数</strong></p><blockquote><pre><code>console.log(a);a();function a() &#123;  console.log(&quot;a中&quot;);&#125;var a = 3;console.log(a);a = 4;console.log(a);</code></pre></blockquote><p>&#x2F;&#x2F; 上面代码在执行前，变量和函数声明提升后代码如下：<br>function a() {<br>  console.log(“a中”);<br>}<br>console.log(a);<br>a();<br>a &#x3D; 3;<br>console.log(a);<br>a &#x3D; 4;<br>console.log(a);<br>&#x2F;&#x2F; - 代码从上往下执行<br>&#x2F;&#x2F; - 执行到console.log(a)时，打印函数a<br>&#x2F;&#x2F; - 执行到a()时，调用函数，执行函数体中代码，输出 ‘a中’<br>&#x2F;&#x2F; - a&#x3D;3，给a重赋值，console.log(a)  打印出 3<br>&#x2F;&#x2F; - a&#x3D;4,给a重新赋值，console.log(a),打印出4</p><blockquote><pre><code>&gt;注意第一个`console.log(a);`打印出的是函数</code></pre></blockquote><ol start="4"><li><p>测试题1</p><blockquote><pre><code>console.log(a);a();function a() &#123;  console.log(&quot;a1&quot;);&#125;var a = 2;function a() &#123;  console.log(&quot;a2&quot;);&#125;var b = a;console.log(b);</code></pre></blockquote><p>&#x2F;&#x2F;预编译后：<br>function a() {<br>  console.log(“a2”);<br>}<br>var b;<br>console.log(a);&#x2F;&#x2F;函数a<br>a();&#x2F;&#x2F;“a2”<br>var a &#x3D; 2;<br>b &#x3D; a;<br>console.log(b);&#x2F;&#x2F;b&#x3D;a&#x3D;2</p><blockquote><pre><code>&gt;注意`var a=2;`由于优先级低，所以不会被预编译(并不代表他不会被执行)，但是，当执行到它时，会覆盖前面的a，此时a就由函数变成了基本数据类型。</code></pre></blockquote></li><li><p>测试题2</p><blockquote><pre><code>console.log(a);a();function a() &#123;  console.log(&quot;a1&quot;);&#125;var a = 2;function a() &#123;  console.log(&quot;a2&quot;);&#125;console.log(a);var a = function () &#123;  console.log(&quot;a3&quot;);&#125;;console.log(a);预编译后：function a() &#123;  console.log(&quot;a2&quot;);&#125;console.log(a);//函数aa();//&quot;a2&quot;var a = 2;//覆盖aconsole.log(a);//2var a = function () &#123;  console.log(&quot;a3&quot;);&#125;;//覆盖aconsole.log(a);//函数a</code></pre></blockquote></li></ol><h3 id="八、算法的核心理论"><a href="#八、算法的核心理论" class="headerlink" title="八、算法的核心理论"></a>八、算法的核心理论</h3><blockquote><p>算法有好有坏，判断算法好的重要标准就是算法的复杂度。</p></blockquote><ol><li>算法复杂度<blockquote><ul><li>算法复杂度： 是指程序执行时需要的<strong>计算量</strong>（计算时长）和<strong>内存空间</strong> （和代码是否简洁无关）</li><li>计算量： 是指<strong>时间复杂度</strong>，也就是计算一个算法运行得到结果所花的时间</li><li>内存空间： 是指<strong>空间复杂度</strong>，也就是计算一个算法运行得到结果所占用的内存空间的大小<blockquote><p>时间复杂度和空间复杂度 是衡量算法好环的两个非常重要的标准</p></blockquote></li></ul></blockquote></li></ol><ul><li><p>复杂度的概念</p><blockquote><ul><li>不管是空间复杂度，还是时间复杂度，这个复杂度，他指的是一个<strong>数量级</strong>（方便 记忆和推广）</li><li>他不是具体的数字，因为没办法计算。因为一个算法，他到底耗时多少，占用多少内存空间，多少次 CPU 的计算，我们没法精准的计算。</li><li>我们说，如果不能精准的去算，但是可以粗略的去计算和判断。这个粗略的方式就是我们提到的数量级的概念。</li></ul></blockquote></li><li><p>数量级概念</p><blockquote><ul><li>所谓的数量级，指数量的尺度或大小的级别，他是一个数的<strong>区间范围</strong>。</li></ul></blockquote></li></ul><ol start="2"><li>时间复杂度<blockquote><ul><li>如果代码还没有运行，我怎么能预知代码运行所花的时间呢？而且受<strong>运行环境</strong>和<strong>输入规模</strong>的影响，代码的绝对执行时间是无法预估的，但是我们可以预估代码的<strong>基本操作</strong>执行次数</li><li>我们根据代码的<strong>执行次数</strong>，来判断算法的时间复杂度，他分为以下几个等级：<img src="数量级.png"></li></ul></blockquote></li></ol><table><thead><tr><th>时间复杂度</th><th>说明</th></tr></thead><tbody><tr><td>O(1)</td><td>表示执行次数是可数的，同时和输入量<strong>无关</strong>。无论执行次数是 1、1000，10000，只要是可数的，同时和输入量无关，都不影响它的级别</td></tr><tr><td>O(logn)</td><td>执行次数是输入量（输入数据量）的<strong>对数</strong>。比如输入量是 100，计算量是 10，因为 10<sup>2</sup>是 100；当输入量是 1 亿时，计算量是 1 万 因为 10000<sup>2</sup>是 1 亿</td></tr><tr><td>O(n)</td><td>执行次数和输入量（输入数据量）是<strong>“一样”</strong>的，这里的一样，并不是说完全相等，是指同等级别增加。比如输入量是 n，计算量是 1n,2n,100n，那都属于这个等级。</td></tr><tr><td>O(n<code>*</code>logn)</td><td>执行次数&#x3D;数据量<code>*</code>数据量的对数 &#x3D; n<code>*</code>logn</td></tr><tr><td>O(n<sup>2</sup>)</td><td>执行次数&#x3D;输入量的平方，输入 10，执行 100 次，输入 100，执行 10000 次</td></tr></tbody></table><ul><li><p><strong>O(1)级别-时间复杂度</strong></p><blockquote><ul><li>只要是我们<strong>能够识别</strong>出来的一个计算量，同时和输入量<strong>无关</strong>，那他复杂度就是<code>O(1)</code></li><li>比如，不管输入量是多少，执行次数都是<strong>固定的</strong> 1 次或 1000 次或 10000 万，都属于<code>O(1)</code>级别</li></ul><pre><code>var arr = [1, 2, 3, 4]; // arr可以是 arr=[1,2,3,4,5,6,7,8,.....1000] 等function fn(arr) &#123;console.log(arr[0]);&#125;// 时间复杂度 O(1)级别// 不管arr 数组长度是多少，我的计算量都是1次，是可数的，不受输入量影响</code></pre></blockquote></li><li><p><strong>O(logn) 级别-时间复杂度</strong></p><blockquote><ul><li>执行次数是输入量（数据量）的<strong>对数</strong>(折半)</li><li>比如输入量是 100，计算量是 10，因为 10<sup>2</sup>是 100，</li><li>当输入量是 1 亿时，计算量是 1 万 因为 10000<sup>2</sup>是 1 亿<br><strong>常见的二分法：</strong> 其时间复杂度就是这个级别，每一次执行次数都为原来的 1&#x2F;2</li></ul></blockquote></li><li><p><strong>二分查找-数组中的某个元素</strong></p><blockquote><p>在升序的数组<code>[1,2,4,5,7,12,15,18,30,32,45]</code>中，查找值为 15 的元素<br><strong>如果用二分查找，我们会如何查找</strong></p><ul><li>我们首先会找到数组中的中间一个元素 12</li><li>然后拿 15 与 12 对比，如果小于 12，则在 12 左边元素中查找，如果大于 12，则在 12 的右边元素中查找</li><li>如果没找到，按上面查找方式，继续查找<img src="二分法.png"></li></ul></blockquote></li></ul><blockquote><p><strong>二分查找：</strong></p><ul><li>每次查找，查找范围都会缩小为上一次查找范围的<code>1/2</code>，其执行执数是输入量的对数</li><li>这个级别的时间复杂度，随着数据量的暴增，其时间消耗越来越<strong>趋向平缓</strong>。</li></ul></blockquote><ul><li><p>O(n)级别-时间复杂度</p><blockquote><ul><li>执行次数和输入量（数据量）是 <strong>“一样”</strong> 的，这里的一样，并不是说完全相等，是指同等级别增加</li><li>比如：输入量是 n，计算量是 1n,2n,100n，那都属于这个等级</li></ul><pre><code>// 时间复杂度 O(n)级别function fn(arr) &#123;for (var i = 0; i &lt; arr.length; i++) &#123;  console.log(arr[i]);  console.log(arr[i] + 10);&#125;&#125;// 执行次数受 输入量的影响，同时是同等级别增加// 如果arr数组长度为10，执行20次，长度为100，执行200次，长度为10000，执行20000次</code></pre></blockquote></li><li><p>O(n*logn)级别-时间复杂度</p><blockquote><ul><li>执行次数 &#x3D; 数据量 * 数据量的对数 &#x3D; n * logn</li><li>这种级别的时间复杂度，通常<ul><li>外层是一个 for 循环，时间复杂度为O(n)；</li><li>for 循环里面，来一个二分查找，二分查找复杂度是 O(logn), 两者一组合，时间复杂度就是 O(n*logn)</li></ul></li><li>我们后面算法中讲到的快速排序，其时间复杂度就是<code>O(n*logn)</code>级别，因为代码过于复杂，目前不做演示，后面学到再说</li></ul><pre><code>// 以下代码没有任何实际的意义，只是用来简单理解O(n*logn)的时间复杂度var arr = [1, 2, 3, 4, 5, 6, 7, 8];for (var i = 0; i &lt; arr.length; i++) &#123;for (j = i; j &gt; 1; j /= 2) &#123;  console.log(&quot;二分&quot;);&#125;&#125;</code></pre><blockquote><p>算法的时间复杂度，达到 <code>O(n*logn)</code>这个级别，只能算 ok，能接受，但肯定不是最优的</p></blockquote></blockquote></li><li><p>O(n<sup>2</sup>)级别-时间复杂度</p><blockquote><ul><li>执行次数（计算量）是输入量的平方</li><li>输入量是 10，执行 100 次，输入 100，执行 10000 次</li><li>常见的双层嵌套 for 循环，就是这个级别的时间复杂度</li></ul><pre><code>// 时间复杂度 O(n^2)级别  n^2表示n的平方// 执行次数是输入量的平方// 如果n=10，则执行100次，如果n=100，则执行10000次function fn(n) &#123;for (var i = 0; i &lt; n; i++) &#123;  for (var j = 0; j &lt; n; j++) &#123;    console.log(i + &quot;-&quot; + j);  &#125;&#125;&#125;fn(10);</code></pre><blockquote><p>算法时间复杂度，达到 O(n<sup>2</sup>)级别，几乎是没有办法用的，因为输入量越大，计算量暴增</p></blockquote></blockquote></li><li><p>总结</p><blockquote><ul><li>当 n 的取值足够大时，其算法耗时时间从小到大依次为：<ul><li>O(1) &lt; O(logn) &lt; O(n) &lt; O(n*logn) &lt; O(n<sup>2</sup>)</li></ul></li><li>当然，在编程世界中，各种各样的算法，除了上面提到的，还有许多不同形式的时间复杂度，如下<ul><li>O(n<sup>3</sup>)、O(mn)、O(2n)、O(n!)</li></ul></li></ul></blockquote></li></ul><ol><li>空间复杂度<blockquote><ul><li><strong>空间复杂度：</strong> 是指计算一个算法运行得到结果所占用的内存空间的大小</li><li>这个比时间复杂度相对要容易些，因为在<strong>前端领域</strong>，我们相对来说是<strong>重时间，轻空间</strong>的。</li><li>因为前端需要的更多的是<strong>运行的速度更快</strong>，比如我们常说的性能优化，本质就是在追求在尽可能最短的时间内来完成页面的渲染到呈现等。</li><li>因为前端是运行在浏览器中，相对来说内存空间是完全足够用的。只有那些做嵌入式开发的，内存相对比较少，需要节约着来用，对空间复杂度的要求会更高<img src="数量级.png"></li></ul></blockquote></li></ol><table><thead><tr><th>等级</th><th>说明</th></tr></thead><tbody><tr><td>O(1)</td><td>输入量增大，并不会影响需要的空间;当然，输入量增大，本身输入量占的空间肯定是会变大的</td></tr><tr><td>O(logn)</td><td>所需内存空间为输入量内存空间的的对数;输入量占内存空间为 100k，则对应增加内存空间为 10k</td></tr><tr><td>O(n)</td><td>输入量增大，所需要的内存空间与输入量成正比;比如输入量所需空间为 n，则相应的内存空间也会增到 1n，2n，3n 等，都属于 O(n)级别</td></tr><tr><td>O(n*logn)</td><td>所需内存空间 &#x3D; 输入量空间 * 输入量空间的对数</td></tr><tr><td>O(n<sup>2</sup>)</td><td>输入量增大，其所需要的内存空间为原来的平方；如：输入量所占内存空间为 n，则其内存空间会增加到 n<sup>2</sup></td></tr></tbody></table><ul><li><p>O(1)级别-空间复杂度</p><blockquote><ul><li>输入量增大，并不会影响<strong>需要的</strong>空间</li></ul><pre><code>// 空间复杂度为 O(1)// 输入量增大，并不会影响所需要的空间，不管arr多大，则变量a,b对应空间相对稳定function fn(arr) &#123;var a = arr[1];var b = arr[2];&#125;</code></pre><ul><li>并不是说<code>arr</code>长度的增加，所需要的内存不会增加</li><li>而是说函数体里声明的a、b变量所需要的空间不会随输入量的增大而增加</li></ul></blockquote></li><li><p>O(n)级别- 空间复杂度</p><blockquote><ul><li>输入量增大，所需要的内存空间与输入量成正比</li><li>比如：常见的数组拷贝(深克隆)，输入的数组变大，那拷贝到对应的数组也就会变大</li></ul><pre><code>// 空间复杂度为O(n)// 数组arr的输入量变大，其对应 arr2占用的内存也就相应变大, 这里假设arr中存的都是基本数据类型function deepClone(arr) &#123;// ......var arr2 = []; //  占用的内存空间for (var i = 0; i &lt; arr.length; i++) &#123;  arr2.push(arr[i]);&#125;&#125;</code></pre></blockquote></li><li><p>O(n<sup>2</sup>)级别- 空间复杂度</p><blockquote><ul><li>输入量增大，其所需要的内存空间为原来的平方</li><li>比如：常见的二维数组生成</li></ul><pre><code>// 空间复杂度 O(n2)// 当输入n为2时，所需要的空间为原来的4倍，当输入为7时，所需空间为原来的49倍function fn(n) &#123;var arr = [];for (var i = 0; i &lt; n; i++) &#123;  var arr2 = [];  for (var j = 0; j &lt; n; j++) &#123;    arr2[j] = j;    arr[i] = arr2;  &#125;&#125;console.log(arr);&#125;fn(7);</code></pre></blockquote></li></ul><ol start="4"><li>空间与时间的取舍<blockquote><ul><li>在前端这个领域，我们更注重时间复度，所以我们很多时候会牺牲一部分空间来换取时间。</li><li>如果实现同一个效果，有两种方法：<ul><li>方法一的时间复杂度 &lt; 方法二的空间复杂度</li><li>方法一的空间复杂度 &gt; 方法二的空间复杂度<br> 这个时候，我们会可能会选取方法一，因为前端更看重时间。当然在某些情况下，也有可能选择方法二，因为更看重空间内存的占用。具体情况以实际业务需求为主。<br><strong>重要提示：</strong></li></ul></li><li>程序员是必须掌握算法复杂度</li><li>如果你没有复杂度的概念和敏感度，写程序是非常危险的</li><li>代码功能测试正常，但数量大了，程序就会崩溃</li></ul></blockquote></li></ol><h3 id="九、递归与深克隆"><a href="#九、递归与深克隆" class="headerlink" title="九、递归与深克隆"></a>九、递归与深克隆</h3><ol><li>递归的定义和理解<blockquote><ul><li>所谓的递归 可以简单理解为一个函数的内部语句<strong>调用这个函数自身</strong>，一次一次的重复调用自身，直到函数执行到某一次时，因<strong>达到某种条件</strong>而终止了对自己的调用，然后返回最终结果。</li><li>递归是一种较为 高级的编程技巧，通常把一个大型复杂的问题层层转化为一个与原问题<strong>相似的规模较小的</strong>问题来求解 。</li></ul></blockquote></li></ol><ul><li>我们使用 5 的阶乘(factorial)来举例，了解什么是递归 ？<blockquote><ul><li>5！表示 5 的阶乘 5 的阶乘&#x3D;<code>5*4*3*2*1</code>; 4 的阶乘&#x3D;<code>4*3*2*1</code>; 3 的阶乘&#x3D;<code>3*2*1</code>;</li><li>转换思路： <code>5!=5*4!</code> <code>4!=4*3!</code> <code>3!=3*2!</code> <code>2!=2*1!</code> <code>1!=1</code><img src="递归-阶乘.png"></li></ul><pre><code>// 书写一个函数，这个函数内部自己会调用自己，从而形成递归// 函数的功能是计算n的阶乘，n的阶乘是 n*(n-1)的阶乘// n! = n * (n-1)!function factorial(n) &#123;// 递归的出口，当n=1时，返回1if (n == 1) return 1;// 如果询问的不是1的阶乘，就返回 n * (n-1)return n * factorial(n - 1);</code></pre></blockquote>&#x2F;&#x2F; 三目运算符<br>&#x2F;&#x2F; return n &#x3D;&#x3D; 1 ? 1 : n * factorial(n - 1);<br>}<blockquote></blockquote>var result &#x3D; factorial(5); &#x2F;&#x2F; 调用函数<br>console.log(result); &#x2F;&#x2F; 输出结果<blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><blockquote><p>使用递归需要满足两个条件：</p></blockquote><ul><li>边界条件：确定递归何时终止，找到递归的终止条件。也称之为递归出口</li><li>递归模式：大问题如何分解为小问题，子问题需与原问题同样的事，且规模更小 。也称为递归体<br><strong>递归的简单理解：</strong></li><li>就是函数内部调用函数自身，达到某个条件之后，停止调用</li></ul></blockquote><ol start="2"><li>斐波那契数列(fibonacci)<blockquote><ul><li>斐波那契数列是这样的数列：<code>1,1,2,3,5,8,13,21</code> 。求第 n 项的斐波那契<strong>数列</strong><br><strong>找规律：</strong></li><li>第 1 项&#x3D;1</li><li>第 2 项&#x3D;1</li><li>第 3 项是&#x3D;第 1 项+第 2 项</li><li>第 4 项&#x3D; 第 2 项+第 3 项</li><li>依次类推，后面每一项都等于前两项之和<br><strong>求出第 n 项的值，并列出第n项的数列</strong></li></ul></blockquote></li></ol><ul><li><strong>递归法：</strong><blockquote><ul><li>求出第 n 项的值：<ul><li>递归出口： n&#x3D;1 时和 n&#x3D;2 时分别返回 1 1</li><li>递归模式：f(n)&#x3D;f(n-1) +f(n-2)</li></ul></li><li>求出 n 项的斐波那契数列：<ul><li>利用 for 循环结合递归，把每一项的值计算得到，然后拼接成字符串</li></ul></li></ul><pre><code>// 这个函数的功能是返回斐波那契数列中下标为n的那项的值function fibonacci(n) &#123;// 数列的第1项和第2的项值是1if (n === 1 || n === 2) return 1;</code></pre></blockquote>&#x2F;&#x2F; 斐波那契数列的本质特征就是每一项，等于前面两项的和<br>return fibonacci(n - 1) + fibonacci(n - 2);<br>}<blockquote></blockquote>&#x2F;&#x2F;  求出n项的斐波那契数列<br>var result &#x3D; “”; &#x2F;&#x2F; 用来拼接每一项的值<br>for (var i &#x3D; 1; i &lt;&#x3D; 10; i++) {<br>result +&#x3D; fibonacci(i) + “,”;<br>}<br>console.log(result);<blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><ul><li>然而，这种做法的时间复杂度为2<sup>n</sup>，只要把值稍微改大点，电脑直接就崩溃了：<br><strong>递归版 - 时间复杂度</strong></li><li>我们假设，现在我们要找的是第 8 项的等差数列，那我们内部求出第 8 项的值，计算次数达到了2<sup>n</sup></li><li>再加上要求出整个数列，还要一次 for 循环，整个的级别已经远远超过 O(n<sup>2</sup>)了<img src="递归版斐波那契数列时间复杂度.png"></li></ul></blockquote><ul><li><strong>优化版——双指针法</strong><blockquote><ul><li>我们用两个变量分别来记录当前循环的<strong>前两项</strong></li><li>然后定义一个变量来计算当前项得结果，然后再更新下前两项的值，以便下一轮循环用到<blockquote><p>本次优化版本用到：双指针、字符串拼接</p></blockquote></li></ul><pre><code>// 1,1,2,3,5,8,13,21function fibnocci(n) &#123;var n1 = 1;var n2 = 1;var item; // 临时存储每一项值var str = &quot;&quot;; // 拼接字符串if (n == 1) str = &quot;1&quot;;if (n == 2) str = &quot;1,1&quot;;if (n &gt;= 3) str = &quot;1,1&quot;;</code></pre></blockquote>for (var i &#x3D; 3; i &lt;&#x3D; n; i++) {<br>  item &#x3D; n1 + n2; &#x2F;&#x2F; 计算得到当前项<br>  n1 &#x3D; n2; &#x2F;&#x2F; n1向右移<br>  n2 &#x3D; item; &#x2F;&#x2F; n2 向右移<br>  str +&#x3D; “,” + item; &#x2F;&#x2F; 拼接得到的 斐波那契数列<br>}<br>return str;<br>}<br>console.log(fibnocci(15)); &#x2F;&#x2F; 1,1,2,3,5,8,13,21,34,55,89,144,233,377,610<blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><ul><li><strong>双指针版</strong></li><li>时间复杂度：整个过程下来，只有一层 for 循环，所以时间复杂度为 O(n)</li><li>空间复杂度为 O(n)，内存空间的占用，多了 <code>4</code> 个变量，其中 str 的空间占用受输入量 n 的影响最大，n 输入越大，str 的字符串越长。</li></ul></blockquote><ol start="4"><li>数组的深克隆<blockquote><ul><li>以下数组的克隆，只考虑<strong>数组中嵌套数组</strong>的情况，因为我们还没有学对象，等我们学完对象后，我们会再优化一个版本。<br><strong>深克隆函数功能</strong></li><li>用户希望在调用函数时，传入一个数组，然后就克隆一个和传入数组一模一样的数组出来。</li><li>这两个数组只是长得一样，但是两个完全独立的数组，互不干扰。即两个数组指向堆内存中的不同地址。</li></ul><pre><code>// 深克隆数组function deepClone(arr) &#123;  if (!Array.isArray(arr)) return;  var result = []; // 克隆成功后的结果数组  for (var i = 0; i &lt; arr.length; i++) &#123; // 判断，如果是基本数据类型，则直接push到数组中 // 不是数组就如何，是数组如何 if (Array.isArray(arr[i])) &#123;   // 如果是数组,返回的数组是不是要push到上一个数组中去   result.push(deepClone(arr[i])); &#125; else &#123;   result.push(arr[i]); &#125;  &#125;  return result;&#125;</code></pre></blockquote>var arr &#x3D; [1, 2, 3, [“A”, “B”, [“我”, “和”, “你”]]];<br>var arr2 &#x3D; deepClone(arr); &#x2F;&#x2F; 克隆数组<br>console.log(arr2 &#x3D;&#x3D;&#x3D; arr);<br>arr2[3][2][0] &#x3D; 1; &#x2F;&#x2F; 更改数组中元素<br>console.log(arr);<br>console.log(arr2);<blockquote><pre><code></code></pre></blockquote></li></ol><p><strong>数组克隆 - 递归算法复杂度</strong></p><blockquote><ul><li>时间复杂度为 <code>O(n)</code>，只有一层 for 循环，其输入量与执行次数成<strong>正比</strong></li><li>空间复杂度为 <code>O(n)</code>，返回结果数组会<strong>受输入量</strong>的影响，输入量越大，返回结果数组越大<br>同时在中间会产生一些临时的数组。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（四）</title>
      <link href="/2023/12/03/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2023/12/03/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>在数据类型那一章节，我们知道 JS 中数据类型分为：基本数据类型和引用数据类型</p><ul><li>基本数据类型有 7 种：Number、String、Boolean、null、undefined、Bigint、Symbol</li><li>引用数据类型（Object 对象类型）有：Array、Function、Date、Math、RegExp 等对象<br>本章节我们要学习的数组 Array 对象就是引用数据类型，接下来我们会从以下三个部分来展开讲解</li><li>数组的语法和基本用法</li><li>冒泡排序（基础版，中级版，最优版）</li><li>引用数据类型和基本数据类型</li></ul></blockquote><h3 id="一、数组的语法和基本用法"><a href="#一、数组的语法和基本用法" class="headerlink" title="一、数组的语法和基本用法"></a>一、数组的语法和基本用法</h3><blockquote><ul><li>编程过程中，我们经常会遇见处理 “一组数值” 的情况</li><li>按照之前的学习，我们只能定义 10 个变量来分别存储每个数值，但这样的方式显然是不合理的<ul><li>因为我们是没法看出这些值之间有什么相互关系和作用</li><li>其次我们在定义和使用这些数据时也特别麻烦</li></ul></li><li>所以我们需要有一种新的数据结构来存储这样一组具有相关性的数值，接下来要讲到的 <code>Array 数组</code>，就符合这一特点。</li></ul></blockquote><h4 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h4><blockquote><ul><li>数组（Array），简单理解为是指<strong>一组数据的集合</strong>，用来存储一组相关的数据；</li><li>数据可以是<strong>任意的数据类型</strong>；</li><li>每种高级编程语言中都有数组，它是非常重要的一种数据结构。</li></ul></blockquote><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><blockquote><p>在 <code>ES5</code> 标准下，创建数组有以下 2 种形式：</p><ul><li>数组字面量方式创建数组 和 new Array() 方式创建数组</li></ul></blockquote><ol><li><p>数组字面量方式创建数组</p><blockquote><ul><li>一个封闭在方括号对<code>[]</code>中的包含有<strong>零个或多个</strong>数据</li><li>数组中的每个数据被称作<strong>元素</strong>，元素可以是<strong>任意的</strong>数据类型。</li></ul><pre><code>// 使用数组字面量方式创建了一个空数组,arr是数组名var arr = [];</code></pre></blockquote><p>&#x2F;&#x2F; 使用数组字面量方式创一个带初始值的数组<br>&#x2F;&#x2F; A，B，C，D 称为数组元素（项），数组的长度为4<br>var arr &#x3D; [“A”, “B”, “C”, “D”];</p><blockquote></blockquote><p>&#x2F;&#x2F; 使用数组字面量方式创一个带初始值的数组，数组长度为6<br>&#x2F;&#x2F; 数组元素(项)可以是任意数据类型<br>var arr &#x3D; [1, “name”, null, undefined, {}, function () {}]; &#x2F;&#x2F; 一般不会这样用，仅当前了解</p><blockquote><pre><code>&gt;数据创建同时赋值，称为数组初始化**注意：**- `var arr=[1,2,3,,4];`长度是5- `var arr=[1,2,3,4,];`长度是4&gt;有空元素的数组，称为**稀疏数组**</code></pre></blockquote></li><li><p><code>new Array()</code> 方式创建数组</p><blockquote><ul><li>在实际开发中，这种方式用的少，大家只要了解即可</li><li>建议大家掌握了数组字面量创建方式，再来了解这种方式<blockquote><p>注意：</p></blockquote></li><li>不支持<code>var arr=new Array(1,2,,3);</code>的写法</li><li><code>var arr=new Array(1,2,);</code>，长度是2</li></ul></blockquote></li></ol><blockquote><blockquote><p>括号内只有一个数字时，创建的是数组长度</p></blockquote><pre><code>var arr = new Array(5);console.log(arr.length); // 5console.log(arr[0]); // undefined;//创建一个数组，数组长度为5 ，每一项为空，打印出来为undefined</code></pre></blockquote><blockquote><blockquote><p>括号内是一个字符串时，是创建一个数组</p></blockquote><pre><code>var arr = new Array(&quot;5&quot;);console.log(arr.length); // 1console.log(arr[0]); // 5// 创建一个数组，数组长度为1，同时赋初始值为‘5’</code></pre></blockquote><blockquote><blockquote><p>括号内为多个值时，创建的是数组</p></blockquote><pre><code>var arr = new Array(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;);console.log(arr.length); // 3console.log(arr[0]); // A// 创建一个数组，数组长度为3，同时赋初始值为 &#39;A&#39;、&#39;B&#39;、&#39;C&#39;&gt;```</code></pre></blockquote><h4 id="访问数组元素（项）"><a href="#访问数组元素（项）" class="headerlink" title="访问数组元素（项）"></a>访问数组元素（项）</h4><blockquote><ul><li>数组的每一项都有索引（下标），索引是从 0 开始的正整数，从左至右，从0开始</li><li>我们通过 数组名<code>[索引]</code>的方式来访问数组中元素，如下</li></ul><pre><code>var arr = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;];// 通过索引来访问数组中元素console.log(arr[0]); // Aconsole.log(arr[1]); // Bconsole.log(arr[2]); // Cconsole.log(arr[3]); // D</code></pre></blockquote><h4 id="数组的长度"><a href="#数组的长度" class="headerlink" title="数组的长度"></a>数组的长度</h4><blockquote><ul><li>数组的 <code>length</code> 属性，表示它的长度</li><li>用<code>.length</code>的方式访问数组长度</li></ul><pre><code>// 创建数组var arr = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;];// arr.lenght 访问数组长度console.log(arr.length); // 4</code></pre></blockquote><blockquote><ul><li>数组最后一项的下标&#x3D; 数组长度- 1</li></ul></blockquote><h4 id="修改数组项的值"><a href="#修改数组项的值" class="headerlink" title="修改数组项的值"></a>修改数组项的值</h4><blockquote><p><strong>方式一：</strong></p><ul><li>如果修改项的索引在0 到数组长度 -1 内，<strong>正常修改值</strong></li></ul><pre><code>var arr = [1, 2, 3, 4, 5];// 更改第二项值，也就是下标为1的项的值arr[1] = &quot;A&quot;;console.log(arr); // [1, &#39;A&#39;, 3, 4, 5]</code></pre></blockquote><blockquote><p><strong>方式二：</strong></p><ul><li>如果修改项的索引不在0 到数组长度 -1 内，相当于<strong>创建</strong>这一项</li><li>而且会<strong>修改</strong>数组的<strong>长度</strong>，同时在这个长度内<strong>没有值的项都是空</strong>，通过下标访问这些没有值的项时，结果是<code>undefined</code>;</li></ul><pre><code>var arr = [1, 2, 3, 4, 5];var arr[9]=&#39;B&#39;;console.log(arr); // [1, &#39;A&#39;, 3, 4, 5, empty × 4, &#39;B&#39;]console.log(arr.length); // 10 数据长度变为10console.log(arr[5]); // undefined 下标为5的这一项，访问值为undefined</code></pre></blockquote><blockquote><p><strong>方式三：</strong></p><ul><li>先创建一个空数组，然后再赋值</li><li>而且会根据索引修改数组长度，没有赋值的项都是空的，通过下标访问这些没有值的项时，结果是<code>undefined</code>;</li></ul><pre><code>var arr = [];arr[0] = 1;arr[2] = 2;arr[5] = 5;console.log(arr.length); // 6console.log(arr); // [1, empty, 2, empty × 2, 5]</code></pre></blockquote><h4 id="访问数组注意事项"><a href="#访问数组注意事项" class="headerlink" title="访问数组注意事项"></a>访问数组注意事项</h4><ol><li><p>访问数组中不存在的项，不会报错，回返回undefined</p><blockquote><pre><code>var arr = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;];console.log(arr[5]); // undefined</code></pre></blockquote></li><li><p>数组项对应的值为空时，在访问时，返回undefined</p><blockquote><pre><code>var arr = [&quot;A&quot;, , &quot;B&quot;, &quot;C&quot;];console.log(arr[1]); // undefined</code></pre></blockquote><p>&#x2F;&#x2F; 这两种情况，要注意区分<br>var arr &#x3D; [“A”, undefined, “B”, “C”];<br>console.log(arr[1]); &#x2F;&#x2F; undefined</p><blockquote><pre><code></code></pre></blockquote></li><li><p>经典面试题：</p><blockquote><p>将数组的length设置为 0，取第一个元素会返回什么 ？</p><pre><code>var arr = [1, 2, 3, 4, 5];arr.length = 0;console.log(arr);//arr=[],数组值清空console.log(arr[0]);//undefined</code></pre></blockquote></li></ol><h4 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h4><blockquote><ul><li>所谓数组遍历，就是把数组中的每一项都访问一遍。就好比篮子里有 10 个苹果，一个一个拿 出来。</li><li>至于拿出来做什么，这就要看实际的需求了。比如可以拿出来放在桌子上，什么都不做，也可以拿出来一个一个洗一下。</li><li>这里我们利用 <code>for</code> 循环，把数组中的<strong>每一项</strong>拿出来，在控制台打印输出。<ul><li>for循环中的i是从 0 开始的，是计数器，当<strong>索引</strong>使用</li><li><code>arr[i]</code>就是访问数组中下标为i的那一项</li></ul></li></ul><pre><code>var arr = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, , , , &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, ,];for (var i = 0; i &lt; arr.length; i++) &#123;  console.log(arr[i]);&#125;// 输出：A B C undefined undefined undefined G H I undefined</code></pre></blockquote><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><blockquote><ul><li>以<strong>数组</strong>作为<strong>数组元素</strong>的数组，即：”数组的数组”</li><li>二维数组，可以认为是数组中的元素也是一个数组</li></ul></blockquote><ol><li><p>创建二维数组</p><blockquote><pre><code>var arr = [  [2, 5, 8],  [11, 22, 33],  [55, 88, 66],  [23, 56, 89],];console.log(&quot;数组的长度：&quot; + arr.length); // 4</code></pre></blockquote></li><li><p>访问数组的长度与值：</p><blockquote><ul><li>外侧数组长度：<code>arr.length</code></li><li>内数组长度：<code>arr[i].length</code>,i是所访问数组的下标</li><li>访问内侧数组的值：<code>arr[i][j]</code></li></ul><pre><code>var arr = [     [2, 5, 8],     [11, 22, 33],     [55, 88, 66],     [23, 56, 89],   ];  console.log(arr.length); //4  console.log(arr[1].length); //3  console.log(arr[2][1]); //88</code></pre></blockquote></li><li><p>循环遍历二维数组中的每一项</p><blockquote><pre><code>var arr = [  [2, 5, 8],  [11, 22, 33],  [55, 88, 66],  [23, 56, 89],];// 循环输出二维数组中的每一个项for (var i = 0; i &lt; arr.length; i++) &#123;  for (var j = 0; j &lt; arr[i].length; j++) &#123; console.log(arr[i][j]);  &#125;&#125;// 最终输出结果 2 5 8 11 22 33 55 88 66 23 56 89</code></pre></blockquote></li></ol><h4 id="数组类型的检测"><a href="#数组类型的检测" class="headerlink" title="数组类型的检测"></a>数组类型的检测</h4><ol><li><p>用<code>typeof</code>检测数组和对象，得到的是<code>object</code></p><blockquote><pre><code>typeof [1, 2, 3]; // objecttypeof &#123; name: &quot;清心老师&quot;, age: 18 &#125;; // object</code></pre></blockquote></li><li><p>如果要区分数组和对象，我们可以用<code>Array.isArray()</code>来检测是否是<strong>数组类型</strong></p><blockquote><ul><li>如果Array.isArray()的返回值是true，就是数组类型，否则就不是</li></ul><pre><code>Array.isArray([1, 2, 3]); // trueArray.isArray(&#123; name: &quot;清心老师&quot;, age: 18 &#125;); // falseArray.isArray([]); // true</code></pre></blockquote></li></ol><h3 id="二、数组相关实践应用"><a href="#二、数组相关实践应用" class="headerlink" title="二、数组相关实践应用"></a>二、数组相关实践应用</h3><ol><li>数组相关实践应用<blockquote><p>将数组[1, 43, 23, 8, 4, 6, 8, 22, 9]翻转过来</p><pre><code>var arr = [1, 43, 23, 8, 4, 6, 8, 22, 9];  var arr1 = [];  for (var i = arr.length - 1; i &gt;= 0; i--) &#123; arr1[arr1.length] = arr[i];  &#125;  console.log(arr1);</code></pre></blockquote></li></ol><blockquote><blockquote><p>思考：</p></blockquote><ul><li>我们如何在不增加新数组的情况下，在原数组上对数组进行翻转 ？</li></ul></blockquote><ol start="2"><li>找出数组 [1, 43, 23, 8, 4, 6, 8, 22, 9] 中的最大值<blockquote><ul><li>声明一个变量 <code>max</code>，用来保存数组中的最大值</li><li>刚开始默认数组中的第一项为最大值，存入变量 max</li><li>然后拿 max 与数组中<strong>每一项</strong>（除第一项）去做比较</li><li>如果数组中值大于 max，就把这个数存到 max 变量中去，否则就继续往下比</li></ul></blockquote></li></ol><blockquote><pre><code>var arr = [1, 43, 23, 8, 4, 6, 8, 22, 9];var max = arr[0]; // max用来保存最大值，刚开始默认取数组中第一项为最大值for (var i = 0; i &lt; arr.length; i++) &#123;  if (max &lt; arr[i]) &#123;    max = arr[i];  &#125;&#125;console.log(&quot;数组中的最大值为:&quot; + max);</code></pre></blockquote><ol start="3"><li>删除数组中指定元素<blockquote><p>要求删除数组[1, 4, 12, 6, 33, 15, 30, 5, 8];中的所有大于 10 的数<br><img src="删除指定元素.png"></p></blockquote></li></ol><blockquote><p><strong>开启两层循环</strong></p><ul><li><strong>外层</strong>循环把数组中所有数遍历出来与 10 做比较，当判断当前项值<code>&gt; 10</code> 时</li><li>开启<strong>内层</strong>循环，用来<strong>删除当前项</strong>（从当前项开始，把后面的每一项，赋值给前一项，达到删除当前项效果）</li><li>每次有删除项时，其数组的长度就会减 1，数组长度减 1，可以<strong>把最后一项干掉</strong>。</li><li>删除当前项后，下次外层循环开始位置，又要从<strong>当前删除项</strong>的下标开始查找(删除后，该项后面的数就会往前移一位)</li></ul><pre><code>var arr = [1, 4, 12, 6, 33, 15, 30, 5, 8];// 外层循环，把数组中每个数拿出来与10做比较for (var i = 0; i &lt; arr.length; i++) &#123;  if (arr[i] &gt; 10) &#123;    // 把当前项后面的每一项，都赋值给前一项，达到删除当前项效果    for (var j = i; j &lt; arr.length; j++) &#123;      arr[j] = arr[j + 1];    &#125;    // 删除一项后，数组的总长度就要减1，这样就把数组中最后一项给干掉了    arr.length = arr.length - 1;    // 保证删除项后，下次遍历从当前删除项的序号开始遍历    i--;  &#125;&#125;console.log(arr);</code></pre></blockquote><blockquote><blockquote><p>重点学习：</p><ul><li>如何删除数组中元素</li><li>删除数组中元素后，对后续元素和数组带的影响</li><li>后面数组有提供相关删除数组中元素的方法，这里就是让大家学习这种思维方式。</li></ul></blockquote></blockquote><ol start="4"><li>随机生成指定范围内的颜色<br>基础：<blockquote><pre><code>var arr = [&quot;pink&quot;, &quot;khaki&quot;, &quot;skyblue&quot;, &quot;tomato&quot;, &quot;orange&quot;, &quot;orchid&quot;]; var len = arr.length; color = arr[(Math.random() * len) &gt;&gt; 0]; console.log(color);</code></pre></blockquote></li></ol><blockquote><p>当我们在做烟花效果时，我们需要随机为 100 个小圆或正方形产生（指定范围内的）不同颜色。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">></span>  <span class="token punctuation">.</span>ball <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    width<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    height<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token punctuation">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ball"</span> id<span class="token operator">=</span><span class="token string">"J_ball"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">// 获取id为ball的元素</span>  <span class="token keyword">var</span> ball <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"J_ball"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 定义一组颜色，存入到数组中</span>  <span class="token keyword">var</span> bgColor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"pink"</span><span class="token punctuation">,</span> <span class="token string">"khaki"</span><span class="token punctuation">,</span> <span class="token string">"skyblue"</span><span class="token punctuation">,</span> <span class="token string">"tomato"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"orchid"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 数组长度</span>  <span class="token keyword">var</span> len <span class="token operator">=</span> bgColor<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Math.random() * (len) 产生 0- len-1之间的随机数</span>  <span class="token comment" spellcheck="true">// Math.random() * (len) >> 0  去掉小数，只留下整数部分</span>  ball<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> bgColor<span class="token punctuation">[</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> len<span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></code></pre></blockquote><h3 id="三、引用数据类型和基本数据类型的区别"><a href="#三、引用数据类型和基本数据类型的区别" class="headerlink" title="三、引用数据类型和基本数据类型的区别"></a>三、引用数据类型和基本数据类型的区别</h3><blockquote><p>我们知道在 JS 中数据分为：<strong>基本数据类型</strong> 和 <strong>引用数据类型</strong>两大类</p><ul><li>基本类型：number、boolean、string、undefined、null</li><li>引用类型：array、object、function、regexp（正则表达式） …<blockquote><p>那这两类数据类型在内存中是<strong>如何存储</strong>的呢 ？这就是我们接下来要讨论的重点。</p></blockquote></li></ul></blockquote><p><strong>先来看下面两段代码：</strong></p><blockquote><pre><code>// 代码片段一var a = 10;var b = a;a = 20;console.log(a); // 20console.log(b); // 10</code></pre></blockquote><blockquote><pre><code>// 代码片段二var arr1 = [1, 2, 3, 4];var arr2 = arr1;arr1[0] = &quot;A&quot;;console.log(arr1[0]); // Aconsole.log(arr2[0]); // A</code></pre><p><strong>以上代码解读</strong></p><ul><li>通过代码片段一，我们发现，当 b&#x3D;a，赋值完成后，后续对 a 的操作并不会对 b 产生影响。</li><li>而代码代码片段二中的数组就不一样，当 arr2&#x3D;arr1 且，我们对 arr1 的操作，直接影响了 arr2，为什么会出现这个情况呢？</li><li>这就涉及到 Javascript 的基础数据类型和引用数据类型在内存中是如何存储的。</li></ul></blockquote><ol><li>基本数据类型在内存中的存储<blockquote><ul><li>基本数据类型存储在<strong>栈空间</strong>中</li></ul></blockquote></li></ol><p><strong>基本数据类型赋值过程</strong></p><blockquote><ul><li>变量a 是基本数据类型, 当代执行到 <code>var a = 10</code> 时，在<strong>栈内存</strong>中开辟一块空间，把值 <code>10</code> 存入进去</li><li>当执行到 <code>var b = a</code> 时，把 a 的值 10,<strong>复制</strong>一份保存在 b 对应的内存空间中</li><li>当执行 <code>a = 20</code> 时，其本质是修改了<code>a</code>对应内存中的值，并<strong>不会</strong>影响到 b<img src="基本数据类型的存储.png"></li></ul></blockquote><ol start="2"><li>引用数据类型在内存中的存储<blockquote><ul><li><strong>栈内存</strong>中存着引用数据类型的<strong>地址</strong>，<strong>堆内存</strong>中存着引用数据类型的<strong>最终数据内容</strong>。</li></ul></blockquote></li></ol><p><strong>引用数据类型赋值的整个过程：</strong></p><blockquote><ul><li>变量<code>arr1</code><strong>声明</strong>后，首先会在<strong>栈内存</strong>开辟一块内存空间，然后在<strong>赋值时</strong>，再在<strong>堆内存</strong>中开辟一块空间，堆内存存放引用数据类型的数据，然后在堆中就会有一个存放数据的<strong>地址</strong>，把这个地址存入变量对应的栈内存中。</li><li><strong>栈内存</strong>中存着指向堆内存中数据的<strong>地址</strong>。</li><li>当代码执行到<code>arr2=arr1</code>时，这里是把<code>arr1</code>存入栈中的<strong>地址</strong>复制给了<code>arr2</code>，所以本质上arr1和arr2<strong>指向</strong>的是堆内存中的<strong>同一个值</strong>（数据）</li><li>所以当我们操作<code>arr1[0]=&#39;A&#39;</code>时，<code>arr2[0]</code>的值也是’A’</li></ul></blockquote><p><strong>结论：</strong></p><blockquote><ul><li>当我们把一个引用数据类型当做值来赋值时，是把它存在栈中的<strong>地址复制一份</strong>来赋值。</li><li>当我们访问引用数据类型时，是通过栈中的<strong>引用地址</strong>来访问到堆中的数据。<img src="引用数据类型的存储.png"></li></ul></blockquote><ol start="3"><li><p>栈和堆的的介绍</p><blockquote><ul><li>到这里，你肯定会有一个疑问，为什么一定要分堆和 栈这两个存储空间呢？所有的数据都存放在栈中不就可以了吗？答案是不可以</li><li>因为 Javascript 引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间太大的话，所有数据都存放在栈空间里面，那么会影响到上下文切换的效率，进而又影响到整个程序的执行效率。<table><thead><tr><th>比较</th><th>栈</th><th>堆</th></tr></thead><tbody><tr><td>大小固定</td><td>创建时，<strong>确定大小</strong>（值大小固定），故可能会<strong>溢出</strong></td><td>大小<strong>不固定</strong>，可随时增加</td></tr><tr><td>存储类型</td><td>存储基本数据类型及引用类型数据的堆地址</td><td>存储引用类型数据</td></tr><tr><td>如何访问</td><td>按<strong>值</strong>(by value)访问</td><td>按<strong>引用</strong>(by reference)（堆内存地址）访问</td></tr><tr><td>特点</td><td>空间小，运行效率高</td><td>空间大，运行效率相对较低</td></tr><tr><td>存放规则</td><td>按顺序存放，先进后出</td><td>无序存储，可根据引用（地址）直接获取</td></tr></tbody></table></li></ul></blockquote></li><li><p>总结：基本数据类型和引用数据类型的区别</p><table><thead><tr><th>比较</th><th>基本数据类型</th><th>引用数据类型</th></tr></thead><tbody><tr><td>数据存放位置</td><td>基本数据类型存放在<strong>栈</strong>中，数据大小确定，内存空间大小可以分配</td><td>引用数据类型存放在<strong>堆</strong>中，每个空间大小不一样，要根据情况进行特定的配置</td></tr><tr><td>变量存储内容</td><td>变量中存储的是<strong>值本身</strong></td><td>变量存储的是<strong>地址</strong></td></tr><tr><td>变量用来赋值时</td><td>把变量的<strong>值复制</strong>一份去赋值</td><td>把变量的<strong>内存地址复制</strong>一份去赋值</td></tr><tr><td>存储内容大小</td><td>存储值<strong>较小</strong></td><td>存储值<strong>较大</strong></td></tr></tbody></table></li><li><p>数组的深克隆(拷贝)和浅克隆(拷贝)</p><blockquote><ul><li>引用类型在赋值的过程中，指向的是同一个地址，所以本质上两个变量指向的是同一个东西。</li><li>那我们如何把一个引用类型（这里以数组为例），完全拷贝一份给到另一个变量，并且两者之间是<strong>完全独立</strong>的，没有任何的关联呢？</li><li>这就涉及到我们这里说的克隆问题。</li></ul></blockquote></li></ol><blockquote><ul><li><strong>浅</strong>克隆： 只克隆了数组的<strong>第一层</strong>，如果数组是多维数组，或数组中的项是其它的引用类型值，则不克隆其他层。</li><li><strong>深</strong>克隆：克隆数组的<strong>所有层</strong>，要使用递归技术，在讲到递归的时候再介绍。</li></ul></blockquote><blockquote><pre><code>var arr = [1, 2, 3, [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]];  var arr2 = [];  for (var i = 0; i &lt; arr.length; i++) &#123;    arr2[arr2.length] = arr[i];  &#125;  console.log(arr, arr2);  // arr[3] = &quot;更改&quot;;  // console.log(arr, arr2);  arr[3][0] = 1;  console.log(arr, arr2);</code></pre><ul><li>更改arr的第一层值，不会影响arr2</li><li>但若是更改arr[3]这个引用数据类型里面的值(第二层)，就会同时影响arr2的值</li><li>因为第二层的是引用数据类型，存放的是<strong>地址</strong></li><li>arr[3]和arr2[3]指向的是同一地址<blockquote><p>关于深拷贝，讲完递归之后再来讲</p></blockquote></li></ul></blockquote><h3 id="四、冒泡排序-著名排序算法"><a href="#四、冒泡排序-著名排序算法" class="headerlink" title="四、冒泡排序 - 著名排序算法"></a>四、冒泡排序 - 著名排序算法</h3><blockquote><ul><li>冒泡排序的英文是bubble sort 的是一个著名的排序算法，也是在面试时，非常爱考察的算法</li><li>假设，我们现在要将这个无序数组[1,5,3,2,6]从小到大来排列<br><strong>按冒泡排序的思想：</strong></li><li>我们要把相邻的元素<strong>两两比较</strong>，当一个元素<strong>大于</strong>右侧相邻元素时，<strong>交换</strong>它们的位置；当一个元素<strong>小于或等于</strong>右侧相邻元素时，<strong>位置不变</strong>（啥也不做）</li></ul></blockquote><h4 id="基础版："><a href="#基础版：" class="headerlink" title="基础版："></a>基础版：</h4><ol><li>冒泡排序整个过程<blockquote><p>第一轮：交换过程<br><img src="冒泡排序第一轮.png"></p></blockquote></li></ol><blockquote><p>第二轮：交换过程<br><img src="冒泡排序第二轮.png"></p></blockquote><blockquote><p>第三轮：交换过程<br><img src="冒泡排序第三轮.png"></p></blockquote><blockquote><p>第四轮：交换过程<br><img src="冒泡排序第四轮.png"></p></blockquote><p><strong>我们来分析下面的过程</strong></p><blockquote><blockquote><p>我们来用表格来分析上面的执行过程，上面数组中有<code>5</code>个元素，数组长度为<code>5</code>，经过了<code>4</code>轮交换。具体如下：</p><table><thead><tr><th>轮数</th><th>对比次数</th><th>确认元素个数</th><th>有序区个数</th></tr></thead><tbody><tr><td>第1轮</td><td>4</td><td>1</td><td>1</td></tr><tr><td>第2轮</td><td>3</td><td>1</td><td>2</td></tr><tr><td>第3轮</td><td>2</td><td>1</td><td>3</td></tr><tr><td>第4轮</td><td>1</td><td>1</td><td>5</td></tr></tbody></table></blockquote></blockquote><p><strong>其实我们可以得出结论：</strong></p><blockquote><ul><li>元素交换轮数&#x3D;数组长度-1</li><li>每一轮交换次数&#x3D;数组长度-当前交换轮</li></ul></blockquote><p><strong>代码实现思路</strong></p><blockquote><ul><li>我们可以用<code>for</code>循环嵌套来实现，<strong>外部循环</strong>控制<strong>交换轮数</strong></li><li><strong>内部循环</strong>用来实现<strong>每一轮的交换处理</strong>。先进行元素比较，如果元素大于右侧相邻相元素，则两元素位置交换，如果不大于，则啥也不做</li><li>声明变量tmp用作<strong>交换变量</strong></li></ul><pre><code>// 排序数组var arr = [1, 5, 3, 2, 6];// 数组长度var len = arr.length;// 外层for控制交换轮数for (var i = 0; i &lt; len - 1; i++) &#123;  // 内层for控制每一轮，元素交换次数处理  for (var j = 0; j &lt; len - i - 1; j++) &#123;    if (arr[j] &gt; arr[j + 1]) &#123;      // 交换两元素位置      var tmp; // 用来交换两个变量的中间变量      tmp = arr[j];      arr[j] = arr[j + 1];      arr[j + 1] = tmp;    &#125;  &#125;&#125;console.log(arr); // [1, 2, 3, 5, 6]</code></pre></blockquote><h4 id="冒泡排序优化-1"><a href="#冒泡排序优化-1" class="headerlink" title="冒泡排序优化 1"></a>冒泡排序优化 1</h4><blockquote><blockquote><p>在每一轮开始时，默认打上 isSorted&#x3D;’有序’ 标记，数据一旦发生交换，就打上 isSorted&#x3D;’无序’，退出<strong>整个</strong> <code>for</code> 循环的执行。</p></blockquote></blockquote><ol><li>优化思路<blockquote><ul><li>让我们来回顾下刚才上面那个冒泡排序的细节，当我们第过第二轮排序后。<img src="冒泡排序第二轮.png"></li></ul></blockquote></li></ol><blockquote><ul><li>其实这个时候整个数组中的元素<strong>已经是有序的</strong>了，可是排序算法还是按部就班的执行第三，四轮的排序。</li><li>如果在第二轮完成后，我们就<strong>能判断出数列已经有序的，并做出标记</strong>，那么剩下的几轮排序就不必执行了，可以提前结束工作。这样是不是性能更高呢？</li><li>那如何判断出数列当前已经是有序的呢 ？<ul><li>在第二轮结束后，数列才是有序的了，所以第二轮中我们是找不到数组有序的标记</li></ul></li></ul></blockquote><ol start="2"><li>看第三轮：<img src="冒泡排序第三轮.png"></li></ol><p><strong>在第三轮中</strong></p><blockquote><ul><li>整个过程都没有发生数据交换，也就是说，如果在这一轮中，数据如果<strong>没有经过任何的交换</strong>，那就说明，在这一轮当中，数据<strong>已经是有序</strong>的了。</li><li>所以我们在<strong>每一轮开始时</strong>，默认<strong>打上 <code>isSorted=&#39;有序&#39;</code> 标记</strong>，如果在这一轮交换中，数据一旦发生交换，就打上 <code>isSorted=&#39;无序&#39;</code>，如果整轮交换中，都没有发生交换，那就表示数组是有序的了。我们就可以退出<strong>整个</strong> for 循环的执行。</li></ul><pre><code>// 排序数组var arr = [1, 2, 3, 5, 6];// 数组长度var len = arr.length;// 外层for控制交换轮数var isSorted;for (var i = 0; i &lt; len - 1; i++) &#123;  // 内层for控制每一轮，元素交换次数处理  isSorted = true; // 有序标记，每轮开始默认为有序，如果一旦发生交换，就会变成flag=false,无序  for (var j = 0; j &lt; len - i - 1; j++) &#123;    if (arr[j] &gt; arr[j + 1]) &#123;      // 交换两元素位置      var tmp; // 用来交换两个变量的中间变量      tmp = arr[j];      arr[j] = arr[j + 1];      arr[j + 1] = tmp;      isSorted = false;    &#125;  &#125;  // 这一轮多次交换下来，flag没有变为false,说明没有发生元素交换，此时数组已是有序的  if (isSorted) &#123;    break; // 退出最外层for循环  &#125;&#125;console.log(arr); // [1, 2, 3, 5, 6]</code></pre></blockquote><h4 id="进一步优化：冒泡排序优化-2"><a href="#进一步优化：冒泡排序优化-2" class="headerlink" title="进一步优化：冒泡排序优化 2"></a>进一步优化：冒泡排序优化 2</h4><blockquote><blockquote><p>记录每一轮最后一次交换元素的位置，该位置为无序列表的边界</p></blockquote></blockquote><ol><li><p>优化思路</p><blockquote><ul><li>为了让大家更好的理解最优的解决方案带来的好处，我们重新拿一个数组<code>[2,3,4,1,5,6,7,8]</code>来做为案例讲解。</li><li>我们先来观察上面的数列，这个数列有一个明显的特点，就是前半部分<code>2,3,4,1</code>是<strong>无序</strong>的，后半部分<code>5,6,7,8</code>是<strong>有序</strong>的,并且后半部分是<strong>升序排列</strong>的，其<strong>最小值</strong>也比前面部分的最大值要大。</li></ul></blockquote></li><li><p>交换过程</p><blockquote><ul><li>第一轮<img src="冒泡优化2-第一轮.png"></li></ul></blockquote></li></ol><blockquote><ul><li>第二轮<img src="冒泡优化2-第二轮.png"></li></ul></blockquote><ol start="3"><li>从上面的两轮交换中，大家有没有发现什么问题呢 ？<blockquote><ul><li>其实右边的许多元素已经是有序的了，但是每一轮还是规规矩矩的把所有数都比一轮，浪费了很多时间。</li><li>按正常的(系统的)冒泡排序逻辑，第一轮排序过后，有序区长度为 1，第二轮排序过后，有序区长度为 2，…..</li><li>但在实际的排序过程中，有序区的长度<strong>可能会大于</strong>系统的有序区长度。<ul><li>比如说，第一轮后，有序区的长度为 5，1 之后就是有序区了，但在计算机看来，有序区的长度是1</li></ul></li><li>有没有什么办法可以确定，<strong>有序区的长度呢</strong> ？<strong>每一轮比较时</strong>，比较到实际有序区的前一位就不再发生比较了呢 ？<ul><li>我们可以<strong>记录</strong>每一轮最后一次交换元素的<strong>位置</strong>，该位置为无序列表的边界，再往右就是有序区了</li><li>每一轮比较，<strong>比较到上一轮元素最后一次交换的位置</strong>就不再比较了。</li></ul></li></ul></blockquote></li></ol><blockquote><pre><code>// 排序数组var arr = [98, 2, 3, 45, 4, 1, 5, 78, 6, 7, 8, 20];// 数组长度var len = arr.length;// 当前是否是有序的var isSorted;// 有序的边界var sortBorder = len - 1;// 记录每一轮最后一次交换的值，确定下一次循有序边界var index;</code></pre></blockquote><p>&#x2F;&#x2F; 外层for控制交换轮数<br>for (var i &#x3D; 0; i &lt; len - 1; i++) {<br>    &#x2F;&#x2F; 内层for控制每一轮，元素交换次数处理<br>    isSorted &#x3D; true; &#x2F;&#x2F; 有序标记，每轮开始默认为有序，如果一旦发生交换，就会变成flag&#x3D;false,无序<br>    for (var j &#x3D; 0; j &lt; sortBorder; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            &#x2F;&#x2F; 交换两元素位置<br>            var tmp; &#x2F;&#x2F; 用来交换两个变量的中间变量<br>            tmp &#x3D; arr[j];<br>            arr[j] &#x3D; arr[j + 1];<br>            arr[j + 1] &#x3D; tmp;<br>            isSorted &#x3D; false;<br>            &#x2F;&#x2F; 把无序列表的边界，更新为最后一次交换元素的位置<br>            index &#x3D; j;<br>        }<br>    }<br>    &#x2F;&#x2F; 如果无序，记录上一次最后一次交换的元素下标<br>    if (!isSorted) {<br>        sortBorder &#x3D; index;<br>    }<br>    &#x2F;&#x2F; 这一轮多次交换下来，flag没有变为false,说明没有发生元素交换，此时数组已是有序的<br>    if (isSorted) {<br>        break; &#x2F;&#x2F; 退出最外层for循环<br>    }<br>}<br>console.log(arr);</p><blockquote><pre><code></code></pre></blockquote><h3 id="五、编码题"><a href="#五、编码题" class="headerlink" title="五、编码题"></a>五、编码题</h3><blockquote><p>题目如下：</p><ul><li>当用户进入页面时，<strong>不停的</strong>弹出输入框让用户输入班级学员的成绩，直到<strong>输出退出</strong>后，就不再弹出输入框，而是把全班同学的<strong>平均成绩</strong>以弹窗形式显示出来。</li></ul><pre><code>var item; // 接收每次输入的值      var arr = []; // 把接收过的成绩，保存到数组中      var sum = 0; //累加器      while (item != &quot;退出&quot;) &#123;        item = prompt(&quot;请输入学员成绩&quot;);        arr[arr.length] = item;      &#125;      // 把数组长度-1,目的是为了去掉最后一次存入数组中的&#39;退出&#39;      arr.length = arr.length - 1;      //计算总和      for (var i = 0; i &lt; arr.length; i++) &#123;        sum = sum + Number(arr[i]);      &#125;      //   计算平均数      alert(sum / arr.length);</code></pre><blockquote><p>注意：</p><ul><li>判断适合使用哪一个循环语句，只知道结果用<code>while</code></li><li>数组长度一定要<code>-1</code></li></ul></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（三）</title>
      <link href="/2023/12/03/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/12/03/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><ul><li>所谓的<strong>流程控制语句</strong>，就是指我们可以通过这些语句来控制代码按照什么样的顺序结构来执行。</li><li>在 JS 中流程控制主要有三种结构：顺序结构、分支结构、循环结构，这三种结构代表三种不同的代码执行顺序。<img src="流程控制结构.png"></li></ul></blockquote><blockquote><ul><li>顺序结构：代码默认执行结构就是按顺序结构，从上往下依次执行的。</li><li>分支结构语句：<ul><li>if 语句</li><li>switch 语句</li></ul></li><li>循环结构的语句：<ul><li>for 语句</li><li>while 语句</li><li>do while 语句</li></ul></li><li>其它语句<ul><li>break 退出当前循环</li><li>continue 跳过当前迭代，继续执行下一个迭代</li><li>label 给语句加标签，常和for嵌套循环一起使用</li></ul></li></ul></blockquote><h3 id="一、if语句"><a href="#一、if语句" class="headerlink" title="一、if语句"></a>一、if语句</h3><blockquote><p>if 语句是使用最频繁的语句之一，也是最简单的条件语句，也称为选择语句（条件判断语句）</p></blockquote><ol><li>最简单的if语句<blockquote><ul><li><code>if</code> 是如果的意思，如果<code>()</code>括号中的条件成立，则就执行<code>&#123; &#125;</code>大括号中的语句块。</li><li>如果不成立，则啥也不做</li></ul><pre><code>if (条件) &#123; // 当条件为真，则执行这里的代码 // 语句块.....&#125;// if语句后面的代码.....</code></pre><blockquote><p>注：</p></blockquote><ul><li>这里的语句块可能是一行代码，也可能是一个多行代码</li><li>()括号里的条件可以是任何值或任何表达式，并且求值结果<strong>不一定</strong>是布尔值。</li><li>但 JS 内部会<strong>自动调用</strong>Boolean()函数，将这个表达式的<strong>返回值</strong>转为 布尔值。</li><li>如果条件求值为true,则执行{}中的语句块，如果条件求值为false，则啥也不做。执行 if 语句后面的代码。</li></ul></blockquote></li></ol><p><strong>if 语句写法</strong></p><blockquote><pre><code>&lt;script&gt; // 3&gt;2 条件表达式，返回值为true if (3 &gt; 2) &#123;   console.log(3 &gt; 2); // true &#125;&lt;/script&gt;</code></pre></blockquote><p><strong>要注意区分那些是属于 if 语句体中的语句</strong></p><blockquote><ul><li>if语句体外的代码，不管if中的条件是满足，他都会执行</li></ul></blockquote><p><strong>if 语句的简写</strong></p><blockquote><ul><li>如果 if 语句体中<strong>只有一条</strong>语句，可以<strong>省略</strong>大括号和换行</li><li>如果<strong>超过一条</strong>语句，是万万不能简写的，简写会造成编译错误。</li></ul><pre><code>&lt;script&gt; if (2 &lt; 3) console.log(&quot;2&lt;3成立，在控制台输出&quot;); if (2 &gt; 3) console.log(&quot;2&gt;3不成立，不在控制台输出&quot;); console.log(&quot;我与if无关，我永远出来&quot;);&lt;/script&gt;</code></pre></blockquote><ol start="2"><li>if-else 语句<blockquote><ul><li>如果条件求值为 true，则执行语句块 1 中的内容，否则执行语句块 2 中的内容</li></ul><pre><code>if (条件) &#123; // 当条件为true，则执行这里代码 // 语句块1....&#125; else &#123; // 当条件为false，则执行这里代码 // 语句块2....&#125;</code></pre></blockquote></li></ol><p><strong>案例实践：判断用户输入的数是偶数还是奇数</strong></p><blockquote><ul><li>结合<code>%</code>来实现</li><li>如果一个数除以 2,能整除，也就是余数为 0，就是偶数，否则就是奇数</li></ul></blockquote><blockquote><pre><code>&lt;script&gt; // 弹出弹窗，让用户输入内容 var num = Number(prompt(&quot;请用户输入一个数字&quot;)); // 上面num接收过来的值，是字符串类型，不过num%2时num会自动做隐式类型转换，转换成数字 if (num % 2 == 0) &#123;   alert(num + &quot;他是一个偶数&quot;); &#125; else &#123;   alert(num + &quot;他是一个奇数&quot;); &#125;&lt;/script&gt;</code></pre><blockquote><p>但是如果用户啥也不输，以及<code>&#39;&#39;</code>和<code>&#39; &#39;</code>也会被转成 0，这里暂时不做讲解，下面案例中会完善</p></blockquote></blockquote><ol start="3"><li><code>if-else</code> if 多条件分支语句<blockquote><ul><li>如果条件 1 成立，则执行语句 1，后面的就不看了</li><li>如果条件 1 不成立，则看条件 2，如果条件 2 成立，则执行语句 2，如果不成立，则执行语句 3</li></ul><pre><code>if (条件1) &#123; // 条件2为真，执行这里的代码 // 语句 1....&#125; else if (条件2) &#123; // 条件1为假，条件2为真，执行这里代码 // 语句 2....&#125; else &#123; // 条件1和1都为假，执行这里代码 // 语句2....&#125;</code></pre></blockquote></li></ol><p><strong>案例实践 1：根据用户的输入的成绩，判断用户是在那个成绩档次</strong></p><table><thead><tr><th>分数</th><th>档次</th></tr></thead><tbody><tr><td>90-100</td><td>优秀</td></tr><tr><td>89-70</td><td>良好</td></tr><tr><td>69-60</td><td>一般</td></tr><tr><td>0-59</td><td>不及格</td></tr></tbody></table><blockquote><pre><code>&lt;script&gt; var score = prompt(&quot;请输入你的考试成绩！&quot;); if (score &gt;= 90) &#123;   alert(&quot;成绩优秀&quot;); &#125; else if (score &gt;= 70) &#123;   alert(&quot;成绩良好&quot;); &#125; else if (score &gt;= 60) &#123;   alert(&quot;成绩及一般&quot;); &#125; else &#123;   alert(&quot;成绩不及格&quot;); &#125;&lt;/script&gt;</code></pre></blockquote><p><strong>案例实践 2：判断用户输入的内容是否为数字</strong></p><blockquote><p>思路分析：</p><ul><li>用户<strong>输入</strong>的内容，都是字符串，我们要判断是否为数字，肯定是要把类型转换数字，看能不能转成功。</li><li>将字符串转成数字的方法有很多Number()、parseInt()、parseFloat()、+号，我们选那个呢？</li><li>Number()和+都可以，只要字符串不是纯数字，都会转成NaN，纯数字符串都会转成数字，但<code>&#39; &#39;</code>空格不行，会被转成<code>0</code></li><li>所以接下来，接下来<strong>先过滤</strong>不是纯数字字符串，再过滤<code>&#39; &#39;</code> 空格，剩下的就都是纯数字字符串了</li><li>要判断 Number()函数转换后的结果是不是 <code>NaN</code> 和数，有两种办法，<ul><li><code>isNaN</code> 用来判断一个数是不是数字，而 NaN 正好不是数字，</li><li>还可以用 NaN <strong>不自等</strong>的方法来判断。</li></ul></li><li>接下来要过滤<code>&#39; &#39;</code>，<code>&#39; &#39;</code>空格 和 数字，可以通过 <code>parseInt()</code>和 <code>isNaN</code> 结合</li><li>剩下的就都是 纯数字字符串了</li></ul><pre><code>&lt;script&gt; var num=prompt(&#39;请输入数字！&#39;); if(isNaN(Number(num)))&#123; // 如果条件成立，则num不是纯数字字符串，但不能过滤&#39;&#39; 空格     console.log(num+&#39;不是一个数字&#39;); &#125;else if (isNaN(parseInt(num)))&#123; // &#39;&#39;空格，会被转成NaN，NaN不是数字，为真，剩下的，就全都是纯数字了     console.log(num +&#39;不是一个数字&#39;); &#125;else&#123;     console.log(num+&#39;是一个纯数字&#39;); &#125;&lt;/script&gt;</code></pre></blockquote><p><strong>封装成方法使用：用来判断用户输入的是否是纯数字</strong></p><blockquote><pre><code>function isNumber(num) &#123; if (isNaN(+num)) &#123;   // 如果条件成立，则num不是纯数字字符串，但不能过滤&#39;&#39; 空格   return false; &#125; else if (isNaN(parseInt(num))) &#123;   // 识别空格或者没有输入任何值   return false; &#125; else &#123;   return true; &#125;&#125;</code></pre></blockquote><ol start="4"><li>if、if-else、if-else if 语句的嵌套<blockquote><pre><code>if()&#123;// 语句 1// 语句中可以嵌套 if()&#123;&#125;else&#123; &#125; 或if()else if()&#123;&#125;等if语句&#125;else&#123;// 语句 2// 语句2中可以嵌套 if()&#123;&#125;else&#123; &#125; 或if()else if()&#123;&#125;等if语句&#125;</code></pre></blockquote></li></ol><p><strong>案例实践 1：BMI 肥胖指数计算</strong></p><blockquote><ul><li>BMI 指数（Body Mass Index，身体质量指数）是用体重（以公斤为单位）除以身高（以米为单位）的<strong>平方</strong>得出的数字，是目前国际上常用的衡量人体胖瘦程度以及是否分赴康的标准。</li><li>BMI 指数 &#x3D; 体重 &#x2F; 身高 *身高<table><thead><tr><th>BMI值</th><th>分档</th></tr></thead><tbody><tr><td>低于 18.5</td><td>过瘦</td></tr><tr><td>18.5~24（不含）</td><td>正常</td></tr><tr><td>24~28（不含）</td><td>过胖</td></tr><tr><td>28~32（不含）</td><td>肥胖</td></tr><tr><td>大于等于 32</td><td>非常肥胖</td></tr></tbody></table></li></ul></blockquote><blockquote><pre><code>&lt;script&gt; // 要求用户输入身高,强制转换为数字 var height = parseFloat(prompt(&quot;请输入你的身高多少米&quot;)); // 要求用户输入体重 var weight = parseFloat(prompt(&quot;请输入你的体重&quot;)); // 判断输入是否合法 if (isNaN(height) || isNaN(weight)) &#123;   alert(&quot;你的输入有误！&quot;); &#125; else &#123;   // 计算得到BMI指数   var bmi = weight / (height * height);   // 分档判断   if (bmi &lt; 18.5) &#123;     alert(&quot;偏瘦&quot;);   &#125; else if (bmi &lt; 24) &#123;     alert(&quot;正常&quot;);   &#125; else if (bmi &lt; 28) &#123;     alert(&quot;过胖&quot;);   &#125; else if (bmi &lt; 32) &#123;     alert(&quot;肥胖&quot;);   &#125; else &#123;     alert(&quot;非常肥胖&quot;);   &#125; &#125;&lt;/script&gt;</code></pre><blockquote><ul><li>注意！<strong>不要写成</strong><code>bmi = (weight / height) * height</code>，结果不同，重量除的是身高的平方</li><li>规律：用<code>大于号</code>就从大到小进行匹配，用<code>小于号</code>就从小到大</li></ul></blockquote></blockquote><p><strong>案例实践 2：判断用户输入的数是偶数还是奇数</strong></p><blockquote><ul><li>利用前面封装好的：判断是否为纯数字</li></ul></blockquote><blockquote><pre><code>&lt;script&gt; var num = prompt(&quot;请用户输入一个数字&quot;); if (isNumber(num)) &#123;   if (num % 2 === 0) &#123;     alert(num + &quot;是一个偶数&quot;);   &#125; else &#123;     alert(num + &quot;是一个奇数&quot;);   &#125; &#125; else &#123;   alert(&quot;你的输入有误,请重新输入一次&quot;); &#125; // 封装好的，用来判断用户输入的是否是纯数字 function isNumber(num) &#123;   if (isNaN(+num)) &#123;     // 如果条件成立，则num不是纯数字字符串，但不能过滤&#39;&#39; 空格     return false;   &#125; else if (isNaN(parseInt(num))) &#123;     // 识别空格或者没有输入任何值     return false;   &#125; else &#123;     return true;   &#125; &#125;&lt;/script&gt;</code></pre></blockquote><p><strong>案例实践 3：游乐园门票计算</strong></p><blockquote><ul><li>某游乐园的门票价格如下表所示</li><li>请用户输入年龄和星期几，弹出对话框显示门票价格</li><li>星期日到星期一，分别用阿拉伯数字 0、1、2、3、4、5、6 表示</li></ul></blockquote><table><thead><tr><th></th><th>年龄大于 12 岁</th><th>年龄小于等于 12 岁</th></tr></thead><tbody><tr><td>平日</td><td>100</td><td>50</td></tr><tr><td>周末</td><td>200</td><td>150</td></tr></tbody></table><blockquote><p>两种实现思路：</p><ul><li>左图：先判断星期几，再判断年龄</li><li>右图：先判断年龄，再判断星期几</li></ul></blockquote><blockquote><pre><code>&lt;script&gt; // 自动获取当前日期 var date = new Date(); // 设置日期 var date = new Date(&quot;2022/9/912&quot;); // 获取当前星期，0-6分别表示星期日-星期六 var week = date.getDay(); // 让用户输入年龄 var age = Number(prompt(&quot;请输入你的年龄&quot;)); if (week == 0 || week == 6) &#123;   // 周末   if (age &gt; 12) &#123;     alert(&quot;周末门票价格&quot; + 200);   &#125; else &#123;     alert(&quot;周末门票价格&quot; + 150);   &#125; &#125; else &#123;   // 平日   if (age &gt;= 12) &#123;     alert(&quot;今天门票价格&quot; + 100);   &#125; else &#123;     alert(&quot;今天门票价格&quot; + 50);   &#125; &#125;&lt;/script&gt;</code></pre><blockquote><ul><li><code>new Date()</code>：获取当前日期</li><li><code>.getDay()</code>获取日期对应星期</li></ul></blockquote></blockquote><blockquote><blockquote><p>注：</p></blockquote><ul><li>在实际业务场景中，年龄也不会让用户自己输入，而是通过扫描身份证或输入身份证号来识别</li><li>身份证识别相关技术：<ul><li>百度 AI 实践案例，点击查看<a href="https://ai.baidu.com/tech/ocr_cards/idcard">https://ai.baidu.com/tech/ocr_cards/idcard</a></li><li>阿里云 AI 实践案例，点击查看<a href="https://ai.aliyun.com/ocr/card">https://ai.aliyun.com/ocr/card</a></li></ul></li></ul></blockquote><h3 id="二、switch语句"><a href="#二、switch语句" class="headerlink" title="二、switch语句"></a>二、switch语句</h3><blockquote><pre><code>switch (表达式或变量) &#123;  case 值1:    // 执行语句1....    break;  case 值2:    // 执行语句2....    break;  default:    // 执行语句3....    break;&#125;</code></pre></blockquote><ol><li>switch 语句基本用法<blockquote><p>swith 后面的表达式或变量会<strong>依次</strong>会与case 后面的值进行<strong>比较</strong>，比较时是<strong>全等比较</strong>，因此<strong>不会</strong>做数据类型转换</p><ul><li>如果比较结果为<code>true</code>，就会执行当前case下面的执行语句,执行到 <code>break</code> 关键字，就会跳出switch语句，<strong>退出</strong>执行。</li><li>如果比较结果为<code>false</code>，则继续<strong>往下</strong>比较，如果所有结果都为 false，则最后会执行 default 下面的语句。</li><li>当然 <code>default</code> 也可以省略不写</li></ul><pre><code>&lt;script&gt; var a = 1; // a的类型是数字，这里可以尝试把值换成 1,3看下结果 switch (a) &#123;   case &quot;1&quot;: // 1 与 &#39;1&#39; 在全等比较时，返回false 不成立，则继续与下一个case后面值比较     alert(&quot;这里是字符串1,匹配失败&quot;);</code></pre></blockquote></li></ol><blockquote><pre><code> break;</code></pre><p>   case 2: &#x2F;&#x2F; 1 与 2全等比较，false，继续往下比较<br>     alert(“这里是2,匹配失败”);<br>     break;<br>   case 1: &#x2F;&#x2F; 1 与 1 全等，则执行这个case后面的语句<br>     alert(“这里是1,匹配成功”); &#x2F;&#x2F; 在页面弹出弹窗<br>     break;<br>   default:<br>     alert(“找不到相匹配的内容”);<br>     break;<br> }<br>&#x2F;&#x2F;以上代码最后执行结果，最后在页面弹出弹窗，弹窗内容为 ‘这里是 1,匹配成功’<br></script></p><pre><code></code></pre></blockquote><blockquote><blockquote><ul><li>当switch()为表达式时，输出的结果是布尔值，用布尔值来与case值比较</li><li>在实际开发时，switch()括号中表达式的值，经常是以<strong>变量形式</strong>出现</li></ul></blockquote></blockquote><ol start="2"><li><p>break 不写会有什么影响</p><blockquote><ul><li>如果不写<code>break</code>，则会在匹配成功之后，后面所有case 都将被视为匹配，<strong>直到遇见break</strong>，才会退出。</li><li>所有在 switch 语句中，程序员必须主动调用break来跳出switch语句体</li></ul><pre><code>&lt;script&gt;  var a = 1;  switch (a) &#123; case 0: // 全等匹配失败   alert(&quot;这里是0,匹配成功&quot;); // 这里不会弹出来 case 1: // 全等匹配成功，下面代码会执行   alert(&quot;这里是1,匹配成功&quot;); // 这里会弹出来 // 但这个case中没有break，则会将后面所有case都被视为匹配，遇到break才退出 case 2:   alert(&quot;这里是字符串2,匹配成功&quot;); // 这里会弹出来   break; // 到这里退出 default:   alert(&quot;找不到相匹配的内容&quot;);   break;  &#125;&lt;/script&gt;</code></pre><blockquote><p>在上面的代码中，与第二个case匹配成功后，由于没有break会直接执行后续的case，直至遇到break跳出语句体</p></blockquote></blockquote></li><li><p>多条 case 共同一个语句体</p><blockquote><pre><code>var a = 1; switch (a) &#123;   case 1:   case 2:   case 3:     alert(&quot;现在是工作日，记得要早起喽！&quot;);</code></pre></blockquote></li></ol><blockquote><pre><code> break;</code></pre><p> }</p><pre><code>- 由于前两个case都没有语句和break，根据上一点可知，不管switch的值是1、2、3都会执行alert语句，再跳出语句体</code></pre></blockquote><p><strong>if语句形式</strong></p><blockquote><pre><code>&lt;script&gt; var week = 0; if (week == 1 || week == 2 || week == 3 || week == 4 || week == 5) &#123;   alert(&quot;现在是工作日，记得要早起喽！&quot;); &#125; else if (week == 0 || week == 6) &#123;   alert(&quot;今天是周末，尽情的享受吧&quot;); &#125;&lt;/script&gt;</code></pre></blockquote><p><strong>switch 语句</strong></p><blockquote><pre><code>&lt;script&gt; // week表时当前星期几 var week = 4; // var week=new Date().getDay();   自动获取当天是星期几的方法 switch (week) &#123;   case 1:   case 2:   case 3:   case 4:   case 5:     alert(&quot;现在是工作日，记得要早起喽！&quot;);     break;   case 6:   case 0:     alert(&quot;今天是周末，尽情的享受吧&quot;);     break; &#125;&lt;/script&gt;</code></pre></blockquote><ol start="4"><li>switch 表达式值为布尔值<blockquote><ul><li><code>case</code>的结果也要是布尔值或者为布尔值的表达式<br><strong>判断一个人是否是未成年人，如果满 18，就是成功，否则是未成年。</strong></li></ul><pre><code>&lt;script&gt; var a = Number(prompt(&quot;请输入你的年龄！&quot;)); switch (true) &#123;   case a &gt;= 18:     alert(&quot;成年人&quot;);</code></pre></blockquote></li></ol><blockquote><pre><code> break;</code></pre><p>   default:<br>     alert(“未成年”);<br>     break;<br> }<br></script></p><pre><code></code></pre></blockquote><ol start="5"><li>switch 的嵌套<blockquote><pre><code>switch()&#123;   case 值1:       // 执行语句</code></pre></blockquote></li></ol><blockquote><pre><code>   break;</code></pre><p>   case 值2:<br>       &#x2F;&#x2F; 执行语句<br>       switch(){<br>           case 值1:<br>               &#x2F;&#x2F; 执行语句<br>               break;<br>               &#x2F;&#x2F; …..<br>       }<br>       break;<br>       &#x2F;&#x2F; ……<br>}</p><pre><code></code></pre></blockquote><ol start="6"><li>switch 嵌套案例<br><strong>根据年份和对应的月份，判断月份天数</strong><blockquote><ul><li>1，3，5，7，8，10，12 月，每月 31 天</li><li>4，6，9，11 月，每月 30 天</li><li>当年为闰年 2 月 29 天，其它年份，2 月 28 天</li></ul><pre><code>&lt;script&gt; // var year=prompt(&#39;请输入当前年份&#39;) // var year=new Date().getFullYear(); 获取当前年份 var year = 2022; // 用户输入月份 var month = Number(prompt(&quot;请输出当前的月份&quot;)); // var month=new Date().getMonth()+1; 获取当前月份(new Date().getMonth()返回 0-11这间值,0代表1月) switch (month) &#123;   case 1:   case 3:   case 5:   case 7:   case 8:   case 10:   case 12:     alert(&quot;当月有31天&quot;);</code></pre></blockquote></li></ol><blockquote><pre><code> break;</code></pre><p>   case 4:<br>   case 6:<br>   case 9:<br>   case 11:<br>     alert(“当月有30天”);<br>     break;<br>   case 2:<br>     var isRunNian &#x3D;<br>       (year % 4 &#x3D;&#x3D; 0 &amp;&amp; year % 100 !&#x3D; 0) ||<br>       (year % 100 &#x3D;&#x3D; 0 &amp;&amp; year % 400 &#x3D;&#x3D; 0);<br>     switch (isRunNian) {<br>       case true:<br>         alert(“这个月有29天”);<br>         break;<br>       case false:<br>         alert(“这个月有28天”);<br>         break;<br>     }<br>     break;<br>   default:<br>     alert(“你输入的月份有误！”);<br> }<br></script></p><pre><code></code></pre></blockquote><ol start="7"><li>if 语句和 switch 语句应用场景总结<table><thead><tr><th>条件判断句</th><th>应用场景</th></tr></thead><tbody><tr><td>if 语句</td><td>根据条件做出判断，符合条件做什么，不符合条件做什么</td></tr><tr><td>switch</td><td>一个变量存在多个值的情况，根据不同的值来分别讨论时</td></tr></tbody></table></li></ol><h3 id="三、for循环"><a href="#三、for循环" class="headerlink" title="三、for循环"></a>三、for循环</h3><blockquote><p>如果我们想在页面中，重复执行某个操作时，我们就可以用到 for 循环语句。</p></blockquote><ol><li>for 语句的语法<blockquote><pre><code>// 在控制台输出从0-9的数字for (var i = 0; i &lt; 10; i++) &#123;  console.log(i);&#125;</code></pre></blockquote></li></ol><blockquote><p><strong>for 的圆括号中有三个表达式：</strong></p><ul><li>表达式<code>var i=0;</code>表示定义一个“循环变量”i，赋值为 0;</li><li>表达式<code>i &lt; 10;</code> 表示继续执行循环的条件，只要这个条件为真，则会一直执行；</li><li>表达式<code>i++</code>用来<strong>更新循环变量</strong>，使循环变量的值越来越趋向终点</li></ul></blockquote><ol start="2"><li><p>for 语句的执行机理</p><blockquote><p>我们先来看一个简单的 for 循环语句：<br><img src="for循环语句.png"></p><ul><li>首先会执行语句①</li><li>然后判断语句②是否满足，如果满足则<strong>进入循环体</strong>，执行语句 ③，如果不满足则退出循环</li><li>语句体中的语句执行完毕后，执行语句 ④</li><li>再次判断语句 ②是否满足，如果满足则进入循环体，执行语句 ③，如果不满足则退出循环</li><li>①–&gt;②–&gt;③–&gt;④–&gt;②–&gt;③–&gt;④–&gt;②–&gt;③–&gt;④…… 依次继续循环执行</li></ul></blockquote></li><li><p>准确遍历 for 循环</p></li></ol><p><strong>案例 1：</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3,6,9,12,15</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    当 i=3, 3&lt;=15, 满足条件，输出 3; 再执行i+=3更新循环变量，得到i=6    再次判断 i&lt;15这个条件， 即 6&lt;=15, 满足条件，输出 6;  再执行i+=3更新循环变量， 得到i=9    再次判断 i&lt;15这个条件，即 9&lt;=15, 满足条件，输出9; 再执行i+=3更新循环变量，得到 i=12    再次判断 i&lt;15这个条件，即 12&lt;=15, 满足条件，输出12; 再执行i+=3更新循环变量，得到 i=15    再次判断 i&lt;15这个条件，即 15&lt;=15, 满足条件，输出15; 再执行i+=3更新循环变量，得到 i=18    再次判断 i&lt;15这个条件，即 18&lt;=15, 不满足条件，退出for循环*/</span></code></pre></blockquote><p><strong>案例2：</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6,13</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*  当 i=2, i&lt;12, 满足条件，i+=4, 输出 6; 再执行i+=3 得到 i=9  当 i=9, i&lt;12, 满足条件，i+=4, 输出 13; 再执行 i+=3 得到 i=16  当 i=16, i&lt;12, 不满足条件，退出循环*/</span></code></pre></blockquote><p><strong>案例 4：无循环体语句</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不在循环体中，输出循环体结束时 i 的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span></code></pre></blockquote><p><strong>案例 5：死循环</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// i永远都会小于10 ，所以会进入死循环</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><strong>案例 6：</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没有任何输出，一开始就不满足条件</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在循环体外输出：i=10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><ol start="4"><li>for 循环案例<blockquote><blockquote><p>打断点：控制台–&gt;source–&gt;点击要选择的行–&gt;空白处右击重新加载–&gt;在watch里输入要监测的变量名–&gt;点击向下箭头就可以看到循环步骤<br><strong>求 1-10 之间所有数字之和</strong></p></blockquote><pre><code>// 这里一定要赋初始值为0，否则为undefined,在做+加法运算时，转换成NaN，NaN与任何数相加都得NaNvar sum = 0;for (var i = 1; i &lt;= 10; i++) &#123;  sum += i; // 等同于 sum=sum+i;&#125;console.log(sum); // 55</code></pre></blockquote></li></ol><p><strong>字符串的拼接（在页面输入 10 颗星星）</strong></p><blockquote><pre><code>// 一定要赋初值始，并且只能是&#39;&#39;字符符串。var str = &quot;&quot;;for (var i = 0; i &lt; 10; i++) &#123;  str += &quot;★&quot;;&#125;console.log(str); // ★★★★★★★★★★</code></pre></blockquote><ol start="5"><li><p>for 循环嵌套</p><blockquote><p>for 循环中可以嵌套 for 循环</p><pre><code>for (var i = 0; i &lt; 5; i++) &#123;  // ...循环体  for (var j = 0; j &lt; 5; j++) &#123; // ...循环体  &#125;&#125;</code></pre><p><strong>for 循环嵌套的执行原理</strong></p><ul><li>从<strong>最外层</strong> for 循环开始执行，执行到<strong>内部</strong> for 循环时，要把内部 for 循环<strong>执行完</strong></li><li>再<strong>更新最外层</strong>的循环变量，然后判条件是否成立，成立则执行循环体中代码，进入内部循环</li><li>内部循环全部执行完，再更新最外层循还变量……重复上面过程</li></ul></blockquote></li><li><p>for 循环嵌套案例</p></li></ol><p><strong>案例实践 1：打印五行七列的星星</strong></p><blockquote><pre><code>var str = &quot;&quot;;// 行for (var i = 0; i &lt; 5; i++) &#123;  // 列  for (var j = 0; j &lt; 7; j++) &#123;    str += &quot;★&quot;;  &#125;  str += &quot;\n&quot;;&#125;console.log(str);</code></pre><blockquote><p>换行用转义符<code>\n</code></p></blockquote></blockquote><p><strong>案例实践 2：打印 99 乘法表</strong><br><img src="99乘法表.png"></p><blockquote><pre><code>&lt;style&gt;  span &#123;    display: inline-block;    width: 100px;    line-height: 30px;    background-color: #ddd;    margin: 5px;    text-align: center;  &#125;&lt;/style&gt;&lt;script&gt;  // 最外层for循环打印对应行数  for (var i = 1; i &lt;= 9; i++) &#123;    // 内层for循环，打印对应列数    for (var j = 1; j &lt;= i; j++) &#123;      document.write(&quot;&lt;span&gt;&quot; + j + &quot;*&quot; + i + &quot;=&quot; + j * i + &quot;&lt;/span&gt;&quot;);    &#125;    document.write(&quot;&lt;br/&gt;&quot;);  &#125;&lt;/script&gt;</code></pre></blockquote><blockquote><ul><li><code>document.write();</code>：往body后面追加内容</li><li>用<code>span</code>标签包裹，<code>&lt;/br&gt;</code>换行</li></ul></blockquote><p><strong>总结规律：</strong></p><blockquote><ul><li>最<strong>外层</strong> for 循环对应的<strong>行数</strong></li><li>最<strong>内层</strong> for 循环对应每一行中的<strong>列</strong></li><li>在执行 for 嵌套时，首先要找的就是<strong>行和列的关系</strong>（当然最难的也就是找出列和行之间的关系）</li></ul></blockquote><p><strong>案例实践 3：打印下表中的 3 个图形</strong></p><blockquote><p><code>document.writeln</code>是向文档中写入一串文本，并紧跟着一个换行符（换行符会被编译成<strong>空格</strong>效果）<br><img src="图形打印.png"></p></blockquote><blockquote><p>原理：</p><ul><li>先打印空白，再打印方块</li></ul></blockquote><p><strong>等腰三角形</strong></p><blockquote><pre><code>&lt;script&gt;  // 行  for (var i = 0; i &lt;= 5; i++) &#123;    // 列左边空格    for (var j = 1; j &lt;= 5 - i; j++) &#123;      document.writeln(&quot;&amp;nbsp&quot;);    &#125;    // 列中口    for (var k = 0; k &lt; i + 1; k++) &#123;      document.writeln(&quot;口&quot;);    &#125;    document.writeln(&quot;&lt;/br&gt;&quot;);  &#125;&lt;/script&gt;</code></pre></blockquote><p><strong>v字型</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">// 图形行</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列前面空格</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列中第1个星星</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 每列两个星星中间的列空格</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> h <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">;</span> h<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列中第2个星星</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote><p><strong>X图形</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">// 打印 x的上半部分</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列前面空格</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列中第1个星星</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 每列两个星星中间的列空格</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> h <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">;</span> h<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列中第2个星星</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在v的底部，只要一个星，所以要去掉一个</span>        document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// x的下半部分</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列前面空格</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列中第1个星星</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 保证上v和下v中*的个数相同，则下v左边最后一个星要去掉</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 每列两个星星中间的列空格</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> h <span class="token operator">&lt;=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> h<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列中第2个星星</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote><blockquote><blockquote><p>总结：</p><ul><li>首先切分图形，<strong>空白处和图形处</strong>(一个for循环里的不同子for循环)；还可以分为<strong>上下</strong>两部分(X字型,写在两个for循环里，会自动拼接)</li><li>也可以组合空格和图形，例如等腰三角形的例子，方块之间有空格，所以把方块和空格组合起来</li><li>写下每行对应列数，更加容易摸清规律</li></ul></blockquote></blockquote><h3 id="四、for循环算法题"><a href="#四、for循环算法题" class="headerlink" title="四、for循环算法题"></a>四、for循环算法题</h3><blockquote><ul><li>关于什么是算法，我们先不讲，我们做两道算法题，来找找感觉，然后在本章的第九个版块，我们会再深入探讨算法。</li><li>在接下来的算法题中，我们会接触 2 个重要的概念：累加器、累乘器。</li></ul></blockquote><ol><li>计算 1+2+3+ …… +99+100 的和<blockquote><blockquote><p>求 1+2+3+…..+99+100 的和，本质就是等差数列求和<br><strong>什么是等差数列 ？</strong></p></blockquote><ul><li>等差数列：如果一个数列从第二项起，每一项与它的前一项的差等于同一个常数，这个数列就叫做等差数列</li><li>如：1，2，3，4，5，6….. 或 1，3，5，7，9，11，….</li><li>如果我们要计算等差数列的求和，在数学中是有计算公式的，也就是前面讲到的高斯算法：<ul><li>计算等差数列前 n 项和：Sn&#x3D;(n*(a1+an))&#x2F;2</li><li>a1代表首项，a2 代表第 2 项…..an 代表第 n 项</li></ul></li></ul></blockquote></li></ol><blockquote><ul><li>在计算机中，并没有等差数的求和公式，我们必须一项一项的加起来，就要用到 <strong>for</strong> 循环</li><li>在 JS 中，我们使用<strong>累加器</strong>来操作</li></ul></blockquote><blockquote><pre><code>// 创建累加器var sum=0;// 遍历1到100的每一个数字，每遍历一个数字就要把这个数字加到sum中去for(var i=1;i&lt;=100;i++)&#123;  sum+=i;  i++;&#125;console.log(sum);</code></pre></blockquote><blockquote><ul><li>累加器（变量 sum)必须定义在循环外面的前面，不能写在循环体语句里</li><li>累加器的初始值必须设置，而且必须设置为 <code>0</code>，不会影响累加结果</li><li>使用最终累加<strong>结果</strong>时，必须在 for 循环结束后的<strong>外面</strong></li><li>很多 JS 大神喜欢将 sum 这样的变量，书写在 for 循环的括号中</li></ul><pre><code>// 循环开始的时候定义sum，sum就是累加器，初始值是0// 遍历1到100的每一个数字，每遍历一个数字要把这个数字加到sum中去for (var i = 1, sum = 0; i &lt;= 100; i++) &#123;  sum += i;&#125;// 输出累加器的值console.log(sum);</code></pre></blockquote><ol start="2"><li>计算 10 的阶乘<blockquote><ul><li>一个<strong>正整数</strong>的阶乘（factorial）是所有小于及等于该数的正整数的积，并且 <strong>0 的阶乘为 1</strong>。</li><li>自然数 n 的阶乘写作 <code>n!</code></li><li>在 JS 中，我们使用<strong>累乘器</strong>来操作</li></ul><pre><code> // 累乘器,初始值必须是1 var n = 1; for (var i = 10; i &gt;= 1; i--)&#123;     // 将每一次的数据 i 要累乘到 n 中去     n *= i; &#125; // 循环结束后使用累乘结果 console.log(n); // 3628800</code></pre></blockquote></li></ol><blockquote><ul><li>累乘器必须<strong>定义</strong>在循环外部前面</li><li>累乘器的初始值必须是 <code>1</code>，因为 1 乘以任何数都等于本身</li><li>累乘器最终<strong>结果</strong>必须在 for 循环结束后的外面</li></ul></blockquote><h3 id="五、while-循环"><a href="#五、while-循环" class="headerlink" title="五、while 循环"></a>五、while 循环</h3><blockquote><ul><li>while 表示 “当” 的意思，是一种<strong>先测试语句</strong>，和 for 循环一样，先测试条件，根据测试条件再判断是否执行行环循体中代码</li><li>while括号里放的是：使循环继续的条件</li></ul></blockquote><blockquote><pre><code>while (测试条件) &#123;  // 执行语句，代码块&#125;</code></pre><img src="while循环.png"></blockquote><ol><li><p>while 循环注意事项</p><blockquote><ul><li>while 语句事先<strong>不指定</strong>循环开始、结束的范围，只要测试条件满足，就一直执行循环体</li><li>所以 while 循环体内的语句，必须使循环测试条件<strong>趋向不成立</strong>，否则会死循环</li><li>while 循环没有指定循环的变量，必须在循环外定义好循环的变量</li><li>while 循环体内要更新循环变量</li></ul></blockquote></li><li><p>更适合 while 的应用场景</p><blockquote><ul><li>while 循环更适合，没有定范围的循环，根据结果，找条件</li></ul></blockquote></li></ol><p><strong>应用实践 1：寻找 n^2大于 23450 的最小整数</strong></p><blockquote><pre><code>var n=0;while(n*n&lt;=23450)&#123;  n++;&#125;console.log(n);</code></pre></blockquote><p><strong>应用实践 2：</strong></p><blockquote><p>小兔子拔萝卜，第 1 天拔 1 个，第 2 天拔 2 个，第 3 天拔 3 个 …. 以此类推。请问小兔子多少天能把 500 个萝卜扒光 ？</p></blockquote><p><strong>题目解析：</strong></p><blockquote><ul><li>当等差数列 1,2,3,4….n-1,n 之和第一次&gt;500 时，这里的 n 就是我们要找的 n</li><li>所以我们需要有一个累加器来累加所有天数萝卜之和，当累加器的值&lt;500 时，就一直累加，加到&gt;500 时，就不加了。</li></ul></blockquote><blockquote><pre><code>var sum=0;var day=1;while(sum&lt;=500)&#123;  sum+=day;  day++;&#125;console.log(day-1);</code></pre><blockquote><p>注意：天数需要减1，因为当sum到500时，day++后才会到判断条件这步</p></blockquote></blockquote><h3 id="六、do-while-循环"><a href="#六、do-while-循环" class="headerlink" title="六、do while 循环"></a>六、do while 循环</h3><img src="do%20while.png"><blockquote><pre><code>do &#123;  // 循环体&#125; while (循环执行条件);</code></pre><blockquote><p>while()放的是：使循环继续的条件，当这个条件不满足时，就跳出循环</p></blockquote></blockquote><p><strong>详细解读</strong></p><blockquote><ul><li><code>do while</code>循环是一种 <strong>后测试</strong>循环语句，这一点和 while 和 for 都不一样。</li><li>for循环和while循环每次都是 “先测试条件是否满足，然后执行循环体”</li><li>do while 循环是 “先执行循环，然后测试条件是否满足”</li><li>循环体一定会至少执行一次，然后再检测循环执行条件是否为 true，决定是否继续执行循环体。</li><li>do while 循环将循环执行条件写到了循环体的后面</li><li>循环语句要更新循环变量</li></ul></blockquote><ol><li><p>随机数函数</p><blockquote><p>之前讲到过随机数函数：Math.random()方法，可以得到 0-1 之间的小数</p><ul><li><code>Math.random()方法，可以得到 0-1 之间的小数</code></li></ul></blockquote></li><li><p>更适合 do while 的应用场景</p><blockquote><ul><li>先运行一次代码，再进行条件判断</li></ul></blockquote></li></ol><p><strong>应用实践 1：</strong></p><blockquote><p>随机生成 2 个 1-10 之内的整数，但是这 2 个数之和要等于 10</p><pre><code> do &#123;    var a = (Math.random() * 10 + 1) &gt;&gt; 0;    var b = (Math.random() * 10 + 1) &gt;&gt; 0;    var sum = a + b;      &#125; while (sum != 10);      console.log(a, b, sum);</code></pre></blockquote><p><strong>应用实践 2：</strong></p><blockquote><p>随机移动元素的位置</p><ul><li>在做游戏开发和动画的时候，我们想随机生成两个数 a 和 b，作为元素在 x，y 轴方向上的移动距离</li><li>要求 a 和 b 的值均在[-10 , 10]区间随机整数</li><li>但 a 和 b，<strong>不能同时</strong>为 0</li></ul><pre><code>do &#123;    var a = (Math.random() * 21 - 10) &gt;&gt; 0;    var b = (Math.random() * 21 - 10) &gt;&gt; 0;   &#125; while (a == 0 &amp;&amp; b == 0);console.log(a, b);</code></pre></blockquote><h3 id="七、循环语句总结"><a href="#七、循环语句总结" class="headerlink" title="七、循环语句总结"></a>七、循环语句总结</h3><table><thead><tr><th>循环类型</th><th>语法</th><th>使用场景</th></tr></thead><tbody><tr><td>for 循环</td><td>for(语句 1; 语句 2; 语句 3){被执行的代码块;}</td><td>循环次数是固定的,知道明确的循环范围</td></tr><tr><td>while循环</td><td>while(条件){需要执行的代码;变量变化语句;}</td><td>循环次数不定,更适合根据结果，找条件</td></tr><tr><td>do … while 循环</td><td>do {需要执行的代码;}while(条件)</td><td>先运行一次代码，如果不符合条件再重做，符合就不做了。其不满足条件，是在事情做完后产生的。</td></tr></tbody></table><h3 id="八、break、continue、label-语句"><a href="#八、break、continue、label-语句" class="headerlink" title="八、break、continue、label 语句"></a>八、break、continue、label 语句</h3><blockquote><p>break 和 continue 语句为执行循环代码提供了更严格的控制手段</p></blockquote><ol><li>break 语句<br><strong>什么时候用 ？</strong><blockquote><ul><li>break 语句用于<strong>立即</strong>退出<strong>当前循环</strong>，他只能用在<strong>循环语句</strong>中，如 <code>for</code> 循环和 <code>while</code> 循环中都可以(if和switch不可以，他们是分支结构语句)</li></ul></blockquote></li></ol><blockquote><ul><li>break 在 for 嵌套中，他只会退出他<strong>所在的</strong>那个 for 循环语句，然后<strong>继续执行</strong>当前 for <strong>循环外</strong>的 for 循环体中语句</li></ul><pre><code>&lt;script&gt;  for (var i = 0; i &lt; 4; i++) &#123;    for (var j = 0; j &lt; 4; j++) &#123;      if (j == 3) &#123;        break; // 每次执行到j==3时，就会退出当前for循环，继续执行当前for外的for循环      &#125;      console.log(i + &quot;-&quot; + j);    &#125;    console.log(&quot;j&quot; + j); // break退出for时，会从这里开始执行下一次的外层for循环//i=0 j=0,0-0 j=1,0-1 j=2,0-2 j=3,&quot;j&quot;3//i=1,j=0,1-0 j=1,1-1 j=2,1-2 j=3,&quot;j&quot;3//……  &#125;&lt;/script&gt;</code></pre></blockquote><blockquote><ul><li>break 用在 while 语句中，通常和while(true){}搭配使用</li></ul><pre><code>// 寻找最小的满足 n^2 &gt; 23450 的整数n// 方法一var n = 1;while (n * n &lt;= 23450) &#123;  n++;&#125;console.log(n); //154</code></pre></blockquote><p>&#x2F;&#x2F; 方法二<br>var n &#x3D; 1;<br>while (true) {<br>  if (n * n &gt; 23450) {<br>    break;<br>  }<br>  n++;<br>}<br>&#x2F;&#x2F; 输出：154</p><blockquote><pre><code></code></pre></blockquote><ol start="2"><li><p>continue 语句</p><blockquote><ul><li>continue 用于跳过循环中的<strong>一个迭代</strong> ，并<strong>继续执行</strong>循环中的<strong>下一个</strong>迭代，for 循环更经常使用 continue</li><li>continue 在 <strong>for 嵌套</strong>中，也是跳过<strong>当前循环</strong>中的一个迭代，并继续执行循环中的下一个迭代</li></ul><pre><code>&lt;script&gt;  for (var i = 0; i &lt; 4; i++) &#123; for (var j = 0; j &lt; 4; j++) &#123;   if (j == 2) &#123;     continue;   &#125;   console.log(i + &quot;-&quot; + j); &#125;  &#125;//i=0 j=0,0-0 j=1,0-1 j=2(停止该次循环) j=3,0-3 //i=1 j=0,1-0 j=1,1-1 j=2(停止该次循环) j=3,0-3//…… &lt;/script&gt;</code></pre></blockquote></li><li><p>label 语句</p><blockquote><p>我们上面讲过，不管是 <code>continue</code> 还是 <code>break</code>，他最多能退出的也就是当前的 <code>for</code> 循环，如果我想退出<strong>最外层</strong>的 for 循环，那就可以借助这里的 <code>label</code></p><blockquote><p>在实际开发应用不多，了解即可</p></blockquote></blockquote></li></ol><blockquote><p><code>label: statement</code></p><ul><li>label 表示标签名，这个名字是可以<strong>自定义</strong>的标识符</li><li>statement 表示代码块</li><li>label 标签名和 statement 代码块之间使用英文状态下的<strong>冒号</strong>分隔</li><li>label 标签一般都是与 for 循环语句等<strong>循环语句</strong>配合使用,同时是由 break 和 continue 语句<strong>引用</strong>的。</li></ul></blockquote><p><strong>label 标签与 continue 语句结合</strong></p><blockquote><p>表示退出到 label 标记位置，继续从 label 标签标识的 for 循环开始执行下一次循环</p><pre><code>// outer就是label标签，用来标识第一个for循环语句，其名字outer可以自定义，不一定是outerouter: for (var i = 0; i &lt; 4; i++) &#123;  for (var j = 0; j &lt; 4; j++) &#123;    if (j == 2) &#123;      continue outer;    &#125;    console.log(i + &quot;-&quot; + j);  &#125;  console.log(&quot;j&quot; + j); // 永远不会执行&#125;//i=0 j=0,0-0 j=1,0-1 j=2 //i=1 j=0,1-0 j=1,1-1 j=2</code></pre></blockquote><p><strong>label 标签与 break 语句结合</strong></p><blockquote><p>表示立即退出到 label 标签标识后的 for 循环，<strong>不再执行</strong></p><pre><code>// outer就是label标签，其名字可以自定义，不一定是outerouter: for (var i = 0; i &lt; 4; i++) &#123;  for (var j = 0; j &lt; 4; j++) &#123;    if (j == 2) &#123;      break outer;    &#125;    console.log(i + &quot;-&quot; + j);  &#125;  console.log(&quot;j&quot; + j); // 永远不会执行//i=0 j=0,0-0 j=1,0-1 j=2(立即停止)&#125;</code></pre></blockquote><ol start="4"><li>关于break、continue、label语句总结<table><thead><tr><th>语句</th><th>描述</th></tr></thead><tbody><tr><td>break</td><td>break语句用于立即<strong>退出当前循环</strong>，他只能用在循环语句中，如for循环和while循环中都可以</td></tr><tr><td>continue</td><td>continue 用于跳过循环中的<strong>一个迭代</strong> ，并继续执行循环中的下一个迭代</td></tr><tr><td>label</td><td>与break配合：表示立即退出到label标签标识后的for循环，<strong>不再执行</strong>。与continue配合：表示退出到label标记位置，继续从label标签标识的for循环<strong>开始执行下一次循环</strong></td></tr></tbody></table></li></ol><blockquote><pre><code>var str = &quot;icoding123&quot;;var num = parseInt(str);if (num == NaN) &#123;    alert(NaN);&#125; else &#123;    alert(str);&#125;//alert(&quot;icoding123&quot;)</code></pre><blockquote><p>NaN永远不等于NaN</p></blockquote></blockquote><blockquote><pre><code>var a = 1;var b = 0;var str1 = &quot;&quot;;var str2 = false;if (a || b || str1) &#123;  //1 || &quot;&quot; --&gt;true    alert(a + b + str1);  //a+b做加法运算=1,1+&quot;&quot;做字符串拼接=1&#125;if (a &amp;&amp; b &amp;&amp; !str2) &#123;  //false &amp;&amp; true--&gt;false    alert(!str2);&#125;if (a &amp;&amp; !str1 &amp;&amp; !str2) &#123;  //true &amp;&amp; true    alert(!str1);  //alert(true);&#125;//alert(1);//alert(true);</code></pre><blockquote><p>当+号两边的数都是数值时，做加法运算，否则为”连字符”（字符串的拼接）<br>只有if括号里为true时才会执行</p></blockquote></blockquote><h3 id="九、算法"><a href="#九、算法" class="headerlink" title="九、算法"></a>九、算法</h3><h4 id="到底什么是算法-？"><a href="#到底什么是算法-？" class="headerlink" title="到底什么是算法 ？"></a>到底什么是算法 ？</h4><blockquote><ul><li>在<strong>数学领域</strong>中，算法是用来解决某一类问题的公式和思想。</li><li>而在<strong>计算机科学领域</strong>中，它本质是一系列<strong>程序指令</strong>，用来解决特定的运算和逻辑问题。</li><li>在计算机中，算法就是把一个问题，拆解为计算机能够一步一步执行的<strong>步骤</strong></li></ul></blockquote><ol><li><p><strong>衡量算法的好坏：</strong></p><blockquote><blockquote><p>算法有简单的也有复杂的，衡量算法的好环有以下几个指标</p></blockquote><ul><li>时间复杂度：代码运行得到结果所花的时间</li><li>空间复杂度： 代码运行是所占用的内存空间大小</li><li>正确性（经得起时间、规模、大范围应用也不会出错）</li><li>健壮性：是指一个计算机系统在执行过程中处理错误,以及算法在遭遇输入、运算等异常时继续正常运行的能力</li><li>可读性</li></ul></blockquote></li><li><p><strong>计算机的优势</strong></p><blockquote><ul><li>计算机最突出的能力就是<strong>计算</strong>，它<strong>没有</strong>归纳总结、逻辑推理的能力。</li><li>所以人们使用计算机解决问题的时候，要”扬长避短”</li><li>充分发挥计算机的计算优势，而<strong>不要</strong>让它进行逻辑推理</li></ul></blockquote></li></ol><blockquote><ul><li>但并不意味着，我们就可以完全不考虑计算机在计算一个算法时所需要<strong>耗费的时间</strong>和<strong>占用的内存</strong>。相同的结果，肯定是耗时越小，占用的内存空间越小越好了。</li><li>所以我们在写算法时，需要考虑<strong>算法的复杂度</strong>，那什么是算法的复杂度呢 ？我们暂时不学习，我们先做几道算法题，找找感觉，然后再下下节课，我们来重点学习算法的复杂度。</li></ul></blockquote><h4 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h4><blockquote><p>由用户输入数字 n，请计算下面算式的值:</p><ul><li>3&#x2F;2+4&#x2F;3+5&#x2F;4+……+(n+1&#x2F;n)<br><strong>首先我们来找规律：</strong></li><li>第一项是分母是从 <code>2</code> 开始的，每一项分子比分母大 1</li><li>所以在 for 循环，遍历时，只需要遍历分母就好，分母为 i ，分子为 i+1</li></ul><pre><code>// 由用户输入数字n,计算 3/2 + 4/3 + 5/4 + ... + (n+1)/n 的结果</code></pre></blockquote><p>&#x2F;&#x2F; 用户输入数字n<br>var n &#x3D; Number(prompt(“请输入数字n”));</p><blockquote></blockquote><p>&#x2F;&#x2F; 累加器<br>var sum &#x3D; 0;<br>&#x2F;&#x2F; 遍历分母就可以了，因为分子就是分母加1有关系<br>for (var i &#x3D; 2; i &lt;&#x3D; n; i++) {<br>  sum +&#x3D; (i + 1) &#x2F; i; &#x2F;&#x2F; 每一项值 i+1&#x2F;i<br>}<br>&#x2F;&#x2F; 输出累加结果<br>alert(sum.toFixed(2)); &#x2F;&#x2F; 这里要特别注意小数的处理</p><blockquote><pre><code></code></pre></blockquote><h4 id="累乘器"><a href="#累乘器" class="headerlink" title="累乘器"></a>累乘器</h4><blockquote><p>由用户输入数字 n，请计算 n 的阶乘</p></blockquote><h4 id="累加器与累乘器的结合"><a href="#累加器与累乘器的结合" class="headerlink" title="累加器与累乘器的结合"></a>累加器与累乘器的结合</h4><blockquote><p>大厂经典面试真题：计算圆周率 π</p><ul><li>π &#x3D; <code>2 * (1 + 1/3 + (1*2)/(3*5) + (1*2*3)/(3*5*7) + (1*2*3*4)/(3*5*7*9)) + (1*2* ... *n)/(3*5*...*(2n+1));</code></li><li>第一步：找规律 ，除去第 1 项，每一项都等于前一项 * n&#x2F;(n*2+1)</li><li>这里需要用到累乘器来计算出每一项的值</li><li>然后利用累加器，把每一项加起来</li></ul><pre><code>// 累加器，就是最后的答案var sum = 0;// 累乘器，用来制作每一项，制作出来的这个项，要往累加器中累加var item = 1;</code></pre></blockquote><p>&#x2F;&#x2F; 让用户输入n<br>var n &#x3D; Number(prompt(“请输入数字n”));</p><blockquote></blockquote><p>&#x2F;&#x2F; 遍历<br>for (var i &#x3D; 1; i &lt;&#x3D; n; i++) {<br>  &#x2F;&#x2F; 要先制作项目<br>  item *&#x3D; i &#x2F; (2 * i + 1);<br>  console.log(item);<br>  &#x2F;&#x2F; 把每一项往累加器中累加<br>  sum +&#x3D; item;<br>}</p><blockquote></blockquote><p>&#x2F;&#x2F; 显示结果<br>alert((1 + sum) * 2);</p><blockquote><pre><code>&gt;算法题最难的点在于找到背后的规律，和相关的一些通用处理算法的技巧。</code></pre></blockquote><h4 id="穷举法"><a href="#穷举法" class="headerlink" title="穷举法"></a>穷举法</h4><blockquote><p>穷举法的基本思想是根据题目的部分条件确定答案的<strong>大致范围</strong>，并在此范围内对所有的情况<strong>逐一验证</strong>，直到全部情况验证完毕。</p><ul><li>若某个情况验证符合题目的全部条件，则为本问题的一个解</li><li>若全部情况验证后都不符合题目的全部条件，则本题无解。</li><li>穷举法也称为枚举法。</li><li>穷举法是一种算法思想，把在条件范围内的所有情况都逐一验证一遍。</li></ul></blockquote><ol><li>穷举法应用1：寻找能被整除的数<blockquote><p>寻找 100 以内的既能被 3 整除，也能被 5 整除的数字<br><img src="穷举法1.png"></p></blockquote></li></ol><blockquote><blockquote><p>计算机不会找规律 和逻辑推理，他最大的优势就是强大的计算能力</p></blockquote><pre><code>// 寻找100以内的既能被3整除，也能被5整除的数字// 穷举法，从1开始实验for (var i = 1; i &lt;= 100; i++) &#123;  if (i % 3 == 0 &amp;&amp; i % 5 == 0) &#123;    console.log(i); // 15、30、45、60、75、90  &#125;&#125;</code></pre></blockquote><ol start="2"><li>穷举法应用：寻找约数<blockquote><p><strong>什么是约数</strong><br><code>48的约数 ： 1、2、3、4、6、8、12、16、24、48</code></p><ul><li>这些数字都是能够被48整除的</li><li>或者说 让48除以这些数字，余数都是0</li></ul><pre><code>// 用户输入数字 nvar n = prompt(&quot;请输入数字&quot;);// 穷举法 从1开始验证for (var i = 1; i &lt;= n; i++) &#123;  if (n % i == 0) &#123; console.log(i);  &#125;&#125;</code></pre></blockquote></li></ol><blockquote><blockquote><p>除去操作符两边的操作数都是字符串这种情况外，其它情况在在作<strong>比较</strong>时(<code>i&lt;=n</code>)，会先自动调用<code>Number()函数</code>，将非数字类型转换为数字 （<strong>隐式转换</strong>） ，然后再进行比较。 所以可以不用写成<code>n = Number(prompt(&quot;请输入数字&quot;))</code>;</p></blockquote></blockquote><ol start="3"><li><p>穷举法应用：寻找符合条件的数字</p><blockquote><p>请问 <code>1~100</code> 中哪个数字除以 3 余 1，除以 4 余 2，除以 5 余 3 ？</p><pre><code>// 使用穷举法for (var i = 1; i &lt;= 100; i++) &#123;  if (i % 3 == 1 &amp;&amp; i % 4 == 2 &amp;&amp; i % 5 == 3) &#123; console.log(i); // 58  &#125;&#125;</code></pre></blockquote></li><li><p>穷举法应用：求水仙花数</p><blockquote><p>请输入一个三位数，判断这个数是不是水仙花数<br><strong>什么是水仙花数 ？</strong></p><ul><li>如果一个数是水仙花数，那么这个数的个位 3 次方+十位数的 3 次方+百位数的 3 次方&#x3D;这个数本身</li><li>如 153 ,其中 13 + 53 + 33&#x3D;153 ，这里的 153 就是水仙花数</li><li>如 154，其中 13 + 53 + 43 &#x3D; 190，所以这里的 154 不是水仙花数<br><strong>关键点在于拆数</strong></li><li>方法1：<ul><li>百位：&#x2F;100取整(123&#x2F;100&#x3D;1.23)</li><li>十位：&#x2F;10取整–&gt;%10(123&#x2F;10&#x3D;12%10&#x3D;2)</li><li>个位：%10取整(123%10&#x3D;3)</li></ul></li><li>方法2：<code>str.charAt(index)</code><ul><li>str.charAt(index); str 要检索的字符串，index 查找的索引，字符串中第一个字符下标是 0，index 为正整数</li><li>从左至右分别是0位、1位、……</li></ul></li></ul></blockquote></li></ol><p><strong>方法1：</strong></p><blockquote><pre><code> var n = Number(prompt(&quot;请输入一个3位数的整数&quot;));  if (n &gt;= 100 &amp;&amp; n &lt;= 999 &amp;&amp; n.length == 3) &#123;    var a = parseInt(n / 100);    var b = parseInt(n / 10) % 10;    var c = n % 10;    if (a * a * a + b * b * b + c * c * c == n) &#123;      alert(n + &quot;是水仙花数&quot;);    &#125; else &#123;      alert(n + &quot;不是水仙花数&quot;);    &#125;  &#125; else &#123;    alert(&quot;你输入的数字不合法！&quot;);  &#125;</code></pre><blockquote><p>数字长度用n.length检验</p></blockquote></blockquote><p><strong>方法2：</strong></p><blockquote><pre><code> var n = prompt(&quot;请输入一个3位数的整数&quot;);  if (n &gt;= 100 &amp;&amp; n &lt;= 999 &amp;&amp; n.length == 3) &#123;    var a = n.charAt(0);    var b = n.charAt(1);    var c = n.charAt(2);    if (a * a * a + b * b * b + c * c * c == n) &#123;      alert(n + &quot;是水仙花数&quot;);    &#125; else &#123;      alert(n + &quot;不是水仙花数&quot;);    &#125;  &#125; else &#123;    alert(&quot;你输入的数字不合法！&quot;);  &#125;</code></pre></blockquote><ol start="5"><li><p>穷举法应用：寻找质数(反推)</p><blockquote><p>请寻找 1 ~ 100 的所有质数</p><ul><li>质数：只能被 1 和它本身整除的数字，<strong>最小的质数是 2</strong></li><li>比如：2、3、5、7、11、13、17、19、23、29 ……<blockquote><p>反推，能被除<strong>1和自身</strong>以外的数整除的就不是质数</p></blockquote></li></ul><pre><code>// 穷举法outer: for (var i = 2; i &lt;= 100; i++) &#123;  // 内层循环开始从2开始到小于这个数字的每一个数字都尝试除i,如果能够整除，说明它不是质数，就可以筛选下一个数字了  for (var j = 2; j &lt; i; j++) &#123; if (i % j == 0) &#123;   // 说明数字 i不是质数，因为它找到了除1和它自身之外的约数了   // continue表示放弃这个数字，开始迭代下个数字，continue它负责的是它所在的最内层的for循环   // 要给for循环加上label,然后在continue的后面加上这个label   // 这样就表示立即开始迭代外层for循环的下一个数字了，而不是内层for循环   continue outer; &#125;  &#125;  // 能够遇见这条语句的数字i,一定是质数，否则就被continue略过了  console.log(i);&#125;</code></pre></blockquote></li><li><p>穷举法应用：鸡兔同笼</p><blockquote><p>“今有雉兔同笼，上有三十五头，下有九十四足，问雉兔各几何 ？”<br><strong>数学方法解题思路：</strong></p><ul><li>鸡和兔子各有一个头：a + b &#x3D; 35</li><li>鸡有 2 只脚，兔子有 4 只脚：2a + 4b &#x3D; 94</li></ul><pre><code>// 鸡兔同笼</code></pre></blockquote><p>&#x2F;&#x2F; 方法1：<br>&#x2F;&#x2F; 假设小鸡有a只，兔子有b只<br>for (var a &#x3D; 0; a &lt;&#x3D; 35; a++) {<br>  for (var b &#x3D; 0; b &lt;&#x3D; 35; b++) {<br> if (a + b &#x3D;&#x3D; 35 &amp;&amp; 2 * a + 4 * b &#x3D;&#x3D; 94) {<br>   console.log(“小鸡有：” + a + “只，兔子有：” + b + “只。”); &#x2F;&#x2F; 小鸡有：23只，兔子有：12只。<br> }<br>  }<br>}</p><blockquote></blockquote><p>&#x2F;&#x2F; 方法2：优化算法（减少for循环的次数）<br>for (var a &#x3D; 0; a &lt;&#x3D; 35; a++) {<br>  var b &#x3D; 35 - a;<br>  if (2 * a + 4 * b &#x3D;&#x3D; 94) {<br> console.log(“小鸡有：” + a + “只，兔子有：” + b + “只。”); &#x2F;&#x2F; 小鸡有：23只，兔子有：12只。<br>  }<br>}</p><blockquote><pre><code></code></pre></blockquote></li></ol><h3 id="十、算法如何学习-？"><a href="#十、算法如何学习-？" class="headerlink" title="十、算法如何学习 ？"></a>十、算法如何学习 ？</h3><blockquote><p>在早期，我们学算法，学数据结构，最重要的是学基本功，只有把基本功学好了，算法的基本功就是算法的复杂度和数据结构。然后</p><ul><li>多敲、多练、多总结</li><li>经典的业务需求场景要熟记，多实践</li><li>多寻找算法题，进行练习</li><li>有了一定基础后，推荐在力扣上刷算法题：<a href="https://leetcode.cn/problemset/algorithms/">https://leetcode.cn/problemset/algorithms/</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（二）</title>
      <link href="/2023/12/02/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/12/02/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="JS表达式、操作符、位运算符"><a href="#JS表达式、操作符、位运算符" class="headerlink" title="JS表达式、操作符、位运算符"></a>JS表达式、操作符、位运算符</h2><blockquote><ul><li>操作符： 操作符，也称为运算符，是用于实现赋值、比较值、执行算术运算等功能的符号</li><li>表达式： 简单理解为是由<strong>数字、操作符、变量</strong>等组成的式子，并且这个式子<strong>能求得值</strong>。</li><li>返回值： 表达式最终都会有一个返回结果，这个结果我们称为返回值</li></ul></blockquote><blockquote><p><strong>表达式的分类</strong></p><ul><li>在 JS 中表达式的种类非常多，这里我们主要讲解以下 5 种表达式。</li><li>每种表达式就有与之相匹配的操作符。<img src="表达式的分类.png"></li></ul></blockquote><h3 id="一、算术运算符"><a href="#一、算术运算符" class="headerlink" title="一、算术运算符"></a>一、算术运算符</h3><blockquote><ul><li>说到算术表达式就离不开算术运算符。</li><li>算术运算符：用于执行两个变量或值的算术操作符。<table><thead><tr><th>算术运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>&#x2F;</td><td>除</td></tr><tr><td>%</td><td>取余（取模）</td></tr></tbody></table></li></ul></blockquote><ol><li><p>介绍</p><blockquote><ul><li>加减的符号和数学一致，乘法是 * 号，除法是 &#x2F; 号</li><li>%取余运算符：<ul><li>取余运算也叫作 “求模运算” ，用百分号”%”表示</li><li>a % b 表示，求 a 除以 b 的余数，它不关心整数部分，只关心余数<blockquote><p>任何数%模上大于他自身的数，结果是就是这个数本身</p></blockquote></li></ul></li></ul></blockquote></li><li><p>算术运算符优先级</p><blockquote><ul><li>默认情况下，<strong>乘除取模</strong>的优先级要高于加减</li><li>不过我们可以使用圆括号<code>()</code>来提升优先级，改变运算符的计算顺序。</li><li>这里提升优先级<strong>只能</strong>用<code>()</code>，没有<code>｛｝</code>这一说</li></ul></blockquote></li><li><p>+号的两种作用</p><blockquote><ul><li>加号有 “加法” 和 “连字符” 两种作用</li><li>当+号<strong>两边的数都是数值</strong>时，做加法运算，否则为”连字符”(字符串的拼接)</li></ul></blockquote></li><li><p>隐式类型转换</p><blockquote><ul><li>如果参与<code>数学运算</code>的某操作数不是数字类型，那么 JS 会<strong>自动</strong>将其转换为数字类型，然后再做计算。这一过程称为隐式转换</li><li>隐式转换的本质是内部自动调用了相关的函数来转换。比如我们做的是算术运算，他就会**自动调用Number()**函数，帮我们把操作数转换成数字后，再做算术计算。</li></ul></blockquote></li></ol><blockquote><p><strong>注意事项</strong></p><ul><li><strong>任何数</strong>与NaN做算述运算，结果都是NaN,除与字符串拼接外。</li><li><code>+</code>号参于字符串计算，他<strong>不会</strong>做隐式转换,把操作数转换为数字;而是会当成<strong>字符串拼接</strong>来处理。</li></ul><pre><code>&lt;script&gt; console.log(4 / &quot;2&quot;); // 2 console.log(5 % &quot;4&quot;); // 1 console.log(true + false); // 1 console.log(2 + null); // 2 // 任何类型与NaN做运算得到NaN,与字符串拼接除外 console.log(1 + undefined); // NaN console.log(1 + &quot;true&quot;); // &#39;1true&#39;  字符串拼接&lt;/script&gt;</code></pre></blockquote><ol start="5"><li><p>显示转换</p><blockquote><ul><li>我们之前讲过<strong>强制类型转换</strong>，其实就是<strong>显示类型</strong>转换。</li><li>也就是我们自己<strong>手动的</strong>调用相关函数或方法，比如前面讲过的Number()、parseInt()、parseFloat()来转换数据类型。<blockquote><p>数学运算时隐式转换自动调用的Number()函数将其它类型转换成数字，那 Number()实现不了的，就得手动调用其它方法来实现</p></blockquote></li></ul></blockquote></li><li><p><code>+</code>  <code> -</code> 的特殊用法</p><blockquote><ul><li>如果<code>Number</code>函数能把某个类型转换成数字，那+ 和-号也可以,且规则和number一样，能识别2 进制或 16 进制。</li><li>不过要<strong>特别注意</strong> <code>-true</code>和 <code>-false</code> <code>-null</code>这 3 个特殊情况，他们会将其转换成<strong>负数</strong></li></ul></blockquote></li><li><p>浮点数（小数）丢失精度</p><blockquote><p>在 Javascript 中，有些小数的<strong>数学运算</strong>不是很精准.所以不要直接判断两个浮点数是否相等</p><blockquote><ul><li>JavaScript 使用了 IEEE754 二进制浮点数算术标淮，这会使一些个别的小数产生”丢失精度”问题。</li><li>IEEE754 二进制浮点数算术标淮是计算机底层编译标准，了解即可。</li></ul></blockquote></blockquote></li></ol><p><strong>解决浮点数运算不精准办法</strong></p><blockquote><ul><li>小数运算时，运算后的结果,再调用<code>toFixed()</code>方法保留指定的小数位数；</li><li><code>toFixed()</code>方法的返回值类型，是<strong>字符串</strong>类型</li><li><code>toFixed()</code>在指小数位时，会采用<strong>4 舍 5 入</strong></li></ul></blockquote><h3 id="二、赋值表达式"><a href="#二、赋值表达式" class="headerlink" title="二、赋值表达式"></a>二、赋值表达式</h3><blockquote><p>赋值操作符：就是给变量赋值用的</p><table><thead><tr><th>赋值操作符</th><th>描述</th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td></tr><tr><td>+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;</td><td>快捷赋值</td></tr><tr><td>++</td><td>自增运算</td></tr><tr><td>–</td><td>自减运算</td></tr></tbody></table></blockquote><ol><li>赋值运算符<code>=</code><blockquote><ul><li>赋值运算符：会将等号右边的数值，赋值给等号左边的变量</li><li><code>var a=2;</code>：将&#x3D;等号右边的2赋值给左边的变量a</li><li>赋值运算符左边只能是变量，右边既可以是变量也可以是数值</li></ul></blockquote></li></ol><blockquote><ul><li>赋值运算也产生值,将等号后面的计算结果，作为“赋值运算的值”(因为每个表达式都有返回值)<blockquote><p>这就意味着，可以连续使用赋值运算符</p></blockquote></li></ul><pre><code>&lt;script&gt; var a, b, c; a = b = c = 12 + 2; console.log(a, b, c); // 14 14 14&lt;/script&gt;</code></pre></blockquote><ol start="2"><li><p>快捷赋值（+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;）</p><blockquote><ul><li>快捷赋值运算符：表示在原数值基础上进一步计算<blockquote><p>快捷赋值操作符仅仅是简写语法，使用它们并不会提升性能</p></blockquote></li></ul><pre><code>&lt;script&gt; var a = 1; a += 5; // 相当于 a = a + 5; console.log(a); // 6 var b = 4; b *= 2; // 相当于 b = b * 2 console.log(b); // 8 b /= 2; // 相当于 b = b / 2 console.log(b); // 4 b %= 2; // 相当于 b = b % 2; console.log(b); // 0&lt;/script&gt;</code></pre></blockquote></li><li><p>++ 自增 和 – 自减 运算符</p><blockquote><ul><li><code>++</code> 自增：表示在自己的基础上+1</li><li><code>--</code> 自减：表示在自己的基础上-1<blockquote><p>++ 和 – 只能和变量搭配使用</p></blockquote></li></ul><pre><code>&lt;script&gt; var a = 1; a++; // a++ 相当于 a = a + 1 console.log(a); // 2&lt;/script&gt;</code></pre></blockquote></li><li><p>++a 和 a++ 的区别</p><blockquote><ul><li>++a 是先自增再赋值</li><li>a++ 是先赋值再自增</li></ul><pre><code>&lt;script&gt; var b = 3; var c = ++b; // 先自增，再赋值，所以b先自增1，得到b=4,然后把4赋值给变量c，所以c的值也是 4 console.log(c); // 4 console.log(b); // 4 console.log(c++); // 4 先赋值，再自增，所以打印是4，c自增后是5 console.log(++c); // 6 先自增，再赋值，c上面已经是5，再自增就是6，自增后再赋值，所以打印是6&lt;/script&gt;</code></pre></blockquote></li><li><p>–a 和 a–的区别</p><blockquote><ul><li>与上面同理</li><li><code>--a</code> 是先自减再赋值</li><li><code>a--</code> 是先赋值再自减</li></ul></blockquote></li></ol><h3 id="三、关系表达式"><a href="#三、关系表达式" class="headerlink" title="三、关系表达式"></a>三、关系表达式</h3><blockquote><ul><li>说到关系表达式，肯定就离不开关系操作符。</li><li>关系操作符： 用来比较两个值之间的大小关系，如果关系成立它返回<code>true</code>，如果关系不成立则返回<code>false</code><table><thead><tr><th>关系操作符</th><th>描述</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;&#x3D;</td><td>大于或等于</td></tr><tr><td>&lt;&#x3D;</td><td>小于或等于</td></tr><tr><td>&#x3D;&#x3D;</td><td>等于</td></tr><tr><td>!&#x3D;</td><td>不等于</td></tr><tr><td>&#x3D;&#x3D;&#x3D;</td><td>全等于（值和类型都比较）</td></tr><tr><td>!&#x3D;&#x3D;</td><td>不全等于（其结果与&#x3D;&#x3D;&#x3D;比较的结果正好相反）</td></tr></tbody></table></li></ul></blockquote><h4 id="和-和"><a href="#和-和" class="headerlink" title="&gt;和&lt;以及&gt;=和&lt;="></a><code>&gt;</code>和<code>&lt;</code>以及<code>&gt;=</code>和<code>&lt;=</code></h4><blockquote><p>以上操作符主要是用来比较两个值的大小关系</p><ul><li>如果操作符两边的操作数，<strong>都是字符串</strong>，则不会将操作数转换成数字进行比较，而会分别比较字符串的<code>Unicode</code>编码</li><li><strong>除去</strong>操作符两边的操作数都是字符串这种情况外，其它情况在在作比较时，会先将**非数字类型转换为数字 **（隐式转换） ，然后再进行比较。 整个隐式转换过程是程序内部自动调用Number()函数来实现的<blockquote><p>以上规则，只针对基本数据类型而言</p></blockquote></li></ul></blockquote><ol><li><p>操作符两边的数，<strong>不都是</strong>字符串</p><blockquote><pre><code>//  数字与数字作比较，最简单1 &gt; 2; // false// 数字与非数字作比较1 &gt; true; // false  等价于 1&gt;1// 字符串与布尔值作比较&quot;&quot; &lt;= false; // true  等价于 0&lt;=0// null 和 undefined与数字作比较null &gt;= 0; // true 等价于 0&gt;=0undefined &lt;= 0; // false 等价于 NaN&lt;=0// 字符串与null 和undefined作比较&quot;&quot; &gt;= null; // true 等价于 0&gt;=0&quot;&quot; &lt;= undefined; // false 等价于 0&lt;=NaN// null与undefined作比较null &gt;= undefined; // false 等价于 0&gt;=NaN</code></pre></blockquote></li><li><p>字符串与字符串做比较</p><blockquote><ul><li>字符串与字符串作比较时，不会将其转换成数字进行比较，而会分别比较字符串的<code>Unicode</code>编码</li><li>比较字符编码时，是<strong>一位一位</strong>进行比较，如果两位一样，则比校下一位</li></ul></blockquote></li></ol><p><strong>英文字母对应的 Unicode 编码</strong></p><blockquote><ul><li><code>A~Z</code> 对应 <code>65~ 90</code> 也就是A的Unicode编码是65 、 Z 的Unicode编码是 90</li><li><code>a~z</code> 对应 <code>97~122</code></li><li><code>0~9</code> 对应 <code>48~57</code></li></ul><pre><code>// 先把两边的第一位拿出来作比较，即 &#39;a&#39; &lt; &#39;b&#39; ，比较时比较的是Unicode编码，则 97&lt;98，所以结果为 true&quot;abc&quot; &lt; &quot;b&quot;; // true;// 先把两边的第一位拿出来作比较，即 &#39;1&#39; &lt; &#39;5&#39; ，比较时比较的是Unicode编码，则49 &lt; 53 ,所以结果为 true&quot;11&quot; &lt; &quot;5&quot;; // true;// 先把两边的第一位拿出来作比较，如果两位一样，则比较下一位，所以拿第二位来比较，则&#39;b&#39;&lt;&#39;c&#39;，比较时比较的是Unicode编码，则 98 &lt; 99 ,所以结果为 true&quot;abc&quot; &lt; &quot;acd&quot;; // true</code></pre></blockquote><h4 id="JS-中没有连比"><a href="#JS-中没有连比" class="headerlink" title="JS 中没有连比"></a>JS 中没有连比</h4><blockquote><p>JS 中是没有连比的功能，我们来看下面的列子</p><pre><code>&lt;script&gt; console.log(1 &lt; 3 &lt; 2); // true 但是本质上是错的，3不可能小于 2 /*  *  1&lt;3&lt;2 为什么会得到 true ?  *  他是从左往右开始比较，1 &lt; 3 这个表达式返回值为true  *  再拿true与2作比较，那 true &lt; 2  *  数值与其它类型做比较时，会先将其转换成数字，再比较，true转数字转成 1  *  即 1 &lt; 2 吗 ？那肯定小于，所以返回结果就为 true  */&lt;/script&gt;</code></pre><blockquote><p>那如果要判断一个数是不是&gt; 1同时&lt; 4，我们可以用后面学到的&amp;&amp;与操作符和||或操作符来实现</p></blockquote></blockquote><h4 id="和"><a href="#和" class="headerlink" title="&#x3D;&#x3D; 和 !&#x3D;"></a>&#x3D;&#x3D; 和 !&#x3D;</h4><blockquote><ul><li>&#x3D;&#x3D;用来比较操作符两边值（隐式转换后）是否相等，在比较时，<strong>不会</strong>比较两边值的类型</li><li>如果值（隐式转换后）相等，返回true，不相等，则返回false</li><li>在比较时同样会做隐式类型转换，非数字类型会自动调用Number()函数，转成数字再比较</li><li>以上规则，只适用于基本数据类型</li></ul><pre><code>1 == true; // true0 == &quot;&quot;; // true// ‘’ 转成数字是 0   false转成数字是 0 所以0==0 是true&quot;&quot; == false; // true</code></pre></blockquote><blockquote><ul><li>!&#x3D;是用来比较两个值（隐式转换后）是否不相等，如果相等返回 false,如果不相等，返回 true<blockquote><p>**特殊情况!!**：</p></blockquote></li></ul><pre><code>null == undefined; //true&quot;&quot; ==null;//false0==null;//false</code></pre></blockquote><h4 id="和-1"><a href="#和-1" class="headerlink" title="===和 !=="></a><code>===</code>和<code> !==</code></h4><blockquote><ul><li><code>===</code>用来比较两边的值是否全等，如果全等则为true,不全等则为false。</li><li>全等：不仅在比较是会比较值大小，还会比较值的类型</li><li><code>===</code>只有操作符两边的数长的<strong>一模一样</strong>，才会是 true，否则就是 false</li><li>注意区分： 而前面讲的<code>==</code>只会比较两个值（隐式转换后）的大小，不会比较类型。</li></ul><pre><code>1 == &quot;1&quot;; // true 只比较值1 === &quot;1&quot;; // false  同时比较值和类型1 == true; // true 只比较值1 === true; // false 同时比较值和类型</code></pre></blockquote><blockquote><p><strong><code>!==</code> 不全等</strong></p><ul><li><code>!==</code> 用来比较两边值是否不全等，如果是则返回true,不是返回false</li><li><code>!==</code>的结果，正好是<code>===</code>结果的<strong>反面</strong>，如果<code>===</code>返回结果是true，那！<code>==</code>返回结果就是false</li></ul></blockquote><h4 id="特殊的比较"><a href="#特殊的比较" class="headerlink" title="特殊的比较"></a>特殊的比较</h4><blockquote><pre><code>undefined == null; // trueundefined === null; // falseNaN == NaN; // falseNaN === NaN; // falseNaN !== NaN; // trueNaN != NaN; // true</code></pre></blockquote><h4 id="区分-、-、-的区别"><a href="#区分-、-、-的区别" class="headerlink" title="区分 &#x3D; 、&#x3D;&#x3D; 、&#x3D;&#x3D;&#x3D; 的区别"></a>区分 &#x3D; 、&#x3D;&#x3D; 、&#x3D;&#x3D;&#x3D; 的区别</h4><blockquote><ul><li><code>=</code> 是赋值</li><li><code>==</code> 是比较 但只比较值</li><li><code>===</code> 是比较 同时比较值和类型</li></ul></blockquote><h3 id="四、逻辑表达式"><a href="#四、逻辑表达式" class="headerlink" title="四、逻辑表达式"></a>四、逻辑表达式</h3><table><thead><tr><th>逻辑运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>!</code></td><td>逻辑非 否定的意思</td></tr><tr><td><code>&amp;&amp;</code></td><td>逻辑与 并且的意思</td></tr><tr><td>&#96;</td><td></td></tr></tbody></table><h4 id="非运算符"><a href="#非运算符" class="headerlink" title="!非运算符"></a>!非运算符</h4><blockquote><ul><li>!非运算符也叫”<strong>取反</strong>运算符”</li><li>!非是一个<strong>单目运算符</strong>，所谓单目运算符，就是这个操作符<strong>只能有一个</strong>操作数</li><li>操作数可以是任何类型的</li><li>!运算时也会用到隐式转换，如果操作数为非布尔值，其内部会自动调用<strong>Boolean函数</strong>，将其隐式转换为布尔类型的值后，再<strong>取反</strong>操作，最后将<strong>值</strong>返回。</li><li>所以!非运算的结果一定是<strong>布尔值</strong><blockquote><p>因此！我们可以通过对一个值两次取反操作，将其变为一个 Boolean 类型的值</p></blockquote></li></ul><pre><code>!true; // false!3; // false!0; // true!undefined; // true</code></pre></blockquote><blockquote><blockquote><p>总结：将基本数据类型转换为布尔值的 2 种方法</p></blockquote><ul><li>方法一：调用Boolean()函数来实现</li><li>方法二：在一个数值或变量前加!!(两次取反)操作，也可以实现</li></ul><pre><code>!!3; // true;!!undefined; // false</code></pre></blockquote><h4 id="与操作符"><a href="#与操作符" class="headerlink" title="&amp;&amp;与操作符"></a>&amp;&amp;与操作符</h4><blockquote><ul><li><code>&amp;&amp;</code>与操作符，表示<strong>并且</strong>的意思，可以对<code>&amp;&amp;</code>符号两侧的值进行<strong>与运算</strong>并返回结果</li><li><code>&amp;&amp;</code>与操作符是一种<strong>短路</strong>操作符，他有一个非常重要计算规则，就是 &amp;&amp;与的短路计算<blockquote><p>注意：当返回第一个表达式的值时，就不会再看第二个表达式了。第二个表达式<strong>不会</strong>被运行！</p></blockquote></li></ul></blockquote><ol><li><p>&amp;&amp;与的短路计算规则</p><blockquote><ul><li>如果<strong>第一个</strong>操作数转为布尔值是<code>false</code>，则就<strong>不会</strong>看第二个操作数了。返回结果为<strong>第一个</strong>操作数的<strong>返回结果</strong></li><li>如果第一个操作数转为布尔值是<code>true</code>，则<strong>会看</strong>第二个操作数。返回结果为<strong>第二个</strong>操作数的返回结果</li><li>上面提到的”操作数”，可以是一个表达式、值、函数、对象等任何类型</li></ul><pre><code>false &amp;&amp; true; // false1 &amp;&amp; 2; // 2  1转换为布尔值是true，所以看第二个操作数，返回值为第二个操作数 20 &amp;&amp; 3; // 0  0转换为布尔值是false，所不看第二个操作数，返回值为第1个操作数 0true &amp;&amp; alert(&quot;我能出来喽&quot;); // 页面显示弹窗3 - 3 &amp;&amp; 1; // 0  3-3结果为0,转换为布尔值是false,则不看第二个操作数，返回值为第一个操作数，第1个操作数是表达式，所以返回值为第1个表达式的返回值0</code></pre></blockquote></li><li><p><strong>测试题</strong></p><blockquote><ul><li>以下代码的执行后的结果是多少？</li></ul><pre><code>&lt;script&gt; var a = 1,   b = 2,   c; c = a &lt; b &amp;&amp; a++;//a&lt;b:true，所以a++被运行,c=1,a=2 console.log(c, a);//c=1,a=2 c = a &gt; b &amp;&amp; --a;//a&gt;b:false=c,--a不会被运行 console.log(c, a);//c=false,a=2 a == b &amp;&amp; alert(&quot;a和b相等了&quot;);//a=b=2,true,运行alert&lt;/script&gt;</code></pre></blockquote></li><li><p>如何判断一个数的范围</p><blockquote><pre><code>var a = 10;console.log(a &gt; 5 &amp;&amp; a &lt; 12); // true   这个逻辑表达示的含 义是： a&gt;5 同时 a&lt;12 ？console.log(a &gt; 5 &amp;&amp; a &lt; 8); // false</code></pre><blockquote><p>表达式都会有一个返回值，所以我们可以用一个变量来接受表达式的返回值</p></blockquote><pre><code>&lt;script&gt; var a = 10; var b; b = a &gt; 5 &amp;&amp; a &lt; 12; console.log(b); // true b = a &gt; 5 &amp;&amp; a + 2; console.log(b); // 12&lt;/script&gt;</code></pre></blockquote></li><li><p>如何判断一个值是不是 NaN</p><blockquote><ul><li>方法1：利用 <strong>NaN是一个不是数字的，但是数字类型</strong>，这个特性来判断</li></ul><pre><code>var a = NaN;var _isNaN = isNaN(a) &amp;&amp; typeof a === &quot;number&quot;;consloe.log(_isNaN);</code></pre></blockquote></li></ol><blockquote><ul><li>方法2：利用 <strong>NaN自己不等于自已</strong> 这个特性来判断</li></ul><pre><code>&lt;script&gt; function _isNaN(n) &#123;   if (n !== n) &#123;     return true;   &#125; else &#123;     return false;   &#125; &#125; console.log(_isNaN(NaN)); // true&lt;/script&gt;</code></pre></blockquote><h4 id="或-操作符"><a href="#或-操作符" class="headerlink" title="|| 或 操作符"></a><code>||</code> 或 操作符</h4><blockquote><ul><li><code>||</code>或操作符，表示或者的意思，可以对<code>||</code>符号两侧的值进行或运算并返回结果</li><li><code>||</code>或操作符是一种短路操作符，他一个非常重要计算规则，就是<code>||</code>或的短路计算</li></ul></blockquote><ol><li><p>|| 或的短路计算规则：</p><blockquote><ul><li><strong>第一个</strong>操作数转换为布尔值是<code>true</code>,则就<strong>不会</strong>看第二个操作数。返回结果为<strong>第一个</strong>操作数的返回结果，第二个表达式不会被执行</li><li>第一个操作数转换为布尔值是<code>false</code>，则就<strong>会看第二个</strong>操作数。返回结果为<strong>第二个</strong>操作数的返回结果</li><li>上面提到的”操作数”，可以是一个表达式、值、函数、对象等任何类型</li></ul><pre><code>true || false; // true  第1个操作数是true，则不看第2个操作数，将第1个操作数作为结果返回 truefalse || true; // true  第1个操作数是false，则看第二个操作数，将第2个操作数作为结果返回 true0 || 3; // 3  第1个操作数转boolean值是false，则看第2个操作数，将第2个操作数作为结果返回 3&quot;&quot; || 1; // 1  第1个操作数转boolean值是false，则看第2个操作数，将第2个操作数作为结果返回 1undefined || NaN; // NaN  第1个操作数转boolean值是false，则看第2个操作数，将第2个操作数作为结果返回 NaN</code></pre></blockquote></li><li><p>测试题</p><blockquote><p>以下代码，输出的结果？</p><pre><code>&lt;script&gt; var a = 1,   b = 2,   c; c = a &lt; b || a++;//c=ture,a++不会被执行 console.log(c);  c = a &gt; b || a--;//c=1,a=0,先赋值后自减 console.log(a, c); &lt;/script&gt;</code></pre></blockquote></li></ol><h4 id="逻辑操作符优先级"><a href="#逻辑操作符优先级" class="headerlink" title="逻辑操作符优先级"></a>逻辑操作符优先级</h4><blockquote><p>逻辑操作符优先级是： <code>！非</code> &gt; <code>&amp;&amp; 与</code> &gt; <code>|| 或</code> </p><blockquote><p>自己写代码的时候，建议加括号增强可读性</p></blockquote><pre><code>(1 &amp;&amp; false) || (4 &amp;&amp; 5); //false||5--&gt;5(1 &amp;&amp; 2) || (4 &amp;&amp; 5); //2||5--&gt;2(1 &amp;&amp; true) || (!&quot;&quot; &amp;&amp; 2);//true||2--&gt;true</code></pre></blockquote><h3 id="五、综合表达式"><a href="#五、综合表达式" class="headerlink" title="五、综合表达式"></a>五、综合表达式</h3><blockquote><ul><li>综合表达式：就是 算术操作符、赋值操作符、关系操作符、逻辑操作符出现在同一个表达式中。</li><li>那这些操作符混在一起使用，他们的优先级就显得很重要。</li></ul></blockquote><ol><li><p>操作符的优先级，从上往下，优先级从高到低，如下：</p><blockquote><ul><li><code>++</code> 和 <code>--</code> 运算符</li><li>非运算符(!)</li><li>算术运算符( %、&#x2F;、* 、+、-,先乘除取模再加减)</li><li>关系运算符(&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;、&#x3D;&#x3D; 、!&#x3D;、<code>===</code>、<code>!==</code>)</li><li>逻辑运算符(<code>&amp;&amp;</code> &gt; <code>||</code>)</li><li>赋值运算符（&#x3D;、+&#x3D;、-&#x3D;、&#x2F;&#x3D;、%&#x3D;）<blockquote><ul><li>单目运算符优先级较高</li><li>当自增<code>++</code>、自减<code>--</code>运算符遇到逻辑运算符时，要注意：由于短路特性，它需要先看左边的结果</li></ul></blockquote></li></ul></blockquote></li><li><p>综合表达式的计算规则</p><blockquote><ul><li>如果操作符优先级一样，则从左往右算</li><li>可以用()来改变优先级,改变计算顺序</li><li>为了提高代码可读性，在实际开发中，我们都会添加()，这样能更直接的知道代码的执行顺序</li></ul></blockquote></li><li><p>测试题<br><strong>测试题1</strong></p><blockquote><pre><code>&lt;script&gt; var a = 0,   c; c = !3 + 4 / 2 &gt; 5 &amp;&amp; ++a;//!-&gt;/-&gt;+-&gt; &gt;,即：false+2&gt;5,**注意**此时false自动转换为0,2&gt;5为false,c=false &amp;&amp; ++a,由于左边是false，所以++a不会被执行,c=false,a=0 console.log(c, a); // false 0&lt;/script&gt;</code></pre></blockquote></li></ol><p><strong>测试题2</strong></p><blockquote><pre><code>&lt;script&gt; var a = 10; var b = a++ &amp;&amp; a &lt; 11 || a++;//a++先将10赋值给&amp;&amp;,然后自增a=11,即true&amp;&amp;false,--&gt;false||a++,此时a将11赋值给||,所以b=11,然后a自增,a=12 var c = a + 1 &amp;&amp; a + 2;//c=13&amp;&amp;14,c=14 console.log(b, c, a); // 11  14  12&lt;/script&gt;</code></pre><blockquote><p><code>var b = a++ &amp;&amp; a &lt; 11 || a++;</code>这步的顺序很重要，</p></blockquote></blockquote><ol start="4"><li>所有操作符优先级<blockquote><ul><li>关于每一个运算符的详细优先级，可以参考下面这张图</li><li>在下图中，越在最上面的，优先级越高，越优先计算。<img src="操作符优先级.png"></li></ul></blockquote></li></ol><h3 id="六、三元-条件-运算符"><a href="#六、三元-条件-运算符" class="headerlink" title="六、三元(条件)运算符"></a>六、三元(条件)运算符</h3><blockquote><ul><li>JavaScript 中提供了一种叫做 “三元运算” 的语法形式，让我们可以方便地实现选择</li><li>他更像是if..else语句的紧凑版<br><code>条件表达式 ? 表达式1 : 表达式2;</code></li></ul></blockquote><p><strong>执行流程</strong></p><blockquote><ul><li>首先对条件表达式进行求值</li><li>如果条件表达式的值为 true，则执行语句 1，并返回执行结果</li><li>如果条件表达式的值为 false，则执行语句 2，并返回执行结果</li></ul></blockquote><p><strong>注意事项</strong></p><blockquote><ul><li>三元运算符，虽然回有返回结果，但我们并不一定要用一个变量来接受，<strong>有些时候</strong>，我们并不关心他的返回值</li></ul><pre><code>var a = 2;// 这种情况下，我们更关心，满足条件要做什么事，不满足条件做什么事，并不关心返回结果a &gt; 1 ? alert(a + &quot;大于1&quot;) : alert(a + &quot;小于1&quot;);// 同时这种情况，不管 a&gt;1 是真是假，最终返回结果都是undefined,因为 alert() 方法返回值是undefinedvar b = a &gt; 1 ? alert(a + &quot;大于1&quot;) : alert(a + &quot;小于1&quot;);console.log(b); // undefined</code></pre></blockquote><p><strong>实战案例：补 0 操作</strong></p><blockquote><ul><li>当我们获取当前日期时，如果计算得到的日，月小于 10 的时候，都会以一位数的方式显示，如：2022年8月17日，而我们希望以两位的方式显示，如：2022年08月17日</li><li>这个时候就会涉及到补 0 的问题了。<blockquote><p>通过三元运算符判断，并执行加0操作</p></blockquote></li></ul><pre><code>// 完整的补0后效果// var date = new Date(&quot;2019/1/3&quot;);var date = new Date();var year = date.getFullYear(); // 获取完整的年份(4位)var month = date.getMonth() + 1; // date.getMonth()获取当前月份(0-11,0代表1月),所以要加1var day = date.getDate(); // 获取当前日(1-31)month = month &lt; 10 ? &quot;0&quot; + month : month; // 月份小于10，数字前补0day = day &lt; 10 ? &quot;0&quot; + day : day; // 日小于10，数字前补0var currentDate = year + &quot;年&quot; + month + &quot;月&quot; + day + &quot;日&quot;;console.log(currentDate); // 2022年08月17日</code></pre></blockquote><h3 id="七、综合案例"><a href="#七、综合案例" class="headerlink" title="七、综合案例"></a>七、综合案例</h3><p><strong>判断当前输入年份，是否是闰年 ?</strong></p><blockquote><p>需求分析：</p><ul><li>公历闰年的简单计算方法（符合以下条件之一即可）</li><li>能被 4 整除且不能被 100 整除</li><li>能被 100 整除也能被 400 整除</li><li>1950-2050 年之间的闰年有: 1952、1956、1960、1964、1968、1972、1976、1980、1984、1988、1992、1996、2000、2004、2008、2012、2016、2020、2024、2028、2032、2036</li></ul></blockquote><blockquote><p>代码实现思路：</p><ul><li>利用 prompt() 弹出输入框，让用户输入年份</li><li>定义变量 var year 来接受，用户输入的年份</li><li>对接收到的值做判断，判断条件就是需求中提到的，两个条件中有一个满足就可，所以选择||操作符</li><li>判断表达式： 左边条件 1 ||右边条件 2</li></ul><pre><code>var y = parseInt(prompt(&quot;请输入年份&quot;));var a = (y % 4 == 0 &amp;&amp; y % 100 != 0) || (y % 100 == 0 &amp;&amp; y % 400 == 0);a == true ? alert(&quot;是闰年&quot;) : alert(&quot;不是闰年&quot;);//   alert(y + &quot;是闰年吗？&quot; + a);</code></pre></blockquote><h3 id="八、小结"><a href="#八、小结" class="headerlink" title="八、小结"></a>八、小结</h3><ol><li><p>由于在进行&#x3D;&#x3D;数学运算&#x3D;&#x3D;时，会自动调用Number函数进行隐式转换，所以要注意一些特殊值的转换</p><blockquote><ul><li>Number(“”); &#x2F;&#x2F; 0</li><li>Number(“ “); &#x2F;&#x2F; 0</li><li>Number(true); &#x2F;&#x2F; 1</li><li>Number(false); &#x2F;&#x2F; 0</li><li>Number(null); &#x2F;&#x2F; 0</li><li>Number(undefined); &#x2F;&#x2F; NaN</li></ul></blockquote></li><li><p>使用<code>==</code>时<br><strong>根据上一条的转换，正常的情况：</strong></p><blockquote><ul><li>0 &#x3D;&#x3D; “”; &#x2F;&#x2F; true</li><li>“” &#x3D;&#x3D; false; &#x2F;&#x2F; true</li></ul></blockquote></li></ol><p><strong>特殊情况</strong></p><blockquote><ul><li>null &#x3D;&#x3D; undefined; 结果为true</li><li>“”&#x3D;&#x3D;null ; 结果为false</li><li>0&#x3D;&#x3D;null ; 结果为false</li></ul></blockquote><h3 id="九、位运算符（难点-大厂必考）"><a href="#九、位运算符（难点-大厂必考）" class="headerlink" title="九、位运算符（难点-大厂必考）"></a>九、位运算符（难点-大厂必考）</h3><blockquote><blockquote><p>位运算符都可以去掉小数</p></blockquote></blockquote><h4 id="前情提要：二进制知识点"><a href="#前情提要：二进制知识点" class="headerlink" title="前情提要：二进制知识点"></a>前情提要：二进制知识点</h4><ol><li><p>正十进制如何转二进制</p><blockquote><ul><li>10 进制转 2 进制，就是用当前数除 2 取余数的方式得到的</li><li>如求 5 的二进制<ul><li>5&#x2F;2&#x3D;2 余 1 得到右边第 1 位</li><li>2&#x2F;2&#x3D;1 余 0 得到 右边第 2 位</li><li>1&#x2F;2&#x3D;0 余 1 得到 右边 第 3 位<br> 最后商为 0 时， 把所有从上往下的<strong>余数</strong>&#x3D;&#x3D;从右往左&#x3D;&#x3D;写出来就是最后的二进制数 <code>101</code><blockquote><p>十进制转x进制，就把十进制的值除以x直至余数为0，将得到的余数从右往左排列<br>位运算符只有<code>32</code>位，从右到左位数递增，最左边的是第32位，是最高位</p></blockquote></li></ul></li></ul></blockquote></li><li><p>二进制如何转换成十进制</p><blockquote><p><strong>计算公式</strong></p><ul><li><code>b0</code>表示二进制右边第<code>1</code>位上的数字</li><li><code>b1</code>表示二进制右边第<code>2</code>位上的数字</li><li><code>b2</code>表示二进制右边第<code>3</code>位上的数字</li><li>……依次类推<img src="二进制计算公式.png"></li></ul></blockquote></li></ol><blockquote><p>举例：<code>00000000000000000000000000000101</code>转换为十进制<br><img src="5的进制转换.png"></p><blockquote><p>最低位的平方值是0！</p></blockquote></blockquote><ol start="3"><li><strong>负</strong>十进制数如何转换成二进制<blockquote><ul><li>负数和正数的存储方式不一样，负数是以一种<strong>二补数(或补码)<strong>的二进制编码</strong>存储</strong>。</li><li>我们来看下，负数是如何转成对应二进制数，然后存储的。这里以<code>-5</code>来为例<img src="负十进制的转换.png"></li></ul></blockquote></li></ol><p><strong><code>-5</code>的二进制计算过程：</strong></p><blockquote><ul><li>第一步：暂时去掉负号，先将正数的<code>5</code>转换为二进制，得到<code>00000000000000000000000000000101</code></li><li>第二步：反转每一位的二进制数，即 1 变成 0，0 变成 1,得到<code>11111111111111111111111111111010</code></li><li>第三步：把上面反转得到二进制<code>+1</code>，就得到了最后负数的二进制</li></ul></blockquote><p><strong>验证方法：</strong></p><blockquote><pre><code>var a = 0b11111111111111111111111111111011; // js中2进制数以0b开头console.log(a &gt;&gt; 0); // -5</code></pre></blockquote><ol start="4"><li><p>如何一眼区分二进制数是正数还是负数</p><blockquote><ul><li><strong>有符号整数</strong>使用 32 位的前 31 位表示整数值，第 32 位表示数值的符号，如果 32 位是 <code>0</code>，表示<strong>正数</strong>，如果是 <code>1</code> 表示是<strong>负数</strong>。</li><li>第 <code>32</code> 位称为<strong>符号位</strong>，他的值决定了数值其余部分的格式。</li><li><strong>正数</strong>以真正的二进制格式存储，而负数是以我们上面提到的补码的二进制编码存储的。</li></ul></blockquote></li><li><p>最终版，二进制如何转换成十进制</p><blockquote><ul><li>拿到一个二进制数，首先看<strong>第 32 位</strong>是 0 还是 1</li><li>如果是 <code>0</code>，就按<strong>正</strong>二进制转十进制方式转</li><li>如果是 <code>1</code>，则就按<strong>负</strong>十进数转二进制的方式，<strong>反转</strong>回去，步骤倒放</li></ul></blockquote></li></ol><table><thead><tr><th></th><th>十进制转二进制</th><th>二进制转十进制</th></tr></thead><tbody><tr><td>正数</td><td>除2取余,从右到左</td><td>公式法</td></tr><tr><td>负数</td><td>除2取余+ 反转+1法</td><td>-1反转法 + 公式法</td></tr></tbody></table><p><strong>正二进制转十进制</strong></p><blockquote><p><code>var num4 = 00000000000000000000000000011001;</code></p><ul><li>1、num4 的二进制，第 32 位是 0，则是一个正数，按正常的正二进制转十进制方式转 1</li><li>2、num4 对应 10 进制计算公式&#x3D; 1+0+0+1<em>23+1</em>24 &#x3D; 1+8+16 &#x3D; 25</li></ul></blockquote><p><strong>负二进制转十进制</strong></p><blockquote><p><code>var num1 = 11111111111111111111111111111101;</code></p><ul><li>1、num1 的二进制第 32 位是 1，则是一个负数，负数就要以补码的方式反转回去</li><li>2、先拿二进制 <code>11111111111111111111111111111101</code><strong>-1</strong> 得到 <code>11111111111111111111111111111100</code><blockquote><p>二进制如何做减法：</p></blockquote></li><li><code>-1</code>就是减1的二进制数</li><li>和数学一样，不够的话往前借，数学是十进制，借到的是<code>10</code>,二进制借到的是<code>2</code></li></ul></blockquote><blockquote><ul><li>3、再把上面得到的二进制<strong>反码</strong>回去，0 变 1，1 变 0，得到<code>00000000000000000000000000000011</code>，此时得到的是正数的二进制</li><li>4、所以可以用正数的公式法：<code>1*2+1*1=3</code>，因为是负数，所以最后结果为-3</li></ul></blockquote><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><ol><li><p>基础知识</p><blockquote><ul><li>位运算的操作数，都会被转成&#x3D;&#x3D;32位&#x3D;&#x3D;<code>bit</code>的整数（32 位的二进制数）,再做运算</li><li>速度是 <code>T0</code>（最高，速度最快）级别的，因为是在二进制下进行运算的。</li></ul></blockquote></li><li><p>按位与<code>&amp;</code> 操作符</p><blockquote><ul><li><code>&amp;</code>与位操作符会先把值转换为<strong>32位整数</strong>（二进制数），然后再进行位操作。</li><li>按位<code>&amp;</code>就是将两个操作数的每一位对齐，然后按下表中的规则，对每一位执行相应的操作<table><thead><tr><th>第一个数值的位</th><th>第二个数值的位</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><blockquote><p>按位与操作的两个位数都是1时返回1，只要两个中有一个是 0，则返回 0</p></blockquote></li></ul></blockquote></li></ol><p><strong>&amp; 运算过程</strong></p><blockquote><ul><li>我们来看下面这个与&amp;运算的运算过程</li></ul><pre><code>var result = 5 &amp; 3;console.log(result); // 1</code></pre><ul><li>先把 5 和 3 都转换为对应的 32 位<strong>二进制数</strong>，然后再 <strong>1 位 1 位的</strong>比较，最后结果为 1<img src="&运算过程.png"></li></ul></blockquote><p><strong>按位&amp;操作符判断奇偶数 （经典面试题）</strong></p><blockquote><ul><li>如果 (一个数 &amp; 1) &#x3D;&#x3D; 1 这个数是<strong>奇数</strong></li><li>如果 (一个数 &amp; 1 )&#x3D;&#x3D; 0 这个数是<strong>偶数</strong></li></ul></blockquote><blockquote><p><strong>其背后的逻辑</strong></p><ul><li>根据二进制转 10 进制的公式，除第 1 位之外的每一位上的值都是 2 的倍数</li><li>也就是第<code>1</code>位上如果是<code>0</code>就是偶数，如果是<code>1</code>就是奇数<table><thead><tr><th>10进制</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>二进制</td><td>11</td><td>100</td><td>101</td><td>110</td><td>111</td><td>1000</td><td>1001</td><td>1010</td></tr></tbody></table></li><li>如果一个数是奇数，他的第 1 位是 1，这个数 &amp; 1 永远得到 1<img src="判断奇偶数.png"></li></ul></blockquote><ol start="3"><li>按位或 <code>|</code> 操作符<blockquote><ul><li>按位或<code>|</code>操作符会先把值转换为 32 位整数（二进制数），然后再进行位操作</li><li>按位或<code>|</code>就是将两个操作数的每一位对齐，然后按下表中的规则，对每一位执行相应的操作<table><thead><tr><th>第一个数值的位</th><th>第二个数值的位</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><blockquote><p>按位或操作的两个位数，只要有一个是 1 就返回 1，两位都是 0 时返回 0</p></blockquote></li></ul></blockquote></li></ol><p><strong>| 或运算过程</strong></p><blockquote><pre><code>var result = 5 | 3;console.log(result); // 7</code></pre><ul><li>先把 5 和 3 都转换为对应的 32 位二进制数，然后再 1 位 1 位的比较<img src="或运算过程.png"></li></ul></blockquote><p><strong>应用：将一个数取整</strong></p><blockquote><pre><code>var num = 5.467;console.log(num | 0); // 5</code></pre><ul><li>一个数在<strong>按位或</strong>运算时，会先将其转换为 32 位的<strong>整数</strong>（二进制），这个过程就会把<strong>小数转换为整数</strong></li><li>然后这个整数 <code>| 0</code> 永远得到这个整数。因为 <code>0</code> 和 <code>1</code> 与 <code>0</code> 做<strong>或运算</strong>，都得到<strong>自身</strong>。<img src="取整运算.png">>任何数与 0 做或|运算，最后结果都为这个数的**整数部分**。</li></ul></blockquote><ol start="4"><li>按位非 <code>~</code> 操作符<blockquote><ul><li>按位非<code>~</code>操作符会先把值转换为<strong>32位整数</strong>（二进制数）,再运算</li><li>按位非<code>~</code>操作符，用来反转操作数对应的位数，所以要进行一次反转</li><li>根据反转的结果，使用对应的 <strong>正数&#x2F;负数</strong> 二进制转十进制的方法</li><li>其最终结果的呈现是将一个数<strong>取反并减 1</strong></li></ul></blockquote></li></ol><p><strong><code>~5</code>的计算过程</strong></p><blockquote><ul><li>先转换为二进制，<code>5</code>的二进制是 <code>00000000000000000000000000000101</code></li><li><strong>再进行反转</strong>是：<code>11111111111111111111111111111010</code></li><li>由于反转后是一个<strong>负数</strong>，因为第32位为<code>1</code>，此时使用&#x3D;&#x3D;负二进制转为十进制&#x3D;&#x3D;的方法：<code>-1反转+公式法</code><ul><li><strong>减 1</strong>，得到 <code>11111111111111111111111111111001</code></li><li>再<strong>反转</strong>，得到00000000000000000000000000000110</li><li>再用<strong>公式法</strong>将二进制转换为十进制</li></ul></li><li>最后结果就是 6，因为是负数，所以最后结果是<code>-6</code><blockquote><p><code>~5</code>的结果是<code>-6</code>，即：取反并减1</p></blockquote></li></ul></blockquote><p><strong><code>~-5</code>的计算过程</strong></p><blockquote><ul><li>先将<code>-5</code>转为二进制(<strong>负十进制转二进制</strong>，使用除2取余,+1反转法)，得到<code>11111111111111111111111111111011</code></li><li>反转：<code>00000000 00000000 00000000 00000100</code></li><li>由于得到的是<strong>正数</strong>，所以使用&#x3D;&#x3D;公式法&#x3D;&#x3D;将其转为十进制：<code>1*2*2=4</code></li></ul></blockquote><p><strong>按位非<code>~</code>应用</strong></p><blockquote><ul><li>将一个数（<strong>整数</strong>）,<strong>两次按位非</strong>运算，就能将这个数<strong>取反</strong><ul><li>推导过程如下：</li><li><code>~~ x = ~(-x-1)=-(-x-1)-1 = x+1-1 = x</code></li></ul></li><li>取得一个数的相反数<code>~x + 1</code><ul><li><code>~x+1 = -x-1+1 = -x</code></li></ul></li></ul></blockquote><ol start="5"><li>按位异或 <code>^</code><blockquote><ul><li>按位异或<code>^</code>操作符，会先把值转为32位整数（二进制数）,再运算</li><li>按位异或<code>^</code>在做运算时，就是将两个操作数的每一位对齐，然后按下表中的规则，对每一位执行相应的操作<table><thead><tr><th>第一个数的位</th><th>第二个数的位</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><blockquote><p>只有当两个数对应的位都是 1 或都是 0 时，返回 0，其它都返回 1</p></blockquote></li></ul></blockquote></li></ol><p><strong>运算过程</strong></p><blockquote><pre><code>var result = 5 ^ 3;console.log(result); // 6</code></pre><ul><li>先把 5 和 3 转换为二进制数，再一位一位来运算，如下<img src="异或运算过程.png"></li><li>再用公式转换成十进制&#x3D;6</li></ul></blockquote><p><strong>按位异或^（归零律）</strong></p><blockquote><ul><li>归零律: 一个数异或自已得到 0 ，即 <code>a ^ a=0</code> ，因为只有两个数上对应位数是<strong>一样</strong>时，才会得到 <code>0</code></li><li>用来判两个数<strong>是否相等</strong>，如果 <code>a^b=0</code>，则 <code>a=b</code></li></ul></blockquote><p><strong>按位异或^（恒等律）</strong></p><blockquote><ul><li>恒等律：<code>a ^ 0= a</code>（<strong>整数</strong>），自己异或 0，得到自己</li></ul></blockquote><p><strong>按位异或 ^（自反）</strong></p><blockquote><ul><li>自反：<code>a ^ a ^ a= 0 ^ a= a</code> ，一个（整数）异或自身 <strong>2</strong> 次，得到<strong>自身</strong>。</li><li>结合律 : <code>a ^ b ^c = c ^ b ^ a</code> ，计算结果一样，<strong>与先后顺序无关</strong></li></ul></blockquote><p><strong>应用：按位异或 ^ （用来交换两个数值变量的值）</strong></p><blockquote><p>经典面试题：变量为数字(整数)，在不增加临时变量时，交换两个变量的值,使用<code>^=</code></p><pre><code>var a = 5;var b = 10;a ^= b;b ^= a;a ^= b;console.log(a, b); // 10 5/** 整个推演过程如下：* 1、 a ^ = b 得到 a = a ^ b* 2、 b ^ = a 得到 b = b ^ a 在第1步得到a = a ^ b，则推倒出b = b ^ a ^ b=b ^ b ^ a =0 ^ a =a* 3、 a ^ = b 得到 a = a ^ b ,在第1步得到a = a^b,第2步得到b = a,则推倒出： a = a ^ b ^ a = b ^ b ^ a = 0 ^ b = b**/</code></pre></blockquote><h4 id="位移操作符-、"><a href="#位移操作符-、" class="headerlink" title="位移操作符(&gt;&gt;、&lt;&lt;、&gt;&gt;&gt;)"></a>位移操作符(<code>&gt;&gt;</code>、<code>&lt;&lt;</code>、<code>&gt;&gt;&gt;</code>)</h4><blockquote><blockquote><p>除了<code>&gt;&gt;&gt;</code>是无符号的，其他位移操作符都是有符号的</p></blockquote></blockquote><ol><li><code>&lt;&lt;</code>左操作符<blockquote><ul><li>左移操作符用两个小于号<code>&lt;&lt;</code>表示，会按<strong>指定的位数</strong>将数值的<strong>所有位</strong>向<strong>左</strong>移动。</li><li>左移后，<strong>左边</strong>移出去的<strong>指定位数</strong>去掉，<strong>右端</strong>空出的位数会以<code>0</code>来填充这些空位。</li></ul></blockquote></li></ol><p><strong><code>5&lt;&lt;5</code>运算过程如下</strong></p><blockquote><ul><li>先把<code>5</code>转换为二进制数</li><li>再左移5位，把左边超出部分去掉，右侧的空缺用0填充</li><li>使用公式法，转换为十进制数<img src="左位移.png"></li></ul></blockquote><p><strong><code>-5&lt;&lt;5</code>的运算过程</strong></p><blockquote><ul><li>先把<code>5</code>转换为二进制数(除2取余)<code>00000000000000000000000000000101</code></li><li>使用<code>反转+1法</code>，得到<code>-5</code>的二进制数<code>11111111111111111111111111111011</code></li><li><strong>保留第32位的符号</strong>，左移5位，把左边超出部分去掉，右侧的空缺用0填充<code>11111111111111111111111101100000</code></li><li>转十进制<code>-1反转法+公式法</code><ul><li><code>-1</code>得到：<code>1111 1111 1111 1111 1111 1111 0101 1111</code></li><li>反转得到：<code>0000 0000 0000 0000 0000 0000 1010 0000</code></li><li>公式法：得到<code>160</code>，由于是负数，所以最终结果为<code>-160</code></li></ul></li></ul></blockquote><blockquote><blockquote><p>注：<br>在有符号整数中，第 32 位中的第 32 位是 符号位</p></blockquote><ul><li>如果是 0 表示正数</li><li>如果是 1 表示负数，在左移时，会保留操作数的符号</li></ul></blockquote><ol start="2"><li><code>&gt;&gt;</code> <strong>有符号</strong> <strong>右移</strong>操作符<blockquote><ul><li>有符号右移由两个大于号<code>&gt;&gt;</code>表示,会将数值的<strong>所有 32 位</strong>都向右移。同时<strong>保留符号</strong>（正和负）</li><li>有符号右移，左边空出的位会在左侧，在<strong>符号位后</strong>用<strong>符号位的值</strong>来填充这些空位。</li></ul></blockquote></li></ol><p><strong><code>160 &gt;&gt; 5;//5</code>的运算过程</strong></p><blockquote><ul><li>先将<code>160</code>转换成二进制数</li><li>向右移动5位，用符号位的值来填充第32位后的空缺，右侧超出部分的值去掉不要</li><li>用<code>公式法</code>转换为十进制&#x3D;5<img src="有符号右移.png"></li></ul></blockquote><p><strong><code>-160 &gt;&gt; 5;//-5</code>的运算过程</strong></p><blockquote><ul><li><code>除2取余</code>得到<code>160</code>的二进制数：<code>0000 0000 0000 0000 0000 0000 1010 0000</code></li><li><code>反转+1法</code>，得到<code>-160</code>的二进制数<code>1111 1111 1111 1111 1111 1111 0110 0000</code></li><li>右移5位，用<code>1</code>填充空缺<br><code>11111111111111111111111111111011</code></li><li><code>-1反转+公式法</code>转成十进制：<ul><li><code>-1</code>得到<code>11111111111111111111111111111010</code></li><li><code>反转</code>得到<br><code>00000000000000000000000000000101</code></li><li>公式法，结果&#x3D;<code>-5</code></li></ul></li></ul></blockquote><ol start="3"><li><code>&gt;&gt;&gt;</code> 无符号右移操作符<blockquote><ul><li>无符号右移会将数值的<strong>所有32位</strong>都向右移，位移造成的左侧空位<strong>全补0</strong>.</li><li>所以对于<strong>正数</strong>，&gt;&gt;&gt;无符号右移 和 有符号右移&gt;&gt;的<strong>结果是相同的</strong>。因为正数的符号位是 0，所以两者都是补 0 的方式来填充右移造成的空位。</li><li>但是负数，就完全不一样了。</li></ul></blockquote></li></ol><p><strong>55 &gt;&gt;&gt; 5;运算过程</strong></p><blockquote><ul><li>55 的二进制是：<code>00000000000000000000000000110111</code></li><li><code>&gt;&gt;&gt;</code>无符号右移<code>5</code>，左侧造成的空位 0 来补，则得到<code>00000000000000000000000000000001</code></li><li>用公式法得到十进制结果：<code>5</code></li></ul></blockquote><p><strong>-55 &gt;&gt;&gt; 5;运算过程</strong></p><blockquote><ul><li>55 的二进制是：<code>00000000000000000000000000110111</code></li><li><code>反转+1</code>得到<code>-55</code>的二进制数<code>11111111111111111111111111001001</code></li><li>右移5位，用<code>0</code>填充空缺：<code>00000111111111111111111111111110</code></li><li>公式法得到十进制结果：<code>134217726</code><blockquote><p>负数，在无符号位移后（至少 1 位），会被转换成一个正数</p></blockquote></li></ul></blockquote><h4 id="位移操作符的应用"><a href="#位移操作符的应用" class="headerlink" title="位移操作符的应用"></a>位移操作符的应用</h4><ol><li>随机数函数<blockquote><ul><li>Math.random()方法，可以得到 0-1 之间的小数，随机生成</li><li>得到 [a , b] 区间的整数，方式如下:<ul><li>方法1：parseInt(Math.random() * (b - a + 1)) + a;</li><li>方法2：(Math.random() * (b - a + 1)&gt;&gt;0) + a;用任一位<strong>运算符</strong>都可以</li><li>方法3：Math.floor(Math.random() * (b - a + 1)) + a;</li><li>方法4：Math.round(Math.random() * b)+a;<blockquote><p>只有<code>Math.round</code>是向上取整，四舍五入，可以取到<code>1</code></p></blockquote></li></ul></li></ul></blockquote></li></ol><p><strong>推算过程：</strong></p><blockquote><p>要得到 [0 , 5] 区间的<strong>整数</strong></p><ul><li>Math.random()方法，可以得到 0-1 之间的小数</li><li>Math.random()*6，可以得到<code>0-6</code>之间的随机数</li><li>去掉小数，就可以得到[0 , 5] 区间的整数</li></ul></blockquote><blockquote><blockquote><p>要得到 [5 , 8] 区间的<strong>整数</strong></p></blockquote><ul><li>Math.random()方法，可以得到 0-1 之间的小数</li><li><code>Math.random()*4</code>，可以得到<code>0-4</code>之间的随机数</li><li>Math.random()*4+5,可以得到 5-9 之间的小数</li><li>去掉小数，就可以得到[5 , 8] 区间的整数</li></ul></blockquote><ol start="2"><li>如何随机生成随机色（经典面试题）<br><strong>生成rgb(r,g,b)原理：</strong><blockquote><blockquote><p>十进制转rgb</p></blockquote><ul><li>利用<code>Math.random()</code>生成随机数<ul><li>var r &#x3D; parseInt(Math.random() * 256);</li><li>var g&#x3D; parseInt(Math.random() * 256);</li><li>var b &#x3D; parseInt(Math.random() * 256);</li></ul></li><li>用+号拼接出<code>rgb()</code>的值<ul><li><code>var rgb=&quot;(&quot;+r+&quot;,&quot;+g+&quot;,&quot;+b+&quot;)&quot;;</code></li><li>括号和逗号用<strong>引号</strong>包裹、用<strong>加号</strong>拼接，变量不需要</li></ul></li></ul></blockquote></li></ol><p><strong>生成HEX十六进制颜色原理：</strong></p><blockquote><blockquote><p>十进制转十六进制</p></blockquote><ul><li>随机生成十进制的数字，范围是<code>0~255</code></li><li>使用向上取整的<code>Math.round</code><ul><li><code>Math.round(Math.random() * 0xffffff)</code></li></ul></li><li>转换为十六进制<ul><li><code>.toString(16)</code></li></ul></li><li>不一定是六位数，所以需要在前面自动补<code>0</code><ul><li><code>.padStart(6, &quot;0&quot;)</code></li></ul></li><li>加上<code>#</code>号，使用+拼接</li></ul></blockquote><blockquote><pre><code>// rgb颜色随机function rgb() &#123; var r = Math.floor(Math.random() * 256); var g = Math.floor(Math.random() * 256); var b = Math.floor(Math.random() * 256); var rgb = &quot;(&quot; + r + &quot;,&quot; + g + &quot;,&quot; + b + &quot;)&quot;; return rgb;&#125;// 十六进制颜色var randomHex = function () &#123; return (   &quot;#&quot; +   Math.round(Math.random() * 0xffffff)     .toString(16)     .padStart(6, &quot;0&quot;) );&#125;;console.log(randomHex());// 十六进制颜色const randomColor = function () &#123; return &quot;#&quot; + Math.random().toString(16).substr(2, 6);&#125;;console.log(randomColor());</code></pre></blockquote><ol start="3"><li>GRB 颜色 转 16 进制颜色</li></ol><p><strong>基础知识</strong></p><table><thead><tr><th>RGB</th><th>R 对应范围</th><th>G 对应范围</th><th>B 对应范围</th></tr></thead><tbody><tr><td>rgb(0,24,255)</td><td>0-255</td><td>0-255</td><td>0-255</td></tr></tbody></table><table><thead><tr><th>16 进制</th><th>前两位对应 R，取值范围</th><th>中间两位对应 G，取值范围</th><th>最后两位对应 B，取值范围</th></tr></thead><tbody><tr><td>#05f3df</td><td>00-ff</td><td>00-ff</td><td>00-ff</td></tr></tbody></table><blockquote><img src="rgb转十六进制.png"></blockquote><p><strong>底层原理</strong></p><blockquote><p>将 rgb 的值，转成 32 位的二进制，然后再将 32 位二进制转成对应的 16 进制<br><img src="rgb转十六进制原理.png"></p></blockquote><blockquote><p><strong>过程分析：</strong></p><blockquote><ul><li>分别将rgb的三个值转为二进制，根据十六进制对应位置进行位移，组成一个二进制数，然后将它转为十六进制</li><li>每一个rgb值对应八位数，因为最大值255转换成八位数是<code>ffffffff</code></li><li>三个值拼接成32位的二进制数，最左边八位补0</li></ul></blockquote><ul><li><code>r</code>的值对应十六进制的前两位，也就是从右往左，第三个八位数，所以要左移16位才能到达</li><li><code>g</code>的值对应十六进制的中间两位，也就是从右往左，第二个八位数，所以要左移8位才能到达</li><li><code>b</code>的值对应十六进制的最后两位，也就是从右往左，第一个八位数，不用位移</li><li>位移之后怎么拼接？使用按位或<code>|</code><ul><li>按位或操作的两个位数，<strong>只要有一个</strong>是 1 就返回 1，两位都是 0 时返回 0</li></ul></li></ul></blockquote><blockquote><pre><code>// rgb颜色转 16进制颜色function colorRGBToHex(rgb) &#123; // rgbArr=[&#39;&#39;,&#39;2&#39;,&#39;33&#39;,&#39;55&#39;] var rgbArr = rgb.split(/[^\d]+/); // r 移掉丢掉高位   g移掉高位  b 不变 var color = (rgbArr[1] &lt;&lt; 16) | (rgbArr[2] &lt;&lt; 8) | rgbArr[3]; // color.toString(16) 的值，有可能不足6位，则需要向前补0 var _color = color.toString(16); // 转换成16进制 // padStart(6,&#39;0&#39;); // 不足6位，前面补0 return &quot;#&quot; + _color.padStart(6, &quot;0&quot;);&#125;var hexColor = colorRGBToHex(&quot;rgb(2,33,55)&quot;);console.log(hexColor); // #022137</code></pre></blockquote><blockquote><p>**<code>.split(/[^\d]+/)</code>**，用非数字的值作为分隔符，将rgb值拆出来</p><pre><code>var hexColor =(&quot;rgb(2,33,55)&quot;);var rgbArr = rgb.split(/[^\d]+/);console.log(rgbArr);// rgbArr=[&#39;&#39;,&#39;2&#39;,&#39;33&#39;,&#39;55&#39;,&#39;&#39;]console.log(rgbArr[1]);//rgbArr[1]=2</code></pre></blockquote><blockquote><p><strong>toString 方法的三个作用</strong></p><ul><li>将其它类型转换为字符串类型</li><li>检测对象的类型</li></ul><pre><code>Object.prototype.toString.call(arr) === &quot;[object Array]&quot;;</code></pre><ul><li>返回该数字对应进制的字符串</li></ul><pre><code>(10).toString(2); // 10 专为2进制是 &#39;1010&#39;(10).toString(16); // 10 转为 16制进是 &#39;a&#39;</code></pre></blockquote><ol start="4"><li>16 进制转 RGB 颜色<blockquote><p><strong>原理：</strong>本质就是要把对应 16 进制的</p><ul><li>前 2 位转成 r 的值，</li><li>中间 2 位转成 g 的值，</li><li>后两位转成 b 的值</li></ul></blockquote></li></ol><blockquote><p><strong>思路</strong></p><ul><li>先去掉<code>#</code>，换成对应的<code>0x</code></li><li>把十六进制转换为32位的二进制数(只要做位移运算，就会<strong>自动</strong>把操作数转成 32 位二进制)</li><li>右移16位，得到<code>r</code>的二进制数，赋值时自动转成 10 进制</li><li>右移8位，同时<code>&amp; 0xff</code>，得到<code>g</code>的二进制数，赋值时自动转成 10 进制</li><li><code>&amp;0xff</code>，得到<code>b</code>的二进制数，赋值时自动转成 10 进制<img src="16进制转rgb.jpg"></li></ul><pre><code>// 16进制颜色，转rgbfunction colorHexToRGB(hex) &#123; var newHex = hex.replace(&quot;#&quot;, &quot;0x&quot;); var r = newHex &gt;&gt; 16; var g = (newHex &gt;&gt; 8) &amp; 0xff; var b = newHex &amp; 0xff; return &quot;rgb(&quot; + r + &quot;,&quot; + g + &quot;,&quot; + b + &quot;)&quot;;&#125;console.log(colorHexToRGB(&quot;#022137&quot;)); // rgb(2,33,55)</code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（一）</title>
      <link href="/2023/12/01/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/12/01/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="JS简介、核心语法、变量"><a href="#JS简介、核心语法、变量" class="headerlink" title="JS简介、核心语法、变量"></a>JS简介、核心语法、变量</h2><h3 id="一、js简介"><a href="#一、js简介" class="headerlink" title="一、js简介"></a>一、js简介</h3><ol><li>HTML、CSS、JavaScript 三者之间的关系<table><thead><tr><th>前端三层</th><th>语言</th><th>功能</th><th>类比1</th><th>类比 2</th></tr></thead><tbody><tr><td>结构层</td><td>HTML</td><td>搭建结合、放置部件、描述语义</td><td>房子的框架</td><td>人的骨架</td></tr><tr><td>样式层</td><td>CSS</td><td>美化页面、实现布局</td><td>对房子装修</td><td>给人打扮、化妆</td></tr><tr><td>行为层</td><td>JavaScript</td><td>实现交互效果、数据收发、表单验证等</td><td>房子通水、通电</td><td>人的各种行为</td></tr></tbody></table></li></ol><blockquote><ul><li>交互效果：比如网站看到的鼠标滑动显示的下拉菜单、轮播图、选项卡等网页特效</li><li>数据收发：网站页面的数据，都是能通过 ajax 向后台发送请求，然后后台把数据返回给到前端，我们再把数据渲染到页面中。</li><li>表单验证：当我们提交一个注册表单时，会验证我们输入的邮箱、手机、密码等格式是否符合要求，这些都是通过 JS 来验证的。</li></ul></blockquote><ol start="2"><li>JavaScript 发展史<blockquote><p>布兰登.艾奇 (Brendan Eich) JavaScript 创始人， 人称 JS 之父</p></blockquote></li></ol><blockquote><p><strong>JavaScript 创建背景</strong></p><ul><li>1995 年 34 岁的系统程序员 Brendan Eich，任职于网景公司（Netscape ，美国一家专注浏览器的公司）</li><li><code>JavaScript</code>当时开发的目的，处理用户在浏览器端的<strong>输入验证（常说的表单验证）</strong></li><li>布兰登.艾奇，仅用 10 天时间就把 JavaScript 设计出来了 😃</li><li><code>JavaScript</code> 的前身叫<code>LiveScript</code>，后面改名为<code>JavaScript</code></li></ul></blockquote><blockquote><p><strong>Java 与 JavaScript 的关系 ？</strong><br>本质上是没有任何关系，就好像老婆与老婆饼的关系，雷锋与雷峰塔的关系。</p></blockquote><blockquote><p><strong>JavaScript 的早期设计思路</strong></p><ul><li>借鉴 C 语言的基本语法</li><li>借鉴 Java 语言的数据类型和内存管理</li><li>借鉴 Scheme 语言，将函数提升到”第一等公民”(first class)的地位</li><li>借鉴 Self 语言，使用基于原型(prototype)的继承机制<blockquote><p>所以，JavaScript 语言实际上是两种语言风格的混合产物 -（简化的）函数式编程 +（简化的）面向对象编程</p></blockquote></li></ul></blockquote><blockquote><p><strong>JavaScript 的地位</strong></p><ul><li>JavaScript 垄断了浏览器端脚本语言，绝对唯一的霸主<blockquote><p>在这之前其实有三种脚本语言 VBScript 、JScrip、JavaScript 。随着时间的推移，有两种被淘汰了，只剩下 JavaScript</p></blockquote></li><li>任何做浏览器端开发的工程师都不可能绕开 JavaScript</li><li>js 现在能做什么？<ul><li>表单动态校验（密码强度检测）js 产生的最初目的</li><li>网页特效</li><li>服务端开发 Node.js (Node.js 是 JS 的一个运行平台)</li><li>桌面程序(Electron)</li><li>APP(Cordova)</li><li>游戏开发(cocos2d-js)</li></ul></li></ul></blockquote><ol start="4"><li>前端 与 后端<blockquote><p><strong>如何理解前端（客户端）</strong></p><ul><li>所谓前端（客户端），其本质就是直接面向用户的那一端。</li><li>前端主要是用来：处理界面，交互逻辑，用户能看见的东西，是我们前端开发要解决的问题</li><li>前端开发的主要编程语言：HTML、CSS、JavaScript<br><strong>如何理解后端（服务端）</strong></li><li>后端主要是用来：操作数据库，实现数据的增删改查，处理数据。</li><li>后端开发主要的编程语言：Java、Python、PHP、C&#x2F;C++、GO</li><li>前端和后端通过 HTTP 协议进行传输</li></ul></blockquote></li></ol><blockquote><p><strong>JavaScript 是一种前端开发语言，为什么他现在可以做服务端开发 ？</strong><br>在 2009 年，JavaScript 诞生了一个著名的平台 <code>NodeJS</code>。NodeJS 就是 JavaScript 的一个运行平台，NodeJS 的诞生，让 JS 的触角延伸到了服务器端。 也就是说随着 NodeJS 的诞生，JS 也可以操作数据库了，也就可以做服务端开发。</p></blockquote><ol start="5"><li>ECMAScript 与 JavaScript 的关系<blockquote><ul><li>1996 年 11 月，网景公司将 JavaScript 提交给欧洲计算机制造商协会（ECMA）进行标准化。</li><li>1997 年，欧洲计算机制造商协会（ECMA）设置了 JavaScript 的标准，命名为 ECMAScript</li></ul></blockquote></li></ol><blockquote><p><strong>JavaScript 有 ECMAScript 的关系</strong></p><ul><li>JavaScript 是语言，ECMAScript 是标准</li><li>JavaScript 实现了 ECMAScript 标准，而 ECMAScript 标准规范了 JavaScript</li></ul></blockquote><ol start="6"><li>JavaScript 知识体系<blockquote><ul><li>语言核心（ECMAScript5）</li><li>DOM （Document Object Model）文档对象模型</li><li>BOM （Browser Object Model）浏览器对象模型</li></ul></blockquote></li></ol><blockquote><p><strong>语言核心（ECMAScript5）</strong></p><ul><li>我们接下来要学习的 JS 语言核心，就是<strong>ECMAScript5</strong>中的标准，标准中规定了语言的</li><li>基本语法</li><li>类型</li><li>语句</li><li>关键字</li><li>保留字</li><li>操作符</li><li>全局对象<blockquote><p>学习完这个后，才会再学习后面的 ECMAScript6、7、8、9….13</p></blockquote></li><li>ES6 对应的是 ECMAScript2015( ES2015）改动最多，主要是让 JS 工程化，构建化，所以我们常把 ES6 之后的归到 ES6。</li><li>其它不同版本间的对应关系如下<ul><li>ES7（ES2016）、ES8（ES2017）、ES9（ES2018）、ES10（ES2019）、ES11（ES2020）、ES12（ES2021）、ES13（ES2022）</li></ul></li></ul></blockquote><blockquote><p><strong>DOM（Document Object Model）文档对象模型</strong><br>DOM 将整个页面抽象为一组分层节点（DOM 树），开发者可以通过操作 DOM 树来随心所欲的控制网页的内容和结构和样式。<br>我们常见的网页特效，就是通过 JS 来操作 DOM 实现的</p><ul><li>Document文档，表示的就是整个HTML网页文档</li><li>Object对象，表示将网页中的每一个部分都转换为一个对象</li><li>Model模型，表示对象之间的关系，这样方便我们获取对象。</li></ul></blockquote><blockquote><p><strong>BOM（Browser Object Model）浏览器对象模型</strong></p><ul><li>BOM 用于支持访问和操作浏览器的窗口，JS 通过操作 BOM，可以获取窗口的大小，窗口输入的地址，控制前进和后退，监听窗口大小的改变等</li></ul></blockquote><ol start="7"><li>JavaScript 为何称为脚本语言<blockquote><ul><li>所谓的脚本语言：是指不需要提前编译，运行的过程中边编译，边执行。</li><li>JS 本质上就是在运行过程中边编译，边执行的，JS 是由 JS 解释器（JS 引擎）来逐行进行解释并执行</li></ul></blockquote></li></ol><blockquote><p><strong>什么是 JS 解释器 ？</strong><br>这就需要我们了解浏览器的两大组成部分：渲染引擎 和 JavaScript 引擎</p><ul><li>渲染引擎：用来解析 HTML 与 CSS，俗称内核，比如 chrome 浏览器的 blink，老版本的 webkit</li><li>JS 引擎： 也称为 JS 解释器，用来读取网页中的 JavaScript 代码，对其处理后运行。比如 chrome 浏览器的 V8 引擎。<blockquote><p>浏览器本身并不会执行 JS 代码，而是通过内置 <strong>JavaScript 引擎（解释器）</strong>来编译和执行 JS 代码。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行。</p></blockquote></li></ul></blockquote><h3 id="二、javascript基础语法"><a href="#二、javascript基础语法" class="headerlink" title="二、javascript基础语法"></a>二、javascript基础语法</h3><ol><li>书写位置<blockquote><p><strong>行内式</strong></p><ul><li>直接写在标签上，有点类似行内样式，这种写法基本不用，只做了解。</li></ul><pre><code>&lt;div onclick=&quot;alert(&#39;主人，你好&#39;);&quot;&gt;点我&lt;/div&gt;&lt;a href=&quot;JavaScript:;&quot;&gt;禁止页面刷新&lt;/a&gt;</code></pre></blockquote></li></ol><blockquote><p><strong>内部js</strong></p><ul><li>JS 代码直接写在写在<script><strong>标签内部</strong></li><li><script>标签，可以写在`<head></head>`标签中，也可以写在`<body></body>`标签中</li><li><script>标签中的type属性表示将<script></script>之间的文本内容，在浏览器中要转换为 js 脚本执行，现在可以省略不写。</li></ul></blockquote><blockquote><p><strong>外部js</strong></p><ul><li>把 js 代码，单独保存在一个 js 文件中</li><li>通过<code>&lt;script&gt;</code>标签的 src 属性来加载 js 文件</li><li><code>&lt;script&gt;</code>标签可以写在 head 或 body 标签中</li><li>如果采用了外部 JS 的写法，则<code>&lt;script&gt;</code>标签中，不能再写 JS 代码，写了也不会生效</li></ul><pre><code>&lt;!--错误写法，如果src属性中引入了外部js文件，则&lt;script&gt;标签不能再写js代码--&gt;&lt;script src=&quot;js/demo.js&quot;&gt; alert(&#39;错误写法，弹窗不会弹出&#39;);&lt;/script&gt;</code></pre></blockquote><blockquote><blockquote><p>注意1：在实际的开发中，我们常用的就是外部 JS 这种写法，因为他有很多优点<br><strong>优点：</strong></p></blockquote><ul><li><p>结构彻底分离</p></li><li><p>多页面可以进行复用</p></li><li><p>后期好维护修改</p></li><li><p>浏览器可以根据特定的设置缓存所有外部 JS 文件，所以多个页面都用到同一个文件，那么这个文件只需要下载一次，页面加载速度更快。如果后续再打开网页，浏览器会直接从缓存中读取。</p></li></ul><p> <strong>唯一缺点：</strong></p><ul><li>增加请求数（外部文件），但相对上面的优点，完全可以忽略不计。<blockquote><p>提示：html文件是不会被缓存的！但css和js文件会被缓存，如果做了修改，就得重命名才能重新加载</p></blockquote></li></ul></blockquote><blockquote><blockquote><p>注意2：Javascrip 文件不能脱离 HTML 网页运行，只有在后面学到 Node.JS 时，JS 可以在 NodeJS 平台上独立运行。</p></blockquote></blockquote><ol start="2"><li>JS 注释<blockquote><ul><li>阿里巴巴js注释规范：<a href="https://github.com/airbnb/javascript#comments">https://github.com/airbnb/javascript#comments</a></li><li>百度js注释规范：<a href="https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md#user-content-24-%E6%B3%A8%E9%87%8A">https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md#user-content-24-%E6%B3%A8%E9%87%8A</a></li></ul></blockquote></li></ol><blockquote><p><strong>单行注释：</strong></p><ul><li><code>// ……</code></li><li>快捷键：<code>ctrl+/</code><br><strong>多行注释：</strong></li><li><code>/* */</code></li><li>快捷键<code>Alt + shift + a</code></li></ul></blockquote><ol start="3"><li><p>JavaScript 中的注意事项</p><blockquote><ul><li>严格区分<strong>大小写</strong></li><li>语句字符都要是<strong>英文</strong>状态下（字符串可以使用任意字符）</li><li>每条语句以<strong>分号（;）</strong>结尾<ul><li>如果不写分号，意味着由解析器来确定语句在哪里结尾。</li><li>加分号有助于在某些情况下提升性能，因为解析器会尝试在合适的位置补上分号以纠正语法错误</li><li>如果不加分号，在后期压缩代码时，有可能会造成语法错误</li><li>而且有些时候，浏览器会加错分号，所以在开发中分号必须写</li></ul></li><li>JS 中会忽略多个空格和换行<ul><li>可以利用空格和换行，对代码进行格式化，这样写出来的代码更美观</li></ul></li></ul></blockquote></li><li><p>JS 中的输入输出语句</p><blockquote><p><strong>alert('弹窗')</strong></p><ul><li>alert() 语句，会在页面打开时，弹出弹窗</li><li>alert()语句，会阻止程序的执行，他会在此代码执行确认后，才会接着执行后面的代码</li><li>可以用来调式代码</li></ul></blockquote></li></ol><blockquote><p>console.log('控制台输出内容')</p><ul><li>浏览器控制台打印输出信息</li><li>他<strong>不会</strong>打断程序运行</li><li>常用来调试代码</li><li>可以一次打印多条内容，每条内容间用<code>,</code>逗号隔开</li></ul></blockquote><blockquote><p>prompt('提示用户输入信息')</p><ul><li>浏览器弹出输入框，用户输入内容</li></ul></blockquote><blockquote><blockquote><p><code>alert</code>、<code>console.log</code>和<code>prompt</code> 中，如果输入的是<strong>数字、已声明的变量</strong>，则不用加引号；如果输入的是<strong>字符串</strong>，则要加上''单引号或""双引号包裹。</p></blockquote></blockquote><h3 id="三、javascript变量与字面量"><a href="#三、javascript变量与字面量" class="headerlink" title="三、javascript变量与字面量"></a>三、javascript变量与字面量</h3><ol><li>硬盘、内存、CPU 三者关系<blockquote><p>硬盘，内存，CPU 三者各自的作用</p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>硬盘</td><td>负责程序和数据的<strong>永久存储</strong>，断电数据不丢失的特点</td></tr><tr><td>内存</td><td>负责<strong>连接</strong>CPU和硬盘；存储<strong>临时</strong>使用的数据;保存从硬盘读取的数据，提供给 CPU 使用；保存 CPU 的一些临时执行结果，以便 CPU 下次使用或保存到硬盘；<strong>断电数据就会清空，丢失</strong></td></tr><tr><td>CPU</td><td>运行<strong>总指挥</strong>，负责发指令，数据处理与计算</td></tr></tbody></table></blockquote></li></ol><p><strong>他们三者之间如何工作的？</strong></p><blockquote><p>当我们要运行某个程序时：</p><ul><li>CPU首先接受到我们的命令，</li><li>然后它(CPU)告诉<strong>硬盘</strong>：我要运行存储在你那的程序，你把该程序送到<strong>内存</strong>去</li><li>CPU对<strong>内存</strong>说，我让硬盘把程序送到你这里来了，你保存一下。</li><li>等该程序被完整的送到内存之后。CPU就开始执行程序，可以进行一系列操作</li><li>当我们在编辑文档等程序时，如果没有<code>ctrl+s</code>，那么此时编辑的数据是存储在内存的，只有<code>ctrl+s</code>后才会保存到硬盘</li><li>因此，没有<code>ctrl+s</code>的数据，一旦断电就无法恢复，因为内存只能临时存储数据</li></ul></blockquote><p><strong>CPU 可以直接从硬盘中读取数据，为什么要在中间加一个内存呢？</strong></p><blockquote><ul><li>因为CPU的处理速度特别快，而硬盘的读取和存储数据的速度特别的慢</li><li>如果直接从硬盘读数据，而硬盘的速度跟上不 CPU 的速度，就会对 CPU 造成很大的浪费，同时我们操作电脑时，就会很卡。</li><li>而内存的数据就很快了，他可以跟上 CPU 的处理速度。</li><li>内存就是为了解决 cpu 和硬盘之间速度不匹配的冲突，内存是由电流实现的存取速度，相当快，不过断电就丢失。</li></ul></blockquote><p><strong>总结</strong></p><table><thead><tr><th>名称</th><th>作用</th><th>速度</th><th>类比</th></tr></thead><tbody><tr><td>硬盘</td><td>负责程序和数据的永久存储，断电数据不丢失的特点</td><td>很慢</td><td>大仓库</td></tr><tr><td>内存</td><td>负责连接CPU和硬盘；存储临时使用的数据；断电数据就会清空，丢失</td><td>很快，几乎硬盘的 100 倍</td><td>中转站</td></tr><tr><td>CPU</td><td>运行总指挥，负责发指令，数据处理与计算</td><td>很快，几乎硬盘的 100 倍</td><td>车间</td></tr></tbody></table><blockquote><blockquote><p>CPU，内存 决定你电脑运行的快慢，硬盘决定你可以放东西的多少 ！</p></blockquote></blockquote><ol start="2"><li><p>什么是变量</p><blockquote><ul><li>大白话：变量就是一个用来装东西的盒子，再往深里说，他就是用来存放数据的容器。</li><li>变量的本质： 变量是程序在内存中申请的一块用来存放数据的空间。</li></ul></blockquote></li><li><p>如何声明变量</p><blockquote><ul><li>在 js 中，使用<code>var</code>关键词来<strong>声明</strong>一个变量</li><li>a是自定义的<strong>变量名</strong></li><li>使用 var 关键字声明变量后，计算机会自动为变量分配<strong>内存空间</strong>，用来存储变量的值</li><li>变量声明后，就可以给变量<strong>赋值</strong>，<code>= </code>等号表示赋值</li></ul><pre><code>var a;a=&quot;小米&quot;</code></pre><ul><li>通过变量名就可以访问变量在内存中存储的值。</li><li>赋值后我们就可以使用他了，我们可以在控制台通过输出语句输出变量 a 的值</li></ul><pre><code>console.log(a);</code></pre></blockquote></li><li><p>变量的初始化</p><blockquote><p>我们在<strong>声明</strong>一个变量的<strong>同时</strong>为其<strong>赋值</strong>，称为变量的初始化</p><pre><code>var a=&quot;张三&quot;;concole.log(a);</code></pre></blockquote></li><li><p>更新变量的值</p><blockquote><ul><li>一个变量被重新赋值后，他之前的值就会被覆盖</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给变量name 重新赋值</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li><li><p>同时声明多个变量<br><strong>先声明后赋值：</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">;</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>z<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li></ol><p><strong>声明的同时赋值</strong></p><blockquote><pre><code>var x=1,  y=2,  z=3;  console.log(x,y,z);</code></pre></blockquote><p><strong>声明过程可赋值，可不赋值</strong></p><blockquote><pre><code>var x,   y = 1,   z = 4;//在声明之后为x赋值 x = 2; console.log(x, y, z);</code></pre></blockquote><ol start="7"><li><p>声明变量的几种特殊情况</p><blockquote><ul><li>声明变量，但没有赋值，默认值为<code>undefined</code><blockquote><p>我们后期如果要判断一个变量是否成功赋值，我们就可以通过检测他的值是否是 undefined 来判断</p></blockquote></li><li>不声明变量,直接进行赋值</li></ul><pre><code>&lt;script&gt; x = 7; // 控制台输出得到的结果是 7 console.log(x);&lt;/script&gt;</code></pre><blockquote><p>这是 js 的一个语法特性，只需要了解就好，在实际开发中非常<strong>不推荐</strong>这样写。</p></blockquote><ul><li>直接输出一个不存在的变量</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token comment" spellcheck="true">// 控制台**会报错** z is not defined</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote></li><li><p>变量的命名（标识符）</p><blockquote><p>变量的命名必需要遵守一定的规则。</p><ul><li>标识符：在 js 中所有可以由我们自主命名的都可以称为标识符</li></ul></blockquote></li></ol><p><strong>标识符的命名规则</strong></p><blockquote><ul><li>只能由字母，数字，_下划线，$组成，但<strong>不能</strong>以数字开头</li><li>严格区分<strong>大小写</strong>，a 和 A 是两个不同的变量</li><li>不能使用<strong>关键字</strong>或<strong>保留字</strong>做为变量名</li></ul></blockquote><p><strong>关键字和保留字</strong></p><blockquote><ul><li>关键字：就是 JavaScript 语言本身已经使用的一些单词。这些单词具有特定的用途，用户自定义的标识符（名字）不能与关键字相同 。</li><li>保留字：就是 JavaScript 语本身没有使用，但是考虑后期随之着 JS 的发展，可能会使用的一些单词。这些单词建议用户不要使用。</li><li>以下是部分关键字和保留字：<table><thead><tr><th>abstract</th><th>arguments</th><th>boolean</th><th>break</th><th>byte</th></tr></thead><tbody><tr><td>case</td><td>catch</td><td>char</td><td>class*</td><td>const</td></tr><tr><td>continue</td><td>debugger</td><td>default</td><td>delete</td><td>do</td></tr><tr><td>double</td><td>else</td><td>enum*</td><td>eval</td><td>export*</td></tr><tr><td>extends*</td><td>false</td><td>final</td><td>finally</td><td>float</td></tr><tr><td>for</td><td>function</td><td>goto</td><td>if</td><td>implements</td></tr><tr><td>import*</td><td>in</td><td>instanceof</td><td>int</td><td>interface</td></tr><tr><td>let</td><td>long</td><td>native</td><td>new</td><td>null</td></tr><tr><td>package</td><td>private</td><td>protected</td><td>public</td><td>return</td></tr><tr><td>short</td><td>static</td><td>super*</td><td>switch</td><td>synchronized</td></tr><tr><td>this</td><td>throw</td><td>throws</td><td>transient</td><td>true</td></tr><tr><td>try</td><td>typeof</td><td>var</td><td>void</td><td>volatile</td></tr><tr><td>while</td><td>with</td><td>yield</td><td>eval</td><td>arguments</td></tr></tbody></table></li></ul></blockquote><ol start="9"><li>推荐两种优秀的命名法<br><strong>驼峰命名</strong>（最推荐）<blockquote><ul><li><strong>首个</strong>单词小写，其余每个单词开头字母大写<br><code>myFirstName 、myStudentCount 、getBoxColor、navList</code><blockquote><p>不建议使用全小写 myfirstname，可读性差</p></blockquote></li></ul></blockquote></li></ol><p><strong>C 语言风格</strong></p><blockquote><ul><li>所有单词全小写，单词之间用_下划线分隔<br><code>my_first_name 、 my_student_count</code></li></ul></blockquote><p>匈牙利命名法（了解即可）</p><blockquote><ul><li>基本原则是：变量名=属性+类型+对象描述</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// i 提示变量类型为 整型</span>iMyStudentCount<span class="token punctuation">;</span></code></pre></blockquote><ol start="10"><li>字面量<blockquote><p>可以理解为<strong>不可能发生改变</strong>的(固定)值。他就是他的字面意思。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token keyword">var</span> A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">var</span> A <span class="token operator">=</span> <span class="token string">"我爱你"</span><span class="token punctuation">;</span> <span class="token keyword">var</span> A <span class="token operator">=</span> <span class="token string">"优秀"</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ul><li>源代码解读<ul><li>上面代码中，1，'我爱你'，'优秀' 就是字面量。</li><li>A 是变量，A 可以表示 1，也可以表示'我爱你'，还可以表示'优秀'。</li><li>在实际开发中，我们都是<strong>通过变量来保存一个字面量</strong>，然后只需要在每次用到字面量的地方，调用下该变量就好</li></ul></li></ul></blockquote></li></ol><h3 id="四、综合案例"><a href="#四、综合案例" class="headerlink" title="四、综合案例"></a>四、综合案例</h3><ol><li><p>弹出用户输入的信息 </p><blockquote><p><strong>需求：</strong></p><ul><li>当用户打开浏览器时，弹出输入框，要求用户输入姓名，点击确认后，以弹窗形式，显示用户的姓名。<br><strong>实现思路：</strong></li><li>使用 prompt() 函数弹出输入框，让用户输入内容</li><li>要通过变量来接受 prompt() 函数的返回值</li><li>通过 alert()函数，显示结果</li></ul></blockquote></li><li><p>如何交换两变量的值</p><blockquote><p><strong>需求：</strong></p><ul><li>定义两个变量同时赋值，然后交换两个变量中的值。<br><strong>实现思路：</strong></li><li>这里我们可以用现实生活中的例子来解答这道题</li><li>首先定义两个变量 apple 和 pear，然后分别赋值"苹果"和"梨子"</li><li>我们把这两个变量想像成两个盘子，变量的值，想像成盘子中放入了苹果和梨子。</li><li>现在的需求就是要把苹果放到 pear 盘中去，把梨子放到苹果盘子中去。</li><li>所以我们需要再借助第三个盘子，再声明一个变量 desk，不赋值。相当于空盘子</li><li>然后把苹果放到空盘子中 desk 中，再把梨子放到苹果盘中，再把 desk 盘中的苹果放到梨子盘中，就 ok 了</li></ul></blockquote></li></ol><h3 id="五、处理报错和REPL环境"><a href="#五、处理报错和REPL环境" class="headerlink" title="五、处理报错和REPL环境"></a>五、处理报错和REPL环境</h3><ol><li><p>处理报错</p><blockquote><p>在初学 JS 的时候，我们经常会写错代码，造成控制台报错，初学者经常会遇到以下两种常见错误</p><ul><li>Uncaught SyntaxError：未捕获的语法错误,<ul><li>常见的是使用了中文符号</li></ul></li><li>Uncaught ReferenceError：引用错误<ul><li>常见的是：误把字符串当变量用，或找不到变量，变量未定义</li></ul></li></ul></blockquote></li><li><p>REPL 执行环境</p><blockquote><ul><li>REPL(Read-Eval-Print-Loop)：交互式解析器</li><li>在 REPL 环境下，可以<strong>定义和运行</strong>变量、函数、对象</li><li><code>console</code>控制台其实也是一个 REPL 环境，可以使用它<strong>临时测试</strong>表达式的值<img src="REPL.png"></li></ul></blockquote></li></ol><blockquote><p>在控制台书写代码后，按回车，就会进入上面四个流程：</p><ul><li>先<strong>读取</strong>代码，再<strong>执行</strong>，执行后把结果<strong>打印</strong>出来，然后又可以<strong>重复</strong>刚才的动作。</li><li>接着在控制台书写代码，然后回车，又会进入上面四个流程</li></ul></blockquote><h2 id="JS数据类型和类型转换"><a href="#JS数据类型和类型转换" class="headerlink" title="JS数据类型和类型转换"></a>JS数据类型和类型转换</h2><h3 id="一、数据类型简介和检测"><a href="#一、数据类型简介和检测" class="headerlink" title="一、数据类型简介和检测"></a>一、数据类型简介和检测</h3><ol><li><p>为什么需要数据类型</p><blockquote><ul><li>程序需要处理大量的不同数据，如果用同一种方式处理那肯定是处理不了的。所以在计算机中同样需要将数据分成不同类型，然后用不同的方式来处理和计算。</li><li>数据类型背后，隐藏的是编译器或者解释器对数据处理方式的定义。把数据分成不同的数据类型，然后用使用不同的处理方式</li></ul></blockquote></li><li><p>JS 中数据类型的分类</p><blockquote><p>7 种<strong>基本</strong>数据类型（值类型）</p><ul><li>String 字符串类型</li><li>Number 数字类型</li><li>Boolean 布尔类型</li><li>Null 类型</li><li>Undefined 未定义</li><li>Symbol 符号</li><li>BigInt 任意精度的整数<br><strong>引用数据</strong>类型（对象类型）</li><li>对象（Object）、数组（Array）、函数（Function）</li><li>还有两个特殊的对象：正则（RegExp）和日期（Date）。</li></ul></blockquote></li><li><p>变量的类型</p><blockquote><ul><li>在 JS 中，变量的数据类型是由变量中存储的值的数据类型来决定的。</li><li>同时 JS 是一种弱类型的语言，他不用提前声明变量的类型。</li><li>代码运行时，变量的数据类型是由JS引擎根据=右边变量的数据类型来判断的。</li><li>运行完毕之后，变量就确定了数据类型。</li><li>也就是说相同的变量在不同的时刻可以是不同的类型。</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时a是 string字符串类型</span> a <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时a就是 number 数字类型</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时a就是 boolean布尔型</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote></li><li><p>typeof 操作符</p><blockquote><p><code>typeof</code> 检测返回值的类型，然后 <code>console.log</code> 把值的类型在控制台输出。</p><ul><li>JS 有很多种数据类型，我们需要有一种手段来确定变量的数据类型，那么<code>typeof</code>运算符就可以做到。</li><li>使用 typeof 运算符可以检测值或者变量的类型。</li><li>用法：<ul><li>检测<strong>值</strong>类型 typeof 值; 或 typeof(值)</li><li>检测<strong>变量</strong>类型 typeof 变量名; 或 typeof(变量名)</li><li>如果 typeof 标测的是一个<strong>表达式</strong>，则一定要带上括号,如 typeof(2+'2');</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//值类型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">"艾编程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span><span class="token comment" spellcheck="true">//变量类型</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>   b <span class="token operator">=</span> <span class="token string">"艾编程"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// number</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span></code></pre><blockquote><p>注意区分变量和值：变量是不能用' '单引号或"" 双引号包裹的，用<code>&#39;&#39;</code>或<code>“”</code>包裹的是字符串</p></blockquote><ul><li>typeof的<strong>返回值类型</strong>是字符串类型</li></ul><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">typeof</span> 小米 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//string</span><span class="token comment" spellcheck="true">//注意：</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span></code></pre><ul><li>只要是通过输入框得到的值，typeof类型都是<code>string</code>字符串类型</li></ul><pre><code>&lt;script&gt; var age = prompt(&quot;请输入你的年龄&quot;); // 用户输入 18 console.log(typeof age);&lt;/script&gt;</code></pre></blockquote></li></ol><h3 id="二、5种基本数据类型"><a href="#二、5种基本数据类型" class="headerlink" title="二、5种基本数据类型"></a>二、5种基本数据类型</h3><blockquote><p>在接下的数据类型学习中，我们主要学习Number、String、Boolean、null、undefined 的 5 种基础数据类型<br>关于BigInt和Symbol在后面的 ES6 中，我们再来学习。</p></blockquote><h4 id="Number-数字类型"><a href="#Number-数字类型" class="headerlink" title="Number 数字类型"></a>Number 数字类型</h4><ol><li><p>什么是 Number 数字类型</p><blockquote><ul><li>所有数字都是 Number 类型，包括整数（正负数）和浮点数（小数）；</li><li>在表达小于 1 的数时，小数点前面的 0 可以去掉，比如 0.2可以写成.2</li></ul></blockquote></li><li><p>不同进制的数字</p><blockquote><p>不同进制在线转换工具：<a href="https://tool.lu/hexconvert/">https://tool.lu/hexconvert/</a></p></blockquote></li></ol><p><strong>二进制数</strong></p><blockquote><ul><li>二进制数以<code>0b</code>开头</li><li>二进制数字序列范围 0-1，逢 2 进 1</li></ul></blockquote><p><strong>八进制数</strong></p><blockquote><ul><li>八进制数值以<code>0</code>开头</li><li>八进制数字序列范围 0-7 ,逢 8 进 1</li></ul></blockquote><p><strong>十六进制数</strong></p><blockquote><ul><li>十六进制数以<code>0x</code>开头</li><li>十六进制序列范围 0-9 以及 A-F</li></ul></blockquote><p><strong>科学记数法</strong></p><blockquote><ul><li>对于非常大或非常小的数，我们可以用科学记数法来表示</li><li><code>e7</code>表示 <code>10</code> 的 7 次方，小数点<strong>向右</strong>移动 7 个点的位置</li><li><code>e-7</code>表示 <code>0.1</code> 的 7 次方，小数点<strong>向左</strong>移动 7 个点的位置</li></ul></blockquote><p><strong>数字中最大值和最小值</strong></p><blockquote><ul><li>由于内存的限制，js 中不支持表示这个世界上所有数值。js 中能表示的</li><li>最小数保存在 <code>Number.MIN_VALUE</code> 中</li><li>最大数保存在 <code>Number.MAX_VALUE</code> 中</li></ul></blockquote><p><strong>正无穷和负无穷大</strong></p><blockquote><ul><li>因为计算机内存限制，js 中不支持表示这个世界上所有数值。</li><li>如果计算的数值超出了 js 能表示正数范围，则会以 <code>Infinity</code> 正无穷表示</li><li>如果计算的数值超出了 js 能表示负数范围，则以<code>-Infinity</code> 负无穷表示<blockquote><p>非零数字除以<code>0</code>时，结果是<code>infinity</code>或<code>-infinity</code></p></blockquote></li></ul></blockquote><ol start="3"><li>NaN<blockquote><ul><li>NaN(Not a number) 不是一个数字</li><li>NaN 用 typeof 检测，得到的结果是 number，说明 NaN 是一个<strong>数字类型</strong></li><li>可以理解为 NaN <strong>不是数字</strong>的数字类型</li></ul></blockquote></li></ol><p><strong>NaN 的作用</strong></p><blockquote><ul><li>NaN 表示本来要返回的数值<strong>操作失败</strong>了</li><li>两个数值做运算，如果操作失败了，就会返回 NaN，而不是抛出错误</li><li>用 0 除任意数值<strong>在其他语言中</strong>通常都会导致错误，从而中止代码执行。<strong>但是在 js</strong> 中，不会，而是返回 NaN</li></ul></blockquote><p><strong>关于 NaN 的运算</strong></p><blockquote><ul><li>0 除以 0 的结果是 NaN</li><li>在数学运算中，如果得不到数字的结果，其结果往往是 NaN。</li><li>任何数与 NaN 做运算，都会得到 NaN，<strong>除了</strong>与<strong>字符串</strong>拼接。</li></ul><pre><code>&lt;script&gt; console.log(NaN + true + &quot;false&quot;);//NaN+true=NaN,NaN+字符串即拼接//结果为&quot;NaNfalse&quot;,typeof为string//字符串与任何类型拼接，得到的都是字符串类型&lt;/script&gt;</code></pre></blockquote><blockquote><ul><li>NaN 自己不与自己相等</li></ul><pre class=" language-js"><code class="language-js">script<span class="token operator">></span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NaN</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">-</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NaN</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">NaN</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NaN</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token number">NaN</span> <span class="token operator">+</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'NaN1'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote><p><strong>isNaN()</strong></p><blockquote><ul><li>这个函数接收一个参数，可以是<strong>任意</strong>数据类型，然后判断这个参数是否<strong>“不是数值”</strong></li><li>isNaN 会尝试把它<strong>个值转换为数值</strong>，如果转换成数值字成功，也会认为是数字，则结果也是 false<blockquote><p>特别注意：isNaN 并不是用来判断这个参数是不是NaN这个值<br>isNaN(NAN)结果是true</p></blockquote></li><li>如果参数是数值，则返回 false，否则返回 true</li></ul><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false  1是一个数字，所以返回false假的</span><span class="token comment" spellcheck="true">//特别注意："1"原本是字符串，但被转换成了数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false '1'被转成数字1，所以返回false</span></code></pre></blockquote><h4 id="String字符串类型"><a href="#String字符串类型" class="headerlink" title="String字符串类型"></a>String字符串类型</h4><blockquote><ul><li>符串就是 "人类的自然语言"</li><li>字符串要用引号包裹，<strong>双引号</strong>或者<strong>单引号</strong>均可</li></ul></blockquote><ol><li><p>分清数字和字符串</p><blockquote><ul><li>数字11和字符串'11'在语义上是不同的，前者表达一个数量，后者是一个文本</li></ul></blockquote></li><li><p>双引号 与 单引号嵌套</p><blockquote><ul><li>双引号里面可以嵌套''单引号，单引号也可以嵌套""双引号</li><li><strong>但</strong>双引号里不能直接嵌套双引号，单引号里也不能直接嵌套单引号</li><li>单引号或双引号，在匹配的时候，都是以就近原则来进行匹配的</li><li>推荐使用单引号内嵌套双引号</li></ul></blockquote></li><li><p>转义字符</p><blockquote><p>如果需要在字符串中使用特殊字符，可以用转义符 \ 转义</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td><code>\n</code></td><td>换行符， n 是 newline 的意思</td></tr><tr><td><code>\\</code></td><td>反斜杠<code> \</code></td></tr><tr><td><code>\&quot;</code></td><td><code>&#39;</code>单引号</td></tr><tr><td><code>\&quot;</code></td><td><code>&quot;</code>双引号</td></tr><tr><td><code>\t</code></td><td>tab 缩进</td></tr></tbody></table></blockquote></li><li><p>字符串的拼接</p><blockquote><ul><li><code>+ </code>号，可以用来拼接两个 或 多个字符串</li><li>字符串与<strong>任何</strong>类型拼接，得到的都是字符串</li><li>字符串与变量拼接时，变量不能添加引号</li></ul></blockquote></li><li><p>空字符串</p><blockquote><ul><li>空字符串，直按书写空的 ''单引号 或 ""双引号 表示空字符串</li><li>空字符中的空格会占一个字符</li><li>空字符串有什么用 ？<ul><li>可以用来转换数据类型</li><li>可以提前预设变量保存值为字符串类型，如果不设置为<code>&#39;&#39;</code>，有可能会出现错误的结果</li></ul></li></ul></blockquote></li><li><p>length 属性</p><blockquote><ul><li>通过 length 属性，可以获取整个字符串的长度</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"我就是我，不一样的花朵"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote></li></ol><h4 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h4><blockquote><ul><li>布尔值主要是用来做<strong>逻辑判断</strong></li><li>布尔类型只有两个值：true(真)和false（假），没有引号</li><li>如果给true和false加上<code>&quot;&quot;</code>双引号或<code>&#39;&#39;</code>单引号，那就变成了字符串了</li></ul></blockquote><h4 id="null-空类型"><a href="#null-空类型" class="headerlink" title="null 空类型"></a>null 空类型</h4><blockquote><ul><li>null 类型只有一个值，就是<code>null</code></li><li>null 表示一个<strong>空对象指针</strong></li><li>用typeof检测 null 的类型，得到的是<code>Object</code></li></ul></blockquote><blockquote><blockquote><p>虽然 typeof null 得到值为 Object,但是 null 是基本数据类型，这是一个历史遗留问题，如果要深究，那就只能用下面这段话来解释 (以下内容来自：你不知道的 JavaScript 上卷-103 页)</p></blockquote><ul><li>不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判断为 object 类型</li><li>null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回 "object"<blockquote><p>面试中会问到这个点，问这个问题的本质不是考这个点，因为没有意义，而是想通过这个点，看你平时学习是否研究底层，会阅读相关 JS 书籍。</p></blockquote></li></ul></blockquote><p><strong>null 的作用</strong></p><blockquote><ul><li>如果一个变量被声明后，<strong>将来</strong>是用来保存<strong>对象值</strong>的，那建议用 null 来初始化，不要使用其他值。</li><li>当我们需要将对象、数组、事件监听进行销毁时，我们就可以把他们设置为 null，只有把他们设置为 null 时，JS 垃圾回收器才会把他们当成垃圾，进行<strong>垃圾回收</strong></li></ul></blockquote><h4 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h4><blockquote><ul><li>undefined 类型，只有一个值，就是undefined</li><li>当声明一个变量，但是<strong>并不给变量赋值</strong>时，它的值就是<code>undefined</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token keyword">var</span> a<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a的值是undefined</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 变量a的类型是 undefined</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><blockquote><p>我们经常在调试中或报错中会发现有些值打印是 undefined，就说明这个变量定义了，没有赋值，或赋值不成功。</p></blockquote></blockquote><h3 id="三、数据类型转换"><a href="#三、数据类型转换" class="headerlink" title="三、数据类型转换"></a>三、数据类型转换</h3><blockquote><ul><li>JavaScript 是一种<strong>动态类型语言</strong>(dynamically typed language)。</li><li>这意味着你在声明变量时可以不必指定数据类型，而数据类型会在代码执行时会根据需要<strong>自动转换</strong>。</li><li>JS 中通常会有三种方式的数据类型转换<ul><li>其它类型 --> 数值</li><li>其它类型 --> 字符串</li><li>其它类型 --> 布尔值</li></ul></li></ul></blockquote><h4 id="其它类型转换为数字型"><a href="#其它类型转换为数字型" class="headerlink" title="其它类型转换为数字型"></a>其它类型转换为数字型</h4><blockquote><p>将其它数据类型转换为数字型，有以下 4 种方法</p><table><thead><tr><th>函数</th><th>说明</th><th>实例</th></tr></thead><tbody><tr><td>Number()函数 强制转换</td><td>将<strong>非数字类型</strong>转换成数字</td><td>Number(''); // 0 或 Number(' '); // 0</td></tr><tr><td>paresInt() 函数</td><td>将<strong>字符串</strong>转换为数字</td><td>parseInt('ab123'); // NaN 或 parseInt('200px'); // 200</td></tr><tr><td>parseFloat() 函数</td><td>将<strong>字符串</strong>转换为浮点数</td><td>parseFloat('3.14 元'); // 3.14 或 parseFloat('圆周率 3.14'); // NaN</td></tr><tr><td>（+ - * /） JS 隐式转换</td><td>利用算术运算隐式转换为数字型</td><td>-</td></tr></tbody></table></blockquote><ol><li><p>Number 函数</p><blockquote><p>Number()函数：用来将非数字类型转换成数字。</p><ul><li>''空字符串会转换成数字0</li><li>只有前后包含：空格、纯数字类字符串、2 进制或 16 进制表示的数字、科学记数表示法的<strong>字符串</strong>能转换成数字</li><li>其它会转换成 <code>NaN</code></li><li>以上规则，只针对基本数据类型而言</li><li>Number([]) 结果是 0</li><li>Number({})结果是 NaN</li></ul><pre><code>&lt;script&gt;Number(&quot;-12&quot;); // -12Number(&quot;2e3&quot;); // 2000Number(&quot;0b11&quot;); // 3Number(&quot;2021年&quot;); // NaNNumber(&quot;&quot;); // 0Number(&quot; &quot;); // 0Number(true); // 1Number(false); // 0Number(null); // 0Number(undefined); // NaN&lt;/script&gt;</code></pre></blockquote></li><li><p>parseInt(函数)</p><blockquote><ul><li>parseInt()函数，主要是将<strong>字符串类型</strong>转换为<strong>整数</strong>数字</li><li><strong>转换规则</strong><ul><li>从第一个非空字符开始转换，如果<strong>第一个字符</strong>不是数值、加号或减号，parseInt 立即返回 <code>NaN</code></li><li>这就意味着<strong>空字符串</strong>也会返回 <code>NaN</code>。</li><li>如果第一个非空字符是<strong>数值、加号、减号</strong>，则继续检测，直到字符串末尾，或碰到<strong>非数值字符</strong>，就停止。</li></ul></li><li>parseInt() 函数，<strong>不能</strong>识别二进制，八进制，<strong>但是</strong>他可以识别十六进制</li><li>parseInt() 函数，还有第二个参数，可以指定以什么进制数来进行转换parseInt() 函数,指定之后就可以进行转换,但仍然识别不了二、八进制</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0b10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0110"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 110</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0x14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0x14年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"2.3"</span> <span class="token operator">+</span> <span class="token string">"3.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0b1001"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//0</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote></li><li><p>parseFloat(函数)</p><blockquote><ul><li>他的转换原则 和 parseInt()函数一样，唯一两点区别在于：<ul><li>parseFloat() 函数，主要是将<strong>字符串类型</strong>转换为<strong>浮点数</strong></li><li>parseFloat( )函数，他<strong>不能</strong>识别进制数</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"3.14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.14</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"3.2.32"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.2</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"3.14元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.14</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"圆周率3.14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"0b10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"0110"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 110</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"0x14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote></li><li><p>JS 隐式转换 (+ - * /)</p><blockquote><ul><li>利用算术运算隐式将其它类型转换为数字</li><li>在单个字符串前面加上 +号，可以将字符串转成数字,多个字符串，是字符串拼接<br><code>typeof +&quot;1&quot;; // number</code></li></ul></blockquote></li></ol><h4 id="其它类型转换为字符串"><a href="#其它类型转换为字符串" class="headerlink" title="其它类型转换为字符串"></a>其它类型转换为字符串</h4><table><thead><tr><th>方法或函数</th><th>说明</th><th>实例</th></tr></thead><tbody><tr><td>String()函数 强制转换</td><td>其它类型转换字符串</td><td>String(0b10); // '2' 或 String(NaN); // 'NaN'</td></tr><tr><td>toString() 方法</td><td>数字和boolean类型转换为字符串0b10.toString(); // '2' 或 NaN.toString(); // 'NaN'</td><td></td></tr><tr><td>+ '' 空字符串拼接</td><td>所有类型与''空字符串拼接得到的都是字符串类型。</td><td>typeof (1 + ""); // 'string'</td></tr></tbody></table><blockquote><blockquote><p>以上方法或函数，将任何类型转换为字符串，都会转换成长得相同的字符串，除了科学记数法和非10进制数字会将其转换为 10 进制值的字符串</p></blockquote></blockquote><ol><li>String()函数<br><strong>数字转换字符串</strong><blockquote><pre><code>&lt;script&gt; String(123); // &#39;123&#39; String(2.14); // &#39;2.14&#39; String(2e4); // &#39;20000&#39; String(0b10); // &#39;2&#39; String(NaN); // &#39;NaN&#39; String(Infinity); //&#39; Infinity&#39;&lt;/script&gt;&gt;```</code></pre></blockquote></li></ol><p><strong>布尔值转换为字符串</strong></p><blockquote><pre><code>&lt;script&gt; String(true); // &#39;true&#39; String(false); // &#39;false&#39;&lt;/script&gt;</code></pre></blockquote><p><strong>undefined 和 null 转换为字符串</strong></p><blockquote><pre><code>&lt;script&gt; String(undefined); // &#39;undefined&#39; String(null); // &#39;null&#39;&lt;/script&gt;</code></pre></blockquote><ol start="2"><li>toString() 方法<br><strong>数字转换为字符串</strong><blockquote><pre><code>&lt;script&gt; (123).toString(); // &#39;123&#39; (2e4).toString(); // &#39;20000&#39; (0b10).toString(); //&#39;2&#39;; NaN.toString(); // &#39;NaN&#39; Infinity.toString(); // &#39;Infinity&#39;&lt;/script&gt;</code></pre></blockquote></li></ol><p><strong>boolean 类型转换为字符串</strong></p><blockquote><pre><code>&lt;script&gt; true.toString(); // &#39;true&#39; false.toString(); // &#39;false&#39;&lt;/script&gt;</code></pre><blockquote><p>null和undefined没有 toString()这个方法</p></blockquote></blockquote><ol start="3"><li><code>+ &#39;&#39;</code> 空字符串<blockquote><p>所有类型与<code>&#39;&#39;</code>空字符串拼接得到的都是字符串类型。</p><pre><code>&lt;script&gt; true + &quot;&quot;; // &#39;true&#39; false + &quot;&quot;; // &#39;false&#39; NaN + &quot;&quot;; // &#39;NaN&#39; 0 + &quot;&quot;; // &#39;0&#39; 0b10 + &quot;&quot;; // &#39;2&#39;&lt;/script&gt;</code></pre></blockquote></li></ol><h4 id="其他类型转boolean-布尔类型"><a href="#其他类型转boolean-布尔类型" class="headerlink" title="其他类型转boolean 布尔类型"></a>其他类型转boolean 布尔类型</h4><blockquote><p>其它数据类型转换成 Boolean 方法：</p><ul><li>方法一：调用Boolean()函数来实现</li><li>方法二：在一个数值或变量前加!!(两次取反)操作，也可以实现<br><strong>转换原则：</strong></li><li>代表空、否定的值会被转换为false。 如：''、0、NaN、null、undefined</li><li>除了上面列出的 5 个值，其它值字都转换为 true</li></ul></blockquote><p><strong>字符串转换为布尔类型</strong></p><blockquote><pre><code>&lt;script&gt; Boolean(&quot;&quot;); // false Boolean(&quot; &quot;); // true Boolean(&quot;NaN&quot;); // true Boolean(&quot;false&quot;); // true&lt;/script&gt;</code></pre></blockquote><p><strong>数字类型转换为布尔类型值</strong></p><blockquote><pre><code>&lt;script&gt; Boolean(NaN); // false Boolean(0); // false Boolean(Infinity); // true&lt;/script&gt;</code></pre></blockquote><p><strong>null 和 undefined 转换为布尔类型值</strong></p><blockquote><pre><code>&lt;script&gt; Boolean(null); // false Boolean(undefined); // false&lt;/script&gt;</code></pre></blockquote><h4 id="常见的类型转换"><a href="#常见的类型转换" class="headerlink" title="常见的类型转换"></a>常见的类型转换</h4><table><thead><tr><th>原始值</th><th>转换为 数字</th><th>转换为 字符串</th><th>转换为 布尔值</th></tr></thead><tbody><tr><td>false</td><td>0</td><td>"false"</td><td>false</td></tr><tr><td>true</td><td>1</td><td>"true"</td><td>true</td></tr><tr><td>0</td><td>0</td><td>"0"</td><td>false</td></tr><tr><td>"0"</td><td>0</td><td>"0"</td><td>true</td></tr><tr><td>''</td><td>0</td><td>''</td><td>false</td></tr><tr><td>' '</td><td>0</td><td>' '</td><td>true</td></tr><tr><td>"30"</td><td>30</td><td>"30"</td><td>true</td></tr><tr><td>null</td><td>0</td><td>"null"</td><td>false</td></tr><tr><td>undefined</td><td>NaN</td><td>"undefined"</td><td>false</td></tr><tr><td>NaN</td><td>NaN</td><td>"NaN"</td><td>false</td></tr><tr><td>Infinity</td><td>Infinity</td><td>"Infinity"</td><td>true</td></tr></tbody></table><h3 id="四、综合案例-1"><a href="#四、综合案例-1" class="headerlink" title="四、综合案例"></a>四、综合案例</h3><p><strong>简单计算器</strong></p><blockquote><p><strong>需求分析</strong>：</p><ul><li>当用户在浏览器打开页面时，弹出一输入框，要求用户输入数字，用户确认后，再弹出一输入框，再输入一个数字，确认后，最后弹出两次输入的数字之和。<br><strong>代码实现思路：</strong></li><li>使用 prompt() 函数弹出输入框，让用户输入两个数字</li><li>对用户输入两个数字进行<strong>加法运算</strong>，而由于用户输入的内容是字符串类型，所以必须<strong>先转为数字类型</strong>，才能做加法运算</li><li>最后用 alert() 显示结果，使用字符串拼接进行语句输出</li><li>程序虽小，却体现了普遍计算机程序的执行步骤：用户输入->计算机处理 -> 显示结果<blockquote><p>注意：</p><ul><li>通过输入框得到的值都是字符串类型</li><li>进行加法运算的值必须为<strong>数字类型</strong></li><li>减法不用进行类型转换（因为JS支持隐式类型转换）</li></ul></blockquote></li></ul></blockquote><h3 id="五、扩展知识"><a href="#五、扩展知识" class="headerlink" title="五、扩展知识"></a>五、扩展知识</h3><ol><li><p>Javascript 为何称为弱类型的动态脚本语言</p><blockquote><ul><li>在前面我们一直说，Javascript 是一种运行在客户端的脚本语言（Script 是脚本的意思）。</li><li>本质上 Javascript 是一种弱类型的动态脚本语言。接下来我们分别来解释下，何为<strong>弱类型</strong>，何为<strong>动态</strong>，何为<strong>脚本语言</strong>。<img src="语言类型.png"></li></ul></blockquote></li><li><p>何为<strong>动态</strong>语言和<strong>静态</strong>语言</p><blockquote><ul><li>在声明变量时，<strong>不需要</strong>确定变量类型的语言，称为动态语言。比如：Javascript，Python、Ruby、PHP等</li><li>在声明变量时，需要确定变量类型的语言，称为静态语言。比如 Java、C、C++ 、C# 等</li><li>JS 在声明变量声明时，并不需要确定变量的类型，其类型是在代码执行的过程中,由变量对应值的类型来动态决定的。所以 JS 在执行过程中，需要检查数据的类型。</li></ul></blockquote></li><li><p>何为<strong>弱</strong>类型语言和<strong>强</strong>类型语言</p><blockquote><ul><li>支持<strong>隐式类型</strong>转换的语言，称为 弱类型语言<ul><li>弱类型语言：C、C++、Javascript、PHP、VB、Perl</li></ul></li><li>不支持隐式类型转换的语言，称为 强类型语言<ul><li>强类型语言：C# 、Java 、Ruby、Python</li></ul></li></ul><pre><code>var a = &quot;4&quot;;var b = 1;console.log(a - b); //3</code></pre><ul><li>变量a是字符串，b是数字，a-b='4'-1，在这个过程中会<strong>自动</strong>把字符串'4'转换成数字4，然后再做运算。</li><li>这种在运算过程中会悄悄把数据类型转换的操作，叫<strong>隐式类型转换</strong>。</li></ul></blockquote></li><li><p>何为脚本语言</p><blockquote><ul><li>所谓的脚本语言：是指不需要<strong>提前编译</strong>，而是在运行的过程中边编译，边执行。</li><li>而 JS 本质上就是在运行过程中边编译，边执行的，JS 是由 <strong>JS 解释器（JS 引擎）</strong>来逐行进行解释并执行</li><li>所以 JS 也称为<strong>解释型</strong>语言。</li></ul></blockquote></li><li><p>编译型语言 和 解释性语言</p><blockquote><p><strong>编译器和解释器</strong></p><ul><li>之所以存在编译器和解释器，是因为机器不能直接理解我们所写的代码，所以在执行程序之前，需要将我们所写的代码“翻译”成机器能读懂的机器语言。</li><li>按语言的执行流程，可以把语言划分为编译型语言和解释型语言。<br><strong>编译型语言</strong></li><li>在程序<strong>执行之前</strong>，需要经过编译器的编译过程，并且编译之后会直接保留机器能读懂的二进制文件，这样每次运行程序时，都可以直接运行该二进制文件，而不需要再次重新编译了。比如 C/C++、GO 等都是编译型语言。<br><strong>解释型语言</strong></li><li>而由解释型语言编写的程序，在每次<strong>运行时</strong>都需要通过解释器对程序进行动态解释和执行。比如 Python、JavaScript 等都属于解释型语言。<blockquote><ul><li>大部分后端语言，都是编译型语言，也就是要先编译，再执行。而 JS 是解释型语言，一边编译一边执行。</li><li>编译型是一开始慢，后面快，而解释是刚开始快，但过程中是慢的。</li></ul></blockquote></li></ul></blockquote></li><li><p>什么是 JavaScript 解释器 ？</p><blockquote><p>要理解什么是解释器，就需要我们了解浏览器的两大组成部分：渲染引擎 和 JavaScript 引擎</p><ul><li>渲染引擎：用来解析 <strong>HTML 与 CSS</strong>，俗称内核，比如 chrome 浏览器的 blink，老板本的 webkit</li><li>JS 引擎：也称为 <strong>JS 解释器</strong>，用来读取网页中的 <strong>JavaScript 代码</strong>，对其处理后运行。比如 chrome 浏览器的 V8 引擎。<blockquote><ul><li>浏览器本身并不会执行 JS 代码，而是通过内置 JavaScript 引擎（解释器）来编译和执行 Js 代码。</li><li>JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行。</li></ul></blockquote></li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多终端响应式开发</title>
      <link href="/2023/11/30/%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
      <url>/2023/11/30/%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、什么是响应式布局"><a href="#一、什么是响应式布局" class="headerlink" title="一、什么是响应式布局"></a>一、什么是响应式布局</h3><blockquote><ul><li>响应式布局：只需要开发一套代码，就能使页面适应不同的屏幕 （一个网站兼容多种终端）</li><li>响应式设计原理：通过媒体查询来检测视口宽，针对不同视口宽做相应代码处理，来展现不同的布局和内容</li><li>流体布局和 rem&#x2F;vw 布局，只是针对移动端开发的，开发出来的网站在尺寸为（320 ~ 480px）之间的屏幕上显示，才能获得好的体验。并不能适应iPad和PC 端。</li><li>响应式布局开发出来的网站，在移动、ipad、PC 端都能有好的体验，能兼容不同的屏幕尺寸</li></ul></blockquote><h3 id="二、媒体查询的语法"><a href="#二、媒体查询的语法" class="headerlink" title="二、媒体查询的语法"></a>二、媒体查询的语法</h3><ol><li><p>什么是媒体查询</p><blockquote><ul><li>我们知道，一套 CSS 样式是很难适应不同大小的屏幕，所以我们需要针对不同的屏幕尺寸来书写不同的样式，这样我们写出来的页面就能在不同大小的屏幕上都正常显示。</li><li>媒体查询就是用来解决这个问题的，他能帮助我们检测不同屏幕的尺寸，然后针对不同屏幕尺寸，显示不同的样式。</li><li>一个完整的媒体查询语句，包含以下四个部分：<ul><li>@media 关键字</li><li>媒体类型</li><li>逻辑运算符</li><li>媒体特性</li></ul></li></ul><pre><code>&lt;style&gt;  /*  @media 媒体类型 逻辑操作符 (媒体特性) &#123;  ...css样式....;&#125; @media 是关键字：媒体查询 screen 媒体类型：屏幕设备 and 逻辑运算符：与 (多个条件同时满足) min-width 媒体特性：设备宽&gt;=400px以下整个媒体查询代码的含义：网页是在屏幕设备上显示，同时屏幕设备的宽&gt;=400px时，背景颜色变为红色。 */  @media screen and (min-width: 400px) &#123; body &#123;   background-color: red; &#125;  &#125;&lt;/style&gt;</code></pre></blockquote></li><li><p>媒体类型</p><blockquote><ul><li>媒体类型(Media types) 就是用来描述设备的一般类别，设备类别主要分为以下 4 种<table><thead><tr><th>媒体类型</th><th>说明</th></tr></thead><tbody><tr><td>all</td><td><strong>（默认值）</strong>适用于所有的设备</td></tr><tr><td>screen</td><td>适用于屏幕设备</td></tr><tr><td>print</td><td>适用于在打印预览模式下在屏幕上查看的分页材料和文档</td></tr><tr><td>speech</td><td>适用于语音合成器</td></tr><tr><td>如果媒体查询语句，只指定媒体类型，可以简写成如下:</td><td></td></tr><tr><td><code>@media 媒体类型 ｛ .... css样式..... ｝;</code></td><td></td></tr></tbody></table></li></ul></blockquote></li></ol><blockquote><p>要看到<strong>打印模式</strong>下效果，按以下步骤操作即可</p><ul><li>涉及到颜色一定要记得选彩色</li><li>在浏览器中右击 -&gt; 打印（点击进入） -&gt; 更多设置（点击）&gt;- <strong>背景图形</strong>（勾选上）<img src="打印模式.png"></li></ul></blockquote><ol><li>媒体特性<blockquote><ul><li>媒体特性（Media features）描述了 user agent、输出设备，或是浏览环境的具体特征。</li><li>媒体特性表达式是完全可选的</li><li>它负责测试这些特性或特征是否存在、值为多少。</li><li><strong>每条</strong>媒体特性表达式都必须用 括号（） 括起来。<br><strong>常用的媒体特性</strong><table><thead><tr><th>媒体特性</th><th>说明</th></tr></thead><tbody><tr><td>width</td><td>设备屏幕的宽</td></tr><tr><td>min-width</td><td>设备屏幕的最小宽(如min-width:400px;表示屏幕宽&gt;&#x3D;400px)</td></tr><tr><td>max-width</td><td>设备屏幕的最大宽(如max-width:1200px;表示屏幕宽&lt;&#x3D;1200px)</td></tr><tr><td>-webkit-device-pixel-ratio</td><td>设备像素比(dpr)的值（只有-webkit 内核的才支持）</td></tr><tr><td>-webkit-max-device-pixel-ratio</td><td>设备像素比(dpr)的最大值（只有-webkit 内核的才支持）</td></tr><tr><td>-webkit-min-device-pixel-ratio设备像素比(dpr)的最小值（只有-webkit 内核的才支持）</td><td></td></tr><tr><td>orientation</td><td>当前屏幕的方向，是横屏还竖屏</td></tr><tr><td>portrait: 表示竖屏(orientation : portrait;)</td><td></td></tr><tr><td>landscape:表示横屏 (orientation:landscape;)</td><td></td></tr></tbody></table></li></ul></blockquote></li></ol><blockquote><p><strong>写法</strong></p><ul><li>如果只指定媒体特性，写法如下：</li></ul><pre><code>@media （媒体特性） &#123;  ...css样式...;&#125;</code></pre><ul><li>如果同时指定媒体类型和媒体特性，中间需要有<strong>逻辑运算符</strong>，写法如下：</li></ul><pre><code>@media 媒体类型 逻辑运算符 （ 媒体特性） &#123;  .... css样式....;&#125;</code></pre><ul><li>多个媒体特性中间也要有<strong>逻辑操运算符</strong></li></ul><pre><code>@media 媒体类型 逻辑操运算符 （ 媒体特性） 逻辑操作符 （媒体特性） &#123;  .... css样式....;&#125;</code></pre></blockquote><ol start="4"><li>逻辑运算符<blockquote><ul><li>逻辑运算符（logical operators） not,and和only可用于联合构造复杂的媒体查询</li><li>您还可以通过用 ,（逗号） 分隔多个媒体查询，将它们组合为一个规则。</li></ul></blockquote></li></ol><blockquote><p><strong>and 运算符</strong></p><ul><li><code>and</code>操作符用于将多个媒体查询规则组合成单条媒体查询</li><li>当每个查询规则都为真时，则该条媒体查询为真</li><li>媒体类型为<code>all</code>时，不需要写<code>and</code></li></ul></blockquote><blockquote><p><strong>逗号逻辑运算符</strong></p><ul><li>逗号用于将多个媒体查询合并为一个规则</li><li>每个逗号前为一个<strong>独立</strong>的查询规则，逗号后为一个<strong>独立</strong>的查询规则</li><li>逗号分隔的每一个独立的查询规则中，只要有一个为true，则整个 media 语句返回true。</li><li>换句话说,逗号类似于js中的逻辑或or运算符</li></ul></blockquote><blockquote><p><strong>not运算符</strong></p><ul><li><code>not</code>运算符会反转整个媒体查询的含义</li><li>如果不满足这个条件则返回true，否则返回false</li><li>如果使用<code>not</code>运算符，则还必须指定媒体类型,并且写在媒体类型之前</li><li><code>not</code>只能用来否定整个媒体查询</li><li>如果出现在以逗号分隔的查询列表中，它将仅否定应用了该查询的特定查询，因此，它不会应用于以逗号分隔的媒体查询列表中的每个媒体查询</li></ul><pre><code>@media not screen and (min-width: 1000px), screen and (orientation: landscape) &#123;  body &#123;    background-color: red;  &#125;&#125;</code></pre><blockquote><p><code>not</code>只否定了<code>not screen and (min-width: 1000px)</code>，并不会否定逗号后面的<br>注意：<code>not</code>写在媒体类型之前，但是媒体类型和媒体特性中间必须写逻辑运算符</p></blockquote></blockquote><blockquote><p><strong>only 运算符</strong></p><ul><li>only 关键字，主要是为了兼容一些老版本的浏览器时，防止出错而加上的。</li><li>因旧版本的浏览器会将 screen and (max-width: 500px)简单地解释为screen，忽略查询的其余部分，并将其样式应用于所有屏幕</li><li>加上 only 后，就会正常的解释</li></ul></blockquote><h3 id="三、响应式断点和书写位置"><a href="#三、响应式断点和书写位置" class="headerlink" title="三、响应式断点和书写位置"></a>三、响应式断点和书写位置</h3><blockquote><ul><li>当我们需要为不同的屏幕尺寸来设置不同的样式时，我们就需要知道在什么屏幕尺寸下需要做出响应。</li><li>那这些不同的屏幕尺寸，就称为响应式断点(阈值)</li></ul></blockquote><ol><li>响应式断电(阈值)的设定<blockquote><ul><li>在实际的开发中，响应式断点是由公司根据项目来定的。</li><li>不过行业也会有一个标准的参考断点（Breakpoint），这里我们以 Bootstrap 框架内部的断点来给大家做讲解<table><thead><tr><th>屏幕大小</th><th>栅格布局中class名区分</th><th>断点（阈值）</th></tr></thead><tbody><tr><td>超小屏Extra small</td><td>-</td><td>&lt;576px</td></tr><tr><td>小屏 (Small)</td><td>-sm</td><td>576px ~ 768px （含等于）</td></tr><tr><td>中屏 (Medium)</td><td>-md</td><td>768px ~ 992px （含等于）</td></tr><tr><td>大屏 (Large)</td><td>-lg</td><td>992px ~ 1200px（含等于）</td></tr><tr><td>超大屏 (X-Large)</td><td>-xl</td><td>1200px ~ 1400px（含等于）</td></tr><tr><td>超大大屏(XX-Large)</td><td>-xxl</td><td>&gt;1400px</td></tr></tbody></table></li></ul></blockquote></li></ol><blockquote><ul><li>断点并不是完全固定，按上面的要求值来的。而是根据我们所写的项目，在对屏幕做调整时，如果觉得当前效果不符合我们的需求，需要通过设置新的断点来调整，就可以在此添加相应的断点。</li><li>以上断点是 Bootstrap 框架内部的断点，我们可以用来作为我们开发的标准来参考。</li></ul></blockquote><blockquote><pre class=" language-css"><code class="language-css">&lt;style>  <span class="token comment" spellcheck="true">/* 当屏幕宽小于576px时，以下代码生效 */</span>  body &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 当屏幕宽大于等于576px，小于768px时，以下代码生效 */</span>  <span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 576px<span class="token punctuation">)</span> &amp;#123<span class="token punctuation">;</span></span>    body &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> khaki<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 当屏幕宽大于等于768px，小于992px时，以下代码生效 */</span>  <span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span> &amp;#123<span class="token punctuation">;</span></span>    body &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&lt;/style></code></pre><ul><li>因为 css 选择器的权重相同时，写在后面的会覆盖写在前面的。所以不用书写具体的屏幕范围，不过要注意代码书写的位置</li></ul></blockquote><ol start="2"><li>媒体查询的代码书写位置<blockquote><p><strong>媒体查询的代码可以写在 style 标签中</strong></p></blockquote></li></ol><blockquote><p><strong>可以写在单独的 CSS 文件中,通过 link 标签引入</strong></p><ul><li>不过都要写在所有 CSS 样式的代码之后。</li><li>这样就能保证断点生效时，写在媒体查询中的代码能生效，不会被正常的样式所覆盖。</li></ul></blockquote><blockquote><p><strong>不同断点代码写入不同 css 文件中（不推荐）</strong></p><ul><li>通过 link 来引用，在 media 中来设置对应断点</li><li>在满足媒体查询条件时，对应的css文件生效</li></ul><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;a.css&quot; media=&quot;screen and (min-width:600px)&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;b.css&quot; media=&quot;screen and (min-width:1000px)&quot; /&gt;/* a.css文件内容 */body &#123;  background-color: skyblue;&#125;/* b.css文件内内容 */body &#123;  background-color: red;&#125;</code></pre></blockquote><h3 id="四、响应式两种适配方案"><a href="#四、响应式两种适配方案" class="headerlink" title="四、响应式两种适配方案"></a>四、响应式两种适配方案</h3><blockquote><p>在实际的响应式开发中，我们会有两种通用的适配方案</p><ul><li>PC 端优先（先考虑 PC 端，最后再考虑移动端）</li><li>移动端优先（先考虑移动端，最后再考虑 PC 端）</li></ul></blockquote><ol><li><p>PC端优先</p><blockquote><ul><li>从大尺寸开始写，先大后小</li><li>用<code>max-width</code></li></ul></blockquote></li><li><p>移动端优先</p><blockquote><ul><li>从小尺寸开始，先小后大</li><li>用<code>min-width</code></li></ul></blockquote></li></ol><h3 id="五、响应式栅格系统"><a href="#五、响应式栅格系统" class="headerlink" title="五、响应式栅格系统"></a>五、响应式栅格系统</h3><blockquote><p><strong>在实际开发中</strong></p><ul><li>要完美的实现响应式系统或网站的开发，就需要利用响应式栅格系统来帮助我们实现。</li><li>BootStrap 框架实现响应式布局的本质就是他的响应式栅格系统。</li><li>响应式栅格系统是：栅格布局和响应断点+响应式适配方案 3 者结合实现的一套响应式解决方案</li></ul></blockquote><ol><li><p>栅格布局</p><blockquote><ul><li>所谓的栅格布局，你可以简单理解为，要把一个页面或容器（如 div），分成多少份</li><li>然后设置其页面或容器中子元素占对应的份数</li><li>通常一个页面或容器会被分成：12 份，16 份，24 份</li><li>如果将网页（100%）分成 12 份，那对应不同份数所占的比例如下:<table><thead><tr><th>份数</th><th>占总份数的百分比%</th></tr></thead><tbody><tr><td>1</td><td>8.33333333%</td></tr><tr><td>2</td><td>16.6666667%</td></tr><tr><td>3</td><td>25%</td></tr><tr><td>4</td><td>33.33333333%</td></tr><tr><td>5</td><td>41.66666667%</td></tr><tr><td>6</td><td>50%</td></tr><tr><td>7</td><td>58.33333333%</td></tr><tr><td>8</td><td>66.6666667%</td></tr><tr><td>9</td><td>75%</td></tr><tr><td>10</td><td>83.33333333%</td></tr><tr><td>11</td><td>91.66666667%</td></tr><tr><td>12</td><td>100%</td></tr></tbody></table></li></ul></blockquote></li><li><p>栅格系统实现响应式布局</p><blockquote><ul><li>我们说响应式栅格系统是：栅格布局+响应断点+响应式适配方案3者结合实现的一套响应式解决方案</li><li>接下来我们来学习，如何利用前面学到的栅格布局，响应断点，响应式适配方案实现响应式布局。</li><li>我们可以按以下 5 个步骤来操作<ul><li>你打算将页面分成多少份 ？</li><li>确定响应断点有哪些 ？</li><li>确定响应式适配方案。PC端优先还是移动端优先？</li><li>在对应的响应断点下，书写对应的栅格布局样式。</li><li>对着设计稿开发，搭建整个响应式的框架。如果是以移动端优先，则对着移动端设计稿来开发，如果是 PC 端优先，则对着 PC 端设计稿来开发。<blockquote><p>但是在开发前，一定要分清版块的归属问题，也就那些版块是在一个父容器中。</p></blockquote></li></ul></li></ul></blockquote></li></ol><h3 id="五、响应式后台管理系统项目开发"><a href="#五、响应式后台管理系统项目开发" class="headerlink" title="五、响应式后台管理系统项目开发"></a>五、响应式后台管理系统项目开发</h3><blockquote><p><strong>确定栅格系统样式（media.css 样式）</strong></p><ul><li>将页面分成 12 份，确定栅格布局不同份数所点比例</li><li>确定项目对应的断点<ul><li>当视口宽大于 1400px 时，以正常效果显示</li><li>当视口宽 &lt;&#x3D; 1400px 时，左侧菜单缩放到 75px</li><li>当视口宽 &lt;&#x3D; 1300px 时，左侧菜单隐藏</li><li>当视口宽 &lt;&#x3D; 1200px 时，上面一行 4 列，变成 1 行 2 列</li><li>当视口宽 &lt;&#x3D; 992px 时，第二行的一行 2 列变 1 列，最下面的一行 3 列变成 1 行 2 列和 1 行 1 列</li><li>当视口宽 &lt;&#x3D; 768px 时，全部一行一列显示 ，同时上面的导航变成点击下拉菜单形式</li></ul></li><li>确定适配方案，以 PC 端优先</li></ul></blockquote><blockquote><p><strong>注意</strong></p><ul><li>要用怪异盒模型</li><li>echarts图表实现响应式缩放,在引用图表的<code>script</code>标签后面加上</li></ul><pre><code>window.addEventListener(&quot;resize&quot;,function()&#123;  mychart1.resize();&#125;);</code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 响应式开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端开发必备知识</title>
      <link href="/2023/11/30/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/11/30/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="一、什么是移动-Web、PC-web-和-web-App-开发？"><a href="#一、什么是移动-Web、PC-web-和-web-App-开发？" class="headerlink" title="一、什么是移动 Web、PC web 和 web App 开发？"></a>一、什么是移动 Web、PC web 和 web App 开发？</h3><blockquote><p><strong>什么是web开发？</strong></p><ul><li>简单理解为网页开发，主要使用HTML+CSS+Javascript编写，然后代码在浏览器中运行<br><strong>什么是移动 web开发和PC web 开发？</strong></li><li>本质上都是用HTML+CSS+Javascript来编写</li><li>只是移动web开发，代码是在手机、平板等浏览器中运行</li><li>而PC web开发，代码是在PC端浏览器中运行<br>什么是App开发</li><li>APP是application的缩写，指应用程序，一般指手机软件<table><thead><tr><th>APP 开发分类</th><th>说明</th></tr></thead><tbody><tr><td>Native APP</td><td>一般依托于操作系统，有很强的交互，是一个完整的 App，可拓展性强，需要用户下载安装使用。比如：基于操作系统的 IOS 开发和安卓开发</td></tr><tr><td>Web APP</td><td>应用程序在浏览器中运行，称为 Web APP</td></tr><tr><td>Hybrid APP(混合式 APP)</td><td>是<code>Native APP</code>和<code>Web APP</code>的混合体， 同时具有两者的特点。</td></tr></tbody></table></li></ul></blockquote><h3 id="二、移动-Web-与-PC-Web-开发区别？"><a href="#二、移动-Web-与-PC-Web-开发区别？" class="headerlink" title="二、移动 Web 与 PC Web 开发区别？"></a>二、移动 Web 与 PC Web 开发区别？</h3><blockquote><ul><li>移动 Web 与 PC Web <strong>最大的区别在于运行的终端设备不同</strong>。不同终端设备有不同特性，正是这些终端设备的不同特性，造成了移动 web 开发和 PC web 开发的不同。</li><li>具体的不同点有以下4个方面：<ul><li>屏幕大小不同</li><li>网络环境和设备性能不同</li><li>交互方式不同</li><li>兼容性不同</li></ul></li></ul></blockquote><ol><li><p>屏幕大小不同</p><blockquote><ul><li>我们都知道移动端的设备，如手机的屏幕大小相对 PC 端要小很多，所以针对 PC 端的那些布局在移动端肯定就不行了。所以我们需要专门针对移动端来做布局。</li><li>如果直接把 PC 端的网站在移动端打开，整个页面就会被压缩，压缩后就会看不清。  </li><li>常见的屏幕尺寸大小：<a href="http://shijuechuanda.com/screen/index.htm">http://shijuechuanda.com/screen/index.htm</a></li></ul></blockquote></li><li><p>交互方式不同</p><blockquote><ul><li>pc 端主要是用鼠标、键盘来实现交互</li><li>移动端主要是用手指来实现交互，所以我们在学移动端开发时，需要了解移动端的手机触摸事件。</li></ul></blockquote></li><li><p>网络环境和设备性能的不同</p><blockquote><ul><li>移动端的网络环境与 PC 端相比，无论是在网络下载速度还是在流量方面，都要比 PC 端差些。</li><li>PC 端的设备性能要比移动端的设备性能要强很多，所以我们在做移动端开发时，<strong>要更注重性能的优化</strong>，否则可能会带来较差的性能体验。</li></ul></blockquote></li><li><p>兼容性不同</p><blockquote><ul><li>移动端的兼容性要比 PC 端好的多，因为移动端相较 PC 端发展的要晚一些，所以国内的 UC、QQ、百度等手机浏览器都是根据 Webkit 修改过来的内核，所以 html5 的新特性在移动端我们可以放心大胆的使用。<table><thead><tr><th>PC 端常见浏览器</th><th>移动端常见浏览器</th></tr></thead><tbody><tr><td>谷歌浏览器、火狐浏览器、Edge 浏览器、360 浏览器、QQ 浏览器、搜狗浏览器 … 等</td><td>Safari 浏览器、UC 浏览器、QQ 浏览器、欧朋浏览器、百度手机浏览器、360 安全浏览器、谷歌浏览器、搜狗手机浏览器、猎豹浏览器 … 等</td></tr></tbody></table></li></ul></blockquote></li></ol><h3 id="三、什么是像素、分辨率、物理像素、逻辑像素、设备像素比？"><a href="#三、什么是像素、分辨率、物理像素、逻辑像素、设备像素比？" class="headerlink" title="三、什么是像素、分辨率、物理像素、逻辑像素、设备像素比？"></a>三、什么是像素、分辨率、物理像素、逻辑像素、设备像素比？</h3><ol><li>什么是像素<blockquote><ul><li>当我们把一张图片在 PS 放大 240 倍后，我们发现这张图其实是由许许多多的小方格拼凑起来。这一个个的小方格就被定义为一个单位，叫像素。只不过小方格本身很小，所以人肉眼看不出来。</li><li>1 个小方格为 1 像素大小，2 个小方格为 2 像素大小，那 n 个小方格就是 n 像素。</li></ul></blockquote></li></ol><blockquote><p><strong>图标尺寸 n * m 像素</strong></p><ul><li>比如图片大小是200 * 300像素，也就是说该 图片的宽有200个小方格，高有300个小方格， 那该图片一共占200 *300&#x3D;60000个小格子。</li></ul></blockquote><blockquote><p><strong>1像素（1个小方格）多大？</strong></p><ul><li>小方格的大小就是 1 像素，像素就像是厘米或毫米一样被定义好的单位，专门用于电子屏幕上描述图形尺寸的单位。</li><li>但像素不像厘米等长度单位一样有固定大小，像素没有固定大小，1 像素就是一个小方格。<strong>不同的分辨率下</strong>，1 像素（小方格）大小不一样</li></ul></blockquote><ol start="2"><li>什么是分辨率<blockquote><ul><li>各种设备的屏幕尺寸是以英寸为单位的。</li><li>英寸：是一个长度单位，是有固定大小的，1英寸&#x3D;2.54 厘米。</li><li>我们知道屏幕也是一个矩形，按正常我们应该也是用 长度 * 宽度 的形式来描述，为什么会用一个长度单位英寸来描述呢？是因为显示屏幕不是胡乱设计比例的，他是有固定的设计比例，如 16：9、4：3 等，因此屏幕给出<strong>斜对角线的大小</strong>，具体屏幕宽高就可以根据屏幕的设计比例计算出来。<ul><li>所以屏幕尺寸大小为 15.6 英寸，指的是屏幕斜对角线的大小</li></ul></li></ul></blockquote></li></ol><blockquote><p><strong>分辨率与屏幕的关系</strong></p><ul><li>比如屏幕宽有 n 个小方格，高有 m 个小方格，那屏幕的分辨率就是 n * m像素</li><li>屏幕是如何划分小方格？<ul><li>屏幕划分小方格就好比我们画表格一样，横着、竖着加线条，就划分成了一排排的小格子</li></ul></li><li>如何计算此时电脑划分出来的小格子的大小 ？<ul><li>通过屏幕给出的英寸大小，可以计算出屏幕的宽和高的大小</li><li>再通过宽和高及分辨率，就可以计算划出来的小方格的长和宽的大小</li><li>知道小方格的长和宽，就能计算出一个小格子的（面积）大小。</li></ul></li></ul></blockquote><blockquote><p><strong>分辨率大小影响什么？</strong></p><ol><li>分辨率影响图片清淅度，最终影响了我们的视觉</li></ol><ul><li>相同尺寸的屏幕下，分辨率越小，一个小方格(1物理像素)占据的空间越大，格子轮廓越明显，图片就越不清晰，体验感越差</li><li>由此可见，相同尺寸的图片，分辨率越高，图片显示的越清淅。</li></ul><ol start="2"><li>分辨率还影响图片展示效果，最终影响了我们的视觉</li></ol><ul><li>1像素的具体大小在不同的设备上是不一样的，屏幕大小相同，同一张图片:<ul><li>分辨率越高，划分的小格子数越多，1 像素占据的空间就会越小，图片显示出来的大小就越小，但是会越清晰，</li><li>分辨率越低，划分的小格子数越少，1 像素占据的空间就会越大，图片显示出来的大小就越大，但很模糊。</li></ul></li></ul></blockquote><ol start="3"><li>什么是物理像素与逻辑像素、设备像素比<blockquote><p><strong>物理像素（设备像素 dp）</strong></p><ul><li>在设备一生产出来后就确定的像素称作设备物理像素，也叫设备像素(device pixels),简称 dp。也就是我们前面讲到的显示屏幕划分出的物理小格子 ，1 个小格子就是一个物理像素。</li><li>所以尺寸大小一样时，分辨率越大，格子越小，1 个物理像素就越小，图片显示就越清淅。</li><li>设备生产出来后，尺寸是固定的，分辨率通常也是固定的，所以物理像素的大小是生产出来后就确定的，其大小是不能改变的。</li></ul></blockquote></li></ol><blockquote><p><strong>逻辑像素（CSS 像素）（设备独立像素 dip）</strong></p><ul><li>用于表示图片尺寸等，<strong>可时刻改变的像素</strong>称作逻辑像素，也叫设备独立像素(device independent pixels) ，简称 dip</li><li>也就是我们通常说的 CSS 像素，比如100px 、200px等</li><li>浏览器内的一切长度都是以 CSS 像素（逻辑像素）px为单位的。</li><li>为什么说逻辑像素是可以时刻改变的像素呢？<ul><li>是因为1px在屏幕上的具体显示大小，是由其所在的设备的<strong>设备像素比</strong>来决定的。</li></ul></li></ul></blockquote><blockquote><p><strong>设备像素比 (dpr)</strong></p><ul><li>设备像素比(devicePixelRatio)，简称 dpr，是指物理像素与逻辑像素的比例。</li><li>公式：<code>dpr = (在一个方向上)物理像素dp / 逻辑像素dip (没有缩放时)</code></li><li>物理像素dp与逻辑像素dip的显示关系<ul><li>当 dpr&#x3D;1 时，说明物理像素和逻辑像素是 1：1，此时一个物理像素显示一个逻辑像素</li><li>当 dpr&#x3D;2 时，说明物理像素是逻辑像素的 2 倍，此时<strong>2*2&#x3D;4</strong>个物理像素显示 1 个逻辑像素</li></ul></li><li>假设，以下两个手机的屏幕大小一样<ul><li>dpr&#x3D;1 的手机分辨率是2*4像素</li><li>dpr&#x3D;2 的手机分辨率是4*8像素</li></ul></li><li>现在1*1px的图片，在两台设备上显示效果如下：<ul><li>在dpr&#x3D;1 的设备上，则1个物理像素显示一个逻辑像素</li><li>在dpr&#x3D;2 的设备上，则4个物理像素显示一个逻辑像素<blockquote><p>注：</p></blockquote></li></ul></li><li>在一般的电脑上，设备像素是等于逻辑像素的，也就是dpr&#x3D;1.0,高分辨率的电脑上，二者不一定相等，浏览器提供一个接口可以查看二者的关系：</li><li>在 console 控制台输入 window.devicePixelRatio属性查看</li><li>dpr值，厂商在设备出厂时就已经进行设置，并且禁止用户进行更改</li></ul></blockquote><blockquote><p><strong>图片缩放，是在改变什么？</strong></p><ul><li>图片的缩放是在改变图片的<strong>逻辑像素</strong></li><li>一般情况下点开图片查看时是将图片的一个小格子(逻辑像素)对应到一个显示屏幕的小格子（物理像素）。</li><li>但图片在被放大或者缩小后，图片的像素小格子便不再是一一对应于显示屏幕的分辨率划分出的物理小格子了。<ul><li>图片放大 3 倍，其逻辑像素点也增为原来了3倍，此时 1 个逻辑像素占一个物理像素，但是因为逻辑像素为原来的 3 倍，那对应占的物理像素点也是原来的3倍。</li><li>此时相当于原来的一个图片小格子就占据3个物理小格子大小显示，因此图片就看起来放大了，甚至超出屏幕大小。</li><li>图片缩小到 0.5，则一个图片小格子就占据半个物理小格子，看起来就缩小了。</li></ul></li></ul></blockquote><ol><li><p>为什么要有物理像素和逻辑像素之分？</p><blockquote><ul><li>为什么不用物理像素表示图片的大小<ul><li>因为两个电脑尺寸完全一样，但分辨率不一样，看到的图片大小差别很大，这个体验非常不好。</li></ul></li><li>如果两台电脑的屏幕尺寸完全一样，一个分辨率是<code>1920 *1080</code>, 一个是<code>960 *540</code>,那么二者同时放一个<code>300* 300</code>的物理像素大小的图片，结果会怎么样？<ul><li>在高分辨率<code>1920 *1080</code>下1像素（小方格）要比低分辨率<code>960 *540</code> 1像素（小方格）要小很多，所以在 1920 *1080下看到的图片会很小，在960 *540 下看到的图片会很大。</li></ul></li></ul></blockquote></li><li><p>如何让相同尺寸屏幕下，不同分辨率，看同一图片效果差别不大？</p><blockquote><ul><li>实现的方法就是提高那些分辨率很高但是屏幕尺寸很小的设备的 dpr</li><li>分辨率很高，如果屏幕尺寸很小，则 1 个物理像素点会很小，那图片显示就会很小，提高 dpr 后，则 1px 逻辑像素会占用更多的设备像素点，这样图片看起来会更大些</li><li>例如 300 * 300 逻辑像素大小的图片，有屏幕尺寸相同的两个设备 A &#x2F; B<ul><li>A 的分辨率为 1920 * 1080，设置 A 的 dpr &#x3D;2，从而得到 4 个物理像素显示 1 个逻辑像素</li><li>B 的分辨率是 960 * 540 ，设置 B 的dpr &#x3D;1，从而得到 1 个物理像素显示 1 个逻辑像素</li><li>这样同一个图片在 B 设备中一个像素小格子占一个物理格子，在 A 设备中，因为 A 的物理小格子小，那就 4 个物理小格子显示 1 个逻辑像素，这样呈现的两个图片大小就看起来就一样大的了。<blockquote><p>这就是为什么相同尺寸的屏幕，其分辨率越高，对应的 dpr 往往会越大。</p></blockquote></li></ul></li></ul></blockquote></li><li><p>什么是标清屏和高清屏？</p><blockquote><ul><li>当设备的 dpr&#x3D;1 时，这个设备可以称为是标清屏</li><li>当设备的 dpr&gt;1 时，这个设备可以称为是高清屏</li><li>目前高清屏的 dpr 通常为 2，3 等。<blockquote><p>相同尺寸的屏幕，其分辨率越高，对应的 dpr 往往会越大,图像越高清</p></blockquote></li></ul></blockquote></li><li><p>移动开发为什么要使用 2 倍或 3 倍图？</p><blockquote><ul><li>思考题：标清屏中，1 个逻辑像素用一个物理像素显示，图片设计的效果正好和展示效果一样，在高清屏 dpr&#x3D;2 中，1 个逻辑像素用 4 个物理像素显示，图片到底是更清淅了，还是更模糊了？<ul><li>在高清屏中 1 个 CSS 像素点实际上由 4 个物理像素展示，1 分成 4，显然不够分，只能颜色近似选取,所以，图片感觉就会变的模糊了</li></ul></li><li>为了让移动端能够显示高清图效果，所以我们在设计的时候<ul><li>针对 dpr &#x3D; 2 的高清屏，专门设计 2 倍图来开发</li><li>针对 dpr &#x3D; 3 的高清屏，专门设计 3 倍图来开发<blockquote><p>比如: iPhone SE 的分辨率 750 * 1334，dpr &#x3D; 2，在水平方向上能显示的 CSS 像素为 375px,因此我们在设计稿时，就需要设计 2 倍图，即设计稿的宽为 750px，然后在实际开发时，按 750&#x2F;2 &#x3D; 375px 大小来开发。</p></blockquote></li></ul></li></ul></blockquote></li></ol><h3 id="四、viewport-视口设置"><a href="#四、viewport-视口设置" class="headerlink" title="四、viewport 视口设置"></a>四、viewport 视口设置</h3><ol><li><p>在 pc 端和移动端，网页中 html,body 的默认宽是多少 ？</p><blockquote><ul><li>pc 端（分辨率为<code>1920 * 1080</code>）下<ul><li>html 的默认宽为浏览器宽<code>1920px</code></li><li>body为块级元素，在设置 <code>margin: 0;</code>时，body的宽等于html宽<code>1920px</code><blockquote><p>在 PC 端，一个物理像素就等于 1 个 px 逻辑像素</p></blockquote></li></ul></li><li>移动端<ul><li>大部分手机浏览器的宽为<code>980px</code></li><li>手机端网页中 html 的默认宽等于浏览器宽为<code>980px</code></li><li>body 块级元素，在设置<code>margin: 0;</code>时，body的宽等于html 宽等于<code>980px</code></li></ul></li></ul></blockquote></li><li><p>如果把一个 PC 端的网站，在手机端显示打开，会看到什么样的效果？</p><blockquote><ul><li>当我们把 PC 端布局的页面(内容宽为 980px)，直接放在移动端来显示，会发现整体被压缩变小</li><li>原因：因为移动端的浏览器默认宽为 980px，而要把浏览器整个显示在 <code>iPhone SE</code>的屏幕下，而iPhone SE的可视宽只有375px，所以整个浏览器就会被压缩（缩放）到375px大小。则浏览器中的内容也要等比例压缩到到宽为 375px 的屏幕里。<ul><li>如果电脑端网站的宽<code>&gt; 980px</code>，则在移动端会出现水平滚动条，拖动滚动条可查看全部内容</li><li>如果电脑端网站的宽<code>&lt; 980px</code>，则在移动端并不能全屏展示，会在水平上留有空白</li></ul></li></ul></blockquote></li><li><p>为什么移动端 body 的默认宽为 980px</p><blockquote><ul><li>很早之前，电脑的分辨率比较低，写一个电脑端的网站基本都是在980px以内。为了让980px的网站可以在手机完美显示出来，浏览器开发商把浏览器的默认宽设置为了980px，也就是我们后面要提到的<strong>布局视口宽</strong>。</li><li>移动端是在这个布局视口来布局网页，所以移动端网页的html默认宽为980px，body是块级元素，在设置margin: 0;时，其宽会等于 html 的宽980px。</li><li>但是 PC 端的网页在移动那么小的屏幕里看时，会被压缩，所以需要通过双指来放大网页才能看得更清楚，本质上体验还是没有达到最佳状态。</li><li><strong>那如何才能让手机端看到的网页是最佳的状态呢？</strong><ul><li>那肯定要专门针对移动端的尺寸大小来设计和布局网页。但是移动端尺寸五花八门，没有办法把浏览器的大小固定到某个尺寸，这就有了接下来提出的viewport 视口的概念。</li></ul></li></ul></blockquote></li><li><p>视口分类</p><blockquote><p>在 PC 端，视口指的是浏览器的可视区域，其宽度和浏览器窗口的宽度保持一致。</p><ul><li>移动端涉及三个视口：布局视口(Layout Viewport)、视觉视口(Visual Viewport)、理想视口(Ideal Viewport)</li></ul></blockquote></li></ol><blockquote><p><strong>布局视口(Layout Viewport)</strong></p><ul><li>布局视口可以简单理解为移动端网页的宽度（浏览器宽），也就是我们在上面提到的 html、body 的默认宽为 980px。</li><li>默认我们是在这宽为 980px 的容器中来布局网页。<img src="布局视口.png"></li></ul></blockquote><blockquote><p><strong>视觉视口(Visual Viewport)</strong></p><ul><li>用户在默认情况下能看到的网站的区域</li><li>默认情况下浏览器大小会被压缩来适应视觉视口大小，所以默认情况下看到的内容大小要比实际小很多<img src="视觉视口.png"></li></ul></blockquote><blockquote><p><strong>理想视口(Ideal Viewport)</strong></p><ul><li>当<code>布局视口 = 视觉视口</code>时，就是我们期待的理想视口。</li><li>理想视口下，浏览器大小与视觉视口大小相等，内容不会被压缩）<img src="理想视口.png"></li></ul></blockquote><blockquote><ul><li>适配代码：<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</code></li><li>width&#x3D;device-width 表示布局视口&#x3D;设备视口（视觉视口）</li></ul></blockquote><ol start="5"><li>viewport的设置<blockquote><p>为了让移动端能正常的显示网页，我们通常会在网页的<head>标签中添加如下代码</p><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;/&gt;</code></pre><table><thead><tr><th>属性</th><th>值</th></tr></thead><tbody><tr><td>width</td><td>设置布局视口的宽</td></tr><tr><td>当 width&#x3D;device-width 时，即布局视口&#x3D;视觉视口，也就达到了我们想要的理想视口</td><td></td></tr><tr><td>initial-scale</td><td>设置页面的初始缩放值，为一个数字，可以带小数；值为 1，表示不缩放</td></tr><tr><td>minimum-scale</td><td>允许用户的最小缩放值，为一个数字，可以带小数</td></tr><tr><td>maximum-scale</td><td>允许用户的最大缩放值，为一个数字，可以带小数</td></tr><tr><td>height</td><td>设置 layout viewport 的高度，这个属性对我们并不重要，很少使用</td></tr><tr><td>user-scalable</td><td>是否允许用户进行缩放，值为”no”或”yes”, no 代表不允许，yes 代表允许</td></tr></tbody></table></blockquote></li></ol><blockquote><pre><code>/*JS 获取视口宽 */document.documentElement.clientWidth/* 获取屏幕尺寸 */screen.width</code></pre></blockquote><h3 id="五、真机查看"><a href="#五、真机查看" class="headerlink" title="五、真机查看"></a>五、真机查看</h3><ol><li><p>创建本地服务器</p><blockquote><p>通过 VSCode 来创建本地服务器，在VSCode通过<code>Open with Live Server</code>打开网页，在地址栏中就能看到类似以下的地址：<a href="http://127.0.0.1:5500/demo.html">http://127.0.0.1:5500/demo.html</a></p></blockquote></li><li><p>查看本机IP地址</p><blockquote><ul><li>在电脑的右下击输入 cmd,然后回车，就可以进到电脑的命令黑窗口</li><li>在命令黑窗口，输入 ipconfig ，然后回车，就能看到 IPv4 地址</li><li>我们将本地服务地址：<a href="http://127.0.0.1:5500/demo.html">http://127.0.0.1:5500/demo.html</a> 中的 <code>127.0.0.1</code>替换成 192.168.0.19(IPv4 地址)</li><li>修改完成后的最终地址：<a href="http://192.168.0.19:5500/demo.html">http://192.168.0.19:5500/demo.html</a> ，然后回车看在电脑端是否能正常访问到。</li></ul></blockquote></li><li><p>关闭防火墙</p><blockquote><ul><li>在电脑左下角，搜索 “ 控制面板 ” ，点击控制面板进入</li><li>点击系统和安全，进入</li><li>点击 windows Defender 防火墙</li><li>点击左边的启用或关闭 Windows Defender 防火墙</li><li>点击关闭防火墙</li></ul></blockquote></li><li><p>手机端访问地址</p><blockquote><ul><li>防火墙关闭后，要确保手机和电脑是在同一网络中<ul><li>方法一：电脑开热点，手机连电脑热点</li><li>方法二：电脑手机连同一无线网</li></ul></li><li>网络环境设置好了后，接下来只需在在手机端防问 <a href="http://192.168.0.19:5500/demo.html">http://192.168.0.19:5500/demo.html</a> 就可以正常访问了。</li><li>也可以把地址在草料网生成对应的二维码，手机直接扫二维码访问。</li></ul></blockquote></li></ol><h3 id="六、移动开发常用的单位"><a href="#六、移动开发常用的单位" class="headerlink" title="六、移动开发常用的单位"></a>六、移动开发常用的单位</h3><table><thead><tr><th>单位</th><th>说明</th></tr></thead><tbody><tr><td>px</td><td>绝对单位，当需要设置固定宽高时可用，也可用于设置字体大小</td></tr><tr><td>%</td><td>相对单位，可用来设置元素宽度，流体布局中会用到</td></tr><tr><td>em</td><td>相对单位，设置<strong>字体大小</strong>时，1em&#x3D;父元素字体大小；<strong>设置其它，比如宽、高等</strong>，1em&#x3D;自身字体的大小，比如之前讲的首行缩进。一般用来控制首行缩进，不用来布局</td></tr><tr><td>rem</td><td>rem(root element) 是相对于 html 的 font-size 的字体大小。1rem&#x3D;根元素（html）的字体大小，rem主要是用来做移动端布局</td></tr><tr><td>vw&#x2F;vh</td><td>相对单位，是视口单位，用来移动端布局，vw 用的多，vh 基本不用,1vw&#x3D;视口<strong>宽度</strong>的 1%，1vh&#x3D;视口<strong>高度</strong>的 1%</td></tr><tr><td>vmax</td><td>当前 vw 和 vh 中较大的一个值（竖屏时,100vmax&#x3D;100vh）</td></tr><tr><td>vmin</td><td>当前 vw 和 vh 中较小的一个值（竖屏时，100vmax&#x3D;100vw）</td></tr></tbody></table><h2 id="移动WebApp项目开发常用技术及标准、规范和最佳实践"><a href="#移动WebApp项目开发常用技术及标准、规范和最佳实践" class="headerlink" title="移动WebApp项目开发常用技术及标准、规范和最佳实践"></a>移动WebApp项目开发常用技术及标准、规范和最佳实践</h2><h3 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h3><ol><li>移动端与PC端有哪些不同？(上面有写)<blockquote><ul><li>屏幕大小不同</li><li>交互方式不同</li><li>网络环境和设备性能不同</li><li>兼容性不同</li></ul></blockquote></li></ol><blockquote><ul><li>因为屏幕大小的不同，所以造成我们在实际的移动端布局时，不能和 PC 端一样采用固定大小来布局，而需要自适应屏幕的宽。</li><li>移动端屏幕的常见可视区大小为<code>320-480px之间</code>，也就意味着我们在实际开发代码时，我们的页面宽在320-480px之间。</li><li>所以移动端开发，元素的宽肯定不能用px绝对定位写死，我们得采用<strong>相对单位</strong>来做开发。</li></ul></blockquote><ol start="2"><li><p>移动端常见的布局处理技术</p><blockquote><p><strong>移动端常见的5种布局技术如下：</strong></p><ul><li>流体布局</li><li>rem 和 vw 布局</li><li>响应式布局</li><li>Flex 弹性布局（工具）</li><li>Grid 网格布局（工具）<blockquote><ul><li>其中的流体布局、rem&#x2F;vw 布局、响应式布局是可以<strong>独立实现</strong>移动端页面的开发</li><li>Flex 弹性和 Grid 网格布局，并不能独立实现移动端布局的开发，他们更像是<strong>工具</strong>，配合流体布局、rem&#x2F;vw 布局、响应式布局来实现移动端页面的开发。</li></ul></blockquote></li></ul></blockquote></li><li><p>移动设计稿的标准与规范</p><blockquote><ul><li>京东视觉规范.pdf</li></ul></blockquote></li></ol><h3 id="二、流体布局"><a href="#二、流体布局" class="headerlink" title="二、流体布局"></a>二、流体布局</h3><blockquote><p>所谓的流体布局，也叫百分比%布局，本质上就是通过**%（百分比）<strong>和</strong>怪异盒子模型<strong>结合来实现</strong>元素的宽**相对视口缩放</p></blockquote><ol><li><p>搭建本项目的目录结构</p><blockquote><ul><li>首先新建项目文件夹 WebApp</li><li>在 WebApp 中新建 css、js、images 文件夹，分别用来存放 CSS、JS 文件和图片内容</li><li>在 CSS 中新建 reset.css、global.css、index.css 文件，分别用来存放重置默认样式、全局通用样式，首页样式</li><li>reset.css参考PC端重置样式<br>其它相关重要的重置样式介绍</li></ul><pre><code>/* 去掉点击的高亮显示效果 */-webkit-tap-highlight-color: transparent;/* 在移动端浏览器默认的外观在ios上加上这个属性才能给按扭和输入框自定义样式 */-webkit-appearance: none;/* 禁用长按页面时的弹出菜单 */img,a &#123; -webkit-touch-callout: none;&#125;/* 表单会有外轮廓 */input &#123; outline: none;&#125;/* 去掉图片下面的空隙 */vertical-align: top;</code></pre></blockquote></li><li><p>了解设计稿的整体标准和规范</p><blockquote><ul><li>将设计稿中的通用样式写在global.css文件中</li></ul></blockquote></li><li><p>新建 index.html 网页，进行首页开发</p><blockquote><ul><li>在当前根目录下新建<code>index.html</code>网页</li><li>做好viewport视口配置<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;</code></li><li>引用相关的 CSS 文件，注意引入文件的顺序</li></ul><pre><code>/* 重置样式 */css代码.../* 网站通用布局 */css代码.../* 通用模块 */css代码.../* 通用元件 */css代码.../* 通用响应式系统 */css代码...</code></pre></blockquote></li><li><p>网站整体（html）结构划分</p></li><li><p>每个版块开发</p><blockquote><ul><li>流体布局(%百分比 + 怪异盒子模型布局)：整个页面中会用到的所有元素，在最开始都需要设置为怪异盒子模型 。</li><li>由于一开始，我们并不清楚，页面可能会用到那些html元素，所以我们一开始可以用<code>*</code>来处理，等页面开发完，再把<code>*</code>换成对应的html标签。</li></ul></blockquote></li><li><p>iOS下tabbar底部留白与黑线遮挡问题</p><blockquote><p>要解决 IOS 下 tabbar 底部留白问题，我们需要先了解两个概念，安全区域和刘海区，案例如下：</p><pre><code>&lt;style&gt; html, body &#123;   margin: 0; &#125; .tabbar &#123;   width: 100%;   height: 100px;   background-color: red;   position: fixed;   z-index: 222;   bottom: 0; &#125;&lt;/style&gt;&lt;body&gt; &lt;footer class=&quot;tabbar&quot;&gt;&lt;/footer&gt;&lt;/body&gt;</code></pre><img src="安全区与刘海区.png">- 页面默认填充的是安全区域的高度，并不包括刘海区</blockquote></li></ol><blockquote><p><strong>那如何让页面高度填充到刘海区呢？</strong></p><ul><li>在viewport中添加viewport-fit&#x3D;cover</li></ul><pre><code>&lt;meta  name=&quot;viewport&quot;  content=&quot;width=device-width,viewport-fit=cover,initial-scale=1.0&quot;/&gt;`</code></pre></blockquote><blockquote><p><strong>而高度填充到刘海区后，tabbar的内容就会被底下的黑线给遮挡一小部分</strong></p><ul><li>方法一：<ul><li>添加以下代码的元素，不能是怪异盒子模型，否则元素自身高度会减少</li></ul></li></ul><pre><code>/* 兼容 IOS&lt;11.2 */padding-bottom: constant(safe-area-inset-bottom);/* 兼容 IOS&gt;11.2 */padding-bottom: env(safe-area-inset-bottom);</code></pre><ul><li>方法二：</li></ul><pre><code>/* 兼容 IOS&gt;11.2 */height: calc(50px+ constant(safe-area-inset-bottom));/* 兼容 IOS&gt;11.2 */height: calc(50px + env(safe-area-inset-bottom));</code></pre><blockquote><ul><li>100px 是 tabbar 原来的高度 </li><li>在实际开发中，我们一般是先 constant，再 env</li></ul></blockquote><ul><li>针对其它一些机型，不支持上面两种写法的，可以选择用CSS的<code>@supports</code></li></ul><pre><code>@supports not (constant(safe-area-inset-bottom)) &#123;  .tabbar &#123;    padding-bottom: 30px;  &#125;&#125;</code></pre></blockquote><ol start="7"><li>流体布局的布局思路与缺陷<blockquote><p><strong>（1） 流体布局思路</strong></p><ul><li>通过计算每个子元素占容器的比例，来平分父容器的整体大小。</li><li>所有子元素宽的百分比% 加起来要等于 100%。</li><li>然后通过给子元素设置对应的内边距来实现元素间的空隙。</li><li>为了保证给子元素添加内边距实现空隙时，不会造成元素宽度变宽，所有元素都设为 box-sizing: border-box;</li></ul></blockquote></li></ol><blockquote><p><strong>（2） 流体布局缺陷</strong></p><ul><li>只能实现图片和容器的宽高等比缩放，没有办法实现间距，字体大小的等比缩放</li><li>如果想实现对应的字体和间距在不同尺寸下，有所变化，可以与@media媒体查询结合来实现微调。</li></ul></blockquote><ol start="8"><li>从项目中学到的：<blockquote><ul><li><code>padding-bottom:100%;</code>：使高度等于宽度，宽度不包括<code>padding</code></li><li>页面缩放时，图片等比缩放&#x2F;避免图片尺寸不一：<ul><li>把图片的父盒子a标签改成块级元素，用<code>padding-bottom</code>固定宽高比例</li><li>使图片绝对定位于a标签，<code>top=0;left=0;</code>宽高100%,使用<code>object:cover;</code>等比缩放尺寸不一的图片；</li></ul></li><li>用@media实现文字在界面放大到一定宽度后的字体放大，响应式</li><li>流式布局因为是用百分比实现的，所以子元素所占的总百分比一定是百分之百，也就是把父元素全部分完；子元素之间的间隙，用padding实现，不能用margin</li><li>怪异盒模型下文字垂直居中的问题<ul><li>文字行高为18px,有1px边框时，标签行高就为20px，<code>line-height:18px</code>，不能惯性的设置为<code>line-height:20px</code>。</li></ul></li><li>媒体查询代码一定要放在样式的最后面</li><li>底部的tabbar导航的层级是最高的，并且内容区底部要设置padding≥tabbar的高度</li></ul></blockquote></li></ol><h3 id="二、移动端rem布局原理"><a href="#二、移动端rem布局原理" class="headerlink" title="二、移动端rem布局原理"></a>二、移动端rem布局原理</h3><ol><li><p>rem实现适配的原理</p><blockquote><p>假设我们现在要实现 750 * 400px 的 div，在 750px 宽的设备下，改用 rem 单位实现等比展现，那我们的 css 代码如何写呢 ？<br>假设此时1rem &#x3D; 10px，则对应 CSS 样式如下：</p><pre><code>div &#123;  /* 相当于将整个页面分成 75份  每一份大小为10px */  width: 75rem;  height: 40rem;&#125;</code></pre><p>如果以上 CSS 代码不变（将页面分成 75 份），要实现在不同大小屏幕上能等比缩放，我们来看下，对应的 rem 要设置为多少？</p><table><thead><tr><th>设备可视宽</th><th>750px</th><th>375px</th><th>540px</th></tr></thead><tbody><tr><td>1rem</td><td>大小</td><td>10px</td><td>5px</td></tr></tbody></table><ul><li>所以我们要用 rem 来开发移动端之前，需要思考，先将页面分成多少份？然后通过以下公式</li><li><code>1rem = 设备可视宽 / 对应份数</code></li><li>得到不同设备下 <code>1rem</code> 的大小<blockquote><p>在实际开发中，不同尺寸的手机屏幕下 1rem 的大小，是通过 js 来动态获取<strong>当前设备可视宽&#x2F;对应份数来实现</strong></p></blockquote></li></ul></blockquote></li><li><p>JS 动态实现不同设备下 1rem 的大小</p><blockquote><p>1rem&#x3D;（html）中 font-size 的大小，则我们只需要动态修改 html 的 font-size 的大小就可以</p></blockquote></li><li><p>px 单位如何转换为 rem</p><blockquote><p>在实际开发的时候，我们是以 750px 的设计稿为标准来开发的</p><ul><li>现在假设我将页面分成 10 份，那<code>1rem = 750px / 10 = 75px</code></li><li>那对应的 px 单位，转换成对应的 rem 单，计算公式：<code>?rem = 元素对应的px单位大小 / 1rem 大小</code></li><li>实际开发中我们并不会手动将px转换成对应rem单位，我们会用vscode的 <code>px to rem</code>插件来实现</li></ul></blockquote></li><li><p>px to rem 插件使用</p><blockquote><ul><li>参数配置：修改扩展设置，填写1rem的大小</li><li>快捷键：<code>alt+z</code></li><li>回到 html 页面，ctrl+A 选中所有 CSS 样式，然后按 Alt+Z，就会自动将 px 转成 rem 单位。</li></ul></blockquote></li><li><p>利用 rem 实现元素宽高等比缩放</p><blockquote><ul><li>将页面分成 10 份，通过 js 来实现不同视口下 1rem 的大小</li><li>利用 px to rem 插件，将 px 单位转换成对应 rem 单位</li><li>px to rem 插件中，1rem 大小设置为 75 （以 750px 设计稿开发）</li></ul></blockquote></li><li><p>总结：实际开发如何用 rem 做适配</p><blockquote><p>在实际开发中，我们会按以下步骤来实现开发</p><ul><li>1、要求设计师以 750px 宽，来设计移动端的设计稿；</li><li>2、我们按正常的 750px 的设计稿，以 px 单位来开发；</li><li>3、我们会假定将页面分成对应的份数，然后求得不同份数下的 1rem 的大小；<ul><li>如果在 750px 设备下，将页面分成 75 份，则 html 的 font-size 大小&#x3D;设备可视宽 (750) &#x2F; 75 &#x3D; 10px</li><li>如果在 750px 设备下，将页面分成 10 份，则 html 的 font-size 大小&#x3D;设备可视宽 (750) &#x2F; 10 &#x3D; 75px</li></ul></li><li>4、将 px 单位转换为对应的 rem 单位<ul><li>将 px 像素转换 rem 单,公式：?rem &#x3D; px值 &#x2F; 1rem大小得到最对应 rem 单位值</li><li>我们并不会手动一个一个去计算，而是利用 vscode 中的插件px to rem一次搞定</li><li>假定将页面分成 75 份，那就把px to rem插件中对应 1rem 大小设为 10</li><li>假定将页面分成 10 份，那就把px to rem插件中对应 1rem 大小设为 75</li><li>最后切换到 CSS 代码，ctrl+A选中所有代码，然后Alt+Z之后，就会自动把所有px单位，转换成对应vw单位。<blockquote><p>在实际开发中，我们是以 750px 的设计稿来开发，假定将页面分成 10 份，每 1rem &#x3D; 75px</p></blockquote></li></ul></li></ul></blockquote></li></ol><h3 id="四、移动端vw原理"><a href="#四、移动端vw原理" class="headerlink" title="四、移动端vw原理"></a>四、移动端vw原理</h3><ol><li><p>vw 的适配原理</p><blockquote><p>我们知道 100vw &#x3D; 视口宽，相当于把整个屏幕分成了 100 份，所以不同屏幕尺寸下，1vw 的大小如下</p><table><thead><tr><th>设备可视宽（屏幕宽）</th><th>1vw 大小</th></tr></thead><tbody><tr><td>750px</td><td>7.5px</td></tr><tr><td>680px</td><td>6.8px</td></tr><tr><td>480px</td><td>4.8px</td></tr><tr><td>375px</td><td>3.75px</td></tr></tbody></table><ul><li>上面表格中，不同屏幕尺寸下 1vw 的大小，不需要我们手动或通过 js 来计算，而是<strong>浏览自动会帮我转换</strong></li><li>其实你可以理解，如果用 rem 来实现，把页面分 100 份，不同屏幕下 1rem 的大小与对应的 1vw 的大小时一样。</li><li>唯一的区别，<code>1vw</code> 的大小是<strong>浏览器自动转换</strong>，而 <code>1rem</code> 的大小，需要通过<strong>js获取屏幕大小&#x2F;100</strong>来得到。</li></ul></blockquote></li><li><p>px 如何转换成对应 vw 单位</p><blockquote><p>我们同样以 750px 的设计稿为例，那 <code>1vw = 7.5px</code> ，则转换成对应 vw 单位，公式如下：</p><ul><li><code>? vw = 元素 px 大小 / 7.5</code></li></ul></blockquote></li><li><p>插件</p><blockquote><ul><li>我们不需要一个个手动将px转成vw，我们可以借助VScode的插件<code>px to vw</code>来实现。</li><li>px to vw的使用方法和上面讲到的px to rem是一样，唯 一的区别，就是在扩展设置时不一样，填写的是&#x3D;&#x3D;视口宽&#x3D;&#x3D;，而不是1vw的大小</li></ul></blockquote></li><li><p>实际开发如何用 vw 做适配</p><blockquote><p>在实际开发中，我们会按以下步骤来实现开发</p><ul><li>1、要求设计师以 750px 宽，来设计移动端的设计稿</li><li>2、我们按正常的 750px 的设计稿，以 px 单位来开发</li><li>3、将 px 单位转换为对应的 vw 单位<ul><li>将 px 像素转换 vw 单位，对应公式：?vw &#x3D; px值 &#x2F; 7.5</li><li>我们并不会手动一个一个去计算，而是利用 vscode 中的插件px to vw一次搞定</li><li>在 VSCode 中安装 px to vw 软件中，然后将“扩展设置” 中 Viewport Width 值设为 750</li><li>切换到 CSS 代码，ctrl+A选中所有代码，然后Alt+Z之后，就会自动把所有 px 单位，转换成对应 vw 单位</li></ul></li></ul></blockquote></li></ol><h3 id="五、移动端开发常见问题"><a href="#五、移动端开发常见问题" class="headerlink" title="五、移动端开发常见问题"></a>五、移动端开发常见问题</h3><ol><li><p>图片缩放</p><blockquote><p>效果：图片填充满当前区块，同时<strong>等比</strong>裁剪，<strong>居中显示</strong>在当前区块中</p><ul><li>在流体布局中<ul><li>父盒子利用<code>padding-bottom</code>保持宽高比</li><li>子盒子宽高100%+<code>object-fit:cover;</code></li></ul></li><li>在其他布局中<ul><li>父盒子宽高使用rem&#x2F;vw</li><li>子盒子宽高100%+<code>object-fit:cover;</code><br><strong>处理这个问题的意义</strong><br>在实际的网站上线后，数据都是从后台读取的，用户在上传图片尺寸时，并不一定会按照设计师设计的比例来上传，这样就会造成图片上传后，大小不一样。</li></ul></li><li>图片高度过小，会在下面留下空白，</li><li>图片高度过大，会有一部分下面的内容看不到</li><li>我们实际在设计一张图时，重要的内容会在中间显示，所以最理想的效果是让图片能水平垂直居中于容器中</li></ul></blockquote></li><li><p>背景图缩放</p><blockquote><ul><li>当背景图片的宽高比与容器的宽高比不一样时</li><li>我们希望不管容器宽高如何缩放，图片一直填充整个容器，然后水平垂直居中显示</li></ul><pre><code>&lt;style&gt;  body &#123; margin: 0;  &#125;  .box &#123; width: 100vw; height: 31.467vw; /* 背景图片  不重复  水平垂直居中显示 */ background: url(./images/banner1-@2x.png) no-repeat center; /* 背景图填充整个容器 */ background-size: cover;  &#125;&lt;/style&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre></blockquote></li><li><p>精灵图使用</p><blockquote><ul><li>精灵图采用的是 2 倍图</li><li>所以在处理精灵图时，我们需要通过 background-size: 50%; ，来将背景图片大小缩小一半</li><li>测量尺寸时，也需要按一半的大小来测量</li></ul></blockquote></li><li><p>元素正方形缩放</p><blockquote><p>元素在缩放过程中，元素的高始终等于宽，同时元素中的内容在元素中水平垂直居中</p><ul><li>利用padding-bottom:100%;来实现元素的高与元素宽一样大小，同时等比缩放</li><li>利用absolute 绝对定位与transform实现子项在容器中水平垂直居中</li></ul></blockquote></li></ol><blockquote><blockquote><p><strong>图片缩放总结</strong></p></blockquote><ul><li>只要涉及到图片缩放问题，最好将图片放在一个 html 标签中，然后设置 html 标签的宽高</li><li>html 标签的宽高，就是我们希望图片等比例缩放的展示区大小</li></ul></blockquote><ol start="5"><li>经典的 1 像素问题<blockquote><p>在面试中，经常会问到移动端 1px 的处理问题，那到底 1px 问题，是个什么问题呢 ？<br><strong>何为 1 像素问题</strong><br>为了更好的理解 1 像素问题，我们从两个方面来展开讲解</p><ul><li>PSD 设计稿</li><li>1px 实际显示的大小</li></ul></blockquote></li></ol><blockquote><p><strong>PSD 设计稿</strong></p><ul><li>我们的设计稿是以 750px 宽来设计的，而我们实际开发时，代码是按 375px 来的。</li><li>在 750px 设计稿中的 1px，按我们实际的开发代码来说，要折半，折成 0.5px 才对。</li><li><strong>但是</strong>不同手机上，不同浏览器对小数的处理是不一样的</li><li><code>0.5px</code>在一些老的 IOS 和 Android 设备上不支持，他会把<code>低于0.5px</code>当成0来处理，<code>&gt;= 0.5px</code>当成1px来显示。</li><li>IOS上会: 把<code>&gt;= 0.75px</code> 的当作 1px 来处理 ，<code>&lt;0.75</code> 当成0.5px来处理,<code>&lt; 0.5px</code>当成0来处理</li><li>而且IOS上，用 <code>height: 1px</code> 来代替 <code>border-bottom: 1px solid red;</code>测出的效果不同</li><li>具体不同的手机上，效果不一样，具体以真机测试为主</li><li>所以直接把代码折半，设置成 0.5px 显然是达不到目的。</li></ul></blockquote><blockquote><p><strong>1px 实际显示的大小</strong></p><ul><li>我们都知道 1px 在 dpr 不同时，其显示的大小不同</li><li>而在设计师眼中，他设计的 1px，就是当前设备能显示的最小方格（最细的那个线），也就是物理像素中的 1 像素。</li><li>因此， 1px 像素问题，本质上不是问题，如果公司觉得没有必要，也就不用处理。</li><li>如果公司认为就是要用设备能显示的最细的那个小方格显示，那我们就要处理这个问题</li></ul></blockquote><blockquote><p><strong>1px 像素解决方案</strong><br>关于 1px 像素的处理方案有很多，这里我们提供一个最优的解决方案给到大家 transform+伪元素来实现<br><strong>实现原理：</strong></p><ul><li>利用伪元素来绘制 1px 的线条,然后利用定位，把线条放在对应位置</li><li>利用 media 查询判断不同的设备像素比对线条进行缩放</li></ul><pre><code>&lt;style&gt;  .box &#123;    height: 50px;    margin: px auto;    position: relative;  &#125;  .border-1px::before &#123;    position: absolute;    content: &quot;&quot;;    height: 1px;    width: 100%;    background-color: red;    bottom: 0;    /* transform: scaleY(0.5); */    /* 变换原点 */    transform-origin: 50% 0%;  &#125;  /* dpr=2，需要缩放一半，即0.5 */  @media only screen and (-webkit-min-device-pixel-ratio: 2) &#123;    .border-1px:before &#123;      transform: scaleY(0.5);    &#125;  &#125;  /* dpr=3，需要缩放到1/3，即0.33 */  @media only screen and (-webkit-min-device-pixel-ratio: 3) &#123;    .border-1px:before &#123;      transform: scaleY(0.33);    &#125;  &#125;&lt;/style&gt;&lt;body&gt; &lt;div class=&quot;box border-1px&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre></blockquote><blockquote><blockquote><p>当然，也可以通过 js 来判断 dpr,然后给元素添加对应的 Class 名字，来实现</p></blockquote><pre><code>if (window.devicePixelRatio &amp;&amp; devicePixelRatio &gt;= 2) &#123;  document.querySelector(&quot;.box&quot;).className = &quot;border-1px&quot;;&#125;</code></pre></blockquote><h3 id="六-注意事项"><a href="#六-注意事项" class="headerlink" title="六. 注意事项"></a>六. 注意事项</h3><ol><li><p>布局</p><blockquote><ul><li>在流体布局中，因为用px单位，距离会写死，所以我们在蓝湖查看尺寸使用的是自定义，指定宽度为设计稿宽度的一半</li><li>而在rem中，我们在ios平台下布局，使用rem单位，所以直接用原始宽度，不用减半</li></ul></blockquote></li><li><p>swiper</p><blockquote><ul><li>引入<code>swiper-bundle.min.js</code>和<code>swiper-bundle.min.css</code>文件</li><li>添加HTML内容，删掉不需要用到的</li><li>给Swiper定义一个大小,swiper-6.8.4下，容器名是<code>swiper-container</code></li><li>初始化Swiper，删掉不需要用到的</li><li>设置slider容器能够同时显示的slides数量<code>slidesPerView: &#39;数字/auto&#39;</code></li><li>给容器设置一个id名，根据id名修改样式。每一个swoper对应一个id名</li></ul></blockquote></li><li><p>要实现图片自适应缩放，必须要给它加宽&#x2F;高</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex布局和Grid布局</title>
      <link href="/2023/11/30/Flex%E5%B8%83%E5%B1%80%E5%92%8CGrid%E5%B8%83%E5%B1%80/"/>
      <url>/2023/11/30/Flex%E5%B8%83%E5%B1%80%E5%92%8CGrid%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><ol><li><p>简介</p><blockquote><ul><li>布局的传统解决方案，基于盒子模型，依赖display属性+position属性。它对于那些特殊布局非常不方便，比如垂直居中就不容易实现</li><li>2009年，W3C提出了一种新的方案：Flex布局，可以简便、完整、响应式地实现各种布局页面。目前，他已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能，Flex布局将成为未来布局的首选方案</li></ul></blockquote></li><li><p>什么是flex布局？</p><blockquote><ul><li>flex(flexible box)，意为“弹性的盒子”，flex布局也称为flex弹性布局</li><li>任何一个HTML元素都可以指定为flex布局</li><li>flex布局是一种&#x3D;&#x3D;一维的&#x3D;&#x3D;布局模型，它给flexbox的子元素之间提供了强大的空间分布和对齐能力</li><li>之所以说flexbox是一种一维布局，是因为一个flexbox一次只能处理一个维度上的元素布局，一行或一列</li><li>在flex布局中，项目的float、clear和verticla-align属性将失效</li></ul></blockquote></li><li><p>什么是flex容器(flex container)？</p><blockquote><ul><li>凡是采用flex布局的元素，就称为flex容器</li><li>也就是设置了<code>display:flex;</code>或<code>display:inline-flex;</code>的元素称之为flex容器</li><li>布局有两种<ul><li><code>display:flex;</code>弹性布局，元素自身以块级元素显示</li><li><code>display:inline-flex</code>弹性布局，元素自身以行内块元素显示</li></ul></li></ul></blockquote></li><li><p>什么是flex项目(flex item)？</p><blockquote><ul><li>flex容器的所有子元素(仅指直接子元素，不包括孙元素及其后代的子元素)，自动成为容器成员，称为flex项目</li></ul></blockquote></li><li><p>什么是主轴，什么是交叉轴？</p><blockquote><ul><li>默认情况下，水平方向是主轴，垂直于主轴方向上的是交叉轴</li><li>flex项目默认沿主轴方向开始排列(即从左往右沿水平方向排列)</li><li>主轴的开始位置(与边框的交叉点)叫做<code>main start</code>，结束位置叫做<code>main end</code></li><li>交叉轴的开始位置叫做在<code>cross start</code>，结束位置叫做<code>cross end</code></li><li><strong>单个</strong>flex项目占据的主轴空间叫做<code>main size</code>(主轴尺寸)，占据的交叉轴空间叫做<code>cross size</code>(交叉尺寸)<img src="flex主轴交叉轴.png"></li></ul></blockquote></li><li><p>flex项目的默认表现形式</p><blockquote><p><strong>当flex容器和flex项目没有添加任何相关属性时，&#x3D;&#x3D;flex项目&#x3D;&#x3D;的默认表现形式如下：</strong></p><ul><li>子元素(项目)排列为一行(<code>flex-direction</code>属性的初始值是<code>row</code>)</li><li>子元素(项目)从主轴的起始线开始排列</li><li>子元素(项目)不会在主维度方向拉伸(放得下时不会拉伸)，但放不下时会缩小</li><li>子元素(项目)默认为行内块元素，不独占一行，但可以设置宽高；若没有设置宽度，则<strong>宽度</strong>由内容撑起</li><li>子元素(项目)没有设置高度时，被拉伸来填充交叉轴大小(单行时项目的高度等于容器高)</li><li><code>flex-basis</code>属性为<code>auto</code>(即元素的宽为自动)</li><li><code>flex-wrap</code>属性为<code>nowrap</code>(子项默认放不下时，不会<strong>换行</strong>)</li></ul></blockquote></li></ol><blockquote><p><strong>display:flex;</strong></p><ul><li>flex容器为块级元素，若没有设置宽高，则<strong>宽度</strong>自动填充父元素的宽度，<strong>高度</strong>由内容撑起</li></ul></blockquote><blockquote><p><strong>display:inline-flex;</strong></p><ul><li>flex容器为行内块元素，不独占一行，但可以设置宽高；若没有设置宽高，则<strong>宽高</strong>都由内容撑起</li></ul></blockquote><h3 id="二、flex容器属性"><a href="#二、flex容器属性" class="headerlink" title="二、flex容器属性"></a>二、flex容器属性</h3><ol><li><p>flex-direction设置主轴方向</p><blockquote><ul><li>默认主轴方向就是x轴，水平向右</li><li>默认交叉轴就是y轴，垂直向下<br><code>flex-direction:row;</code><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>row</td><td>(默认值)主轴为水平方向，起点在左端。(交叉轴在垂直方向，起点在元素上边框位置)</td></tr><tr><td>row-reverse</td><td>主轴为水平方向，起点在右端。(交叉轴在垂直方向，起点在元素上边框位置)</td></tr><tr><td>column</td><td>主轴在垂直方向，起点元素在上边框位置(交叉轴在水平方向，起点在左端)</td></tr><tr><td>column-reverse</td><td>主轴在垂直方向，起点在下沿(交叉轴在水平方向，起点在左端)</td></tr></tbody></table></li></ul></blockquote></li><li><p>flex-wrap项目如何换行</p><blockquote><ul><li>默认情况下，项目都在一条线上(轴线)上排列</li><li><code>flex-wrap</code>属性用来定义：如果项目在一条轴线上排不下时，如何换行<br><code>flex-wrap:nowrap;</code><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>nowrap</td><td>不换行(默认)</td></tr><tr><td>wrap</td><td>换行，第一行在上方(或第一列左边)</td></tr><tr><td>wrap-reverse</td><td>换行，第一行在下方(或第一列右边)</td></tr></tbody></table></li></ul></blockquote></li></ol><blockquote><table><thead><tr><th>主轴属性</th><th>主轴方向</th><th>wrap效果</th><th>wrap-reverse效果</th></tr></thead><tbody><tr><td><code>flex-direction:row;</code></td><td>水平，从左至右</td><td>第二行从上到下、从左至右排列</td><td>第二行从下到上、从左至右排列</td></tr><tr><td><code>flex-direction:row-reverse;</code></td><td>水平，从右到左</td><td>第二行从上到下、从右至左排列</td><td>第二行从下到上、从右到左排列</td></tr><tr><td><code>flex-direction:column;</code></td><td>垂直，从上到下</td><td>第二列从左到右、从上到下排列</td><td>第二列从右到左、从上到下排列</td></tr><tr><td><code>flex-direction:column-reverse;</code></td><td>垂直，从下到上</td><td>第二列从左到右、从下到上排列</td><td>第二列从右到左、从下到上排列</td></tr><tr><td><strong>总结：</strong></td><td></td><td></td><td></td></tr></tbody></table><ul><li>wrap：按照交叉轴方向start–&gt;end，主轴start–&gt;end方向换行</li><li>wrap-reverse：按照交叉轴方向end–&gt;start，主轴start–&gt;end方向换行</li><li>因此：wrap-reverse改变的是交叉轴的方向</li></ul></blockquote><ol start="3"><li><p>flex-flow 主轴方向和项目如何换行</p><blockquote><p><code>flex-flow</code>属性是<code>flex-direction</code>和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code><br><code>flex-flow:row nowrap;</code>第一个值规定主轴方向，第二个值规定项目如何换行</p></blockquote></li><li><p>justify-content 项目在<strong>主轴</strong>上对齐方式</p><blockquote><p><code>justify-content:flex-start;</code></p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>(默认值)，向主轴start方向对齐</td></tr><tr><td>flex-end</td><td>向主轴end方向对齐</td></tr><tr><td>center</td><td>居中</td></tr><tr><td>space-between</td><td>两端对齐，项目之间的间隔都相等,两端与项目之间不会有间隔</td></tr><tr><td>space-around</td><td>每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍(相当于加了左右外边距)</td></tr><tr><td>space-evenly</td><td>使每个元素之间和元素距离边距的距离都相等，但iphone的SE上不支持，会失效，基本不用</td></tr></tbody></table></blockquote></li><li><p>align-items 项目在<strong>交叉轴</strong>上对齐方式</p><blockquote><p><code>align-items</code>属性定义项目在<strong>交叉轴</strong>上如何对齐，<strong>只对单行有效</strong><br><code>align-items:stretch;</code></p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>stretch</td><td>(默认值)：如果项目未设置高度或设为auto，将占满整个容器</td></tr><tr><td>flex-start</td><td>与交叉轴的起点对齐</td></tr><tr><td>flex-end</td><td>与交叉轴的终点对齐</td></tr><tr><td>center</td><td>与交叉轴的中点对齐</td></tr><tr><td>baseline</td><td>向项目的第一行文字的X的中间对齐</td></tr></tbody></table></blockquote></li></ol><blockquote><p><strong>注意</strong></p><ul><li>默认情况下，项目如果没有设置高度或设为auto，其高度会自动拉伸到容器高度。<strong>原因是：</strong><code>align-items:stretch;</code>为默认值。</li><li><strong>但是在其他几种情况下</strong>(即align不为stretch时)，项目未设置高度，其高度就为内容大小，并不会拉伸。</li></ul></blockquote><blockquote><p><strong>当主轴放不下，允许换行时</strong></p><ul><li>当项目放不下，换行时，可以把每一行看做一个”新的flex容器”</li><li><code>align-items</code>控制项目在”每一个容器”的交叉轴上的对齐方式</li><li>行与行之间的间隔高度是相等的，由于每一行的最高项目高度不一样，所以每一个”新容器”所占高度也不一样</li><li>当前行容器占的高度&#x3D;当前行最高元素的高+行与行之间的间隔&#x3D;当前行最高元素的高+(容器高-每一所有行最高元素的高)&#x2F;行数</li></ul></blockquote><ol start="6"><li>align-content 多根轴线对齐方式(多行)<blockquote><p>该属性规定了<strong>多根轴线</strong>在<strong>交叉轴</strong>上的对齐方式<br>如果项目只有一根轴线，该属性不起作用(允许换行)</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>stretch</td><td>(默认值)：轴线占满整个交叉轴</td></tr><tr><td>flex-start</td><td>与交叉轴的起点对齐</td></tr><tr><td>flex-end</td><td>与交叉轴的终点对齐</td></tr><tr><td>center</td><td>与交叉轴的中点对齐</td></tr><tr><td>space-between</td><td>两端对齐，与交叉轴两端对齐，轴线之间的间隔平均分布</td></tr><tr><td>space-around</td><td>每个轴线两侧的间隔都相等(每行加外边距)。所以，轴线之间的间隔比轴线与边框的间隔大一倍</td></tr></tbody></table></blockquote></li></ol><blockquote><p><strong>注意！！！</strong><br>可换行时，<code>align-items</code>与<code>align-content</code>的区别</p><ul><li><code>align-items</code>控制单行，因此每行都是一个”新容器”，<code>align-items</code>控制每个新容器内项目在交叉轴上的对齐方式，每个容器之间都有等高的间隔</li><li><code>align-content</code>同时控制多行<ul><li>使用<code>stretch</code>、<code>space-between</code>、<code>space-around</code>时，每行的高度等于当前行最高的项目高度+等高的行间隔,</li></ul></li><li>使用<code>flex-start</code>、<code>flex-end</code>、<code>center</code>时，行与行之间没有间隔，统一成”一个容器”</li></ul></blockquote><h3 id="三、flex项目属性"><a href="#三、flex项目属性" class="headerlink" title="三、flex项目属性"></a>三、flex项目属性</h3><blockquote><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>order</td><td>属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0</td></tr><tr><td>align-self</td><td>单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性,默认值为auto，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</td></tr><tr><td>flex-grow</td><td>flex项<strong>主尺寸</strong>的flex增长系数。默认为0，即如果存在剩余空间，也不放大。</td></tr><tr><td>flex-shrink</td><td>flex项<strong>主尺寸</strong>的缩小比例，默认为1，即如果空间不足，该项目将缩小。</td></tr><tr><td>flex-basis</td><td>定义了在分配多余空间之前，项目占据的主轴空间（main size）</td></tr><tr><td>flex</td><td>flex属性是flex-grow, <code>flex-shrink</code>和<code>flex-basis</code>的简写默认值为:0 1 auto。后两个属性可选</td></tr></tbody></table></blockquote><ol><li><p>order项目的排列顺序</p><blockquote><ul><li><code>order</code>属性定义项目的排列顺序</li><li><code>order</code>属性值<code>&gt;0</code>的整数，数值越小，排列越靠前，默认为0<br><code>order:1;</code></li></ul></blockquote></li><li><p>align-self 单个项目交叉轴对齐方式</p><blockquote><ul><li><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性</li><li><code>align-self</code>的默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性</li><li>如果父元素没有设置<code>align-items</code>属性，则等同于<code>stretch</code>(项目未设置高度时)</li><li><code>align-self:flex-start;</code><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>auto</td><td>默认值，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code></td></tr><tr><td>stretch</td><td>如果项目未设置高度或设为<code>auto</code>，将占满整个容器的高度</td></tr><tr><td>flex-start</td><td>交叉轴的起点对齐</td></tr><tr><td>flex-end</td><td>交叉轴的终点对齐</td></tr><tr><td>center</td><td>交叉轴的中点对齐</td></tr><tr><td>baseline</td><td>项目的第一行文字的基线对齐</td></tr></tbody></table></li><li>当项目换行时，其<code>align-self</code>单个项目对齐方式，是相当于其所在的哪一行的轴线而言</li><li>在今日头条案例中，用到<code>align-self:flex-start;</code>，使行内块元素宽度不占满整行(不设宽度时)</li></ul></blockquote></li><li><p>flex-grow 项目主轴放大系数</p><blockquote><ul><li><code>flex-grow</code>设置flex项目<strong>主尺寸</strong>的flex增长系数</li><li>主尺寸是项目的宽度或高度，这取决于<code>flex-direction</code>值</li><li><code>flex-grow</code>属性，在flex容器有剩余空间时生效</li><li><code>剩余空间=flex容器宽大小-所有flex项目宽加起来的大小</code><blockquote><p>注：剩余空间的值一定要大于0的</p></blockquote></li><li><code>flex-grow</code>默认值为0，表示即使有剩余空间，也不增长(放大)</li><li><code>flex-grow</code>的值&gt;&#x3D;0的数字</li></ul></blockquote></li></ol><blockquote><p><strong>项目放大后尺寸计算方式</strong></p><ul><li>当所有项目的<code>flex-grow</code>值的总结加<code>&lt;1</code>时<ul><li>项目放大后宽 &#x3D; 项目原始宽 + 剩余空间*项目的<code>flex-grow</code>值</li></ul></li><li>当所有项目的<code>flex-grow</code>值的总和加起来<code>&gt;=1</code>时<ul><li>项目放大后宽&#x3D;项目原始宽+剩余空间*(flex-grow值)&#x2F;所有项目的flex-grow值总和</li></ul></li><li>当flex容器的剩余空间为0时，不管flex项目的<code>flex-grow</code>的值是多少，项目都不会放大(因为没有多余空间)</li></ul></blockquote><ol start="4"><li>flex-shrink项目主轴上缩放系数<blockquote><ul><li><code>flex-shrink</code>属性指定了flex元素的收缩规则</li><li>当所有项目宽度大于容器的时候才会收缩(默认主轴为水平方向)</li><li>flex项目收缩的大小是依据所有项目的<code>flex-shrink</code>值决定的</li><li><code>flex-shrink</code>的默认值为1，表示容器空间不足时，所有项目等比缩小</li><li>只有当flex容器设置了<code>flex-grow:nowrap;</code>时，才能看到效果</li><li>当<code>flex-shrink:0;</code>时，无论如何不缩放</li></ul></blockquote></li></ol><blockquote><p><strong>项目收缩后尺寸大小计算方式</strong></p><ul><li>当flex-shrink总和&lt;1时<ul><li><ol><li>计算溢出宽 &#x3D;所有项目宽之和-容器宽</li></ol></li><li><ol start="2"><li><strong>计算所有子项的总缩放宽 &#x3D;溢出宽</strong></li></ol></li><li><ol start="3"><li>当前项目缩放比例 &#x3D;(当前项目原始宽<code>*</code>flex-shrink值)&#x2F;所有项目(宽<code>*``flex-shrink</code>值)之和</li></ol></li><li><ol start="4"><li>项目收缩宽&#x3D;所有子项的总缩放宽<code>*</code>当前项目缩放比例</li></ol></li><li><ol start="5"><li>项目收缩后宽&#x3D;原始宽-收缩宽</li></ol></li></ul></li><li>当flex-shrink总和&gt;&#x3D;1时<ul><li><ol><li>计算溢出宽 &#x3D;所有项目宽之和-容器宽</li></ol></li><li><ol start="2"><li>计算所有子项的总缩放宽 &#x3D;溢出宽<code>*</code>所有项目<code>flex-shrink</code>值之和</li></ol></li><li><ol start="3"><li>当前项目缩放比例 &#x3D;(当前项目原始宽<code>*</code>flex-shrink值)&#x2F;所有项目(宽<code>*``flex-shrink</code>值)之和</li></ol></li><li><ol start="4"><li>项目收缩宽&#x3D;所有子项的总缩放宽<code>*</code>当前项目缩放比例</li></ol></li><li><ol start="5"><li>项目收缩后宽&#x3D;原始宽-收缩宽<blockquote><p>注：当项目的搜索框&gt;项目原始宽时，此计算方式无效</p></blockquote></li></ol></li></ul></li></ul></blockquote><ol start="5"><li><p>flex-basis分配剩余空间前，项目占据主轴空间大小(main size)</p><blockquote><ul><li><code>flex-basis</code>属性定义了<strong>在分配多余空间之前</strong>，项目占据的主轴空间</li><li>浏览器根据这个属性聚酸主轴是否有多余空间</li><li>它的默认值为<code>auto</code>，即项目的本来大小(如果有with，则缩放以width为参考)</li><li><code>flex-basis</code>的优先级要高于<code>width</code></li><li>特殊：<code>flex-basis:0%;</code>元素宽为0；</li></ul></blockquote></li><li><p>flex项目放大、缩小、空间占据</p><blockquote><ul><li><code>flex</code>属性是<code>flex-grow</code>、<code>fleex-shrink</code>和<code>flex-basis</code>的缩写</li><li>默认值为<code>0 1 auto</code>，也就是不放大，等比缩放，占主轴宽度为auto</li><li>特殊<ul><li><code>flex:auto;</code>：<code>flex:1 1 auto;</code></li><li><code>flex:none;</code>：<code>flex:0 0 auto;</code></li><li><code>flex:1</code>：<code>flex:1 1 0%;</code></li></ul></li></ul></blockquote></li></ol><h3 id="四、flex实战"><a href="#四、flex实战" class="headerlink" title="四、flex实战"></a>四、flex实战</h3><ol><li><p>元素水平垂直居中</p><blockquote><ul><li>弹性布局:<code>display:flex;</code></li><li>水平居中:<code>jusity-content:center;</code></li><li>垂直居中:<code>align-items:center;</code>.(不同情况下还可以使用<code>align-content</code>和<code>align-self</code>)</li></ul></blockquote></li><li><p>画骰子</p><blockquote><ul><li>1~6点</li></ul></blockquote></li><li><p>双飞翼布局</p><blockquote><ul><li>左右固定，中间自适应，最中间的内容放在第一位，有利于SEO搜索引擎优化</li><li>注意点<ul><li>容器设置<code>display:flex;</code>使项目以弹性布局方式排列</li><li>中间的项目写在最上面，但利用<code>order</code>改变排版顺序</li><li>中间的项目设置<code>flex-grow:1;</code>：使中间项目的充分占据容器剩余空间</li><li>左右项目固定宽度，<code>flex-grow</code>默认为0，因此不会分配容器的剩余空间</li></ul></li></ul></blockquote></li><li><p>flex怎么实现盒子1在最左边，23在最右边</p></li><li><p>星级评估</p><blockquote><ul><li>利用后续兄弟元素选择器，把主轴方向调转</li><li>伪元素实现实心星星：代码<code>content=&quot;\2605&quot;</code></li><li><code>hover</code>鼠标滑动变色</li></ul></blockquote></li><li><p>如何解决 flex 布局 7 个元素使用 space-between 最后一行两边分布的问题？</p><blockquote><ul><li>如果我们每一行显示的个数为 n，那我们可以最后一行子项的后面加上 n-2 个 span 元素，span 元素的宽度和其它子项元素宽度一样，但不用设置高度,高度设置为0,不对其他元素产生影响。</li><li><strong>为什么是添加n-2个span元素呢 ？</strong><ul><li>当最后一行只有 1 个子元素时，他会默认靠左，不用处理</li><li>当最后一行子元素正好时，我们就不用关心这个问题</li></ul></li></ul></blockquote></li></ol><h2 id="Grid布局"><a href="#Grid布局" class="headerlink" title="Grid布局"></a>Grid布局</h2><h3 id="一、基本概念-1"><a href="#一、基本概念-1" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><ol><li><p>什么是网格布局</p><blockquote><ul><li>grid网格布局是将容器分成了行和列，产生单元格，然后指定<strong>项目</strong>所在的单元格，可以看做是二维布局</li><li>grid比flex更加强大，flex更适合处理一维布局<img src="grid.png"></li></ul></blockquote></li><li><p>什么是grid容器和项目</p><blockquote><ul><li>与flex布局一样，采用网格布局的区域称为容器，其直接子元素称为项目</li><li>通过给元素添加<code>display:grid;</code>或<code>display:inline-grid;</code>来指定元素为grid网格布局<ul><li><code>display:grid;</code>元素自身以块级元素显示</li><li><code>display:inline-grid;</code>元素自身以行内块元素显示</li></ul></li><li>任何元素都可以指定为grid网格布局</li></ul></blockquote></li><li><p>什么是行、列、单元格</p><blockquote><ul><li>容器里面的水平区域称为行，垂直区域称为列</li><li>行和列交叉形成区域，称为单元格(cell)</li><li>正常情况下，<code>n</code>行和<code>m</code>列会产生<code>n*m</code>个单元格</li></ul></blockquote></li><li><p>什么是网线格</p><blockquote><ul><li>划分网格的线，称为”网线格”</li><li>水平网格线划分出行，垂直网格线划分出列</li><li>正常情况下,n行有<code>n+1</code>根水平网格线，m列有<code>m+1</code>根垂直网格线</li></ul></blockquote></li><li><p>什么是网格轨道</p><blockquote><ul><li>网格轨道是两条网格线之间的空间<img src="网格轨道.png"></li></ul></blockquote></li><li><p>什么是网格区域</p><blockquote><ul><li>网格区域是由网格中一个或多个单元格组成的一个矩形区域，有点类似与表格中的合并</li><li>也就是说，我们把grid容器划分成对应单元格后，可以对这些单元格做合并操作<img src="网格区域.png"></li></ul></blockquote></li><li><p>什么是网格间距</p><blockquote><ul><li>网格间距分为行间距和列间距</li><li>行与行的间隔，被称为行间距，列与列的间隔，被称为列间距。具体如下图所示<img src="网格间距.png"></li></ul></blockquote></li><li><p>什么是网格内容区域</p><blockquote><ul><li>Grid 容器的每一个子元素，被称为 Grid 项目。所有 Grid 项目看成一个整体，这个整体我们称为网格内容。<img src="网格内容.png"></li></ul></blockquote></li></ol><h3 id="二、grid-容器-属性"><a href="#二、grid-容器-属性" class="headerlink" title="二、grid&#x3D;&#x3D;容器&#x3D;&#x3D;属性"></a>二、grid&#x3D;&#x3D;容器&#x3D;&#x3D;属性</h3><blockquote><ul><li>当元素设置网格布局以后，项目的<code>float</code>、<code>display:inline-block</code>、<code>display:table-cell</code>、<code>vertical-align</code>、<code>column-*</code>等设置都将失效</li></ul></blockquote><ol><li>grid-template-rows、grid-template-columns属性<blockquote><p><strong>tips：</strong></p><ul><li><code>grid-template-rows</code>定义行及行高</li><li><code>grid-template-columns</code>定义列及列宽</li></ul></blockquote></li></ol><blockquote><p><strong>单位</strong></p><ol><li>绝对单位长度px</li></ol><ul><li>每行行高都是100px：<code>grid-template-rows:100px 100px;</code></li><li>每列列宽都是200px：<code>grid-template-column:200px 200px;</code></li></ul><ol start="2"><li>百分比单位</li></ol><ul><li>以容器宽高为基础。&#96;width:200px height:300px;</li><li><code>grid-template-rows:30% 70%;</code><ul><li>行高分别为：<code>300*30%</code> <code>300*70%</code>;</li></ul></li><li><code>grid-template-column:40% 60%;</code><ul><li>列宽分别为：<code>200*40%</code> <code>200*60%</code>;</li></ul></li></ul><ol start="3"><li>fr关键词</li></ol><ul><li><code>fr</code>关键字(fraction的缩写，片段)，表示比例关系</li><li>所有行&#x2F;列都用fr单位，则：<ul><li>每列宽&#x3D;容器宽 * (当前列fr值&#x2F;所有列fr值总和)</li><li>每行高&#x3D;容器高 * (当前列fr值&#x2F;所有列fr值总和)</li></ul></li><li>与绝对长度的单位结合使用,fr单位的行&#x2F;列，表示的是按比例分配剩余空间</li></ul></blockquote><blockquote><p><strong>repeat()函数</strong></p><ul><li>简化重复值</li><li>包括两个参数：repeat(重复次数，所重复的值)</li></ul><pre><code>/* 定义行，3行的行高都是100px */grid-template-rows: repeat(3, 100px);/* 定义了6行，第1，4行的高为50px 第2，5行的高为100px，第3，6行的高为80px */grid-template-rows: repeat(2, 50px 100px 80px);</code></pre></blockquote><blockquote><p><strong>auto-fill关键字</strong></p><ul><li>有时，单元格的大小是固定的，但是容器的大小不确定，如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用auto-fill关键字表示自动填充。</li><li><code>grid-template-columns: repeat(auto-fill, 100px);</code><ul><li>意思是每列宽度为100px，列数自动填充</li></ul></li></ul></blockquote><blockquote><p><strong>minmax</strong><br><code>minmax()</code>函数产生一个长度范围，表示长度就在这个范围内</p><ul><li>&#96;minmax(最小值,最大值)</li><li>可以与px、fr、百分比混用</li></ul></blockquote><blockquote><p><strong>auto关键词</strong></p><ul><li>auto关键词表示(列宽&#x2F;行高)由浏览器自己决定</li><li>auto 表示当对应单元格中的元素（如 div）在未设置宽度时，当前列宽为自动计算的宽</li><li>情况一：</li></ul><pre><code>容器设置：grid-template-columns: 100px auto 100px;而且auto对应的第二个项目**未设置列宽**</code></pre><ul><li>表示第二个单元格宽度自适应</li><li>情况二</li></ul><pre><code>容器设置：grid-template-columns: 100px auto 100px;而且auto对应的第二个项目**设置了列宽**</code></pre><ul><li>若item2的宽度<strong>大于</strong>单元格自动计算的宽，则单元格宽度由对应项目决定</li><li>若item2的宽度<strong>小于</strong>单元格自动计算的宽，则单元格宽度以自动计算的为主</li></ul></blockquote><blockquote><p><strong>网格线的名称</strong></p><ul><li>使用方括号，指定每一根网格线的名字，方便以后的引用。</li><li><code>grid-template-rows: [a1] 200px [a2];</code></li><li>需要注意的是n行有<code>n+1</code>条网格线</li></ul></blockquote><ol start="2"><li><p>row-gap、column-gap、gap属性</p><blockquote><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>row-gap</td><td>设置行与行的间隔(行间距)</td></tr><tr><td>column-gap</td><td>设置列与列的间距(列间距)</td></tr><tr><td>gap</td><td>是<code>row-gap</code>和<code>column-gap</code>的合并简写形式</td></tr></tbody></table><ul><li>属性值单位是绝对单位px或百分比</li><li>百分比单位是网格容器的百分比</li><li>gap后如果只写一个值，表示列间距和行间距一样大小</li></ul></blockquote></li><li><p>grid-template-areas属性</p><blockquote><ul><li>grid-template-areas属性用于指定<strong>网格区域</strong>，一个区域由单个或多个单元格组成</li><li>这个属性需要配合项目属性<code>grid-area</code>一起使用</li><li><code>grid-area:区域名</code>用于指定grid项目放在哪个区域</li><li>不需要利用的区域，则使用点<code>.</code>表示</li><li>区域的命名会影响到网格线，每个区域的起始网格线，会自动命名为<code>区域名-start</code>；终止网格线自动命名为<code>区域名-end</code></li><li>注意：”合并单元格”时，所形成的区域必须是矩形</li><li>使用方法：</li></ul><pre><code>.container&#123; grid-template-areas:&quot;a a c&quot;&quot;a a f&quot;&quot;g h i&quot;;  &#125;.grid-item1 &#123; /* 将项目放在区域a中 */ grid-area: a; background-color: skyblue;  &#125;</code></pre></blockquote></li><li><p>grid-auto-flow属性</p><blockquote><ul><li>它决定了项目在容器中的排列顺序，是”先行后列”，还是”先列后行”<table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>row</td><td>默认值，即先行后列，即项目默认从左往右，先天满第一行，再开始第二行</td></tr><tr><td>column</td><td>先列后行，即项目先从上往下填满第一列，再开始放第二列</td></tr><tr><td>row dense</td><td>某些项目指定位置以后，剩下的项目怎么自动放置。表示**”先行后列”**，并且尽可能紧密填满，尽量不出现空格</td></tr><tr><td>column dense</td><td>某些项目指定位置以后，剩下的项目怎么自动放置。表示**”先列后行”**，并且尽量填满空格</td></tr></tbody></table></li></ul></blockquote></li><li><p>grid-auto-columns和grid-auto-rows属性</p><blockquote><p><strong>什么是显示网格：</strong></p><ul><li>使用<code>grid-template-columns</code>和<code>grid-auto-rows</code>指定尺寸创建出来行和列形成的网格<br><strong>什么是隐藏网格</strong></li><li>是自动布局算法创建的额外的行或列形成的网格</li></ul></blockquote></li></ol><blockquote><ul><li><code>grid-auto-columns</code>：隐式创建的网格<strong>纵向</strong>轨道(track)的宽度。即设置隐式网格的<strong>宽度</strong></li><li><code>grid-auto-rows</code>：用于指定隐式创建的<strong>行</strong>轨道大小。即设置隐式网格的<strong>高度</strong></li><li><code>grid-auto-columns</code>与<code>grid-auto-rows</code>的写法与<code>grid-template-columns</code>和<code>grid-template-rows</code>完全相同。</li><li>但是！<code>grid-auto-columns</code>与<code>grid-auto-rows</code>不支持<code>repeat</code>写法</li><li>如果不指定<code>grid-auto-columns</code>与<code>grid-auto-rows</code>这两个属性，浏览器完全根据<strong>单元格内容的大小</strong>，决定新增网格的列宽或行高。</li><li>只有在“先行后列”：<code>grid-auto-flow:row;</code>的情况下，设置隐式行高<code>grid-auto-rows</code>才有用，此时的隐式列宽由<code>grid-template-columns</code>决定</li><li>类似的，只有在“先列后行”时，设置隐式列宽才有效；而隐式行高由<code>grid-template-rows</code>决定</li></ul></blockquote><ol start="6"><li><p>justify-items属性</p><blockquote><p>用来设置<strong>单元格内容</strong>的水平位置</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>stretch</td><td>(默认值)拉伸，占满单元格的整个宽度</td></tr><tr><td>start</td><td>与单元格最左边对齐</td></tr><tr><td>end</td><td>与单元格最右边对齐</td></tr><tr><td>center</td><td>单元格内水平居中对齐</td></tr></tbody></table></blockquote></li><li><p>align-items属性</p><blockquote><p>用来设置<strong>单元格内容</strong>的垂直对齐方式</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>stretch</td><td>(默认值)拉伸，占满单元格的整个高度</td></tr><tr><td>start</td><td>与单元格最上边对齐</td></tr><tr><td>end</td><td>与单元格最下边对齐</td></tr><tr><td>center</td><td>与单元格内垂直居中对齐</td></tr></tbody></table></blockquote></li><li><p>place-items属性</p><blockquote><p>它是<code>align-items</code>和<code>justify-items</code>属性的<strong>合并简写</strong>属性</p><ul><li><code>place-items:(垂直,水平)</code></li><li>如果只写一个值，则相当于两个值一样</li></ul></blockquote></li><li><p>justify-content属性</p><blockquote><p>设置<strong>整个内容区域</strong>在容器里面的<strong>水平</strong>位置</p><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>start</td><td>默认值，对齐容器的<strong>左</strong>边框</td></tr><tr><td>end</td><td>对齐容器的<strong>右</strong>边框</td></tr><tr><td>center</td><td>容器内部<strong>水平居中</strong>。</td></tr><tr><td>stretch</td><td>单元格大小没有指定时，<strong>拉伸</strong>宽占据整个网格容器。</td></tr><tr><td>space-around</td><td>每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</td></tr><tr><td>space-between</td><td>项目与项目的间隔相等，项目与容器边框之间没有间隔。</td></tr><tr><td>space-evenly</td><td>项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</td></tr></tbody></table><blockquote><p>注意：只有当单元格宽&#x2F;高为<code>auto</code>时，<code>justify-content:stretch;</code>拉伸才会生效</p></blockquote></blockquote></li><li><p>align-content属性</p><blockquote><p>是整个<strong>内容区域</strong>的<strong>垂直</strong>位置</p><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>start</td><td>默认值，对齐容器的起始边框</td></tr><tr><td>end</td><td>对齐容器的结束边框</td></tr><tr><td>center</td><td>容器内容垂直居中。</td></tr><tr><td>stretch</td><td>项目高度没有指定时，项目高度会被拉伸占据整个网格容器。</td></tr><tr><td>space-around</td><td>每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</td></tr><tr><td>space-between</td><td>项目与项目的间隔相等，项目与容器边框之间没有间隔。</td></tr><tr><td>space-evenly</td><td>项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</td></tr></tbody></table></blockquote></li><li><p>place-content属性</p><blockquote><ul><li><code>place-content</code>属性是<code>align-content</code>属性和<code>justify-content</code>属性的合并简写形式</li></ul></blockquote></li><li><p>grid-template和grid属性</p><blockquote><ul><li><code>grid-template</code>属性是<code>grid-template-rows</code>、<code>grid-template-columns</code>和<code>grid-template-areas</code>这三个属性的合并简写形式。</li><li>只定义行高和列宽<ul><li><code>grid-template:100px 200px/50px 100px;</code></li><li>行高分别为100px和200px，列宽分别为50px和100px</li></ul></li><li>定义行列，同时划分区域</li></ul><pre><code>grid-template:  &quot;a a b&quot; 50px  &quot;a a b&quot; 100px  &quot;c c c&quot; 50px / 100px 100px 100px;  /*定义行列和区域 3行 行高分别为 50px 100px 50px3列 列宽分别为 100px 100px 100px*/</code></pre></blockquote></li></ol><blockquote><ul><li><code>grid</code>属性是<code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code>、 <code>grid-auto-rows</code>、<code>grid-auto-columns</code>、<code>grid-auto-flow</code>这六个属性的合并简写形式。<ul><li>因为过于复杂，实际并不会用这种方式</li></ul></li></ul></blockquote><h3 id="三、grid-项目-的属性"><a href="#三、grid-项目-的属性" class="headerlink" title="三、grid&#x3D;&#x3D;项目&#x3D;&#x3D;的属性"></a>三、grid&#x3D;&#x3D;项目&#x3D;&#x3D;的属性</h3><ol><li>指定项目的位置<blockquote><ul><li>通过指定项目的四个边框的位置，四个边框分别定位在哪根网络线<table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>grid-column-start</td><td>项目左边框所在的垂直网格线</td></tr><tr><td>grid-column-end</td><td>项目右边框所在的垂直网格线</td></tr><tr><td>grid-row-start</td><td>项目上边框所在的水平网格线</td></tr><tr><td>grid-row-end</td><td>项目下边框所在的水平网格线</td></tr></tbody></table></li></ul></blockquote></li></ol><blockquote><ul><li>当项目只指定了4个属性中的一个，则其他未指定的会采用默认位置，并且一个项目只占一个单元格</li><li>项目的默认位置，由<code>grid-auto-flow</code>属性决定<ul><li>先行后列时，若未明确定位，则被指定项目会按前后顺序排列</li><li>先列后行时，若未明确定位，则被指定项目<strong>高于</strong>其前面的元素</li><li><code>row dense</code>表示 “先行后列”，并且尽可能紧密填满，尽量不出现空格。</li><li><code>column dense</code>表示”先列后行”，并且尽量填满空格</li></ul></li><li>指定方式(可混用)：<ul><li>数字：第几个网格线</li><li>名称：网格线名字</li><li>span关键字：表示跨越，后接数字表示跨越几个网格。不管是star还是end都是从默认的那个单元格开始算</li><li>auto关键字：表示自动放置，自动跨度或默认跨度为1</li></ul></li><li>如果项目发生重叠，通过<code>z-index</code>属性指定项目的重叠顺序</li></ul></blockquote><ol start="2"><li><p>grid-colum、grid-row属性</p><blockquote><ul><li><code>grid-column</code>是<code>grid-column-start</code>和<code>grid-column-end</code>的合并简写形式</li><li><code>grid-row</code>属性是<code>grid-row-start</code>属性和<code>grid-row-end</code>的合并简写形式</li><li>写法：<code>grid-column:1/3;</code>用<code>/</code>分隔</li></ul></blockquote></li><li><p>grid-area属性</p><blockquote><ul><li><code>grid-area</code>属性指定项目放在哪一个区域</li><li>配合<code>grid-template-areas</code>属性一起使用</li><li>特殊用法1：<ul><li><code>grid-area</code>属性还可用作<code>grid-row-start</code>、<code>grid-column-start</code>、<code>grid-row-end</code>、<code>grid-column-end</code>的合并简写形式，直接指定项目的位置。 </li><li><code>grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</code></li><li><code>grid-area:1/2/3/4;</code></li></ul></li><li>特殊用法2(栅格布局)：<ul><li>所谓的栅格布局，你可以简单理解为，要把一个页面或容器(如 div)，分成多少份：<code>grid-template-columns: repeat(12, 1fr);</code></li><li>然后设置其页面或容器中子元素占对应的份数：</li></ul></li></ul><pre><code>.col-3 &#123;   /* 宽为父容器3份宽 */ grid-area: auto/auto/auto/span 3; &lt;!-- 不指定起始线，只规定所跨越的单元格 --&gt;  &#125;</code></pre></blockquote></li><li><p>justify-self、align-self、place-self 属性</p><blockquote><ul><li><code>justify-self</code>设置单元格内容的水平位置</li><li><code>align-self</code>设置单元格内容的垂直位置</li><li><code>place-self</code>是align-self属性和justify-self属性的<strong>合并</strong>简写形式，如果省略第二个值，place-self属性会认为这两个值相等。<br><strong>justify-self 和 align-self 属性的取值相同，都可以是以下 4 个</strong><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>stretch</td><td>默认值，拉伸，占满单元格的整宽或高</td></tr><tr><td>start</td><td>（水平居左或垂直居上）</td></tr><tr><td>end</td><td>（水平居右或垂直居下）</td></tr><tr><td>center</td><td>水平居中，或垂直居中</td></tr></tbody></table></li></ul></blockquote></li></ol><h3 id="四、兼容性查询办法"><a href="#四、兼容性查询办法" class="headerlink" title="四、兼容性查询办法"></a>四、兼容性查询办法</h3><ol><li><p>不同浏览器的私有前缀</p><table><thead><tr><th>私有前缀</th><th>说明</th></tr></thead><tbody><tr><td>-moz-</td><td>火狐等使用 Mozilla 浏览器引擎的浏览器</td></tr><tr><td>-webkit-</td><td>Safari, 谷歌浏览器等使用 Webkit 引擎的浏览器</td></tr><tr><td>-o-</td><td>Opera 浏览器</td></tr><tr><td>-ms-</td><td>IE 浏览器 、Edge 浏览器</td></tr></tbody></table><blockquote><blockquote><p>对于私有属性的顺序要注意，标准写法要写到最后面，兼容性写法放在前面</p></blockquote></blockquote></li><li><p>兼容性查询</p><blockquote><p>查询不同 CSS 属性的兼容性，可以进入地址：<a href="https://caniuse.com/%E6%9F%A5%E8%AF%A2">https://caniuse.com/查询</a></p></blockquote></li></ol><h3 id="五、案例"><a href="#五、案例" class="headerlink" title="五、案例"></a>五、案例</h3><ol><li><p>Grid 网格布局（开发 360 图片展示效果）</p><blockquote><ul><li>grid-area</li><li>grid-column、grid-rows</li></ul></blockquote></li><li><p>小米商城</p><blockquote><ul><li>滑动菜单栏切换商品列表</li><li>在对应的菜单栏的写商品列表</li><li>利用position定位到菜单栏左侧</li><li>每一个商品列表的类名都可以一样，随列表内容而变化</li><li>商品栏宽度随商品数量扩大</li><li>网格布局：先列后行，设置一列六行，隐藏网格的列宽设置成所需列宽</li><li>每行行高为1份，自动生成，列宽固定</li></ul></blockquote></li></ol><blockquote><ul><li>图片与文字垂直对齐</li><li>给单元格设置弹性布局</li><li>利用<code>align-items:center;</code>实现垂直居中</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flex Grid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目开发必备基础知识</title>
      <link href="/2023/11/30/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/11/30/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="web前端项目开发规范和最佳实践"><a href="#web前端项目开发规范和最佳实践" class="headerlink" title="web前端项目开发规范和最佳实践"></a>web前端项目开发规范和最佳实践</h2><h3 id="一、CSS发展史与CSS模块划分"><a href="#一、CSS发展史与CSS模块划分" class="headerlink" title="一、CSS发展史与CSS模块划分"></a>一、CSS发展史与CSS模块划分</h3><h4 id="1-HTML的诞生"><a href="#1-HTML的诞生" class="headerlink" title="1. HTML的诞生"></a>1. HTML的诞生</h4><blockquote><p>1991年8月6日，万维网之父蒂姆·伯纳斯·李创建了人类有史以来的第一个网站(即：<a href="http://info.cern.ch),它没有样式,只有文字和图像两种./">http://info.cern.ch)，它没有样式，只有文字和图像两种。</a></p></blockquote><h4 id="2-css的诞生"><a href="#2-css的诞生" class="headerlink" title="2. css的诞生"></a>2. css的诞生</h4><blockquote><p>1994年哈肯·维姆·莱和伯特·波斯共同提出层叠样式表的概念</p><ul><li>css从此成为网页开发的标准之一，对于网页排版印刷、美感、亲和力有着深远的影响和意义</li><li>在这之后两年，W3C的css工作小组(即哈肯·维姆·莱团队)推出了css1.0规范以及后续的迭代版本</li></ul></blockquote><h4 id="3-css的版本"><a href="#3-css的版本" class="headerlink" title="3. css的版本"></a>3. css的版本</h4><blockquote><p>2015年左右，w3c的css工作小组为了能更好的维护和管理css的特性，该组织决定不再以css的版本号比如css1.0、css2.1等方式来管理css，而是将每个css功能特性拆分成独立的功能模块，并且以Level1、Level2、Level3等方式来管理<br>可以通过W3C官网或<a href="https://drafts.csswg.org/%E6%9F%A5%E7%9C%8B%E5%88%B0CSS%E6%A8%A1%E5%9D%97%E7%9A%84%E5%90%84%E7%A7%8DLevel%E7%89%88%E6%9C%AC">https://drafts.csswg.org/查看到CSS模块的各种Level版本</a></p></blockquote><h4 id="4-CSS的研究方向"><a href="#4-CSS的研究方向" class="headerlink" title="4. CSS的研究方向"></a>4. CSS的研究方向</h4><blockquote><p>大体上css的学习可以朝三个方向进行研究</p><ul><li>特效(动画、3D、渐变等)</li><li>工程化(sass、less、postcss等)</li><li>布局(flex、grid、响应式等)</li></ul></blockquote><h3 id="二、CSS文件划分及功能分类"><a href="#二、CSS文件划分及功能分类" class="headerlink" title="二、CSS文件划分及功能分类"></a>二、CSS文件划分及功能分类</h3><h4 id="1-CSS文件划分"><a href="#1-CSS文件划分" class="headerlink" title="1.CSS文件划分"></a>1.CSS文件划分</h4><blockquote><p>在中大型项目中，一般会对CSS进行文件划分，根据文件的性质和用途，大概分为</p><ul><li>公共型样式<ul><li>可命名为<code>global.css</code>或<code>common.css</code>等名字，主要包括网站通用样式编写。例如：重置默认样式reset、网站通用布局、通用模块和元件、通用响应式系统等</li></ul></li><li>特殊型样式<ul><li>特殊型样式主要是根据当前页面来决定的文件，只针对当前页面做出特殊处理的样式，例如只在首页中用到的样式可放置在<code>index.css</code>中，在登录页面中用到的样式可放置在<code>login.css</code>中</li></ul></li><li>皮肤型样式<ul><li>皮肤型样式是针对网站需要皮肤功能时，把颜色、背景等抽离出来放到文件中的形式，例如：<code>theme-orange.css</code></li></ul></li></ul></blockquote><h4 id="2-CSS功能分类"><a href="#2-CSS功能分类" class="headerlink" title="2. CSS功能分类"></a>2. CSS功能分类</h4><blockquote><p>文件中具体包括哪些常见功能呢？</p><ul><li>重置样式</li><li>网站通用布局</li><li>通用模块</li><li>通用元件</li><li>通用响应式系统</li></ul></blockquote><h4 id="3-重置样式"><a href="#3-重置样式" class="headerlink" title="3. 重置样式"></a>3. 重置样式</h4><blockquote><p>主要是去除默认样式和统一不同设备下的表现形态</p><ul><li>通常为<code>Reset CSS</code>和<code>Normalize CSS</code>代码的结合版本</li><li>我们将在接下来的项目开发中把二者结合成为了一个<code>reset.css</code>文件，并在项目中进行使用</li></ul></blockquote><h4 id="4-网站通用布局"><a href="#4-网站通用布局" class="headerlink" title="4. 网站通用布局"></a>4. 网站通用布局</h4><blockquote><p>主要指的是对网站中出现的大块结构进行排版</p><ul><li>例如：PC端中的菜单、内容的左右布局方案；移动端中的头部、列表、尾部的上中下布局方案</li></ul></blockquote><h4 id="5-通用模块"><a href="#5-通用模块" class="headerlink" title="5. 通用模块"></a>5. 通用模块</h4><blockquote><p>指的是网页中可以重复使用的较大整体，比如：</p><ul><li>导航</li><li>登录</li><li>注册</li><li>各种列表</li><li>评论</li><li>搜索等</li></ul></blockquote><h4 id="6-通用元件"><a href="#6-通用元件" class="headerlink" title="6. 通用元件"></a>6. 通用元件</h4><blockquote><p>指的是不可再分的较为小巧的个体，通常被重复使用与各种模块中，比如：</p><ul><li>按钮</li><li>输入框</li><li>loading</li><li>图标等</li></ul></blockquote><h4 id="7-通用响应式系统"><a href="#7-通用响应式系统" class="headerlink" title="7. 通用响应式系统"></a>7. 通用响应式系统</h4><blockquote><p>指的是在不同设备下要实现响应式布局，当满足了某个断点设定后调用的相应变化样式，比如：</p><ul><li>浮动添加</li><li>栅格生效</li><li>显示隐藏</li><li>版心宽度等</li></ul></blockquote><h3 id="三、标签默认样式及清除"><a href="#三、标签默认样式及清除" class="headerlink" title="三、标签默认样式及清除"></a>三、标签默认样式及清除</h3><h4 id="1-标签默认样式"><a href="#1-标签默认样式" class="headerlink" title="1. 标签默认样式"></a>1. 标签默认样式</h4><blockquote><p>一些HTML标签在浏览器中都会有默认样式</p><ul><li>开发时浏览器的默认样式可能会给我们带来多浏览器兼容性问题，影响开发效率，所以解决办法就是一开始就将浏览器的默认样式全部去掉，更准确说是通过重新定义标签样式覆盖浏览器的css默认属性</li><li>还有一种方式是用通配符选择器<code>*</code>，这是一种非常强大、最简单、最安全的方法，但是非常占用资源。</li><li>推荐以下3种Reset CSS学习<ul><li>雅虎 YUI Reset CSS</li><li>CSS Tools:Reset CSS<ul><li>通常在网页开发中，要去掉在这些影响尺寸和位置的默认样式及其他影响布局的默认值，可以参考它</li></ul></li><li>Normalize CSS<ul><li><code>Reset css</code>相对暴力，不管你有没有用，统统重置成一样的效果，而且影响的范围很大</li><li><code>Normalize css</code>比<code>Reset css</code>更加平和</li></ul></li></ul></li></ul><blockquote><p>创造<code>Normalize css</code> 有以下几个目的</p></blockquote><ul><li>保护有用的浏览器默认样式而不是完全去掉他们</li><li>一般化的样式：为大部分HTML元素提供</li><li>修复浏览器自身的bug并保证各浏览器的一致性</li><li>优化CSS可用行政：用一些小技巧</li><li>解释代码：用注释和详细的文档</li></ul></blockquote><h4 id="2-CSS重置样式最佳实践"><a href="#2-CSS重置样式最佳实践" class="headerlink" title="2. CSS重置样式最佳实践"></a>2. CSS重置样式最佳实践</h4><blockquote><p>在接下来的项目开发中，我们会采用<code>Normalize CSS</code>和<code>Reset CSS</code>结合代码，形成一个更加强大的方案。</p></blockquote><h3 id="四、CSS方法论"><a href="#四、CSS方法论" class="headerlink" title="四、CSS方法论"></a>四、CSS方法论</h3><h4 id="1-CSS方法论"><a href="#1-CSS方法论" class="headerlink" title="1. CSS方法论"></a>1. CSS方法论</h4><blockquote><ul><li>CSS方法论是一种面向CSS、由个人和组织设计、已被诸多项目检验且公认有效的最佳实践</li><li>这些方法论都会涉及结构化的命名约定，并且在阻止CSS时可提供相应的指南，从而提升代码的性能、可读性以及可维护性</li></ul></blockquote><h4 id="2-常见的CSS方法论"><a href="#2-常见的CSS方法论" class="headerlink" title="2. 常见的CSS方法论"></a>2. 常见的CSS方法论</h4><blockquote><ul><li>OOCSS</li><li>BEM</li><li>SMACSS</li><li>Atomic CSS</li></ul></blockquote><h5 id="OOCSS"><a href="#OOCSS" class="headerlink" title="OOCSS"></a>OOCSS</h5><blockquote><p>OOCSS(object-oriented css)是指向面对对象的CSS，由Nicole Sullivan在2009年提出，借鉴了面向对象编程的抽象思维</p><ul><li>其核心概念是采用模块化的实现方式，将CSS分解成可复用和继承的对象，也就是将关注点从页面转移到页面内的组件</li><li>包含两条核心原则：<ul><li>结构与皮肤分离，即不要将位置、尺寸等结构属性和字体、颜色等皮肤属性写在一个选择器中</li><li>内容与容器分离，即让对象的行为可预测，避免对位置的依赖，子元素即使离开了容器也应该能正确显示</li></ul></li><li>命名约定：<ul><li>在OOCSS中，类名既要能传递对象的用途，也要有通用性，例如mod、complex、pop等</li><li>如果将CSS类命名的太语义化，如<code>navigation-bar</code>,那么就会将其限制在导航栏，无法应用到网页的其他位置<br><strong>缺点</strong></li><li>虽然样式的粒度变小了，但同时会产生许多充满类的HTML元素</li><li>在避免特殊性冲突时，OOCSS选择的方案是放弃层叠，这样就无法最大程度地利用关系选择器的优势</li><li>为了让类能更通用，在命名时就得弱化语义</li></ul></li></ul></blockquote><h5 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h5><blockquote><p>国内很多大厂主要采用BEM+SMACSS这两种方法论的结合命名约定<br>BEM(block element modifier)是指块级元素修饰符，BEM分为三个部分：</p><ul><li>块是一个独立实体，最高级抽象，例如菜单、文本框等</li><li>元素是块的组成部分，被包含在块中，无法自成一体，例如菜单项、标题等</li><li>修饰符是块或元素的状态，可更改它们的外观或行为，例如高亮、选中等</li></ul></blockquote><blockquote><p><strong>要求</strong></p><ul><li>BEM中的块、元素和修饰符需要全部小写</li><li>名称中的单词用连字符<code>-</code>分隔</li><li>元素由双下划线<code>__</code>分隔</li><li>修饰符由双连字符<code>--</code>分隔</li><li>注意：块和元素都既不能是HTML元素名或ID，也不依赖其他块或元素</li></ul><pre><code>&lt;style&gt;  .form &#123;  &#125;  .form--theme-xmas &#123;  &#125;  .form__input &#123;  &#125;  .form__submit &#123;  &#125;  .form__submit--disabled &#123;  &#125;&lt;/style&gt;&lt;form class=&quot;form form--theme-xmas&quot;&gt;  &lt;input class=&quot;form__input&quot; type=&quot;text&quot; /&gt;  &lt;input class=&quot;form__submit form__submit--disabled&quot; type=&quot;submit&quot; /&gt;&lt;/form&gt;</code></pre><ul><li>在上面的代码中<ul><li><code>.form</code>是块</li><li><code>.form_input</code>和<code>.form_submit</code>是其元素</li><li><code>.form--theme-xmas</code>是其修饰符</li><li><code>.form__submit--disabled</code>是<code>.form__submit</code>的修饰符<blockquote><p>BEM的核心思想就是用这种命名约定来清晰的表达出类的含义以及其他类之间的关系</p></blockquote></li></ul></li></ul></blockquote><blockquote><p><strong>BEM的缺点</strong> </p><ul><li>BEM与OOCSS一样，也抛弃了层叠，因此也不能挖掘出关系选择器的潜力</li><li>CSS类名可能会比较长而且复杂</li><li>需要完善规则说明文档，否则HTML结构将难以阅读</li></ul></blockquote><h5 id="SMACSS"><a href="#SMACSS" class="headerlink" title="SMACSS"></a>SMACSS</h5><blockquote><p>SMACSS(scalable and modular architecture for css)是指可伸缩及模块化的CSS架构<br>由Jonathan Snook在2011年雅虎工作时提出，他在OOCSS和BEM的基础上添加了五种类别的组件的处理规则，具体如下：</p><ul><li>1、**基础(base)**是为HTML元素定义默认样式，可以包含属性、伪类等选择器</li><li>2、**布局(layout)**会将页面分为几部分，可作为高级容器包含一个或多个模块，例如左右分栏、栅格系统等</li><li>3、**模块(module)**又名对象或块，是可用的模块化部分，例如导航栏、产品列表等</li><li>4、**状态(state)**描述的是任一模块或布局在特定状态下的外观，例如隐藏、激活等</li><li>5、**主题(theme)**也就是换肤，描述了页面的外观，特克修改前面四个类别的样式，例如链接颜色、布局方式<blockquote><p>命名约定：推荐使用前缀来区分布局、模块、状态和主题，如下列</p></blockquote></li><li><code>l-</code>或<code>layout-</code>用作布局的前缀，例如：<code>.l-inline</code></li><li><code>m-</code>或模块自身的命名用作其前缀，例如<code>.m-profile</code>、<code>field</code></li><li><code>is-</code>用作状态的前缀，例如<code>.is-collapsed</code>、<code>.is-active</code></li><li><code>theme-</code>用作主题的前缀，例如：<code>.theme-a-background</code><blockquote><p>注意，由于<code>base</code>规则是直接作用于元素的，因此不需要前缀</p></blockquote></li></ul></blockquote><blockquote><p><strong>共享</strong><br>在实际开发中，不需要局限于某一CSS方法论，很多时候可以结合使用，共享模块化CSS的规则。例如遵循OOCSS的第一条分离原则，BEM的命名约定，以及SMACSS的分类前缀，具体如下所列：</p><ul><li>基础仍旧沿用SMACSS的规则，布局和模块使用SMACSS的前缀</li><li>子元素用双下划线(__)分隔，其状态前缀沿用<code>is-</code></li><li>修饰符也以<code>is-</code>为前缀，与模块组合时用双连字符(–)分隔</li><li>适当层叠，最好保持在一层<blockquote><p>任何软件设计都存在不完美的地方，CSS方法论也一样，比如：命名过长不易维护，HTML不够简洁等；<br>但它的优势也很明显，比如样式不容易冲突，尤其是复杂的样式结构</p></blockquote></li></ul></blockquote><h3 id="五、样式规范"><a href="#五、样式规范" class="headerlink" title="五、样式规范"></a>五、样式规范</h3><blockquote><ul><li>使用<strong>类选择器</strong>，放弃ID选择器：ID在一个页面的唯一性导致了如果以ID为选择器来写CSS，就无法重用。</li><li>命名应简约而不失语义：<strong>反对过长</strong>命名和<strong>没有语义</strong>的命名</li><li>相同语义的不同类命名：直接加数字或字母区分即可</li><li>防止污染和被污染：为了防止后代选择器污染，尽量采用<code>&gt;</code>方式，例如：<code>-m-nav&gt;li</code>，而不是<code>-m-nav li</code></li><li>最后一个值也以分号结尾：通常在大括号结束前的值可以省略分号，但是这样做会对修改、添加和维护工作带来不必要的失误和麻烦</li><li>省略值为0时的单位：为节省不必要的字节同时也方便阅读</li><li>根据属性的重要性按顺序书写：先显示定位布局类属性，后写盒模型等自身属性，最后是文本类及修饰类属性</li><li>CSS需要进行格式化和对齐处理：推荐vscode插件</li></ul></blockquote><h3 id="六、CSS命名规范"><a href="#六、CSS命名规范" class="headerlink" title="六、CSS命名规范"></a>六、CSS命名规范</h3><blockquote><ul><li>见css文件夹中的代码规范文档</li></ul></blockquote><h2 id="CSS还原UI设计"><a href="#CSS还原UI设计" class="headerlink" title="CSS还原UI设计"></a>CSS还原UI设计</h2><blockquote><p><strong>企业前端项目开发的真实流程</strong></p><ul><li>产品经理出原型图</li><li>交给UI设计师根据需求设计UI源文件</li><li>推送至墨刀&#x2F;蓝湖等协作设计开发平台</li><li>给到程序员开发布局网页</li></ul></blockquote><h3 id="一、长度单位与颜色分类"><a href="#一、长度单位与颜色分类" class="headerlink" title="一、长度单位与颜色分类"></a>一、长度单位与颜色分类</h3><h4 id="1-长度"><a href="#1-长度" class="headerlink" title="1. 长度"></a>1. 长度</h4><blockquote><p>CSS中使用的每个属性值都允许拥有一个或一组值</p><ul><li>CSS中有两种长度单位——绝对长度单位和相对长度单位</li></ul></blockquote><blockquote><p><strong>绝对长度单位</strong></p><ul><li>它们与其他任何东西都没有关系<table><thead><tr><th>单位</th><th>名称</th></tr></thead><tbody><tr><td>cm</td><td>厘米</td></tr><tr><td>mm</td><td>毫米</td></tr><tr><td>in</td><td>英寸</td></tr><tr><td>pt</td><td>点</td></tr><tr><td>px</td><td>像素</td></tr></tbody></table><blockquote><p>除px外，其他单位并不常用</p></blockquote></li></ul></blockquote><blockquote><p><strong>相对长度单位</strong></p><ul><li>相对长度单位相对于其他一些东西，比如父元素、视图端口大小</li><li>使用相对单位的好处是，经过一些仔细的规划，可以是文本或其他元素的大小与页面上的其他内容相对应<table><thead><tr><th>单位</th><th>名称</th></tr></thead><tbody><tr><td>em</td><td>在font-size中使用是相对于父元素的字体大小，在其他元素中使用是相对于自身字体的大小</td></tr><tr><td>ex</td><td>字符”x”的高度</td></tr><tr><td>ch</td><td>数字”0”的宽度</td></tr><tr><td>rem</td><td>根元素的字体大小</td></tr><tr><td>lh</td><td>元素的line-height</td></tr><tr><td>vw</td><td>视图宽度的1%</td></tr><tr><td>vh</td><td>视图高度的1%</td></tr><tr><td>vmin</td><td>视图较小尺寸的1%</td></tr><tr><td>vmax</td><td>试图大尺寸的1%</td></tr></tbody></table></li></ul></blockquote><h4 id="2-颜色"><a href="#2-颜色" class="headerlink" title="2. 颜色"></a>2. 颜色</h4><blockquote><ul><li>在css中，相同的颜色值可以在任何额地方使用</li><li>现代计算机的标准颜色系统是24位的，它允许通过不同的红绿蓝通道的组合显示大约1670万种不同的颜色</li></ul></blockquote><blockquote><p><strong>颜色关键词</strong></p><ul><li>颜色单词</li></ul></blockquote><blockquote><p><strong>RGB颜色</strong></p><ul><li>在CSS中，可以使用公式<code>rgb(red,green,blue)</code>将颜色指定为RGB值，每个参数定义到0到255之间的颜色强度</li><li>黑色:rgb(0,0,0)</li><li>白色:rgb(255,255,255)</li></ul></blockquote><blockquote><p><strong>RGBA值</strong></p><ul><li>RGBA颜色值是具有alpha通道的RGB颜色值的扩展，他指定了颜色的不透明度</li><li>RGBA颜色值指定为rgba(red,green,blue,alpha),alpha参数是结余0.0(完全透明)和1.0(完全不透明)之间的数字</li></ul></blockquote><blockquote><p><strong>HEX颜色</strong></p><ul><li>在CSS中，可以使用<code>#rrggbb</code>格式的十六进制指定颜色</li><li>其中rr、gg、bb是介于00和ff之间的十六进制值</li><li><code>#aabbcc</code>可以简写为<code>#abc</code></li></ul></blockquote><blockquote><p><strong>HSL颜色</strong></p><ul><li>在CSS中，可以使用色相、饱和度和明度来指定颜色，格式如<code>hsla(hue,saturation,lightness)</code></li><li>色相(hue)是色轮上从0到360的度数，0是红色，120是绿色，240是蓝色</li><li>饱和度(saturation)是一个百分比值，0%表示灰色阴影，100%是全色</li><li>亮度&#x2F;明度(lightness)也是百分比，0%是黑色，50%是既不明也不暗，100%是白色</li></ul></blockquote><h3 id="二、UI设计图的源文件种类"><a href="#二、UI设计图的源文件种类" class="headerlink" title="二、UI设计图的源文件种类"></a>二、UI设计图的源文件种类</h3><h4 id="1-什么是设计图源文件"><a href="#1-什么是设计图源文件" class="headerlink" title="1. 什么是设计图源文件"></a>1. 什么是设计图源文件</h4><blockquote><p>源文件是可以查看到图片所有的图层、通道、参考线、注解和颜色模式等信息，开发人员通过操作源文件，可以更加方便的控制图片，并快速的获取到图片信息 </p></blockquote><h4 id="2-常见的源文件"><a href="#2-常见的源文件" class="headerlink" title="2. 常见的源文件"></a>2. 常见的源文件</h4><blockquote><ul><li><code>.psd</code>格式源文件通过Photoshop工具制作</li><li><code>.sketch</code>格式源文件，通过<code>sketch</code>工具制作</li><li><code>.xd</code>格式源文件，通过XXD工具制作</li></ul></blockquote><h4 id="3-进行切图处理和信息获取的方式"><a href="#3-进行切图处理和信息获取的方式" class="headerlink" title="3. 进行切图处理和信息获取的方式"></a>3. 进行切图处理和信息获取的方式</h4><blockquote><p><strong>PS获取信息</strong></p><ul><li>打开PS–&gt;窗口–&gt;信息–&gt;通过查看面板获取信息</li><li>修改标尺单位：右击信息面板–&gt;打开面板选项设置<code>鼠标坐标</code>为像素</li><li>尺寸测量方式：<ul><li>矩形选框工具，按shift&#x2F;ctrl来扩大&#x2F;缩小所选中范围</li><li>移动工具：按住ctrl键鼠标触碰到需要量尺寸区尺寸的两个元素的边缘或者选中对应图层即可</li></ul></li><li>颜色值的获取<ul><li>吸管工具：吸取需要元素的颜色，点开拾色器&#x2F;前景色查看不同类型的颜色值</li></ul></li><li>文字相关属性的获取<ul><li>矩形选框工具：选中对应的文字图层–&gt;在字符面板查看即可<br><strong>PS切图</strong></li></ul></li><li>编辑–&gt;首选项–&gt;打开增效工具–&gt;勾选“启用生成器”</li><li>选择移动工具–&gt;点击需要切图的图片–&gt;<strong>修改图层的名字</strong>，并添加常见的<strong>图片后缀</strong>–&gt;按下回车键即可</li><li>在源文件根目录里自动生成了一个文件夹，里面就是所切图片</li><li>切2倍图：修改图层名称时，在名称前添加<code>200% 空格</code></li></ul></blockquote><blockquote><p><strong>蓝湖</strong></p><ul><li>登录蓝湖，下载photoshop插件，安装成功后启动PS–&gt;选择”窗口”–&gt;扩展功能–&gt;选择蓝湖即可</li><li>一般是设计师切图后，把源文件上传至蓝湖，开发者就能在蓝湖查看各种信息、下载素材</li></ul></blockquote><blockquote><p><strong>Pxcook</strong></p></blockquote><blockquote><p><strong>imgcook设计稿智能平台</strong></p><ul><li>网址：<a href="https://www.imgcook.com/">https://www.imgcook.com/</a>(opens new window)</li><li>目前此产品是阿里巴巴前端委员会智能化小组的服务化的内外落地产品</li><li>通过智能化技术一键生成可维护的前端代码</li><li>生成后的代码还是需要根据实际需求调整，在学习阶段可供参考</li></ul></blockquote><h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><blockquote><ul><li>蓝湖打开设计稿</li><li>准备图标库、字体文件夹、图片文件夹</li><li>基础文件：<ul><li>重置样式：global&#x2F;reset.css</li><li>基础样式：base.css</li><li>放样式的文件：index.css</li></ul></li><li>网页文件：index.html<ul><li>搭建网页框架</li><li>引入重置样式、基础样式、其他样式、字体文件</li></ul></li><li>自定义字体<ul><li>先把重置样式文件里设置默认字体的代码注释掉</li><li>在base.css文件里自定义字体,设置body样式<br>-使用@font-face引入字体文件</li></ul></li></ul><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span> &amp;#123<span class="token punctuation">;</span></span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*字体类型*/</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url()</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*引入字体文件*/</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意：ttf文件一定要加<code>format(&quot;ture&quot;)</code></p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS核心知识点（三）</title>
      <link href="/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="浮动、BFC规范、清除浮动的最佳实践"><a href="#浮动、BFC规范、清除浮动的最佳实践" class="headerlink" title="浮动、BFC规范、清除浮动的最佳实践"></a>浮动、BFC规范、清除浮动的最佳实践</h2><h3 id="一、实现CSS布局的几种策略"><a href="#一、实现CSS布局的几种策略" class="headerlink" title="一、实现CSS布局的几种策略"></a>一、实现CSS布局的几种策略</h3><blockquote><ul><li><strong>网页布局的本质是</strong>：用CSS来摆放盒子，把盒子摆放到页面对应位置。</li><li>CSS中提供了以下几种不同的CSS<strong>布局策略</strong>，来实现页面的布局<ul><li>正常布局流</li><li>浮动布局</li><li>定位布局</li><li>表格布局(<code>display:table;</code>)</li><li>响应式设计</li><li>弹性布局</li><li>网格布局</li><li>多列布局<blockquote><p>以上每种布局方式，都有自己的用途，也有各自的优缺点，相互辅助；通过理解各个布局方法的设计理念，我们能够找到构建理想网页需要的布局方案</p></blockquote></li></ul></li></ul></blockquote><h3 id="二、正常布局流"><a href="#二、正常布局流" class="headerlink" title="二、正常布局流"></a>二、正常布局流</h3><blockquote><p>概念：</p><ul><li>在不对页面进行任何布局控制时，浏览器默认的HTML布局方式</li><li>正常的布局流就是规定了。在默认情况下块级元素和内联元素的排版方式</li></ul></blockquote><ol><li><p>正常布局流中，块级元素的排列方式</p><blockquote><ul><li>块级盒子会从包含块的顶部开始，按序垂直排列</li><li>同级盒子间的垂直距离会由“margin”属性决定</li><li>相邻两个块级盒子之间的垂直距离会遵循外边距折叠原则</li></ul></blockquote></li><li><p>正常布局流中，内联元素排版方式</p><blockquote><ul><li>盒子会从包含块的顶部开始，按序水平排列</li><li>只有水平外边距(垂直方向无效)、边框和内边距会被保留</li><li>这些盒子可以以不同方式在垂直方向对齐：可以在底部对齐或顶部对齐，或者按文字底部进行对齐???</li></ul></blockquote></li></ol><blockquote><blockquote><p>注意：所有的HTML元素本质上都是一个盒子模型，并具有盒模型的结构和属性</p></blockquote></blockquote><h3 id="三、浮动布局"><a href="#三、浮动布局" class="headerlink" title="三、浮动布局"></a>三、浮动布局</h3><ol><li>浮动布局起源<blockquote><p><strong>最初</strong></p><ul><li>引入<code>float</code>属性是为了能让web开发人员实现简单的布局，包括在一列文本中浮动的图像，文字环绕在他的左边或右边</li><li>但web开发人员很快意识到，任何东西都可以浮动，而不仅仅是图像，所以浮动的使用范围扩大了</li></ul></blockquote></li><li>浮动是如何工作的<blockquote><ul><li>把一个元素”浮动”(float)起来，会改变该元素本身和在正常布局流(normal flow)中跟随它的其他元素的行为</li><li>这一元素会浮动到左侧或右侧，并且从正常布局流中移除，这时候其他的周围内容就会在这个被设置浮动的元素周围环绕</li><li><strong>简单理解</strong><br> 当元素添加浮动后，元素就会<strong>脱离文档流</strong>，按照指定方向(左右)发生移动，遇到父级边界或者相邻的浮动元素就会停下来，同时会影响到他后面元素的排版行为<ul><li>文档流：文档中可显示对象在排列时所占据的位置&#x2F;空间(在页面中占位置)</li><li>脱离文档流：元素相当于漂浮起来，不占据页面中的位置</li></ul></li></ul></blockquote></li><li>浮动的本质和要点<blockquote><ul><li>浮动的本质功能：用来实现并排</li><li>浮动使用要点：要浮动，并排的盒子<strong>都要</strong>设置浮动</li><li>父盒子要有足够的宽度，否则子盒子会掉下去</li></ul></blockquote></li><li>如何产生浮动<blockquote><ul><li>给需要浮动的元素添加float属性，对应值如下：<table><thead><tr><th>属性</th><th>值</th></tr></thead><tbody><tr><td><code>float</code></td><td>①<code>none</code>默认值，元素不浮动    ②<code>left</code>元素向左浮动    ③<code>right</code>元素向右浮动    ④<code>inherit</code>规定应该从父元素继承float属性的值(一般不用)</td></tr></tbody></table></li></ul></blockquote></li></ol><h3 id="四、元素浮动的特性"><a href="#四、元素浮动的特性" class="headerlink" title="四、元素浮动的特性"></a>四、元素浮动的特性</h3><ol><li>元素添加浮动后，脱离文档流<blockquote><p>同时会影响其后面的元素，但不影响它前面的元素</p></blockquote></li><li>如果父元素的宽度不够<blockquote><p>子元素在放不下的情况下会换行显示</p></blockquote></li><li>浮动的顺序贴靠特性<blockquote><p>子盒子会按顺序进行贴靠，如果没有足够空间，则会寻找前一个兄弟元素</p></blockquote></li><li>元素浮动后，具有行内块级元素特性<blockquote><ul><li>浮动的元素不再区分块级元素、行内元素，因为已经脱离了标准文档流</li><li>浮动后，任何标签都能设置宽高，但不独占一行</li></ul></blockquote></li><li>浮动的元素会造成父元素高度塌陷<blockquote><ul><li>当<strong>父元素没有设置高度</strong>、且子元素设置浮动时，父元素会形成高度塌陷</li><li>因为子元素浮动后不占据页面空间</li></ul></blockquote></li><li>浮动对文字的影响<blockquote><ul><li>会形成常见的文字环绕效果，其实现方式主要是将图片左&#x2F;右浮动</li><li>浮动后其相邻文字就会环绕图片排列</li><li>图片&#x2F;子盒子要放在文字前&#x2F;中间；若放在文字后，则没有环绕效果</li></ul></blockquote></li><li>使用浮动实现网页布局<blockquote><ul><li>垂直显示的盒子，不要设置浮动，只有并排显示的盒子才需要设置浮动</li><li>每个盒子都是独立存在的，盒子内部也可以继续使用浮动</li><li>注意点：<ul><li>先搭建好框架</li><li>使用语义化标签、进行注释</li><li>对最后一个盒子的处理<code>last-child</code></li><li>在实践中发现，ul的四个li，最靠近右边的是第一个,因为右浮动，从右往左排列</li></ul></li></ul></blockquote></li></ol><h3 id="五、BFC规范和浏览器差异"><a href="#五、BFC规范和浏览器差异" class="headerlink" title="五、BFC规范和浏览器差异"></a>五、BFC规范和浏览器差异</h3><blockquote><ul><li>BFC(Box Formatting Context，块级格式上下文)是页面上的一个隔离的独立容器</li><li>容器里的子元素和容器外的元素互不干扰</li><li>元素浮动的第五个特性：“父元不设高度，子元浮动，会造成父元素高度塌陷”，其原因就是这个盒子没有形成BFC</li></ul></blockquote><ol><li>创建BFC的方法<blockquote><ul><li>方法1：float的值不是<code>none</code><ul><li>缺点：该方法可以实现效果，但没有意义，不可能随意给盒子设置浮动</li></ul></li><li>方法2：position的值不是<code>static</code>或<code>relative</code><ul><li>缺点：该方法可以实现，但不靠谱</li></ul></li><li>方法3：display的值是<code>inline-block</code>、<code>flex</code>、<code>inline-flex</code><ul><li>缺点：该方法可以实现，但没有意义，因为不可能随意更改盒子类型</li></ul></li><li>方法4：<code>overflow:hidden;</code><ul><li>缺点：该方法可以实现，但不满足所有的场景，例如想要使溢出的元素显示的情况；</li><li>但这是非常好用的方法，比其他方式使用的更多</li></ul></li></ul></blockquote></li><li>BFC的其他作用<blockquote><ul><li>BFC可以取消盒子margin塌陷：<ul><li>方法1：既可以解决父子元素也可以解决兄弟元素的外边距塌陷</li><li>方法2：可以解决父子元素之间的塌陷，但兄弟元素无效</li><li>方法3：<code>inline-block</code>和<code>inline-flex</code>的效果和方法1一样，但转成行内块元素时，相邻的行内块元素会产生空白间隙。<code>flex</code>对兄弟元素无效，只能解决父子元素之间的塌陷</li><li>方法4：可以解决<strong>父子元素</strong>之间垂直方向外边距塌陷问题，但解决不了兄弟元素之间的塌陷</li></ul></li><li>BFC可以阻止元素被浮动元素覆盖</li></ul></blockquote></li><li>浏览器差异<blockquote><ul><li>IE6、7浏览器使用haslayout机制和BFC规范略有差异</li></ul></blockquote><ul><li>比如：IE浏览器可以使用zoom:1属性，让盒子拥有layout<blockquote><ul><li>如果要制作兼容到IE6、7的网页时，尽量让网页布局变得简单，内部有浮动的盒子要设置height属性，规范编程，就没有问题</li></ul></blockquote></li></ul></li></ol><h3 id="六、清除浮动"><a href="#六、清除浮动" class="headerlink" title="六、清除浮动"></a>六、清除浮动</h3><blockquote><ul><li>清除浮动：浮动一定要封闭到一个盒子中，否则就会对页面后续元素产生影响</li></ul></blockquote><ol><li>清除浮动方法1<blockquote><ul><li>给父盒子设置<code>clear:both;</code>属性</li><li><code>clear</code>表示清除浮动对自己的影响，<code>both</code>表示左右浮动全部清除</li><li>该方法不推荐。父盒子不会被撑起来。</li></ul></blockquote></li><li>清除浮动方法2<blockquote><ul><li>在两个父盒子之间”隔墙”隔一个携带<code>clear:both;</code>的盒子</li><li>可以清除浮动，但不能撑起盒子。而且新增一个div对页面有影响</li><li>不推荐</li></ul></blockquote></li><li>清除浮动方法3<blockquote><ul><li>原理是让内部有浮动的父盒子形成BFC，它就能关闭住内部的浮动</li><li>在创建BFC的四个方法中，最好的方法是<code>overflow:hidden;</code>，但这个方法有局限性</li><li>不能解决兄弟元素的外边距塌陷</li></ul></blockquote></li><li>清除浮动方法4——最佳方法<blockquote><ul><li>使用<code>::after</code>伪元素，给盒子添加最后一个子元素</li><li>给<code>::after</code>设置<code>clear:both</code></li><li>别忘了写<code>content=&quot;&quot;;</code></li><li><code>display:block</code>,伪元素默认是行内元素，所以要把它转化为块级元素。若不转换，则父元素不能被撑起来。</li><li>不能解决兄弟元素的外边距塌陷</li><li>强烈推荐</li></ul></blockquote></li></ol><h3 id="七、浮动实战应用"><a href="#七、浮动实战应用" class="headerlink" title="七、浮动实战应用"></a>七、浮动实战应用</h3><blockquote><ul><li>浮动的元素一般都会在其外边套一个标准流</li></ul></blockquote><ol><li>实现左右两列式布局</li><li>实现一行多列式布局</li><li>三列式布局，中间自适应<blockquote><ul><li>注意点：<ul><li>body里先写左右，再写中间。左右盒子各自浮动，再填充中间元素</li><li>用怪异盒模型保持内边距和边框不变</li><li>用外边距控制中间元素位置</li><li>用伪元素+clear:both来清除浮动</li></ul></li></ul></blockquote></li><li>多行多列式布局</li><li>实现整站结构布局</li><li>作业1：前端必会的三种CSS布局技术</li><li>作业2：酷狗音乐热门榜单</li><li>小米商城产品展示效果</li></ol><h2 id="CSS定位、层叠顺序、层叠上下文"><a href="#CSS定位、层叠顺序、层叠上下文" class="headerlink" title="CSS定位、层叠顺序、层叠上下文"></a>CSS定位、层叠顺序、层叠上下文</h2><blockquote><ul><li>CSS中利用position属性用于指定一个元素在文档中的定位方式。元素的定位方式有五种类型：<table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>static</code></td><td>没有定位，元素出现在正常的流中(默认值，可以忽略)</td></tr><tr><td><code>relative</code></td><td>相对定位，相对于自身正常位置进行位置的调整</td></tr><tr><td><code>absolute</code></td><td>绝对定位，相对于其最近的定位的父元素定位，进行位置的调整</td></tr><tr><td><code>fixed</code></td><td>固定定位，相对于浏览器窗口进行位置调整</td></tr><tr><td><code>sticky</code></td><td>粘性定位，是基于用户的滚动位置来定位</td></tr></tbody></table><blockquote><p><code>static</code>相当于元素没有加定位效果，如果元素加了定位，后面需要去掉，可以添加<code>position:static;</code>|</p></blockquote></li></ul></blockquote><h3 id="一、相对定位"><a href="#一、相对定位" class="headerlink" title="一、相对定位"></a>一、相对定位</h3><blockquote><p>盒子可以想对自己&#x3D;&#x3D;原来的位置&#x3D;&#x3D;进行调整，称之为相对定位</p><ul><li>给需要添加相对定位的元素，加上<code>position:relative;</code></li><li>元素的位置通过(位置描述词):<code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>属性进行位置调整</li><li>属性值可以是正数也可以是负数<table><thead><tr><th>定位的位置属性</th><th>描述</th></tr></thead><tbody><tr><td><code>top</code></td><td>向下移动</td></tr><tr><td><code>bottom</code></td><td>向上移动</td></tr><tr><td><code>left</code></td><td>向右移动</td></tr><tr><td><code>right</code></td><td>向左移动</td></tr><tr><td>值可以为负数</td><td>即往规定方向相反移动</td></tr></tbody></table></li></ul></blockquote><blockquote><p>相对定位的特点</p><ul><li>相对定位的元素，会在“老家留坑”，本质上仍然是在原来的位置，即:元素的初始位置占据的空间会被保留</li><li>只不过渲染在新的地方而已，渲染的图形可以比喻成影子，不会对页面其他元素产生任何影响</li></ul></blockquote><h3 id="二、相对定位应用场景"><a href="#二、相对定位应用场景" class="headerlink" title="二、相对定位应用场景"></a>二、相对定位应用场景</h3><blockquote><ul><li>用来微调元素自身的位置(案例1，2，3)</li><li>可以当做绝对定位的参考盒子(绝对定位中会讲到)</li><li>用来提升自身的层级</li></ul></blockquote><ol><li>鼠标滑动到元素，元素少量位置偏移动画 <img src="相对定位应用场景1.gif"></li><li>网站导航 <img src="相对定位场景2.png"></li><li>导航(鼠标滑动带过下划线)<blockquote><ul><li>鼠标滑过时，背景颜色和a标签的文字一起变化。其前提是a标签是&#x3D;&#x3D;块级元素&#x3D;&#x3D;</li><li>知识点：块级元素没有设置宽高时，将自动撑满父盒子，但并不是继承！！！ <img src="相对定位场景3.png"></li></ul></blockquote></li><li>水平进度条<blockquote><ul><li>右浮动实现元素从右往左开始排列成一行，第一个排在最后面，最后一个排在最左边</li><li>通过相对定位微调线条位置，使其与圆形在垂直方向对其</li><li>利用<code>~</code>后续兄弟选择器，来选择他后面的元素，修改样式 <img src="相对定位场景4.png"></li></ul></blockquote></li></ol><h3 id="三、绝对定位"><a href="#三、绝对定位" class="headerlink" title="三、绝对定位"></a>三、绝对定位</h3><blockquote><p>盒子可以在浏览器中以坐标进行位置精准描述，拥有自己的绝对位置</p><ul><li>给需要添加绝对定位的元素，加上<code>position:absolute;</code></li><li>元素的位置通过(位置描述词)：<code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>属性进行调整位置</li><li>属性值可以是正数或负数<table><thead><tr><th>定位的位置属性</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>到上边的距离</td></tr><tr><td>bottom</td><td>到下边的距离</td></tr><tr><td>left</td><td>到左边的距离</td></tr><tr><td>right</td><td>到右边的距离</td></tr></tbody></table></li></ul></blockquote><blockquote><p><strong>绝对定位元素8大特性：</strong></p><ol><li>绝对定位的元素，相对离自己最近的定位的父元素进行位置调整</li></ol><ul><li>若父元素未定位(没有<code>position: ;</code>)，则用祖先元素定位，绝对定位是相对于定位的祖先元素进行位置调整</li></ul><ol start="2"><li>如果没有定位的父元素，则相对body进行位置调整</li><li>元素完全脱离文档流，释放器原本所占据的空间</li></ol><ul><li>不会对其他元素造成任何干扰，而是对他们进行压盖</li><li>脱离文档流的方法：浮动、绝对定位、固定定位</li><li>使用绝对定位的元素将会是一种漂浮状态</li></ul><ol start="4"><li>元素的层级提升，会覆盖在其他元素上</li><li>行内元素加上定位后，会具有行内块元素特性，支持宽高设置</li><li><code>margin:auto;</code>水平居中失效，因为它变成了行内块元素</li><li>定位元素未设置宽高情况下，同时设置top和bottom会改变元素高，同时设置left、right会改变元素宽</li><li>在元素设置了宽高情况下，同时设置top与bottom，会以top值为主，bottom不生效；同时设置left与right，则以left为主，right不生效</li></ol><ul><li>top &gt; bottom,left &gt; right</li></ul></blockquote><blockquote><p><strong>使盒子水平、垂直居中</strong></p><ol><li>方法1：</li></ol><ul><li>垂直居中：top&#x3D; [父盒子高度-子盒占位高(content+padding+border+margin)]&#x2F;2</li><li>水平居中：left&#x3D;[父盒子宽度-子盒占位宽(content+padding+border+margin)]&#x2F;2</li></ul><ol start="2"><li>方法2：</li></ol><ul><li>垂直居中：top:50%，margin-top:<code>-</code>自己高度的一半</li><li>水平居中：left:50%,margin-left:<code>-</code>自己宽度的一半</li><li>记得用负号</li></ul></blockquote><blockquote><p><strong>应用场景</strong></p><ul><li>绝对定位用来制作<strong>压盖、遮罩</strong>效果</li><li>结合CSS精灵使用</li><li>结合JS实现动画</li><li>绝对定位应用非常多，灵活度也很高，靠经验积累</li></ul></blockquote><ol><li>绝对定位实现黑色半透明遮罩层<blockquote><p>注意：</p><ul><li>伪元素+.hover的写法：<code>.box:hover::after</code>，中间不用空格</li></ul></blockquote></li><li>绝对定位实现带三角的会话框<blockquote><p>注意：</p><ul><li>用<code>border-radius</code>使背景图片&#x2F;图片变成圆形</li></ul></blockquote></li></ol><h3 id="四、固定定位"><a href="#四、固定定位" class="headerlink" title="四、固定定位"></a>四、固定定位</h3><blockquote><p><strong>介绍</strong></p><ul><li>给需要添加固定定位的元素加上position:fixed;</li><li>元素的位置通过位置描述词：left、top、right、bottom属性进行位置调整</li><li>属性值可以是正数或负数</li><li>固定定位只能以页面为参考点，并没有绝对定位的参考点</li><li>固定定位脱离标准文档流</li><li>除了其位置是相对于浏览器窗口而言以外，其他与绝对定位的特性一致</li></ul></blockquote><blockquote><p><strong>应用场景</strong></p><blockquote><p>不管浏览器的滚动条如何滚动，元素始终相对于&#x3D;&#x3D;浏览器窗口&#x3D;&#x3D;的位置不变</p></blockquote><ol><li>固定定位实现返回顶部</li><li>常见的登录弹窗效果 我的疑问：</li></ol><ul><li>点击登录怎么跳出登录框？a标签的href是否可以链接它？<ul><li>目前学到的东西还做不到</li></ul></li><li>点击登录框的取消，怎么返回原页面<ul><li>目前学到的东西还做不到</li></ul></li><li>mask的尺寸问题，怎么全页面遮罩？绝对定位top&#x3D;0,left&#x3D;0？<ul><li>固定定位，四个方向距离都&#x3D;0</li></ul></li><li>登录框怎么垂直、水平居中在页面上，不论界面怎么缩放。<ul><li>固定定位</li></ul></li></ul><pre><code>position:fixed;top:50%left:50%transform:translate(-50%,-50%)</code></pre><ol start="3"><li>左右固定，中间自适应</li></ol></blockquote><h3 id="五、粘性定位"><a href="#五、粘性定位" class="headerlink" title="五、粘性定位"></a>五、粘性定位</h3><blockquote><blockquote><p>它的诞生就是为了实现字母排序显示效果(应用场景2)<br><strong>粘性定位解读：</strong></p></blockquote><ul><li>给需要的添加粘性定位的元素，加上position:sticky;</li><li>粘性定位可以看做是相对定位与固定定位的混合产物(这里的固定定位，并不是上面第四点的position:fixed;只是具有相似点)</li><li>当滚动高度小于元素所在位置时，元素以&#x3D;&#x3D;相对&#x3D;&#x3D;定位呈现</li><li>当滚动高度大于元素所在位置时，元素以&#x3D;&#x3D;固定&#x3D;&#x3D;定位呈现</li><li>当滚动高度大于(元素的父元素底部与浏览器高)时，元素相对于父元素定位，一起移走</li><li>粘性定位相对离他最近的一个拥有“滚动机制”的祖先元素(当该祖先的overflow是hidden、scroll、auto、overplay时)定位&#x3D;&#x3D;或者&#x3D;&#x3D;直接块级父元素定位<blockquote><p>注意：</p></blockquote></li><li>当body为最近”滚动机制”的祖先，此时要看到元素相对浏览器固定效果，元素的&#x3D;&#x3D;直接父元素&#x3D;&#x3D;高度一定要大于元素本身</li><li>当元素的父级拥有”滚动机制”，若有滚动条，则元素固定在父级元素的最顶部</li></ul></blockquote><ol><li>当body为最近滚动机制的祖先<blockquote><ul><li>使用粘性定位的元素，其父元素高度一定要大于它自身的高度</li><li>使用粘性定位的元素，其父元素高度一定要大于它自身的高度</li><li>当滚动高度小于元素所在位置时，该元素随滚动条一起移动，但相对位置不变</li><li>当元素所在位置&lt;滚动高度&lt;其父元素的底部，该元素固定在顶部，与body的距离&#x3D;设置的position值</li><li>当元素所在位置大于其父元素底部时，该元素底部与父元素底部重合后，一起移走</li></ul></blockquote></li><li>当父元素拥有滚动机制<blockquote><ul><li>父盒子具有overflow，且父盒子高度比它大</li><li>当滚动body的滚动条时，该盒子会整体随页面滑动</li><li>当滚动高度小于元素所在位置时，该元素随滚动条一起移动，但相对位置不变</li><li>当元素所在位置&lt;滚动高度&lt;其父元素的底部，该元素固定在顶部，与body的距离&#x3D;设置的position值</li><li>由于父盒子高度一定小于子元素总高度(不然不会出现滚动条)，所以元素所在位置不会大于其父元素底部</li></ul></blockquote></li></ol><blockquote><p><strong>粘性定位应用场景</strong></p><ol><li>头部和左侧吸顶盒效果</li></ol><ul><li>我自己做的存在的问题<ul><li>左边侧栏无法实现效果</li><li>右侧盒子的书写方式可以更简洁，用序号选择器</li></ul></li><li>看视频后的解决方式<ul><li>左右侧栏用一个盒子包裹起来，左右浮动</li><li>一定要消除浮动，不然父盒子高度塌陷就实现不了粘性定位</li><li>给父盒子加上外边距以保持与第二个盒子之间的距离</li><li>给右侧栏加:nth-child()控制颜色,偶数2n,奇数2n-1</li></ul></li></ul><ol start="2"><li>字母排序显示效果</li></ol><ul><li>注意：用定义列表dl dt dd</li></ul><ol start="3"><li>表格首行冻结</li></ol><ul><li>注意：<ul><li>使表格贴合父盒子：width: 100%;</li><li>将表格边框合并成单边框：border-collapse: collapse;</li></ul></li></ul></blockquote><h3 id="六、定位的总结"><a href="#六、定位的总结" class="headerlink" title="六、定位的总结"></a>六、定位的总结</h3><blockquote><table><thead><tr><th>定位类型</th><th>描述</th><th>应用场景</th></tr></thead><tbody><tr><td>相对定位relative</td><td>相对自身原来的位置占位，站着原来的位置</td><td>1.微调元素的位置，但还占据着原来的空间 2.只想提升元素的层级，但还是站着原来的空间</td></tr><tr><td>绝对定位absolute</td><td>相对离自己最近的定位的父元素定位，原来的位置被释放，相当于悬浮在页面中，会覆盖在其他元素的上面显示</td><td>1.一个元素想覆盖在另一个元素上 2.配合JS来实现动画效果</td></tr><tr><td>固定定位fixed</td><td>相对浏览器窗口进行定位</td><td>你想让一个元素相对浏览器的位置一直不动</td></tr><tr><td>粘性定位</td><td>相对离自己最近的拥有滚动机制的父元素定位，或，直接父元素定位</td><td>吸附效果、冻结效果</td></tr></tbody></table></blockquote><h3 id="七、z-index设置定位元素层叠顺序"><a href="#七、z-index设置定位元素层叠顺序" class="headerlink" title="七、z-index设置定位元素层叠顺序"></a>七、z-index设置定位元素层叠顺序</h3><blockquote><blockquote><p>定位的元素脱离了正常文档流，它相当于漂浮在文档上面。那如果有很多元素都用了定位，那如何确定这些元素的层叠顺序？&gt;&gt;z-index就是用来指定定位元素的堆叠顺序</p></blockquote></blockquote><blockquote><p>同一层叠上下文中z-index值的特性</p><ul><li>默认值是0</li><li>值可正可负</li><li>z-index值相同的元素，写在后面的会覆盖前面的</li><li>值越大，元素越在上面显示</li><li>只针对定位元素有效，对其他元素无效</li></ul></blockquote><h3 id="八、CSS中的层叠上下文"><a href="#八、CSS中的层叠上下文" class="headerlink" title="八、CSS中的层叠上下文"></a>八、CSS中的层叠上下文</h3><ol><li>什么是层叠上下文<blockquote><ul><li>它是一个HTML中的三维概念</li><li>在css2.1规范中有明确强调，每个css盒模型都是处在一个三维空间里面，他们分别处在平面的X轴、Y轴以及表示层叠的Z轴<img src="层叠上下文.png">>注意： </li><li>但并不是所有的盒子都会在Z轴发生层叠，默认情况下，HTML元素使沿XY轴平铺，元素默认从上到下、从左往右依次排列 </li><li>一旦发生堆叠，就能感受到Z轴的存在。不管有无层叠，Z轴都存在</li></ul></blockquote></li></ol><blockquote><p><strong>具象化解释：</strong></p><ul><li>body这个html根元素，天生具有上下文。它是爷爷，其他所有元素都同属于&#96;body&#96;&#96;这个层叠上下文。</li><li>在body中可以放普通元素，还可以放创建了层叠上下文的元素,就像爷爷可以有很多儿子。每个儿子，各自等级不同、先后顺序也不同；创建了层叠上下文的元素就像当了官，它比普通元素等级更高，而且官越高等级越高。</li><li>每个儿子还会生更多孩子，也就是爷爷的孙子。子凭父贵，父亲等级越高，它在孙子辈里等级就越高。</li><li>这里的爷爷、儿子、孙子等辈分是指不同的层叠上下文。与父盒子盒&#x2F;父元子元有区别</li></ul></blockquote><blockquote><ul><li>问题1：怎么当官？(怎么提高&#x2F;降低元素的等级) 原理<ul><li>在同一层叠上下文中，创建了层叠上下文的**&gt;**普通元素</li><li>在同一层叠上下文中，z-index值越高的官越大，未设置z-index的定位元素默认z-index&#x3D;0</li><li>在同一层叠上下文中，相同等级的元素，写在后面的比写在前面的大，后面的覆盖前面的 </li><li>方法<ul><li><ol><li>后出生(写在后面)</li></ol></li><li><ol start="2"><li>当官(创建层叠上下文)</li></ol></li><li><ol start="3"><li>提高官职(提高z-index的值)</li></ol></li></ul></li></ul></li></ul></blockquote><ol><li>创建层叠上下文的方法<blockquote><ul><li>天生的：body(又称为根层叠上下文)<ul><li>我们在写body中的HTML时，默认就是处在根层叠上下文中</li></ul></li><li>定位元素的传统层叠上下文(当官老办法，但限制于定位元素)<ul><li><code>position:relative/absolute</code>的定位元素，当其z-index的值不是auto的时候就会创建层叠上下文</li><li><code>position:fixed/sticky</code>的定位元素直接创建，不用管z-index的值</li></ul></li><li>CSS3时代的新方法(新时代新办法)<ul><li>z-index不是auto的flex项(父元素display:flex|&gt;   inline-flex)会创建层叠上下文</li><li>元素的opacity值不是1</li><li>元素的transform值不是none</li><li>元素的mix-blend-mode的值不是normal</li><li>元素filter值不是none</li><li>元素的isolation值是isolate</li><li>will-change指定的属性值为上面的任意一个</li><li>元素的-webkit-overflow-scrollin设为touch</li></ul></li></ul></blockquote></li></ol><blockquote><ul><li>问题2：普通元素分三六九等吗？怎么分？(普通元素的层级) <img src="层叠顺序.png">- ！！！首先在同一层叠上下文中，背景和边框<z-index=负数<普通元素<z-index=0的定位元素<z-index值为正数的定位元素- 普通元素： block块级元素==<==float浮动盒子==<==inline或line-block盒子>在爷爷面前是这套规矩，在儿子辈、孙子辈等每一个小社会也遵循这套规矩，只新增**子凭父贵**这一条规矩</li></ul></blockquote><ol><li>如何确定两个元素的层叠顺序<blockquote><ul><li>先确定它们父亲是谁(确定他们所在的层叠上下文)</li><li>如果是同一父亲，那就直接比较元素类型、先后顺序、z-index的值</li><li>如果不是同一父亲，那就比较父亲之间的官级大小，子凭父贵</li></ul></blockquote></li></ol><h3 id="九、阿里图标库-icon-font"><a href="#九、阿里图标库-icon-font" class="headerlink" title="九、阿里图标库-icon-font"></a>九、阿里图标库-icon-font</h3><blockquote><p>可以下载各种样式的图标 使用方法</p><ul><li>把每个图标直接下载到本地</li><li>加入购物车，添加至项目中下载压缩包(压缩包里会有使用方法)<ul><li>Unicode引用：<ul><li>把第一步中的url改成自己电脑的相对路径</li><li>在第二步复制的代码中.iconfont中修改颜色大小</li><li>在第三步的内容中填写自己想要的图标编码</li></ul></li><li>Font class引用：<ul><li>把第一步中的href地址改成自己电脑里的相对路径</li><li>修改第二步的类名，根据图标下的名字&#x2F;看iconfon.css</li><li>修改图标颜色、大小：首先这些已经设置过了，若要修改则需提高优先级</li></ul></li><li>symbol引用</li></ul></li></ul></blockquote><h3 id="十、综合实践"><a href="#十、综合实践" class="headerlink" title="十、综合实践"></a>十、综合实践</h3><ol><li>酷狗音乐精选歌单效果<blockquote><ul><li>a标签包裹全部元素</li><li>遮罩要放在最上面，position+::after就可以实现</li></ul></blockquote></li><li>小米商城右侧悬浮菜单</li><li>带左右按钮的自动轮播图效果布局</li><li>CSS实现二级导航下拉菜单<blockquote><ul><li>下拉菜单：用绝对定位</li><li>下拉菜单和导航栏的居中对齐：left:50%,margin-left:自身宽度的一半</li><li>鼠标放置效果：给导航栏的li设置:hover</li></ul></blockquote></li><li>CSS时间轴效果布局<blockquote><ul><li>时间轴布局重要！！！</li><li>限制宽度，利用左右浮动的盒子，设置左右边框样式来绘制时间轴</li><li>双引号样式：字体：Arial</li></ul></blockquote></li></ol><h2 id="margin负值的最佳实践"><a href="#margin负值的最佳实践" class="headerlink" title="margin负值的最佳实践"></a>margin负值的最佳实践</h2><h3 id="一、margin负值特性"><a href="#一、margin负值特性" class="headerlink" title="一、margin负值特性"></a>一、margin负值特性</h3><ul><li>margin-left设置负值时，元素自身向左移动，后面的元素也向左移动</li><li>margin-right设置负值时，自身不受影响，右边元素向左移动</li><li>margin-top设置负值时，元素自身向上移动，下面的元素也向上移</li><li>margin-bottom设置负值时，自身不受影响，下方元素向上移动<blockquote><p>right和bottom设置负值时，就像是在页面上减小了占位，后面的元素随之补上，但实际上占位并没有变</p></blockquote></li></ul><h3 id="二、margin塌陷时合并规则"><a href="#二、margin塌陷时合并规则" class="headerlink" title="二、margin塌陷时合并规则"></a>二、margin塌陷时合并规则</h3><ul><li>&#x3D;&#x3D;口诀&#x3D;&#x3D;：符号相同时，看绝对值，听老大的；符号不同时，相加减</li></ul><blockquote><p>介绍</p></blockquote><ul><li>margin重叠也叫塌陷、合并、床头</li><li>只针对垂直方向，不针对水平方向<br><strong>分两种情况</strong><ul><li>兄弟元素之间：上下外边距重叠</li><li>父子元素之间：上下外边距合并(父元未设置内边距和边框时)</li></ul></li><li>应用场景和最佳实践</li></ul><ol><li>等高布局-左右布局：不管做左边盒子中内容多少，其高度都会随右边的粉色盒子变高</li></ol><ul><li>给左边盒子，用&#x3D;&#x3D;正值&#x3D;&#x3D;pdding-bottom增加盒子高度，并且加相同值的&#x3D;&#x3D;负值&#x3D;&#x3D;的margin-bottom抵消内边距的占位</li><li>给父盒子加overflow-hidden</li></ul><ol start="2"><li>一行多列网格布局</li></ol><ul><li>margin-left:-1px;使边框重叠在一起</li></ul><ol start="3"><li>头像叠加效果</li></ol><ul><li>先让每个子盒向左移动负外边距</li><li>然后单独修改第一个盒子的左外边距</li></ul><ol start="4"><li>元素水平垂直居中</li></ol><ul><li>先利用绝对定位使子盒子移动父盒子宽高的一半</li><li>top:50%、left:50%</li><li>再利用负外边距使子盒反向移动自身宽高的一半</li><li>一定给父盒子加相对定位</li></ul><ol start="5"><li>圣杯布局</li></ol><h2 id="圆角、阴影、文本图像处理、CSS函数"><a href="#圆角、阴影、文本图像处理、CSS函数" class="headerlink" title="圆角、阴影、文本图像处理、CSS函数"></a>圆角、阴影、文本图像处理、CSS函数</h2><h3 id="一、圆角"><a href="#一、圆角" class="headerlink" title="一、圆角"></a>一、圆角</h3><ol><li>简介</li></ol><ul><li><p>border-radius用来设置元素的(4个方向)外边框1&#x2F;4圆角效果 </p><table><thead><tr><th>圆角类型</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>圆角边框</td><td>当使用一个半径时，确定一个圆，表示四个不同方向上边框圆角的半径大小</td><td>border-radius:50px;</td></tr><tr><td>椭圆边框</td><td>当使用两个半径时，确定一个椭圆；两个半径之间用&#x3D;&#x3D;反斜杠&#x3D;&#x3D;&#x2F;分隔，第一个值是水平半径，第二个值是垂直半径</td><td>border-radius:50px&#x2F;30px;</td></tr></tbody></table></li><li><p>圆角效果：是从边框四个角出发，根据半径得到圆心，与四条边相交，得到的1&#x2F;4圆角</p></li></ul><ol><li><p>圆的4种不同值写法：顺时针方向</p><table><thead><tr><th>属性值</th><th>举例</th><th>说明</th></tr></thead><tbody><tr><td>单值写法</td><td>border-radius:50px;</td><td>上右下左四个方向的圆角半径</td></tr><tr><td>双值写法</td><td>border-radius:30px 40px;</td><td>斜对角；第一个值：左上角和右下角；第二个值：右上角和左下角</td></tr><tr><td>三值写法</td><td>border-radius:30px 50px 80px;</td><td>分别表示：左上角，右上角和左下角，右下角；</td></tr><tr><td>四值写法</td><td>border:10px 20px 30px 40px;</td><td>分别表示：左上角，右上角，右下角，左下角</td></tr></tbody></table></li><li><p>椭圆的4种不同值的写法</p><table><thead><tr><th>属性值</th><th>举例</th><th>说明</th></tr></thead><tbody><tr><td>单值写法</td><td>border-radius:50px&#x2F;30px;</td><td>50px表示四个不同方向椭圆的水平半径，30px表示四个不同方向椭圆垂直半径</td></tr><tr><td>双值写法</td><td>border-radius:10px 20px&#x2F;30px 50px;</td><td>斜对角；左上角和右下角：水平半径10px，垂直半径30px；右上角和左下角：水平半径30px，垂直半径50px</td></tr><tr><td>三值写法</td><td>border-radius:30px 50px 60px&#x2F;20px 30px 50px;</td><td>分别表示：左上角30px&#x2F;20px，右上角和左下角50px&#x2F;30px，右下角60px&#x2F;50px；</td></tr><tr><td>四值写法</td><td>border:10px 20px 30px 40px&#x2F;40px 30px 20px 10px;</td><td>分别表示：左上角10px&#x2F;40px，右上角20px&#x2F;30px，右下角30px&#x2F;20px，左下角40px&#x2F;10px</td></tr></tbody></table></li><li><p>百分比表示法</p></li></ol><ul><li>百分比是相对于当前元素的&#x3D;&#x3D;可视宽高&#x3D;&#x3D;而言的</li><li>水平半径相当于元素的可视宽而言，水平半径&#x3D;(width+padding+border)*百分比</li><li>垂直半径相当于元素的可视高而言，垂直半径&#x3D;(height+padding+border)*百分比</li></ul><ol start="4"><li>单独设置四个方向圆角-小属性</li></ol><ul><li>此时，写一个值表示圆，写两个值表示椭圆，&#x3D;&#x3D;并且椭圆&#x3D;&#x3D;的两个值不需要用反斜杠分隔</li><li>先上下后左右</li><li>主要是用来层叠大属性的 <table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>border-top-left-radius</td><td>左上角</td></tr><tr><td>border-top-right-radius</td><td>右上角</td></tr><tr><td>border-bottom-left-radius</td><td>左下角</td></tr><tr><td>border-bottom-right-radius</td><td>右下角</td></tr></tbody></table></li></ul><pre><code>左上角椭圆：border-top-left-radius:30px 40px;右下角圆：border-bottom-right-radius:30px;</code></pre><h3 id="二、盒子阴影"><a href="#二、盒子阴影" class="headerlink" title="二、盒子阴影"></a>二、盒子阴影</h3><blockquote><p>box-shadow给盒子添加阴影效果，阴影是<strong>不占空间</strong>的</p></blockquote><ul><li>写法：<code>box-shadow:[inset] X偏移 Y偏移 模糊半径 [扩散半径] 颜色;</code>(右和上为正值方向)</li><li><code>[]</code>：表示这个值可以省略不写</li><li>inset:表示内阴影，当需要设置内阴影时，才添加</li><li>X偏移:阴影在x轴(水平)方向偏移量；正值表向右偏移，负值表向左偏移</li><li>Y偏移:阴影在Y轴(垂直)方向偏移量；正值表向上偏移，负值表向下偏移</li><li>模糊半径：值只能大于等于0，表示阴影的模糊半径</li><li>扩散半径：取正值表示阴影扩大，取负值表示阴影收缩。默认为0，此时阴影与元素同样大</li><li>颜色表示阴影的颜色</li></ul><ol><li>简单阴影</li></ol><ul><li><code>box-shadow:x偏移 y偏移 模糊量 颜色；</code></li></ul><ol start="2"><li>阴影扩展</li></ol><ul><li><code>box-shadow:x偏移 y偏移 模糊量 扩散半径 颜色；</code></li></ul><ol start="3"><li>内阴影</li></ol><ul><li><code>box-shadow:inset X偏移 Y偏移 模糊半径 扩散半径 颜色;</code></li></ul><ol start="4"><li>多个阴影</li></ol><ul><li>如果一个盒子有多个阴影，则每个阴影之间用<code>,</code>分隔</li><li>当阴影个数<code>&gt;1</code>时，阴影应用顺序为从前往后(z轴)，第一个指定阴影在最顶部显示</li><li>内阴影不管写在哪个位置，都会在外阴影上面</li></ul><ol start="5"><li>去掉阴影</li></ol><ul><li><code>box-shadow:none;</code></li></ul><ol start="6"><li>实战案例-纸张效果</li></ol><h3 id="三、文本阴影"><a href="#三、文本阴影" class="headerlink" title="三、文本阴影"></a>三、文本阴影</h3><ul><li><code>text-shadow</code>用来为文字添加阴影</li><li><code>text-shadow:X偏移 Y偏移 模糊半径 颜色;</code></li><li>多个阴影之间用逗号分隔</li><li>当阴影个数<code>&gt;1</code>时，阴影应用顺序从前到后，第一个指定阴影在最顶部显示</li></ul><h3 id="四、文本溢出显示省略号"><a href="#四、文本溢出显示省略号" class="headerlink" title="四、文本溢出显示省略号"></a>四、文本溢出显示省略号</h3><ol><li>单行文本溢出显示省略号</li></ol><ul><li>写法：</li></ul><pre><code>&lt;!-- 文字不换行 --&gt;white-space:nowrap;&lt;!-- 超出显示省略号 --&gt;text-overflow:ellipsis;&lt;!-- 超出部分隐藏 --&gt;overflow:hidden;</code></pre><ol start="2"><li>多行文本溢出显示省略号</li></ol><pre><code>&lt;!-- 超出部分隐藏 --&gt;overflow:hidden;&lt;!-- 超出显示省略号 --&gt;text-overflow:ellipsis;&lt;!-- 对象作为弹性盒子模型显示 --&gt;display:-webkit-box;&lt;!-- 快容器中的内容限制为指定行数 --&gt;-webkit-line-clamp:2;&lt;!-- 弹性盒子对象的子元素排列方式为竖排 --&gt;-webkit-box-orient:vertical;</code></pre><blockquote><p>注意：只有当元素的高&#x3D;<code>line-height</code>大小*<code>-webkit-line-clamp</code>时，才能显示出正确的效果</p></blockquote><ul><li>所以，一定要写行高，盒子高度根据行高和指定显示行数来设置，例如想让行高为25px的两行文字显示，则盒子高度为50px。</li></ul><h3 id="五、元素不透明度"><a href="#五、元素不透明度" class="headerlink" title="五、元素不透明度"></a>五、元素不透明度</h3><ul><li><p><code>opacity</code>指定了一个元素的不透明度</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>元素完全透明(即元素不可见)</td></tr><tr><td>0.0~1.0之间</td><td>元素半透明(元素背后的背景可见)</td></tr><tr><td>1</td><td>元素完全不透明(元素后面的背景不可见)</td></tr></tbody></table></li><li><p>如果超出0.0~1.0的范围，也会有效，但是会被解析为在取值范围内&#x3D;&#x3D;最靠近&#x3D;&#x3D;他的值|</p></li><li><p>可以用<code>opacity:0</code>隐藏一个元素，因为opacity会让这个元素及其子元素一起透明。</p></li><li><p>当<code>opacity</code>的属性值不为1时，元素会创建自己的层叠上下文</p></li></ul><blockquote><p>对比学习</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>visibility:hidden</code></td><td>隐藏元素，但元素还占着原有的空间，在DOM树中</td></tr><tr><td><code>display:none</code></td><td>元素隐藏，不站着原来的空间，不在DOM树中</td></tr><tr><td><code>background-color:rgba(0,0,0,0.1)</code></td><td>仅背景颜色透明，并不影响元素中的内容</td></tr><tr><td><code>opacity:0;</code></td><td>元素透明，连同其内容和子元素一起透明掉</td></tr><tr><td><code>overflow:hidden</code></td><td>内容超出部分隐藏，影响的是子元素</td></tr></tbody></table></blockquote><h3 id="六、filter滤镜-图片模糊"><a href="#六、filter滤镜-图片模糊" class="headerlink" title="六、filter滤镜-图片模糊"></a>六、filter滤镜-图片模糊</h3><blockquote><p><code>filter:blur()</code>函数用于将高斯模糊效果应用于元素(图像)</p></blockquote><ul><li>单位是px</li><li>可以利用<code>filter:blur</code>与<code>background-size</code>的结合来实现背景模糊效果<ul><li>将背景放大到150%，然后模糊。参考艾编程官网老师们的简介</li></ul></li></ul><h3 id="七、object-fit-图片裁剪"><a href="#七、object-fit-图片裁剪" class="headerlink" title="七、object-fit 图片裁剪"></a>七、object-fit 图片裁剪</h3><ul><li>指定&#x3D;&#x3D;可替换元素&#x3D;&#x3D;的内容应该如何适应到其使用的高度和宽度确定的框</li><li>典型的可替换元素包括：img、video、iframe、embed</li><li>这个效果类似于<code>background-size</code><ul><li>但<code>object-fit</code> 在对齐时，是从元素框中间向两边的方式来填充</li><li>而<code>background-size</code>默认是是从左上角向右下角来填充，如果想设置以中间向两边，需要设置<code>background-position:center</code></li></ul></li></ul><p>|属性值|描述|<br>|contain|被替换的内容将被缩放，<strong>保持元素的宽高比</strong>，<strong>全部</strong>填充在内容框内|<br>|cover|被替换的内容将被缩放，<strong>保持元素的宽高比****，</strong>填满**整个内容框|<br>|fill|默认效果，被替换的内容正好填充元素的内容框，内容可能会被拉伸或压缩变形|<br>|none|被替换的内容保持其原有的尺寸|<br>|scale-down|内容的尺寸与<code>none</code>或<code>contain</code>中的一个相同，取决于他们两个之间谁得到的对象尺寸会更小一些|</p><ul><li>应用：防止图片拉伸或挤压-用户头像<ul><li>父盒子设置宽高</li><li>图片宽高设置100%全适应</li><li>添加<code>object-fit:cover</code>来等比例裁剪图片尺寸</li></ul></li></ul><h3 id="八、防止拖拽文本域"><a href="#八、防止拖拽文本域" class="headerlink" title="八、防止拖拽文本域"></a>八、防止拖拽文本域</h3><ul><li>resize属性规定是否可让用户调整元素的尺寸</li><li><code>textarea</code>表示多行文本框，拖动它的右下角可调整尺寸</li><li>写法：<code>textarea:none;</code></li></ul><h3 id="九、calc函数"><a href="#九、calc函数" class="headerlink" title="九、calc函数"></a>九、calc函数</h3><ul><li>用于动态计算长度值</li><li>写法：<code>width:calc(100px + 200px);</code></li><li>使用要点：<ul><li>支持<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>运算</li><li>运算符前后都需要保留一个空格，否则不生效，<code>*</code>、<code>/</code>可以没有空格，但建议有</li><li>任何长度值都可以使用calc()函数进行计算</li><li>可以使用百分比、px、em、rem等单位</li><li>使用标准的数学运算优先级规则</li></ul></li></ul><h3 id="十、var函数"><a href="#十、var函数" class="headerlink" title="十、var函数"></a>十、var函数</h3><ol><li><code>:root</code>选择器</li></ol><ul><li>用于匹配文档的htmlm根元素</li><li>与html选择器的区别在于：<code>:root</code>选择器的优先级要高于html标签选择器</li></ul><ol start="2"><li>var函数解读</li></ol><ul><li>var函数用于插入自定义的属性值</li><li>如果一个属性值在<strong>多处</strong>被使用，该方法就很有用</li><li>自定义属性一定要以<code>--</code>开头</li><li>&#x3D;&#x3D;就近原则&#x3D;&#x3D;，自定义属性会沿着父元素一直往外找，以最近找到的为主</li><li>应用场景：<ul><li>通常自定义属性值是写在:root选择器中，并且:root选择器会放在css的最上面，这样所有选择器就能用到这个自定义变量属性</li></ul></li><li>写法：</li></ul><pre><code>:root&#123;    &lt;!-- 自定义属性 --&gt;    --font-color:red;&#125;h3&#123;    color:var(--font-color);&#125;</code></pre><h3 id="十一、专项案例训练"><a href="#十一、专项案例训练" class="headerlink" title="十一、专项案例训练"></a>十一、专项案例训练</h3><ol><li>CSS开发天猫登录注册页<blockquote><p>没想到的地方</p></blockquote></li></ol><ul><li>天猫logo和登录框放在一个盒子里居中</li><li>表单元素：<code>option</code>、<code>input</code></li><li>区号部分：<ul><li>select：背景为选择图标，字体颜色设置为透明，宽高设置为图标大小</li><li>option：字体颜色为黑色</li></ul></li></ul><pre><code>&lt;dix class=&quot;box&quot;&gt; &lt;i&gt;+86&lt;/i&gt; &lt;select name=&quot;&quot; id=&quot;&quot;&gt; &lt;option value=&quot;+86&quot;&gt;+86中国大陆&lt;/option&gt;&lt;/select&gt;&lt;/div&gt;</code></pre><ul><li><code>pointer-events:none;</code>：盒子不受指针、click的影响</li><li>span标签之间的间隙：父盒子font-size&#x3D;0；</li><li>有些地方可以用怪异盒模型</li><li>最后一行可以用<code>text-align:right</code>水平居右，还有<code>cursor:pointer</code></li></ul><blockquote><p>需要用到JS的地方</p></blockquote><ul><li>区号，i绑定ption的value</li><li>登录方式的切换</li></ul><ol start="2"><li>CSS表格布局(QQ音乐排行榜效果)<blockquote><p>老师做的：</p></blockquote></li></ol><ul><li>用table标签</li><li>边框处理：缩小边距——<code>border-spacing:0</code>,边框重合——<code>border-collapse:collapse</code></li><li>不同列单独设置：在table和tr之间写上下面的代码，span表示<strong>选多少列</strong>，class是各列的类名</li></ul><pre><code>&lt;table&gt;  &lt;colgroup&gt;    &lt;col span=&quot;&quot; class=&quot;&quot;&gt; &lt;/clogroup&gt;</code></pre><ul><li>滑动效果：歌名变色，出现三个按钮，歌曲介绍有省略号<ul><li>三个按钮用display</li><li>省略号：滑动之后宽度缩短，并用单行文本溢出省略代码</li></ul></li><li>第三列不能设置宽度，自适应。用right、left</li></ul><h2 id="transtion过渡动画与animation自定义动画"><a href="#transtion过渡动画与animation自定义动画" class="headerlink" title="transtion过渡动画与animation自定义动画"></a>transtion过渡动画与animation自定义动画</h2><h3 id="一、transition过渡动画"><a href="#一、transition过渡动画" class="headerlink" title="一、transition过渡动画"></a>一、transition过渡动画</h3><blockquote><p><strong>如何理解过渡动画？</strong></p></blockquote><ul><li>一个元素由A状态经过一段时间变化成B状态。我们只需要定义其开始和结束的状态</li><li>而它中间的状态会自己添加”补间动画”</li><li>以前，网页的特效基本都是由JS定时器实现的，现在追捕改为使用CSS3过渡</li><li>优点：动画更细腻，内存开销小</li><li>兼容性：移动PC都兼容，但是需要加上对应的浏览器前缀<br><strong>过渡动画何时发生？</strong></li><li>当属性值发生变化时，才会触发transition动画</li><li>transition动画主要与<code>:hover</code>配合，来实现鼠标滑动动画效果</li></ul><ol><li>基本语法<blockquote><p><code>transition:transition-property transition-duration [transition-timing-function] [transition-delay];</code></p><ul><li>后面两个可以省略不写</li></ul></blockquote></li></ol><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>transition-property</code></td><td>指定CSS属性的name，哪些属性要过渡</td></tr><tr><td><code>transition-duration</code></td><td>transition效果需要指定多少秒或毫秒才能完成，动画时间</td></tr><tr><td><code>transition-timing-function</code></td><td>指定transition效果的转速曲线，变化曲线</td></tr><tr><td><code>transition-delay</code></td><td>定义transition效果开始的时候(延迟时间)</td></tr></tbody></table><ol start="2"><li>可参与过渡的属性<blockquote><p><strong>可参与过渡的属性</strong></p></blockquote></li></ol><ul><li>所有数值类型的属性，都可参与过度</li><li>比如：width、height、left、top、border-radius、font-size、opacity </li><li>背景颜色和文字都可以被过渡</li><li>所有的变形(包括2D和3D)都能被过渡</li><li>在CSS中90%的属性都可以辈过渡<blockquote><p><strong>不能</strong>参与过渡动画的属性</p></blockquote></li><li>float和position</li><li>display无法过渡</li><li>font-family等</li></ul><ol start="3"><li>特殊属性：all</li></ol><ul><li>需要所有属性参与过渡，即定义为all</li><li>all不要随意使用，会引发效率问题，如果只需要某一个属性过渡，还是要指定特定的属性</li></ul><ol start="4"><li>定义多个过渡动画</li></ol><ul><li>多个过渡动画之间用<code>,</code>隔开</li></ul><ol start="5"><li>过渡的四个小属性<table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>transition-property</code></td><td>指定CSS属性的name，哪些属性要过渡</td></tr><tr><td><code>transition-duration</code></td><td>transition效果需要指定多少秒或毫秒才能完成，动画时间</td></tr><tr><td><code>transition-timing-function</code></td><td>指定transition效果的转速曲线，变化曲线</td></tr><tr><td><code>transition-delay</code></td><td>定义transition效果开始的时候(延迟时间)</td></tr></tbody></table></li></ol><ul><li>多个值之间用逗号隔开，没有指定的值，以属性第一个值为准</li></ul><ol start="6"><li>时间函数</li></ol><ul><li>时间函数(transition-timing-function),管理着动画在单位帧内播放的速度曲线<blockquote><p><strong>时间函数的预设值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>linear</code></td><td>规定以相同速度开始至结束的过渡效果cubic-bezier(0,0,1,1)</td></tr><tr><td><code>ease</code></td><td>规定慢速开始，然后变快，然后慢速结束的过渡效果(cubic-bezier(0.25,0.1,0.25,1))</td></tr><tr><td><code>ease-in</code></td><td>规定以慢速开始的过渡效果cubic-bezier(0.42,0,1,1)</td></tr><tr><td><code>ease-out</code></td><td>规定以慢速结束的过渡效果cubic-bezier(0,0,0.58,1)</td></tr><tr><td><code>ease-in-out</code></td><td>等于以慢速开始和结束的过渡效果cubic-bezier(0.42,0,0.58,1)</td></tr><tr><td><code>cubic-bezier(n,n,n,n)</code></td><td>在cubic-bezier函数中定义自己的值，0~1之间</td></tr></tbody></table></blockquote></li></ul><blockquote><p>贝塞尔曲线用法</p></blockquote><ul><li>官方网址上在线生成<a href="https://cubic-bezier.com/">https://cubic-bezier.com/</a></li><li>还可以在网页上右击审查元素，在代码的控制面板当中来调整贝塞尔曲线，来调节运动速度</li></ul><h3 id="二、transition过渡动画实战案例"><a href="#二、transition过渡动画实战案例" class="headerlink" title="二、transition过渡动画实战案例"></a>二、transition过渡动画实战案例</h3><ol><li>鼠标滑动，背景从透明到半透明效果</li><li>鼠标滑动，文字从下往上滑动效果</li></ol><ul><li>父盒子设置相对定位、overflow-hidden</li><li>用盒子装文字，设置绝对定位，鼠标滑动时bottom改变</li></ul><ol start="3"><li>商城右侧通栏导航</li></ol><ul><li>鼠标滑动后出现的框，在点击之前，宽度&#x3D;0，字体颜色为透明色</li></ul><h3 id="三、animation自定义动画"><a href="#三、animation自定义动画" class="headerlink" title="三、animation自定义动画"></a>三、animation自定义动画</h3><blockquote><p>步骤：先定义动画，再调用动画</p></blockquote><ol><li>动画的定义<blockquote><p><strong>使用<code>@keyframes</code>关键帧来定义动画</strong></p></blockquote></li></ol><ul><li>建动画的原理是，将一套CSS样式逐渐变化为另一套样式</li><li>在动画过程中，您可以多次更改CSS样式的设定</li><li>动画执行各阶段时间，可以通过百分比来规定改变发生的时间，或者通过关键词<code>from</code>和<code>to</code></li><li><code>from</code>和<code>to</code>等价于0%和100%,from和0%是动画的开始时间，to和100%是动画的结束时间</li><li>动画名是自己起的</li><li>写法</li></ul><pre><code>@keyframes 动画名&#123;&lt;!-- 起始状态 --&gt;from/0% &#123;样式&#125;&lt;!-- 结束状态 --&gt;to/100%&#123;样式&#125;&#125;</code></pre><ol start="2"><li>调用动画<blockquote><p>使用animation属性</p></blockquote></li></ol><ul><li>写法：</li><li>复合写法：<ul><li>简单版：</li><li><pre><code></code></pre></li><li>animation:动画名 动画完成时间 时间函数 延迟时间；</li><li><pre><code></code></pre></li><li>完整版：</li><li><pre><code></code></pre></li><li>animation:动画名 动画完成时间 时间函数 延迟时间 播放次数 是否反向播放 动画不播放或完成时状态 动画是否正在运行或已暂停；</li></ul></li><li>类似transition</li></ul><ol start="3"><li>多关键帧动画</li></ol><ul><li>用百分比分别表示动画执行的时间节点</li><li>设置多个时间节点，每个节点都可以设置不同状态</li></ul><ol start="4"><li>animation完整写法——小属性<table><thead><tr><th>属性</th><th>说明</th><th>属性值</th></tr></thead><tbody><tr><td><code>animation-name</code></td><td>指定应用的一系列动画名，即@keyframes定义的动画名</td><td>none表示不调用动画，动画名：由大小写敏感的字母a-z、数字0-9、下划线、短横线组成，不能以数字开头</td></tr><tr><td><code>animation-duration</code></td><td>指定动画周期时长，需要多少秒或毫秒完成</td><td>默认值为0s，表示无动画。时长单位为秒(s)&#x2F;毫秒(ms)</td></tr><tr><td><code>animation-timing-function</code></td><td>设置动画将如何完成一个周期</td><td>和transition一致的linear、ease、ease-in、ease-out、ease-in0out、贝塞尔函数；不一样的是steps(n,start&#x2F;end)</td></tr><tr><td><code>animation-delay</code></td><td>设置动画在启动前的延迟间隔时间</td><td>默认为0s，表示立即执行；时长单位为s&#x2F;ms</td></tr><tr><td><code>animation-iteration-count</code></td><td>定义动画的播放次数</td><td>n:一个数字，动画播放次数；<code>infinite</code>无限次播放</td></tr><tr><td><code>animation-direction</code></td><td>指定是否应该轮流反向播放动画</td><td><code>normal</code>:默认值，动画正常播放；<code>reverse</code>:动画反向播放，动画按步后退的效果；<code>alternate</code>:动画在奇数次正向播放，在偶数次反向播放；<code>alternate-reverse</code>:东湖在奇数次反向播放，在偶数次正向播放；</td></tr><tr><td><code>animation-fill-mode</code></td><td>规定当动画不播放时(动画完成时&#x2F;动画延迟未播放时)，要应用到的元素的样式</td><td><code>none</code>:默认值，动画在动画执行之前和之后不会应用任何样式到目标元素；<code>forwards</code>:在动画结束后，动画将停止在最后结束状态；<code>backwards</code>:在动画结束后，动画将停止在最开始的状态；<code>both</code>:动画遵循<code>forwards</code>和<code>backwards</code>的规则，也就是说，动画会在两个方向上扩展动画属性</td></tr><tr><td><code>animation-play-state</code></td><td>指定动画是否正在运行或已暂停</td><td><code>pause</code>:暂停动画；<code>running</code>:正在运行动画；</td></tr></tbody></table></li></ol><blockquote><p><code>animation-play-state</code>通常与<code>:hover</code>配合使用，当鼠标划上去时，可以暂停或开启动画</p></blockquote><ol start="5"><li>animation指定多组动画</li></ol><ul><li>用来指定一组或多组动画时，每组之间用逗号分隔</li></ul><ol start="6"><li>steps帧动画</li></ol><ul><li>steps定义一个动画从开始到结束，动画的<strong>每一帧</strong>中经历的步数</li><li>steps的特殊性：它设置的是<strong>每一步</strong>动画的跳跃步数，而不是整个动画的跳跃步数</li><li><code>start</code>:开始是在第一帧动画结束的位置</li><li><code>end</code>:开始是在第一帧动画开始的位置</li><li>盒子的右侧是起始点<blockquote><p>走路案例</p></blockquote></li><li>移动的是background-position</li></ul><ol start="7"><li>transition与animation的区别</li></ol><ul><li>1、transition是过渡，是样式值得变化过程，只有开始和结束；animation其实也叫关键帧，通过和@keyframe结合可以设置中间帧的状态</li><li>2、animation配合@keyframe可以不通过触发事件直接触发过程，而transition需要通过hover或者js事件来配合触发</li><li>3、animation可以设置很多的属性，比如循环次数、动画的结束状态等等，transition只能触发一次</li><li>4、animation可以结合@keyframe设置每一帧，但transition只有开始和结束这两帧</li></ul><h3 id="四、animationn-css动画库"><a href="#四、animationn-css动画库" class="headerlink" title="四、animationn.css动画库"></a>四、animationn.css动画库</h3><ol><li><p>是什么？</p><blockquote><ul><li>animation.css是非常强大的跨平台的预设css3动画库</li><li>内置了很多典型的css3动画，兼容性好，使用方便</li><li>英文网：<a href="http://animate.style/(%E8%8B%B1%E6%96%87%E7%BD%91%E6%9B%B4%E5%A5%BD)">http://animate.style/(英文网更好)</a></li></ul></blockquote></li><li><p>怎么用？</p></li></ol><ul><li>1、下载animate.css文件</li><li>2、在页面引入animate.css文件</li></ul><pre><code>&lt;!--引用时，要注意引用入的地址 --&gt;link rel=&quot;stylesheet&quot; href=&quot;./css/animate.css&quot; /&gt;</code></pre><ul><li>3、在网站的右侧选择想要的效果，复制其样式名</li><li>4、在需要应用的元素上加<code>.animate_animated</code>和需要的效果样式名</li></ul><pre><code>&lt;!-- 应用  bounce 这个样式效果 --&gt;&lt;div class=&quot;box animate__animated &gt;animate__bounce&quot;&gt;&lt;/div&gt;</code></pre><blockquote><p>注意：link要写在style前面</p></blockquote><h2 id="transform-2D与3D转换"><a href="#transform-2D与3D转换" class="headerlink" title="transform 2D与3D转换"></a>transform 2D与3D转换</h2><h3 id="一、transform属性"><a href="#一、transform属性" class="headerlink" title="一、transform属性"></a>一、transform属性</h3><ul><li>在CSS中，利用<code>transform</code>这个属性实现对元素的旋转、缩放、倾斜、平移</li><li>transform属性的值可以是<code>none</code>或一个或多个css变换函数</li><li>transform的值不是none时，元素会创建自己的层叠上下文</li></ul><ol><li><p>transform的2D变换函数</p><table><thead><tr><th>属性值</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>translate(x,y)</td><td>x,y为长度单位，可以是px也可以是百分比；x表示元素在x轴上的移动量，y表示元素在y轴上的移动量，如果y轴不写，默认为0</td><td>transform:translate(100px,200px)</td></tr><tr><td>translateX(x)</td><td>表示元素在平面x轴上的位移量</td><td>transform:translateX(300px)</td></tr><tr><td>translateY(y)</td><td>表示元素在平面Y轴上的位移量</td><td>transform:translateY(300px)</td></tr><tr><td>rotate(ax)</td><td>ax代表旋转的角度，正角表示顺时针旋转，负角表示逆时针旋转</td><td>transform:rotate(30deg)</td></tr><tr><td>scaleX(x)</td><td>x数字类型，表示元素在x轴上的缩放比</td><td>transform:scaleX(2)</td></tr><tr><td>scaleY(y)</td><td>y数字类型，表示元素在y轴上的缩放比</td><td>transform:scaleY(2)</td></tr><tr><td>scale(x,y)</td><td>当只有x没有y时，则y默认为x，元素在x,y轴上均匀缩放</td><td>transform:scale(2,3)</td></tr><tr><td>skew(ax,ay)</td><td>ax,ay各表示一个角度</td><td>transform:skew(30deg,30deg)</td></tr><tr><td>skewX(ax)</td><td>ax表示一个角度，表示沿着x横坐标扭曲元素的角度，形成水平拉伸效果</td><td>transform:skewX(30deg)</td></tr><tr><td>skewY(ay)</td><td>ay表示一个角度，表示沿着y纵坐标扭曲元素的角度，形成垂直拉伸效果</td><td>transform:skewY(30deg)</td></tr></tbody></table></li><li><p>transform的3D转换属性值</p><table><thead><tr><th>属性值</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>translateZ(z)</td><td>元素在3D空间z轴方向上的位移量</td><td>transform:translateZ(200px)</td></tr><tr><td>translate3d(x,y,z)</td><td>分别表示元素在x,y,z轴坐标上的位移量，该值不能使用百分比，如果使用会被认为是无效属性</td><td>transform:translate3d(50px,30px,50px)</td></tr><tr><td>rotateX(ax)</td><td>表示元素绕x轴旋转一定角度，ax表示度数，可以为正，也可以为负</td><td>transform:rotateX(30deg);</td></tr><tr><td>rotateY(ay)</td><td>表示元素绕Y轴旋转一定角度，ay表示度数，可以为正也可以为负</td><td>transform:rotateY(30deg);</td></tr><tr><td>rotateZ(az)</td><td>表示元素绕Z轴旋转一定角度，az表示度数，可以为正也可以为负</td><td>transform:rotateZ(30deg);</td></tr></tbody></table></li></ol><h3 id="二、2D转换"><a href="#二、2D转换" class="headerlink" title="二、2D转换"></a>二、2D转换</h3><ol><li>2D平面</li></ol><ul><li>下图这个x和y轴，就是基于2D平面图形，后期所有的2D动画特效都是在这个2D的平面上操作</li><li>注意事项：<ul><li>元素的左上角坐标为(0,0)</li><li>(0,0)坐标的右方，为x轴的正方向</li><li>(0,0)坐标的下方，为y轴的正方向<img src="2D.png"></li></ul></li></ul><ol><li>translate位移</li></ol><ul><li><p>css中通过给<code>transform</code>添加<code>translate(x,y)</code>、<code>translateX(x)</code>、<code>translateY(y)</code>来实现元素的水平或垂直位移</p></li><li><p><strong>translate(x,y)</strong></p></li><li><p>x和y是长度值length，可以是px，也可以是%百分比</p></li><li><p>x表示元素在x轴上的位移量，为正表示向右移动，为负表示向左移动</p></li><li><p>y表示元素在y轴上的位移量，为正表示向下移动，为负表示向上移动 </p></li><li><p>位移和相对定位非常像，位移也会”在老家留坑”，即会占据原来的位置 </p></li><li><p>同时不会对其他元素造成影响，相当于悬浮在其他元素上</p></li><li><p>创建了自己的层叠上下文</p></li><li><p>长度单位可以为px，也可以为百分比</p></li><li><p>x,y为百分比时，这个百分比是相对元素自身的可视宽高而言的</p></li><li><p>在标准盒子模型下</p><ul><li>水平位移：(width+左右padding+左右border)*x%</li><li>垂直位移：(width+左右padding+左右border)*y%</li></ul></li><li><p>特殊情况：y值不写，默认为0</p><ul><li><code>transform:translate(x)</code>&#x3D;<code>transform:translate(x,0)</code></li></ul></li><li><p><strong>translateX(x)与translateY(y)</strong></p></li><li><p><code>translateX(x)</code>实现元素在X轴的位移量</p></li><li><p><code>translateY(y)</code>实现元素在Y轴的位移量</p></li><li><p>本质上translate(x,y)是translateX与translateY两者的复合写法</p></li><li><p>transform后面如果跟多个变换函数，则各函数之间用<strong>空格</strong>隔开</p></li><li><p><strong>注意</strong></p></li></ul><pre><code>transform:translateX(10px);transform:transformY(10px);</code></pre><blockquote><p>这样写，后面的会覆盖前面的，只有transformY有效</p></blockquote><ul><li><p>正确写法是：<code>transform:translateX(10px) translateY(10px);</code> 用空格隔开</p></li><li><p><strong>translate与绝对定位结合实现元素水平垂直居中</strong></p></li><li><p>先利用绝对定位，<code>top:50%;left:50%;</code></p></li><li><p>再利用translate，&#96;transform:translate(-50%,-50%)</p></li><li><p>相比之前用的margin负值，可以不用知道盒子宽高，调整也不受影响</p></li></ul><ol start="3"><li>缩放scale</li></ol><ul><li><p>写法：<code>transform:scale(ax,ay)</code></p></li><li><p><strong>scale(x,y)</strong></p></li><li><p>xy可以用不带单位的数字或百分比表示，分别表示元素的宽高缩放比</p></li><li><p>值&gt;1：放大；值&lt;1：缩小</p></li><li><p>当只有x，没有y时，y默认为等于x，元素宽高同时均匀缩放</p></li><li><p>百分比是相对于元素的可视宽高而言的</p></li><li><p><strong>scaleX(x)与scaleY(y)</strong></p></li><li><p>本质上scale(x,y)是scaleX(x)与scaleY(y)的复合写法</p></li><li><p><code>transform:scale(x,y)</code>等于<code>transform:scaleX(x) scaleY(y)</code></p></li><li><p>可以利用transform-origin设置变换原点</p></li></ul><ol start="4"><li>斜切skew</li></ol><ul><li>实现元素斜切效果</li><li>写法：&#96;transform:skew(ax,ay)</li><li><code>skewX(ax)</code>:用于水平拉伸，使元素的每个点在水平方向上扭曲一定的角度</li><li><code>skewY(ay)</code>:用于垂直拉伸，使元素的每个点在垂直方向上扭曲一定的角度</li><li>ax,ay表示一个角度</li><li>单位为<code>deg</code>，正负数都可以</li><li>可以利用transform-origin设置变换原点</li></ul><ol start="5"><li>旋转rotate</li></ol><ul><li>元素旋转效果</li><li>写法<code>transform:rotate(ax)</code></li><li><code>ax</code>表示旋转的角度，正数表示顺时针，负数表示逆时针</li><li>单位是<code>deg</code></li><li>在三角形案例中可知，多次改变旋转角度，都是参考<strong>最初</strong>的视角，不是参考上一次旋转！</li><li>可以利用transform-origin设置变换原点</li></ul><ol start="6"><li>设置原点transform-origin</li></ol><ul><li>设置元素的变换原点</li><li>缩放、斜切、旋转都可以设置原点</li><li>默认值：<code>transform-origin:50% 50% 0;</code>，分别表示x,y,z轴，在2D转换中只需要前两个值</li><li>x,y的值可以是px、百分比、关键词</li><li>但z的值只能是px</li></ul><blockquote><p><strong>关键词</strong></p></blockquote><ul><li>类似于<code>background-position</code></li><li>(left,right)、(top,bottom)、center，这三组可以任意搭配<table><thead><tr><th>关键词</th><th>描述</th></tr></thead><tbody><tr><td>默认原点</td><td><code>transform-origin:center</code></td></tr><tr><td>left</td><td>原点为左边框中点，&#x3D;<code>left center</code></td></tr><tr><td>right</td><td>右边框中点，&#x3D;<code>right center</code></td></tr><tr><td>top</td><td>上边框中点，&#x3D;<code>top center</code></td></tr><tr><td>bottom</td><td>下边框中点，&#x3D;<code>bottom center</code></td></tr><tr><td>top left</td><td>原点为左上角，相当于坐标(0 0)</td></tr><tr><td>top right</td><td>元素右上角</td></tr><tr><td>bottom left</td><td>左下角</td></tr><tr><td>bottom right</td><td>右下角</td></tr></tbody></table></li></ul><blockquote><p><strong>数值表示法px</strong></p></blockquote><ul><li>y省略不写时，默认为元素的垂直中心点<blockquote><p><strong>百分比表示法</strong></p></blockquote></li><li>相对的是元素自身的可视宽高而言</li></ul><ol start="7"><li><p>2D转换综合写法顺序问题</p><blockquote><ul><li>同时使用多个变换，其多个变换函数之间用空格隔开</li><li>转换函数的顺序会影响转换的效果，比如先旋转会影响坐标轴方向</li><li>旋转之后，坐标轴也会跟着旋转，位移的方向就要按照旋转后的坐标轴来</li><li>所以当同时使用旋转和位移时，一定要注意书写顺序</li></ul></blockquote></li><li><p>使2D转换有动画效果<br><code>transition:transform 2s;</code></p><blockquote><ul><li>分清楚<code>transition</code>和<code>transform</code></li></ul></blockquote></li></ol><h3 id="2D转换实战应用"><a href="#2D转换实战应用" class="headerlink" title="2D转换实战应用"></a>2D转换实战应用</h3><ol><li><p>旋转的三角形</p><blockquote><p>注意点</p><ul><li>旋转的角度以最原始的状态为基准，而不是参考上一次旋转</li></ul></blockquote></li><li><p>QQ音乐效果</p><blockquote><ul><li>图片、按钮、遮罩层都有动画效果</li><li>隐藏元素的方式：opacity、rgba、display等</li></ul></blockquote></li></ol><h3 id="四、3D转换"><a href="#四、3D转换" class="headerlink" title="四、3D转换"></a>四、3D转换</h3><blockquote><p>在3D动画中，元素是围绕坐标x,y,z轴来变换的</p><ul><li>3D坐标图<img src="3D坐标图.png">- 元素左上角的坐标为(0,0,0)- x轴右边为正方向，y轴下方为正方向，z轴垂直电脑屏幕，射出屏幕的这头为正方向</li></ul></blockquote><ol><li>透视perspective<blockquote><p>没有<strong>透视定义</strong>，不成3D</p><ul><li>透视是指在平面上描绘物体的空间关系的方法或技术</li><li>要在平面上描绘物体的空间立体感，需要遵循透视原理中的近大远小规则</li></ul></blockquote></li></ol><blockquote><p><strong>视点</strong></p><ul><li>当我们站的越远，我们看到的物体就越小 </li><li>css3中3Dtransform透视点是在浏览器的前方<img src="视点.png"></li></ul></blockquote><blockquote><p><strong>perspective属性</strong></p><ul><li>在css3中，用<code>perspective</code>属性来设置透视距，即模拟人站在离屏幕多远的地方来看电脑上显示的元素</li><li>比如：<code>perspective:800px;</code>意思就是在离屏幕800px的地方看到这个元素</li><li>如果元素往z轴正方向移动，离我们越近，看到物体就越大</li><li>如果元素往z轴负方向移动，离我们越远，看到的物体就越小</li><li>注意：<code>perspective</code>这个属性要设置在父元素上面</li></ul></blockquote><ol><li><p>translate3D位移</p><blockquote><ul><li>**translateX(x)、translateY(y)**，与2D位移是一样的效果</li><li>**translateZ(z)**：<ul><li>表示垂直于电脑屏幕方向的位移量</li><li>必须配合<code>perspective</code>属性，用它来定义透视强度</li><li><code>translateZ=0</code>：图形大小正常显示</li><li><code>0 &lt; translateZ &lt; perspective值</code>：图形变大</li><li><code>translateZ &gt;= perspective</code>图片不见，相当于图片在你后面,你肯定是看不见的</li><li><code>translateZ &lt; 0</code>：图形变小</li></ul></li><li>translate3d(x,y,z)<ul><li>表示元素在x,y,z轴三个坐标上的位移量</li><li>z的值不能使用百分比，如使用则会被认为是无效属性</li></ul></li></ul></blockquote></li><li><p>rotate 3D旋转</p><blockquote><ul><li>css中通过给<code>transform</code>添加以下变换函数来实现3D旋转效果<table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>rotateX(ax)</td><td>表示元素绕x轴旋转一定的角度，ax表示度数，可正可负</td></tr><tr><td>rotateY(ay)</td><td>表示元素绕y轴旋转一定的角度，ay表示度数，可正可负</td></tr><tr><td>rotateZ(az)</td><td>表示元素绕z轴旋转一定的角度，az表示度数，可正可负</td></tr></tbody></table></li><li>旋转方向</li><li>左手法则：大拇指指向正方向，四指的方向就是旋转的方向<img src="3D旋转.png">>rotateZ(az)和2d转换rotate(ax)效果一样</li></ul></blockquote></li><li><p>transform-style</p><blockquote><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>flat</td><td>表示所有子元素在2D平面呈现</td></tr><tr><td>preserve-3D</td><td>表示所有子元素在3D空间中呈现</td></tr></tbody></table></blockquote></li></ol><h3 id="五、实战案例"><a href="#五、实战案例" class="headerlink" title="五、实战案例"></a>五、实战案例</h3><ol><li>飞行的火箭<blockquote><ul><li>火箭左上角和右下角方向来回移动</li><li>气流动画效果：旋转后坐标轴变化，线条沿Y轴上下移动，用opacity实现隐藏效果</li></ul></blockquote></li><li>创建3D导航<blockquote><ul><li>关键是改变旋转原点<code>transform-origin</code></li><li>给两个a标签加父盒子.container,鼠标滑动设置在父盒子上</li><li>第二个a标签的初始状态是x轴反方向旋转90度，这样就藏在了第一个盒子下面,而且！它的原点要设置在上边框的中点</li><li>点击父盒子时，往x轴的正方向翻转90度，旋转原点是3D盒子的中心<code>transform-origin:50% 50% 高度的一半</code></li><li>想要有立体效果：在父盒子上加<code>transform-style: preserve-3d;</code></li></ul></blockquote></li><li>翻书效果<blockquote><ul><li>每一页构建一个父盒子，里面放正反两面，点击父盒子翻页</li><li>改变原点为左边框中点</li><li>反面比正面里电脑更远才能显示：改变<code>translateZ(z)</code></li><li>每一页都比前一页层级更低：改变<code>z-index</code>，整本书需要用JS实现</li><li>反面翻过来仍正面显示：在父盒子翻转180度的基础上再翻转180度</li><li>每一页有正反面两面的立体效果：在每页父盒子设置<code>transform-style:preserve-3D</code></li><li>注意位移和旋转的顺序，旋转会改变方向</li></ul></blockquote></li><li>长方体<blockquote><ul><li>将六个面都放在父盒子之中，用绝对定位固定在同一位置；</li><li>父盒子要用3D</li><li>通过位移旋转来移动每个面，先移动再旋转更简单</li><li>左右面若想正面朝外，则移动到合适位置再改变原点旋转</li><li>给父盒子设置旋转动画可以看到3D效果</li></ul></blockquote></li><li>鼠标移入文字划入效果<blockquote><ul><li>没注意到的地方：<ul><li>需要换行的文字，左右间距用绝对定位设置</li></ul></li></ul></blockquote></li><li>鼠标悬停缩放动画<blockquote><ul><li>没考虑到的地方<ul><li>鼠标悬停时的遮罩：缩小0.8，有盒子阴影，白色边框<br>注意：</li><li>遮罩层原本和父盒子宽高一致，加上边框后会偏移</li><li>缩放时是居中缩放，所以遮罩层要向上向下移动边框宽度的距离</li></ul></li></ul></blockquote></li><li>鼠标移入旋转动画<blockquote><p>没想到的地方</p><ul><li>背景模糊：受上一案例影响，只想到用盒子阴影，但本案例并不适合，实际应该滤镜效果<code>filter</code><br>不一致的地方：</li><li>遮罩效果<ul><li>长方形旋转角度：遮罩盒子宽度等于父盒子对角线的长度(勾股定理)，高度自拟，<code>top=-50%</code>，转换原点改为左侧，然后旋转，可以在检查页面调试角度</li><li>旋转效果：原遮罩盒子高度为0，top&#x3D;0,left&#x3D;0;鼠标滑动后再设置效果</li></ul></li></ul></blockquote></li><li>loading动画<blockquote><ul><li>设置var函数：写在style里，或写在行内，用<code>style=--name:值</code>。var函数一定要以<code>--</code>开头，后面接属性名和属性值。</li><li>var与函数运算结合，一定要在外面套上<code>calc()</code></li><li>var函数与动画结合：<code>transform:rotate(calc(var(--i)*40deg))</code></li><li>小圆围成一个大圆：先把小圆都放在父盒子顶部中间，设置原点为父盒子中点，但一定是以起始位置的xy轴为起点<ul><li><code>transform-origin:15px 140px</code>，140px就是大圆的半径<img src="loading动画.png"></li></ul></li><li>小圆轮流亮起：设置延迟效果，也要用到var函数</li></ul></blockquote></li><li>吃豆豆动画效果<blockquote><ul><li>嘴巴咬合效果：两个长方形朝不同方向旋转，父盒子边框变成圆(我一点都没想到！！！)</li><li>豆豆移动效果：盒子阴影!!!+translate+animation</li><li>细节：<ul><li>豆豆和头部都使用定位，豆豆写在后面，所以在头部上面，需要提高头部的层级</li><li>豆豆的移动速度等于嘴巴张合一轮的时间(嘴巴动画要使用alternate)</li></ul></li></ul></blockquote></li><li>鼠标悬停 3D 旋转动画效果<blockquote><ul><li>注意点<ul><li>背面的文字和图片在旋转前就要设置<code>rotate(180deg)</code>，否则在鼠标悬停旋转180度后会恢复初始状态</li></ul></li></ul></blockquote></li><li>3D旋转木马效果<blockquote><ul><li>点击第二个盒子实现旋转效果，其父盒子设置视距，其子盒子放置图片。要想让谁的子盒子有3D效果，就给谁设置<code>transform-style</code></li><li>图片怎么实现环绕效果：用绝对定位使他们都处于中心，先旋转一定的角度，在往z轴的方向移动,var函数+rotateY+translateZ</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS核心知识点（二）</title>
      <link href="/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="CSS-display属性、背景属性、其他常用属性"><a href="#CSS-display属性、背景属性、其他常用属性" class="headerlink" title="CSS display属性、背景属性、其他常用属性"></a>CSS display属性、背景属性、其他常用属性</h2><h3 id="一、display属性"><a href="#一、display属性" class="headerlink" title="一、display属性"></a>一、display属性</h3><h4 id="display属性的作用"><a href="#display属性的作用" class="headerlink" title="display属性的作用"></a>display属性的作用</h4><blockquote><p><code>display</code>属性可以设置元素的<strong>内部</strong>和<strong>外部</strong>显示类型</p></blockquote><ul><li>外部显示类型：<ul><li>元素的外部显示类型有block块、inline内联等</li><li>外部显示类型将决定该元素在<strong>流式布局</strong>中的表现</li></ul></li><li>内部显示类型：<ul><li>内部显示类型flex布局、grid网格布局、流失布局等</li><li>元素的内部显示类型可以控制其子元素的布局方式</li></ul></li></ul><blockquote><p>流式布局(文档流或常规流)</p></blockquote><ul><li>它是指在对布局进行任何更改之前(默认情况下)，在页面上显示”块”和”内联”元素的方式</li><li>简单来说，它是一种排版方式，这种排版方式规定了块级和内联元素在页面中如何排版显示</li></ul><blockquote><p>流式布局中<strong>块级元素</strong>排版方式</p></blockquote><ul><li>块级盒子会从包含块的顶部开始，按序<strong>垂直</strong>排列</li><li>同级盒子间的垂直距离会由<code>margin</code>属性决定</li><li>相邻两个块级盒子之间的垂直间距会遵循外边距折叠原则被折叠</li></ul><blockquote><p>流式布局中<strong>内联元素</strong>排版方式</p></blockquote><ul><li>盒子会从包含块的顶部开始，按序<strong>水平</strong>排列</li><li>只有水平外边距、边框和内边距会被保留</li><li>这些盒子可以以不同方式在垂直方向上对齐：可以底部对齐或顶部对齐，或者按文字底部进行对齐</li></ul><h4 id="元素外部显示类型"><a href="#元素外部显示类型" class="headerlink" title="元素外部显示类型"></a>元素外部显示类型</h4><blockquote><p>display通过以下属性值来制定元素的显示类型</p></blockquote><ul><li>bolck 块级</li><li>inline-block 行内块</li><li>inline 行内</li></ul><blockquote><p>元素显示类型分为：块级和内联等<br>内联(行内)元素又分为：inline内联元素和inline-block行内块元素(可替换元素)</p></blockquote><ol><li>block块级元素</li></ol><ul><li>常见的块级元素有：<br><code>p</code>、<code>div</code>、<code>ul</code>、<code>ol</code>、<code>li</code>、<code>h</code>、<code>dl</code>等</li><li>块级元素的特点<ul><li>独占一行</li><li>可以设置宽高</li><li>在不设置宽高的情况下，宽默认为父元素内容区宽</li><li>一般来说块级元素里可以放任意元素，不过文字类元素标签内不能放其他块元素：<ul><li>p标签里不能放p和div标签</li><li>h1~h6标签里不能放p,div标签</li></ul></li></ul></li></ul><ol start="2"><li>inline-block行内块元素</li></ol><ul><li>以下元素具有行内块元素的特性，但本质上叫”可替换元素”(归类归到行内元素):<br> <code>img</code>、<code>表单类元素</code>、<code>video</code>、<code>audio</code>等</li><li>行内块元素的特点 <ul><li>相邻的行内块元素&#x2F;行内元素会在一行显示、放不下时会换行</li><li>相邻的行内块元素之间会有<strong>空白间隙</strong>(后面有案例解决这个问题)</li><li>元素默认宽为它本身内容宽</li><li>可设置width、height属性</li></ul></li></ul><ol start="3"><li>inline内联&#x2F;行内元素</li></ol><ul><li>常见的行内元素有：<code>a</code>、<code>strong</code>、<code>span</code>、<code>i</code>、<code>del</code>等</li><li>行内元素特点：<ul><li>相邻的行内元素会在一行显示，放不下时会换行显示</li><li>宽高的设置是无效的，其宽高随内容撑开</li><li>行内元素只能放文本或其他行内元素</li></ul></li><li>注意<ul><li><code>&lt;a&gt;</code>标签里不能再放<code>&lt;a&gt;</code>标签</li><li>但<code>&lt;a&gt;</code>标签里可以放块级元素</li><li>实际开发中，在某些情况下会把a标签转换为块级元素</li></ul></li></ul><blockquote><p>总结:三种元素类型对比</p><table><thead><tr><th>元素类型</th><th>排列方式</th><th>盒模型属性</th><th>内容</th></tr></thead><tbody><tr><td>块级block</td><td>独占一行</td><td>宽高有效</td><td>任意元素，p&#x2F;h特别</td></tr><tr><td>行内块line-block</td><td>不独占</td><td>可设置高</td><td>行内或行内块元素</td></tr><tr><td>内联inline</td><td>不独占</td><td>宽高设置无效</td><td>行内&#x2F;文本元素，a特别</td></tr></tbody></table></blockquote><ol start="4"><li>相互转换</li></ol><ul><li><code>display:block;</code>将元素转换为块级元素</li><li><code>diaplay:inline;</code>将元素转换为行内元素</li><li><code>display：inline-block</code>将元素转换为行内块</li></ul><ol start="5"><li>隐藏元素<table><thead><tr><th>属性</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>diaplay:none;</code></td><td>隐藏元素</td><td>可以将元素隐藏；只要父元素隐藏，子孙元素就没有任何办法可见。元素隐藏后不会占空间，就好比页面中没有加过这个元素</td></tr><tr><td><code>display:hidden：</code></td><td>隐藏元素</td><td>将元素隐藏；如果父元素隐藏，子孙元素会隐藏，但是给子孙加上<code>visibility:visible;</code>时，子孙可见；隐藏后仍占其位置，会留下空白区域。基本不用</td></tr></tbody></table></li></ol><ul><li>注：<code>display</code>除<code>none</code>以外的值，均为显示元素</li></ul><ol start="6"><li>常见大厂面试题</li></ol><ul><li><code>display:none;</code>和<code>visibility:hidden;</code>二者的区别？<table><thead><tr><th>区别</th><th>display:none;</th><th>visibility:hidden;</th></tr></thead><tbody><tr><td>空间占据性</td><td>不占空间</td><td>占空间</td></tr><tr><td>回流与渲染性</td><td>会产生回流与重绘</td><td>不会产生回流，只会产生重绘</td></tr><tr><td>对子孙元素的影响</td><td>子孙元素全部不可见，并没有任何办法可见</td><td>子孙元素全部不可见，但是加上<code>visibility:visible；</code>就可见</td></tr></tbody></table></li></ul><ol start="7"><li>去掉行内块元素默认的空白间隙<blockquote><p>产生间隙的原因</p></blockquote></li></ol><ul><li>元素被当成行内元素排版的时候，元素之间的空白符(空格&#x2F;回车、换行等)都会被浏览器处理</li><li>根据white-space的处理方式(默认为normal，合并多余空白)，原来HTML代码中的空白符被转换成了一个空白符，所以元素之间出现了空隙</li><li>这些元素之间的间距会随着字体的大小而变化</li></ul><blockquote><p>解决办法</p></blockquote><ul><li>给父元素加上<code>font-size:0px;</code>,给子元素重写<code>font-size</code></li><li>给元素添加<code>float</code></li><li>图片间的空隙，给图片添加<code>display:block;</code>变成块级元素后，独占一行，空白间隔消失;更好的办法是添加<code>vertical-align:top;</code></li></ul><h3 id="二、background背景属性"><a href="#二、background背景属性" class="headerlink" title="二、background背景属性"></a>二、background背景属性</h3><h4 id="background-color背景颜色"><a href="#background-color背景颜色" class="headerlink" title="background-color背景颜色"></a>background-color背景颜色</h4><ul><li>背景颜色可以用十六进制、rgb()、rgba()、英文单词表示</li><li>padding区域是有背景颜色的</li></ul><h4 id="background-image图片"><a href="#background-image图片" class="headerlink" title="background-image图片"></a>background-image图片</h4><ul><li>用于设置背景图片</li><li>图片路径要写在<code>url()</code>圆括号里，可以是相对路径，也可以是绝对路径</li><li>地址相对路径是从CSS样式的位置出发(特别注意外部样式)</li><li>写法：<code>background-image: url();</code></li></ul><h4 id="background-repeat重复"><a href="#background-repeat重复" class="headerlink" title="background-repeat重复"></a>background-repeat重复</h4><ul><li>用来设置背景图片的重复模式</li><li>属性值<table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>repeat;</code></td><td>x,y均平铺(默认)</td></tr><tr><td><code>repeat-x;</code></td><td>x平铺</td></tr><tr><td><code>repeat-y;</code></td><td>y平铺</td></tr><tr><td><code>no-repeat;</code></td><td>不平铺</td></tr></tbody></table></li></ul><h4 id="background-position-背景图片位置"><a href="#background-position-背景图片位置" class="headerlink" title="background-position 背景图片位置"></a>background-position 背景图片位置</h4><ul><li><p>用来控制背景图片在盒子中&#x3D;&#x3D;显示&#x3D;&#x3D;的开始位置</p></li><li><p>背景图片位置默认是从padding区开始计算，要将内边距算进去</p></li><li><p>写法：<code>background-position:  ;</code></p></li><li><p>位置表示法</p><table><thead><tr><th>写法</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>数值表达法(x y)</td><td>两个值</td><td>x：与盒子左边距离 y与盒子上边距离</td></tr><tr><td>数值表达法(x)</td><td>单个值</td><td>数值只表示x，垂直方向居中显示</td></tr><tr><td>百分比表达法(x% y%)</td><td>两个值</td><td>左偏移量&#x3D;(容器width+左右padding-背景图width)<code>*</code>百分比,上偏移量&#x3D;(容器height+上下padding-背景图height)<code>*</code>百分比</td></tr><tr><td>百分比表达法(x%)</td><td>单个值</td><td>该值表示x%，垂直方向水平居中</td></tr><tr><td>关键字表达法</td><td>两个值</td><td>垂直方向 水平方向</td></tr><tr><td>关键字表达法</td><td>单个值</td><td>center被省略</td></tr></tbody></table></li><li><p>负值情况：</p><ul><li>在数值和百分比表达法下，可以使用负值</li><li>右是水平的正方向，<strong>下是垂直的正方向</strong>。所以负值代表向左、向上移动</li></ul></li><li><p>关键词表达法<br>可以用<code>(top、bottom)</code>、<code>(center)</code>、<code>(left、right)</code>三组中的任意两个组的一个值进行组合，也可以用单个值</p><ul><li>单一关键字与对应组合关键字表示法<table><thead><tr><th>单一关键字</th><th>等价的组合关键字</th></tr></thead><tbody><tr><td>center</td><td>center center</td></tr><tr><td>top</td><td>top center或center top</td></tr><tr><td>bottom</td><td>bottom center或center bottom</td></tr><tr><td>left</td><td>left center或center left</td></tr><tr><td>right</td><td>right center或center right</td></tr></tbody></table></li></ul></li></ul><h4 id="background复合属性"><a href="#background复合属性" class="headerlink" title="background复合属性"></a>background复合属性</h4><blockquote><ul><li><code>background-color</code>、<code>background-image</code>、<code>background-repeat</code>、<code>background-position</code>可以进行合写</li><li>不包括background-size&#x2F;clip&#x2F;origin&#x2F;attachment!!!</li><li>合写用的非常多，而其中的单条一般用来进行层叠</li><li>写法：<br><code>background:red url() no-repeat 10px 20px;</code></li><li>复合写法中，省略未写的值会以默认值替代<ul><li>背景色默认为透明色</li><li>背景图片默认为没有</li><li>重复默认为左右平铺</li><li>图片位置默认为0% 0%</li></ul></li></ul></blockquote><h4 id="CSS精灵图"><a href="#CSS精灵图" class="headerlink" title="CSS精灵图"></a>CSS精灵图</h4><blockquote><ul><li>将多个小图标合并制作在一张图上</li><li>使用<code>background-position</code>属性单独显示其中一个</li><li>这样的技术叫做CSS精灵技术，也叫作CSS雪碧图</li><li>CSS精灵可以减少HTTP请求数，加快网页显示速度，但缺点也很明显：不方便测量，后期改动麻烦</li><li>适用于小图，大图不合适</li><li>使用Pxcook测量距离,注意正负值</li></ul></blockquote><h4 id="background-attachment-背景固定"><a href="#background-attachment-背景固定" class="headerlink" title="background-attachment 背景固定"></a>background-attachment 背景固定</h4><blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>scroll</code></td><td>默认值，背景图片相对于元素本身固定，但随页面滚动而滚动</td></tr><tr><td><code>fixed</code></td><td>背景相对于视口固定。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动</td></tr><tr><td><code>local</code></td><td>背景相对于元素的内容固定，如果一个元素拥有滚动机制，背景会随元素的内容滚动，同时背景图片随着页面的滚动而滚动</td></tr></tbody></table></blockquote><blockquote><ul><li>srcoll <img src="scroll.gif">背景图随页面滚动条移动，但不随元素内容移动</li><li>fixed <img src="fixed.gif">背景图固定在页面左上角，不随元素且不随页面滚动</li><li>local <img src="local.gif">背景图随页面一起滚动，也随元素内容滚动</li></ul></blockquote><h4 id="background-size背景尺寸"><a href="#background-size背景尺寸" class="headerlink" title="background-size背景尺寸"></a>background-size背景尺寸</h4><blockquote><p><code>backgroung-size: ;</code></p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>x y</td><td>分别表示背景图的宽高</td></tr><tr><td>x% y%</td><td>百分比是相对于盒子的宽高而言</td></tr><tr><td>x auto</td><td>x可以是数值也可以是百分比，auto是相对于宽来自动缩放</td></tr><tr><td>contain</td><td>背景图片智能改变尺寸以容纳到盒子里，把图片全部展示出来</td></tr><tr><td>cover</td><td>智能改变尺寸以撑满盒子，填充盒子的每个角落</td></tr></tbody></table></blockquote><h4 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h4><blockquote><ul><li>设置元素的背景(图片或颜色)是否延展到边框、内边距、内容<table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>border-box</td><td>默认值，背景绘制在边框方框内</td></tr><tr><td>padding-box</td><td>背景绘制在内边距方框内</td></tr><tr><td>content-box</td><td>背景绘制在内容方框内</td></tr><tr><td>text</td><td>背景被裁剪成文字的前景色</td></tr></tbody></table></li><li>使用text时，要将文字颜色设置为透明才能看到效果</li></ul></blockquote><pre class=" language-css"><code class="language-css"><span class="token number">.</span>box<span class="token number">4</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* background-image:linear-gradient(to right,red, blue, green); */</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(../../src/image/peakflower.webp)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 背景被裁剪成文字的前景色,可以用渐变或图片*/</span>    <span class="token property">background-clip</span><span class="token punctuation">:</span>text<span class="token punctuation">;</span>    <span class="token property">-webkit-background-clip</span><span class="token punctuation">:</span>text<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 除文字下的背景以外都隐藏 */</span>     <span class="token property">color</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 文字颜色设置为透明 */</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h4 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h4><blockquote><ul><li>背景图片的定位区域<table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>padding-box</td><td>背景图片的摆放以padding区域为参考(默认值)</td></tr><tr><td>border-box</td><td>背景图片的摆放以border区域为参考</td></tr><tr><td>content-box</td><td>背景图片的摆放以content区域为参考</td></tr></tbody></table></li></ul></blockquote><img src="origin.png"><h3 id="三、线性渐变"><a href="#三、线性渐变" class="headerlink" title="三、线性渐变"></a>三、线性渐变</h3><ul><li>在background-image属性下，创建线性渐变背景</li><li>用<code>,</code>分隔方向和不同颜色<br><code>background-image:linear-gradient(direction,color);</code><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>direction</code></td><td>指定渐变的方向</td></tr><tr><td><code>color</code></td><td>用于指定渐变的起止颜色</td></tr></tbody></table></li></ul><ol><li>方向</li></ol><ul><li>未设置角度：则默认从上而下渐变</li><li>用关键词来指定渐变方向<ul><li>to (top,bottom) (left,right)</li></ul></li><li>用度数来指定渐变方向,度数单位为deg,顺时间方向<br><code>background-image:linear-gradient(45deg,red,blue)</code></li></ul><ol start="2"><li>颜色</li></ol><ul><li>多个颜色值，可以用百分数定义纯净的该颜色的起始点，百分数写在颜色后面(颜色的分布范围是从前往起始点渗透)<br>background-img:linear-gradient(red 40%,blue 50%)&#96;</li><li>转换中点是指：两个颜色相互融合的交点</li><li>默认转换中点：两个颜色转换的中点</li><li>自定义转换中点：在两个颜色之间添加未标记的%，以指示颜色的中转位置<br><code>background-img:linear-gradient(red,40%,blue)</code></li><li>未设置0%和100%的终止色<ul><li>默认情况下，如果不带0%终止的颜色，则起始色为声明的第一个颜色</li><li>最后一种颜色将持续到100%标记，或者如果在最后一个没有声明长度时，则在100%标记处</li></ul></li></ul><pre><code>.box7 &#123;    background-image: linear-gradient(yellow,red,blue);    &#125;.box8 &#123;    background-image: linear-gradient(green 0%,20%，yellow ,red,blue,green100%);    &lt;!-- green 0%表示纯净的绿色在0%，但0%处是看不到的所以能看到的是更浅的绿色渗透出来,20%的地方是黄绿两色的转换中点 --&gt;    &#125;</code></pre><ul><li>没有颜色转换的情况<ul><li>纯净色的终止点就是转换中点</li></ul></li></ul><pre><code>.box &#123;    background-image: linear-gradient(yellow 20%,20%,red,blue);    &#125;</code></pre><ol start="3"><li>浏览器私有前缀<blockquote><p>不同浏览器有不同的私有前缀，用来对实验性质的CSS属性加以标识</p><table><thead><tr><th>浏览器</th><th>前缀</th></tr></thead><tbody><tr><td>Chrome浏览器</td><td><code>-webkit-</code></td></tr><tr><td>Firefox火狐</td><td><code>-moz-</code></td></tr><tr><td>IE、Edge</td><td><code>-ms-</code></td></tr><tr><td>欧朋</td><td><code>-o-</code></td></tr></tbody></table></blockquote></li></ol><pre><code>background-image:-webkit-linear-gradient(to top,gold,red)background-image:-moz-linear-gradient(to top,gold,red)background-image:-ms-linear-gradient(to top,gold,red)background-image:-o-linear-gradient(to top,gold,red)</code></pre><ol start="4"><li>渐变色工具<br><a href="https://c.runoob.com/more/gradients/#Omolon">https://c.runoob.com/more/gradients/#Omolon</a></li></ol><h3 id="四、径向渐变"><a href="#四、径向渐变" class="headerlink" title="四、径向渐变"></a>四、径向渐变</h3><blockquote><ul><li>盒子的background-image属性可以用radial-gradient()形式创建径向渐变背景图</li><li>径向渐变由其中心点、边缘形状轮廓、两个或多个色值结束点定义而成</li></ul></blockquote><ol><li>设置颜色节点<br><code>color 10%</code>：设置颜色转换中点<br><code>color,10%,</code>：设置颜色起始点</li><li>设置径向渐变的形状 shape<br><code>ellipse</code>表示椭圆形(默认)<br><code>circle</code>表示圆形</li><li>指定径向渐变中心位置 position<br><code>at 10px 20px</code></li><li>指定不同尺寸的大小<br>|值|描述|<br>|<code>fathest-corner</code>|(默认)：渐变的边缘形状与容器距离渐变中心点最远的一个角相交|<br>|<code>closest-corner</code>|渐变的边缘形状与容器距离渐变中心点最近的一个角相交(水平与垂直边相交)|<br>|<code>fathest-side</code>|与closest-side相反，边缘形状与容器距离渐变中心点最远的一边相切(或最远的垂直或水平边)|<br>|<code>closest-side</code>|圆形：渐变的边缘形状与容器距离渐变中心点最近的一边想切；椭圆：距离渐变中心点最近的垂直和水平边相切|<blockquote><ul><li>径向渐变-椭圆<img src="径向渐变-椭圆.png"></li><li>径向渐变-圆<img src="径向渐变-圆.png"></li><li>注意：<code>shape</code>、<code>position</code>、<code>尺寸的关键词</code>，彼此之间用&#x3D;&#x3D;空格&#x3D;&#x3D;分隔，但是与颜色之间用<code>,</code>分隔。</li></ul></blockquote></li></ol><h3 id="五、背景相关属性的补充"><a href="#五、背景相关属性的补充" class="headerlink" title="五、背景相关属性的补充"></a>五、背景相关属性的补充</h3><blockquote><ul><li><code>background-image/size/position/repeat</code>后面都可以设置多个值，每组值之间用<strong>逗号</strong>分隔<ul><li>每个属性之间用逗号分割的值，都按顺序<strong>一一对应</strong>，如果后面的值没有写，则以当前属性设置的<strong>第一组值</strong>为默认显示</li></ul></li><li>线性渐变&#x2F;径向渐变实质上是绘制背景图片，所以既可以和<code>url()</code>写在一起，又可以被&#96;size&#x2F;position&#x2F;repeat等属性控制</li></ul></blockquote><h3 id="六、其他常用属性"><a href="#六、其他常用属性" class="headerlink" title="六、其他常用属性"></a>六、其他常用属性</h3><h4 id="1-cursor鼠标样式"><a href="#1-cursor鼠标样式" class="headerlink" title="1.cursor鼠标样式"></a>1.cursor鼠标样式</h4><blockquote><ul><li>设置光标的类型，在鼠标指针悬停在元素上时显示相应样式</li><li>可以用属性值设置样式，也可以用图片设置光标样式(即用url自定义)</li><li>使用方式：<code>cursor:url(自定义图片地址),pointer;</code></li></ul></blockquote><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>需使用的自定义光标的URL.注释:请在此列表的末端始终定义一种普通的光标，一方没有由URL定义的可用光标</td></tr><tr><td>default</td><td>默认光标(通常是一个箭头)</td></tr><tr><td>auto</td><td>默认，浏览器设置的光标</td></tr><tr><td>crosshair</td><td>光标呈现为十字线</td></tr><tr><td>pointer</td><td>光标呈现为指示链接的指针(一只手)</td></tr><tr><td>move</td><td>此光标指示某对象可被移动,四个箭头</td></tr><tr><td>n-resize</td><td>此光标指示矩形框的边缘可被向上(向北)移动</td></tr><tr><td>s-resize</td><td>向下(南)</td></tr><tr><td>w-resize</td><td>向左(西)</td></tr><tr><td>e-resize</td><td>向右(东)</td></tr><tr><td>ne-resize</td><td>东北向</td></tr><tr><td>nw-resize</td><td>西北向</td></tr><tr><td>se-resize</td><td>东南向</td></tr><tr><td>sw-resize</td><td>西南向</td></tr><tr><td>text</td><td>此光标指示文本</td></tr><tr><td>wait</td><td>此光标指示程序正忙(转圈圈&#x2F;一只表&#x2F;沙漏)</td></tr><tr><td>help</td><td>此光标指示可用的帮助(一个问号或一个气球)</td></tr></tbody></table><blockquote><p>关于url这个值需要注意：</p></blockquote><ul><li>图片地址，在实际开发中一般为绝对路径</li><li>图片大小最好是<code>32*32</code>的大小(各浏览器支持大小不一，但32都ok)</li><li>图片格式，不同浏览器格式不一，可以是<code>png</code>、<code>svg</code>、<code>ico</code>、<code>cur</code>，一般以ico和cur为主</li><li>ico在线图标生成器：<code>https://www.bitbug.net/</code><ul><li>文件路径有中文时，可以从浏览器复制地址</li></ul></li></ul><h4 id="2-outline外轮廓"><a href="#2-outline外轮廓" class="headerlink" title="2.outline外轮廓"></a>2.outline外轮廓</h4><blockquote><p>用于设置元素周围的轮廓，其用法与borser属性一样</p><ul><li>语法：<code>outline:1px solid red;</code></li></ul></blockquote><blockquote><p>小属性：</p></blockquote><ul><li><code>outline-width</code>边框宽</li><li><code>outline-style</code>边框风格</li><li><code>outline-color</code>边框颜色</li></ul><blockquote><p><code>outline</code>与<code>border</code>的区别</p></blockquote><ul><li><code>outline</code>不占据空间，绘制于元素内容周围的轮廓，不参与盒子模型的占位计算，不会因为添加这个属性，而造成盒子占位空间变化</li><li><code>outline</code>没办法单独控制某一边效果，也就是没有<code>outline-left</code>等属性</li><li><code>border</code>参与盒子模型计算，会因为边框值的变化而造成盒子占位空间的变化</li></ul><blockquote><p>去掉表单元素默认的<code>outline</code>属性</p></blockquote><ul><li><code>outline</code>的值设置为<code>0</code>或<code>none</code>会移除元素的默认轮廓</li><li>表单元素为了增加其可访问性(聚焦提示)，都有默认的outline值.在点击该元素后会出现黑色的外轮廓<img src="outlin.png"></li></ul><pre><code> input &#123;    outline:none; &#125;</code></pre><h4 id="3-overflow超出部分隐藏"><a href="#3-overflow超出部分隐藏" class="headerlink" title="3.overflow超出部分隐藏"></a>3.overflow超出部分隐藏</h4><blockquote><p>该属性规定当内容一出元素框时该做什么</p></blockquote><ul><li>属性值<table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>默认值，内容溢出，会呈现在元素框之外</td></tr><tr><td>hidden</td><td>内容溢出，则溢出内容不可见</td></tr><tr><td>scroll</td><td>不管内容是否溢出，都会显示滚动条</td></tr><tr><td>auto</td><td>内容溢出，则显示滚动条以便查看其余内容；若不溢出，则不显示滚动条</td></tr><tr><td>inherit</td><td>规定应该从父元素继承<code>overflow</code>属性的值</td></tr></tbody></table></li></ul><blockquote><p>overflow-x和overflow-y</p></blockquote><ul><li>overflow-x:水平方向溢出设置</li><li>overflow-y:垂直方向溢出设置</li><li>注意：是里面的盒子宽&#x2F;高比外面大，才是出效果，overflow要设置在外面盒子的样式中</li></ul><h4 id="4-vertical-align属性"><a href="#4-vertical-align属性" class="headerlink" title="4.vertical-align属性"></a>4.vertical-align属性</h4><blockquote><p>指定<strong>行内元素、行内块元素、表格单元格元素</strong>的&#x3D;&#x3D;垂直&#x3D;&#x3D;对齐方式</p><ul><li>对<strong>块级元素</strong>是无效的<table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>baseline</td><td>使元素的基线与父元素的<strong>基线</strong>对齐</td></tr><tr><td>sub</td><td>使元素的基线与父元素的<strong>下标基线</strong>对齐</td></tr><tr><td>super</td><td>使元素的基线与父元素的<strong>上标基线</strong>对齐</td></tr><tr><td>text-top</td><td>使元素的<strong>顶部</strong>与父元素的<strong>字体顶部</strong>对齐</td></tr><tr><td>text-bottom</td><td>使元素的<strong>底部</strong>与父元素的<strong>字体底部</strong>对齐</td></tr><tr><td>middle</td><td>使元素的中部与父元素的基线加上父元素x-height(x高度)的一半对齐</td></tr><tr><td>数值(px)</td><td>使元素的基线对齐到与父元素的基线之上的给定长度，可以是负数</td></tr><tr><td>百分比</td><td>使元素的基线对齐到父元素的基线至上的给定百分比，该百分比是<code>line-height</code>属性的百分比，可以是负数</td></tr><tr><td>top</td><td>使元素及其后代元素的顶部与整行的顶部对齐</td></tr><tr><td>bottom</td><td>使元素及其后代元素的底部与整行的底部对齐</td></tr></tbody></table></li></ul></blockquote><blockquote><ul><li>小写字母x的下边缘线就是我们的基线</li><li>无论内容中有无x，都是以x下边缘为基线<img src="baseline.png"></li></ul></blockquote><blockquote><p>应用场景</p></blockquote><ul><li>用于控制文字与行内块元素或图片在垂直方向上的对齐方式</li><li>用于设置表格单元中内容的垂直对齐方式</li></ul><blockquote><p>对比</p></blockquote><ol><li>行文本&#x3D;&#x3D;垂直&#x3D;&#x3D;居中<br><code>line-height:盒子高度</code></li></ol><ul><li>对行内块元素无效</li></ul><ol start="2"><li>text-align属性</li></ol><ul><li>定义**行内内容(例如文字、图片、行内块元素)**相对于他的父元素的&#x3D;&#x3D;水平&#x3D;&#x3D;对齐方式</li></ul><ol start="3"><li>vertical-align属性</li></ol><ul><li>指定**行内元素、行内块元素、表格单元格元素的&#x3D;&#x3D;垂直&#x3D;&#x3D;对齐方式</li><li>对于块级元素无效</li></ul><h4 id="5-案例"><a href="#5-案例" class="headerlink" title="5.案例"></a>5.案例</h4><ol><li>常用的a标签布局按钮</li><li>水平居中的轮播图按钮</li><li>常见的产品展示效果-水壶</li><li>常见的分页导航</li><li>小米官网左侧菜单<blockquote><ul><li><code>:hover</code>：鼠标放上去之后变样式</li></ul></blockquote></li><li>精美的Tab选项卡菜单<blockquote><ul><li>圆角</li></ul></blockquote></li></ol><h2 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h2><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><ul><li>网页本质上是由一个个盒子模型拼凑而成，每个盒子里放置相关的图片、文字、视频等内容</li><li>所有HTML标签都可以看成矩形盒子，具有盒子模型结构</li><li>盒模型由四个部分组成，分别是:<code>content</code>、<code>padding</code>、<code>border</code>、<code>margin</code></li><li>盒模型有5个属性:宽<code>width</code>、高<code>height</code>、边框<code>boder</code>、内边距<code>padding</code>、外边距<code>margin</code><img src="盒子模型.png"></li><li>注:<code>width</code>、<code>height</code>不是盒子的总宽度，而是内容<code>content</code>的宽高</li></ul></blockquote><h4 id="2-width和height属性"><a href="#2-width和height属性" class="headerlink" title="2. width和height属性"></a>2. width和height属性</h4><blockquote><ul><li>width属性<ul><li>单位:px、移动端开发(百分比、rem等单位)</li><li>如果不设置width,块级元素会被撑满(但不意味着width可以继承，是无法继承的)，非块级元素只能被内容撑开</li><li>块级元素的宽度可以设置，非块级元素无效</li></ul></li><li>height属性<ul><li>如果不设置height属性，它将自动被其内容撑开，若没有内容，则height默认是0</li><li>块级元素的高度可以设置，非块级元素由内容撑开</li></ul></li><li>总结<ul><li>块级元素支持设置宽高，没有设置时，宽度自动撑满它的父元素；高度为内容高度，无内容时<strong>高度</strong>为0；</li><li>内联元素设置宽高无效，没有设置时，宽高由内容决定，无内容时<strong>宽高</strong>默认为0</li></ul></li></ul></blockquote><blockquote><table><thead><tr><th>类型</th><th>元素</th><th>性质</th></tr></thead><tbody><tr><td>块级元素</td><td>h1~h6、p、div、ul&#x2F;ol-li、dtdd、figure、figcaption、form、table、canvas、pre</td><td>独占一行、默认自上而下排列，可以设置宽高</td></tr><tr><td>内联元素&#x2F;行内元素</td><td>a、span、lable、strong、em、mark、datalist</td><td>不会自占一行，宽高由内容撑起</td></tr><tr><td>特殊内联元素&#x2F;行内块级元素&#x2F;可替换元素</td><td>img、audio、video、input、select-option、textarea</td><td>不独占一行，可以设置宽高</td></tr></tbody></table></blockquote><h4 id="3-border属性"><a href="#3-border属性" class="headerlink" title="3. border属性"></a>3. border属性</h4><blockquote><ul><li>三要素:线宽度、线型、线颜色<br> 写法：<code>border:2px solid red</code>;以空格分隔<ul><li>线型:<table><thead><tr><th>常见线型值</th><th>描述</th></tr></thead><tbody><tr><td>solid</td><td>实线</td></tr><tr><td>dashed</td><td>虚线</td></tr><tr><td>dotted</td><td>点状线</td></tr><tr><td>double</td><td>双边框</td></tr><tr><td>groove</td><td>定义3D凹槽边框，效果取决于border-color的值</td></tr><tr><td>ridge</td><td>定义3D垄状边框，效果取决于boder-color的值</td></tr><tr><td>inset</td><td>3D inset 边框，其效果取决于 border-color的值</td></tr><tr><td>outset</td><td>3D outset 边框，其效果取决于 border-color 的值</td></tr><tr><td>none</td><td>无边框</td></tr><tr><td>hidden</td><td>隐藏边框</td></tr></tbody></table></li></ul></li></ul></blockquote><blockquote><ul><li>三要素的小属性：</li><li>注：是为了层叠大属性用的，进行局部修改<table><thead><tr><th>小属性</th><th>描述</th></tr></thead><tbody><tr><td>border-width</td><td>线宽</td></tr><tr><td>border-style</td><td>线型</td></tr><tr><td>border-color</td><td>线颜色</td></tr></tbody></table></li></ul></blockquote><blockquote><ul><li>四个方向的边框<table><thead><tr><th>大属性</th><th>小属性</th><th>描述</th></tr></thead><tbody><tr><td>border-top</td><td>border-top-width&#x2F;style&#x2F;color</td><td>上边框</td></tr><tr><td>border-right</td><td>border-right-width&#x2F;style&#x2F;color</td><td>右边框</td></tr><tr><td>border-bottom</td><td>同上</td><td>下边框</td></tr><tr><td>border-left</td><td>同上</td><td>左边框</td></tr></tbody></table></li><li>去掉边框<br>去掉左边框：<code>border-left:none;</code></li></ul></blockquote><h4 id="4-border的应用场景"><a href="#4-border的应用场景" class="headerlink" title="4. border的应用场景"></a>4. border的应用场景</h4><blockquote><ul><li>制作三角形<ul><li>不输入文字，把宽高设置为0</li><li>边框会聚集成正方形，每一边都是一个三角形，只要把其他三边设置成<code>transparent</code>透明色就可以了</li></ul></li></ul><pre class=" language-css"><code class="language-css">div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">30</span>px solid transparent<span class="token punctuation">;</span> <span class="token property">border-top-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&lt;body> &lt;div>&lt;/div>&lt;/body></code></pre></blockquote><blockquote><ul><li>圆角属性border-radius<ul><li>该属性单位通常为<code>px</code>，表示圆角的半径</li><li>还可以使用百分比做单位，表示圆角起始于每条边的哪里</li><li>不输入文本内容，设置圆角</li><li>赋值方式：<ul><li>同时设置四个角<code>border-radius:20px;</code></li><li>单独设置四个角<code>border-radius:10px 20px 30px 40px;</code>分别代表“上右下左”</li><li>单独设置每一个角：小属性</li></ul></li></ul></li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>border-top-left-radius</code></td><td>左上角</td></tr><tr><td><code>border-top-right-radius</code></td><td>右上角</td></tr><tr><td><code>border-bottom-left-radius</code></td><td>左下角</td></tr><tr><td><code>border-bottom-right-radius</code></td><td>右下角</td></tr></tbody></table><pre><code>border-radius:50%; /*盒子为正方形时是圆*/border-radius:  px;/*圆，数值正方形宽度的一半*/border-radius: 50%;/*盒子为长方形时是椭圆*/</code></pre></blockquote><h4 id="5-padding内边距"><a href="#5-padding内边距" class="headerlink" title="5. padding内边距"></a>5. padding内边距</h4><blockquote><ul><li>padding是边框内壁到内容之间的距离</li></ul></blockquote><blockquote><ul><li>数值的写法，以空格分隔<table><thead><tr><th>数值</th><th>说明</th><th>示范</th></tr></thead><tbody><tr><td>四个数值</td><td>分别表示<code>上右下左</code></td><td><code>padding:10px 20px 30px 40px</code></td></tr><tr><td>&#x3D;&#x3D;三个数值&#x3D;&#x3D;</td><td>分别表示<code>上、左右、下</code></td><td><code>padding:10px 20px 30px</code></td></tr><tr><td>两个数值</td><td><code>上下、左右</code></td><td><code>padding:10px 20px</code></td></tr><tr><td>一个数值</td><td>四个边距相等</td><td><code>padding:10px;</code></td></tr></tbody></table></li><li>应用场景：如果需要设置父子间间距，即给父元素添加内边距来实现</li></ul></blockquote><blockquote><ul><li>小属性：四个方向可以分别设置，用来层叠大属性<table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>padding-top</code></td><td>上内边距</td></tr><tr><td><code>padding-right</code></td><td>右内边距</td></tr><tr><td><code>padding-bottom</code></td><td>下内边距&#96;</td></tr><tr><td><code>padding-left</code></td><td>左内边距</td></tr></tbody></table></li></ul></blockquote><blockquote><p><code>padding-bottom:100%;</code>可以使元素高度等于宽度</p></blockquote><h4 id="6-margin外边距"><a href="#6-margin外边距" class="headerlink" title="6. margin外边距"></a>6. margin外边距</h4><blockquote><ul><li>是盒子与其他盒子之间的距离</li><li>有四个方向可以分别设置</li></ul></blockquote><blockquote><ul><li>数值的写法与<code>padding</code>相同<table><thead><tr><th>数值</th><th>说明</th><th>示范</th></tr></thead><tbody><tr><td>四个数值</td><td>分别表示<code>上右下左</code></td><td><code>padding:10px 20px 30px 40px</code></td></tr><tr><td>&#x3D;&#x3D;三个数值&#x3D;&#x3D;</td><td>分别表示<code>上、左右、下</code></td><td><code>padding:10px 20px 30px</code></td></tr><tr><td>两个数值</td><td><code>上下、左右</code></td><td><code>padding:10px 20px</code></td></tr><tr><td>一个数值</td><td>四个边距相等</td><td><code>padding:10px;</code></td></tr></tbody></table></li></ul></blockquote><blockquote><ul><li>小属性：四个方向可以分别设置，用来层叠大属性<table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>margin-top</code></td><td>上外边距</td></tr><tr><td><code>margin-right</code></td><td>右外边距</td></tr><tr><td><code>margin-bottom</code></td><td>下外边距</td></tr><tr><td><code>margin-left</code></td><td>左外边距</td></tr></tbody></table><blockquote><p>注意：</p></blockquote></li><li>如果数值是百分比，则是以其&#x3D;&#x3D;父盒子的宽度&#x3D;&#x3D;为基础的，等于父盒子宽度的百分之几</li></ul></blockquote><blockquote><ul><li>margin的塌陷</li><li>又称为：外间距重叠&#x2F;外边距合并&#x2F;外边距穿透</li></ul><ol><li>兄弟元素之间，<strong>垂直</strong>方向：上下外边距出现塌陷</li></ol><ul><li>第一个元素的下外边距与第二个元素的上外边距会发生合并</li><li>margin不会叠加，只以大值为准</li><li>解决办法：<ul><li>任何一个元素加上<code>display:inline-block;</code></li><li>把外边距只加在其中一个元素上</li><li>任意一个元素margin换成对应的<code>padding</code>：把其中一个盒子外边距删除，然后套上透明色，内边距为原本的margin的盒子或者套上<code>padding-top</code>&#x3D;margin的盒子</li></ul></li></ul><ol start="2"><li>margin在<strong>水平</strong>方向上不会塌陷</li><li>父子元素之间，垂直方向：上外边距塌陷</li></ol><ul><li>当一个元素包含在另一元素中时，如果父元素没有设置内边距<strong>或</strong>边框把外边距分隔开，他们的上外边距也会发生塌陷(合并)</li><li>原本子元素设置margin后会与父元素的边框产生距离，但因为发生塌陷，所以父子元素上边框重叠，子元素的外边距穿透出去，与父元素的外边距合并</li><li>塌陷是最大值为主</li><li>解决办法：<ul><li>给父元素加上<code>overfiow:hidden</code>;但子元素超出的部分会被隐藏</li><li>给父元素添加<code>border</code>边框；但占位宽会多两像素</li><li>把子元素外边距删除，然后套上透明色，内边距为原本的margin的盒子或者套上<code>padding-top</code>&#x3D;margin的盒子</li><li>还有更多方法，学完浮动、定位后会讲解</li></ul></li><li>垂直或者父子元素的解决办法3：</li></ul><pre><code>&lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;&lt;div style=&quot;padding-top:30px;&quot;&gt;  &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre></blockquote><blockquote><ul><li>margin负值</li><li>讲完浮动后再学习</li></ul></blockquote><h4 id="7-去掉元素的默认样式"><a href="#7-去掉元素的默认样式" class="headerlink" title="7. 去掉元素的默认样式"></a>7. 去掉元素的默认样式</h4><blockquote><ul><li>网页中的元素为了展示元素本身的用途和结构，都会给元素添加默认的样式</li><li>常见的默认样式如下：<ul><li><code>body</code>的默认margin&#x3D;8px</li><li><code>ul</code>添加了默认的<code>padding</code>、<code>list-style</code>、<code>margin</code></li><li>a标签添加了默认的颜色、下划线</li><li>p标签有默认的<code>margin</code></li></ul></li><li>怎么做？<ul><li>用通配符选择器；实际工作中不使用<br><code>* &#123;margin:0;padding:0;&#125;</code></li><li>使用并集选择器，用<code>,</code>分隔</li></ul></li></ul><pre><code>body,ul,p &#123;    margin:0;padding:0;    &#125;</code></pre></blockquote><h4 id="8-盒子的水平居中"><a href="#8-盒子的水平居中" class="headerlink" title="8. 盒子的水平居中"></a>8. 盒子的水平居中</h4><blockquote><ul><li>将盒子的左右margin设置为<code>auto</code>，将盒子水平居中，只对块级元素有效</li><li><code>auto</code>用在上下外边距时没有用</li><li>文字、图片、行内块元素水平居中：<code>text-align:center</code></li><li>块级元素水平居中，是给元素自身加上<code>margin:0 auto;</code></li><li>盒子的垂直居中，需要使用绝对定位技术实现(后边会讲到)</li></ul></blockquote><h4 id="9-盒子模型占位计算"><a href="#9-盒子模型占位计算" class="headerlink" title="9. 盒子模型占位计算"></a>9. 盒子模型占位计算</h4><blockquote><ul><li>盒模型内容区大小：</li><li>在标准盒子模型中，决定了父元中的子元素能占据的最大宽高<ul><li>如果只有一个子元素，其宽度超过父元，就会溢出(对内联元素无效，因为内联元素不能设置宽高)</li><li>如果有多个子元素(行内元素、行内块元素)，子元的宽度加起来超过了父元，那么超过的那些子元就会换行显示。(块级元素本来就独占一行)</li></ul></li></ul></blockquote><blockquote><ul><li>盒模型可视宽高：在页面呈现效果的区域<ul><li>可视宽度：内容区宽度+左右内边距+左右边框</li><li>可视高度：内容区高度+上下内边距+上下边框</li></ul></li></ul></blockquote><blockquote><ul><li>实际占位宽高</li><li>决定了这个元素在父元素中的占据面积<ul><li>实际宽度：内容区宽度+左右内边距+左右边框左右外边距</li><li>实际高度：内容区高度+左右内边距+左右边框左右外边距</li></ul></li></ul></blockquote><h3 id="怪异盒模型-IE盒子模型，CSS3新增"><a href="#怪异盒模型-IE盒子模型，CSS3新增" class="headerlink" title="怪异盒模型(IE盒子模型，CSS3新增)"></a>怪异盒模型(IE盒子模型，CSS3新增)</h3><h4 id="1-盒模型分为两种"><a href="#1-盒模型分为两种" class="headerlink" title="1. 盒模型分为两种"></a>1. 盒模型分为两种</h4><blockquote><ul><li>标准盒模型：盒子大小会因为设置的内外边距和边框而变化，即：外扩</li><li>怪异盒模型：盒子的实际大小是设置的大小(width、height),不会因为内外边距、边框的大小而变化，即内缩</li><li>二者之间的区别：<ul><li>标准盒模型的width和height设置的是内容区；而在怪异盒模型中，width和height包括内容区、边框、内边距</li><li>尺寸计算公式不同</li></ul></li></ul></blockquote><h4 id="2-计算公式"><a href="#2-计算公式" class="headerlink" title="2.计算公式"></a>2.计算公式</h4><blockquote><ul><li>width&#x3D;内容区宽度+边框+内边距</li><li>height&#x3D;内容区高度+边框+内边距</li><li>在以上公式中，除内容区以外的都可以设置宽高，所以内容区的宽高可以反推计算</li></ul></blockquote><h4 id="3-盒模型转换"><a href="#3-盒模型转换" class="headerlink" title="3. 盒模型转换"></a>3. 盒模型转换</h4><blockquote><p>通过<code>box-sizing</code>属性切换盒子模型</p><ul><li><code>box-sizing:content-box;</code>是默认值，盒子以标准盒子模型特性来渲染</li><li><code>box-sizing:border-box;</code>使盒子以怪异盒子模型特性来渲染</li></ul></blockquote><h4 id="4-button-按钮"><a href="#4-button-按钮" class="headerlink" title="4. button 按钮"></a>4. button 按钮</h4><blockquote><ul><li><code>button</code>标签自带<code>box-sizing:border;</code>属性</li><li>所以<code>div</code>和<code>button</code>的大小是有差异的，button内缩，div外扩</li></ul></blockquote><h4 id="5-box-sizing应用场景"><a href="#5-box-sizing应用场景" class="headerlink" title="5. box-sizing应用场景"></a>5. box-sizing应用场景</h4><blockquote><ul><li><code>box-sizing</code>属性大量应用于移动网页制作中，因为它结合百分比布局、弹性布局等非常好用，在PC页面开发中使用较少</li><li>该属性兼容到IE9</li><li>若我们期望不管内容、边框、内边距大小如何变化，元素的可视宽高始终不变时，就可以给元素添加<code>box-sizing:border-box;</code>属性，以怪异盒模型来渲染</li><li>不管元素的占位宽如何变化，始终保持边框和内边距不变，希望通过改变内容区大小来达到目的</li><li>常见的响应式开发中、栅格系统等</li></ul></blockquote><h3 id="前端切图工具"><a href="#前端切图工具" class="headerlink" title="前端切图工具"></a>前端切图工具</h3><table><thead><tr><th>软件名称</th><th>功能</th><th>描述</th><th>官网下载地址</th></tr></thead><tbody><tr><td>Snipaste</td><td>截图+贴图</td><td>个人模仿他人效果可用</td><td><a href="https://zh.snipaste.com/">https://zh.snipaste.com/</a></td></tr><tr><td>PxCook</td><td>标注+代码生成(psd)</td><td>是一款连接设计师到开发者之间的协作工具</td><td><a href="https://www.fancynode.com.cn/pxcook/">https://www.fancynode.com.cn/pxcook/</a></td></tr><tr><td>Photoshop</td><td>专业的图片软件处理工具</td><td>实际企业开发设计软件</td><td><a href="https://www.adobe.com/cn/products/photoshop.html">https://www.adobe.com/cn/products/photoshop.html</a></td></tr><tr><td>蓝湖</td><td>产品设计协作平台</td><td>实际企业团队开发协作</td><td><a href="https://lanhuapp.com/">https://lanhuapp.com/</a></td></tr></tbody></table><h4 id="1-photoshop设计软件"><a href="#1-photoshop设计软件" class="headerlink" title="1.photoshop设计软件"></a>1.photoshop设计软件</h4><blockquote><p>助理老师破解版安装教程</p><ul><li>下载、解压压缩包</li><li>&#x3D;&#x3D;断网安装&#x3D;&#x3D;，断网后直接点击Set-up-exe进入安装，过程中不需要任何操作，等待5-10分钟即可</li><li>安装好后,通过window键打开</li><li>使用时，把对应的psd设计稿拖动到软件区域即可</li></ul></blockquote><h4 id="2-PxCook像素大厨"><a href="#2-PxCook像素大厨" class="headerlink" title="2.PxCook像素大厨"></a>2.PxCook像素大厨</h4><blockquote><ul><li>设计师可以免去繁琐的标注功能，前端工程师也可以更加直观的查看设计稿中的元素的内容，间距，尺寸和样式等</li><li>它还可以为工程师直接呈现选中元素的多平台样式代码和素材切图</li><li>官方使用教程：<a href="https://www.fancynode.com.cn/pxcook/docs?ids=qa/pay">https://www.fancynode.com.cn/pxcook/docs?ids=qa/pay</a></li></ul></blockquote><h4 id="3-PS与PxCook配合"><a href="#3-PS与PxCook配合" class="headerlink" title="3.PS与PxCook配合"></a>3.PS与PxCook配合</h4><blockquote><ul><li>设计师用PS设计稿设计好的PSD的效果图后，接下来的工作就是交给程序员来开发成网页</li><li>首先程序员需要把PSD设计稿按开发的需求标记qieytu切图，导出需要的图片素材</li></ul></blockquote><blockquote><ul><li>连接Pxcook和PS</li></ul><ol><li>打开PS–&gt;编辑–&gt;远程连接–&gt;启用远程连接–&gt;设置密码</li><li>打开Pxcook，点击右上角的小刀图标，输入密码，连接成功</li></ol></blockquote><blockquote><ul><li>标记切图：<ul><li>打开pxccok，建立新项目</li><li>将图片拖入PS–&gt;选择图层–&gt;窗口–&gt;扩展功能–&gt;pxccok切图–&gt;选择设备类型、分辨率、保存–&gt;导出到pxcook</li><li>在pxcook后，点击黑色区域，就可以看到PNG，点击保存</li></ul></li><li>分析效果图<ul><li>分析结构，上下结构&#x2F;左右结构</li><li>先拿到效果图，分析它的html结构</li><li>清除默认样式(样式初始化)</li><li>搭建html结构，再写CSS样式</li></ul></li><li>自定义切图的尺寸<ul><li>首先需要确保被标记的图层为图层组，若不是则需要打组</li><li>建立一个组，然后把所需的图层放入组内</li><li>在组内创建一个名为<code>@bounds</code>或<code>#</code>的·图层，通过矩形工具，在该图层内绘制一个举行来描述要切除切片的范围</li><li>打开扩展工具——pxccok标记为切图–&gt;保存–&gt;导入pxcook<br>注意：自定义切图导出到pxcook界面也是完整图，双击项目图，左边就会出现自定义切图<img src="自定义切图.png"></li></ul></li></ul></blockquote><h4 id="4-出现的问题"><a href="#4-出现的问题" class="headerlink" title="4.出现的问题"></a>4.出现的问题</h4><blockquote><ul><li>PS安装后打开时一直在加载中</li></ul><ol><li>打开编辑–&gt;首选项–&gt;常规–&gt;勾选”停用主页屏幕”<img src="PS停用主页屏幕.png"></li></ol><ul><li>PS扩展界面无法打开</li></ul><ol><li>打开注册器(在win中搜索注册器，或者按住快捷键”WIN+R”,输入”regedit”)</li><li>打开以下路径：”计算机\HKEY_CURRENT_USER\Software\Adobe\CSXS.9”</li><li>新建字符串值，输入名称”PlayerDebugMode”，值为”1”</li><li>重新打开PS即可</li></ol></blockquote><h2 id="CSS-三大特性：继承、层叠性、优先级"><a href="#CSS-三大特性：继承、层叠性、优先级" class="headerlink" title="CSS 三大特性：继承、层叠性、优先级"></a>CSS 三大特性：继承、层叠性、优先级</h2><blockquote><p>在实际的开发中，经常会遇到CSS应用时的冲突问题。比如本来应该产生效果的样式没有生效，或有时候不想要的效果硬实现了。<br>CSS三大特性：继承性、层叠性、优先级就是为解决这些问题而来的。</p></blockquote><h3 id="一、CSS继承性"><a href="#一、CSS继承性" class="headerlink" title="一、CSS继承性"></a>一、CSS继承性</h3><ul><li>CSS的继承性是指特定的CSS属性会向下传递到子孙元素。即祖先元素设置，后代元素即生效</li></ul><h4 id="CSS继承性遵循”就近原则”"><a href="#CSS继承性遵循”就近原则”" class="headerlink" title="CSS继承性遵循”就近原则”"></a>CSS继承性遵循”就近原则”</h4><blockquote><ul><li>如果元素自身没有设置某个具有可继承的属性，则会向他的父元素继承</li><li>如果父元素没有，则再往上继承父元素的父元素的这个属性，一层一层向上找，如果找不到，就以默认的样式显示</li></ul></blockquote><blockquote><p>如何查看元素的默认值?</p></blockquote><ul><li>要了解一个属性的默认值，可以把这个属性值设置为<code>initial</code>，然后审查元素，在computed&#x2F;styles面板中可以看到其默认值，如<code>color:initial</code></li></ul><h4 id="可继承和不可继承属性有哪些"><a href="#可继承和不可继承属性有哪些" class="headerlink" title="可继承和不可继承属性有哪些"></a>可继承和不可继承属性有哪些</h4><blockquote><p>可继承属性:<strong>文本相关的属性</strong>普遍具有继承性，只需要给祖先标签设置，即可在后代所有标签中生效</p></blockquote><ul><li>字体系列：font-size、font-family、font-style、font、font-weight</li><li>文本系列：color、text-align、text-indent、line-height、word-spacing、letter-spacing、text-transform</li><li>列表布局属性：list-style、list-style-type、list-style-image、list-style-image</li><li>光标属性：cursor光标显示为何种形态</li><li>元素可见性：visibility控制元素显示和隐藏</li></ul><blockquote><p>不可继承属性</p></blockquote><ul><li>盒子模型：display、margin、border、padding、height、min-height、max-height、width、min-width、max-width</li><li>定位相关：position、left、right、top、bottom、z-index</li><li>浮动：float、clear</li><li>其他：background、overflow、table-layout、vertical-align、page-break-after、page-bread-before、unicode-bidi</li></ul><h4 id="特殊情况："><a href="#特殊情况：" class="headerlink" title="特殊情况："></a>特殊情况：</h4><ul><li>a标签的color值默认不继承，它自带默认效果</li></ul><h4 id="line-height的继承性"><a href="#line-height的继承性" class="headerlink" title="line-height的继承性"></a>line-height的继承性</h4><blockquote><p><code>line-height</code>的值有三种单位，在继承时是有差异的</p><table><thead><tr><th>父元素line-height值</th><th>继承规则</th><th>子元素line-height值</th></tr></thead><tbody><tr><td>50px</td><td>直接继承该值</td><td>50px</td></tr><tr><td>2</td><td>直接继承该比例</td><td>2</td></tr><tr><td>200%</td><td>继承百分比<strong>计算后</strong>的值</td><td>40px</td></tr></tbody></table></blockquote><ul><li>数值表示法和百分比表示法是以<code>font-size</code>为依据的<img src="line-height.png"></li></ul><h4 id="body标签样式初始化"><a href="#body标签样式初始化" class="headerlink" title="body标签样式初始化"></a>body标签样式初始化</h4><blockquote><p>因为文字相关属性具有继承性，所以通常会设置<code>&lt;body&gt;</code>标签的字号、颜色、行高等，这样就能当做整个网页的默认样式了</p></blockquote><h4 id="设置继承性"><a href="#设置继承性" class="headerlink" title="设置继承性"></a>设置继承性</h4><blockquote><p>默认不继承的属性想要继承，可以把属性值设置为<code>inherit</code>，表示这个属性的值继承父元素的<br>扩展补充知识</p></blockquote><ul><li><code>initial</code>：设置属性值和浏览器默认样式相同</li><li><code>inherit</code>：设置属性值默认继承父元素</li><li><code>unset</code>：为以上两个值的组合；如果属性有继承性，则继承父元素，没有则为默认值(不设置也是这个效果)</li></ul><h3 id="二、CSS层叠性"><a href="#二、CSS层叠性" class="headerlink" title="二、CSS层叠性"></a>二、CSS层叠性</h3><blockquote><ul><li>层叠性是CSS的一个基本特征，它是一个定义了如何合并来自多个源(css规则)的属性值的算法</li><li>它在CSS中处于核心地位，CSS的全称：层叠样式表正式强调了这一点</li></ul></blockquote><h4 id="CSS层叠性解读"><a href="#CSS层叠性解读" class="headerlink" title="CSS层叠性解读"></a>CSS层叠性解读</h4><blockquote><ul><li>层叠性是指多个CSS规则可以作用于同一个标签，效果叠加，并不完全覆盖</li><li>CSS的层叠性有两层含义：<strong>叠加</strong>和<strong>覆盖</strong></li><li>不同选择器作用于同一元素，不同属性会<strong>叠加</strong>，相同属性会<strong>覆盖</strong></li><li>在覆盖时需要遵循两大原则：”就近原则”和”优先级”</li></ul></blockquote><h4 id="CSS的叠加原理"><a href="#CSS的叠加原理" class="headerlink" title="CSS的叠加原理"></a>CSS的叠加原理</h4><blockquote><ul><li>不同选择器作用于同一元素，不同属性会叠加作用于元素</li></ul></blockquote><h4 id="CSS的覆盖原则"><a href="#CSS的覆盖原则" class="headerlink" title="CSS的覆盖原则"></a>CSS的覆盖原则</h4><blockquote><p>就近原则</p></blockquote><ul><li>当两个或多个<strong>优先级相同</strong>的选择器作用到同一个元素时。如果出现相同的属性，则以写在后面的选择器中的属性为主</li></ul><blockquote><p>优先级</p></blockquote><ul><li>当两条或多条规则(选择器)作用到同一个元素，如果出现相同的属性，则以优先级高的为主</li></ul><h4 id="层叠性的冲突处理"><a href="#层叠性的冲突处理" class="headerlink" title="层叠性的冲突处理"></a>层叠性的冲突处理</h4><ul><li>不同CSS规则集同时作用于同一个标签，不同属性相互叠加，相同属性会覆盖</li><li>相同属性覆盖，首先需要计算选择器的权重，最后以选择器权重高的为主</li><li>如果选择器权重相同，则写在后面的会覆盖写在前面的</li><li>如果想要实现的效果，因为选择器权重低而不生效，则通过提高选择器权重来达到效果</li></ul><h3 id="三、CSS选择器优先级"><a href="#三、CSS选择器优先级" class="headerlink" title="三、CSS选择器优先级"></a>三、CSS选择器优先级</h3><ul><li>当多个CSS规则集同时作用于同一个HTML标签时，不同属性会叠加，但相同属性会发生覆盖</li><li>在发生覆盖时，浏览器通过选择器的优先级来判断以哪个选择器中的属性值为主，从而在该元素上应用这些属性值</li></ul><h4 id="单个选择器类型的权重"><a href="#单个选择器类型的权重" class="headerlink" title="单个选择器类型的权重"></a>单个选择器类型的权重</h4><ul><li><p>基础选择器：id选择器&gt;class选择器&gt;标签选择器&gt;通配符选择器</p></li><li><p>本质上不同类型的选择器有不同的分数值，分数值越高，选择器的权重越高</p><table><thead><tr><th>选择器的类型</th><th>实例</th><th>选择器权重</th><th>等级</th></tr></thead><tbody><tr><td>!important</td><td><code>div&#123;color:red!important;&#125;</code></td><td>无穷大</td><td>特级</td></tr><tr><td>行内样式(style属性中样式)</td><td><code>style=&#39;color:red&#39;;</code></td><td>1000</td><td>第一等级</td></tr><tr><td>id选择器</td><td>#id</td><td>0100</td><td>第二等级</td></tr><tr><td>class、伪类、属性选择器</td><td><code>.box</code>、<code>:hover</code>、<code>type=text</code></td><td>0010</td><td>第三等级</td></tr><tr><td>标签选择器、伪元素选择器</td><td><code>div1、</code>::after&#96;</td><td>0001</td><td>第四等级</td></tr><tr><td>通配符、子选择器、相邻选择器等</td><td><code>*</code>、<code>&gt;</code>、<code>+</code>、<code>~</code></td><td>0000</td><td></td></tr><tr><td>继承的样式</td><td></td><td>0000</td><td></td></tr></tbody></table></li><li><p>通配符<code>*</code>权重实际是要大于继承的样式的；因为只有在没有设置样式是才会继承或者使用默认样式</p></li></ul><h4 id="复杂选择器优先级计算"><a href="#复杂选择器优先级计算" class="headerlink" title="复杂选择器优先级计算"></a>复杂选择器优先级计算</h4><ul><li>优先级就是分配给指定的CSS声明的一个权重</li><li>选择器的优先级是由选择器中的每一种**选择器类型的数值(权值)**相加的最终结果来决定</li><li>一个选择器的优先级是有四个部分相加计算得来的(数值越大，代表选择器的优先级越高)<br><strong>以下是复杂选择器的权重计算规则</strong></li><li>这里的行内样式<code>&lt;p style=&quot;color:red&quot;&gt;&lt;/p&gt;</code>并不是选择器，但我们把它放在一起，是因为它会影响我们最终的结果<table><thead><tr><th>选择器</th><th>千位</th><th>百位</th><th>十位</th><th>个位</th><th>优先级</th></tr></thead><tbody><tr><td>行内样式</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1000</td></tr><tr><td><code>div p</code></td><td>0</td><td>0</td><td>0</td><td>2</td><td>0002</td></tr><tr><td><code>#box div p</code></td><td>0</td><td>1</td><td>0</td><td>2</td><td>0102</td></tr></tbody></table></li></ul><p>|<code>.box .item h3</code>|0|0|2|1|0021|<br>|<code>.box:hover p</code>|0|0|2|1|0021|</p><blockquote><p>注意事项：</p></blockquote><ul><li>在进行选择器权重计算时不允许进行<strong>进位</strong></li><li>例如，20个类选择器仅仅意味着20个十位，而不能视为两个百位；也就是说，无论多少个类选择器的权重叠加，都不会超过一个ID选择器</li><li>在比较选择器优先级时，从左往右比较，一位一位比较</li></ul><h4 id="important提升权重"><a href="#important提升权重" class="headerlink" title="!important提升权重"></a><code>!important</code>提升权重</h4><ul><li>当在一个样式声明中使用一个<code>!important</code>规则时，此声明将覆盖任何其他声明，只要CSS声明属性值后面带<code>!important</code>，就一定以它为主</li><li>从技术上讲，<code>!important</code>与优先级无关，但它与最终结果直接相关</li></ul><blockquote><p>注意：慎用<code>!important</code></p></blockquote><ul><li>因为这会带来样式的冲突，后面某个地方，需要重写这个样式时，会发现根本无效。一般你在利用第三方组件或css框架时，如果不能充下央视，那将会失去很多色彩</li><li>在某些情况下是一定要用的，比如在之前学的自定义字体时，<code>font-family</code>属性后面加了<code>!important</code>关键字</li></ul><h4 id="总结：CSS选择器优先级"><a href="#总结：CSS选择器优先级" class="headerlink" title="总结：CSS选择器优先级"></a>总结：CSS选择器优先级</h4><blockquote><p>首先要找到，有<strong>哪些选择器</strong>在控制标签元素的样式，然后按以下五步来分析</p></blockquote><ul><li>第一步：找有没有带<code>important</code>关键词的CSS声明，有就一定以他为主，没有看第二步</li><li>第二步：找有没有行内样式，有则以行内样式为主，没有看第三步</li><li>第三步：看选择器的优先级，优先级高的为主，如果优先级相同，则看第四步</li><li>第四步：优先级相同，以写在后面的为主。如果没有选择器作用于当前标签，则看第五步</li><li>看此CSS属性是否具有继承性，如果有，则继承父元素的样式，如果没有，则以默认样式显示</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS核心知识点（一）</title>
      <link href="/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="CSS基础认知"><a href="#CSS基础认知" class="headerlink" title="CSS基础认知"></a>CSS基础认知</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><blockquote><p>CSS又称层叠样式表，它是一种标记语言，而不是编程语言</p><p>作用：给html标签添加样式</p><p>CSS已经发展到CSS3，在最新版本3.0中，增加了大量功能，以前只能用JS才能实现的现在用CSS3也能做到</p><p>要清楚CSS3新增了哪些功能，与之前版本的不同在哪</p><p>web前端三大核心基础：</p></blockquote><table><thead><tr><th>分层</th><th>语言</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td>结构层</td><td>HTML</td><td>搭建结构、放置部件、描述语义</td><td>骨骼</td></tr><tr><td>样式层</td><td>CSS</td><td>美化页面，实现布局</td><td>皮肤</td></tr><tr><td>行为层</td><td>JavaScript</td><td>实现交互效果，数据收发、表单验证等</td><td>神经</td></tr></tbody></table><h3 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h3><h4 id="CSS规则集：选择器-声明块"><a href="#CSS规则集：选择器-声明块" class="headerlink" title="CSS规则集：选择器+声明块"></a>CSS规则集：选择器+声明块</h4><ul><li>选择器是指需要改变样式的html元素</li><li>声明块用<code>&#123;&#125;</code>包裹，里面有多条声明，每条声明块之间用<code>;</code>间隔</li><li>每条声明包含一个属性名称和一个值，以冒号分隔<ul><li>最后一条声明可以不写<code>;</code>，但为了统一标准，建议书写完整</li></ul></li></ul><h4 id="CSS样式的书写方式"><a href="#CSS样式的书写方式" class="headerlink" title="CSS样式的书写方式"></a>CSS样式的书写方式</h4><ul><li><strong>方式一</strong>：每一行一条声明，选择器与声明之间一个空格，冒号后面一个空格</li></ul><pre><code>p &#123;    color: red;    font-size: 20px;&#125;</code></pre><blockquote><p>开发中使用方式一，方便阅读和修改</p></blockquote><ul><li><strong>方式二</strong>：选择器和声明写在一行</li></ul><pre><code>p &#123;color: red;font-size: 20px;&#125;</code></pre><ul><li>项目上线时，会把CSS样式进行压缩，压缩后就是方式二的写法</li></ul><h4 id="CSS注释"><a href="#CSS注释" class="headerlink" title="CSS注释"></a>CSS注释</h4><ul><li>注释方式：<code>/* 注释 */</code></li><li>位置：只能放置在style里</li><li>快捷键：<code>ctrl+/</code></li></ul><blockquote><p>与html注释的区别：</p></blockquote><ul><li>写法：<code>&lt;!-- 注释--&gt;</code></li><li>能放置在html的任何位置</li></ul><h4 id="CSS的书写位置"><a href="#CSS的书写位置" class="headerlink" title="CSS的书写位置"></a>CSS的书写位置</h4><ul><li><strong>方式一</strong>：行内样式<ul><li>在标签中加入style属性</li></ul></li></ul><pre><code>&lt;h2 style=&quot;color: red&gt;行内样式&lt;/h2&gt;</code></pre><ul><li><strong>方式二</strong>：内嵌样式&#x2F;内部样式<ul><li>在<code>&lt;head&gt;&lt;/head&gt;</code>标签对中写style属性</li><li>在HTML5中，type可以不写</li></ul></li></ul><pre><code>&lt;head&gt;省略html框架&lt;style type=&quot;text/css&quot;&gt;h1 &#123;    color: bule;    font-size: 20px    &#125;&lt;/style&gt;&lt;/head&gt;</code></pre><ul><li><strong>方式三</strong>：外链样式&#x2F;外部样式<ul><li>新建一个<code>.css</code>文件，使用link标签引入到界面中</li><li>link标签要写在head中</li><li>优点：多个网页可以共用一个CSS样式文件</li></ul></li></ul><pre><code>&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;文件路径&quot;/&gt;&lt;/head&gt;</code></pre><blockquote><p>&#96;rel&#x3D;”stylesheet可以不写”</p></blockquote><ul><li><strong>方式四</strong>：导入式样式<ul><li>导入<code>.css</code>的文件</li><li>缺点：使用导入式的样式表，页面加载完成后才会加载样式；所以在CSS文件加载完成之前，网页就会呈现没有CSS样式的裸奔现象</li></ul></li></ul><pre><code>&lt;style&gt;    @import url(文件路径)&lt;/style&gt;</code></pre><ul><li>实际开发中很少用到</li></ul><blockquote><p>总结：CSS4 种书写位置特点与区别</p></blockquote><!-- |引入方式|书写位置|作用范围|优先级|使用场景||---|---|---|---|---||行内样式|css 样式写在标签的 style 属性中|当前标签|最高配合|JS 或特殊需求||内嵌样式|写在<style>标签中|当前页面|由书写位置和选择器优先级来共同决定|小案例 或 对网站首页首次打开速度要求很高的网页需要；如：百度、腾讯首页||外链样式|css 样式写在单独 css 文件中，通过 link 标签引入|多个页面|由书写位置和选择器优先级来共同决定|项目开发中高频使用||导入式样式|把@import 放在style标签中或 CSS 文件中，用于导入外部 CSS 样式文件|被导入的页面|最低|项目开发中几乎不用（用作了解即可）| --><h4 id="CSS样式的优先级"><a href="#CSS样式的优先级" class="headerlink" title="CSS样式的优先级"></a>CSS样式的优先级</h4><blockquote><p>&#x3D;&#x3D;行内样式&#x3D;&#x3D;的优先级最高</p><p>内联样式和外部样式优先级相同，按照&#x3D;&#x3D;就近原则&#x3D;&#x3D;渲染：渲染离标签更近的</p></blockquote><h3 id="三、CSS选择器"><a href="#三、CSS选择器" class="headerlink" title="三、CSS选择器"></a>三、CSS选择器</h3><h4 id="选择器分类"><a href="#选择器分类" class="headerlink" title="选择器分类"></a>选择器分类</h4><ul><li>传统 CSS2.1 选择器<ul><li>标签选择器和 id 选择器</li><li>class（类）选择器</li><li>复合选择器</li><li>伪类</li><li>CSS3 新增选择器</li></ul></li><li>元素关系选择器<ul><li>序号选择器</li><li>属性选择器</li><li>CSS3 新增伪类</li><li>伪元素</li></ul></li><li>层叠性和选择器权重计算</li></ul><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><ul><li>又称元素选择器&#x2F;类型选择器</li><li>直接使用&#x3D;&#x3D;元素的标签名&#x3D;&#x3D;当做选择器，将选择页面上的&#x3D;&#x3D;所有<strong>该种标签</strong>&#x3D;&#x3D;，无论位置深浅</li><li>作用：由于覆盖面非常大，所以适用于标签样式的初始化</li></ul><pre><code>ul&#123;  list-style:none;&#125;a &#123;  text-decoration:none;&#125;</code></pre><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><ul><li>id选择器是使用元素的id属性来选择特定元素</li><li>写法：<code>#+id名</code></li><li>作用:元素的id是唯一的，所以用于选择一个唯一的元素</li><li>id的正确命名规范：<ul><li>只能由字母、数字、下划线<code>_</code>、短横线<code>-</code>构成</li><li>不能以数字开头</li><li>区分大小写</li><li>最好多个单词之间以<code>-</code>分割</li></ul></li></ul><pre><code>&lt;style&gt;   #box1 &#123;       color:orange;   &#125;&lt;/style&gt;&lt;body&gt;   &lt;h3 id=&quot;box1&quot;&gt;三级标题&lt;/h3&gt;&lt;/body&gt;</code></pre><h4 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h4><ul><li>class属性表示”类名”</li><li>类名的命名规范与id相同</li><li>写法：<code>.+class名</code><ul><li>多个标签可以使用相同的类名</li><li>同一个标签可以属于多个类，类名之间用空格隔开</li></ul></li><li>原始类<ul><li>应用场景：组件化开发</li><li>在网页项目前，可以将所有的常用字号、文字、颜色、行高、外边距、内边距等设置为单独的类</li><li>HTML标签就可以”按需选择”它的类名，以快速添加样式</li></ul></li></ul><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><ul><li>可以作用于页面当中的所有元素</li><li>基本不用，对性能消耗过大</li><li>写法：<code>*</code></li></ul><pre><code>* &#123;  color:green;&#125;</code></pre><h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><table><thead><tr><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>后代选择器</td><td><code>.box .para</code></td><td>选择类名为box的标签 内部的类名为para的标签</td></tr><tr><td>交集选择器</td><td><code>li.para</code></td><td>选择既是li标签，也属于para类的标签</td></tr><tr><td>并集选择器</td><td><code>ul,ol</code></td><td>选择所有ul和ol标签</td></tr></tbody></table><ol><li>后代选择器</li></ol><ul><li>在CSS中，使用&#x3D;&#x3D;空格&#x3D;&#x3D;表示<code>后代</code>，不一定是“儿子”</li><li>后代选择器可以有很多空格，表示隔开好几代</li><li>会同时选择满足条件的子和孙</li></ul><ol start="2"><li>交集选择器</li></ol><ul><li>没有空格</li><li>选择同时满足多个条件的标签</li></ul><ol start="3"><li>并集选择器</li></ol><ul><li>也叫做<code>分组选择器</code>，逗号表示分组</li><li>同时选择多个标签</li></ul><ol start="4"><li>复合选择器：选择器可以任意搭配结合</li></ol><h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h4><blockquote><p>伪类是添加到选择器的描述性词语，指定要选择元素的特殊状态</p><p>超链接拥有四个特殊状态</p><table><thead><tr><th>伪类</th><th>描述</th></tr></thead><tbody><tr><td><code>a:link</code></td><td>没有被访问的超级链接</td></tr><tr><td><code>a:visited</code></td><td>已经被访问过的超级链接</td></tr><tr><td><code>a:hover</code></td><td>正在被鼠标悬停的超级链接</td></tr><tr><td><code>a:active</code></td><td>正在被激活的超级链接(按下按键，但还没有松开按键)</td></tr><tr><td><strong>爱恨准则</strong></td><td></td></tr></tbody></table></blockquote><ul><li>a标签的伪类书写，按照”爱恨准则”的顺序，否则会与伪类不生效</li><li>LOVE HATE:<code>:link</code>、<code>:visited</code>、<code>:hover</code>、<code>:active</code></li></ul><pre><code>&lt;style&gt;    /*      顺序不能乱 ，爱恨准则 LOVE HATE      :link  -&gt; :visited -&gt; :hover -&gt; :active    */    a:link &#123;      color:red;    &#125;    a:visited &#123;      color:blue;    &#125;    a:hover &#123;      color: green;    &#125;    a:active &#123;      color:yellow;    &#125;&lt;/style&gt;</code></pre><blockquote><p><strong>注</strong></p></blockquote><ul><li>遵守了爱恨准则，但<code>a:link</code>不生效，是因为之前访问过的网址会被浏览器记录，就会显示<code>a:visited</code>的样式(修改网址或清除浏览记录即可)</li><li>四个样式可以根据实际情况单独使用</li><li>伪类<code>:hover</code>不仅可以用在a标签上，还可以用在其他标签上</li></ul><h4 id="元素关系选择器"><a href="#元素关系选择器" class="headerlink" title="元素关系选择器"></a>元素关系选择器</h4><ul><li>子选择器<ul><li><code>.bov&gt;p &#123; &#125;</code></li><li>两个标签要为父子关系，当使用<code>&gt;</code>符号分割两个元素时，他只会匹配那些作为第一个元素的直接后代元素</li><li>从IE7开始兼容</li></ul></li><li>相邻兄弟选择器<ul><li><code>.bov+p&#123; &#125;</code></li><li>第二个元素紧跟在第一个元素之后，并且这两个元素都属于同一个父元素的子元素</li><li>只会选择紧跟着的一个，就算有两个相同元素在第一个元素后面</li><li>a+b即选择紧跟在a后面的第一个b</li><li>从IE7开始兼容</li></ul></li><li>通用兄弟选择器<ul><li><code>.box~p&#123; &#125;</code></li><li><code>a~b</code>表示选择a元素&#x3D;&#x3D;之后&#x3D;&#x3D;所有的同级b元素</li><li>a之前的b元素是选择不到的</li><li>从IE7开始兼容</li></ul></li></ul><h4 id="序号选择器"><a href="#序号选择器" class="headerlink" title="序号选择器"></a>序号选择器</h4><table><thead><tr><th>选择器</th><th>描述</th><th>兼容性</th></tr></thead><tbody><tr><td><code>:first-child</code></td><td>第一个子元素</td><td>IE7</td></tr><tr><td><code>:last-child</code></td><td>最后一个子元素</td><td>IE9</td></tr><tr><td><code>:nth-child(n)</code></td><td>第n个子元素</td><td>IE9</td></tr><tr><td><code>:nth-last-child(n)</code></td><td>倒数第n个子元素</td><td>IE9</td></tr><tr><td><code>:nth-of-type(n)</code></td><td>第n个某类型子元素</td><td>IE9</td></tr><tr><td><code>:nth-last-of-type(n)</code></td><td>倒数第n个某类型子元素</td><td>IE9</td></tr><tr><td><code>:only-child</code></td><td>选择没有任何兄弟元素的元素</td><td></td></tr></tbody></table><blockquote><p>注：</p></blockquote><ul><li>动态值写法：()可以写成<code>an+b</code>的形式也可以用关键词，<ul><li>n是自然数，从0开始计算</li><li>a,b必须是整数，可正可负</li><li>2n&#x3D;偶数&#x3D;even,2n+1&#x3D;奇数&#x3D;odds，</li></ul></li><li><code>nth-of-type(n)</code>和<code>nth-last-of-type(n)</code>键选择&#x3D;&#x3D;同种标签&#x3D;&#x3D;指定序号的子元素</li></ul><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><ul><li><p>写法：<code>标签[属性]</code></p><table><thead><tr><th>案例</th><th>描述</th><th>兼容性</th></tr></thead><tbody><tr><td><code>img[alt]</code></td><td>选择有alt属性的img标签</td><td>IE9</td></tr><tr><td><code>img[alt=&quot;icon&quot;]</code></td><td>选择alt属性是icon的img标签,属性里只能有icon这几个词</td><td>IE9</td></tr><tr><td><code>img[alt^=&quot;icon&quot;]</code></td><td>选择alt属性以icon开头的img标签,只有icon或者是以它开头都行</td><td>IE9</td></tr><tr><td><code>img[alt$=&quot;icon&quot;]</code></td><td>选择alt属性以icon结尾的img标签,只有icon或者以icon结尾的都行</td><td>IE9</td></tr><tr><td><code>img[alt*=&quot;icon&quot;]</code></td><td>选择alt属性中包含icon文字的img标签，sscion&#x2F;icon-c&#x2F;icon button都可以</td><td>IE9</td></tr><tr><td><code>img[alt~=&quot;icon&quot;]</code></td><td>选择alt属性中<strong>有空格隔开</strong>的icon字样的的img标签,只有icon属性&#x2F;有包含icon在内的多个属性值</td><td>IE9</td></tr><tr><td>&#96;img[alt</td><td>&#x3D;”icon”]&#96;</td><td>选择alt属性以<code>icon-</code>开头的img标签,只有icon属性&#x2F;以icon-开头的属性都行</td></tr></tbody></table></li><li><p>以上标签、属性、文字都可以替换</p></li><li><p>注：实际开发中用的很少，只做了解即可</p></li></ul><h4 id="CSS3新增伪类"><a href="#CSS3新增伪类" class="headerlink" title="CSS3新增伪类"></a>CSS3新增伪类</h4><table><thead><tr><th>伪类</th><th>描述</th></tr></thead><tbody><tr><td><code>:focus</code></td><td>选择当前获得焦点的表单元素</td></tr><tr><td><code>:checked</code></td><td>选择当前已经勾选的单选按钮或复选框</td></tr><tr><td><code>:empty</code></td><td>选择空标签</td></tr><tr><td><code>:enabled</code></td><td>选择当前有效的表单元素</td></tr><tr><td><code>:disabled</code></td><td>选择当前无效的表单元素</td></tr><tr><td><code>:root</code></td><td>选择根元素，即<code>&lt;html&gt;</code>标签</td></tr></tbody></table><blockquote><p><code>:focus</code>：</p></blockquote><ul><li>可修改当前获得焦点的表单元素样式</li><li>自带outline样式<blockquote><p><code>:checked</code></p></blockquote></li><li>可以用来修改复选框&#x2F;单选框样式(原样式优先级太高，用div模拟复选框&#x2F;单选框)，区别：单选框选中后不能取消</li><li>用label标签绑定复选框<code>input:checkbox</code>(&#x2F;单选框<code>input:radio</code>)、div.box、以及div下的div.item</li><li>设置新选择框.box的样式、.item:被选中后的样式</li><li>用<code>display:none</code>隐藏原选择框和.item</li><li><code>input:checked+ .box .item &#123;dispaly:block&#125;</code>表示被选中后，.box下的.item显示出来<blockquote><p><code>:empty</code>:只能是空内容，有空格的标签不会被选中</p></blockquote></li></ul><h4 id="CSS3新增伪元素"><a href="#CSS3新增伪元素" class="headerlink" title="CSS3新增伪元素"></a>CSS3新增伪元素</h4><ul><li>CSS3新增了”伪元素”特性，表示”虚拟动态创建的元素”</li><li>伪元素用双冒号<code>::</code>表示，IE8及以上兼容单冒号<code>:</code></li><li>语法：<code>element::before&#123; &#125;</code></li></ul><table><thead><tr><th>CSS3新增伪元素</th><th>描述</th></tr></thead><tbody><tr><td><code>::before</code></td><td>匹配选中的元素的第一个元素</td></tr><tr><td><code>::after</code></td><td>匹配选中元素的最后一个子元素</td></tr><tr><td><code>::selection</code></td><td>选择器匹配被用户选取的部分</td></tr><tr><td><code>::first-letter</code></td><td>会选中某元素中的第一行的第一个字母</td></tr><tr><td><code>::first-line</code></td><td>会选中某元素第一行的全部文字</td></tr><tr><td><code>::placeholder</code></td><td>自定义表单元素的占位文本样式</td></tr></tbody></table><blockquote><p><code>::before</code>和<code>::after</code></p></blockquote><ul><li><p>企业应用：各种小图标、CSS精灵图</p></li><li><p>这两个伪元素必须使用<code>content</code>属性表示其内容，绝对不能省掉</p></li><li><p>为选中的元素添加修饰性的内容，此元素默认为行内元素</p></li><li><p>第一种情况：给子元素&#x2F;没有子元素的盒子加，就是给对应标签的前&#x2F;后新增<code>content</code>内容及样式</p></li></ul><pre><code>&lt;div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;!-- 给这种情况加伪元素就算新增内容 --&gt;</code></pre><ul><li>第二种情况：给父元素加，就会新增一个行内元素及样式</li></ul><pre><code>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;!-- &gt;这种情况就是新增行内元素 --&gt;</code></pre><img src="weiyuansu.png"><blockquote><p><code>::selection</code></p></blockquote><ul><li>被选中的部分会改变样式</li><li>只能向<code>::selection</code>选择器应用少量的CSS属性:color、background、cursor以及outline<blockquote><p><code>::first-letter</code></p></blockquote></li><li>会选中某元素的第一行的第一个字母</li><li>必须是块级元素<blockquote><p><code>::first-line1</code></p></blockquote></li><li>会选中某元素的第一行的全部文字</li><li>必须是块级元素</li></ul><h4 id="CSS-选择器的权重计算"><a href="#CSS-选择器的权重计算" class="headerlink" title="CSS 选择器的权重计算"></a>CSS 选择器的权重计算</h4><ol><li>层叠性</li></ol><ul><li>CSS 全名叫 层叠式样式表 ，层叠性是它很重要的性质</li><li>层叠性：多个选择器可以同时作用于同一个标签，效果叠加</li></ul><ol start="2"><li>层叠性的冲突处理</li></ol><ul><li>多个选择器定义同一元素的冲突问题</li><li>CSS 有严密的处理冲突的规则</li><li>id 权重 &gt; class权重 &gt; 标签权重 &gt; 通配符权重</li></ul><ol start="3"><li>复杂选择器权重计算</li></ol><ul><li>复杂选择器可以通过（id的个数，class的个数，标签的个数）的形式，计算权重</li></ul><ol start="4"><li>!important 提升权重</li></ol><ul><li>如果我们需要将某个选择器的某条属性提升权重，可以在属性后边写上 <code>!important</code></li><li>实际企业中，不允许使用 <code>!important</code> ，因为这会带来不经意的样式冲突</li></ul><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><blockquote><p>开关按钮</p></blockquote><ul><li><code>input:checked</code>里面可以直接写按下开关后的样式</li><li>优化：用伪元素替代没有内容的标签</li></ul><h2 id="CSS文本属性、字体属性、列表属性"><a href="#CSS文本属性、字体属性、列表属性" class="headerlink" title="CSS文本属性、字体属性、列表属性"></a>CSS文本属性、字体属性、列表属性</h2><h3 id="一、CSS字体属性"><a href="#一、CSS字体属性" class="headerlink" title="一、CSS字体属性"></a>一、CSS字体属性</h3><h4 id="color属性"><a href="#color属性" class="headerlink" title="color属性"></a>color属性</h4><ul><li>可设置文本内容的字体颜色</li><li>color属性有四种表示法：</li></ul><blockquote><p><strong>英文单词表示法</strong></p></blockquote><ul><li>应用场景：仅用于学习和测试，工作中不常用</li></ul><pre><code>color:red;</code></pre><blockquote><p><strong>十六进制表示法</strong></p></blockquote><ul><li>设计图中标注的颜色通常为十六进制表示</li><li>每一种颜色分量都是0~255的数字，十六进制的ff就是十进制的255</li><li>如果颜色值是两两相同，并且有三对，<code>#aabbcc</code>的形式可以简写为<code>#abc</code></li><li>常用的十六进制表示法</li></ul><table><thead><tr><th>色值</th><th>描述</th></tr></thead><tbody><tr><td><code>#000</code></td><td>黑色</td></tr><tr><td><code>#fff</code></td><td>白色</td></tr><tr><td><code>#ccc</code>、<code>#333</code>、<code>#2f2f2f</code>、<code>#666</code>、<code>#ddd</code></td><td>灰色</td></tr></tbody></table><blockquote><p><strong>rgb()表示法</strong></p></blockquote><ul><li>rgb是红蓝绿三个单词的缩写</li><li>三个数字的范围是0~255,数字之间用<code>,</code>分隔</li></ul><pre><code>color:rgb(255,0,0);&lt;!-- 红色 --&gt;</code></pre><blockquote><p><strong>rgba()表示法</strong></p></blockquote><ul><li>前三个数字是颜色,范围是0~255</li><li>第四个参数是透明度，范围是0~1，值越大越不透明</li><li>rgba()表示法从IE9开始兼容</li></ul><pre><code>color: rgba(255,0,0,0.5)</code></pre><h4 id="font-size属性"><a href="#font-size属性" class="headerlink" title="font-size属性"></a>font-size属性</h4><ul><li>font-size属性用来设置文字的字号大小</li><li>单位通常为px(像素)、%(百分比)；移动端还会学习em、rem、vw、vh单位</li><li>网页文字正文默认为为16px，1em&#x3D;两个字符</li><li>浏览器最小支持12px字号</li><li><strong>面试题</strong>：如何在页面中设置小于12px的字体(学到动画时会讲)</li><li>百分比是相对于父元素的font-size而言</li></ul><pre><code>&lt;style&gt;.fon1 &#123;font-size:12px;&#125;.fon2 &#123;font-size:16px;&#125;div p &#123;font-size:50%;&#125;&lt;/style&gt;&lt;body&gt;    &lt;p&gt;这是一段默认大小的文字&lt;/p&gt;    &lt;p class=&quot;fon1&quot;&gt;字体大小为12px&lt;/p&gt;    &lt;div class=&quot;fot2&quot;&gt;        父元素为16px        &lt;p&gt;字体大小为父元素的50%&lt;/p&gt;    &lt;/div&gt;&lt;/body&gt;  </code></pre><h4 id="font-weight属性"><a href="#font-weight属性" class="headerlink" title="font-weight属性"></a>font-weight属性</h4><ul><li>用来设置字体的粗细程度</li><li>可以用属性值或者数字来设置大小</li><li>数字介于1~1000之间，数字越大，字体越粗</li><li>最终的粗细要在当前字体可行的精细范围之内</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>normal</code></td><td>正常粗细，与400等值</td></tr><tr><td><code>bold</code></td><td>加粗，与700等值</td></tr><tr><td><code>lighter</code></td><td>比从父元素继承来的值更细(处在字体可行的粗细值范围内)，大多数中文字体不支持</td></tr><tr><td><code>bolder</code></td><td>比从父元素继承来的值更粗(处于字体可行的粗细范围内)大多数中文字体不支持</td></tr></tbody></table><pre><code>&lt;style&gt;      .we1 &#123; font-weight: normal; &#125;      .we2 &#123;font-weight: bold; &#125;      .we3 &#123;font-weight: 500;&#125;      .we4 &#123;font-weight: lighter;&#125;      .we5 &#123;font-weight: bolder;&#125;  &lt;/style&gt;&lt;body&gt;    &lt;p class=&quot;we1&quot;&gt;正常粗细&lt;/p&gt;    &lt;p class=&quot;we2&quot;&gt;加粗文本&lt;/p&gt;    &lt;div class=&quot;we3&quot;&gt;        父元素为600        &lt;p class=&quot;we4&quot;&gt;比父元素更细&lt;/p&gt;        &lt;p class=&quot;we5&quot;&gt;比父元素更粗&lt;/p&gt;    &lt;/div&gt;&lt;/body&gt;</code></pre><h4 id="4-font-style属性"><a href="#4-font-style属性" class="headerlink" title="4.font-style属性"></a>4.font-style属性</h4><ul><li>设置字体的倾斜<table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>normal</code></td><td>取消倾斜，把默认倾斜的<code>i</code>、<code>em</code>等标签设置为不倾斜</td></tr><tr><td><code>italic</code></td><td>设置为倾斜字体(常用)，如果当前字体没有可用的斜体版本，会选用<code>oblique</code>替代</td></tr><tr><td><code>oblique</code></td><td>设置为倾斜字体，用常规字体模拟(不常用)</td></tr></tbody></table></li></ul><pre><code>&lt;style&gt;    .sty1 &#123;font-style: normal;&#125;    .sty2 &#123;font-style: italic;&#125;    .sty3 &#123;font-style: oblique;&#125;&lt;/style&gt;&lt;body&gt;    &lt;i&gt;这是一个默认倾斜字体&lt;/i&gt; &lt;br&gt;    &lt;i class=&quot;sty1&quot;&gt;把默认倾斜设置为不倾斜&lt;/i&gt;    &lt;p class=&quot;sty2&quot;&gt;italic下把不倾斜的设置为倾斜&lt;/p&gt;    &lt;p class=&quot;sty3&quot;&gt;oblique下把不倾斜设置为倾斜&lt;/p&gt;&lt;/body&gt;</code></pre><h4 id="font-family-字体类型"><a href="#font-family-字体类型" class="headerlink" title="font-family 字体类型"></a>font-family 字体类型</h4><ul><li>用于设置字体类型，浏览器默认字体为”微软雅黑”</li><li>可以设置多个字体类型，字体之间用<code>,</code>分隔，如果第一个字体浏览器不支持，则会往后找；若都不支持，则会使用默认字体；</li></ul><pre><code>font-family:&quot;Times New Rowman&quot;,Times,serif;</code></pre><blockquote><p>注：</p></blockquote><ul><li>中文字体要用<code>&quot;&quot;</code>包裹，英文字体中若有空格，也要用<code>&quot;&quot;</code>(不加也可以)</li><li>字体通常必须是用户计算机已经安装好的字体，所以设置为:”微软雅黑””宋体”较多</li><li>中文字体也可以用英文名</li></ul><table><thead><tr><th>中文字体名</th><th>英文字体名</th></tr></thead><tbody><tr><td>“微软雅黑”</td><td>“Microsoft Yahei”</td></tr><tr><td>“宋体”</td><td>“SimSun”</td></tr></tbody></table><h4 id="font-face自定义字体"><a href="#font-face自定义字体" class="headerlink" title="@font-face自定义字体"></a>@font-face自定义字体</h4><ul><li>用来设置用户电脑里没有的字体，用户浏览网页时会下载相关字体</li><li>准备工作<ul><li>必须自己定义新的字体(需要有字体文件)</li><li>用户加载网页时会同时下载字体文件</li><li>字体文件需要同时拥有五种格式的文件,因为根据操作系统和浏览器不同，有<code>eot</code>、<code>woff2</code>、<code>woff</code>、<code>ttf</code>、<code>svg</code></li></ul></li><li>如何定义字体</li></ul><pre><code>@font-face&#123;    font-family: ;/*字体类型*/    src: url();  /*引入字体类型*/&#125;</code></pre><ul><li>怎么做？<ul><li>获得字体文件：建议使用免费可商用的阿里巴巴普惠字体，地址：<a href="https://www.iconfont.cn/webfont">https://www.iconfont.cn/webfont</a></li><li>输入要定义的文字，选择字体，下载字体包</li><li>使用@font-face声明字体</li><li>定义使用webfont的样式</li><li>为文字加上对应样式<br>  注：可以直接复制demo的内容</li></ul></li></ul><pre><code>&lt;style&gt;  @font-face &#123;  &#125;&lt;!-- 使用font-face声明字体 --&gt;  .web-font &#123;  &#125;&lt;!-- 定义使用 webfont 的样式 --&gt;&lt;/style&gt;&lt;body&gt;&lt;p&gt;要定义的文字&lt;/p&gt;&lt;/body&gt;</code></pre><h3 id="二、CSS文本属性"><a href="#二、CSS文本属性" class="headerlink" title="二、CSS文本属性"></a>二、CSS文本属性</h3><h4 id="text-decoration属性-修饰线"><a href="#text-decoration属性-修饰线" class="headerlink" title="text-decoration属性-修饰线"></a>text-decoration属性-修饰线</h4><ul><li>用于设置文本的修饰线外观</li><li>text-decoration是以下四个属性的简写</li><li>可以写在一行，以空格分隔</li><li><strong>注</strong>：其他三个属性的前提是<code>line</code></li></ul><table><thead><tr><th>属性</th><th>属性值</th></tr></thead><tbody><tr><td>text-decoration-line</td><td>下划线<code>underline</code>、删除线<code>line-through</code>、没有修饰线<code>none</code></td></tr><tr><td>text-decoration-color</td><td>文本修饰的颜色</td></tr><tr><td>text-decoration-style</td><td>波浪线<code>wavy</code>、实线<code>solid</code>、虚线<code>dashed</code></td></tr><tr><td>text-decoration-thickness</td><td>文本修饰线的粗细</td></tr></tbody></table><pre><code>&lt;style&gt;    p &#123;text-decoration:underline red 5px;&#125;    div &#123;text-decoration:wavy underline purple 3px;&#125;    /*有underline才有wavy*/&lt;/style&gt;&lt;body&gt;    &lt;p&gt;有红色下划线的文本，下划线粗5px&lt;/p&gt;    &lt;div&gt;一行有紫色波浪线的文本，线粗3px&lt;/div&gt;&lt;/body&gt;</code></pre><h4 id="text-indent首行缩进"><a href="#text-indent首行缩进" class="headerlink" title="text-indent首行缩进"></a>text-indent首行缩进</h4><ul><li>定义首行文本内容之前的缩进量</li><li>常用单位是<code>em</code>、<code>2em</code>是两个字符的宽度</li><li>默认字符大小是16px，如果没有单独设置，那么2em&#x3D;32px</li></ul><pre><code>&lt;style&gt;        .line1 &#123;font-size:2em;&#125;        /*字体大小为32px*/        .line2 &#123;text-indent:2em;&#125;        /*首行缩进2em，也就是32px*/        .line3 &#123;font-size:2em;text-indent:2em;&#125;        /*字体大小为32px,首行缩进4em=64px*/&lt;/style&gt;&lt;body&gt;    &lt;p class=&quot;line1&quot;&gt;默认文本，设置字体大小是两字符&lt;/p&gt;    &lt;p class=&quot;line2&quot;&gt;首行缩进两字符&lt;/p&gt;    &lt;p class=&quot;line3&quot;&gt;首行缩进两字符，字体大小为两字符&lt;/p&gt;&lt;/body&gt;</code></pre><h4 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h4><ul><li><p>行高的测量方式</p><img src="测量行高.png"></li><li><p>①②是行高测量上的定义，&#x3D;&#x3D;③&#x3D;&#x3D;是行高的真实定义：文字所占空间高度的总高，文字在这个高度的垂直方向&#x3D;&#x3D;居中&#x3D;&#x3D;显示</p></li><li><p>主段落内容的行高至少应为<code>1.5</code></p></li><li><p>如果文字的大小要随页面的缩放而变化，请使用无单位的数值，以确保行高会等比例的缩放</p></li><li><p>行高的值</p></li></ul><table><thead><tr><th>单位</th><th>实例</th><th>说明</th></tr></thead><tbody><tr><td>px</td><td><code>line-height:30px;</code></td><td>行高为30px</td></tr><tr><td>数值表示法</td><td><code>line-height:2;</code></td><td>字号大小的两倍这是<strong>最推荐</strong>的写法，工作中常用倍数是<code>1.25,1.5,1.75</code></td></tr><tr><td>百分比表示法</td><td><code>line-height:200%;</code></td><td>字号大小的两倍</td></tr><tr><td>normal</td><td><code>line-height:normal</code>;</td><td>取决于客户端。桌面浏览器(包括Firefox)使用默认值，约为<code>1.2</code>，这取决于元素的<code>font-family</code></td></tr></tbody></table><pre><code>&lt;style&gt;     .p1 &#123;line-height:20px;          background-color:skyblue;&#125;      div &#123;line-height:40px;          background-color: red;          font-family:&quot;宋体&quot;&#125;      .p2 &#123;line-height: 3;          background-color: aqua;          font-family: &quot;微软雅黑&quot;;&#125;      .p3 &#123;line-heigt:normal;          background-color:coral;&#125;  &lt;/style&gt; &lt;body&gt; &lt;p class=&quot;p1&quot;&gt;设置行高为20px&lt;/p&gt;  &lt;div&gt;这是一行行高40px的宋体&lt;/div&gt;  &lt;p class=&quot;p2&quot;&gt;这是行高为3的微软雅黑&lt;/p&gt;  &lt;p class=&quot;p3&quot;&gt;行高为normal的文字&lt;/p&gt; &lt;/body&gt;</code></pre><h4 id="行文本垂直、水平居中"><a href="#行文本垂直、水平居中" class="headerlink" title="行文本垂直、水平居中"></a>行文本垂直、水平居中</h4><ul><li>行文本垂直居中<ul><li>设置**行高&#x3D;盒子高度(height)**，即可实现单行文本垂直居中</li><li>对行内块元素无效</li></ul></li></ul><pre><code>line-height: height的高度；</code></pre><ul><li>text-align属性<ul><li>定义<strong>行内内容</strong>(例如文字、图片、行内块元素)相对它的块父元素的对齐方式</li><li>注：块级元素不能用这个属性</li><li>常用属性值：<code>left</code>、<code>right</code>、<code>center</code></li></ul></li></ul><pre><code>&lt;style&gt;   .l &#123;text-align: left;&#125;   .c &#123;text-align:center;&#125;   .r &#123;text-align:right;&#125;&lt;/style&gt;&lt;body&gt;   &lt;p class=&quot;l&quot;&gt;这是居左文字&lt;/p&gt;   &lt;p class=&quot;c&quot;&gt;这是居中文字&lt;/p&gt;   &lt;p class=&quot;r&quot;&gt;这是居右文字&lt;/p&gt;&lt;/body&gt;</code></pre><h4 id="font合写属性"><a href="#font合写属性" class="headerlink" title="font合写属性"></a>font合写属性</h4><ul><li>font属性可以用来作为<code>font-style</code>、<code>font-weight</code>、<code>font-size</code>、<code>line-height</code>、<code>font-family</code>属性的合写</li><li>写法<ul><li>font属性连写时，必须设置<code>font-size</code>和<code>font-family</code>才能生效</li><li><code>font-style</code>和<code>font-weight</code>必须放在<code>font-size</code>之前</li><li>连写时任何未指定的值都将设置为其对应的初始值，所以即使没有写行高，也有默认行高1.2<br> -行高写在<code>fon-size</code>后面，用<code>/</code>分隔</li></ul></li></ul><pre><code>font:italic 20px/1.2 &quot;宋体&quot;;</code></pre><h4 id="word-spacing字间距"><a href="#word-spacing字间距" class="headerlink" title="word-spacing字间距"></a>word-spacing字间距</h4><ul><li>对中文无效，仅对英文单词有效<table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>正常的单词间距，有字体和&#x2F;或浏览器定义</td></tr><tr><td>长度</td><td>通过指定具体额外间距来增加字体的单词间距,可以是负数</td></tr></tbody></table></li></ul><h4 id="letter-spacing字符间距"><a href="#letter-spacing字符间距" class="headerlink" title="letter-spacing字符间距"></a>letter-spacing字符间距</h4><ul><li>用于设置文本字符的间距</li><li>对中文和英文都有效，单词会被分隔成一个个字母</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>正常的单词间距，有字体和&#x2F;或浏览器定义</td></tr><tr><td>长度</td><td>通过指定具体额外间距来增加字体的单词间距,可以是负数</td></tr></tbody></table><pre><code>&lt;style&gt;    .word1 &#123;word-spacing:normal;&#125;    .word2 &#123;word-spacing:-10px;&#125;    .letter1 &#123;letter-spacing:10px;&#125;    .letter2 &#123;letter-spacing:-10px;&#125;    .lo &#123;letter-spacing:10px;&#125;    &lt;/style&gt;&lt;body&gt;    &lt;p class=&quot;word1&quot;&gt;I love you ,我爱你,正常间距&lt;/p&gt;    &lt;p class=&quot;word2&quot;&gt;I love you ,我爱你,负间距&lt;/p&gt;    &lt;p class=&quot;letter1&quot;&gt;I love you ,我爱你,10Px间距&lt;/p&gt;    &lt;p class=&quot;letter2&quot;&gt;I love you ，我爱你，负间距&lt;/p&gt;    &lt;div&gt;I love you&lt;p class=&quot;lo&quot;&gt;我爱你&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><h3 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a>列表样式</h3><h4 id="list-style-type"><a href="#list-style-type" class="headerlink" title="list-style-type"></a>list-style-type</h4><ul><li>设置列表项标记的类型</li><li>实际开发中的一般会把前面的标记类型去掉，用做好的小图标替代</li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>无标记(去掉圆点)</td></tr><tr><td>disc</td><td>默认，实心圆</td></tr><tr><td>circle</td><td>空心圆</td></tr><tr><td>square</td><td>实心方块</td></tr><tr><td>decimal</td><td>数字</td></tr><tr><td>decimai-leading-zero</td><td>0开头的数字，01、02、03</td></tr><tr><td>lower-alpha</td><td>小写英文字母</td></tr><tr><td>upper-alpha</td><td>大写英文字母</td></tr><tr><td>……</td><td>标记的类型有20多项，但实际开发中几乎不用</td></tr></tbody></table><p><strong>联系之前在HTML学过的列表标签</strong>:</p><ul><li>注：<code>style=&quot;&quot;</code>等于写在<code>&lt;style&gt;</code>标签里</li></ul><table><thead><tr><th>html(已废弃)</th><th>CSS</th></tr></thead><tbody><tr><td><code>type=&quot;circle&quot;</code></td><td><code>style=&quot;list-style-type:circle&quot;</code></td></tr><tr><td><code>ol-li</code></td><td><code>list-type:decimal</code></td></tr></tbody></table><h4 id="2-list-style-image"><a href="#2-list-style-image" class="headerlink" title="2.list-style-image"></a>2.list-style-image</h4><ul><li>用来指定列表中的列表标记图像，几乎不用</li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>URL</td><td>图像的路径</td></tr><tr><td>none</td><td>默认，无图形被现实</td></tr><tr><td>inherit</td><td>规定从父元素继承该属性的值</td></tr></tbody></table><h4 id="3-list-style-position"><a href="#3-list-style-position" class="headerlink" title="3.list-style-position"></a>3.list-style-position</h4><ul><li>规定列表中列表项目标记的位置，几乎不用</li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>inside</td><td>列表标记项目放置在文本以内，环绕文本并根据标记对齐</td></tr><tr><td>outside</td><td>默认，标记位于文本的左侧、且放置在文本以外，环绕文本不根据标记对齐</td></tr><tr><td>inherit</td><td>规定从父元素继承该属性的值</td></tr></tbody></table><h4 id="4-list-style"><a href="#4-list-style" class="headerlink" title="4.list-style"></a>4.list-style</h4><ul><li>这是以上三个的综合写法</li></ul><pre><code>list-style:delcima-leading-zero outside;</code></pre><ul><li>实际开发中用的最多的是去掉标记:<code>list-style-type:none;</code>、<code>list-style:none;</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>onlineOrdering-applet</title>
      <link href="/2023/11/27/onlineOrdering-applet/"/>
      <url>/2023/11/27/onlineOrdering-applet/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><a href="https://github.com/hermiablog/onlineOrdering-applet">小程序链接</a></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="main.png" width="200"><img src="menu.png" width="200"><img src="cart.png" width="200"><img src="order.png" width="200"><img src="me.png" width="200"><h2 id="项目创建过程"><a href="#项目创建过程" class="headerlink" title="项目创建过程"></a>项目创建过程</h2><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>将项目的通用样式写在<code>app.wxss</code>中<blockquote><ul><li>在根目录<code>page</code>下设置主题色、字号、字体颜色等</li><li>注意：<code>page</code>要设置<code>min-height=100%;</code>才会占满屏幕</li></ul></blockquote></li><li>清除常用组件的自带样式<blockquote><ul><li>将外边距、内边距都设置为0</li><li>将组件都设置为怪异盒模型</li></ul></blockquote></li><li>新建<code>src</code>文件夹，用于存放不可动态获取的图片、图标</li><li>新建<code>component</code>文件夹，用于存放自定义组件</li><li>自定义<code>icon</code>组件，实现<code>icon</code>图标的复用<blockquote><ul><li>新建<code>iconfont</code>文件夹，保存图标<code>wxss</code>文件</li><li>单独存放有利于随时替换</li></ul></blockquote></li></ol><pre><code>order-online├─ .eslintrc.js├─ app.js├─ app.json├─ app.wxss├─ component│  └─ icon│     ├─ icon.js│     ├─ icon.json│     ├─ icon.wxml│     └─ icon.wxss├─ iconfont│  └─ iconfont.wxss├─ pages│  └─ index│     ├─ index.js│     ├─ index.json│     ├─ index.wxml│     └─ index.wxss├─ project.config.json├─ project.private.config.json├─ sitemap.json├─ src│  └─ icon│     ├─ cart.png│     ├─ index.png│     ├─ menu.png│     ├─ order.png│     ├─ selected-cart.png│     ├─ selected-index.png│     ├─ selected-menu.png│     ├─ selected-order.png│     ├─ selected-user.png│     ├─ takeBySelf.png│     ├─ user.png│     └─ waimai.png└─ utils   └─ util.js</code></pre><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><h4 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h4><ol><li>需要实现的效果</li></ol><ul><li>在顶部搜索框，输入产品名，可跳转到对应产品</li><li>选择取餐方式后，跳转到菜单页，并保存取餐方式</li><li>点击新品图片，可跳转到对应产品</li></ul><ol start="2"><li>难点</li></ol><ul><li><p>顶部导航与胶囊按钮对齐</p><blockquote><ul><li>自定义导航<code>navigation</code></li><li>实现不同机型和开发工具的适配</li></ul></blockquote></li><li><p>搜索后跳转到对应产品&#x3D;&#x3D;(需补充)&#x3D;&#x3D;</p></li></ul><h4 id="第一步：实现tabBar"><a href="#第一步：实现tabBar" class="headerlink" title="第一步：实现tabBar"></a>第一步：实现<code>tabBar</code></h4><ol><li>根据项目需要，确认使用原生<code>tabBar</code></li><li>创建对应页面的文件</li><li>下载<code>tabBar</code>图标，存放至<code>src/icon</code>文件夹</li><li>在<code>app.json</code>里进行配置</li></ol><h4 id="第二步：自定义导航栏，并处理兼容性"><a href="#第二步：自定义导航栏，并处理兼容性" class="headerlink" title="第二步：自定义导航栏，并处理兼容性"></a>第二步：自定义导航栏，并处理兼容性</h4><blockquote><p>参考微信开发者社区回答：<a href="https://developers.weixin.qq.com/community/develop/article/doc/000aa842274d58cb15f74f81f56013">https://developers.weixin.qq.com/community/develop/article/doc/000aa842274d58cb15f74f81f56013</a></p><ul><li>新建<code>navigation-bar</code>组件构建自定义导航栏</li><li>菜单页引入该组件</li></ul></blockquote><p><strong><code>navigation-bar</code>组件内：</strong></p><blockquote><p><strong>实现对齐和适配的思路：</strong></p><ul><li>正常来讲，<code>iOS</code>和<code>Android</code>下的胶囊按钮的位置以及大小都是相同且不变的，我们可以通过胶囊按钮的位置和大小再配合 <code>wx.getSystemInfo</code> 或者 <code>wx.getSystemInfoSync</code> 中得到的 <code>statusBarHeight</code> 来计算出导航栏的位置和大小。</li><li>顶部导航区，包括状态栏、导航栏(导航条+胶囊)，都设置固定定位</li></ul></blockquote><blockquote><p><strong>实现步骤：</strong></p></blockquote><ol><li><p>首先需要知道不同<code>iOS</code>和<code>Android</code>下的胶囊按钮的位置以及大小</p><blockquote><ul><li>根据开发者的文档可知(非官方数据，自己进行微调)：</li></ul><pre><code>// iOS  top 4px  right 7px  width 87px  height 32px// Android  top 8px  right 10px  width 95px  height 32px// 开发者工具模拟器（iOS）  top 6px  right 10px  width 87px  height 32px// 开发者工具模拟器（Android）  top 8px  right 10px  width 87px  height 32px</code></pre><ul><li>这里<code>top</code>的值是从 <code>statusBarHeight</code> 作为原点开始计算的</li><li>因此最终位置还得加上状态栏的高度</li></ul></blockquote></li><li><p>通过<code>wx.getSystemInfoSync</code>可以得到状态栏<code>statusBarHeight</code>的位置和宽高</p><blockquote><ul><li>状态栏的宽度也就是可使用窗口宽度(手机屏幕宽度)</li></ul></blockquote></li><li><p>计算导航条的位置和大小</p><blockquote><ul><li>导航条要和胶囊平齐，所以：</li><li>top&#x3D;胶囊的top<blockquote><p>把胶囊离右边框的距离作为导航条的内边距</p></blockquote></li><li>left&#x3D;0</li><li>宽度&#x3D;可使用窗口宽度-胶囊右边距-胶囊宽度-导航条内边距&#x3D;可使用窗口宽度-胶囊宽度-胶囊右边距*3<blockquote><p>注意：胶囊的top是以状态栏为原点，但导航条是以屏幕左上角为原点</p></blockquote></li><li>height&#x3D;胶囊的height</li></ul></blockquote></li><li><p>计算整个导航栏(导航条+胶囊)的位置和大小</p><blockquote><ul><li>top&#x3D;状态栏的高度</li><li>left&#x3D;0</li><li>宽度&#x3D;可使用窗口宽度</li><li>高度&#x3D;<code>胶囊的height+胶囊的上外边距*2</code>&#x3D;<code>(胶囊的top-状态栏高度)*2+胶囊的height</code></li></ul></blockquote></li><li><p>格式化</p><blockquote><ul><li>前面的得到的所有数据都是对象的形式</li><li>而在页面上设置样式时，要在标签里用<code>style=&quot;&quot;</code>的方式</li><li>所以要把对象格式的数据，转为成字符串</li></ul><pre><code>formatStyle(position) &#123;  //声明一个数组，存放遍历出来的数据，加px  let styles = []  for (let key in position) &#123; styles.push(`$&#123;key&#125;: $&#123;position[key]&#125;px;`)  &#125;  // 将数组转成字符串，把逗号替换成空格  return styles.join(&#39; &#39;)&#125;</code></pre><ul><li>因为<code>wx.getSystemInfoSync()</code>得到的可使用窗口宽度，单位是px</li></ul></blockquote></li></ol><h4 id="第三步：搜索框"><a href="#第三步：搜索框" class="headerlink" title="第三步：搜索框"></a>第三步：搜索框</h4><ul><li>提高顶部导航区的层级，否则就会被<code>swiper</code>覆盖</li><li>搜索图标的显隐：在输入时，搜索图标自动消失</li><li>给输入框绑定<code>bind:input</code>事件，在<code>data</code>里设置一个变量<code>iconShow</code>来控制图标的显隐</li></ul><h4 id="第四步：顶部的swiper与底部banner区"><a href="#第四步：顶部的swiper与底部banner区" class="headerlink" title="第四步：顶部的swiper与底部banner区"></a>第四步：顶部的<code>swiper</code>与底部<code>banner</code>区</h4><blockquote><ul><li><code>swiper</code>使用<code>swiper</code>与<code>swiper-item</code>结合实现</li><li><code>banner</code>区的跳转&#x3D;&#x3D;(需补充)&#x3D;&#x3D;</li></ul></blockquote><h4 id="第五步-取餐方式跳转"><a href="#第五步-取餐方式跳转" class="headerlink" title="第五步 取餐方式跳转"></a>第五步 取餐方式跳转</h4><ol><li>思路<blockquote><ul><li>选择取餐方式之后进入菜单页面</li><li>菜单页面会根据点进来的方式，显示外卖还是自取，所以从首页跳转到菜单页必须<strong>携带参数</strong></li><li>根据之前学习过的声明式导航和编程式导航可知，这两种方式在跳转到<code>tabBar</code>页面时，不能携带参数</li></ul></blockquote></li></ol><blockquote><blockquote><p>解决方案：<br><a href="https://developers.weixin.qq.com/community/develop/article/doc/00000453df06f07a5c8d91ef856c13">参考回答</a></p></blockquote><ul><li>全局变量：通过<code>App</code>全局对象存放全局变量</li><li>数据缓存：通过存储到数据缓存中。</li><li>事件通信：通过事件通信通道。</li><li><code>wx.reLaunch(Object object)</code>，<code>url</code>路径后可以带参数，参数与路径之间使用<code>?</code>分隔</li></ul></blockquote><h4 id="数据动态化"><a href="#数据动态化" class="headerlink" title="数据动态化"></a>数据动态化</h4><img src="./src/首页获取数据.png"><ol><li>单独配置发起网络请求的方法(全局可使用)</li></ol><ul><li><p>新建<code>config</code>文件</p><blockquote><ul><li>新建<code>api.js</code>文件，保存服务器接口根地址</li><li>新建<code>exception-message</code>文件，保存错误码字典</li></ul></blockquote></li><li><p>在<code>utils</code>文件夹中</p><blockquote><ul><li>新建<code>wxToPromise</code>文件，用于转换原生不支持<code>Promise</code>的官方<code>API</code></li><li>新建<code>http</code>文件<ul><li><code>request</code>方法：用于通过<code>wxToPromise</code>获得带有数据的<code>promise</code>对象，并进行错误信息比对</li><li><code>_showError</code>方法，如果发生请求错误，用于在页面展示错误信息</li></ul></li></ul></blockquote></li></ul><ol start="2"><li>新建<code>model</code>文件夹<blockquote><ul><li>新建<code>Home</code>类，用于获取首页数据</li></ul></blockquote></li></ol><h3 id="菜单页"><a href="#菜单页" class="headerlink" title="菜单页"></a>菜单页</h3><h4 id="基础准备-1"><a href="#基础准备-1" class="headerlink" title="基础准备"></a>基础准备</h4><ol><li>需要实现的效果</li></ol><ul><li>获取离自己最近的店及距离(需要申请<code>wx.getLocation</code>接口)</li><li>点击左侧菜单栏，可获取对应分类的产品</li><li>点击产品，可选择产品规格、数量等</li><li>加入购物车后，其他页面的变化</li></ul><ol start="2"><li>难点</li></ol><ul><li>左侧导航与右侧商品的关联</li><li>选品框：产品规格的选择、价格与数量联动、所选信息在其他页面上的使用</li></ul><blockquote><ul><li>取消整个页面的滚动条：在<code>json</code>中配置”disableScroll”: true&#96;</li></ul></blockquote><h4 id="数据动态化-1"><a href="#数据动态化-1" class="headerlink" title="数据动态化"></a>数据动态化</h4><ul><li>新建<code>Menu</code>模块，获取菜单页数据</li><li>其他与首页类似</li></ul><h4 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h4><ol><li>顶部</li></ol><ul><li>为了将它固定在顶部，不随页面滚动，使用粘性定位</li><li>右侧的取餐方式，根据参数选中，默认为外卖<blockquote><ul><li>创建变量<code>takeWayIndex</code>保存参数</li><li>在<code>onLoad</code>生命周期函数里通过<code>options</code>获取首页传来的参数</li><li>注意！：<strong>只有</strong>点击首页的选择框跳转，<code>options</code>才会获取参数，但，如果首次加载是直接点击<code>tabBar</code>到菜单页，那<code>options</code>就是一个空对象<code>&#123;&#125;</code></li><li>因此只在<code>options</code>不为空对象时，修改<code>takeWayIndex</code></li><li>要使用<code>(JSON.stringify(options) === &quot;&#123;&#125;&quot;)</code>进行判断；携带了参数时，<code>options</code>也是对象，所以不能通过数据类型判断</li></ul></blockquote></li></ul><ol start="2"><li>下方商品列表</li></ol><ul><li>为了实现竖向滚动，左右都设为<code>scroll-view</code></li><li>左侧分类及右侧<code>banner</code>：动态获取数据，列表渲染</li><li>左侧选中状态：<blockquote><ul><li>创建一个变量<code>navLeftIndex</code>表示当前选中分类的索引，</li><li>绑定点击事件，使用自定义属性将当前被点击的分类下标传入，修改<code>navLeftIndex</code>；</li><li>只有当<code>navLeftIndex===index</code>时，被选中样式才会生效</li><li>为了不让选中标识影响文字，我给每个分类都设置了<code>divider </code>，选中时，只改变颜色</li></ul></blockquote></li></ul><ol start="3"><li>右侧商品栏</li></ol><ul><li>顶部<code>banner</code></li><li>动态渲染商品列表</li></ul><ol start="4"><li>如何点击左侧分类，右侧获取对应商品</li></ol><ul><li>定义变量<code>navLeftIndex</code>保存左侧被点击分类的索引</li><li>左侧被点击时，通过自定义属性修改<code>navLeftIndex</code>变量</li><li>右侧产品在进行列表渲染，根据<code>navLeftIndex</code>获取商品数据</li></ul><h4 id="选品页"><a href="#选品页" class="headerlink" title="选品页"></a>选品页</h4><ol><li><p>基础准备</p><blockquote><ul><li>新建组件<code>product-detail</code>，作为点击商品列表时打开的选品页</li><li>父页面：菜单页</li><li>需引入的子组件：图标组件<code>icon</code>、数量组件<code>cartNum</code><ul><li>数量组件也引用了图标组件<code>icon</code></li></ul></li></ul></blockquote></li><li><p>难点：</p><blockquote><ul><li>获取所点击的产品数据，并列表渲染嵌套了三层的数据</li><li>规格选择</li><li>金额与数量的联动，以及在其他页面的使用</li><li>商品加入购物车后，对其他页面的影响</li></ul></blockquote></li><li><p>本页面需要实现的效果及方法</p></li></ol><ul><li><p>选品页的打开与关闭</p><blockquote><ul><li>在父页面定义一个变量<code>detailFlag</code>，作为开关，默认为<code>true</code>；通过属性绑定将<code>detailFlag</code>传给组件</li><li>当父页面的产品发生点击事件时，将<code>detailFlag</code>修改为<code>false</code></li><li>组件的父容器<code>container</code>通过<code>hidden</code>属性来控制显隐</li><li>组件页面的关闭按钮，在被点击时，将<code>detailFlag</code>修改为<code>true</code></li></ul></blockquote></li><li><p>页面数据的动态化</p><blockquote><ul><li>在父页面的产品被点击时，保存该产品的<code>id</code></li><li>在<code>Menu</code>模块里，写一个静态方法，获取商品详情数据，保存在<code>detailInfo</code>变量里</li><li>通过属性绑定将该商品的数据传给组件，这样组件接收到的数据就是每次点击的商品数据了</li><li>使用<code>Mustache</code>语法将数据绑定到页面</li><li>注意产品规格的数据渲染，可定义<code>wx:for-item=&quot;&quot;</code>来区分子项：<ul><li>产品数据的<code>specs</code>里有三个规格</li><li>不同规格下有对应id和<code>specsDesc</code></li><li><code>specsDesc</code>放置的是不同的选择项及其<code>id</code></li></ul></li></ul></blockquote></li><li><p>商品规格的选择</p><blockquote><p>我踩过的坑</p><ul><li>一开始我选择的是<code>navLeftIndex===index</code>的方法，发现每个规格都会同时选中同一个选项</li></ul></blockquote></li></ul><blockquote><p>解决办法：<br><img src="./src/选品页.png"></p></blockquote><blockquote><ul><li>选中条件：选项的<code>isActive</code>为<code>true</code>；</li><li>而<code>isActive</code>在接口里已经定义了，也有默认选项；因此，需要改变页面所渲染的数据<code>detailInfo</code></li><li>如何改变？<ul><li>在点击规格选项时，将当前选项的id、当前规格的id、当前规格的所有数据都传到<code>js</code>里</li><li>在点击事件的事件处理函数里，for循环遍历当前规格的所有数据，先将所有选项的<code>isActive</code>改为<code>false</code>，再根据选项id，将该选项的<code>isActive</code>改为<code>true</code></li><li>遍历<code>detailInfo</code>，根据当前规格的id找到该规格下的数据，替换成前面修改过的；再将修改后的<code>detailInfo</code>更新到页面中</li></ul></li></ul></blockquote><ul><li>商品金额与数量的联动<blockquote><ul><li>数量的增减使用的是另一个组件</li></ul></blockquote></li></ul><blockquote><p>先分析下逻辑</p><ul><li>在产品点击后，数量默认为最小值1，此时选品框里的金额，就等于产品的单价</li><li>当数量增减时，金额等于单价*数量</li></ul></blockquote><blockquote><p>思路：</p><ul><li>数量组件需要通过事件绑定的方式将数量传给选品组件</li><li>选品组件定义一个变量<code>num</code>保存从子组件接收的值</li><li>选品组件定义一个变量<code>totalMoney</code>保存金额，默认为0，使用三元运算，当它为0时，页面使用接口里的值</li><li>和数量组件绑定的事件处理函数中，根据传来的<code>num</code>修改金额<blockquote><p>这样金额就和数量绑定在了一起，但存在以下问题：</p></blockquote></li></ul></blockquote><blockquote><p>问题：</p><ul><li>关闭选品框后，再打开另一产品，金额和数量不变</li></ul><p>解决方法：</p><ul><li>在关闭按钮的点击事件中，将金额重置为0，这样页面就会使用原始数据；将数量重置为最小值</li></ul></blockquote><ul><li>数量组件的优化<blockquote><p><strong>优化1：</strong>当数量达到边界值时，不再改变，且颜色变灰，表示不能再点击</p><ul><li>去掉图标组件的默认颜色，只声明类型(否则替换不了颜色，优先级太高)</li><li>父组件如何改变子组件的样式类？使用外部样式类<ul><li>在子组件中的<code>js</code>文件里用<code>externalClasses</code>定义外部样式类名，并写入对应标签的<code>class</code>中</li><li>父组件就可以直接在标签中用<code>外部样式类名=&quot;类名&quot;</code>的方式定义样式</li><li>当数量超过临界值时，就改变样式</li></ul></li></ul></blockquote></li></ul><blockquote><p><strong>优化2</strong>：点击事件的触发</p><ul><li>尝试1：使用<code>pointer-events: none;</code>发现无效，确认是小程序不支持该属性</li><li>尝试2：定义一个变量<code>isHandleClick</code>作为开关<ul><li>只在<code>isHandleClick</code>为<code>true</code>时才能点击</li><li>当<code>num</code>超过某一边的边界值时，<code>isHandleClick</code>变为<code>false</code>，不能再点击了，但！另一边的按钮也同时不能点击了</li></ul></li><li>尝试3：定义两个变量：<code>isAddClick</code>和<code>isMinClick</code><ul><li>这两个变量分别控制增加和减少按钮</li><li>和前面一样，当关闭选品页时，变量要重置，因此把这两个变量定义在选品组件里，通过属性绑定的方式传给数量组件</li><li>在增减按钮的点击事件函数中，根据临界值修改变量</li></ul></li></ul></blockquote><h4 id="Storage本地存储"><a href="#Storage本地存储" class="headerlink" title="Storage本地存储"></a>Storage本地存储</h4><ul><li><p>商品在选品时，加入购物车后，其他页面要显示对应的商品信息</p></li><li><p>因此需要将加入购物车的商品信息存在本地存储中</p></li><li><p>统一封装storage</p><blockquote><ul><li>在<code>utils</code>文件夹里，创建<code>storage.js</code>文件</li></ul></blockquote></li></ul><pre><code>/** * 微信小程序标准版：统一封装的 storage 操作类 */class Storage &#123;  //类数组，通过[属性]的方式调用  types = &#123;    1: &#39;get&#39;, // get    2: &#39;set&#39;, // set    3: &#39;rm&#39; // rm  &#125;  /**   * 检验本地存储 key 是否合法   * @param &#123;String&#125; key | 要操作的键值   * @param &#123;Number&#125; type | 类型，是 get set rm    * @param &#123;Boolean&#125; emptyFlag | 是否判断为空情况，默认判断 true，false 为不判断   */  checkKeyType(key, type, emptyFlag = true) &#123;    if (typeof key != &#39;string&#39;) &#123;      throw new Error(`Storage $&#123;this.types[type]&#125; func: key must be string`)      return false    &#125;    if (emptyFlag) &#123;      let tmpKey = key.TrimStr()      if (tmpKey == &#39;&#39;) &#123;        throw new Error(`Storage $&#123;this.types[type]&#125; func: key can not be empty`)        return false      &#125;      return tmpKey;    &#125;    return key  &#125;  /**   * get方法 从本地缓存中获取指定key的值   * @param &#123;String&#125; key | 要操作的键值   * @param &#123;Boolean&#125; syncFlag | 同步状态，默认 false (异步)，true 为同步   */  get = (key, syncFlag = false) =&gt; &#123;    const tmpKey = this.checkKeyType(key, 1)    if (tmpKey) &#123;      const errMsg = &#39;Storage get: failed to get data&#39;      return new Promise((resolve, reject) =&gt; &#123;        if (syncFlag) &#123;          let res = wx.getStorageSync(tmpKey)          if (res) &#123;            resolve(JSON.parse(res))          &#125; else &#123;            reject(errMsg)          &#125;        &#125; else &#123;          wx.getStorage(&#123;            key: tmpKey,            success: (res) =&gt; &#123;              resolve(JSON.parse(res.data))            &#125;,            fail: (err) =&gt; &#123;              reject(errMsg)            &#125;          &#125;)        &#125;      &#125;)    &#125;  &#125;  /**   * 将数据保存在本地存储的指定key中 会覆盖掉原来该 key 对应的内容   * @param &#123;String&#125; key | 要操作的键值   * @param &#123;*&#125; data | 要存储的值，会转换为 JSON 串进行存储   * @param &#123;Boolean&#125; syncFlag | 同步状态，默认 false (异步)，true 为同步   */  set = (key, data, syncFlag) =&gt; &#123;    const tmpKey = this.checkKeyType(key, 2)    if (tmpKey) &#123;      const sucMsg = &#39;Storage set: set data successfully&#39;      const errMsg = &#39;Storage set: failed to set data&#39;      return new Promise((resolve, reject) =&gt; &#123;        let tmpData = JSON.stringify(data)        if (syncFlag) &#123;          try &#123;            wx.setStorageSync(tmpKey, tmpData)            resolve(sucMsg)          &#125; catch (err) &#123;            console.log(err)            reject(errMsg)          &#125;        &#125; else &#123;          wx.setStorage(&#123;            data: tmpData,            key: tmpKey,            success: () =&gt; &#123;              resolve(sucMsg)            &#125;,            fail: (err) =&gt; &#123;              console.log(err)              reject(errMsg)            &#125;          &#125;)        &#125;      &#125;)    &#125;  &#125;  /**   * 可以移除本地存储中指定key的数据 如果不指定则清除全部数据   * @param &#123;String&#125; key | 要操作的键值，为空则清空所有，有值则清空指定的值   * @param &#123;Boolean*&#125; syncFlag | 同步状态，默认 false (异步)，true 为同步   */  rm = (key = &#39;&#39;, syncFlag = false) =&gt; &#123;    let tmpKey = this.checkKeyType(key, 3, false)    tmpKey = tmpKey.TrimStr()    const sucMsg = &#39;Storage rm: rm data successfully&#39;    const errMsg = &#39;Storage rm: failed to rm data&#39;    return new Promise((resolve, reject) =&gt; &#123;      if (tmpKey == &#39;&#39;) &#123;        if (syncFlag) &#123;          try &#123;            wx.clearStorageSync()            resolve(sucMsg)          &#125; catch (err) &#123;            console.log(err)            reject(errMsg)          &#125;        &#125; else &#123;          wx.clearStorage(&#123;            success: (res) =&gt; &#123;              resolve(sucMsg)            &#125;,            fail: (err) =&gt; &#123;              console.log(err)              reject(errMsg)            &#125;          &#125;)        &#125;      &#125; else &#123;        if (syncFlag) &#123;          try &#123;            wx.removeStorageSync(tmpKey)            resolve(sucMsg)          &#125; catch (err) &#123;            console.log(err)            reject(errMsg)          &#125;        &#125; else &#123;          wx.removeStorage(&#123;            key: tmpKey,            success: () =&gt; &#123;              resolve(sucMsg)            &#125;,            fail: (err) =&gt; &#123;              console.log(err)              reject(errMsg)            &#125;          &#125;)        &#125;      &#125;    &#125;)  &#125;&#125;/** * 清除字符串前后的空格 */String.prototype.TrimStr = function () &#123;  return this.replace(/(^\s*)|(\s*$)/g, &#39;&#39;);&#125;export &#123;  Storage&#125;</code></pre><ul><li>使用：<blockquote><ul><li>在<code>app.js</code>顶部引入并注册 App 上</li></ul></blockquote></li></ul><pre><code>// app.jsimport &#123; Storage &#125; from &#39;./utils/storage&#39;const storage = new Storage();App(&#123;  storage,  getStorage: storage.get,  setStorage: storage.set,  rmStorage: storage.rm,...省略&#125;)</code></pre><blockquote><ul><li>在页面中使用</li></ul></blockquote><pre><code>// component/product-detail/product-detail.js//获取应用实例const app = getApp()Component(&#123;  //app打点的方式调用&#125;)</code></pre><h4 id="加入购物车-详情页"><a href="#加入购物车-详情页" class="headerlink" title="加入购物车(详情页)"></a>加入购物车(详情页)</h4><ol><li>实现效果</li></ol><ul><li>当用户选择商品数量，点击添加购物车后，能将该商品信息及选择数量保存在缓存中，使其他页面也能得到该数据</li><li>交互效果：弹出提示框，超过库存或添加成功</li><li>徽标：商品添加购物车后，购物车的tabBar部分会出现相应的数量</li></ul><ol start="2"><li>难点</li></ol><ul><li>相同的<code>key</code>保存的数据会被覆盖</li><li>数量组件、选品页面、购物车页面之间的数据传递</li></ul><ol start="3"><li>实现步骤</li></ol><ul><li><p>给<code>加入购物车按钮</code>添加点击事件</p></li><li><p>变量<code>selectNum</code>，用于保存当次选择的数量，即数量组件传过来的值</p></li><li><p>变量<code>numInCart</code>，用于当前产品已添加的总数</p><blockquote><ul><li>以上两个字段都要添加到<code>storage</code>里面，设置两个变量的目的在于：重复添加同一产品时，<code>numInCart</code>保存着上一次添加的数量，<code>selectNum</code>为本次添加的数量，需要相加后更新到<code>numInCart</code>中，作为总数</li></ul></blockquote></li><li><p>用<code>cartInfo</code>作为key值，在本地存储中保存购物数据</p></li><li><p>由于同一key的数据会被覆盖，而商品数据不止一条；因此，把商品数据都放入数组中，新数据<code>push</code>进数组</p></li><li><p>在更新<code>cartInfo</code>时，会遇到三种情况</p><blockquote><ul><li>第一种，第一次添加时，<code>storage</code>中没有<code>cartInfo</code>数据<ul><li>为<code>detailInfo</code>添加<code>numInCart</code>字段，表示添加商品的总数，就等于<code>selectNum</code></li><li>声明一个空数组，并将<code>detailInfo</code>存进数组</li><li>使用<code>setStorage</code>方法，将数组加入本地缓存</li></ul></li><li>第二种，<code>cartInfo</code>已经有该商品</li><li>第三种，<code>cartInfo</code>没有该商品</li></ul></blockquote></li><li><p>后面两种情况：</p><blockquote><ul><li>首先需要判断是否已经存过<ul><li>声明一个变量作为标志<code>isExist</code>，默认为<code>false</code>，表示缓存中没有该商品</li><li>获取缓存中的<code>cartInfo</code>，并进行遍历</li><li>将缓存中数据的id与当前商品的id进行对比，如果相等就将<code>isExist</code>修改为<code>true</code></li></ul></li><li><code>isExist</code>为<code>true</code>，存在同一产品：<ul><li>将两次添加的数量相加</li><li>判断库存，如果不超过库存，就添加进<code>storage</code>，超过了就提示</li></ul></li><li><code>isExist</code>为<code>false</code>，没存过：<ul><li>更新<code>numInCart</code></li><li>判断库存，如果不超过库存，就添加进<code>storage</code>，超过了就提示</li></ul></li></ul></blockquote></li></ul><ol start="4"><li>购物车的徽标<br><strong>效果：</strong></li></ol><ul><li>初始化时，并没有徽标</li><li>商品加入购物车后，徽标显示当前添加的商品数量(不是杯数)</li></ul><p><strong>什么时候更新徽标数据</strong></p><ul><li>用户在关闭详情页时，此时已成功加入购物车</li><li>整个小程序在启动时，需要先获取本地存储中是否有数据<blockquote><ul><li>当数据存储在本地缓存中指定的key中，除非用户主动删除或因存储空间原因被系统清理，否则数据都一直可用</li></ul></blockquote></li><li>切换到购物车页面时，要获取最新数据</li></ul><h3 id="购物车页面"><a href="#购物车页面" class="headerlink" title="购物车页面"></a>购物车页面</h3><h4 id="基础准备-2"><a href="#基础准备-2" class="headerlink" title="基础准备"></a>基础准备</h4><ul><li>数据来源：本地缓存<code>storage</code></li><li>效果：<blockquote><ul><li>展示已选择商品的名称、价格、规格、数量等信息</li><li>商品结算时，金额与数量之间的联动、跳转到订单页结算</li><li>滑动删除商品</li></ul></blockquote></li><li>难点<blockquote><ul><li>单选&#x2F;全选商品时，总金额与数量之间的逻辑处理</li></ul></blockquote></li></ul><h4 id="购物车布局"><a href="#购物车布局" class="headerlink" title="购物车布局"></a>购物车布局</h4><ol><li>商品列表布局<blockquote><ul><li>拿到<code>storage</code>里的数据，遍历数据</li><li>规格需要三层遍历，分隔线<code>/</code>用伪元素做</li><li>选择按钮：给商品数据添加<code>selected</code>字段，用<code>wx:if</code>和<code>wx:else</code>控制显隐</li></ul></blockquote></li></ol><p><strong>细节：</strong></p><blockquote><ul><li>用户可以直接在购物车页面修改数量，因此需要保存修改后的值，更新页面</li><li>当页面隐藏&#x2F;切换时，要获取购物车页面的最新数据，并更新到<code>cartInfo</code>中</li></ul></blockquote><ol><li><p>空购物车界面</p><blockquote><ul><li>单独封装成自定义组件，实现复用</li></ul></blockquote></li><li><p>底部提交订单栏和滑动删除按钮</p></li></ol><p><strong>布局实现：使用<code>vant</code>组件</strong></p><blockquote><ul><li>初始化<code>npm -y</code></li><li>安装npm包：<code>npm i @vant/weapp -S --production</code></li><li>将 <code>app.json</code> 中的 <code>&quot;style&quot;: &quot;v2&quot;</code> 去除</li><li>打开微信开发者工具，点击 工具 -&gt; 构建<code>npm</code></li><li>在页面的<code>json</code>文件中引入组件</li></ul></blockquote><pre><code>&quot;usingComponents&quot;: &#123;  &quot;van-swipe-cell&quot;: &quot;@vant/weapp/swipe-cell/index&quot;,  &quot;van-submit-bar&quot;: &quot;@vant/weapp/submit-bar/index&quot;&#125;</code></pre><blockquote><ul><li>根据对应文档使用组件</li></ul></blockquote><p><strong>底部提交订单栏——js逻辑</strong></p><ul><li>效果<blockquote><ul><li>点击全选，可实现全选&#x2F;全不选购物车中所有商品</li><li>总金额会随选中的商品及其数量的变化而变化</li><li>结算的数量由<code>selected</code>字段决定</li></ul></blockquote></li><li>思路：<blockquote><p><strong>全选</strong></p><ul><li>声明一个变量<code>selectedAll</code>，作为全选的标识，默认为<code>false</code>，即没有全选</li><li>在全选按钮的点击事件中<ul><li>如果<code>selectedAll</code>为<code>false</code>，那就遍历购物车中所有商品，将<code>selected</code>字段都修改成<code>true</code>；修改完之后，再将<code>selectedAll</code>改为<code>true</code>，也就是已经<strong>全选</strong>了</li><li>在下一次点击时，看到<code>selectedAll</code>为<code>true</code>，就将购物车中所有商品的<code>selected</code>字段都修改成<code>false</code>，再将<code>selectedAll</code>改为<code>false</code>，这样就能实现<strong>全不选</strong></li><li>更新总金额和选择数量</li></ul></li></ul><p><strong>单选</strong></p><ul><li>拿到当前点击的商品数据，添加<code>selected</code>字段，并且值为相反值<br><code> cartInfo[index].selected = !cartInfo[index].selected</code><ul><li><code>selected</code>默认为<code>false</code>，这样既添加了新字段，又实现了两次点击的值相反</li><li>更新总金额和选择数量<br>细节：</li></ul></li><li>选中商品的数量为0时，结算按钮为灰色，不能点击；用三元运算符控制</li></ul></blockquote></li></ul><blockquote><p><strong>总金额和选择数量</strong></p><ul><li>由于单选或全选时都要更新总金额，因此单独定义一个方法<code>_updataMoney</code></li><li>声明一个变量<code>payMoney</code>，保存总金额</li><li>每次调用该方法，都会将<code>cartInfo</code>遍历一次，计算所有<code>selected</code>等于<code>true</code>的数据的 <strong>总金额和数量</strong></li><li>定义一个变量<code>isSelectedAll</code>，作为全选标志，默认为<code>true</code><ul><li>在遍历<code>cartInfo</code>时，任一商品的<code>selected</code>等于<code>false</code>，<code>isSelectedAll</code>就变成<code>false</code>，表示没有全选，因此将<code>selectedAll</code>修改为<code>false</code></li><li>在遍历完之后，如果<code>isSelectedAll</code>仍为<code>true</code>，就表示单选了购物车中所有商品，此时全选按钮应该亮起，因此将<code>selectedAll</code>修改为<code>true</code></li></ul></li><li>更新<code>cartInfo</code>和本地缓存</li></ul></blockquote><p><strong>滑动删除</strong></p><blockquote><ul><li>根据文档，使用<code>vant</code>组件进行布局</li><li>给删除按钮添加点击事件，用自定义属性传递索引</li><li>根据索引，找到当前点击的商品数据，把它从<code>cartInfo</code>数组中删除</li><li>调用方法更新总金额</li><li>更新缓存</li></ul></blockquote><p><strong>去结算</strong></p><blockquote><ul><li>声明一个空对象<code>acountData</code>保存要传递给订单页的数据</li><li>在结算按钮的点击事件中，将所有被选中的商品保存到一个空数组中</li><li>将总金额和结算数组保存到<code>acountData</code>对象中</li><li>将<code>acountData</code>作为新的<code>key</code>存入本地缓存，订单页可以通过该<code>key</code>获取数据</li><li>跳转到订单页</li></ul></blockquote><h3 id="订单页"><a href="#订单页" class="headerlink" title="订单页"></a>订单页</h3><p><strong>效果</strong></p><ul><li>滑动&#x2F;点击切换tabs标签可查看不同状态的订单</li><li>付款</li></ul><p><strong>难点</strong></p><ul><li>通过<code>WXS</code>和节流函数优化频繁划动切换带来的性能问题</li><li>支付成功后，删除购物车中的商品</li></ul><p><strong>布局</strong></p><ul><li>顶部分类栏</li><li>加入购物车的商品动态渲染</li><li>空订单时的界面：复用组件</li></ul><h4 id="实现tabs标签的切换"><a href="#实现tabs标签的切换" class="headerlink" title="实现tabs标签的切换"></a>实现tabs标签的切换</h4><ol><li>原理</li></ol><ul><li>在点击&#x2F;滑动事件中，将目标索引传入js中，保存在<code>currentTabIndex</code>中，当<code>tabs</code>标签的索引等于<code>currentTabIndex</code>时，激活选中样式</li><li>最重要的是传入目标索引，点击切换比较简单</li></ul><ol start="2"><li><p>滑动切换<br><strong>思路</strong></p><blockquote><ul><li>在视图层<code>wxml、wxs</code>中处理<code>touchmove</code>事件，在处理完成之后，再将事件的结果传给逻辑层</li><li>控制灵敏度：计算手指触摸开始和结束的距离，当该距离在一定范围内时，再向逻辑层传递结果</li></ul></blockquote></li><li><p>节流优化</p></li></ol><ul><li>在接收滑动&#x2F;点击事件传来的<code>index</code>时，引入节流函数，控制执行频率</li></ul><h4 id="与购物车页面相关"><a href="#与购物车页面相关" class="headerlink" title="与购物车页面相关"></a>与购物车页面相关</h4><ol><li><p>点击结算之后删除商品</p><blockquote><ul><li>循环遍历加入本地缓存中的<code>acountList</code>数组，与<code>cartInfo</code>数据进行对比，删除相同数据，更新缓存和页面的<code>cartInfo</code></li></ul></blockquote></li><li><p><code>acountData</code>的调整</p><blockquote><ul><li>如果用户分几次结算商品，那么为了不覆盖前面的数据</li><li>应该先获取缓存中的商品数组和金额，然后将本次的商品<code>push</code>进去，计算总金额时也要加上前面的，最后更新缓存</li></ul></blockquote></li></ol><h3 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h3><ul><li><p>布局</p><blockquote><ul><li>创建两种状态的登录框</li><li>下方的列表在登录状态不同时，也应该不一样</li></ul></blockquote></li><li><p>开放能力</p><blockquote><ul><li>微信官方有在线客服和意见反馈的功能</li><li>将 <code>button</code> 组件 <code>open-type</code> 的值设置为 <code>contact</code>，当用户点击后就会进入客服会话</li><li>将 <code>button</code> 组件 <code>open-type</code> 的值设置为 <code>feedback</code>，当用户点击后就会打开“意见反馈”页面，用户可提交反馈内容并上传日志</li></ul></blockquote></li></ul><h4 id="授权登录——云开发"><a href="#授权登录——云开发" class="headerlink" title="授权登录——云开发"></a>授权登录——云开发</h4><p><strong>步骤：</strong></p><ul><li><p>使用<code>wx.getUserProfile</code>获取用户头像和昵称</p></li><li><p>创建云开发环境</p><blockquote><ul><li>在项目根目录 <code>project.config.json</code> 项目配置文件中，初始化配置云函数的文件夹的目录</li><li>在项目根目录中，新建 <code>cloud</code> 文件夹，并选择项目对应的环境</li></ul></blockquote></li><li><p>初始化</p><blockquote><ul><li>在云开发控制台中，创建数据表 <code>users</code> 用于存储用户信息</li><li>在 <code>cloud</code> 文件夹上右键 -&gt; 选择”新建 <code>Node.js</code> 云函数”，输入云函数名称 <code>login</code> 即可新建成功</li><li>在小程序 <code>app.js</code> 中初始化云函数</li><li>上传并部署云函数(每次修改云函数都要重新上传)</li><li>在微信端调用云函数，将<code>wx.getUserProfile</code>获取的用户头像和昵称等用户信息传给后端，用于生成用户账号</li></ul></blockquote></li><li><p>在<code>cloud/login/index.js</code>中编写根据<code>openId</code>查询用户信息的方法，根据查询返回的数组的长度来决定下一步是注册还是登录</p></li><li><p>注册用户账号</p><blockquote><ul><li>在 <code>cloud/login/index.js</code> 云函数中完成用户信息的注册，在数据库中新增用户数据</li><li>当用户注册成功后，根据 ID 快速查询当前用户的信息，并返回给前端</li><li>上传并部署云函数</li></ul></blockquote></li><li><p>实现登录逻辑</p><blockquote><ul><li>如果已经注册，就可以返回根据<code>openId</code>到的查询用户信息</li></ul></blockquote></li><li><p>小程序页面逻辑</p><blockquote><ul><li>获取登录后的数据，并将数据库中真实的用户信息同步到本地存储中，做数据的持久化</li><li>当页面切换时，实时获取最新的用户数据</li><li>注意：要在云开发控制台中，修改数据库的权限，选择所有用户可读</li></ul></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> applet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML及vscode</title>
      <link href="/2023/11/19/HTML%E5%8F%8Avscode/"/>
      <url>/2023/11/19/HTML%E5%8F%8Avscode/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><div class="markmap-container" style="height:400px">  <svg data="{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;HTML&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;定义&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;描述网页的语言 / 超文本标记语言&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;超出文本的限制：可使用img/audio/vedio等&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;超链接文本：实现文件间的跳转&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;html骨架&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;文档声明：!DOCTYPE&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;告诉浏览器的解析器，用什么规范来解析页面&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;语言类型：lang=&amp;quot;en&amp;quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;声明语言类型&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;网页配置：head&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;网页标题：title&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;meta：元标签&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[26,27]},&quot;v&quot;:&quot;声明网页字符编码集：charset&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[28,29]},&quot;v&quot;:&quot;UTF-8：全球语言&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[30,31]},&quot;v&quot;:&quot;gbk：汉语、英语、少量日韩&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[32,33]},&quot;v&quot;:&quot;ASCII：英语&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[34,35]},&quot;v&quot;:&quot;http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[36,37]},&quot;v&quot;:&quot;IE8及以上版本使用当前版本的最高级标准模式去渲染网页&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[38,39]},&quot;v&quot;:&quot;name&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[40,41]},&quot;v&quot;:&quot;移动端适配：viewport&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:11,&quot;p&quot;:{&quot;lines&quot;:[42,43]},&quot;v&quot;:&quot;宽度为设备实际宽度：width=device-width&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:11,&quot;p&quot;:{&quot;lines&quot;:[44,45]},&quot;v&quot;:&quot;不需要缩放：initial-scale=1.0&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[46,47]},&quot;v&quot;:&quot;网页关键词：key&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[48,49]},&quot;v&quot;:&quot;网页描述：description&quot;}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[50,51]},&quot;v&quot;:&quot;网页内容：body&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[52,53]},&quot;v&quot;:&quot;HTML5优点/新特性&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[54,55]},&quot;v&quot;:&quot;形成了HTML5标准的文档声明，不再基于SGML&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[56,57]},&quot;v&quot;:&quot;新增了语义化标签&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[58,59]},&quot;v&quot;:&quot;支持多媒体：audio、vedio&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[60,61]},&quot;v&quot;:&quot;画布canvas可以绘制各种形状&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[62,63]},&quot;v&quot;:&quot;可以使用SOL数据库、支持存储离线数据：sessionStorage、localStorage&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[64,65]},&quot;v&quot;:&quot;新的文档属性：document.visibilityState&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[66,67]},&quot;v&quot;:&quot;支持定位、拖动和放置&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[68,69]},&quot;v&quot;:&quot;语义化&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[70,71]},&quot;v&quot;:&quot;概念&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[72,73]},&quot;v&quot;:&quot;使用有英文语义的标签&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[74,75]},&quot;v&quot;:&quot;作用/原因&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[76,77]},&quot;v&quot;:&quot;在没有样式的情况下，也能够看得懂网页框架&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[78,79]},&quot;v&quot;:&quot;爬虫依赖标签来确定上下文和关键词的权重，语义化有利于SEO优化&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[80,81]},&quot;v&quot;:&quot;国际化，各国开发者都能看得懂&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[82,83]},&quot;v&quot;:&quot;提供可维护性，减少差异&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[84,85]},&quot;v&quot;:&quot;有利于帮助辅助技术更好地转义网页，例如无障碍阅读&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[86,87]},&quot;v&quot;:&quot;html标签&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[88,89]},&quot;v&quot;:&quot;块级元素&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[90,91]},&quot;v&quot;:&quot;标题：h1~h6&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[92,93]},&quot;v&quot;:&quot;段落p&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[94,95]},&quot;v&quot;:&quot;div&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[96,97]},&quot;v&quot;:&quot;列表标签ul~li，ol~li&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[98,99]},&quot;v&quot;:&quot;定义列表dl dt dd&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[100,101]},&quot;v&quot;:&quot;表单form&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[102,103]},&quot;v&quot;:&quot;action属性：规定向何处发送数据&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[104,105]},&quot;v&quot;:&quot;methods属性：规定发送数据的HTTP方法&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[106,107]},&quot;v&quot;:&quot;行内块元素&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[108,109]},&quot;v&quot;:&quot;img&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[110,111]},&quot;v&quot;:&quot;gif：动画、布尔透明、无兼容问题&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[112,113]},&quot;v&quot;:&quot;jpg：失真压缩法，色彩丰富&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[114,115]},&quot;v&quot;:&quot;png：支持透明，高保真&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[116,117]},&quot;v&quot;:&quot;webp：文件小，动画，透明，兼容性相对不好&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[118,119]},&quot;v&quot;:&quot;svg：矢量图，体积小，动画&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[120,121]},&quot;v&quot;:&quot;audio&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[122,123]},&quot;v&quot;:&quot;vedio&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[124,125]},&quot;v&quot;:&quot;input(不同的type属性有不同作用)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[126,127]},&quot;v&quot;:&quot;text：单行文本&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[128,129]},&quot;v&quot;:&quot;radio：单选框&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[130,131]},&quot;v&quot;:&quot;checkbox：多选框&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[132,133]},&quot;v&quot;:&quot;button：按钮&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[134,135]},&quot;v&quot;:&quot;submit：提交&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[136,137]},&quot;v&quot;:&quot;password：密码&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[138,139]},&quot;v&quot;:&quot;reset：重置&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[140,141]},&quot;v&quot;:&quot;select&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[142,143]},&quot;v&quot;:&quot;option&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[144,145]},&quot;v&quot;:&quot;textarea&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[146,147]},&quot;v&quot;:&quot;行内元素&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[148,149]},&quot;v&quot;:&quot;a标签&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[150,151]},&quot;v&quot;:&quot;span&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[152,153]},&quot;v&quot;:&quot;label&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[154,155]},&quot;v&quot;:&quot;空白折叠现象&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[156,157]},&quot;v&quot;:&quot;多个换行或多个空格会被解析成一个空格&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[158,159]},&quot;v&quot;:&quot;转义符&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[160,161]},&quot;v&quot;:&quot;空格：&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[162,163]},&quot;v&quot;:&quot;&amp;amp;：&amp;amp;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[164,165]},&quot;v&quot;:&quot;版权符：©&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[166,167]},&quot;v&quot;:&quot;商标：®&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[168,169]},&quot;v&quot;:&quot;&amp;lt;：&amp;lt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[170,171]},&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;paragraph&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[170,171]},&quot;v&quot;:&quot;：&amp;gt;&quot;}]}]}]}]}"></svg></div><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><h3 id="1、HTML是什么"><a href="#1、HTML是什么" class="headerlink" title="1、HTML是什么"></a>1、HTML是什么</h3><ul><li>HTML是用来描述网页的语言，又称“超文本标记语言”<blockquote><p>超文本有两层含义</p><ul><li>超出了文本的限制：他可以加入图片、视频、音频、链接等</li><li>超级链接文本：可以从一个文件跳转到另一个文件，与世界各地主机的文件相连</li></ul></blockquote></li></ul><h3 id="2、HTML骨架"><a href="#2、HTML骨架" class="headerlink" title="2、HTML骨架"></a>2、HTML骨架</h3><h4 id="文档声明DTD："><a href="#文档声明DTD：" class="headerlink" title="文档声明DTD："></a>文档声明DTD：</h4><pre><code>&lt;!DOCTYPE html&gt;</code></pre><blockquote><p>它并不是HTML标签，文档声明以下的都是HTML标签<br>作用：告诉浏览器的解析器使用HTML5的标准模式<br>HTML 4.01有三种声明：严格版、过渡版、框架版</p></blockquote><h4 id="声明语言类型"><a href="#声明语言类型" class="headerlink" title="声明语言类型"></a>声明语言类型</h4><pre><code>&lt;html lang=&quot;en&quot;&gt;</code></pre><blockquote><p>en：英语，zh：中文；网站有多国语言时修改</p></blockquote><h4 id="head标签"><a href="#head标签" class="headerlink" title="head标签"></a>head标签</h4><pre><code>&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;</code></pre><blockquote><p>head标签里面是对网页的配置</p></blockquote><h4 id="声明网页字符编码集"><a href="#声明网页字符编码集" class="headerlink" title="声明网页字符编码集"></a>声明网页字符编码集</h4><pre><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></pre><blockquote><p>meta是元标签，charset是字符集<br>在中国字符集有两种类型：”UTF-8”和”gb2312”</p></blockquote><table><thead><tr><th>字符集</th><th>涵盖字符</th><th>1个汉字的字节数</th><th>适用场景</th></tr></thead><tbody><tr><td>UTF-8</td><td>涵盖全球所有国家、民族的文字和大量图形字符</td><td>3</td><td>非汉字文字的网页</td></tr><tr><td>gb2312(gbk)</td><td>收录所有汉字字符、英语，少量韩文、日文、少量图形字符</td><td>2</td><td>只有汉语和英语的网页</td></tr><tr><td>ASCII</td><td>只有英文</td><td></td><td></td></tr><tr><td>ISO-8859-1</td><td>西欧字符</td><td></td><td></td></tr><tr><td>Unicode</td><td>世界通用</td><td></td><td>它只是符号集，并不是编码方式；具体编码方式包括UTF-8、UTF-16、UTF-32</td></tr></tbody></table><blockquote><p>由上表可以看出，gbk更加节省字节，有利于SEO优化<br>注意：VScode的设置要与此处一致，否则会乱码。且live serve插件不支持gbk</p></blockquote><h4 id="IE8及以上版本都使用当前版本所对应的最高级标准模式去渲染"><a href="#IE8及以上版本都使用当前版本所对应的最高级标准模式去渲染" class="headerlink" title="IE8及以上版本都使用当前版本所对应的最高级标准模式去渲染"></a>IE8及以上版本都使用当前版本所对应的最高级标准模式去渲染</h4><pre><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</code></pre><blockquote><p><code>X-UA-Compatible</code> 是IE8的专有meta属性，他告诉IE8采用何种IE版本去渲染网页<br>最佳兼容模式方案：</p></blockquote><pre><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt;</code></pre><blockquote><p><code>chrome=1</code>表示将允许站点在使用了谷歌浏览器内嵌框架的客户端渲染</p></blockquote><h4 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h4><ul><li>宽度为设备实际宽度，不需要缩放</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ul><li>keywords</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>关键词内容<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li>description</li></ul><pre><code>&lt;meta name=&quot;description&quot; content=&quot;描述的内容&quot;/&gt;</code></pre><h4 id="网页标题"><a href="#网页标题" class="headerlink" title="网页标题"></a>网页标题</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></code></pre><h4 id="body标签"><a href="#body标签" class="headerlink" title="body标签"></a>body标签</h4><blockquote><p>里面包括网页的头部、主要内容、页脚各个部分</p></blockquote><h3 id="3、浏览器内核"><a href="#3、浏览器内核" class="headerlink" title="3、浏览器内核"></a>3、浏览器内核</h3><table><thead><tr><th>浏览器</th><th>内核</th></tr></thead><tbody><tr><td>IE、世界之窗浏览器</td><td>Trident</td></tr><tr><td>Edge</td><td>WebKit</td></tr><tr><td>chrome&#x2F;opera</td><td>Blink</td></tr><tr><td>Firefox（火狐）</td><td>Gecko</td></tr><tr><td>Safari（苹果）</td><td>webkit</td></tr><tr><td>360、猎豹、2345浏览器</td><td>trident+blink</td></tr><tr><td>UC、搜狗、遨游、QQ浏览器</td><td>trident+webkit</td></tr></tbody></table><h2 id="二、HTML标签及属性"><a href="#二、HTML标签及属性" class="headerlink" title="二、HTML标签及属性"></a>二、HTML标签及属性</h2><h3 id="1、标题标签"><a href="#1、标题标签" class="headerlink" title="1、标题标签"></a>1、标题标签</h3><p>h1~h6</p><table><thead><tr><th>html写法</th><th>markdown写法</th></tr></thead><tbody><tr><td><h1>一级标题</h1></td><td># H1</td></tr><tr><td><h2>二级标题</h2></td><td>## H2</td></tr><tr><td><h3>三级标题</h3></td><td>### H3</td></tr><tr><td><h4>四级标题</h4></td><td>#### H4</td></tr><tr><td><h5>五级标题</h5></td><td>##### H5</td></tr><tr><td><h6>六级标题</h6></td><td>###### H6</td></tr></tbody></table><h3 id="2、段落标签"><a href="#2、段落标签" class="headerlink" title="2、段落标签"></a>2、段落标签</h3><pre><code>&lt;p&gt;段落&lt;/p&gt;</code></pre><h3 id="3、HTML5特性"><a href="#3、HTML5特性" class="headerlink" title="3、HTML5特性"></a>3、HTML5特性</h3><h4 id="空白折叠现象：多个换行和多个空格都会被折叠成一个空格"><a href="#空白折叠现象：多个换行和多个空格都会被折叠成一个空格" class="headerlink" title="空白折叠现象：多个换行和多个空格都会被折叠成一个空格"></a>空白折叠现象：多个换行和多个空格都会被折叠成一个空格</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>空白折叠现象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>文字之间   的  多个空格会被折叠成一个空格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>多个空行会被省略<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    标签内壁和文字之间的空格会被忽略<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>效果展示：</p><h3>空白折叠现象</h3><h3>文字之间   的  多个空格会被折叠成一个空格</h3><h3>多个空行会被省略</h3><p>    标签内壁和文字之间的空格会被忽略</p><h4 id="常用转义符"><a href="#常用转义符" class="headerlink" title="常用转义符"></a>常用转义符</h4><pre class=" language-html"><code class="language-html">空格：<span class="token entity" title="&nbsp;">&amp;nbsp;</span>小于号：<span class="token entity" title="&lt;">&amp;lt;</span>大于号：<span class="token entity" title="&gt;">&amp;gt;</span>&amp;符号：<span class="token entity" title="&amp;">&amp;amp;</span>单引号：<span class="token entity" title="&quot;">&amp;quot;</span>版权符：<span class="token entity" title="&copy;">&amp;copy;</span>已注册商标：<span class="token entity" title="&reg;">&amp;reg;</span></code></pre><p>效果展示：<br>空格：&nbsp;<br>小于号：&lt;<br>大于号：&gt;<br>&amp;符号：&amp;<br>单引号：&quot;<br>版权符：&copy;<br>已注册商标：&reg;</p><blockquote><p>注：千万不要忘了分号;</p></blockquote><h3 id="4、列表标签"><a href="#4、列表标签" class="headerlink" title="4、列表标签"></a>4、列表标签</h3><h4 id="无序列表：ul-li"><a href="#无序列表：ul-li" class="headerlink" title="无序列表：ul li"></a>无序列表：ul li</h4><ul>    <li>ul、li是一对父子标签，必须同时存在</li>    <li>ul中只能嵌套li，但是li可以嵌套任何标签</li>    <li>type属性：</li>        <ul>            <li>旧版本使用type="square/circle/disc"</li>            <li>在html5中用CSS定义其type属性 style="list-style-type:cicle/square/disc"</li>        </ul>    </li></ul><ul type="disc">    <li>默认样式：实心圆disc</li></ul><ul style="list-style-type:circle">    <li>空心圆：circle</li></ul><ul style="list-style-type:square">    <li>实心正方形：square</li></ul><blockquote><p>markdown语法：</p><ul><li>实心圆：减号-+空格</li><li>空心圆：tab+减号-+一个空格</li></ul></blockquote><h4 id="有序列表-ol-li"><a href="#有序列表-ol-li" class="headerlink" title="有序列表 ol li"></a>有序列表 ol li</h4><ol>    <li>ol li也是父子标签，ol只能嵌套li，但li可以嵌套任何标签</li>    <li>有顺序的列表</li>    <li>type属性：type="1/A/a/I/i"</li>        <ol type="1">            <li>Java</li>            <li>C++</li>            <li>python</li>        </ol>    <li>start属性：指定起始值</li>        <ol type="I" start="3">            <li>Java</li>            <li>C++</li>            <li>python</li>        </ol>    <li>reversed属性：倒序，直接填写该单词</li>        <ol type="A" start="3" reversed >            <li>Java</li>            <li>C++</li>            <li>python</li>        </ol></ol><blockquote><p>markdown中直接输入数字+.+一个空格<br>根据上下顺序编号，而不是输入的数字</p></blockquote><pre><code>1. first5. second3. third </code></pre><p>效果：</p><ol><li>first</li><li>second</li><li>third</li></ol><h4 id="定义列表-dl-dt-dd"><a href="#定义列表-dl-dt-dd" class="headerlink" title="定义列表 dl dt dd"></a>定义列表 dl dt dd</h4><dl>    <dt>定义项1</dt>    <dd>解释说明1</dd>    <dd>解释说明2</dd>    <dt>定义项2</dt>    <dd>解释说明1</dd></dl><dl>    <dt>定义项3</dt>    <dd>解释说明1</dd></dt><blockquote><ul><li>dt dl可交替出现，也可以不交替出现(此时放在不同的dl中)</li><li>应用场景可参考小米官网底部</li><li>markdown语法：第一行术语，第二行冒号+一个空格+定义<br>定义项<br>: 解释说明</li></ul></blockquote><h3 id="5、多媒体标签"><a href="#5、多媒体标签" class="headerlink" title="5、多媒体标签"></a>5、多媒体标签</h3><h4 id="图片标签img"><a href="#图片标签img" class="headerlink" title="图片标签img"></a>图片标签img</h4><ul><li>正确写法：</li></ul><pre><code>&lt;img src=&quot; &quot; alt=&quot; &quot; width=&quot; &quot; height=&quot; &quot;/&gt;</code></pre><img src="3.avif"/><blockquote><p>pc端以上四要素必须填写<br>移动端必须填写alt属性，且需要表现出图片的含义</p></blockquote><ul><li>alt属性：图片的文本描述</li><li>width、height属性：图片宽度高度</li><li>src图片路径：<ul><li>相对路径：从当前网页出发，找到图片的路径。.&#x2F;是当前目录；..&#x2F;是返回上一级目录。</li><li>绝对路径：图片的精确地址</li></ul></li></ul><blockquote><p>markdown语法：<code>![alt](图片路径)</code></p></blockquote><h4 id="超级链接a标签"><a href="#超级链接a标签" class="headerlink" title="超级链接a标签"></a>超级链接a标签</h4><ul><li>正确写法：</li></ul><pre><code>&lt;a herf=&quot;链接&quot; title=&quot;悬停文本&quot; target=&quot;网页跳转方式&quot;&gt;网页显示&lt;/a&gt;</code></pre><p><a href="https://www.baidu.com" title="百度知道" target="_self">百度一下</a></p><blockquote><p>a标签是网页之间跳转的方式<br>href属性：支持相对属性和绝对属性<br>title属性：悬停文本<br>target属性：网页跳转的方式</p><ul><li>_blank&#x2F;blank:在新窗口打开网页</li></ul></blockquote><ul><li><p>_self:默认，当前页面跳转</p></li><li><p>_parent:在父窗口中打开</p></li><li><p>_top:在当前窗体打开链接，并替换当前的整个窗体</p><blockquote><ul><li>下面三个标签在网页上看效果一样，但在框架页中效果不同</li></ul></blockquote></li><li><p>点击图片跳转网页：</p><a href="https://www.baidu.com" title="手机"><img src="1.jpg"></a></li><li><p>页面锚点</p></li></ul><blockquote><p>给B处设置id，A处a标签链接为该id，点击A处则会跳转至B处</p></blockquote><pre><code>&lt;a href=&quot;#id名&quot;&gt;名称&lt;/a&gt;&lt;p id=&quot; &quot;&gt;名称&lt;/p&gt;</code></pre><p>效果：<br><a href="#yyhbq">语义化标签</a></p><blockquote><p>markdown语法：<br><a href="#A%E5%A4%84%E5%90%8D%E7%A7%B0-id%E5%90%8D-id">A处</a><br>B处 {id名-id}</p></blockquote><p><a href="#7%E3%80%81%E8%A1%A8%E6%A0%BC%E6%A0%87%E7%AD%BE-bg-id">表格标签</a></p><ul><li>下载链接<blockquote><p>支持exe、zip、rar、word、excel等格式的文件<br>链接为文件地址</p></blockquote></li></ul><p><a href="D:\arry\30天计划\配件\前端学习资料-超链接.docx">前端学习资料</a></p><ul><li><p>邮件链接</p><blockquote><p>链接为mailto:邮箱地址<br><a href="1234@qq.com">给我发邮件</a></p></blockquote></li><li><p>电话链接</p><blockquote><p>链接为tel:电话号码<br><a href="1234">给我打电话</a></p></blockquote></li></ul><h4 id="音频标签audio"><a href="#音频标签audio" class="headerlink" title="音频标签audio"></a>音频标签audio</h4><ul><li>正确写法1：</li></ul><pre><code>&lt;audio controls src=&quot;路径&quot; autoplay loop&gt;提示语&lt;/audio&gt;</code></pre><p><audio controls src="D:\arry\30天计划\配件\音标篇004.mp3" autoplay loop>抱歉，您的浏览器不支持audio标签，请升级您的浏览器哦</audio></p><ul><li><p>controls：显示播放空间</p></li><li><p>src：文件路径</p></li><li><p>提示语：浏览器不兼容时的文字显示</p></li><li><p>autoplay：自动播放</p></li><li><p>loop：循环播放</p></li><li><p>正确写法2(加入source标签)：</p></li></ul><pre><code>&lt;audio controls&gt;    &lt;source src=&quot;音频.mp3&quot; type=&quot;audio/mpeg&quot; autoplay loop/&gt;    &lt;source src=&quot;音频.ogg&quot; type=&quot;audio/ogg&quot; autoplay loop/&gt;    &lt;source src=&quot;音频.wav&quot; type=&quot;audio/wav&quot; autoplay loop/&gt;抱歉，您的浏览器不支持audio标签，请升级您的浏览器哦&lt;/audio&gt;</code></pre><ul><li>source标签为媒体元素定义媒体资源</li></ul><blockquote><p>它给浏览器提供多种格式的文件，浏览器会选择其支持的格式进行播放；如果都支持则任选一个，默认是第一个。</p></blockquote><table><thead><tr><th>Format</th><th>MIME-type</th><th>说明</th></tr></thead><tbody><tr><td>MP3</td><td>audio&#x2F;mpeg</td><td>一种音频压缩技术，用来大幅度的降低音频数</td></tr><tr><td>Ogg</td><td>audio&#x2F;ogg</td><td>新的音频压缩技术，完全免费，无专利限制</td></tr><tr><td>Wav</td><td>audio&#x2F;wav</td><td>由微软公司开发，声音质量接近CD</td></tr><tr><td><audio controls></td><td></td><td></td></tr></tbody></table><pre><code>&lt;source src=&quot;D:\arry\30天计划\配件\音标篇004.mp3&quot; type=&quot;audio/mpeg&quot; autoplay loop&gt;</code></pre><p>抱歉，您的浏览器不支持audio标签，请升级您的浏览器哦<br></audio></p><h4 id="视频标签video"><a href="#视频标签video" class="headerlink" title="视频标签video"></a>视频标签video</h4><ul><li>正确写法1：</li></ul><pre><code>&lt;video controls src=&quot;D:\arry\30天计划\配件\mi.mp4&quot; autoplay loop&gt;抱歉，您的浏览器不支持audio标签，请升级您的浏览器哦&lt;/video&gt;</code></pre><p><video controls src="D:\arry\30天计划\配件\mi.mp4" autoplay loop>抱歉，您的浏览器不支持audio标签，请升级您的浏览器哦</video></p><ul><li>正确写法2(加入source标签)：</li></ul><pre><code>&lt;video controls&gt;    &lt;source src=&quot;文件.mp4&quot; type=&quot;video.mp4&quot;/&gt;    &lt;source src=&quot;文件.webm&quot; type=&quot;video.webm&quot;/&gt;    &lt;source src=&quot;文件.ogv&quot; type=&quot;video.ogv&quot;/&gt;    &lt;source src=&quot;文件.avi&quot; type=&quot;video.avi&quot;/&gt;&lt;/video&gt;</code></pre><table><thead><tr><th>Format</th><th>MIME-type</th><th>说明</th></tr></thead><tbody><tr><td>mp4</td><td>video&#x2F;mp4</td><td>mp4即mpeg4,使用H264视频解编码器和AAC音频解编码器</td></tr><tr><td>webm</td><td>video&#x2F;webm</td><td>使用VP8视频解编码器和Vorbis音频解编码器</td></tr><tr><td>ogv</td><td>video&#x2F;ogv</td><td>支持256色和RLE压缩，它对视频文件采用了一种有损压缩方式</td></tr><tr><td>avi</td><td>video&#x2F;avi</td><td>使用Theora视频解编码器和Vorbis音频解编码器</td></tr></tbody></table><blockquote><p>视频和音频一样使用autoplay、loop标签<br>markdown语法：<a href="%E8%B7%AF%E5%BE%84/%E7%BD%91%E5%9D%80/%E9%93%BE%E6%8E%A5">title</a></p><blockquote><p>效果：<a href="https://www.baidu.com/">title</a></p></blockquote></blockquote><h3 id="6、表单元素-form"><a href="#6、表单元素-form" class="headerlink" title="6、表单元素 form"></a>6、表单元素 form</h3><ul><li>作用：收集不同类型的用户输入</li><li>属性<ul><li>action:提交表单时，向何处发送表单数据</li><li>method:规定发送表单数据的HTTP方法</li></ul></li><li>元素</li></ul><table><thead><tr><th>作用</th><th>标签</th><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>单行文本框</td><td>input</td><td>type&#x3D;”text”</td><td>单标签</td></tr><tr><td></td><td>input</td><td>value&#x3D;””</td><td>文本框的值</td></tr><tr><td></td><td>input</td><td>placeholder&#x3D;””</td><td>提示文本</td></tr><tr><td></td><td>input</td><td>disabled</td><td>表示禁用</td></tr><tr><td>多行文本框</td><td>textarea</td><td>cols</td><td>定义行数</td></tr><tr><td></td><td>textarea</td><td>rows</td><td>定义列数</td></tr><tr><td>密码框</td><td>input</td><td>type&#x3D;”password”</td><td>会隐藏内容</td></tr><tr><td>lable标签</td><td>lable</td><td></td><td>用lable标签包裹单选按钮和文字，则文字与按钮绑定</td></tr><tr><td>按钮</td><td>input</td><td>type&#x3D;”button”</td><td>普通按钮</td></tr><tr><td></td><td>input</td><td>type&#x3D;”submit”</td><td>提交按钮</td></tr><tr><td></td><td>input</td><td>type&#x3D;”reset”</td><td>重置按钮</td></tr><tr><td>单选按钮</td><td>input</td><td>type&#x3D;”radio”</td><td></td></tr><tr><td></td><td>input</td><td>name&#x3D;”自定义名称”</td><td>name名称相同时互斥</td></tr><tr><td></td><td>input</td><td>value&#x3D;””</td><td>向服务器提交的值</td></tr><tr><td></td><td>input</td><td>checked</td><td>默认选中</td></tr><tr><td>复选框(多选)</td><td>input</td><td>type&#x3D;”checkbox”</td><td></td></tr><tr><td></td><td>input</td><td>name&#x3D;””</td><td>同组复选框name值相同</td></tr><tr><td></td><td>input</td><td>value\checked</td><td>与单选按钮相同</td></tr><tr><td>下拉菜单</td><td>select</td><td></td><td>包裹option</td></tr><tr><td></td><td>select</td><td>option</td><td>内部选项</td></tr></tbody></table><ul><li>以下是html5新增控件，兼容到IE9，手机端完全兼容<table><thead><tr><th>作用</th><th>标签</th><th>属性</th></tr></thead><tbody><tr><td>颜色选择</td><td>input</td><td>color</td></tr><tr><td>日期时间选择</td><td>input</td><td>date\time\datetime</td></tr><tr><td>电子邮件</td><td>input</td><td>email</td></tr><tr><td>文件选择</td><td>input</td><td>file</td></tr><tr><td>数字输入</td><td>input</td><td>number，可设置min、max</td></tr><tr><td>拖拽条</td><td>input</td><td>range，可设置min、max</td></tr><tr><td>搜索框</td><td>input</td><td>search</td></tr><tr><td>网址输入</td><td>input</td><td>url</td></tr><tr><td>备选框</td><td>input</td><td>datalist</td></tr></tbody></table></li><li>效果：<form>  <p>用户名：<input type="text" placeholder="真实姓名"/>  </p>  <p>年龄：<input type="text" value="22" disabled>  </p>  <p>  常住地址:  <textarea cols="100" rows="2"></textarea>  </p>  <p>请输入密码：<input type="password"/>  </p>  <p>性别：  <lable><input type="radio" name="sex"/>男</lable>  <lable><input type="radio" name="sex"/>女</lable>  <lable><input type="radio" name="sex"/>保密</lable>  </p>  <p>  爱好：  <lable><input type="checkbox" name="爱好">篮球</lable>  <lable><input type="checkbox" name="爱好">书画</lable>  <lable><input type="checkbox" name="爱好">游戏</lable>  </p>  <p>  省份：  <select>  <option value="湖南省">湖南省</option>  <option value="湖北省">湖北省</option>  <option value="海南省">海南省</option>  </select>  市区：  <select>  <option value="长沙市">长沙市</option>  <option value="湘潭市">湘潭市</option>  <option value="深圳市">深圳市</option>  </select>  </p>  <p>  <input type="button" value="这是一个普通按钮"><br>  <input type="submit">这个会跳转<br>  <input type="reset">  </p>  <p>颜色选择：<input type="color"></p>  <p>日期：<input type="date"></p>  <p>编程语言有：  <input type="text" list="language">  <datalist id="language">      <option value="JAVA">JAVA</option>      <option value="python">python</option>      <option value="c++">c++</option>  </p></form></li></ul><h3 id="7、表格标签-bg-id"><a href="#7、表格标签-bg-id" class="headerlink" title="7、表格标签 {bg-id}"></a>7、表格标签 {bg-id}</h3><ul><li>标签属性：<ul><li>border：表格的边框<blockquote><p>HTML的大部分table标签属性已被CSS替代</p></blockquote></li></ul></li><li>表格头部<ul><li>table定义表格</li><li>thead页眉</li><li>caption表格标题</li><li>tr表格的行</li><li>th定义表头</li></ul></li></ul><pre><code>&lt;table border=&quot;1&quot;&gt;    &lt;thead&gt;    &lt;caption&gt;版本规划任务分配表&lt;/caption&gt;    &lt;tr&gt;        &lt;th&gt;需求：V0.3版本规划&lt;/th&gt;        &lt;th&gt;优先级&lt;/th&gt;        &lt;th&gt;任务分解&lt;/th&gt;        &lt;th&gt;产品负责人&lt;/th&gt;    &lt;/tr&gt;    &lt;/thead&gt;&lt;/table&gt;</code></pre><p>-主体</p><ul><li>tbody表格的主体</li><li>tr表格的行</li><li>td表格的单元</li></ul><pre><code>&lt;tbody&gt;    &lt;tr&gt;    &lt;td&gt;功能模块&lt;/td&gt;    &lt;td&gt;具体事项&lt;/td&gt;    &lt;td&gt;3&lt;/td&gt;    &lt;td&gt;任务2&lt;/td&gt;    &lt;td&gt;熊二&lt;/td&gt;    &lt;/tr&gt;&lt;/tbody&gt;</code></pre><ul><li>尾部</li></ul><pre><code>&lt;tfoot&gt;</code></pre><ul><li>跨行跨列(合并单元格)-td或th标签的属性</li><li>colspan：跨列</li><li>rowspan：跨行</li><li>实战<table border="1">   <thead>  <caption>版本规划任务分配表</caption> <tr>  <th colspan="2">需求：V0.3版本规划</th>  <th>优先级</th>  <th>任务分解</th>  <th>产品负责人</th> </tr>  </thead>  <tbody> <tr>  <td rowspan="3">功能模块1</td>  <td>具体事项1</td>  <td>3</td>  <td>任务1</td>  <td rowspan="3">@熊二</td> </tr> <tr>  <td rowspan="2">具体事项2</td>  <td>4</td>  <td>任务2</td> </tr> <tr>  <td>1</td>  <td>任务3</td> </tr> <tfoot> <tr>  <td colspan="5">备注</td> </tr> <tr>  <td colspan="5">……</td> </tr> </tfoot>  </tbody></table></li></ul><blockquote><p>markdown语法：</p><ul><li>表头：管道符(|)+三个以上减号-</li><li>表格：管道符(|)<br>管道符不需要对齐<br>对齐方式：在减号旁添加冒号；居左：—，居中：—：，居右—：<br>可以在表格中添加：’’的代码(不能是代码块)、强调、链接<br>我的疑问：markdown怎么跨单元格</li></ul></blockquote><h3 id="8、语义化标签"><a href="#8、语义化标签" class="headerlink" title="8、语义化标签"></a>8、语义化标签</h3><h4 id="yyhbq">语义化标签</h4><ul><li><p>文本格式化标签</p><table><thead><tr><th>标签</th><th>说明</th><th>markdown写法</th></tr></thead><tbody><tr><td>b</td><td>粗体(已被CSS替代)</td><td><strong>粗体</strong></td></tr><tr><td>i</td><td>斜体(已被CSS替代)</td><td><em>斜体</em></td></tr><tr><td>u</td><td>下划线(已被CSS替代)</td><td><del>删除线</del></td></tr><tr><td>em</td><td>着重强调</td><td></td></tr><tr><td>strong</td><td>特别重要的文字</td><td></td></tr><tr><td>mark</td><td>高亮文本</td><td>&#x3D;&#x3D;高亮&#x3D;&#x3D;</td></tr><tr><td>sub</td><td>下标</td><td>H<del>2</del>O</td></tr><tr><td>sup</td><td>上标</td><td>X^2^</td></tr><tr><td>del</td><td>删除线</td><td></td></tr><tr><td>pre</td><td>预格式文本</td><td></td></tr><tr><td>figure</td><td>用以规定独立的流内容</td><td></td></tr><tr><td>figcaption</td><td>figure的标题</td><td></td></tr></tbody></table></li><li><p><code>pre</code>被包围在<code>&lt;pre&gt;</code>标签，元素中的文本通常会保留空格和换行符。<br>而文本也会呈现为等宽字体。</p></li></ul><pre><code>&lt;pre&gt;被包围在 pre 标签  元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。 &lt;/pre&gt;&lt;figure&gt;    &lt;figcaption&gt;小米家电&lt;/figcaption&gt;    &lt;img src=&quot;家电.webp&quot; &quot;width=20&quot;&gt;&lt;/figure&gt;&lt;figure&gt;    &lt;img src=&quot;&quot;&gt;    &lt;figcaption&gt;小米家电&lt;/figcaption&gt;&lt;/figure&gt;</code></pre><ul><li>HTML5区块标签<table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>span</td><td>文本中的区块标签</td></tr><tr><td>header</td><td>页头</td></tr><tr><td>nav</td><td>导航条</td></tr><tr><td>main</td><td>网页核心部分</td></tr><tr><td>article</td><td>文档的核心内容</td></tr><tr><td>section</td><td>文档的区域</td></tr><tr><td>aside</td><td>非必要内容：广告等</td></tr><tr><td>footer</td><td>页脚</td></tr></tbody></table></li></ul><pre><code>&lt;p&gt;商品价格：&lt;span&gt;苹果&lt;/span&gt;5元&lt;/p&gt;</code></pre><ul><li>网页的排版：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>网站logo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>网页的导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>广告栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>商品标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>商品信息1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>页脚<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span></code></pre><h3 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><table><thead><tr><th>写法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>‘’</td><td>原代码显示</td><td>单个代码、短语用</td></tr><tr><td>&#96;&#96;&#96;html</td><td>代码块</td><td>前后各三个，标注语言后会自动添加颜色</td></tr><tr><td>[数字&#x2F;单词]</td><td>脚注</td><td>添加注释和引用</td></tr><tr><td>-空格[空格]空格文字</td><td>待办事项</td><td>方框中加x是已完成，空格是未完成</td></tr><tr><td>表情符</td><td>表情</td><td>可以直接复制表情或者使用其简码</td></tr></tbody></table><blockquote><p>脚注的标识符可以标注数字或者英文单词<br>标注可以写在在除其他元素中的任何地方<br>英语[^1]  语文[^2]<br>[^1]:my footnote.<br>[^2]:hihihi</p></blockquote><pre><code>英语[^1]  [^1]:my footnote.</code></pre><blockquote><p>任务列表</p></blockquote><ul><li><input disabled="" type="checkbox"> 阅读</li><li><input checked="" disabled="" type="checkbox"> 运动</li></ul><pre><code>- [ ] 阅读- [x] 运动</code></pre><blockquote><p>表情</p><blockquote><p>😀</p></blockquote></blockquote><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><ul><li><p>自动url链接<br>   百度：<a href="http://www.baidu.com/">http://www.baidu.com</a></p></li><li><p>禁用url链接<br>  加上符号：<code>http://www.baidu.com</code></p></li><li><p>徽章</p><ul><li>格式：<a href="%E8%B6%85%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80"><img src="/%E5%9B%BE%E7%89%87%E6%BA%90%E5%9C%B0%E5%9D%80" alt="图片文字说明"></a></li><li>先获取在线徽章的地址，然后按照语言规则手动拼接</li><li><a href="https://github.com/snowdreams1006"><img src="https://img.shields.io/badge/github-snowdreams1006-brightgreen.svg" alt="github"></a></li></ul></li></ul><blockquote><p>徽章图形制作网站：<a href="https://shields.io/">https://shields.io/</a><br>相关知识点：<a href="https://segmentfault.com/search?q=%E5%BE%BD%E7%AB%A0">https://segmentfault.com/search?q=%E5%BE%BD%E7%AB%A0</a> </p></blockquote><h2 id="三、VScode基础配置"><a href="#三、VScode基础配置" class="headerlink" title="三、VScode基础配置"></a>三、VScode基础配置</h2><h3 id="1、下载：官网下载"><a href="#1、下载：官网下载" class="headerlink" title="1、下载：官网下载"></a>1、下载：官网下载</h3><h3 id="2、插件安装："><a href="#2、插件安装：" class="headerlink" title="2、插件安装："></a>2、插件安装：</h3><ul><li>简体中文语言包： chinese</li><li>图标：Material Icon Theme</li><li>通过编辑器打开默认浏览器：open in brower</li><li>开启本地服务，即时刷新：live server</li><li>自动修改标签对： auto rename tag</li><li>将代码生成一张图片：carbon-now-sh</li><li>格式化代码：prettier-code-formatter;打开设置中的save勾选保存时格式化文件</li></ul><h3 id="3、常用快捷键"><a href="#3、常用快捷键" class="headerlink" title="3、常用快捷键"></a>3、常用快捷键</h3><ul><li>单行注释：ctrl+&#x2F;</li><li>多行注释2：alt+shift+A</li><li>移动行：alt+up&#x2F;down</li><li>显示、隐藏目录栏：ctrl+b</li><li>控制台终端显示&#x2F;隐藏：ctrl+~</li><li>多行编辑：ctrl+alt+up&#x2F;down</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客介绍及搭建过程分享</title>
      <link href="/2023/11/16/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%88%86%E4%BA%AB/"/>
      <url>/2023/11/16/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><blockquote><p>写这篇文的目的</p></blockquote><ul><li>记录自己搭建过程，便于以后快速复用</li><li>总结经验和自己踩的坑，给其他小伙伴一些参考(由于是搭建后写的，所以没有参考图片)</li></ul><blockquote><p>介绍</p></blockquote><ul><li>初步效果参考我的博客：<a href="https://hermiablog.com/">hermia的个人博客</a></li><li>本博客基于Hexo框架，使用github托管</li><li>使用自定义域名：<code>hermiablog.com</code></li><li>hexo主题：<code>hexo-theme-matery</code></li></ul><blockquote><p>主题特性</p></blockquote><ul><li>简单漂亮，文章内容美观易读</li><li>Material Design 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 Banner 图片(我选的图片都很美，期待你的每天访问哦)</li><li>瀑布流式的博客文章列表（文章无特色图片时会有漂亮的图片代替）</li><li>时间轴式的归档页</li><li>词云的标签页和雷达图的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 MathJax</li><li>TOC 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li>Gitalk、Gitment、Valine 和 Disqus 评论模块（推荐使用 Gitalk）</li><li>集成了不蒜子统计、谷歌分析（Google Analytics）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能<ul><li>博客正在建设中，更多功能敬请期待….</li></ul></li></ul><blockquote><p>跟着本篇文章，你会实现：</p></blockquote><ul><li>使用<code>github用户名.github.io</code>&#x2F;自定义域名访问博客</li><li>设置自己喜欢的主题</li></ul><blockquote><p>软件准备</p></blockquote><ul><li>git</li><li>Node.js</li><li>任一编辑器</li><li>注意：命令行操作使用git，文件内容编辑使用vscode</li></ul><blockquote><p>参考官方文档</p></blockquote><ul><li><a href="https://docs.github.com/zh/pages">Github Pages文档</a></li><li><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></li></ul><h3 id="低配版：github域名-默认hexo主题"><a href="#低配版：github域名-默认hexo主题" class="headerlink" title="低配版：github域名+默认hexo主题"></a>低配版：github域名+默认hexo主题</h3><blockquote><p>步骤</p></blockquote><ul><li>新建本地仓库</li><li>安装hexo</li><li>创建github仓库</li><li>链接远程仓库</li><li>部署</li></ul><h4 id="新建本地仓库"><a href="#新建本地仓库" class="headerlink" title="新建本地仓库"></a>新建本地仓库</h4><blockquote><p>我的电脑里同时使用了gitee和github仓库，且使用了不同的用户名及邮箱，因此</p><ul><li>不能使用全局的用户名、邮箱配置</li><li>所以在使用SSH链接远程仓库时要单独配置</li></ul></blockquote><ul><li>首先在本地新建空文件夹myblog</li><li>注意：<strong>不要</strong>使用<code>git init</code>来初始化仓库</li><li>因为hexo安装必须在空文件夹</li></ul><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><ul><li>右击刚刚新建的文件夹myblog，点击Git Bash Here打开git窗口</li><li>输入<code>npm install -g hexo-cli</code>安装Hexo</li><li>验证是否安装成功<code>hexo -v</code></li><li>初始化Hexo：<code>hexo init</code></li><li>查看是否能在本地启动成功：<code>hexo s</code>；启动服务器，访问网址之后可以看到hexo的初始界面；停止服务器：<code>ctrl+c</code></li></ul><pre><code>npm install -g hexo-clihexo -vhexo inithexo s</code></pre><blockquote><p>Hexo相关目录文件</p></blockquote><ul><li>node_modules是node.js各种库的目录</li><li>public是生成的网页文件目录</li><li>scaffolds里面就三个文件，存储着新文章和新页面的初始设置</li><li>source是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件</li><li>themes存放着主题文件，一般也用不到。<ul><li>我们平时写文章只需要关注source&#x2F;_posts这个文件夹就行了</li></ul></li></ul><h4 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h4><blockquote><p>注意：仓库名必须是<code>用户名.github.io</code>，这有这样做，部署完之后才能使用<code>http://用户名.github.io</code>访问</p></blockquote><ul><li>打开<code>https://github.com/</code>，新建一个项目仓库</li><li>选择公开仓库和需要README文件</li><li>git仓库默认主分支名为main，建议修改为master，和本地仓库的主分支名相同</li></ul><h4 id="使用SSH密钥链接远程仓库"><a href="#使用SSH密钥链接远程仓库" class="headerlink" title="使用SSH密钥链接远程仓库"></a>使用SSH密钥链接远程仓库</h4><ul><li>回到本地仓库的git界面</li><li>绑定用户名和邮箱</li></ul><pre><code># 全局git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;# 局部git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;# 查看用用户名和邮箱信息是否配置成功git config  --list</code></pre><blockquote><ul><li>如果你和我一样有多个仓库，就去掉 –global</li><li>邮箱就是你github绑定的邮箱</li><li>检查是否配置成功</li></ul></blockquote><ul><li>创建SSH</li></ul><pre><code>ssh-keygen -t rsa -C 邮箱名</code></pre><blockquote><ul><li>后面是自己注册github的邮箱，然后敲三次回车</li></ul></blockquote><ul><li>接着就会发现<code>C:\Users\用户名</code>下多了一个.ssh目录，打开后有一个公钥，一个私钥。id_rsa.pub是公钥</li><li>我们需要打开它，复制里面的内容</li><li>打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，标题随意取，把刚刚复制id_rsa.pub里面的信息粘贴到钥匙框</li><li>在git bash输入<code>ssh -T git@github.com</code>；如果出现<code>...successfully...</code>就成功了</li></ul><h4 id="将hexo和GitHub关联"><a href="#将hexo和GitHub关联" class="headerlink" title="将hexo和GitHub关联"></a>将hexo和GitHub关联</h4><ul><li>打开本地仓库，博客文件夹，在根目录找到<code>_config.yml</code>文件，使用vscode或任一编辑器打开</li><li>修改配置：</li></ul><pre><code>deploy:  type: git  repository: github地址  branch: master</code></pre><blockquote><ul><li>获取repository：打开github仓库–&gt;Code–&gt;复制SSH地址填入即可</li><li>注意：hexo的所有文件，在修改时切记<strong>冒号后面有空格</strong>，否则报错</li></ul></blockquote><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><ul><li>安装deploy-git</li></ul><pre><code>npm install hexo-deployer-git --save</code></pre><ul><li>依次执行以下命令</li></ul><pre><code># 清除缓存文件 (db.json) 和已生成的静态文件 (public)hexo c# 生成静态文件hexo g# 部署网站hexo d</code></pre><blockquote><ul><li>注意：虽然我们使用的是git，但是<code>hexo d</code>会自动把文件传到github上；不需要再使用<code>git push</code>了</li></ul></blockquote><ul><li>完成以上步骤，你就可以使用xxx.github.io来访问你的博客啦</li><li>以后写文章，只需要以下命令</li></ul><pre><code>hexo new post &quot;文章标题&quot;hexo chexo ghexo d</code></pre><h4 id="如果你使用的是多仓库"><a href="#如果你使用的是多仓库" class="headerlink" title="如果你使用的是多仓库"></a>如果你使用的是多仓库</h4><ul><li>如果你出现<code>Please tell me who you are</code>报错</li><li>如果你和我一样使用多仓库，那么：<blockquote><ul><li>首先不要设置全局git用户名&#x2F;邮箱</li></ul></blockquote></li></ul><pre><code># 删除全局设置git config --global --unset user.namegit config --global --unset user.email</code></pre><blockquote><ul><li>打开博客文件夹，点击<code>.deploy_git</code>文件夹–&gt;点击窗口上的查看–&gt;显示隐藏目录</li><li>此时就会出现git的隐藏目录<code>.git</code></li><li>进去之后，打开<code>config</code>配置文件，添加以下内容，注意空格</li></ul></blockquote><pre><code>[user]email = your email name = your name</code></pre><h3 id="高配版：自定义域名-HTTPS加密协议-自定义主题"><a href="#高配版：自定义域名-HTTPS加密协议-自定义主题" class="headerlink" title="高配版：自定义域名+HTTPS加密协议+自定义主题"></a>高配版：自定义域名+HTTPS加密协议+自定义主题</h3><h4 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h4><ul><li>首先，自定义域名需要花钱买，华为云&#x2F;腾讯云&#x2F;阿里云都可以</li><li>购买之后需要解析域名</li><li>打开github仓库–&gt;点击setting–&gt;找到pages–&gt;拉到Custom domain处，填写你购买的域名</li><li>此时项目根目录会自动生成CNAME文件</li></ul><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="git——多仓库配置"><a href="#git——多仓库配置" class="headerlink" title="git——多仓库配置"></a>git——多仓库配置</h4><blockquote><p>!!!首先 多仓库配置 绝对不要把用户名及邮箱设置为全局</p></blockquote><ul><li>git安装后，点击文件夹–&gt;右击 git bash here打开</li><li>初始化本地仓库</li></ul><pre><code>git init</code></pre><ul><li>设置用户名和有效</li></ul><pre><code>git config  user.name &quot;你的名字（一定要是英文的）&quot;git config  user.email &quot;你的邮箱&quot;# 查看用用户名和邮箱信息是否配置成功git config --global --list# 删除全局设置git config --global --unset user.namegit config --global --unset user.email</code></pre><blockquote><p>添加SSH公钥</p></blockquote><ul><li>创建SSH密钥对</li></ul><pre><code>ssh-keygen -t rsa -C 邮箱名</code></pre><ul><li>如果不需要设置密码，可以直接按Enter键</li><li>之后就会在用户主目录下的<code>.ssh</code>文件夹中生成以下两个文件：</li></ul><pre><code>id_rsaid_rsa.pub</code></pre><ul><li>其中id_rsa为私钥，id_rsa.pub为公钥</li><li>因为有两个仓库，所有有两份，因此需要在<code>.ssh</code>文件夹中分开命名<ul><li>gitee仓库的密钥：id_rsa_gitee和id._rsa_gitee.pub</li><li>github仓库的密钥：id_rsa_github和id._rsa_github.pub</li></ul></li><li>将自定义路径的私钥添加到ssh秘钥搜索列表中</li></ul><pre><code>//连接认证agent（身份验证代理）ssh-agent bash//修改私钥路径ssh-add ~/.ssh/id_rsa_github</code></pre><ul><li>将公钥内容粘贴到自己github&#x2F;Gitee的设置中<ul><li>用记事本打开id._rsa.pub文件，复制内容</li><li>登录自己的github或gitee，在个人设置中找到“安全设置”–“ssh公钥”，标题自定，将公钥粘贴进去</li></ul></li><li>测试本机能否与github&#x2F;gitee使用ssh通信</li></ul><pre><code>ssh -T git@gitee.com//或ssh -T git@github.com</code></pre><ul><li><p>ssh返回 “……successfully ……”，这表示可以与远程愉快的通信了 </p></li><li><p>本地仓库与GitHub远程仓库进行关联</p></li></ul><pre><code>git remote add origin 远程仓库地址(HTTP/SSH)</code></pre><h4 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h4><ul><li>在本地新建README文件</li></ul><pre><code>touch README.md</code></pre><ul><li><p>git add README.md命令，将刚刚新建的文件添加到暂存区中</p></li><li><p>git status命令来检测当前git仓库的状态</p></li><li><p>git commit -m “XXX”命令，将暂存区中的更改保存到版本库中，并对本次的更改添加注释</p></li><li><p>git status命令来检测当前git仓库的状态</p></li><li><p>git log，查看你的版本库</p></li><li><p>创建新分支：git branch 分支名</p></li><li><p>查看所有分支：git branch</p></li><li><p>切换分支：git checkout 分支名</p></li><li><p>push到远程仓库上面：git push origin 分支名</p></li><li><p>git branch -r 查看远程分支</p></li><li><p>git branch -a 查看本地仓库和远程分支（a是all的简写）</p></li></ul><blockquote><p>在分支上新建文件</p></blockquote><ul><li>切换到需要提交的分支上面 git checkout hexo</li><li>在hexo分支上新建文件 touch blogDesc.md</li><li>修改文档 vim blogDesc.md</li><li>编辑 i </li><li>保存 esc :wq</li><li>提交到分支上面<ul><li>git add 文件名&#x2F;.()</li><li>git commit -m “描述”</li><li>git push -u origin hexo</li></ul></li><li>切换到主分支上面<ul><li>git checkout master</li></ul></li><li>将本地分支和合并到本地主分支上<ul><li>git merge hexo</li></ul></li><li>远程到仓库<ul><li>git pull origin main</li></ul></li></ul><blockquote><p>删除分支</p></blockquote><ul><li>查看所有的分支<ul><li>git branch -a</li></ul></li><li>删除远程分支<ul><li>git push origin –delete hello</li></ul></li><li>删除本地分支<ul><li>git branch -D hello</li></ul></li></ul><blockquote><p>远程分支操作</p></blockquote><ul><li>从远程仓库中,把对应的远程分支下载到本地仓库中,保持本地分支和远程分支名称相同</li></ul><pre><code>#从远程仓库中,把对应的远程分支下载到本地仓库中,并把下载的本地分支进行重命名git checkout -b 本地分支的名称 远程仓库名称/远程分支名称</code></pre><ul><li>将本地分支推送到远程仓库</li></ul><pre><code># -u 表示把本地分支和远程分支进行关联,只在第一次推送的时候需要带-u参数git push -u 远程仓库的名称 本地分支的名称:远程分支的名称</code></pre><ul><li>拉取远程分支的最新代码</li></ul><pre><code>#从远程仓库,拉取当前分支最新的代码,保持当前分支的代码和远程分支代码一致git pull</code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>新建文章 hexo new post 标题</li><li>部署</li></ul><pre><code>#清理之前的生成hexo c# 生成静态网站hexo g#开启本地服务 ctrl+c 停止hexo s#上传到githubhexo d</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

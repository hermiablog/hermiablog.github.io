<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS底层原理</title>
      <link href="/2023/12/08/JS%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
      <url>/2023/12/08/JS%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><ul><li>首先，我们要知道 JavaScript 是一门解释性语言，也就是边解析（编译），边执行。</li><li>你可以理解为一段 JS 代码在正式执行前需要被 JavaScript 引擎编译，编译完成之后，才会进入执行阶段。<img src="解释性语言.png"></li></ul></blockquote><blockquote><p>我们把 JavaScript 引擎在执行前的编译过程，程为JS 的预编译,在 JS 的编译阶段，会做以下三件事</p></blockquote><ol><li>语法检查<blockquote><ul><li>JS 引擎会检查你的代码有没有什么低级的<strong>语法错误</strong>，以消除一些歧义。</li><li>如果有语法错误，则<strong>不会往下执行</strong>，直接抛出“语法错误”。如以下代码：</li></ul><pre><code>var a = 1;console.log(a);var b = 3； // b后面的; 分号是中文状态下的// 代码并不会执行，打印出1，因为在预编译阶段有语法错误，所以直接抛出了误法错误</code></pre></blockquote></li><li>创建执行上下文 （Execution context）<blockquote><ul><li><strong>执行上下文</strong>是 JavaScript 执行一段代码时所处的<strong>运行环境</strong></li><li>关于执行上下文的相关细节，我们待会在下面详细讲解，这也是本章的重点。</li></ul></blockquote></li><li>生成可执行代码<blockquote><ul><li>JavaScript 引擎并不认识我们写的 JS 代码，所以需要将 JS 代码转换为计算机能读懂的机器码（二进制文件）</li></ul></blockquote></li></ol><h3 id="一、什么是执行上下文"><a href="#一、什么是执行上下文" class="headerlink" title="一、什么是执行上下文"></a>一、什么是执行上下文</h3><blockquote><ul><li>执行上下文是 JavaScript 执行<strong>一段代码</strong>时所处的<strong>运行环境</strong></li><li>MDN 官网中提到：<strong>作用域</strong>是当前的执行上下文</li></ul></blockquote><blockquote><ul><li>接下来我们就来明确下，哪些情况下代码才算是 “一段” 代码，才会在执行前进行预编译过程，并创建执行上下文环境。</li><li>主要有以下三种情况：<img src="执行上下文.png"></li></ul></blockquote><ol><li><p>全局执行上下文</p><blockquote><ul><li>当 JavaScript 执行<strong>全局作用域</strong>中的代码时，会编译全局代码并创建全局执行上下文</li><li>整个页面的生命周期内，全局执行上下文<strong>只有一份</strong>。</li><li>只有当整个页面<strong>关闭后</strong>，全局执行上下文才会被<strong>销毁</strong>。即页面没有关闭前，这些变量对应的数据都保存在<strong>内存</strong>中。<blockquote><p>引用的js文件等都在全局执行上下文里</p></blockquote></li></ul><pre><code>// 代码在执行前，会预编译，并会创建全局执行上下文// 以下代码在页面没有关闭前，是不会被销毁的，即当前数据还保存在内存中var a = 1;var b = 2;function sum(a, b) &#123;  console.log(a + b);&#125;</code></pre></blockquote></li><li><p>函数执行上下文</p><blockquote><ul><li>当<strong>调用</strong>一个函数时，函数体内的代码会被编译，并创建函数执行上下文。</li><li>一般情况下，函数执行<strong>结束</strong>之后，创建的函数执行上下文就会被<strong>销毁</strong>。</li></ul><pre><code>var a = 1;var b = 2;function sum(a, b) &#123;  var c = a;  var d = b;  console.log(c + d);&#125;sum(2, 3); // 调用函数</code></pre><blockquote><p>以上代码创建了 全局执行上下文和 函数执行上下文</p><ul><li>代码执行前，会预编译，并创建<strong>全局执行上下文</strong>，然后从上往下执行代码</li><li>执行到sum(2,3)时，他<strong>调用函数</strong>，调用函数时会对函数体内代码预编译，同时创建<strong>函数执行上下文</strong></li><li>执行函数体中代码，执行完后，函数执行上下文就会被<strong>销毁</strong>,即函数体内的变量c和d不再占据内存空间</li></ul></blockquote></blockquote></li><li><p>eval 执行上下文</p><blockquote><ul><li>在<strong>严格模式</strong>下，当使用 eval 函数时，eval 的代码会被编译，并创建eval执行上下文。</li><li>考虑安全性能问题，现在 eval 被<strong>禁用</strong></li></ul></blockquote></li></ol><blockquote><ul><li>eval() 函数可以接受一个<strong>字符串</strong>为参数，并将其中的内容视为好像在书写时就存在整个程序中这个位置的代码。</li><li>eval 通常被用来执行<strong>动态创建</strong>的代码，但是安全风险过高，如果传过来的是一段 JS 木马呢 ？</li></ul><pre><code>function foo() &#123;  eval(&quot;var a=1;var b=2;&quot;);  console.log(a + b);&#125;foo(); // 在控制台输出 3</code></pre></blockquote><blockquote><ul><li>在严格模式下，eval()在运行时会有自己的执行上下文</li><li>此时，外部作用域是访问不到内部作用域的，所以<code>console.log(a + b);</code>找不到a,b的值</li></ul><pre><code>function foo() &#123;  &quot;use strict&quot;;  eval(&quot;var a=1;var b=2;&quot;);  console.log(a + b); // 直接抛出错误 a is not defined&#125;foo();</code></pre></blockquote><h3 id="二、执行上下文栈"><a href="#二、执行上下文栈" class="headerlink" title="二、执行上下文栈"></a>二、执行上下文栈</h3><blockquote><p>什么是 栈 <code>LIFO</code> ？在算法那一章我们学习过栈这种数据结构，这里我们回顾下</p></blockquote><ol><li>什么是栈<blockquote><ul><li><strong>栈</strong>是一种<strong>先进后出</strong>的数据结构，要弄明白什么是栈，我们先举一个生活中的例子来帮助大家理解</li><li>假如你现在有一个长长的圆筒，圆筒的一端是封闭的，另一端是开口，现在往圆筒底部放气球，那先放的是不是在圆筒的底部，后放的是不是在靠近圆筒的位置。<img src="栈.jpg"></li></ul></blockquote></li></ol><blockquote><blockquote><p>详细解读：</p></blockquote><ul><li>我们现在要从圆筒中取出气球，那我们是不是得先取离圆筒出口最近的一个，即取球时的顺序正好和放的时候的顺序是反的。</li><li>我们把圆筒比喻从栈，那放气球的过程叫<strong>入栈</strong>，拿气球的过程叫<strong>出栈</strong>；圆筒的底部称为栈底，圆筒出口的第一个气球位置叫栈顶。<blockquote><p>栈 LIFO ： 是一种先进后出的一种数据结构。 插入一般称为入栈（PUSH），删除则称为出栈（POP）</p></blockquote></li></ul></blockquote><ol start="2"><li>什么是执行上下文栈（调用栈）<blockquote><ul><li>我们知道, 函数里面可以嵌套函数, 不同的函数调用又会形成不同的执行上下文环境</li><li>这些不同的执行上下文环境，我们统一放进一个<strong>栈</strong>中来管理。<blockquote><p>我们把这种用来<strong>管理</strong>执行上下文的栈，称为<strong>执行上下文栈</strong>，又称调用栈</p></blockquote></li><li>栈底为<strong>全局</strong>执行上下文, 每当有一次函数调用, 形成的函数执行上下文就会被 <code>push</code> 进栈顶，即<strong>压栈</strong></li><li>函数执行完, 该函数所对应的函数上下文将会被 <code>pop</code> 出上下文栈,即<strong>出栈</strong></li></ul></blockquote></li></ol><ul><li>我们用下面这个代码来演示，整个执行上下文栈的压栈和出栈过程<blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fn2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li></ul><blockquote><p><strong>进栈</strong></p><ul><li>当页面打开，就会<strong>创建</strong>全局执行上下文，并将其<strong>压入</strong>执行上下文栈底。</li><li>然后<strong>执行</strong>全局上下文中代码，遇到<strong>fn1()调用</strong>，则会创建 fn1 的函数执行上下文, 压入执行上下文栈</li><li>然后执行 fn1 中代码，遇到<strong>fn2()调用</strong>，创建 fn2 的函数执行上下文,压入执行上下文栈。</li><li>接着执行 fn2 中的代码<img src="执行上下文压栈.png"></li></ul></blockquote><blockquote><p><strong>出栈</strong></p><ul><li>fn2 执行完毕后, 对应的执行上下文从执行上下文栈中 pop 出</li><li>此时 fn1 也被执行完，对应的执行上下文也从上下文栈中 pop 出</li><li>全局上下文要在浏览器关闭后才会被销毁<img src="执行上下文出栈.png"></li></ul></blockquote><ul><li>通过调试工具，来查看整个的压栈和出栈过程<img src="调试工具.png"></li></ul><ol start="3"><li>栈溢出<blockquote><ul><li>执行上下文栈是用来管理执行上下文的数据结构，不过要注意的是<strong>执行上下文栈是有大小的</strong></li><li>当入栈的执行上下文<strong>超过一定的数目</strong>，栈对应的内存空间被占满后，JavaScript 引擎就会报错，我们把这种错误叫做<strong>栈溢出</strong><blockquote><p>递归代码，很容易出现栈溢出情况，如下代码</p></blockquote></li></ul><pre><code>var i = 0;function a() &#123;  i++;&#125;a();</code></pre><blockquote><p>注：</p><ul><li>不同的浏览为栈分配的内存空间大小是不—样的。</li><li>所以我们在使用递归时，要特别注意这一点，确保递归压栈时不会造成栈溢出。</li></ul></blockquote></blockquote></li></ol><h3 id="三、-执行上下文组成"><a href="#三、-执行上下文组成" class="headerlink" title="三、 执行上下文组成"></a>三、 执行上下文组成</h3><blockquote><p>执行上下文中包含了四个部分：</p><ul><li>变量环境： 其实就是我们之前提到的<strong>变量和函数提升</strong>，在代码执行前变量和函数会被提升到当前作用域的最前面。</li><li>外部环境： 其实就是我们之前了解的<strong>作用域链</strong>，他记录了当前作用域及他的外层作用域之间的关系，我们查找变量在当前作用域中找（当前变量环境中找）找不到再到外部外境（沿着作用域链去查找）</li><li>this： 就是我们前面讲的this，<strong>函数上下文对象</strong>，谁把函数当成方法来调用，this 就指向谁</li><li>词法环境： ES6 中需要学习到的<strong>let 和 const 声明</strong>的变量，是保存在词法环境中。</li></ul></blockquote><h4 id="变量环境"><a href="#变量环境" class="headerlink" title="变量环境"></a>变量环境</h4><blockquote><ul><li>在变量环境中存在一个<strong>变量环境对象</strong>（viriable Environment），叫<strong>变量对象</strong> 。英文全称 variable Object 简称 <code>VO</code></li><li>在这个执行上下文中，所有由<strong>var声明的变量和函数</strong>等都存在于这个 “变量对象” 上。</li><li>JavaScript 代码<strong>不能直接访问</strong>该 “变量对象” ，但是可以直接访问该对象的成员。(除全局上下文的变量对象window以外)<img src="变量对象.png"></li></ul></blockquote><ol><li><p>全局执行上下文中 - 变量对象</p><blockquote><ul><li>全局上下文是<strong>最外层</strong>的上下文，全局执行上下文中的<strong>变量对象</strong>就是<strong>window对象</strong></li><li>因此全局变量和全局函数都会成为 window 对象的属性和方法。</li><li>在<code>Node</code>环境中，全局执行环境是<code>global</code>对象</li><li>在全局上下文中，<code>this</code>指向 window 对象<blockquote><p>注意： JavaScript 中没法直接访问到 “变量对象” ，除全局上下文的变量对象window以外</p></blockquote></li></ul><pre><code>var a = 1;function fn() &#123;  console.log(2);&#125;console.log(this === window); // true 全局上下文中，this指向windowconsole.log(window.a); // 1  通过window对象的属性a可以访问到变量awindow.fn(); // 2 通过window对象的方法fn可以访问到fn函数</code></pre></blockquote></li><li><p>函数上下文中 - 变量对象</p><blockquote><ul><li>在函数执行上下文中，变量对象常常被称为“<strong>活动对象</strong>（Activation Object）简称 <code>AO</code>” ，因为变量对象是在进入函数执行上下文时被创建的（被激活）的。</li><li>刚开始，活动对象上只有 <code>arguments</code> 这一个属性，其后函数中的变量、函数、参数都被保存在这个 <strong>活动对象（AO）</strong> 上，成为了这个活动对象的 <strong>属性 和 方法</strong><blockquote><p>我们直接访问函数中的变量，参数，函数，arguments，本质就是在访问 “活动对象” 上的属性。</p></blockquote></li></ul></blockquote></li></ol><blockquote><pre><code>function sum(c) &#123;  var a = 2;  var b = 3;  console.log(arguments);  console.log(a, b, c);&#125;sum(1);</code></pre></blockquote><p>&#x2F;&#x2F; 当前会创建全局执行上下文，然后执行到sum(1)时，会创建函数执行上下文<br>&#x2F;&#x2F; 函数执行上下文中会创建一个活动对象，其内变量a,b和参数c，arguments都是活动对象的属性,包括 this</p><blockquote><pre><code>&gt;在函数执行上下文中，this 对象保存在活动对象上的 this 属性上。</code></pre></blockquote><ol start="3"><li><p>eval 执行上下文 - 变量对象</p><blockquote><ul><li>创建 eval 函数是为了将字符串转换为可执行的 JavaScript 代码。虽然看起来很强大，但不建议使用这个功能，因为我们无法控制它的权限。</li><li>eval 函数的使用可能会使您的应用程序或服务受到注入攻击。 eval 函数接收到的字符串可能是恶意字符串，可以完全破坏您的数据库或应用程序。</li><li>这就是为什么不推荐使用 eval 函数的原因,也就不做介绍。</li></ul></blockquote></li><li><p>变量对象的创建过程</p><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token keyword">function</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>   b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></blockquote></li></ol><p><strong>全局执行上下文中变量创建过程</strong></p><blockquote><ul><li>当页面打开，碰到script标签，就会开始解析里面的代码，开始预编译</li><li>创建全局执行上下文，并创建window这个变量对象</li><li>全局执行上下文中声明的变量和函数，就成为了window对象上的属性和方法<ul><li>window.sum&#x3D;undefined; window.fn&#x3D;fn</li></ul></li><li>预编译结束，开始从上往下<strong>执行代码</strong><ul><li>window.sum&#x3D;1 </li><li>碰到fn(1) 开始调用函数</li></ul></li></ul></blockquote><p><strong>函数内部的变量对象创建过程</strong></p><ul><li>函数被调用，会创建函数执行上下文，并创建活动对象AO<blockquote><ul><li><code>var AO = &#123;&#125;; </code></li></ul></blockquote></li><li>初始化活动对象的第一个属性arguments<blockquote><pre><code>// 1、创建 AO 变量对象AO = &#123;// 2、创建arguments属性，其属性值为Arguments对象arguments: &#123;  0: 1, // 实参  length: 1, // 实参个数  // ..... 其它属性省略&#125;,&#125;;</code></pre></blockquote></li><li>处理形参与实参<blockquote><ul><li>函数的 所有形参的名称和实参对应 组成变量对象的属性,</li><li>如果没有实参，属性值设为 undefined。</li></ul><pre><code>// 1、创建 AO 变量对象AO = &#123;  // 2、创建arguments属性，其属性值为Arguments对象  arguments: &#123;      0: 1, // 实参      length: 1, // 实参个数      // ..... 其它属性省略  &#125;，  // 3、 寻找函数形参，作为变量对象的属性，同时赋值  a:1,  n:undefined,&#125;</code></pre></blockquote></li><li>处理函数体内的函数声明<blockquote><ul><li>函数体内的<strong>函数声明</strong>的名称和对应值变成变量对象的属性和值</li><li>如果变量对象已经存在相同名称的属性，则会完全替换这个属性。</li><li>没加var的是全局变量，不执行<blockquote><p>上面这个过程，就是我们之前提到变量与函数提升</p><ul><li>函数声明提升的优先级是高于变量提升，本质就是在变量对象初始化属性时，同名的方法会替换掉同名的属性。</li><li>如果是同名的函数，则以后面写在后面的为主。</li></ul></blockquote></li></ul><pre><code>// 1、创建 AO 变量对象AO = &#123;  // 2、创建arguments属性，其属性值为Arguments对象  arguments: &#123;      0: 1, // 实参      length: 1, // 实参个数      // ..... 其它属性省略  &#125;，  // 3、 寻找函数形参，作为变量对象的属性，同时赋值  a:1,  n:undefined,  // 4、寻找函数声明 function num()&#123; &#125;，将num为变量对象属性，值为函数本身 num: function () &#123;&#125;,&#125;</code></pre></blockquote></li><li>处理函数体内的变量声明<blockquote><ul><li>变量声明的名称和对应值（undefined）组成变量对象的属性</li><li>到了执行阶段才会赋值，此时变量值都是undefined</li><li>如果变量名称与已经声明的形参或函数名相同，则变量声明<strong>不会覆盖</strong>已经存在的这类属性。<blockquote><p>原因：变量与函数提升</p><ul><li>变量对象的创建过程，就是我们之前提到的变量的提升，变量提升,提升的是变量，并不会提升值，所以创建出来的属性，默认值是 undefined</li><li>同时同名的变量不会覆盖同名函数，同名的变量和变量本质覆盖与不覆盖没有区别。</li></ul></blockquote></li></ul><pre><code>// 1、创建 AO 变量对象AO = &#123;  // 2、创建arguments属性，其属性值为Arguments对象  arguments: &#123;      0: 1, // 实参      length: 1, // 实参个数      // ..... 其它属性省略  &#125;，  // 3、 寻找函数形参，作为变量对象的属性，同时赋值  a:1,  n:undefined,  // 4、寻找函数声明 function num()&#123; &#125;，将num为变量对象属性，值为函数本身 num: function () &#123;&#125;,  // 5、寻找var声明的变量，将变量b作为变量对象的属性，值为undefinedb: undefined,c: undefined, &#125;</code></pre></blockquote></li><li>预编译结束，开始从上往下<strong>执行代码</strong><blockquote><ul><li>修改变量对象上属性 b 的值为 2</li><li>修改变量对象属性 c 的值</li><li>再次修改变量对象属性 b 的值</li></ul><pre><code>AO = &#123;arguments: &#123;  0: 1,  length: 1,  // ..... 其它属性省略&#125;,a: 1,//实质上是AO.an:undefined,num: function num() &#123;&#125;,b: 3, // 1、修改属性b的值c: function () &#123;&#125;,&#125;; </code></pre></blockquote></li><li>通过控制台，查看整个fn()函数执行完时，整个变量对象上的属性值<img src="变量对象创建过程.png"></li></ul><h4 id="外部环境（outer）"><a href="#外部环境（outer）" class="headerlink" title="外部环境（outer）"></a>外部环境（outer）</h4><blockquote><ul><li>其实，在 JS 中，每个函数都存在一个<strong>隐式属性</strong><code>[[scopes]]</code>, 这个属性用来保存<strong>当前函数</strong>的<strong>外部</strong>执行上下文中的变量对象身上的<strong>一些属性</strong>, 由于在数据结构上是链式的, 也被称为<strong>作用域链</strong>。</li><li>只有当<strong>内部</strong>执行上下文中<strong>引用</strong>了<strong>外部</strong>执行上下文中的<strong>变量</strong>（AO 对象上的属性或方法）时，其外部执行上下文中变量对象的属性值才会被<strong>记录</strong>在隐式属性<code>[[scopes]]</code>中,<strong>除</strong>全局执行上下文中的变量对象 <code>window</code> 外。</li></ul></blockquote><blockquote><pre><code>var a = 1;function fn1() &#123;  var b = 2;  var c = 3;  var d = 4;  function fn2() &#123;    console.log(b);  &#125;  fn2();&#125;fn1();</code></pre><img src="外部环境.png"></blockquote><blockquote><blockquote><p>作用域链</p></blockquote><ul><li>外部环境<strong>本质</strong>就是我们之前提到的作用域链，外部环境中记录了外部执行上下文中变量对象身上的一些属性和方法。</li><li>当我们在变量查找时，如果当前执行上下文的变量对象上找不到，则会去当前执行上下文的外部上下文的 <strong>“变量对象”（其实是闭包对象）</strong>上去查找。</li><li>如果找到就用，找不到就会一直找到全局执行上下文的变量对象 <code>window</code> 身上。还找不到，就会<strong>报错</strong>。</li></ul></blockquote><ol><li>变量查找过程<blockquote><pre><code>var a = 1;function fn1() &#123;  var b = 2;  var c = 3;  var d = 4;  function fn2() &#123; var e = 5; console.log(e + b + a);  &#125;  fn2();&#125;fn1();</code></pre></blockquote></li></ol><ul><li>第一步：创建全局执行上下文</li><li>第二步：执行全局上下文中的代码<blockquote><ul><li>从上往下执行代码，首先变量 a 赋值为 1</li><li>同时遇到<code>fn1()</code>，调用<code>fn1()</code>函数，<strong>创建</strong>函数执行上下文，并<strong>压入</strong>执行上下文栈</li></ul></blockquote></li><li>第三步：执行 fn1 函数上下文中的代码<blockquote><ul><li>首先给变量赋值 <code>b=2，c=3，d=4，fn1 = function()&#123;....&#125;</code></li><li>同时遇到<code>fn2()</code>，调用<code>fn2()</code>函数，创建函数执行上下文，并压入执行上下文栈</li></ul></blockquote></li><li>第四步：执行 fn2 函数执行上下文中的代码<blockquote><ul><li>首先给变量 e 赋值，<code>e=5</code></li><li>然后执行 <code>console.log(e+b+a);</code>代码</li><li>首先在<strong>当前作用域</strong>（执行上下文）中的<strong>词法环境</strong>中找变量 e，没有找到，再到<strong>变量环境的变量对象</strong>上找 e，找到e&#x3D;5，并使用</li><li>然后在当前作用域中的词法环境中去找变量 b，没有找到，则到变量环境中的变量对象上找变量 b，没有找到，则沿着<strong>外部环境</strong>去其外层的作用域中去查找。</li><li>在外层作用域中查找时，也是<strong>先到词法环境</strong>中找，找不到再到<strong>变量环境</strong>中找，再找不到就再到其<strong>外部环境</strong>中去找，一层一层找，找到就用，找不到一直找到全局作用域中，还没找到，就报错。</li><li>变量 e，b，a 的查找流程图如下<img src="变量查找过程.png"></li></ul></blockquote></li><li>第五步：fn2 执行完，开始出栈</li><li>第六步：fn1 执行完，开始出栈</li><li>全局执行上下文要等整个页面关闭后才会被销毁，才会出栈。</li></ul><ol start="2"><li>控制台演示<img src="外部环境控制台.png"></li></ol><blockquote><blockquote><p>详细解读</p></blockquote><ul><li>只有内部函数引用了外部函数中的部分变量，部分变量才会被保存在函数的<code>[[scopes]]</code>属性中</li><li>内部函数在变量查找时，在自己作用域中找，找不到再到<code>[[scopes]]</code>属性中一层一层向下找</li><li><code>[[scopes]]</code>属性中，本质记录的是全局作用域的变量对象 window 和每一次内部形成的闭包对象</li></ul></blockquote><h4 id="词法环境"><a href="#词法环境" class="headerlink" title="词法环境"></a>词法环境</h4><blockquote><ul><li><code>ES6</code>中利用<code>let</code>和<code>const</code>声明的变量，会放在词法环境中。</li><li>在变量查找时，<strong>首先</strong>会在词法环境中去查找，如果找不到，再到变量环境中查找。</li></ul><pre><code>var a = 1;let b = 2;const c = 3;console.log(a + b + c);</code></pre><img src="词法环境.png"></blockquote><h4 id="this-函数上下文"><a href="#this-函数上下文" class="headerlink" title="this 函数上下文"></a>this 函数上下文</h4><blockquote><ul><li>在函数中，其内部this指向把函数当成方法调用的上下文对象</li><li>参考下面的表格自己复习下<table><thead><tr><th>函数的调用方式</th><th>this 指向</th></tr></thead><tbody><tr><td>对象.函数()</td><td>对象</td></tr><tr><td>函数()</td><td>window</td></tr><tr><td>IIFE</td><td>立即执行函数</td></tr><tr><td>数组<a href="">下标</a></td><td>数组</td></tr><tr><td>call(对象,arg1,arg2)</td><td>对象</td></tr><tr><td>apply(对象，array)</td><td>对象</td></tr><tr><td>bind(对象，arg1,arg2)</td><td>对象</td></tr><tr><td>定时器中的回调函数</td><td>window</td></tr><tr><td>DOM 事件处理函数</td><td>添加事件监听的元素</td></tr><tr><td>new 函数()</td><td>对象的实例</td></tr></tbody></table></li></ul></blockquote><h3 id="四、闭包"><a href="#四、闭包" class="headerlink" title="四、闭包"></a>四、闭包</h3><blockquote><p>至于<strong>什么是闭包</strong>？我们暂且先放下，我们通过两个案例来理解，什么是闭包，什么情况下会形成闭包。</p></blockquote><h4 id="什么情况下会形成闭包"><a href="#什么情况下会形成闭包" class="headerlink" title="什么情况下会形成闭包"></a>什么情况下会形成闭包</h4><ol><li>形成闭包的条件——情况一<blockquote><ul><li>内部函数访问外部函数的变量时，其内部就会形成闭包。</li><li>但这种方式，并<strong>不能保持</strong>闭包，因为函数执行完就被销毁了，其闭包对象也被销毁。</li></ul><pre><code>function fn() &#123;  var a = 1;  var b = 2;  function fn2() &#123; // 内部函数访问了外部函数中的变量，这时候就形成了闭包， console.log(a);  &#125;  fn2();&#125;fn();</code></pre></blockquote></li></ol><ul><li>闭包形成过程<blockquote><ul><li>当调用fn()函数时，其内部的fn2函数<strong>引用</strong>了fn函数中的变量a，这时fn函数就会形成闭包。</li><li>他内部创建了一个<strong>新对象</strong>，把内部函数用到的变量a和对应的值成为了这个新对象的属性和值，这个新对象就是我们说的闭包<code>Closure</code></li></ul></blockquote></li><li>闭包带来的便利-方便变量查找<blockquote><ul><li>当fn2()函数调用时，就会访问变量a，他首先会在自己作用域（执行上下文）中找，找不到</li><li>然后就在闭包对象中去查找，找到中了变量a。最终在控制台输入 1</li><li>假设没有闭包对象，那他要去外层作用域中找，外层作用域中如果有 100 个就变量，那要从 100 个变量中找到一个方便 ，还是把用到的那一个存好，直接拿来用方便呢？肯定是后者。</li></ul></blockquote></li><li>闭包销毁<blockquote><ul><li>最后fn2执行完就销毁，其对应的闭包也就随着销毁</li><li>所以这种情况下会形成闭包，但闭包不能被保持。所以我们很多时候讨论的闭包并不是这种情况。<blockquote><p>但内部函数能快速访问到外部函数作用域中的变量，本质就是因为形成了闭包。</p></blockquote></li></ul></blockquote></li></ul><ol start="2"><li>形成闭包的条件——情况二<blockquote><ul><li><strong>内部</strong>函数使用了<strong>外部</strong>函数的<strong>变量</strong>，同时<strong>被返回</strong>到了外部函数的外面(被全局变量接收)，这时就会形成闭包</li><li>主要表现在于，在<strong>外部执行</strong>被返回的函数时，可以访问他在<strong>定义时</strong>所处环境中的变量</li><li>这种情况才是真正意义上的形成了闭包，因为闭包被保持下来，供后期使用</li></ul><pre><code>function fn() &#123;  var a = 1;  var b = 2;  function fn2() &#123; console.log(a);  &#125;  return fn2;&#125;var fn3 = fn(); // 被赋值fn3();</code></pre></blockquote></li></ol><ul><li><p>闭包形成过程</p><blockquote><ul><li>当代码执行到<code>fn3=fn()</code>时，fn()被调用了，因为fn2函数引用了fn函数中的变量a，这时fn函数就会形成闭包</li><li>他内部创建了一个<strong>新对象</strong>，把内部函数用到的变量a和对应的值成为了这个新对象的属性和值，这个新对象就是我们说的闭包（Closure）</li></ul></blockquote></li><li><p>闭包是如何保持的</p><blockquote><ul><li>然后 <code>fn2</code> 函数的隐式属性<code>[[Scopes]]</code>数组中，多了一个新的<strong>对象</strong>，这个对象指向上面 fn 创建出来的闭包。</li><li>然后fn2被当成返回值，返回给到了变量fn3。</li><li>fn()函数执行完，就被销毁了，<strong>但是</strong>他创建的闭包并没有销毁，一直存在内存中</li><li>因为fn3在何时调用，调用多少次这个说不定，只要 fn3 被调用，就会执行 fn2 中的代码，就会访问变量 a,所以 fn 函数形成的闭包并不会随着 fn 函数的销毁而被销毁，而是一直存在于内存中。</li></ul></blockquote></li><li><p>闭包带来的便利-<strong>函数体外</strong>可以访问函数内部的变量</p><blockquote><ul><li>只要我们执行fn3，就相当于执行fn2中的代码，就会访问变量a，他在当前fn2的作用域中找不到，就会去他的隐式属性<code>[[Scopes]]</code>即作用链中去查找，因为之间有闭包存在，所以他会先在闭包中找。找到了a，就打印出来。</li></ul></blockquote></li></ul><ol start="3"><li>总结闭包形成的两种情况</li></ol><ul><li>情况一：<blockquote><ul><li>当内部函数访问了外部函数的变量时，就会形成闭包，但这种情况下闭包不能保持，内部函数执行完，闭包就销毁了。</li></ul></blockquote></li><li>情况二：<blockquote><ul><li>内部函数使用了外部函数的变量，同时被返回到了外部函数的外面，这时就会形成闭包。这种情况下闭包能被保持，一直在保存在内存中。被返回到外部的函数，不管何时执行，执行多少次，都可以访问到他在定义时所在作用域中的变量。</li></ul></blockquote></li></ul><blockquote><blockquote><p>我们通常说说的闭包，指的是第二种情况下形成的闭包，因为第一种情况没有办法保持。</p></blockquote></blockquote><h4 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h4><blockquote><ul><li><strong>闭包</strong>（closure）是一个函数以及其捆绑的周边环境状态（lexical environment，<strong>词法环境</strong>）的引用的组合。</li><li>换而言之，闭包让开发者可以从内部函数访问外部函数的作用域。</li><li>在 JavaScript 中，闭包会随着函数的创建而被同时创建。<img src="闭包.png"></li></ul></blockquote><blockquote><blockquote><p>可以理解为是函数的一种性质，他能记住他在声明时所处的环境状态。那么不管后来函数在什么第三方被调用，他都能访问他在<strong>定义时</strong>所处作用域中的变量。</p></blockquote></blockquote><h4 id="闭包与作用域链的关系"><a href="#闭包与作用域链的关系" class="headerlink" title="闭包与作用域链的关系"></a>闭包与作用域链的关系</h4><blockquote><ul><li>每个函数身上都有一个<code>[[Scopes]]</code>属性， 这个属性用来保存<strong>当前函数</strong>所有用到的闭包对象和<strong>全局</strong>执行上下文对象(window)。<img src="隐式属性的值.png"></li></ul></blockquote><blockquote><ul><li>当内部函数引用了外部函数中的变量时，就会形成闭包，这个闭包对象中保存了内部函数引用外部函数中的那些变量。 当前函数身上的<code>[[Scopes]]</code>属性中，保持了对这个闭包对象的引用。</li><li>作用域链查找，本质就是先在当前作用域中找，如果找不到，就会去函数的<code>[[Scopes]]</code>属性中保存的闭包对象和全局对象中去找。</li></ul></blockquote><h4 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h4><blockquote><p>闭包有两大特性：记忆性、模拟私有变量</p><ul><li>记忆性： 当闭包产生时，函数所处环境的状态会始终保持在内存中，不会在外层函数调用后被自动清除，这就是闭包的记忆性。</li><li>模拟私有变量： 我们可以把一些不需要的全局变量封装成“私有变量”。</li></ul></blockquote><ol><li>闭包记忆性案例<blockquote><ul><li>创建体温检测函数 checkTemp(n)，可以检查体温 n 是否正常，函数会被返回布尔值，体温正常会返回true，体温不正常会返回false</li><li>但，不同的小区有不同的体温检测标准：</li><li>比如：A 小区体温合格线是 37.1 ℃，而 B 小区体温合格线是37.5 ℃，应该怎样编程呢 ？</li></ul><pre><code>function creatChack(standardTemp) &#123;return function checkTemp(Temp) &#123;  return Temp &lt; standardTemp;&#125;; &#125; //建立标准 var fn = creatChack(37.1); console.log(fn); //   f checkTemp(Temp) &#123; //       return Temp &lt; standardTemp;</code></pre></blockquote></li></ol><p> &#x2F;&#x2F;     };<br> &#x2F;&#x2F;输入体温<br> console.log(fn(38)); &#x2F;&#x2F;false</p><blockquote><pre><code></code></pre></blockquote><ol start="2"><li>模拟私有变量</li></ol><ul><li>题目：请定义一个变量 a，要求是能保证这个 a 只能被进行指定操作（如：加 1、乘 2），而不能进行其他操作，应该怎么编程呢 ？<blockquote><pre><code>function self() &#123; var a = 1; return &#123;   getA: function () &#123;     return a;   &#125;,   add: function () &#123;     a++;   &#125;,   pow: function () &#123;     a *= 2;   &#125;, &#125;; &#125; var obj = self(); // 如果想在fun函数外边使用变量a，唯一的方法就是调用getA()方法 console.log(obj.getA()); //1 // 如果需要变量+1只能调用add方法 obj.add(); //1+1 console.log(obj.getA()); //2 // 如果需要变量+1只能调用pow方法 obj.pow(); //2*2 console.log(obj.getA()); //4 obj.pow(); //4*2 console.log(obj.getA()); //8</code></pre></blockquote></li></ul><blockquote><blockquote><p>注意：</p></blockquote><ul><li>函数身上的<code>[[Scopes]]</code>属性是对闭包对象的引用</li><li>闭包是一个对象，是一个引用数据类型，存储在堆内存中</li><li>getA(),add(), pow()中的a都是指向同一个堆内存地址</li></ul></blockquote><h3 id="五、垃圾回收-GC"><a href="#五、垃圾回收-GC" class="headerlink" title="五、垃圾回收 GC"></a>五、垃圾回收 GC</h3><h4 id="什么是垃圾回收（Garbage-Collection）？"><a href="#什么是垃圾回收（Garbage-Collection）？" class="headerlink" title="什么是垃圾回收（Garbage Collection）？"></a>什么是垃圾回收（Garbage Collection）？</h4><blockquote><ul><li>在现实生活中，所谓的垃圾，就是指用过了，不会再用的东西，就可以当成垃圾被处理掉。</li><li>在 JS 中，所谓的垃圾，你可以理解为那些不会再被使用的数据，就会被当成垃圾回收掉</li><li>JavaScript 中 JS 引擎会<strong>自动回收</strong>不再使用的变量，释放其所占的内存，开发人员不需要手动的做垃圾回收的处理。<blockquote><p>但最艰难的任务是找到那些变量将不会再使用，释放其“占用的内存”</p></blockquote></li></ul></blockquote><ol><li>我们来看下面几个例子，分析下，其中的变量否会被当成垃圾回收掉</li></ol><ul><li><p>下面代码执行完后，其变量 a 和 obj 还会占用内存空间吗？</p><blockquote><pre><code>function fn() &#123;var a = 1;console.log(a);var obj = &#123;  name: &quot;张三&quot;,  age: 23,&#125;;console.log(obj);&#125;fn(); // 执行函数</code></pre></blockquote><p>&#x2F;&#x2F; 上面fn()函数执完后，变量中的a 和obj就会被销毁掉，不会再占用内存的空间了。<br>&#x2F;&#x2F; 当然垃圾回收，并不会立刻马上就回收，他可以马上，也可以会等一会儿，但时间不会太久<br>&#x2F;&#x2F; 函数执行完，里面的数据都不会再被其它对象引用，也就会当成垃圾被处理掉</p><blockquote><pre><code></code></pre></blockquote></li><li><p>下面代码执行完后，其变量 a 和 obj 还会占用内存吗 ？</p><blockquote><pre><code>function fn() &#123;var a = 1;var obj = &#123;  name: &quot;张三&quot;,  age: 23,&#125;;window.a = a;window.obj = obj;&#125;fn(); // 执行函数// fn()函数执行后，变量a和obj被赋值给了window对象的属性，也就是全局对象window保持了对变量a和obj的引用。说不定什么时候我们就可以需要用到window.a和window.obj// 所以这种情况下 变量a被销毁，但是window.a上的a属性和obj中的引用对象并不会被销毁// 但这里的obj和window.a并不是垃圾，因为我们在后面还需要用到他。// 以上变量占用内存，是符合用户预期的</code></pre></blockquote></li><li><p>下面代码执行完后，a 和 b 还会占用内存吗 ？</p><blockquote><pre><code>function fn() &#123;var a = 1;var b = 2;function sum() &#123;  console.log(a + b);&#125;return sum;&#125;var s = fn(); // 调用函数s(); // 调用函数</code></pre></blockquote><p>&#x2F;&#x2F; 上面代码执行完后，a，b并不会被销毁会，因为形成了闭包，我们不知道什么进候，我们还会调用s();<br>&#x2F;&#x2F; 如果我们把变量a,b销毁了的话，那我们后面如果要调用s()，那不就会报错吗？<br>&#x2F;&#x2F; 这种情况下闭包就会造成变量不能被销毁，一直占用内存。那这算是内存泄露吗？<br>&#x2F;&#x2F; 这种情况，我们是有意想要形成闭包，人为的希望局部变量a和b能一直保存在内存中，所以不能算内存泄露</p><blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><blockquote><p>总结：</p></blockquote><ul><li>如果某些数据我们未来还有可能会用到，那么他一直占用内存是符合用户期望的，并不能算垃圾，所以也不能当成垃圾回收掉。</li><li>只有那些被执行完，未来不可能再用到的数据，就是垃圾，就可以当成垃圾被回收掉。</li><li>那 JS 是如何判断那些数据未来永远都不可能用到呢 ？然后把他当成垃圾回收掉呢 ？</li></ul></blockquote><h4 id="JS-中垃圾回收的两种策略"><a href="#JS-中垃圾回收的两种策略" class="headerlink" title="JS 中垃圾回收的两种策略"></a>JS 中垃圾回收的两种策略</h4><blockquote><p>垃圾回收主要有两种策略，标记清理和引用计数。</p></blockquote><ol><li>引用计数<blockquote><ul><li>引用计数其实是一种比较老的垃圾回收策略</li><li>引用计数就是追踪<strong>值</strong>被引用的次数。</li><li>声明变量并给它赋一个<strong>引用类型</strong>值时，这个值的引用数为 1，如果同一个值又被赋给另一个变量，那引用数+1</li><li>如果保存该值引用的变量被其它值<strong>覆盖</strong>了，则引用数减 1</li><li>当引用计数为 <code>0</code> 时，表示这个值不再用到，垃圾收集器就会回收他所占用的内存。</li></ul><pre><code>var a = [1, 2, 3]; // [1,2,3]的引用计数为1var b = a; // 变量b也引用了这个数组，所以[1,2,3]的引用数为2var a = null; // [1,2,3]的引用被切断，引用数-1，所以[1,2,3]的引用数为1// 如果只是到这里，那[1,2,3]不所占的内存不会被回收var b = null; // [1,2,3] 的引用被切断，引用数-1，所 [1,2,3]的引用数为0// 到这里，垃圾收集器在下一次清理内存时，就会把[1,2,3]所占的内存清理掉</code></pre></blockquote></li></ol><ul><li>但引用计数有一个很大的坑，就是循环引用时，会造成内存永远无法释放。<blockquote><pre><code>function fn() &#123;var obj1 = &#123;&#125;;var obj2 = &#123;&#125;;obj1.a = obj2;obj2.a = obj1;&#125;fn();// 这种情况下，fn函数执行完后，其内部的obj1和obj2已经没有用了，可以被回收了。// 但引用计数统计到他们引用数&gt;0,则 obj1和obj2就没有办法被清理了，因为引用数永远不可能为0</code></pre><img src="引用计数缺陷.png"></blockquote></li></ul><blockquote><ul><li>fn 执行上下文在代码执行完后，就<strong>出栈</strong>，意味着 obj1 与 obj2 被销毁，不会再有指向堆内存中的引用</li><li>但是堆内存中的数据，引用数&gt;0,所以永远都不会被销毁</li></ul></blockquote><ol start="2"><li>标记清理<blockquote><ul><li>这个算法假定设置一个叫做<strong>根（root）</strong>的对象（在 JavaScript 里，根是<strong>全局对象</strong> <code>window</code>）</li><li>垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……</li><li>从根开始，垃圾回收器将找到所有可以获得的对象和收集所有不能获得的对象。</li><li>那些<strong>无法</strong>从根对象查询到的对象都将被清除<br>如果用标记清理的方式来处理垃圾回收，则就不会出现上面循环引用的问题，造成垃圾不能回收了<br>因为函数调用之后，两个对象 obj1 和 obj2 <strong>都无法</strong>从全局对象出发获取。因些，他们将会被垃圾回收器回收掉。<blockquote><p>从 2012 年起，所有现代浏览器都使用了标记 - 清除垃圾回收算法</p></blockquote></li></ul></blockquote></li></ol><blockquote><blockquote><p>JS引擎的自动垃圾回收功能并不是全能的</p></blockquote></blockquote><h4 id="手动标记垃圾"><a href="#手动标记垃圾" class="headerlink" title="手动标记垃圾"></a>手动标记垃圾</h4><blockquote><ul><li>通过上面两种垃圾加收的策略，我们知道，在全局作用域中的变量永远都可以从全局对象上获取到。所以永远不会自动回收。</li><li>所以我们在写代码时，尽量要<strong>避免</strong>不要把一些变量设置为全局变量，如果实在要设为全局变量，那我们使用完后不再需要，那我们就需要<strong>手动将其标注为垃圾</strong>，让垃圾回收器回收掉。</li><li>手动标记垃圾的方式，本质就是<strong>切断引用</strong>，常用的方式就是把变量的值重新赋值为 <code>null</code></li></ul><pre><code>var obj = &#123;  name: &quot;张三&quot;,  age: 23,&#125;;// 标记为垃圾，垃圾回收器就会自动回收掉内存中的 &#123; name:&#39;张三&#39;,age:23&#125; 这个对象占用的空间obj = null;</code></pre></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><ul><li>所谓的垃圾可以理解为，<strong>非用户预期的内占存用</strong>，那么这些占用内存的数据就可以理解为垃圾，应该回收掉。如果是用户预期的内存占用，那都不能算是垃圾。</li><li>如果有些变量我们不再需要，而<strong>垃圾回收器无法识别</strong>，那我们就可以手动将其标记为垃圾。即把变量的值起来 <code>null</code></li></ul></blockquote><h4 id="闭包与内存管理"><a href="#闭包与内存管理" class="headerlink" title="闭包与内存管理"></a>闭包与内存管理</h4><blockquote><ul><li>我们经常听说闭包会造成内存泄露，所谓<strong>内存泄漏</strong>是指程序中已动态分配的内存由于某种原因<strong>未释放或无法释放</strong></li><li>那闭包会造成内存泄露吗 ？ 我们来看下这段代码：</li></ul><pre><code>// 设置当地的一个参考分数线，然后输入你的分数，查看是否超过分数线function compare(score1) &#123;  return function (score) &#123;    if (score1 &gt; score) return &quot;分数线过底不达标&quot;;    return &quot;恭喜，分数线超过一本&quot;;  &#125;;&#125;// 北京1本录取分数线var fn = compare(530);// 小明的分数是540console.log(fn(540));</code></pre></blockquote><ul><li>代码解读<blockquote><ul><li>上面代码中的 <code>score1</code> 变量在<strong>页面没有关闭前</strong>，永远都不会被销毁</li><li>因为内部函数作为返回值被返回，同时内部函数引用了变量 <code>score1</code>，所以就形成了<strong>闭包</strong>。闭包对象中包含了属性 <code>score1</code>，</li><li>但是，我们使用闭包，<strong>本质也是为了用他的这个特性，希望局部变量能被保存在内存中，不要销毁</strong>。如果从这个角度来看，闭包并不能说会造成内存泄露。</li></ul></blockquote></li></ul><blockquote><ul><li>本质上闭包是<strong>有意的</strong>将变量保存在内存中，是<strong>用户预期的内存占用</strong>，所以不能算是内存泄露。</li><li>如果因为<strong>不小心误用了闭包</strong>，而造成某些数据一直占用内存而不能被回收，那就可以理解为因为误用闭包而造成的内存泄露。因为闭包中的数据，肯定是不能被垃圾加收的。</li><li>不能滥用闭包，否则会造成网页的性能问题，严重时可能会导致内存泄漏</li></ul></blockquote><h4 id="区分内存泄露和内存溢出"><a href="#区分内存泄露和内存溢出" class="headerlink" title="区分内存泄露和内存溢出"></a>区分内存泄露和内存溢出</h4><blockquote><ul><li>内存泄露：是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但<strong>内存泄露堆积</strong>后果很严重，无论多少内存，迟早会被占光。</li><li>内存溢出： 是指程序在申请内存时，没有足够的内存空间供其使用，内存不足。</li></ul></blockquote><h3 id="六、IIFE-立即执行函数"><a href="#六、IIFE-立即执行函数" class="headerlink" title="六、IIFE 立即执行函数"></a>六、IIFE 立即执行函数</h3><ol><li>什么是 IIFE 立即执行函数?<blockquote><ul><li>IIFE （Immediately Invoked Function Expression）（立即调用的<strong>函数表达式</strong>）</li><li>是一种特殊的 JavaScript 函数写法，一旦被定义，就立即被调用</li></ul></blockquote></li></ol><ul><li><strong>语法：</strong><blockquote><p>声明一个<strong>匿名函数</strong>，也就是没有名字的函数，然后用()把匿名函数转为 <strong>“函数表达式”</strong>，然后再调用</p></blockquote></li><li>写法：<blockquote><pre><code>// 写法一(function () &#123;// 函数体语句&#125;)();</code></pre></blockquote></li></ul><p>&#x2F;&#x2F; 写法二<br>(function () {<br>  &#x2F;&#x2F; 函数体语句<br>})();<br>&#x2F;&#x2F; 以下是错误写法<br>&#x2F;&#x2F; 函数不能直接加圆括号被调用<br>function(){<br>    &#x2F;&#x2F; 函数体语句<br>}();</p><blockquote><pre><code></code></pre></blockquote><blockquote><blockquote><p>温馨提示：</p></blockquote><ul><li>我们之前说，直接用 function 声明的函数称为函数声明，那这里为什么称为函数表达式呢 ？</li><li>是因为<code>()</code>括号的功能，他<strong>将函数变为了表达式</strong>，然后()括号后面的()括号，表示执行函数</li></ul></blockquote><ol start="2"><li>形成 IIFE 的其它方法<blockquote><ul><li>除了用<code>()</code>包裹函数声明，将函数声明转为“函数表达式”之外</li><li>我们还可以在函数声明前添加<code>-</code>或<code>+</code>号，来将函数声明转为“函数表达式”，然后再调用</li></ul><pre><code>(function () &#123;  // 函数体语句&#125;)();</code></pre></blockquote></li></ol><p>+(function () {<br>  &#x2F;&#x2F; 函数体语句<br>})();</p><p>-(function () {<br>  &#x2F;&#x2F; 函数体语句<br>})();</p><blockquote><pre><code></code></pre></blockquote><ol start="3"><li>IIFE 的作用一 ——为变量赋值<blockquote><ul><li>当我们给变量赋值时，其值需要一些较为复杂的计算才能得到，这时候就可以用立即执行函数来实现</li><li>使用 IIFE 显得语法更紧凑</li></ul><pre><code>// 获取一个随机颜色//写法1： var arr = [&quot;red&quot;, &quot;pink&quot;, &quot;skyblue&quot;, &quot;khaki&quot;]; function color() &#123;var i = (Math.random() * arr.length) &gt;&gt; 0;return arr[i]; &#125; console.log(color());</code></pre></blockquote> &#x2F;&#x2F;写法2：使用IIFE<br> var color &#x3D; (function () {<br>var arr &#x3D; [“red”, “pink”, “skyblue”, “khaki”];<br>var i &#x3D; (Math.random() * arr.length) &gt;&gt; 0;<br>return arr[i];<br> })();<br> console.log(color);<blockquote><pre><code></code></pre></blockquote></li></ol><blockquote><ul><li>以上写法，函数不会被其它对象引用，也不能在其它地方被执行。</li><li>如果你的某个函数只是为了一次求值，其它地方也不会再使用他，则可以用 <code>IIFE</code> 来实现。</li></ul></blockquote><ol start="4"><li>IIFE 的作用二 ——将全局变量变为局部变量<blockquote><p>在很多情况下，我们希望将<strong>全局变量转为局部变量</strong>保存起来。</p></blockquote></li></ol><ul><li><p>情况一：</p><blockquote><pre><code>var arr = [];for (var i = 0; i &lt;= 5; i++) &#123;arr.push(function () &#123;  console.log(i);&#125;);&#125;arr[0](); // 6arr[1](); // 6arr[2](); // 6arr[3](); // 6arr[4](); // 6</code></pre><ul><li>i是全局变量，i&#x3D;6;函数arr<a href="">i</a>内没有声明变量i,所以只能向外查找变量，得到i&#x3D;6</li></ul></blockquote></li><li><p>情况二：</p><blockquote><pre><code>var arr = [];for (var i = 0; i &lt;= 5; i++) &#123;// IIFE  本质是，在每一次循环，形成了一次闭包(function (i) &#123;//这里的i是形参，每次循环都会声明变量  arr.push(function () &#123;    console.log(i);  &#125;);&#125;)(i);//这里的i是实参&#125;</code></pre></blockquote><p>arr<a href="">0</a>; &#x2F;&#x2F;0</p><!-- var arr = []; // IIFE  本质是，在每一次循环，形成了一次闭包 (function (i) { i=0; //形成闭包 arr.push(function () {   console.log(i);//从闭包内获取值 }); })(0); --><blockquote></blockquote><p>arr<a href="">1</a>; &#x2F;&#x2F;1<br>arr<a href="">2</a>; &#x2F;&#x2F;2<br>arr<a href="">3</a>; &#x2F;&#x2F;3<br>arr<a href="">4</a>; &#x2F;&#x2F;4</p><blockquote><pre><code></code></pre></blockquote></li></ul><ol start="5"><li>arguments.callee<blockquote><ul><li>arguments 对象身上有一个 callee 属性，是指向 arguments 对象所在函数的指针。</li><li>通过arguments.callee能获取到 arguments 对象所在的<strong>函数</strong>。arguments.callee已经被<strong>弃用</strong>，不应该再使用了，这里只当了解。</li></ul></blockquote></li></ol><ul><li>arguments.callee 的作用<blockquote><ul><li>当我们需要在一个匿名函数内部，调用这个函数自身时，他就非常有用了</li></ul><pre><code>// 输入5的阶乘var n = (function (n) &#123;if (n == 1) return 1;return n * arguments.callee(n - 1);&#125;)(5);console.log(n);</code></pre><blockquote><p>通常在递归调用匿名函数时，就可以用<code>argument.callee</code>来找到匿名函数</p></blockquote></blockquote></li></ul><h3 id="七、JavaScript-错误处理"><a href="#七、JavaScript-错误处理" class="headerlink" title="七、JavaScript 错误处理"></a>七、JavaScript 错误处理</h3><h4 id="常见错误类型"><a href="#常见错误类型" class="headerlink" title="常见错误类型"></a>常见错误类型</h4><blockquote><p>代码执行过程中会发生各种类型的错误，每种类型的错误都对应一个<strong>错误对象</strong>，常见的错误类型有以上 8 种</p><ul><li>SyntaxError 语法错误</li><li>ReferenceError 引用错误</li><li>TypeError 类型错误</li><li>RangeError 范围错误</li><li>URIError URI 错误</li><li>EvalError eval 错误</li><li>InternalError 内部错误（非标准）</li><li>Error 错误对象，用于自定义错误</li></ul></blockquote><p>1、SyntaxError 语法错误</p><blockquote><ul><li>JavaScript 引擎发现了不符合语法规范的代码，会出现此错误</li></ul><pre><code>// 变量名不规范var this = 1;var 2a=3;</code></pre></blockquote><p>&#x2F;&#x2F; if 少了 }<br>if (1) {<br>    console.log(2);</p><blockquote><pre><code></code></pre></blockquote><ol start="2"><li><p>ReferenceError 引用错误</p><blockquote><ul><li>会在找不到对象时发生，比如常见的访问不存在的变量时，就会报引用错误</li></ul><pre><code>console.log(a); // a变量不存在var num = c; // c变是不存在</code></pre></blockquote></li><li><p>TypeError 类型错误</p><blockquote><ul><li>当变量不是预期类型时，就会引发这种类型错误。</li><li>比如常见引发这一错误的行为：把一个基本数据类型当函数调用。</li></ul><pre><code>var a = 1;a();</code></pre></blockquote><p>console.log(“name” in true); &#x2F;&#x2F; true不是一个对象</p><blockquote></blockquote><p>var arr &#x3D; [1, 2, 3];<br>console.log(arr.call(null)); &#x2F;&#x2F; arr 不是一个函数</p><blockquote><pre><code></code></pre></blockquote></li><li><p>RangeError 范围错误</p><blockquote><ul><li>当数字超出允许的值范围时，将会抛出此类型的错误</li></ul><pre><code>var arr = [1, 2, 3];arr.length = -1; // 数组长度</code></pre></blockquote><p>var num &#x3D; 1.233;<br>num.toFixed(-1); &#x2F;&#x2F; 参数在0-100之间</p><blockquote><pre><code></code></pre></blockquote></li><li><p>URIError URI 错误</p></li></ol><ul><li><p>在了解 URIError 错误之前，我们先来了解下什么是 URI、URL、URN</p><blockquote><ul><li>URI（Uniform Resource Identifier）：统一资源标识符 ，用来唯一标识资源，是一种语义上的抽象概念</li><li>URL（Uniform Resource Locator）：统一资源定位符，用来定位唯一的资源， 必须提供足够的定位信息</li><li>URN（Uniform Resource Name）：统一资源名称，定义了资源的身份（命名）<br><strong>他们三者的关系如下图</strong><img src="URI三者关系图.png"></li></ul></blockquote></li><li><p>如果用一个人来做比喻的话</p><blockquote><ul><li>URN 相当人的身份证号，唯 一标识。</li><li>URL 相当于找到这个人的方式，如住址: x 省 xx 市 xx 区 … xx 单元 xx 室的身份证号为 xxx 的人</li><li>URI 相当身份证，上面有身份证号，也有地址。</li></ul></blockquote></li><li><p>如果用一个网址来表示的话</p><blockquote><ul><li>URL: <a href="https://www.arryblog.com/guide/html5/html-html5-course.htm">https://www.arryblog.com/guide/html5/html-html5-course.htm</a></li><li>URN:guide&#x2F;html5&#x2F;html-html5-course.htm</li><li>URI: 可以是上面的 ULR，也可以是 URN</li></ul></blockquote></li><li><p>URIError 错误</p><blockquote><ul><li>URL 错误只会在<code>encodeURI()</code> 和 <code>decodeURI()</code> 传入了格式错误的 URI 时发生。但我们很难看到这种错误，因为前面两个函数非常稳键。</li><li><code>encodeURI()</code> 对传入的 URI 进行编码</li><li><code>decodeURI()</code> 对传入的 URI 进行解码</li></ul><pre><code> var url = &quot;https://www.arryblog.com/html/文档笔记.html&quot;; console.log(encodeURI(url)); console.log(decodeURI(&quot;dd78%&quot;));</code></pre></blockquote></li></ul><ol start="6"><li><p>EvalError eval 错误</p><blockquote><ul><li>在使用<code>eval()</code>函数时发生异常时抛出错误。因为eval被禁用，所以了解就好。</li></ul></blockquote></li><li><p>InternalError（非标准）内部错误</p><blockquote><ul><li>该错误在<strong>JS 引擎</strong>内部发生发生异常时会抛出。如果真发生了这种错误，很可能代码哪里弄错了或者有危险了。</li></ul></blockquote></li><li><p>Error 自定义错误</p><blockquote><pre><code>throw new Error(&quot;自定义错误&quot;);</code></pre></blockquote></li></ol><h4 id="try-…-catch-语句"><a href="#try-…-catch-语句" class="headerlink" title="try … catch 语句"></a>try … catch 语句</h4><blockquote><ul><li>try…catch 语句用来处理 JS 中的异常</li></ul></blockquote><ol><li>语法<blockquote><pre><code>try &#123;  // 可能会出错的代码&#125; catch (e) &#123;  // 出错时要做什么&#125;</code></pre></blockquote></li></ol><blockquote><ul><li>如果try块中的代码发生错误，则会<strong>立即退出执行</strong>，并跳到catch块中，catch块此时会接收到一个<strong>对象</strong>，这个对象包含发生错误的相关信息。</li><li>try捕获到错误后,不会再执行try错误后的代码，同时将错误交给catch来处理，然后再执行后面的代码</li></ul><pre><code>var a = 1;try &#123;  // 可能出错的代码  a();  console.log(22); // 不执行&#125; catch (e) &#123;  // 出错时要做的事  console.log(e); // 执行&#125;console.log(&quot;try后面代码&quot; + a); // 执行</code></pre></blockquote><ol start="2"><li>finally 子句<blockquote><ul><li><code>finally</code>子句是<code>try...catch</code>语句中的一部分，为<strong>可选</strong>的</li><li>不管try中代码是否发生错误，最终都会执行<code>finally</code>子句中的代码</li></ul></blockquote></li></ol><ul><li>语法<blockquote><pre><code>try &#123;// 可能会出错的代码&#125; catch (e) &#123;// 出错时要做什么&#125; finally &#123;//永远都会执行的代码&#125;</code></pre></blockquote></li></ul><blockquote><pre><code>var a = 1;function fn(a) &#123;  try &#123;    // 可能出错的代码    a();    return 1;//不执行  &#125; catch (e) &#123;    // 出错时要做的事    return 2;  &#125; finally &#123;    return 3;//执行  &#125;&#125;console.log(fn(a));</code></pre></blockquote><blockquote><ul><li>try和catch中的return 语句也无法阻止 finally 代码块的执行</li></ul></blockquote><h4 id="throw-抛出自定义错误"><a href="#throw-抛出自定义错误" class="headerlink" title="throw 抛出自定义错误"></a>throw 抛出自定义错误</h4><blockquote><ul><li>throw 操作符，用于抛出<strong>自定义错误</strong>。throw 操作符后面必须有一个<strong>值</strong>，值可以是<strong>任意类型</strong>。</li></ul><pre><code>throw &quot;123&quot;;throw &quot;abc&quot;;throw true;</code></pre></blockquote><p>console.log(2); &#x2F;&#x2F; 不会被执行</p><blockquote></blockquote><p>&#x2F;&#x2F; 使用 throw操作符时，代码立即停止执行，除非用try…catch捕获了抛出的错误</p><blockquote><pre><code></code></pre></blockquote><ul><li>throw 与 try…catch 结合<blockquote><ul><li>可以自定义一个错误类型的消息，浏览器会像处理自己生成的错误一样来处理这个自定义错误</li></ul><pre><code>//当输入的实参不是数组时会报错function fn(arr) &#123;try &#123;  return arr.slice(0, 1);&#125; catch (e) &#123;  throw new TypeError(&quot;arr参数，必须是一个数组&quot;);&#125;console.log(arr); // 上面抛出错误，这里不会执行&#125;fn(1);</code></pre></blockquote></li></ul><h3 id="LHS-和-RHS-查询"><a href="#LHS-和-RHS-查询" class="headerlink" title="LHS 和 RHS 查询"></a>LHS 和 RHS 查询</h3><blockquote><p>LHS字面理解是 <code>Left Hand Sid</code> 即左手边，RHS字面理解是 <code>Right Hand Side</code> 即右手边。</p></blockquote><ol><li>LHS 和 RHS <strong>片面</strong>的理解<blockquote><p>一般简单片面的理解为<strong>赋值操作符</strong>的左边和右边</p><ul><li>当<strong>变量</strong>出现在赋值操作符的左侧时进行LHS 查询，出现在右侧时进行RHS 查询</li><li>LHS 查询是试图找到变量的<strong>容器本身</strong>，然后对其<strong>赋值</strong></li><li>RHS 查询是试图找到变量的中<strong>对应的值</strong></li></ul></blockquote></li></ol><blockquote><pre><code>var a;var b;</code></pre></blockquote><p>a &#x3D; 1;<br>b &#x3D; a;</p><blockquote><pre><code></code></pre></blockquote><ul><li>代码解读</li></ul><p><strong>① 编译阶段</strong></p><blockquote><ul><li>会在当前作用域中声明 2 个变量 a 和 b</li></ul></blockquote><p><strong>② 执行阶段</strong></p><blockquote><ul><li>a &#x3D; 1，这里的 <code>a</code> 会进行 <code>LHS</code> 查询，查询<strong>是否存在</strong>变量 a，并不关心 a 的值是什么。如果变量 a 存在，就给他<strong>赋值</strong>为 1</li><li>b &#x3D; a，首先会对 <code>a</code> 进行 <code>RHS</code> 查询，查询是否存在变量 a，存在，并把对应的值 1 拿到</li><li><strong>然后</strong>再对 <code>b</code> 进行 <code>LHS</code> 查询，查询是否存在变量 b，存在，并把对应的值 1 赋值给到变量 b</li></ul></blockquote><ol start="2"><li>LHS 和 RHS 更准确的理解<blockquote><p>通过上面分析，我们知道</p><ul><li>LHS 查询只关心是否存在这个变量，并不关心变量对应的值是什么</li><li>RHS 查询除了关心变量是否存在之外，还关心变量中对应的值，因为最终就是为了找到变量对应值。<br><strong>所以，更准确的说</strong></li><li>LHS 查询可以理解为<strong>赋值操作的目标</strong>是谁 ？ 即我要把值赋值给谁</li><li>RHS 查询可以理解为<strong>赋值操作的源头</strong>是谁？ 我要用什么来内容完成赋值</li></ul></blockquote></li></ol><blockquote><pre><code>function fn(c) &#123;  console.log(c);  console.log(b);  console.log(a);  a = 1;  var b = a;  b();&#125;fn(2);</code></pre></blockquote><ul><li>代码解读</li><li>① 全局代码运行时</li></ul><p><strong>编译阶段</strong></p><blockquote><ul><li>声明函数 <code>fn</code>，fn 是 window 对象身上的属性，即<code>window.fn=function()&#123;......&#125;</code></li></ul></blockquote><p><strong>执行阶段</strong></p><blockquote><ul><li><code>fn(2)</code>在调用前，会对 fn 进行 RHS 查询，查询是否存在 fn，并拿到 fn 的值，然后开始执行</li></ul></blockquote><ul><li>② fn 函数调用时</li></ul><p><strong>编译阶段：</strong></p><blockquote><ul><li>在当前作用域中<strong>声明</strong> 2 个变量 <code>c</code> 和 <code>b</code>，同时<code>c = 2</code></li><li>这个过程 c 也会进行 LHS 查询，找到是否存在变量 c，然后存在将值 2 赋值给到他</li></ul></blockquote><p><strong>执行阶段：</strong></p><blockquote><ul><li>当执行到<code>console.log(c)</code>，会对 c 进行 RHS 查询，取得 c 的值为 2，还会对 console 进行 RHS 查询</li><li>当执行到 <code>console.log(b)</code>，会对 b 进行 RHS 查询，取得 c 的值为 undefined，对 console 进行 RHS 查询</li><li>当执行到<code>console.log(a)</code>，会对 c 进行 RHS 查询，发现找不到变量 a，然后报出 引用错误，….</li><li>当执行到a &#x3D; 1，会对 a 进行 LHS 查询，发现找不到变量 a<ul><li>在非严格模式下，此时会全局作用域中创建一个同名的变量，然后将 1 赋值给 a</li><li>在严格模式下，会报 引用错误，找不到变量 a</li></ul></li><li>当执行到b &#x3D; a<ul><li>首先对 a 进行 RHS 查询，找到变量 a，并取得 a 的值 1</li><li>然后对 b 进行 LHS 查询，找到变量 b，把对应的值 1 赋值给 b</li></ul></li><li>当执行到b()时，会对 b 进行 RHS 查询，找到了，但 b 的值不是一个函数，你对 b 执行函数调用，会抛出类型错误<code>（TypeError）</code></li></ul></blockquote><ol start="3"><li>总结：LHS 和 RHS<br><strong>LHS 查询</strong><blockquote><ul><li>只关心有没有要查找的变量，并不关心变量的值是多少</li><li>如果找到这个变量，就将对应值赋值给他。</li><li>如果找不到，在严格模式下，会报引用错误，非严格模式下，会在全局作用域中创建一个同名的变量</li><li>LHS 查询可以理解为 赋值操作的目标是谁 ？ 即我要把值赋值给谁</li></ul></blockquote></li></ol><p><strong>RHS 查询</strong></p><blockquote><ul><li>他不仅关心有没有要查找的变量，还关心变量的值是多少，最终是要取到变量的值。</li><li>如果找不到变量，则会报引用错误，如果找到，则把对应的值拿到</li><li>如果对找到的变量，做不合理的操作，会抛出类型错误（TypeError）</li><li>RHS 查询可以理解为 赋值操作的源头是谁 ？ 我要用什么来内容完成赋值<blockquote><p>JS 引擎在查找某个变量时，会先判断是要 LHS 查询还是 RHS 查询，然后再根据对应规则去查询变量，做相应处理</p></blockquote></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（十七）</title>
      <link href="/2023/12/08/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89/"/>
      <url>/2023/12/08/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>如果我们想对字符串进行相关（增、删、改、查、检索）操作，就可以用接下来的正则表达式实现<br><strong>什么是正则表达式</strong></p><ul><li>正则表达式是用于匹配字符串中字符组合的模式</li><li>正则表达式通常被用来检索、替换那些符合某个模式（规则）的文本<blockquote><p>在实际开发中，我们需要检测用户输入的账号（邮箱或手机号）是否符合要求，就可以用到正则表达式来检测</p></blockquote></li></ul></blockquote><h3 id="一、创建正则表达式"><a href="#一、创建正则表达式" class="headerlink" title="一、创建正则表达式"></a>一、创建正则表达式</h3><blockquote><p>创建正则表达式有两种方式：<strong>字面量形式</strong>和<strong>构造函数</strong>形式</p><ul><li>字面量形式 ： 由两个斜杠<code>/ /</code> 包围 ，如 <code>/正则内容/</code></li><li>构造函数形式 ：使用<code>new RegExp(&#39;正则内容&#39;)</code>的形式创建<blockquote><p>正则表达式是<strong>对象</strong>（引用数据类型），使用<code>typeof</code>运算符检查正则表达式的类型，结果为<code>Object</code></p></blockquote></li></ul><pre><code>// 需要检查的字符串var str1 = &quot;123a456&quot;;var str2 = &quot;12345a67&quot;;</code></pre></blockquote><p>&#x2F;&#x2F; 字面量形式创建正则表达式<br>var reg1 &#x3D; &#x2F;\d{5}&#x2F;; &#x2F;&#x2F; 配的字符串中需要包含连续的5位数字<br>&#x2F;&#x2F; 构造函数形式<br>var reg2 &#x3D; new RegExp(“\d{5}”);</p><blockquote></blockquote><p>console.log(reg1.test(str1)); &#x2F;&#x2F; false<br>console.log(reg1.test(str2)); &#x2F;&#x2F; true</p><blockquote></blockquote><p>console.log(reg2.test(str1)); &#x2F;&#x2F; false<br>console.log(reg2.test(str2)); &#x2F;&#x2F; true</p><blockquote></blockquote><p>typeof &#x2F;\d{5}&#x2F;; &#x2F;&#x2F; ‘object’</p><blockquote><pre><code></code></pre></blockquote><blockquote><ul><li>能用字面量方式实现，就用字面量方式。如果字面量方式实现起来不方便，则可以考虑用<code>new RegExp</code>实现</li><li>如果正则表达式的规则是可变的，不固定的，可以把正则表达式以字符串形式保存在变量中，然后在<code>new RegExp</code>中引用这个变量。</li></ul><pre><code> var str = &quot;uac&quot;; var val = &quot;a&quot;; // 字符串是否包含a var reg = new RegExp(val); console.log(reg.test(str)); //true val = &quot;b&quot;; // 字符串是否包含b var reg = new RegExp(val); console.log(reg.test(str)); //false</code></pre></blockquote><ul><li>正则表达式“按位”描述规则<blockquote><ul><li>正则表达式 “按位” 描述规则，是指它是<strong>一位一位的</strong>描述字符串的构成形式</li></ul></blockquote></li></ul><blockquote><pre><code> var reg1 = /^A\d\d\dB$/; //必须以A开头，中间三位数字，B结尾 console.log(reg1.test(&quot;A123B&quot;)); //true console.log(reg1.test(&quot;A1234B&quot;)); //false var reg2 = /^A\d\d\d$/; //必须以A开头，中间三位数字，以第三位数字结尾 console.log(reg2.test(&quot;A123&quot;)); //true console.log(reg2.test(&quot;A1234&quot;)); //false</code></pre><blockquote><p>正则在线测试工具：<a href="https://regexr-cn.com可以用来测试自己写的正则/">https://regexr-cn.com可以用来测试自己写的正则</a></p></blockquote></blockquote><h3 id="二、边界限定字符"><a href="#二、边界限定字符" class="headerlink" title="二、边界限定字符"></a>二、边界限定字符</h3><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>匹配输入字符串的开始位置</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置</td></tr><tr><td>\b</td><td>匹配一个单词的边界,需要注意的是匹配的单词边界<strong>不包括</strong>在匹配中</td></tr><tr><td>\B</td><td>匹配非单词边界</td></tr></tbody></table><blockquote><ul><li>如果要控制字符串的个数，就在前后加上边界限定字符<code>^$</code><blockquote><p>注意：</p></blockquote></li><li>单词前后出现<code>（@ . - # $ % &amp; &lt;）</code>等特殊字符，这个单词都可以看作是独立的单词</li><li>如果单词前后出现 数字、字母、<code>_</code>则不会当成独立的单词</li></ul><pre><code>// 匹配字符串中的独立的cat单词var reg1 = /\bcat\b/g;var str = &quot;cat 1cat cats cat. @cat -cat _cat&quot;;var res = str.replace(reg1, function (v) &#123;  //给独立的cat前加*  return &quot;*&quot; + v;&#125;);console.log(res); // *cat 1cat cats *cat. @*cat -*cat _cat</code></pre></blockquote><ul><li><p>检测字符串是否是 5 位数字</p><blockquote><pre><code>var str1 = &quot;a12345&quot;;var str2 = &quot;12345b&quot;;var str3 = &quot;12345&quot;;</code></pre></blockquote><p>var reg &#x3D; &#x2F;^\d{5}$&#x2F;;<br>console.log(reg.test(str1)); &#x2F;&#x2F; false<br>console.log(reg.test(str2)); &#x2F;&#x2F; false<br>console.log(reg.test(str3)); &#x2F;&#x2F; true<br>console.log(reg.test(str4)); &#x2F;&#x2F; false</p><blockquote><pre><code></code></pre></blockquote></li><li><p>检测字符串是否是以 m 开头，中间 5 位数字，以 n 结尾</p><blockquote><pre><code>var str1 = &quot;m12345&quot;;var str2 = &quot;m123456n&quot;;var str3 = &quot;m12345n&quot;;</code></pre></blockquote><p>var reg &#x3D; &#x2F;^m\d{5}n$&#x2F;;<br>console.log(reg.test(str1)); &#x2F;&#x2F; false<br>console.log(reg.test(str2)); &#x2F;&#x2F; false<br>console.log(reg.test(str3)); &#x2F;&#x2F; true</p><blockquote><pre><code></code></pre></blockquote></li><li><p>将字符串中独立的 cat 前后加上*号</p><blockquote><pre><code>var str = &quot;cat scats&quot;;var reg = /\bcat\b/g;console.log(str.match(reg)); //[&#39;cat&#39;]var res=str.replace(reg,&quot;*$&amp;*&quot;);console.log(res);//*cat* scats</code></pre></blockquote></li><li><p>找出以 icon 开头的单词，不包括 icon</p><blockquote><pre><code>var reg = /\bicon[a-z]+\b/gi;var str = &quot;i icons bicon iconasw icons1 icon&quot;;console.log(str.match(reg)); // [&#39;icons&#39;, &#39;iconasw&#39;]</code></pre></blockquote></li><li><p>把单词中出现的con换成*，但要求con不能出现在单词的开始和结束</p><blockquote><pre><code>var reg = /\Bcon\B/g;var str = &quot;content iconfont bacon&quot;;var res = str.replace(reg, &quot;*&quot;);console.log(res);//content i*font bacon</code></pre></blockquote></li></ul><h3 id="三、元字符"><a href="#三、元字符" class="headerlink" title="三、元字符"></a>三、元字符</h3><blockquote><ul><li>根据正则表达式语法规则，大部分字符仅能够描述自身，这些字符被称为<strong>普通字符</strong>，如所有的字母、数字等</li><li>元字符就是<strong>拥有特定功能</strong>的特殊字符，大部分需要<strong>加反斜杠</strong>进行标识，以便于普通字符进行区别</li><li>元字符是正则表达式中的最小元素，只代表单一（一个）字符<table><thead><tr><th>元字符</th><th>功能</th></tr></thead><tbody><tr><td>\d</td><td>匹配一个数字，等价于 <code>[0-9]</code></td></tr><tr><td>\D</td><td>匹配一个非数字字符 <code>[^0-9]</code></td></tr><tr><td>\w</td><td>匹配一个单字字符（字母、数字、下划线） 等价于<code>[A-Za-z0-9_]</code></td></tr><tr><td>\W</td><td>匹配一个非单字字符 <code>[^A-Za-z0-9_]</code></td></tr><tr><td>\s</td><td>匹配一个空白字符，包括（空格、制表符和换行符）</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>.</td><td>匹配除换行符之外的任何单个字符</td></tr></tbody></table></li></ul></blockquote><ul><li><p>检测字符串是否满足：<code>123-4567-789</code> 格式</p><blockquote><pre><code>// 正则表达式var reg = /^\d\d\d-\d\d\d\d-\d\d\d$/;// var reg = /^\d&#123;3&#125;-\d&#123;4&#125;-\d&#123;3&#125;$/;   优化版</code></pre></blockquote><p>&#x2F;&#x2F; 测试字符串<br>var str1 &#x3D; “123-9873-980”;<br>var str2 &#x3D; “123-9873-9803”;<br>console.log(reg.test(str1)); &#x2F;&#x2F; true<br>console.log(reg.test(str2)); &#x2F;&#x2F; false</p><blockquote><pre><code></code></pre></blockquote></li><li><p>检测字符串是否满足<code>xxx-xxxx-xxx</code>格式，其中 x 表示字母、数字、下划线</p><blockquote><pre><code>// 正则表达式var reg = /^\w\w\w-\w\w\w\w-\w\w\w$/;// var reg = /^\w&#123;3&#125;-\w&#123;4&#125;-\w&#123;3&#125;$/;</code></pre></blockquote><p>&#x2F;&#x2F; 测试字符串<br>var str1 &#x3D; “123-a123-bc9”;<br>var str2 &#x3D; “abc-_e13-cde”;<br>var str3 &#x3D; “@bc-_ae13-cde”;<br>console.log(reg.test(str1)); &#x2F;&#x2F; true<br>console.log(reg.test(str2)); &#x2F;&#x2F; true<br>console.log(reg.test(str3)); &#x2F;&#x2F; false</p><blockquote><pre><code></code></pre></blockquote></li><li><p>检测字符串中是否有空白字符</p><blockquote><pre><code>// 正则表达式var reg = /\s/;</code></pre></blockquote><p>&#x2F;&#x2F; 测试字符串<br>var str1 &#x3D; “1 bc”;<br>var str2 &#x3D; “ ab”;<br>var str3 &#x3D; “se1”;<br>console.log(reg.test(str1)); &#x2F;&#x2F; true<br>console.log(reg.test(str2)); &#x2F;&#x2F; true<br>console.log(reg.test(str3)); &#x2F;&#x2F; false</p><blockquote><pre><code></code></pre></blockquote></li><li><p>检测字符串的开头是否有空白字符</p><blockquote><pre><code>// 正则表达式var reg = /^\s/;</code></pre></blockquote><p>&#x2F;&#x2F; 测试字符串<br>var str1 &#x3D; “1 bc”;<br>var str2 &#x3D; “ ab”;<br>var str3 &#x3D; “se1”;<br>console.log(reg.test(str1)); &#x2F;&#x2F; false<br>console.log(reg.test(str2)); &#x2F;&#x2F; true<br>console.log(reg.test(str3)); &#x2F;&#x2F; false</p><blockquote><pre><code></code></pre></blockquote></li></ul><ol><li>注意事项 1：字符转义<blockquote><ul><li>如果想让某个特殊字符<strong>以字面意思理解</strong>（匹配），则可以在特殊字符前加<code>\</code>转义</li><li>在特殊字符之前的反斜杠<code>\</code>表示下一个字符不是特殊字符，应该按照字面理解</li><li><code>.</code>点在正则中是一个特殊字符，表示匹配除换行符之外的任何单个字符</li><li>如果我们想检测字符串是否有<code>.</code>，则需要在其前加<code>\</code>来转义</li></ul><pre><code>// 正则表达式var reg1 = /^a\.b$/; // 字符串要有.字符</code></pre></blockquote>&#x2F;&#x2F; 测试字符串<br>var str1 &#x3D; “abc”;<br>var str2 &#x3D; “a.b”;<blockquote></blockquote>console.log(reg1.test(str1)); &#x2F;&#x2F; false<br>console.log(reg1.test(str2)); &#x2F;&#x2F; true<blockquote><pre><code></code></pre></blockquote></li></ol><blockquote><blockquote><p>不管一个<strong>符号</strong>(字母数字不行)有没有特殊意义，都可以在其之前加上一个<code>\</code>以确保它表达的是这个符号本身</p></blockquote></blockquote><ol start="2"><li><p>注意事项 2：字符串中的 \</p><blockquote><ul><li>字符串中的<code>\</code>是一个转义符，如果想在字符串中正确的输出<code>\</code>，需要在他的前面再添加<code>\</code>转义</li></ul><pre><code>var str1 = &quot;a\\b&quot;;console.log(str1); // a\b</code></pre></blockquote></li><li><p>注意事项 3：new RegExp() 中的 \</p><blockquote><ul><li>如果使用<code>new RegExp()</code>写法创建正则表达式，<strong>反斜杠需要多写一个</strong>，原因就是因为字符串中的<code>\</code>本身是一个转义符</li><li>如：<code>/^\d$/</code> 和 <code>new RegExp(&#39;^\\d$&#39;)</code> 是相同的意思</li></ul><pre><code>  var reg1 = /^\d&#123;5&#125;$/; //字符串是5位数字组成  var reg2 = new RegExp(&quot;^d&#123;5&#125;$&quot;); // 检测的字符串要是5个d  var reg3 = new RegExp(&quot;^\\d&#123;5&#125;$&quot;); // 字符串是5位数字组成</code></pre></blockquote><p>  &#x2F;&#x2F; 测试字符<br>  var str1 &#x3D; “12345”;<br>  console.log(reg1.test(str1)); &#x2F;&#x2F;true;<br>  console.log(reg2.test(str1)); &#x2F;&#x2F;false<br>  console.log(reg2.test(“ddddd”)); &#x2F;&#x2F;true<br>  console.log(reg3.test(str1)); &#x2F;&#x2F;true</p><blockquote><pre><code></code></pre></blockquote></li></ol><h3 id="四、方括号表示法"><a href="#四、方括号表示法" class="headerlink" title="四、方括号表示法"></a>四、方括号表示法</h3><blockquote><p>在正则表达式语法中，<code>[]</code>方括号表示字符范围，在方括号中可以包含多个字符，表示匹配方括号中出现的<strong>任意一个字符</strong></p></blockquote><ol><li><p>[] 中特殊字符</p><blockquote><ul><li>在 <code>[]</code> 方括号中，对于<code>. * ?|/</code> 等这些特殊符号，<strong>没有任何特殊意义</strong>(不需要用<code>\</code>)，只是表示字符本身的意思</li></ul><pre><code>var reg = /^a[123]b$/;console.log(reg.test(&quot;a1b&quot;)); // trueconsole.log(reg.test(&quot;a3b&quot;)); // trueconsole.log(reg.test(&quot;a4b&quot;)); // false</code></pre></blockquote></li><li><p><input disabled="" type="checkbox"> 中的破折号 -</p><blockquote><p>如果多个字符的编码顺序是连续的，可以仅指定开头和结尾字符，省略中间字符，使用破折号 <code>-</code>来<strong>指定字符范围</strong></p></blockquote></li></ol><table><thead><tr><th>字符范围</th><th>描述</th></tr></thead><tbody><tr><td>[0-9]</td><td>匹配0-9之间的一个数字 等价于\d</td></tr><tr><td>[a-z]</td><td>匹配小写 a-z 任何一个字母</td></tr><tr><td>[A-Z]</td><td>匹配大写 A-Z 任何一个字母</td></tr><tr><td>[A-Za-z0-9_]</td><td>匹配一个单字字符（字母、数字、下划线） 等价于 \w</td></tr><tr><td>[a-d]</td><td>表示匹配 a,b,c,d 中的任意一个</td></tr><tr><td>[0-4]</td><td>表示匹配 0，1，2，3，4中的任意一个</td></tr></tbody></table><blockquote><ul><li>字符串是否是<code>0-5</code>之间的任意一个数字</li></ul><pre><code>var reg = /^[0-5]$/;console.log(reg.test(&quot;1&quot;)); // trueconsole.log(reg.test(&quot;2&quot;)); // trueconsole.log(reg.test(&quot;6&quot;)); // false</code></pre></blockquote><blockquote><ul><li>验证字符串是否为 Java 或 java</li></ul><pre><code>var reg = /^[Jj]ava$/;console.log(reg.test(&quot;java&quot;)); // trueconsole.log(reg.test(&quot;Java&quot;)); // trueconsole.log(reg.test(&quot;zJava&quot;)); // false</code></pre></blockquote><ul><li>验证某字符串是否是 4 位小写字母，且最后一位不能是m<blockquote><pre><code>var reg = /^[a-z]&#123;3&#125;[a-ln-z]$/;</code></pre></blockquote>console.log(reg.test(“abcf”)); &#x2F;&#x2F; true<br>console.log(reg.test(“1abc”)); &#x2F;&#x2F; false<br>console.log(reg.test(“abcm”)); &#x2F;&#x2F;true<br>console.log(reg.test(“abmc”)); &#x2F;&#x2F;true<blockquote><pre><code></code></pre></blockquote></li></ul><ol start="3"><li>取反：[ ] 内添加^前缀<blockquote><ul><li>如果在方括号内添加<code>^</code>前缀，表示只要不是当前范围内的任意一个字符</li></ul></blockquote></li></ol><table><thead><tr><th>字符范围</th><th>描述</th></tr></thead><tbody><tr><td>[^0-9]</td><td>匹配一个非数字字符 等价于\D</td></tr><tr><td>[^a-z]</td><td>匹配一个非小写 a-z 中的任何一个字符</td></tr><tr><td>[^A-Z]</td><td>匹配一个非大写 A-Z 任何一个字符</td></tr><tr><td>[^A-Za-z0-9_]</td><td>匹配一个非单字字符 等价于 \W</td></tr><tr><td>[^123]</td><td>匹配非 123 中的其它任何一个字符</td></tr></tbody></table><ul><li>检测某个字符串是否符合以下要求： <blockquote><ul><li>字符串有 3 位字符组成，以小写字母开头，中间 1 位不能是数字，最后一位不能是大写字母</li></ul><pre><code>var reg = /^[a-z][^\d][^A-Z]/;console.log(reg.test(&quot;asA&quot;));console.log(reg.test(&quot;a.s&quot;));</code></pre></blockquote></li></ul><p>4、匹配所有字符</p><blockquote><ul><li><code>[\d\D]</code> 可用来表示所有字符</li><li><code>[\s\S]</code> 可用来表示所有字符</li></ul><pre><code>var str = &quot;12ab./@*&amp;^%#&quot;;var bool = /^[\s\S]+$/.test(str);console.log(bool);</code></pre></blockquote><p>var res &#x3D; str.match(&#x2F;[\s\S]+&#x2F;g);<br>console.log(res); &#x2F;&#x2F; [‘12ab.&#x2F;@*&amp;^%#’]</p><blockquote><pre><code></code></pre></blockquote><h3 id="五、量词"><a href="#五、量词" class="headerlink" title="五、量词"></a>五、量词</h3><blockquote><p>如果需要重复匹配一些内容时，我们就需要使用到量词，主要包括以下几种</p></blockquote><table><thead><tr><th>量词</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配前一个表达式 0 次或多次，等价于{0,}</td></tr><tr><td>+</td><td>匹配前面一个表达式 1 次或多次，等价于{1,}</td></tr><tr><td>？</td><td>匹配前面一个表达式 0 次 1 次，等价于{0,1}</td></tr><tr><td>{n}</td><td>n 是一个正整数，匹配了前面一个字符刚好出现了 n 次</td></tr><tr><td>{n,}</td><td>n 是一个正整数，匹配前一个字符至少出现了 n 次</td></tr><tr><td>{n,m}</td><td>n 和 m 都是整数，匹配前面的字符至少次，最多 m 次</td></tr></tbody></table><blockquote><ul><li>验证字符串是否符合手机号码的规则：<code>11</code> 位数字，并且肯定要以 <code>1</code> 开头，第 2 位不能是 <code>1</code> 和 <code>2</code></li></ul><pre><code>var reg = /^[1][^12]\d&#123;9&#125;$/;console.log(reg.test(13978903158)); // true</code></pre></blockquote><blockquote><ul><li>判断某个字符串是否是 5 位，要求以大写字母开头，中间任意数字，最后以小写字母结尾</li></ul><pre><code>var reg = /^[A-Z][0-9]&#123;3&#125;[a-z]$/;console.log(reg.test(&quot;A111z&quot;));// true</code></pre></blockquote><ul><li><p>验证用户名是否符合以下规则：4-16位，只能是数字，字母，_下划线，- 减号组成</p><blockquote><pre><code>var reg3 = /^[\w-]&#123;4,16&#125;$/;console.log(reg.test(&quot;a123s@&quot;)); // false</code></pre></blockquote></li><li><p>判断某个字符串是否是以 http 或 https 开头</p><blockquote><pre><code>var reg = /^https?/;console.log(reg.test(&quot;http&quot;)); // true</code></pre></blockquote></li><li><p>判断某个字符是否是小数，比如 3.1 43.01</p><blockquote><pre><code>var reg4 = /^[0-9]+\.\d+$/;console.log(reg4.test(&quot;1.209&quot;));</code></pre></blockquote></li></ul><h3 id="六、选择符"><a href="#六、选择符" class="headerlink" title="六、选择符"></a>六、选择符</h3><table><thead><tr><th>选择符</th><th>说明</th></tr></thead><tbody><tr><td>&#96;</td><td>&#96;</td></tr></tbody></table><blockquote><blockquote><p><code>|</code> 选择符：一般会放在原子组<code>()</code>中来使用</p></blockquote><ul><li>不加括号时：<code>/^a|b$/</code>，代表要么是<code>^a</code>即以a开头，要么是<code>b$</code>即以b结尾，不限字符数</li><li>加括号时：<code>/^(a|b)$/</code>，代表只能是一个字符，要么是a，要么是b</li></ul></blockquote><blockquote><ul><li>匹配字符串中只要包含 a 或 b 就可以</li></ul><pre><code>var reg = /a|b/;console.log(reg.test(&quot;b&quot;)); //trueconsole.log(reg.test(&quot;a&quot;)); //trueconsole.log(reg.test(&quot;ab&quot;)); //trueconsole.log(reg.test(&quot;ba&quot;)); //true</code></pre></blockquote><ul><li><p>匹配字符串是否以 a 开始或 b 结尾</p><blockquote><pre><code>var reg = /^a|b$/;console.log(reg.test(&quot;b&quot;)); //trueconsole.log(reg.test(&quot;a&quot;)); //trueconsole.log(reg.test(&quot;ab&quot;)); //trueconsole.log(reg.test(&quot;ba&quot;)); //false</code></pre></blockquote></li><li><p>匹配字符串是否是 a 或 b</p><blockquote><pre><code>var reg = /^(a|b)$/; // 相当于只要匹配 /^a$/ 或/^b$/ 就可以console.log(reg.test(&quot;a&quot;)); // trueconsole.log(reg.test(&quot;b&quot;)); // trueconsole.log(reg.test(&quot;a11&quot;)); // falseconsole.log(reg.test(&quot;ssb&quot;)); // false</code></pre></blockquote></li><li><p>匹配字符串是否为 “current”或 “active”</p><blockquote><pre><code>var reg = /^(current|active)$/;console.log(reg.test(&quot;current&quot;)); // trueconsole.log(reg.test(&quot;active&quot;)); // trueconsole.log(reg.test(&quot;actives&quot;)); // false</code></pre></blockquote></li><li><p>匹配字符串是否为 hobby 或 hobbies</p><blockquote><pre><code>var reg = /^hobb(y|ies)$/;console.log(reg.test(&quot;hobby&quot;));console.log(reg.test(&quot;hobbies&quot;));console.log(reg.test(&quot;hobbes&quot;));</code></pre></blockquote></li><li><p>检测坐机电话是否是长沙或西安的 长沙区号：0731 、西安区号 029、北京区号 010</p><blockquote><pre><code>// var reg1 = /^0731|029-\d&#123;7,8&#125;$/; // 错误写法</code></pre></blockquote><p>var reg2 &#x3D; &#x2F;^(0731|029)-\d{7,8}$&#x2F;; &#x2F;&#x2F; 正确写法<br>console.log(reg1.test(“0731”)); &#x2F;&#x2F; true<br>console.log(reg2.test(“0731”)); &#x2F;&#x2F; false<br>console.log(reg2.test(“0731-1234567”)); &#x2F;&#x2F; true</p><blockquote><pre><code></code></pre></blockquote></li><li><p>零或非零开头的数字</p><blockquote><pre><code>var reg =/^(0|[1-9][0-9]*)$/;</code></pre></blockquote></li></ul><h3 id="七、修饰符"><a href="#七、修饰符" class="headerlink" title="七、修饰符"></a>七、修饰符</h3><blockquote><p>修饰符也叫作标志（flags）通过标志，正则表达式可实现高级搜索</p></blockquote><table><thead><tr><th>标志</th><th>说明</th></tr></thead><tbody><tr><td>g</td><td>全局搜索</td></tr><tr><td>i</td><td>不区分大小写搜索</td></tr><tr><td>m</td><td>多行搜索；修饰符的作用是修改<code>^</code>和<code>$</code>在正则表达式中的作用，让它们分别表示行首和行尾。</td></tr><tr><td>s</td><td>允许<code>.</code>匹配换行符</td></tr><tr><td>u</td><td>使用 <code>unicode</code> 码的模式进行匹配</td></tr><tr><td>y</td><td>执行“粘性 (sticky)”搜索，匹配从目标字符串的当前位置开始</td></tr></tbody></table><ol><li><p>i 标志</p><blockquote><ul><li>检测字符串中是否包括<strong>大小写</strong>字母<code>a</code></li></ul><pre><code>var reg = /a/i;console.log(reg.test(&quot;Abc&quot;)); // trueconsole.log(reg.test(&quot;abc&quot;)); // true</code></pre></blockquote></li><li><p>g 标志</p><blockquote><ul><li>提取字符串中的数字</li></ul><pre><code>var reg = /\d+/g;var str = &quot;1ab23c345&quot;;var arr = str.match(reg); // 将匹配成功的内容组成一个新的数组，并将这个数组返回console.log(arr); //  [&#39;1&#39;, &#39;23&#39;, &#39;345&#39;]</code></pre></blockquote></li><li><p>修鉓符可以组合（叠加使用）</p><blockquote><pre><code>var str = &quot;I Love You 清心&quot;;var res1 = str.replace(/[a-z]+/g, &quot;*&quot;); // 将小写字母替换成 *console.log(res1); // I L* Y* 清心var res2 = str.replace(/[a-z]+/gi, &quot;*&quot;); //将字母（不区分大小）替换成 *console.log(res2); // * * * 清心</code></pre></blockquote></li><li><p>m 标志</p><blockquote><ul><li>用于将内容视为<strong>多行匹配</strong>，主要针对有 <code>^</code>和 <code>$</code> 修饰的表达式</li><li>m 修饰符的作用是修改<code>^</code>和<code>$</code>在正则表达式中的作用，让它们分别表<strong>行首和行尾</strong>示</li></ul><pre><code>// 提取字符串中##包裹的内容var str = `     #a1bs##     #s@wf#     #c09swwf#   `;</code></pre></blockquote><p>var reg &#x3D; &#x2F;^\s*#([\s\S]+?)#\s*$&#x2F;gm;<br>var result &#x3D; [];<br>var res &#x3D; str.replace(reg, function (v, p1) {<br>  result.push(p1);<br>});<br>console.log(result); &#x2F;&#x2F; [‘a1bs’, ‘s@wf’, ‘c09swwf’]</p><blockquote></blockquote><p>&#x2F;&#x2F; 以下方式更简单，但如果当前行超过两个#,就会出错<br>var reg &#x3D; &#x2F;#([\s\S]+?)#&#x2F;g;<br>str.replace(reg, function (v, p1) {<br>  console.log(p1);<br>});</p><blockquote><pre><code></code></pre></blockquote></li></ol><ul><li>提取第一行中数字前面紧跟随着$或￥的数字（包括小数）<blockquote><pre><code> var reg = /(?:(?&lt;=\$)|(?&lt;=\￥))(\d+(\.\d+)?)/g;var str = ` 书￥20.00   笔$30.00 本子$52 尺子￥0.5元 总费用:50.5元 `; str.replace(reg, function (v, p1) &#123; console.log(p1); &#125;);</code></pre></blockquote></li></ul><ol start="5"><li><p>s 标志</p><blockquote><ul><li>允许 <code>.</code> 匹配换行符<blockquote><p><code>.</code>：匹配除换行符之外的任何单个字符</p></blockquote></li></ul><pre><code>var str = `ab\n12`;var reg = /^ab.12$/s;console.log(reg.test(str)); // true</code></pre></blockquote></li><li><p>y 标志</p><blockquote><ul><li>执行<code>“粘性（sticky）”</code>搜索，匹配从目标字符串的当前位置开始</li><li>使用<code>g</code>模式匹配，会一直匹配，直到整个字符串都匹配完，而使用<code>y</code>模式后，如果从<code>lastIndex</code>开始匹配不成功，则后面有符合条件的也不匹配了</li><li><code>y</code>与<code>g</code>模式<strong>不能共存</strong>，只能二选一，同时<code>matchAll</code> 不能用 y 模式</li></ul><pre><code>var str = &quot;123b345ca&quot;;var reg = /\d&#123;2&#125;/g;console.log(reg.exec(str));console.log(reg.lastIndex); // 2console.log(reg.exec(str));console.log(reg.lastIndex); // 6console.log(reg.exec(str));console.log(reg.lastIndex); // 0</code></pre></blockquote><p>var reg &#x3D; &#x2F;\d{2}&#x2F;y;<br>console.log(reg.exec(str));<br>console.log(reg.lastIndex); &#x2F;&#x2F; 2<br>console.log(reg.exec(str)); &#x2F;&#x2F; null<br>console.log(reg.lastIndex); &#x2F;&#x2F; 0</p><blockquote><pre><code></code></pre></blockquote></li></ol><blockquote><ul><li>y 模式，主要用来提取要提取的内容是连续出现的，这样提取的效率会很高</li></ul><pre><code>var str =  &quot;相关的学习QQ群:234566,90011933,30211123加入到对应群里可以获得相应的指导。以下是大神QQ群：34222222&quot;;</code></pre></blockquote><p>var reg &#x3D; &#x2F;(\d+),?&#x2F;y;<br>reg.lastIndex &#x3D; 9;<br>var res &#x3D; reg.exec(str);<br>while (res) {<br>  console.log(res[1]);<br>  res &#x3D; reg.exec(str);<br>}</p><blockquote><pre><code></code></pre></blockquote><blockquote><ul><li>结合 match 使用</li><li>要指定<code>lastIndex</code>，不然直接从0开始匹配，如果在0处没找到，就不会再找了</li><li>从<code>lastIndex</code>开始匹配，如果找到了，就返回第一个完整的匹配及相关的捕获组。（与 exec 方法返回结果一样）；</li></ul><pre><code>var str =  &quot;相关的学习QQ群:234566,90011933,30211123加入到对应群里可以获得相应的指导。以下是大神QQ群：34222222&quot;;</code></pre></blockquote><p>var reg &#x3D; &#x2F;(\d+),?&#x2F;y;<br>reg.lastIndex &#x3D; 9;<br>var res1 &#x3D; str.match(reg);<br>var res2 &#x3D; str.match(reg);<br>var res3 &#x3D; str.match(reg);<br>var res4 &#x3D; str.match(reg);<br>console.log(res1);<br>console.log(res2);<br>console.log(res3);<br>console.log(res4);</p><blockquote><pre><code>&lt;img src=&quot;y标志.png&quot;&gt;</code></pre></blockquote><ol start="7"><li>u 标志<blockquote><ul><li>使用<code>unicode</code>码的模式进行匹配</li><li>使用<code>u</code>模式可以正确处理<code>4</code>个字节的<code>UTF-16</code>编码<br><strong>位、字节、字符：</strong></li><li>位（bit）：表示二进制位，位是计算机内部数据存储的最小单位，<code>11111111</code>是一个 8 位的二进制</li><li>字节（byte）：字节是计算机中数据处理的基本单位。计算机中以字节为单位存储和解释信息，规定一个字节由八个二进制位构成，即 1 个字节等于 8 个比特<code>（1Byte=8bit）</code>。八位二进制数最小为 <code>00000000</code>，最大为<code>11111111</code>，通常 1 个字节可以存入一个 ASCII 码，2 个字节可以存放一个汉字国标码</li><li>字符：字符（Character）计算机中使用的字母、数字、字和符号，比如<code>&#39;A&#39;、&#39;B&#39;、&#39;$&#39;、&#39;&amp;&#39;</code>等。 一般在英文状态下一个字母或字符占用一个字节，一个汉字用两个字节表示</li></ul></blockquote></li></ol><blockquote><p>Unicode 的编码</p><ul><li><code>Unicode</code> 为世界上所有字符都分配了一个唯一的数字编号，这个编号范围从<code>0x000000</code>到<code>0x10FFFF</code>（十六进制），有<code>110 多万</code></li><li>每个字符都有一个唯一的 <code>Unicode</code> 编号，这个编号一般写成 16 进制，</li><li>例如：“马” 的 <code>Unicode</code> 是 <code>9A6C</code></li><li>但 <code>Unicode</code> 本身只规定了每个字符的数字编号是多少，<strong>并没有规定这个编号如何存储</strong></li><li>中文对应的 Unicode 编码表：<a href="https://www.unicode.org/charts/PDF/U4E00.pdf">https://www.unicode.org/charts/PDF/U4E00.pdf</a></li><li>全世界所有字符对应的 Unicode 编码表：<a href="http://www.unicode.org/charts/">http://www.unicode.org/charts/</a></li></ul></blockquote><blockquote><p>Unicode 的编码的实现方式有三种 ：UTF-8、UTF-16、UTF-32</p><ul><li><code>UTF-8</code>编码中，一个英文和英文标点为一个字节，一个中文和中文标点为三个字节</li><li><code>UTF-16</code>编码中，一个英文字母字符或一个汉字字符存储都需要 2 个字节（<code>Unicode</code>扩展区的一些汉字存储需要<code>4</code>个字节）</li><li><code>UTF-32</code>编码中，世界上任何字符的存储都需要<code>4</code>个字节<blockquote><p>UTF 后的数字代表编码的最小单位，如<code>UTF-8</code>表示最小单位 <code>1</code>字节</p></blockquote></li><li><code>ASCII</code>码中，一个英文字母（不分大小写）为一个字节，一个中文汉字为两个字节</li></ul><pre><code>let str = &quot;𝒳&quot;; // 占两个编码单元var reg1 = /^.$/g;var reg2 = /^.&#123;2&#125;$/g;var reg3 = /^.$/gu;console.log(str.match(reg1)); // nullconsole.log(str.match(reg2)); //[&#39;𝒳&#39;]console.log(str.match(reg3)); //[&#39;𝒳&#39;]</code></pre></blockquote><blockquote><p>每个字符都有属性，但都需要结合 u 模式才有效。如</p><ul><li><code>L</code>属性表示是字母汉字，</li><li><code>P</code> 表示标点符号，</li><li><code>N</code>属性表示是数字，</li><li><code>Lu</code> 表示大写字母</li><li><code>Ll</code> 表示小写字母需要</li><li><code>Sc</code> 表示货币符号<code>￥</code>和<code>$</code><blockquote><p>常见的（一般类别）<code>General categories</code>，它们可匹配字母、数字、符号、标点符号、空格等等。<br>一般类别详见地址：<a href="https://unicode.org/reports/tr18/#General_Category_Property">https://unicode.org/reports/tr18/#General_Category_Property</a></p></blockquote></li><li>使用方法：</li></ul><pre><code>var str = &quot;￥IBC艾编程电话：12033322,网址:https://www.icodingedu.com,$ &quot;;var reg1 = /\p&#123;L&#125;+/gu; //字母和汉字var reg2 = /\p&#123;N&#125;+/gu; // 数字var reg3 = /\p&#123;P&#125;+/gu; // 标点答号var reg4 = /\p&#123;Lu&#125;+/gu; // 大写字母var reg5 = /\p&#123;Ll&#125;+/gu; // 小写字母var reg6 = /\p&#123;Sc&#125;/gu; // 匹配￥console.log(str.match(reg1));console.log(str.match(reg2));console.log(str.match(reg3));console.log(str.match(reg4));console.log(str.match(reg5));console.log(str.match(reg6));</code></pre></blockquote><blockquote><ul><li>字符也有<code>unicode</code>文字系统属性<code>Script = 文字系统</code>，下面是使用<code>\p&#123;sc=Han&#125;</code>获取中文字符<code>han</code>为中文系统，其他语言请查看<a href="http://www.unicode.org/standard/supported.html">http://www.unicode.org/standard/supported.html</a></li></ul><pre><code>var str = &quot;IBC艾编程官方网址：https://www.icodingedu.com&quot;;var reg = /\p&#123;sc=Han&#125;+/gu;console.log(str.match(reg)); // [&#39;艾编程官方网址&#39;]</code></pre></blockquote><blockquote><ul><li>常用于匹配中文的正则如下</li></ul><pre><code>var reg = /[\u4e00-\u9fff]+/g;var str = &quot;IBC艾编程官方网址：https://www.icodingedu.com&quot;;console.log(str.match(reg)); // [&#39;艾编程官方网址&#39;]</code></pre></blockquote><h3 id="八、正则相关方法"><a href="#八、正则相关方法" class="headerlink" title="八、正则相关方法"></a>八、正则相关方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>test()</td><td>测试某个字符串是否匹配正则表达式，匹配成功返回 true，否则返回 false</td></tr><tr><td>exec()</td><td>根据正则表达式，在字符串中进行查找，返回结果为 null 或数组</td></tr></tbody></table><blockquote><blockquote><p>test 方法，前面我们一直在用，这里就不介绍了</p></blockquote></blockquote><ol><li>exec 方法<blockquote><ul><li>在使用<code>exec</code>方法时，如果匹配失败，返回<code>null</code>，同时将正则表达式的<code>lastIndex</code>属性值重置为<code>0</code></li><li>如果匹配成功，则会返回一个数组，数组的第一项存放匹配成功的第一组文本，同时更新正则表达式的<code>lastIndex</code>属性值。</li><li>如果正则中使用了<code>g</code>标志，则<code>lastIndex</code>用来指定下一次匹配的起始索引值，</li><li>如果没有使用<code>g</code>标志，则一直返回的都是<code>lastIndex=0</code></li><li>如果给正则表达式加括号，就会形成捕获组</li></ul></blockquote></li></ol><p><strong>数组中对应项</strong></p><table><thead><tr><th>数组对应项</th><th>说明</th></tr></thead><tbody><tr><td>第一项</td><td>完全匹配成功的文本</td></tr><tr><td>第二项 … 第 n 项</td><td>每项对应一个匹配的捕获组</td></tr><tr><td>index</td><td>匹配成功的字符在原始字符串中的索引位置</td></tr><tr><td>input</td><td>匹配的原始字符串</td></tr><tr><td>groups</td><td>捕获组对象，其键是捕获组名，值是捕获组（值）。如果没有定义命名捕获组，则<code>groups</code>的值为<code>undefined</code></td></tr></tbody></table><blockquote><blockquote><p>exec 方法，默认只会输出第一次匹配成功的结果，如果后续还有匹配成功的结果，将不会输出</p></blockquote></blockquote><blockquote><pre><code>var reg = /\d+[a-z]/;var str = &quot;ab23c345sa32&quot;;var arr = reg.exec(str);console.log(arr); // 返回结果见下图console.log(reg.lastIndex); // 0   下次匹配的起始索引值</code></pre><img src="exec方法-不加括号.png"></blockquote><blockquote><pre><code>var reg = /\d+[a-z]/;var str = &quot;ab23c345sa32&quot;;var arr = reg.exec(str);console.log(arr); // 返回结果见下图console.log(reg.lastIndex); // 0   下次匹配的起始索引值</code></pre><img src="exec方法-加括号.png"></blockquote><blockquote><pre><code>// 输出匹配成功的数组中的每一项的值console.log(arr[0]); // 拿到匹配成功的字符console.log(arr[1]); // 捕获组1console.log(arr[2]); // 捕获组1console.log(arr.index); // 匹配成功的字符串在原数组中的索引</code></pre></blockquote><ol start="2"><li><p>exec() 方法的逐条遍历</p><blockquote><ul><li>当执行正则的 exec 方法时，如果正则中用g 修饰符，则 <code>RegExp</code> 对象是有状态的，也就是他会将上次成功匹配后的位置记录在他的<code>lastIndex</code>属性中</li><li>利用上面这个特性，我们可以对单个字符串中的多次匹配结果进行逐条的遍历</li></ul><pre><code>var reg = /\d+/g;var str = &quot;12ab23c345&quot;;var result1 = reg.exec(str);console.log(reg.lastIndex); // 2</code></pre></blockquote><p>var result2 &#x3D; reg.exec(str);<br>console.log(reg.lastIndex); &#x2F;&#x2F; 6</p><blockquote></blockquote><p>var result3 &#x3D; reg.exec(str);<br>console.log(reg.lastIndex); &#x2F;&#x2F; 10</p><blockquote></blockquote><p>var result4 &#x3D; reg.exec(str);<br>console.log(reg.lastIndex); &#x2F;&#x2F; 0</p><blockquote></blockquote><p>console.log(result1, result2, result3, result4);<br>&#x2F;&#x2F;或者利用 while 循环来实现</p><blockquote><p>&#x2F;**</p><ul><li>search 将字符串中符合正则的字符组成数组输出</li><li>str 要搜索的字符串</li><li>reg 匹配的正则表达式<br>*&#x2F;<br>function search(str, reg) {<br>var result &#x3D; [];<br>var data &#x3D; reg.exec(str);<br>while (data) {<br> result.push(data[0]);<br> data &#x3D; reg.exec(str);<br>}<br>return result;<br>}</li></ul></blockquote><p>&#x2F;&#x2F; 应用<br>var reg &#x3D; &#x2F;\d+&#x2F;g;<br>var str &#x3D; “12ab23c345”;<br>console.log(search(str, reg)); &#x2F;&#x2F; [‘12’, ‘23’, ‘345’]</p><blockquote><pre><code></code></pre></blockquote></li><li><p>注意事项</p><blockquote><ul><li>如果正则表达式在调用<code>exec</code>方法时，正则使用了<code>g</code>模式，则不要用<strong>同一个正则匹配多个字符串</strong></li><li>如果需要，则要修正<code>lastIndex</code>的值：<code>reg.lastIndex = 0</code></li><li>因为第二个字符串会从上一个字符串的结束位置开始找</li></ul></blockquote></li></ol><blockquote><pre><code>var reg = /(\d+)([a-z])/g;var str1 = &quot;ab23c345sa32&quot;;var str2 = &quot;12ac345sa32&quot;;console.log(reg.exec(str1));console.log(reg.lastIndex);// 修正 lastIndex值reg.lastIndex = 0;console.log(reg.exec(str2));console.log(reg.lastIndex);</code></pre></blockquote><blockquote><blockquote><p>温馨提示</p></blockquote><ul><li>在实际开发中，我们很少用到 <code>exec</code> 方法，你可以理解为 <code>exec</code> 为正则表达式的原始方法</li><li>许多其它的正则表达式方法会在内部调用<code>exec()</code>，包括一些字符串的方法</li></ul></blockquote><h3 id="九、字符串相关方法"><a href="#九、字符串相关方法" class="headerlink" title="九、字符串相关方法"></a>九、字符串相关方法</h3><blockquote><p>在字符串中有以下方法可以结合正则表达式来使用</p></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>search()</td><td>在字符串中根据正则表达式进行查找匹配，返回首次匹配到的位置索引，测试不到则返回<code>-1</code></td></tr><tr><td>match()</td><td>在字符串中根据正则表达式进行查找匹配，返回一个数组，找不到则返回 <code>null</code></td></tr><tr><td>matchAll</td><td>方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。</td></tr><tr><td>replace()</td><td>使用替换字符串替换掉匹配到的子字符串，可以使用正则表达式</td></tr><tr><td>split()</td><td>分隔字符串为数组，可以使用正则表达式</td></tr></tbody></table><ol><li>search 方法<blockquote><ul><li>在字符串中根据正则表达式进行查找匹配，返回<strong>首次</strong>匹配到的位置索引，测试不到则返回 <code>-1</code></li><li>如果传入的参数不是正则表达式，也会将其转换为正则表达式对象来处理</li><li><code>str.search(regexp);</code></li></ul></blockquote></li></ol><blockquote><ul><li>search 方法检索 love 在字符串中的位置</li></ul><pre><code>var str = &quot;I love you&quot;;//   var reg = /love/;var reg = &quot;love&quot;;console.log(str.search(reg)); //2</code></pre></blockquote><blockquote><ul><li>search 方法检索字符串中 <code>icoding</code> 出现的位置，不分大小写</li></ul><pre><code>var str = &quot;IcodingEdu&quot;;var reg1 = /icoding/i;var reg2 = &quot;icoding&quot;;console.log(str.search(reg1)); //0console.log(str.search(reg2)); //-1</code></pre><ul><li>字符串不能做到不分大小写<blockquote><p>括号里既可以用字符串也可以用正则表达式，但正则表达式更加全能</p></blockquote></li></ul></blockquote><ol start="2"><li>match 方法<blockquote><ul><li>查找字符串中与正则表达式匹配的字符，返回结果为一个数组，找不到返回<code>null</code></li><li>如果正则使用<code>g</code>标志，则返回与正则表达式匹配的所有结果，但不会返回捕获组</li><li>如果正则未使用<code>g</code>标志，只返回第一个完整的匹配及相关的捕获组。（与<code>exec</code>方法返回结果一样）</li><li><code>str.match(regexp);</code></li></ul></blockquote></li></ol><blockquote><ul><li>提取出字符串中所有的 a</li></ul><pre><code>var str = &quot;aabacaaadae&quot;;var reg1 = /a+/;var reg2 = /a+/g;console.log(str.match(reg1)); //[&#39;aa&#39;, index: 0, input: &#39;aabacaaadae&#39;, groups: undefined]console.log(str.match(reg2)); //[&quot;aa&quot;,&quot;a&quot;,&quot;aaa&quot;,&quot;a&quot;]</code></pre></blockquote><blockquote><ul><li>提取颜色值中的数字</li></ul><pre><code>var str = &quot;rbga(23,3,44,0.1)&quot;;var reg = /[\d]&#123;1,3&#125;(\.\d)?/g;console.log(str.match(reg)); //[&#39;23&#39;, &#39;3&#39;, &#39;44&#39;, &#39;0.1&#39;]</code></pre></blockquote><ol start="3"><li>matchAll 方法<blockquote><ul><li><code>matchAll()</code>方法返回一个包含<strong>所有</strong>匹配正则表达式的结果及分组捕获组的<strong>迭代器</strong>。</li><li>正则对象<strong>必须</strong>是设置了全局模式<code>g</code>的形式，否则会抛出异常<code>TypeError</code></li><li>返回值一个迭代器（<strong>不可重用</strong>，结果耗尽需要再次调用方法，获取一个新的迭代器）<blockquote><p>matchAll 方法还存在浏览器的兼容问题</p></blockquote></li><li>在没有<code>matchAll</code>之前，通过在循环中调用<code>regexp.exec()</code> 来获取所有匹配项信息（<code>regexp</code> 需使用<code>/g</code>标志）</li><li><code>str.matchAll(regexp);</code></li></ul></blockquote></li></ol><blockquote><ul><li>该方法得到的是迭代器，因此需要用<code>for...of</code>拿到里面的值</li></ul><pre><code>var str = &quot;12ab34scw563c&quot;;var reg = /\d+[a-z]/g;var matches = str.matchAll(reg); //得到的是迭代器console.log(matches);//可以用for...of拿到里面的值for (var item of matches) &#123;  console.log(item);&#125;</code></pre><img src="matchAll-1.png"></blockquote><blockquote><ul><li>如果想得到表达式结果的一部分，就给那部分加括号</li></ul><pre><code>var str = &quot;12ab34scw563c&quot;;var reg = /(\d+)[a-z]/g;var matches = str.matchAll(reg); //得到的是迭代器//可以用for...of拿到里面的值for (var item of matches) &#123;  console.log(item);  console.log(item[1]);&#125;</code></pre><img src="matchAll-2.png"></blockquote><ol start="4"><li>replace 方法<blockquote><ul><li>使用替换字符串替换掉匹配到的子字符串</li><li><strong>第一个参数</strong>可以是一个正则表达式，也可以是一个字符串</li><li><strong>第二个参数</strong>，可以是一个字符串，也可以是一个<strong>函数</strong>，这个函数用来创建新子字符串，该函数的返回值将替换掉第一个参数匹配到的结果</li><li><code>str.replace(regexp|substr, newSubStr|function)</code></li></ul></blockquote></li></ol><blockquote><ul><li>&#x2F;&#x2F;将字符串中的字母全部替换成*</li></ul><pre><code>var str = &quot;abc123fe4swfe56sw342&quot;;var reg = /[^0-9]/g;console.log(str.replace(reg, &quot;*&quot;)); //***123**4****56**342</code></pre></blockquote><blockquote><ul><li>脏字过滤，将字符串中的所有垃圾，替换成*号</li></ul><pre><code>var str = &quot;垃圾还是垃圾，把垃圾&quot;;console.log(str.replace(/垃圾/g, &quot;*&quot;)); //*还是*，把*</code></pre><blockquote><p>replace 方法与原子组相关的结合，还有第二个参数为函数的情况，后面讲原子组是再细讲解</p></blockquote></blockquote><ol start="5"><li>split 方法<blockquote><ul><li>使用正则表达式或一个固定的字符串来分隔一个字符串，并将分隔后的子字符串存储到数组中</li><li>返回结果为分隔后的字符串形成的数组</li></ul><pre><code>str.split([separator[, limit]])// separator 分隔符// limit  整数，限定返回的分割片段数量`</code></pre></blockquote></li></ol><blockquote><ul><li>用数字来分隔字符串</li></ul><pre><code>var str = &quot;ab12de34swfe4fe6&quot;;var result = str.split(/\d+/);console.log(result); // [&#39;ab&#39;, &#39;de&#39;, &#39;swfe&#39;, &#39;fe&#39;, &#39;&#39;]</code></pre></blockquote><blockquote><ul><li>用<code>/</code>或<code>-</code>来分隔日期</li></ul><pre><code>var str1 = &quot;2022/09/08&quot;;var str2 = &quot;2022-07-08&quot;;console.log(str1.split(/[\-/]/)); // [&#39;2022&#39;, &#39;09&#39;, &#39;08&#39;]console.log(str2.split(/[\-/]/)); // [&#39;2022&#39;, &#39;07&#39;, &#39;08&#39;]// 分隔后，我只想要年份和月份console.log(str1.split(/[\-/]/, 2)); // [&#39;2022&#39;, &#39;09&#39;]</code></pre></blockquote><h3 id="十、原子组"><a href="#十、原子组" class="headerlink" title="十、原子组"></a>十、原子组</h3><blockquote><ul><li>在正则中我们可以利用<code>()</code>对匹配项进行分组，并能记住该匹配项等。</li><li><code>()</code>中的内容，我们也称为子表达式</li><li><strong>捕获</strong>：在正则表达式中，子表达式匹配到相应的内容时，系统会自动捕获这个行为，然后将子表达式匹配到的内容放入系统的缓存区中。我们把这个过程称之为<strong>“捕获”</strong></li></ul></blockquote><table><thead><tr><th>字符集</th><th>说明</th></tr></thead><tbody><tr><td><code>(x)</code></td><td>捕获组 匹配<code>x</code>并且记住匹配项。其中括号被称为<strong>捕获括号</strong>。正则中的 <code>\1、\2、... \n</code>分别表示<code>第一个、第二个、... 第n个</code>被捕获括号匹配的子字符串（也称<strong>反向引用</strong>）；在正则表达式的替换环节，即<code>str.replace(/(..)(...)/,&#39;$2 $1)</code>中，<code>$1</code>和<code>$2</code>分别表示第一个和第二被捕获括号匹配的子字符串；在正则表达式替换环节,<code>$&amp;</code>表示整个用于匹配的原字符串</td></tr><tr><td><code>(?:x)</code></td><td><strong>非捕获组</strong>匹配<code>x</code>但是不记住匹配项。这种括号叫作<strong>非捕获括号</strong>，使得你能够定义与正则表达式运算符一起使用的子表达式</td></tr><tr><td><code>(?&lt;name&gt;x)</code></td><td><strong>具名捕获组</strong>；匹配<code>x</code>并将其存储在返回的匹配项的<code>groups</code>属性中，该属性位于<code>&lt;name&gt;</code>指定的名称下</td></tr><tr><td><code>$反引号</code></td><td><code>$反引号</code>匹配成功的内容的左边</td></tr><tr><td><code>$&#39;</code></td><td><code>$单引号</code>匹配成功的内容的右边</td></tr></tbody></table><h4 id="x-捕获括号"><a href="#x-捕获括号" class="headerlink" title="(x) 捕获括号"></a>(x) 捕获括号</h4><blockquote><ul><li><code>(x)</code>用来表示捕获组，匹配<code>x</code>并且记住匹配项</li></ul></blockquote><ol><li>反向引用<blockquote><ul><li>正则中的<code>\1、\2、... \n</code>分别表示<code>第一个、第二个、... 第n个</code>被捕获括号匹配的<strong>子字符串</strong></li></ul></blockquote></li></ol><ul><li>案例： 匹配日期格式是否是以<code>-</code>或<code>/</code>相连，如：<code>2022-09-09</code>或<code>2022/09/08</code><blockquote><ul><li>上一节我们使用<code>[\-/]</code>来匹配<code>-</code>和<code>/</code>，但不能保证前后使用的符号相同</li></ul><pre><code>var dateString1 = &quot;2022-2/08&quot;;var reg = /^\d&#123;4&#125;([-/])\d&#123;1,2&#125;([-/])\d&#123;1,2&#125;$/;console.log(reg.test(dateString1)); //true</code></pre></blockquote></li></ul><blockquote><ul><li>在这里，可使用<code>\1</code>替换第二个<code>([-/])</code>，就可确保前后符号一样</li></ul><pre><code>var dateString1 = &quot;2022-2/08&quot;;var dateString2 = &quot;2022-2-08&quot;;var reg = /^\d&#123;4&#125;([-/])\d&#123;1,2&#125;\1\d&#123;1,2&#125;$/;console.log(reg.test(dateString1)); //falseconsole.log(reg.test(dateString2)); //true</code></pre></blockquote><ol start="2"><li>替换环节<blockquote><ul><li>在正则表达式的替换环节，即<code>str.replace(/(..)(...)/,&#39;$2 $1)</code>中，<code>$1</code>和<code>$2</code>分别表示第一个和第二被捕获括号匹配的子字符串</li></ul></blockquote></li></ol><ul><li><p>案例： 将日期2022-09-08 倒过来展示08-09-2022</p><blockquote><pre><code>var dateString = &quot;2022-09-08&quot;;var reg = /^(\d&#123;4&#125;)([\-/])(\d&#123;1,2&#125;)\2(\d&#123;1,2&#125;)$/;var rep = dateString.replace(reg, &quot;$4$2$3$2$1&quot;);console.log(rep); //08-09-2022</code></pre></blockquote></li><li><p>案例： 将(010)12398765 更改变010-12398765</p><blockquote><pre><code>var str = &quot;(010)12398765&quot;;var reg = /^\((\d&#123;3,4&#125;)\)(\d&#123;8&#125;)$/g;var rep = str.replace(reg, &quot;$1$2&quot;);console.log(rep); //01012398765</code></pre></blockquote></li></ul><blockquote><ul><li>在正则表达式替换环节，<code>$&amp;</code>表示整个用于匹配的<strong>原字符串</strong></li></ul></blockquote><ul><li>案例：将字符串中的艾编程添加链接<blockquote><blockquote><p><code>$&amp;</code>使得a标签中的文字和匹配文字一致</p></blockquote></blockquote></li></ul><blockquote><pre><code>&lt;div class=&quot;info&quot;&gt;  艾编程是在大数据人工智能时代高速发展的今天成立的一家以提供各行业商业项目研发解决方案为核心的在线教育学习平台。&lt;/div&gt;&lt;script&gt;  var info = document.querySelector(&quot;.info&quot;);  var inner = info.innerHTML;  var reg = /艾编程/;  info.innerHTML = inner.replace(    reg,    &quot;&lt;a href=&#39;http://www.icodingedu.com&#39;&gt;$&amp;&lt;/a&gt;&quot;  );&lt;/script&gt;</code></pre></blockquote><blockquote><blockquote><p>注意： 在数捕获括号时，从左往右数<code>(</code>括号个数</p></blockquote><ul><li>第一个<code>(</code>就代表<code>$1</code></li></ul><pre><code>var str = &quot;12abs#B@12abs12#B@#B@&quot;;var reg = /^((\d+)[a-z]+)((#)([A-Z]@))\1\2\3\4\5$/;console.log(reg.test(str));// \1 ((\d+)[a-z]+)// \2 (\d+)// \3  ((#)([A-Z]@))  #B@// \4   (#)// \5  ([A-Z]@)</code></pre></blockquote><ol start="3"><li>替换环节，第二个参数为函数<blockquote><ul><li>在正则表达式替换环节，<code>replace</code>方法的第二个参数如果是一个函数，则函数中参数详情如下：</li><li><code>str.replace(regexp,function(v,p1,p2,index,input,groups))</code></li><li>第一个参数v是匹配成功的那个字符串</li><li>参数p1,p2, …依次为第一个和第二被捕获括号匹配的子字符串;</li><li>index 为当前匹配成功项的开始索引</li><li>input 为原始匹配的字符串</li><li>groups 捕获组对象（具名捕获组组成的一个对象）</li></ul><pre><code>var str = &quot;12aw332sewe244sw&quot;;var reg = /(?&lt;number&gt;\d+)/g;str.replace(reg, function (v, p1, index, s, groups) &#123;  console.log(v, p1, index, s, groups);  console.log(groups.number);&#125;);</code></pre><img src="替换环节.png"></blockquote></li></ol><ul><li>不设捕获组时<blockquote><ul><li><code>str.replace(regexp,function(v,p1,p2,index,input,groups))</code>中的p1就会表示index的值，p2表示inputs的值，以此类推</li></ul><pre><code>var str = &quot;12aw332sewe244sw&quot;;var reg = /\d+[a-z]/g;str.replace(reg, function (v, p1, index, input, groups) &#123;console.log(v, p1, index, input, groups);&#125;);//12a 0 12aw332sewe244sw undefined undefined//332s 4 12aw332sewe244sw undefined undefined//244s 11 12aw332sewe244sw undefined undefined</code></pre></blockquote></li></ul><h4 id="x-非捕获组"><a href="#x-非捕获组" class="headerlink" title="(?:x)非捕获组"></a><code>(?:x)</code>非捕获组</h4><blockquote><ul><li>非捕获组 匹配<code>x</code>但是<strong>不记住匹配项</strong>。这种括号叫作非捕获括号</li><li>使得你能够定义与正则表达式运算符一起使用的子表达式</li></ul><pre><code>var str1 = &quot;ucaaauca&quot;;var reg1 = /uca+/g; // 表示a出现1次或多次var reg2 = /(uca)+/g; // 表示uca整体出现1次或多次console.log(str1.match(reg1));console.log(str1.match(reg2));</code></pre></blockquote><blockquote><ul><li>如果不想记住<code>()</code>中的匹配项，则可以用<code>?:</code></li></ul><pre><code>var str1 = &quot;ucaaauca&quot;;var reg1 = /(uca)+/g; // 表示uca整体出现1次或多次var reg2 = /(?:uca)+/g; // 表示uca整体出现1次或多次str1.replace(reg1, function (v, p1) &#123;  console.log(p1);&#125;);</code></pre></blockquote><p>str1.replace(reg2, function (v, p1) {<br>  console.log(p1); &#x2F;&#x2F;并没有捕获组内容，打印内容为捕获成功字符串的起始索引<br>});</p><blockquote><pre><code></code></pre></blockquote><h4 id="x-具名捕获组"><a href="#x-具名捕获组" class="headerlink" title="(?&lt;name&gt;x)具名捕获组"></a><code>(?&lt;name&gt;x)</code>具名捕获组</h4><blockquote><ul><li>匹配 “x” 并将其存储在返回的匹配项的<code>groups</code>属性中，该属性位于<code>&lt;name&gt;</code>指定的名称下</li></ul></blockquote><blockquote><pre><code>var str = &quot;abc123def576&quot;;var reg = /[a-z]+(?&lt;number&gt;\d+)/g;var number = []; // 用来存放结果数据var arr = reg.exec(str);while (arr) &#123;  number.push(arr.groups.number); // 匹配的每一项的数字存到数组中  arr = reg.exec(str);&#125;console.log(number);</code></pre></blockquote><blockquote><ul><li><strong>在正则表达式中，引用具名捕获组</strong>，可以使用<code>\k&lt;name&gt;</code>的写法，当然之前的<code>\n（n 是一个整数）</code>的写法也是可行的</li></ul><pre><code>var str = &quot;a111222&quot;;var reg = /[a-z](?&lt;number&gt;1)\k&lt;number&gt;\1/g;console.log(str.match(reg)); // a111</code></pre></blockquote><blockquote><ul><li>在 <code>replace</code> 方法中，使用<code>$&lt;name&gt;</code>引用具名组</li></ul><pre><code>var str = &quot;a111222&quot;;var reg = /[a-z](?&lt;number&gt;1)\k&lt;number&gt;\1/g;console.log(str.replace(reg, &quot;*$&lt;number&gt;*&quot;)); // *1*222</code></pre></blockquote><h4 id="表示匹配成功的内容的左边"><a href="#表示匹配成功的内容的左边" class="headerlink" title="&#96;$&#96;&#96;表示匹配成功的内容的左边"></a>&#96;$&#96;&#96;表示匹配成功的内容的<strong>左边</strong></h4><blockquote><pre><code>var str = &quot;abcA123&quot;;var reg = /\A/;var res = str.replace(reg, &quot;$`&quot;);console.log(res); // abcabc123</code></pre></blockquote><h4 id="’-表示匹配成功的内容的右边"><a href="#’-表示匹配成功的内容的右边" class="headerlink" title="$’ 表示匹配成功的内容的右边"></a>$’ 表示匹配成功的内容的右边</h4><blockquote><pre><code>var str = &quot;abcA123&quot;;var reg = /\A/;var res = str.replace(reg, &quot;$&#39;&quot;);console.log(res); // abc123123</code></pre></blockquote><h3 id="十一、？禁止贪婪"><a href="#十一、？禁止贪婪" class="headerlink" title="十一、？禁止贪婪"></a>十一、<code>？</code>禁止贪婪</h3><blockquote><p><code>？</code>如果紧跟在任何量词<code>\*、 +、? 或&#123;&#125;</code>的后面，将会使量词变为<strong>非贪婪</strong>（匹配尽量少的字符），和缺省使用的贪婪模式（匹配尽可能多的字符）正好相反</p><blockquote><p>匹配尽量少的字符，但并不等于只匹配一个</p></blockquote></blockquote><blockquote><pre><code>var str = &quot;abcddddcdddd&quot;;var reg = /cd+?/g;var res = str.match(reg);console.log(res); // [&#39;cd&#39;, &#39;cd&#39;]</code></pre></blockquote><blockquote><pre><code>var str = &quot;abdacd&quot;;var reg1 = /\w+d/g;var reg2 = /\w+?d/g;console.log(str.match(reg1));//[&#39;abdacd&#39;]console.log(str.match(reg2));//[&#39;abd&#39;,&#39;acd&#39;]</code></pre></blockquote><ul><li><p>拿到捕获组内容的方法</p><blockquote><ul><li>字符串相关方法：<code>matchAll</code>、<code>replace</code>(没有意义)</li><li>正则相关方法：<code>exec方法</code>+while循环</li></ul></blockquote></li><li><p>案例：匹配出 span 标签中的内容</p><blockquote><pre><code>&lt;div class=&quot;box&quot;&gt; &lt;span&gt;清心&lt;/span&gt; &lt;span&gt;艾编程&lt;/span&gt; &lt;span&gt;前端&lt;/span&gt;&lt;/div&gt;&lt;script&gt;var box = document.querySelector(&quot;.box&quot;);var inner = box.innerHTML;var reg = /&lt;span&gt;([\s\S]+?)&lt;\/span&gt;/g;var result = [];</code></pre></blockquote><p>&#x2F;&#x2F;match方法<br>var matches &#x3D; inner.matchAll(reg);<br>for (var item of matches) {<br>result.push(item[1]);<br>}<br>console.log(result);&#x2F;&#x2F; [‘清心’, ‘艾编程’, ‘前端’]</p><blockquote></blockquote><p>&#x2F;&#x2F;exec方法<br>var item &#x3D; reg.exec(inner);<br>while (item) {<br>result.push(item[1]);<br>item &#x3D; reg.exec(inner);<br>}<br>console.log(result);&#x2F;&#x2F; [‘清心’, ‘艾编程’, ‘前端’]</p><blockquote><p></script></p><pre><code></code></pre></blockquote></li><li><p>案例：匹配对应的标签</p><blockquote><pre><code>&lt;div class=&quot;box&quot;&gt; 我秒是我 &lt;p&gt;艾编程&lt;/p&gt; &lt;h3&gt;清心老师&lt;/h3&gt; &lt;div&gt;前端内容&lt;/div&gt; &lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;script&gt;var box = document.querySelector(&quot;.box&quot;);var innerHTML = box.innerHTML;var reg = /&lt;([a-z]+\d?)&gt;[\s\S]*?&lt;\/\1&gt;/gi;var res = innerHTML.match(reg);console.log(res);&lt;/script&gt;</code></pre></blockquote></li></ul><h3 id="十二、断言匹配"><a href="#十二、断言匹配" class="headerlink" title="十二、断言匹配"></a>十二、断言匹配</h3><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>x(?&#x3D;y)</td><td>先行断言：x的右边被y紧跟随之时匹配x</td></tr><tr><td>(?&lt;&#x3D;y)x</td><td>后行断言：x 的左边紧跟随y时，匹配x</td></tr><tr><td>x(?!y)</td><td>先行否定断言： x右边没有被y紧跟随之时匹配x</td></tr><tr><td>(?&lt;!y)x</td><td>后行否定断言： x的左边没有被y紧随时匹配x</td></tr></tbody></table><h4 id="x-y"><a href="#x-y" class="headerlink" title="x(?&#x3D;y)"></a>x(?&#x3D;y)</h4><blockquote><ul><li>先行断言（正向预查、正预测、前瞻）：<code>x</code>的右边被<code>y</code><strong>紧跟随之时</strong>匹配<code>x</code></li><li><code>y</code><strong>不是</strong>匹配结果的一部分</li><li>先行断言是<strong>从左往右</strong>看</li></ul></blockquote><ol><li>提取 x 字符后面紧跟随 xxx 字符的 x 字符<blockquote><ul><li>将字符串中a后面紧跟随c的a替换成*号</li></ul><pre><code>var str = &quot;abcacaecac&quot;;var reg = /a(?=c)/g;str = str.replace(reg, &quot;*&quot;);console.log(str); // abc*caec*c</code></pre></blockquote></li></ol><blockquote><ul><li>将字符串中<code>web前端</code>或<code>java</code>后面紧跟随<code>视频</code>的 web 前端和 java 变成红色 （字母不区分大小写）</li></ul><pre><code>&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  var str =    &quot;艾编程教育提供相关Web前端、java教程，相关视频地址：web前端视频，Java视频等&quot;;  var reg = /(?:web前端|java)(?=视频)/gi;  //box.innerHTML = str.replace(reg, &quot;&lt;span style=&#39;color:red&#39;&gt;$&amp;&lt;/span&gt;&quot;);  box.innerHTML = str.replace(reg, function (v) &#123;    return &quot;&lt;span style=&#39;color:red&#39;&gt;&quot; + v + &quot;&lt;/span&gt;&quot;;  &#125;);&lt;/script&gt;</code></pre></blockquote><ol start="2"><li><p>理解<code>x(?=y)(?=z)</code>匹配</p><blockquote><ul><li>这是不成立的：<code>x(?=y)(?=z)</code>表示<code>x</code>的后面（右边）要紧跟随着<code>y</code>，同时又要紧跟随着<code>z</code></li><li>只有一种情况下成立：y&#x3D;z时</li></ul><pre><code>var reg = /1(?=a)(?=A)/g; //这种情况肯定是不成立的var str = &quot;1aA&quot;;console.log(str.match(reg)); // null</code></pre></blockquote><p>&#x2F;&#x2F; 添加i标志，也就是对a和A不区分大小写时，也就成立<br>var reg &#x3D; &#x2F;1(?&#x3D;a)(?&#x3D;A)&#x2F;gi;<br>var str &#x3D; “1a”;<br>console.log(str.match(reg)); &#x2F;&#x2F; [‘1’]</p><blockquote><pre><code></code></pre></blockquote></li><li><p>理解<code>x((?=y)|(?=z))</code></p><blockquote><ul><li>如果要表示<code>x</code>的后面（右边）要紧跟随着<code>y</code>或紧跟随着<code>z</code></li></ul></blockquote></li></ol><ul><li>匹配 a 后面紧跟 1 或紧跟随 2 的 a，替换成 * 号<blockquote><pre><code>var reg = /a((?=1)|(?=2))/g;console.log(&quot;a1ab&quot;.replace(reg, &quot;*&quot;)); // *1abconsole.log(&quot;a2ac&quot;.replace(reg, &quot;*&quot;)); // *2acconsole.log(&quot;a3ad&quot;.replace(reg, &quot;*&quot;)); // a3ad</code></pre></blockquote></li></ul><ol start="4"><li>理解 <code>/(?=.*y)(?=.*z)/</code> 匹配<blockquote><ul><li><code>/(?=.*y)(?=.*z)/</code> 表示字符串中必须同时出现 <code>y</code> 和 <code>z</code> 字符</li></ul></blockquote></li></ol><ul><li><p>某个字符串中必需出现 艾编程</p><blockquote><pre><code>var reg = /艾编程/;console.log(reg.test(&quot;艾编程教育&quot;)); //trueconsole.log(reg.test(&quot;西安艾编程&quot;)); //trueconsole.log(reg.test(&quot;艾编程&quot;)); //true</code></pre></blockquote></li><li><p>匹配的字符串中必需包含：艾编程、前端 这两组词</p><blockquote><ul><li>由于不需要跟在谁后面，所以不写x</li></ul><pre><code>var reg = /(?=.*艾编程)(?=.*前端)/;console.log(reg.test(&quot;艾编程有前端课程&quot;));//trueconsole.log(&quot;艾编程有前端课程&quot;.match(reg)); //[&quot;&quot;]</code></pre></blockquote><p>console.log(reg.test(“前端方面的课程艾编程有”));&#x2F;&#x2F;true<br>console.log(“前端方面的课程艾编程有”.match(reg)); &#x2F;&#x2F;[“”]</p><blockquote></blockquote><p>console.log(reg.test(“艾编程有web端”)); &#x2F;&#x2F;false<br>console.log(“艾编程有web端”.match(reg)); &#x2F;&#x2F;null</p><blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><blockquote><p>注意，同时限制长度和所包含内容时</p></blockquote><ul><li><code>/(?=.*y)(?=.*z)/</code>匹配到的字符是<code>&quot;&quot;</code>，所以不用把这个字符算进去</li></ul></blockquote><ul><li><p>字符串的长度为 8 位，但必需包含：艾编程、前端 这两组词</p><blockquote><pre><code>// 某个字符串中必需包含 艾编程、前端var reg = /^(?=.*艾编程)(?=.*前端).&#123;8&#125;$/g;console.log(reg.test(&quot;艾编程有前端课程&quot;)); // trueconsole.log(reg.test(&quot;艾编程有web前端&quot;)); // falseconsole.log(reg.test(&quot;艾编程前端&quot;)); // true</code></pre></blockquote><p>var str1 &#x3D; “艾编程有前端课程”;<br>var str2 &#x3D; “艾编程有web前端”;<br>var str3 &#x3D; “艾编程前端”;<br>console.log(str1.match(reg)); &#x2F;&#x2F;[‘艾编程有前端课程’]<br>console.log(str2.match(reg)); &#x2F;&#x2F; null<br>console.log(str3.match(reg)); &#x2F;&#x2F; null</p><blockquote><pre><code></code></pre></blockquote></li><li><p>匹配的字符串长度为6-8位的，但必须包含至少一个大写字母、一个小写字母和一个数字，同时不能有空白字符</p><blockquote><ul><li><code>\S</code>：匹配任意不是空白符的字符</li></ul><pre><code>var reg = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)\S&#123;6,8&#125;$/;console.log(reg.test(&quot;A123q222&quot;)); // trueconsole.log(reg.test(&quot;2Wswee222&quot;)); // falseconsole.log(reg.test(&quot;sww1A&quot;)); // falseconsole.log(reg.test(&quot;sww1A2&quot;)); // true</code></pre></blockquote></li></ul><h4 id=""><a href="#" class="headerlink" title="(?&lt;&#x3D;y)x"></a>(?&lt;&#x3D;y)x</h4><blockquote><ul><li>后行断言：<code>x</code>的左边紧跟随<code>y</code>时，匹配<code>x</code></li><li><code>y</code>不是匹配结果的一部分</li><li>后行断言是<strong>从右往左看</strong>（先看右边，再看左边）</li></ul></blockquote><ol><li>提取 x 前面（左边）紧跟随 xxx 字符的 x</li></ol><ul><li><p>获取数字前面（左边）紧跟随字母的数字</p><blockquote><pre><code>var str = &quot;a12bc43bc32&quot;;var reg = /(?&lt;=\w)\d+/g;console.log(str.match(reg)); // [&#39;12&#39;, &#39;43&#39;, &#39;32&#39;]</code></pre></blockquote></li><li><p>将 11 位电话号码的后 4 位替换成 ****号</p><blockquote><pre><code>// 将电话号码的后四位改变****var tel = &quot;清心电话:12323457612&quot;;var reg = /(?&lt;=\d&#123;7&#125;)\d&#123;4&#125;/g;var res = tel.replace(reg, &quot;****&quot;);console.log(res); // 清心电话:1232345****</code></pre></blockquote></li><li><p>将视频的前面是前端的”视频”替换成”视频教程”</p><blockquote><pre><code>var reg = /(?&lt;=前端)视频/g;var str = &quot;艾编程前端视频,java视频&quot;;console.log(str.match(reg));var res = str.replace(reg, function (v) &#123;return v + &quot;教程&quot;;&#125;);console.log(res);</code></pre></blockquote></li></ul><ol start="2"><li><p>理解(?&lt;&#x3D;y)(?&lt;&#x3D;z)x 匹配</p><blockquote><ul><li>这是不成立的：<code>(?&lt;=y)(?&lt;=z)x</code> 表示前面要紧跟着 <code>y</code> 同时又要紧跟随着 <code>z</code></li><li>只有一种情况下成立：y&#x3D;z时</li></ul><pre><code>var str = &quot;a1&quot;;var reg = /(?&lt;=A)(?&lt;=a)1/g; // 表示 1前面要紧跟随着A同时又要紧跟随着a,显然是不可能成立的console.log(str.match(reg)); // null</code></pre></blockquote><p>var str &#x3D; “a1”;<br>var reg &#x3D; &#x2F;(?&lt;&#x3D;A)(?&lt;&#x3D;a)1&#x2F;gi; &#x2F;&#x2F; 添加了i标志，这样A和a不区分大小写，相当于是一样的<br>console.log(str.match(reg)); &#x2F;&#x2F; [‘1’]</p><blockquote><pre><code></code></pre></blockquote></li><li><p>理解<code>((?=y)|(?=z))x</code></p><blockquote><ul><li>获取字符串中数字(包括小数)前被￥或$跟随的数字</li></ul><pre><code>var str = `书￥20.00  笔$30.00本子$52尺子￥0.5总费用:50.5元`;var reg = /((?&lt;=\$)|(?&lt;=￥))(\d+(\.\d)?\d*)/g;console.log(str.match(reg));</code></pre></blockquote></li><li><p>区分 <code>/(?&lt;=.*y)(?&lt;=.*z)x/</code> 与 <code>/(?&lt;=y.*)(?&lt;=z.*)x/</code></p><blockquote><ul><li><code>/(?&lt;=.*y)(?&lt;=.*z)x/</code>表示<code>x</code>前面<strong>紧跟随</strong>着<code>y</code>同时又要<strong>紧跟随</strong>着 x<blockquote><p>从右往左看，离x最近的是z和y</p></blockquote></li><li><code>/(?&lt;=y.*)(?&lt;=z.*)x/</code>表示 <code>x</code>前面必需<strong>包含</strong>y，同时又包含 z<blockquote><p>从右往左看，离x最近的是<code>.*</code></p></blockquote></li></ul></blockquote></li></ol><blockquote><ul><li>第一种情况，只有在y&#x3D;z时才成立</li></ul><pre><code>var reg = /(?&lt;=.*a)(?&lt;=.*b)/g;var str = &quot;ab&quot;;console.log(str.match(reg)); // null</code></pre></blockquote><p>&#x2F;&#x2F;\d包含1<br>var reg &#x3D; &#x2F;(?&lt;&#x3D;.*\d)(?&lt;&#x3D;.*1)&#x2F;g;<br>var str &#x3D; “a1”;<br>console.log(str.match(reg)); &#x2F;&#x2F; [‘’]</p><blockquote><pre><code></code></pre></blockquote><ul><li>字符串中必需包含 a 和 b<blockquote><pre><code>var reg = /(?&lt;=a.*)(?&lt;=b.*)/g;console.log(&quot;ab&quot;.match(reg)); // [&#39;&#39;]console.log(&quot;1ab&quot;.match(reg)); // [&#39;&#39;]console.log(&quot;ab1&quot;.match(reg)); // [&#39;&#39;, &#39;&#39;]</code></pre></blockquote>console.log(reg.test(“ab”)); &#x2F;&#x2F; true<br>console.log(reg.test(“1ab”)); &#x2F;&#x2F; true<br>console.log(reg.test(“ab1”)); &#x2F;&#x2F; true<blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><blockquote><p>注意：同时限制内容和长度时，长度按要求写，并写在最前面(与先行断言相反)</p></blockquote></blockquote><ul><li>检测字符串是否为6-8位，同时必需包含大写 A 和小写 a 和数字<blockquote><pre><code>var reg = /^.&#123;6,8&#125;(?&lt;=[A-Z].*)(?&lt;=[a-z].*)(?&lt;=[0-9].*)$/g;console.log(&quot;aAwwi9$@&quot;.match(reg));console.log(&quot;aAwwi9$@3&quot;.match(reg));console.log(&quot;aAww*&amp;&quot;.match(reg));console.log(&quot;aAww*1&quot;.match(reg));</code></pre></blockquote></li></ul><h4 id="x-y-1"><a href="#x-y-1" class="headerlink" title="x(?!y)"></a>x(?!y)</h4><blockquote><ul><li>先行否定断言（也称正向否定查找）：x 右边没有被y紧跟随之时匹配x</li></ul><pre><code>var str = &quot;ab123abc&quot;;//后面没有数字的小写字母var reg = /[a-z]+(?!\d)/g;console.log(str.match(reg)); // [&#39;a&#39;, &#39;abc&#39;]</code></pre></blockquote><h4 id="-1"><a href="#-1" class="headerlink" title="(?&lt;!y)x"></a>(?&lt;!y)x</h4><blockquote><ul><li>后行否定断言（也称反向否定查找）： x的左边没有被y紧随时匹配x</li></ul><pre><code>var str = &quot;ab123abc&quot;;//前面没有数字的小写字母var reg = /(?&lt;!\d)[a-z]+/g;console.log(str.match(reg)); // [&#39;ab&#39;, &#39;bc&#39;]</code></pre></blockquote><blockquote><ul><li>限定部分长度：同时使用先行否定断言和后行否定断言</li></ul></blockquote><ul><li>中国邮政编码 （中国邮政编码为 6 位数字，第一位不能是 0）<blockquote><pre><code>var str = &quot;A区邮政编码：123456  B区邮政编码：129832&quot;;var reg = /(?&lt;!\d)[1-9]\d&#123;5&#125;(?!\d)/g;console.log(str.match(reg));// [&#39;123456&#39;, &#39;129832&#39;]</code></pre></blockquote></li></ul><h3 id="十三、正则表达式应用案例"><a href="#十三、正则表达式应用案例" class="headerlink" title="十三、正则表达式应用案例"></a>十三、正则表达式应用案例</h3><ol><li>批量使用正则完成某个验证<blockquote><ul><li>这是一种思想，一种另辟蹊径的方式；当我们无法用一个正则表达式写出来的时候，可以尝试根据不同的要求，写出不同的表达式，然后将他们汇总</li><li>用户名只能是数字和字母组成，但必需包含一个大写字母</li></ul></blockquote></li></ol><blockquote><pre><code>//用户名只能是6-8位数字和字母组成，但必需包含一个大写字母var str = &quot;abc12S&quot;;//   var reg1 = /[a-z0-9]&#123;6,8&#125;/;//   var reg2 = /[A-Z]/;var regs = [/^[a-z0-9]&#123;6,8&#125;$/i, /[A-Z]/];// state=true表示字符串能通过所有正则的检测 ，假设一开始为truevar state = true;for (var i = 0; i &lt; regs.length; i++) &#123;  state = regs[i].test(str);  if (!state) &#123;    break;  &#125;&#125;if (state) &#123;  console.log(&quot;字符串满足要求&quot;);&#125; else &#123;  console.log(&quot;字符串不满足要求&quot;);&#125;</code></pre></blockquote><blockquote><ul><li>利用数组的 every 方法来实现</li></ul><pre><code>var str = &quot;abc1234_s&quot;;const regs = [/^[a-z0-9_]&#123;5,10&#125;$/i, /[A-Z]/];var state = regs.every(function (item) &#123;  return item.test(str);&#125;);</code></pre></blockquote><p>console.log(state);</p><blockquote><pre><code></code></pre></blockquote><ol start="2"><li>用户注册密码验证，项目实践<blockquote><pre><code>&lt;style&gt;  body,  html,  p &#123; margin: 0; padding: 0;  &#125;  .register &#123; width: 300px; margin: 100px;  &#125;  .pwd input &#123; box-sizing: border-box; margin-bottom: 20px; width: 100%; height: 50px; border-radius: 5px; outline: none; border: 1px solid #666;  &#125;  .pwd input::placeholder &#123; font-size: 18px; position: relative; top: 2px; left: 10px;  &#125;  .register .tip &#123; border: 1px solid #50bdeb; border-radius: 10px; background-color: #dbecf5; padding: 10px; color: #666;  &#125;  .tip p &#123; padding-left: 30px; line-height: 30px; background: url(../src/错叉_块.png) no-repeat; background-size: 20px; background-position: 0px 6px;  &#125;  .tip p.right &#123; background-image: url(../src/对.png); background-size: 25px; background-position-y: 3px; color: #56c4f3;  &#125;&lt;/style&gt;&lt;div class=&quot;register&quot;&gt; &lt;div class=&quot;pwd&quot;&gt;   &lt;input type=&quot;text&quot; class=&quot;password&quot; placeholder=&quot;密码&quot; /&gt; &lt;/div&gt; &lt;div class=&quot;tip&quot;&gt;   &lt;p class=&quot;upper&quot;&gt;至少有一个大写字母&lt;/p&gt;   &lt;p class=&quot;lower&quot;&gt;至少有一个小写字母&lt;/p&gt;   &lt;p class=&quot;number&quot;&gt;至少有一个数字&lt;/p&gt;   &lt;p class=&quot;special&quot;&gt;至少有一个特殊字符&lt;/p&gt;   &lt;p class=&quot;blank-space&quot;&gt;不能以空白符开头&lt;/p&gt;   &lt;p class=&quot;length&quot;&gt;密码长度8-12之间&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt;  var input = document.querySelector(&quot;.password&quot;);  var upperEl = document.querySelector(&quot;.upper&quot;);  var lowerEl = document.querySelector(&quot;.lower&quot;);  var numberEl = document.querySelector(&quot;.number&quot;);  var specialEl = document.querySelector(&quot;.special&quot;);  var blankSpaceEl = document.querySelector(&quot;.blank-space&quot;);  var lengthEl = document.querySelector(&quot;.length&quot;);</code></pre></blockquote>  &#x2F;&#x2F;绑定keyup事件<br>  input.onkeyup &#x3D; function () {<br> var value &#x3D; this.value;<br> &#x2F;&#x2F;至少有一个大写字母<br> var upper &#x3D; &#x2F;[A-Z]&#x2F;;<br> if (upper.test(value)) {<br>   upperEl.classList.add(“right”);<br> } else {<br>   upperEl.classList.remove(“right”);<br> }<br> &#x2F;&#x2F;至少有一个小写字母<br> var lower &#x3D; &#x2F;[a-z]&#x2F;;<br> if (lower.test(value)) {<br>   lowerEl.classList.add(“right”);<br> } else {<br>   lowerEl.classList.remove(“right”);<br> }<br> &#x2F;&#x2F;至少有一个数字<br> var number &#x3D; &#x2F;[0-9]&#x2F;;<br> if (number.test(value)) {<br>   numberEl.classList.add(“right”);<br> } else {<br>   numberEl.classList.remove(“right”);<br> }<br> var special &#x3D; &#x2F;[-!.@#$%&amp;^*~]&#x2F;;<br> if (special.test(value)) {<br>   specialEl.classList.add(“right”);<br> } else {<br>   specialEl.classList.remove(“right”);<br> }<br> &#x2F;&#x2F;不能以空白符开头<br> var blankSpace &#x3D; &#x2F;^[\S]&#x2F;;<br> if (blankSpace.test(value)) {<br>   blankSpaceEl.classList.add(“right”);<br> } else {<br>   blankSpaceEl.classList.remove(“right”);<br> }<br> &#x2F;&#x2F;密码长度8-12之间<br> var length &#x3D; &#x2F;^.{8,12}$&#x2F;;<br> if (length.test(value)) {<br>   lengthEl.classList.add(“right”);<br> } else {<br>   lengthEl.classList.remove(“right”);<br> }<br>  };<blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ol><h3 id="十四、正则相关工具"><a href="#十四、正则相关工具" class="headerlink" title="十四、正则相关工具"></a>十四、正则相关工具</h3><blockquote><ul><li>正则在线测试工具：<a href="https://regexr-cn.com/">https://regexr-cn.com</a></li><li>VsCode 插件：any-rule 提供了常用的正则表达式，直接拿来即用</li></ul></blockquote><h4 id="校验数字的表达式"><a href="#校验数字的表达式" class="headerlink" title="校验数字的表达式"></a>校验数字的表达式</h4><blockquote><ul><li>1、数字：<code>^[0-9]*$</code></li><li>2、n 位的数字：<code>^\d&#123;n&#125;$</code></li><li>3、至少 n 位的数字：<code>^\d&#123;n,&#125;$</code></li><li>4、m-n位的数字：<code>^\d&#123;m,n&#125;$</code></li><li>5、零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></li><li>6、非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(\.[0-9]&#123;1,2&#125;)?$</code></li><li>7、带1-2位小数的正数或负数：<code>^(\-)?\d+(\.\d&#123;1,2&#125;)$</code></li><li>8、正数、负数、和小数：<code>^(\-|\+)?\d+(\.\d+)?$</code></li><li>9、有两位小数的正实数：<code>^[0-9]+(\.[0-9]&#123;2&#125;)?$</code></li><li>10、有1~3位小数的正实数：<code>^[0-9]+(\.[0-9]&#123;1,3&#125;)?$</code></li><li>11、非零的正整数：<code>^[1-9]\d*$或^([1-9][0-9]*)&#123;1,3&#125;$或 ^\+?[1-9][0-9]*$</code></li><li>12、非零的负整数：<code>^\-[1-9][]0-9&quot;*$ 或^-[1-9]\d*$</code></li><li>13、非负整数：<code>^\d+$ 或^[1-9]\d*|0$</code></li><li>14、非正整数：<code>^-[1-9]\d*|0$或 ^((-\d+)|(0+))$</code></li><li>15、非负浮点数：<code>^\d+(\.\d+)?$或^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</code></li><li>16、非正浮点数：<code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$</code>或<code>^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</code></li><li>17、正浮点数：<code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ </code>或<code>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></li><li>18、负浮点数：<code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$</code> 或<code>^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code></li><li>19、浮点数：<code>^(-?\d+)(\.\d+)?$</code> 或 <code>^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></li></ul></blockquote><h4 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h4><blockquote><ul><li>1、汉字：<code>^[\u4e00-\u9fa5]&#123;0,&#125;$</code></li><li>2、英文和数字：<code>^[A-Za-z0-9]+$</code> 或 <code>^[A-Za-z0-9]&#123;4,40&#125;$</code></li><li>3、长度为 3-20 的所有字符：<code>^.&#123;3,20&#125;$</code></li><li>4、由 26 个英文字母组成的字符串：<code>^[A-Za-z]+$</code></li><li>5、由 26 个大写英文字母组成的字符串：<code>^[A-Z]+$</code></li><li>6、由 26 个小写英文字母组成的字符串：<code>^[a-z]+$</code></li><li>7、由数字和 26 个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></li><li>8、由数字、26 个英文字母或者下划线组成的字符串：<code>^\w+$ 或 ^\w&#123;3,20&#125;$</code></li><li>9、中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></li><li>10、中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$</code> 或<code>^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$</code></li><li>11、可以输入含有<code>^%&amp;&#39;,;=?$\&quot;</code>等字符：<code>[\^%&amp;&#39;,;=?$\\]+</code></li><li>12、禁止输入含有<del>的字符：&#96;[^</del>]+&#96;</li></ul></blockquote><h4 id="特殊需求表达式"><a href="#特殊需求表达式" class="headerlink" title="特殊需求表达式"></a>特殊需求表达式</h4><blockquote><ul><li>1、Email 地址：<code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></li><li>2、域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+\.?</code></li><li>3、InternetURL：<code>[a-zA-z]+://[^\s]*</code>或 <code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code></li><li>4、手机号码：<code>^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\d&#123;8&#125;$</code></li><li>5、电话号码（”XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX）：<code>^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$</code></li><li>6、国内电话号码（0511-4405222、021-87888822）：<code>\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</code></li><li>7、电话号码正则表达式（支持手机号码，3-4 位区号，7-8 位直播号码，1－4 位分机号）: <code>((\d&#123;11&#125;)|^((\d&#123;7,8&#125;)|(\d&#123;4&#125;|\d&#123;3&#125;)-(\d&#123;7,8&#125;)|(\d&#123;4&#125;|\d&#123;3&#125;)-(\d&#123;7,8&#125;)-(\d&#123;4&#125;|\d&#123;3&#125;|\d&#123;2&#125;|\d&#123;1&#125;)|(\d&#123;7,8&#125;)-(\d&#123;4&#125;|\d&#123;3&#125;|\d&#123;2&#125;|\d&#123;1&#125;))$)</code></li><li>8、身份证号（15 位、18 位数字），最后一位是校验位，可能为数字或字符 X：<code>(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)</code></li><li>9、帐号是否合法（字母开头，允许 5-16 字节，允许字母数字下划线）：<code>^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</code></li><li>10、密码（以字母开头，长度在 6~18 之间，只能包含字母、数字和下划线）：<code>^[a-zA-Z]\w&#123;5,17&#125;$</code></li><li>11、强密码（必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间）：<code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]&#123;8,10&#125;$</code></li><li>12、强密码（必须包含大小写字母和数字的组合，可以使用特殊字符，长度在 8-10 之间）：<code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$</code></li><li>13、日期格式：<code>^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</code></li><li>14、一年的 12 个月（01 ～ 09 和 1 ～ 12）：<code>^(0?[1-9]|1[0-2])$</code></li><li>15、一个月的 31 天（01 ～ 09 和 1 ～ 31）：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></li><li>16、钱的输入格式： 有四种钱的表示形式我们可以接受：”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000” ：<code>^[1-9][0-9]*$</code></li><li>17、这表示任意一个不以 0 开头的数字，但是，这也意味着一个字符”0”不通过，所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code></li><li>18、一个 0 或者一个不以 0 开头的数字，我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code></li><li>19、这表示一个 0 或者一个可能为负的开头不为 0 的数字，让用户以 0 开头好了.把负号的也去掉，因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code></li><li>20、必须说明的是，小数点后面至少应该有 1 位数，所以”10.”是不通过的，但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]&#123;2&#125;)?$</code></li><li>21、这样我们规定小数点后面必须有两位,如果你认为太苛刻了，可以这样：<code>^[0-9]+(.[0-9]&#123;1,2&#125;)?$</code></li><li>22、这样就允许用户只写一位小数，下面我们该考虑数字中的逗号了，我们可以这样：<code>^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$</code></li><li>23、1 到 3 个数字，后面跟着任意个 逗号+3 个数字，逗号成为可选，而不是必须：<code>^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$</code></li><li>24、备注：这就是最终结果了，别忘了 “+”可以用”*”替代如果你觉得空字符串也可以接受的话（奇怪，为什么?）最后，别忘了在用函数时去掉去掉那个反斜杠，一般的错误都在这里</li><li>25、xml 文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</code></li><li>26、中文字符的正则表达式：<code>[\u4e00-\u9fa5]</code></li><li>27、双字节字符：<code>[^\x00-\xff]</code>（包括汉字在内，可以用来计算字符串的长度（一个双字节字符长度计 2，ASCII 字符计 1 ））</li><li>28、空白行的正则表达式：<code>\n\s*\r</code> （可以用来删除空白行）</li><li>29、HTML 标记的正则表达式：<code>&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt;（首尾空白字符的正则表达式：^\s*|\s*$</code>或<code>(^\s*)|(\s*$)</code>（可以用来删除行首行尾的空白字符（包括空格、制表符、换页符等等），非常有用的表达式）</li><li>30、腾讯 QQ 号：<code>[1-9][0-9]&#123;4,&#125;</code>（腾讯 QQ 号从 10000 开始）</li><li>31、中国邮政编码：<code>[1-9]\d&#123;5&#125;(?!\d)</code> （中国邮政编码为 6 位数字）</li><li>32、IPv4 地址：<code>((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;)(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;))&#123;3&#125;</code></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（十六）</title>
      <link href="/2023/12/08/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89/"/>
      <url>/2023/12/08/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、Math-对象"><a href="#一、Math-对象" class="headerlink" title="一、Math 对象"></a>一、Math 对象</h3><blockquote><ul><li><code>Math</code> 是一个<strong>内置对象</strong>，它拥有一些数学常数属性和数学函数方法。</li><li>与其他全局对象不同的是，<code>Math</code> 不是一个构造器。即<strong>不能</strong>使用 <code>new</code> 关键字</li><li><code>Math</code> 的所有属性与方法都是<strong>静态</strong>的<blockquote><p>以下是 Math 对象上的一些常用的方法和属性</p></blockquote></li></ul></blockquote><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>Math.PI</td><td>Math.PI 表示圆周率π，即一个圆的周长与直径的比例，约为 3.14159</td></tr></tbody></table><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Math.pow(x,y)</td><td>返回x的y次幂</td></tr><tr><td>Math.sqrt(x)</td><td>返回x的平方根</td></tr><tr><td>Math.ceil(x)</td><td>向上取整，返回大于等于x的最小整数</td></tr><tr><td>Math.floor(x)</td><td>向下取整，返回小于等于x的最大整数</td></tr><tr><td>Math.round(x)</td><td>返回x经过 4 舍 5 入后得到的最接近的整数</td></tr><tr><td>Math.max(a,b,c,[..])</td><td>返回给定数值中的最大数</td></tr><tr><td>Math.min(a,b,c,[..])</td><td>返回给定数值中的最小数</td></tr><tr><td>Math.abs()</td><td>返回一个数字的绝对值</td></tr><tr><td>Math.random()</td><td>生成一个（0-1）之间的随机数</td></tr><tr><td>Math.atan2</td><td>返回从原点（0,0） 到 （x,y） 点的线段与 x 轴正方向之间的平面角度（弧度值）</td></tr></tbody></table><ol><li><p>Math.PI 属性</p><blockquote><ul><li><code>Math.PI</code>表示圆周率<code>π</code>，即一个圆的周长与直径的比例，约为<code>3.14159</code></li></ul><pre><code>console.log(Math.PI); // 3.141592653589793</code></pre></blockquote></li><li><p>Math.pow(x,y)</p><blockquote><ul><li><code>Math.pow(x,y)</code> 返回 x 的 y 次幂</li></ul><pre><code>console.log(Math.pow(2, 3)); // 8  2的3次幂为8</code></pre></blockquote></li><li><p>Math.sqrt(x)</p><blockquote><ul><li>返回x的平方根</li></ul><pre><code>console.log(Math.sqrt(4)); // 2console.log(Math.sqrt(9)); // 3</code></pre></blockquote></li><li><p>Math.ceil</p><blockquote><ul><li>向上取整，返回大于等于 x 的最小整数</li></ul><pre><code>console.log(Math.ceil(2.2)); // 3console.log(Math.ceil(2.0001)); // 3console.log(Math.ceil(-2.1)); // -2console.log(Math.ceil(0.909)); // 1</code></pre></blockquote></li><li><p>Math.floor</p><blockquote><ul><li>向下取整，返回小于等于 x 的最大整数</li></ul><pre><code>console.log(Math.floor(2.2)); // 2console.log(Math.floor(2.0001)); // 2console.log(Math.floor(-2.1)); // -3console.log(Math.floor(0.909)); // 0</code></pre></blockquote></li><li><p>Math.round</p><blockquote><ul><li>返回<code>x</code>经过<strong>四舍五入</strong>后得到的最接近的整数，只需要看 <code>x</code> 的小数部分与 <code>0.5</code> 的关系<blockquote><p>特别注意：当x是负数是，如果小数部分是 0.5，则返回值为x的整数部分</p></blockquote></li></ul></blockquote></li></ol><blockquote><pre><code>console.log(Math.round(10.49)); // 10console.log(Math.round(10.5)); // 11console.log(Math.round(-10.49)); // -10// 特殊情况，记下console.log(Math.round(-10.5)); // -10console.log(Math.round(-10.51)); // -11</code></pre></blockquote><ol start="7"><li>Math.max<blockquote><ul><li>返回给定数值中的最大数，如果任一参数不能转换为数值，则返回<code>NaN</code></li><li>如果没有提供参数，返回 <code>-Infinity</code></li></ul></blockquote></li></ol><blockquote><pre><code>console.log(Math.max(1, 2, 3, 7)); // 7console.log(Math.max()); // -Infinityconsole.log(Math.max(1, 2, &quot;a&quot;)); // NaN</code></pre></blockquote><blockquote><p><strong>求数组中的最大值</strong></p><pre><code>var arr = [1, 20, 5, 6, 3, 9, 10];var maxValue = Math.max.apply(null, arr);console.log(maxValue);</code></pre><blockquote><p><code>Math.min</code>同样可以</p></blockquote></blockquote><ol start="8"><li>Math.min<blockquote><ul><li>返回给定数值中的最小数，如果任一参数不能转换为数值，则返回<code>NaN</code></li><li>如果没有提供参数，返回<code>Infinity</code></li></ul><pre><code>console.log(Math.min(1, 2, 3, 7)); // 1console.log(Math.min()); // -Infinityconsole.log(Math.min(1, 2, &quot;a&quot;)); // NaN</code></pre></blockquote></li></ol><ul><li><strong><code>Math.max</code>与<code>Math.min</code>常用于裁剪值</strong><blockquote><p>比如:</p><ul><li>元素的 <code>left</code> 值只能在<code>0 ~ 500</code>之间，则我们可以利用<code>Math.max</code> 和 <code>Math.min</code>来对值做裁剪</li></ul><pre><code>var left = 300;left = left &lt; 0 ? 0 : left;left = left &gt; 500 ? 500 : left;console.log(left);</code></pre></blockquote>&#x2F;&#x2F; 利用 Math.max和Math.min来实现<br>left &#x3D; Math.max(left, 0);<br>left &#x3D; Math.min(500, left);<br>console.log(left);<blockquote><pre><code></code></pre></blockquote></li></ul><ol start="9"><li><p>Math.abs</p><blockquote><ul><li>返回一个数字的<strong>绝对值</strong>，如果不能转换的，则会转换为 <code>NaN</code>，能转的都会转换成对应的数字</li></ul><pre><code>console.log(Math.abs(-1)); // 1console.log(Math.abs(-1.2)); // 1.2console.log(Math.abs(null)); // 0console.log(Math.abs(true)); // 1console.log(Math.abs(false)); // 0console.log(Math.abs(undefined)); // NaNconsole.log(Math.abs([-3])); // 3console.log(Math.abs([2, -3])); // NaNconsole.log(Math.abs(&#123;&#125;)); // NaN</code></pre></blockquote></li><li><p>Math.random</p><blockquote><ul><li>返回一个 <code>0 ~ 1</code> 之间的随机数，不包括 0 和 1</li><li>返回指定范围<code>[a,b]</code>之间的随机整数公式，包括 a 和 b：</li></ul><pre><code>Math.random() * (b - a + 1) + a;</code></pre></blockquote></li></ol><blockquote><pre><code>// 随机生成 0-6之间的随机整数,包括0和6var n = Math.floor(Math.random() * 7);</code></pre></blockquote><p>&#x2F;&#x2F; 随机生成 [2,6]之间的随机整数<br>var n &#x3D; Math.floor(Math.random() * (6 - 2 + 1) + 2);</p><blockquote></blockquote><p>&#x2F;&#x2F; 随机生成[-5,5]之间的整数<br>var n &#x3D; Math.floor(Math.random() * (5 - -5 + 1) - 5);</p><blockquote><pre><code></code></pre></blockquote><ol start="11"><li>Math.atan2<blockquote><ul><li>返回从原点<code>(0,0)</code>到<code>(x,y)</code>点的线段与 x 轴正方向之间的平面角度<strong>（弧度值）</strong></li><li>假设圆的中心点为原点坐标<code>（0,0）</code>，即从原点到坐标<code>（x,y）</code>的线段与 x 轴正方向之间的角 θ 是一个负角（逆时针方向）</li><li>旋转角度的正负，是由 <code>y</code> 值决定的，<code>y &lt; 0</code>得到负角，<code>y &gt; 0</code>得到正角<blockquote><p>注意：这里的y轴与数学上的不一样；正值向下，负值向上；</p></blockquote></li></ul></blockquote></li></ol><img src="弧度值.png"><blockquote><pre><code>Math.atan2(y, x); // 第一个参数是y坐标，第二个参数是x坐标</code></pre></blockquote><blockquote><p><strong>因为</strong></p><ul><li><code>Math.atan2(y,x)</code>得到的是对应的弧度值，所以我们还需要将弧度值转换为对应的<strong>角度值</strong></li><li>弧度值转换成对应角度值的转换公式<ul><li>角度 &#x3D; 弧度 * (180&#x2F;Math.PI)</li><li>角度 &#x3D; 弧度 &#x2F; (Math.PI&#x2F;180)</li></ul></li></ul><pre><code> rad1 = Math.atan2(-1, 1); deg1 = Math.atan2(-1, 1) * (180 / Math.PI); console.log(rad1, deg1); //-0.7853981633974483 -45</code></pre></blockquote><p> rad2 &#x3D; Math.atan2(-1, -1);<br> deg2 &#x3D; Math.atan2(-1, -1) * (180 &#x2F; Math.PI);<br> console.log(rad2, deg2); &#x2F;&#x2F;-2.356194490192345 -135</p><blockquote></blockquote><p> rad3 &#x3D; Math.atan2(1, -1);<br> deg3 &#x3D; Math.atan2(1, -1) * (180 &#x2F; Math.PI);<br> console.log(rad3, deg3); &#x2F;&#x2F;2.356194490192345 135</p><blockquote></blockquote><p> rad4 &#x3D; Math.atan2(1, 1);<br> deg4 &#x3D; Math.atan2(1, 1) * (180 &#x2F; Math.PI);<br> console.log(rad4, deg4); &#x2F;&#x2F;0.7853981633974483 45</p><blockquote><pre><code></code></pre></blockquote><ul><li>扩展知识：弧度与角度的关系<blockquote><ul><li>角的度量单位通常有两种：一种是角度制，另一种是弧度制</li><li>弧度制：我们把<strong>长度等于半径长</strong>的弧所对的圆心角叫<strong>1 弧度的角</strong>。 弧度常用<code>rad</code>表示</li><li>假设下图中圆的半径为 r ，弧 AB 的长为 L，如果L &#x3D; r， 则<code>∠AOB = L/r = 1 弧度</code><img src="弧度与角度的关系.png"></li></ul></blockquote></li></ul><blockquote><p><strong>1 弧度 &#x3D; ?角度呢</strong></p><ul><li><p>1弧度 &#x3D; 180deg&#x2F;π 约为 57.2958279deg<br><strong>推导过程</strong></p></li><li><p><code>周长 = 2πr</code> ， <code>周角 = 360deg</code></p></li><li><p><code>1弧度/360deg</code> &#x3D; <code>L/2πr</code> ；</p></li><li><p>因为L&#x3D;r–&gt;&gt; <code>1弧度/360deg</code> &#x3D; <code>r/2πr</code> </p></li><li><p>—&gt;&gt; <code>1弧度 = 180deg/π</code></p></li><li><p>通过 <code>1弧度 = 180deg/π</code> 得到</p></li><li><p><code>角度 = 弧度 * (180deg/π)</code></p></li><li><p><code>角度 = 弧度 / (π/180)</code></p></li><li><p><code>π = 180deg</code> ，<code>2π = 360deg</code> （弧度单位可以省略）</p></li></ul></blockquote><ul><li>案例：元素跟随鼠标旋转<blockquote><ul><li>当鼠标旋转时，元素也会跟着一起旋转。<img src="元素跟随鼠标旋转.png"></li></ul></blockquote></li></ul><p><strong>实现原理</strong></p><blockquote><ul><li>首先，我们知道，鼠标的坐标是距离浏览器左侧和上面的距离，也就是说，原点在浏览器的左上角，鼠标只能在第四象限移动</li><li>而我们要旋转元素，必须在每个象限都能移动，所以，我们需要把鼠标的坐标轴原点移动到<strong>元素的中心点</strong><ul><li>我们需要获取到元素中心点与浏览器左边和上边的距离</li><li>然后获取到鼠标与浏览左边和上边的距离</li><li>最后用鼠标对应位置减去元素中心点与浏览器对应位置，得到的 <code>x,y</code> 这样元素的中心点就相当于是<code>(0,0)</code>原点坐标，<code>（x,y）</code>就是<code>Math.atan2(y,x)</code>方法对应的 <code>x,y</code></li></ul></li></ul><pre><code>// box中心点与浏览器左边和上边距离var centerX = box.offsetLeft + box.offsetWidth / 2;var centerY = box.offsetTop + box.offsetHeight / 2;</code></pre></blockquote><p>document.onmousemove &#x3D; function (e) {<br>  var clientY &#x3D; e.clientY;<br>  var clientX &#x3D; e.clientX;<br>};</p><blockquote></blockquote><p>&#x2F;&#x2F; 以元素的中心点为（0，0）坐标，来计算弧度值，最后转换为对应角度值<br>x &#x3D; clientX - centerX;<br>y &#x3D; clientY - centerY;</p><blockquote><pre><code></code></pre></blockquote><blockquote><ul><li>用(x,y)计算弧度值和角度控制元素的旋转角度：<code>transform:rotate(deg)</code></li></ul><pre><code>var rad = Math.atan2(y, x); // 弧度值var deg = rad * (180 / Math.PI); // 将弧度值转换为对应角度制</code></pre></blockquote><blockquote><p><strong>完整源码</strong></p><pre><code>&lt;style&gt;  .box &#123;    width: 200px;    height: 200px;    background-image: linear-gradient(to right, khaki, skyblue);    margin: 200px;    /* transform-origin: top left; */ /*改变旋转中心点*/  &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  // box中心点与浏览器左边和上边距离  var centerX = box.offsetLeft + box.offsetWidth / 2;  var centerY = box.offsetTop + box.offsetHeight / 2;</code></pre></blockquote><p>  &#x2F;&#x2F; onmousemove事件<br>  document.onmousemove &#x3D; function (e) {<br>    &#x2F;&#x2F; 鼠标与浏览器左边和右边距离<br>    var clientY &#x3D; e.clientY;<br>    var clientX &#x3D; e.clientX;</p><blockquote></blockquote><pre><code>// 得到鼠标与元素中心点的x和y坐标x = clientX - centerX;y = clientY - centerY;</code></pre><blockquote></blockquote><pre><code>// 以元素的中心点为（0，0）坐标，来计算弧度值，最后转换为对应角度值var rad = Math.atan2(y, x);var deg = rad * (180 / Math.PI);</code></pre><blockquote></blockquote><pre><code>// 控制元素的旋转角度box.style.transform = &quot;rotate(&quot; + deg + &quot;deg)&quot;;</code></pre><p>  };</p><blockquote><p></script></p><pre><code></code></pre></blockquote><h3 id="二、Date-日期对象"><a href="#二、Date-日期对象" class="headerlink" title="二、Date 日期对象"></a>二、Date 日期对象</h3><blockquote><ul><li>Date 日期对象主要是用来处理日期</li></ul></blockquote><blockquote><ul><li>以下是与星期相关的英文单词，可以记下来<table><thead><tr><th>星期</th><th>英文</th><th>缩写</th></tr></thead><tbody><tr><td>星期一</td><td>Monday</td><td>Mon</td></tr><tr><td>星期二</td><td>Tuesday</td><td>Tue</td></tr><tr><td>星期三</td><td>Wednesday</td><td>Wed</td></tr><tr><td>星期四</td><td>Thursday</td><td>Thur</td></tr><tr><td>星期五</td><td>Friday</td><td>Fri</td></tr><tr><td>星期六</td><td>Saturday</td><td>Sat</td></tr><tr><td>星期七</td><td>Sunday</td><td>Sun</td></tr></tbody></table></li></ul></blockquote><blockquote><ul><li>以下是与月份相关的英文单词<table><thead><tr><th>月份</th><th>英文</th><th>简写</th></tr></thead><tbody><tr><td>一月</td><td>January</td><td>Jan</td></tr><tr><td>二月</td><td>February</td><td>Feb</td></tr><tr><td>三月</td><td>March</td><td>Mar</td></tr><tr><td>四月</td><td>April</td><td>Apr</td></tr><tr><td>五月</td><td>May</td><td>May</td></tr><tr><td>六月</td><td>June</td><td>Jun</td></tr><tr><td>七月</td><td>July</td><td>Jul</td></tr><tr><td>八月</td><td>August</td><td>Aug</td></tr><tr><td>九月</td><td>September</td><td>Sep</td></tr><tr><td>十月</td><td>October</td><td>Oct</td></tr><tr><td>十一月</td><td>November</td><td>Nov</td></tr><tr><td>十二月</td><td>December</td><td>Dec</td></tr></tbody></table></li></ul></blockquote><h4 id="new-Date-创建日期对象"><a href="#new-Date-创建日期对象" class="headerlink" title="new Date() 创建日期对象"></a>new Date() 创建日期对象</h4><blockquote><p>-<code>new Date()</code>可以用来创建一个日期对象</p><ul><li>它有四种使用方式：</li></ul></blockquote><ol><li><p><code>new Date()</code></p><blockquote><ul><li>没有提供任何参数，则返回结果为当前的日期和时间</li><li><code>console.log(new Date()); //Fri Aug 25 2023 17:11:59 GMT+0800 (中国标准时间)</code></li></ul></blockquote></li><li><p><code>new Date(value)</code></p><blockquote><ul><li><code>value</code> 是一个时间戳，他是一个整数值，表示从 <code>1970 年 1 月 1 日 00:00:00</code>UTC（the Unix epoch）开始算起的一个毫秒数。</li><li><code>console.log(new Date(5000));//Thu Jan 01 1970 08:00:05 GMT+0800 (中国标准时间)</code></li></ul></blockquote></li><li><p><code>new Date(dateString);</code></p><blockquote><ul><li><code>dateString</code>表示一个日期字符串，其中<code>2022-07-02</code>这种格式的日期(<code>-</code>和两位数同时存在)会被处理成 <code>UTC</code>，而不是本地时间(与中国相差八小时)</li><li>该方法会把<code>dateString</code>转化为：<code>星期 月 日 年 时间</code>的格式</li></ul><pre><code> console.log(new Date(&quot;2022-7-1&quot;)); //Fri Jul 01 2022 00:00:00 GMT+0800 console.log(new Date(&quot;2022/7/1&quot;)); //Fri Jul 01 2022 00:00:00 GMT+0800 console.log(new Date(&quot;2022-07-1&quot;)); //Fri Jul 01 2022 00:00:00 GMT+0800 console.log(new Date(&quot;2022-07-01&quot;)); //会被处理成UTC时间 Fri Jul 01 2022 08:00:00 GMT+0800</code></pre></blockquote></li><li><p><code>new Date((year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]]);)</code></p><blockquote><ul><li>分别提供日期和时间的每个成员，不过<strong>至少要</strong>提供年份与月份</li><li>如果<strong>没有提供</strong>的参数，<strong>日期</strong>默认值为<code>1</code>，<strong>时，分，秒</strong>默认值为<code>0</code><blockquote><p>注意事项：</p></blockquote></li><li><code>monthIndex</code>表示月份的整数值，从 0（1 月）到 11（12 月）</li><li><code>year</code>年份的整数值，<code>0</code>到<code>99</code>会被映射至 <code>1900</code> 年至 <code>1999</code>年，其它值代表实际年份</li></ul><pre><code> console.log(new Date(2023, 8, 25, 17, 23)); //Mon Sep 25 2023 17:23:00</code></pre></blockquote><p> console.log(new Date(“2023-08-25”)); &#x2F;&#x2F;Fri Aug 25 2023 08:00:00<br> console.log(new Date(“2023&#x2F;8&#x2F;25”)); &#x2F;&#x2F;Fri Aug 25 2023 00:00:00</p><blockquote></blockquote><p> console.log(new Date(2023, 15, 25)); &#x2F;&#x2F;Thu Apr 25 2024 00:00:00<br> console.log(new Date(2023, 8, 40)); &#x2F;&#x2F;Tue Oct 10 2023 00:00:00<br> console.log(new Date(2023, 8, 25, 30)); &#x2F;&#x2F;Tue Sep 26 2023 06:00:00</p><blockquote><pre><code></code></pre></blockquote></li></ol><blockquote><blockquote><p>注意事项：</p></blockquote><ul><li>如果传入的是日期格式的字符串,它会自动转换格式；根据字符串的格式转换成UTC或者当地时间</li><li>当传入多个参数时，如果<strong>数值大于合理范围</strong>时，相邻的数值会被调整<ul><li>月超出范围<code>2023, 15, 25</code>：<code>15-12=3</code>,因为月份是<code>0-11</code>，所以是四月</li><li>日超出范围<code>2023, 8, 40</code>：会根据月份的长度调整，注意：月份的位置写的是<code>8</code>，那代表是<code>9</code>月，所以<code>40-30=10</code>，即10月10号</li><li>时超出范围<code>-24</code>，分秒超出范围<code>-60</code></li></ul></li></ul></blockquote><ul><li>实践应用<blockquote><ul><li>获取上一个月共有多少天，比如获取 2022 年 9 月的上一个月有多少天</li></ul><pre><code> // 获取2022年9月的上一个月有多少天 var date = new Date(2022, 8, 0); // 2022年9月的第0天就是8月的最后一天 console.log(date); // Wed Aug 31 2022 00:00:00 GMT+0800 var prevMonthDayCount = date.getDate(); // 获取当前日期的天 console.log(prevMonthDayCount); // 31</code></pre></blockquote></li></ul><blockquote><ul><li>获取当月一共有多少天，如比获取 2022 年 9 月一共有多少天</li></ul><pre><code>// 获取2022年9月一共有多少天var date = new Date(2022, 9, 0); //2022年10月的第0天就是 2022年9月的最后一天console.log(date); // Fri Sep 30 2022 00:00:00 GMT+0800 (中国标准时间)var prevMonthDayCount = date.getDate(); // 获取当前日期的天console.log(prevMonthDayCount); // 30</code></pre></blockquote><ol start="5"><li>扩展<blockquote><p><strong>UTC：</strong></p><ul><li>也就是我们所说的格林威治时间，指的是<code>time</code>中的<strong>世界时间标准</strong></li><li>JavaScript的时间由世界标准时间（UTC）<code>1970 年 1 月 1 日</code>开始，用毫秒计时，一天由<code>86,400,000</code>毫秒组成<br><strong>本地（当地）时间</strong></li><li>是指执行 JavaScript 的客户端电脑所设置的时间</li></ul></blockquote></li></ol><h4 id="日期格式化方法"><a href="#日期格式化方法" class="headerlink" title="日期格式化方法"></a>日期格式化方法</h4><blockquote><p>以下方法只需要了解即可</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>toString()</td><td>返回一个字符串，以<strong>本地的时间</strong>表示当前的时间</td></tr><tr><td>toLocaleString()</td><td>根据当地语言规定返回代表着<strong>时间</strong>的字符串</td></tr><tr><td>toLocaleDateString()</td><td>根据当地语言规定返回代表着<strong>日期</strong>的字符串</td></tr><tr><td>toLocaleTimeString()</td><td>根据当地语言规定返回代表着时<strong>分秒</strong>的字符串</td></tr></tbody></table><pre><code> var date = new Date(); console.log(date); // Thu Aug 08 2022 22:21:58 GMT+0800 (中国标准时间) console.log(date.toString()); // Thu Aug 08 2022 22:21:58 GMT+0800 (中国标准时间) console.log(date.toLocaleString()); // 2022/8/8 22:21:58 console.log(date.toLocaleDateString()); // 2022/8/8 console.log(date.toLocaleTimeString()); // 22:21:58</code></pre></blockquote><h4 id="日期对象常见方法"><a href="#日期对象常见方法" class="headerlink" title="日期对象常见方法"></a>日期对象常见方法</h4><blockquote><p>如果我们想获取日期的指定部分，如：年，月，日，星期，时，分，秒等中的某个部分,则可以使用下面提供的方法</p></blockquote><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getFullYear()</td><td>根据<strong>本地时间</strong>，返回具体时间中的** 年份**</td></tr><tr><td>getMonth()</td><td>根据本地时间，返回具体时间中的 月份 <code>0-11</code> 表示 <strong>1-12 月</strong></td></tr><tr><td>getDate()</td><td>根据本地时间，返回具体时间中的<strong>日（天）</strong></td></tr><tr><td>getDay()根据本地时间，返回具体时间中的<strong>星期</strong>，<code>0-6</code> 表示星期天，一，二，三，… 六</td><td></td></tr><tr><td>getHours()</td><td>根据本地时间，返回具体时间中的 <strong>时</strong></td></tr><tr><td>getMinutes()</td><td>根据本地时间，返回具体时间中的 <strong>分钟数</strong></td></tr><tr><td>getSeconds()</td><td>根据本地时间，返回具体时间中的 <strong>秒数</strong></td></tr><tr><td>getMilliseconds()</td><td>根据本地时间，返回具体时间中的 <strong>毫秒数</strong></td></tr></tbody></table><blockquote><ul><li>以 “2023 年 09 月 08 日 12 时 04 分 05 秒 星期四” 格式输出对应的日期</li></ul><pre><code> var d = new Date(); var year = d.getFullYear(); var month = d.getMonth() + 1; var date = d.getDate(); var day = d.getDay(); var hours = d.getHours(); var minutes = d.getMinutes(); var seconds = d.getSeconds();</code></pre></blockquote><p> &#x2F;&#x2F; 对日期不足两位的补0操作<br> month &#x3D; padZero(month);<br> date &#x3D; padZero(date);<br> hours &#x3D; padZero(hours);<br> minutes &#x3D; padZero(minutes);<br> seconds &#x3D; padZero(seconds);</p><blockquote></blockquote><p> var week &#x3D; [<br>   “星期天”,<br>   “星期一”,<br>   “星期二”,<br>   “星期三”,<br>   “星期四”,<br>   “星期五”,<br>   “星期六”,<br> ];</p><blockquote></blockquote><p> console.log(<br>   year +<br>     “年” +<br>     month +<br>     “月” +<br>     date +<br>     “天 “ +<br>     hours +<br>     “时” +<br>     minutes +<br>     “分” +<br>     seconds +<br>     “秒 “ +<br>     week[day]<br> );<br> &#x2F;&#x2F; 输出结果格式： 2023年09月08天 23时12分16秒 星期四</p><blockquote></blockquote><p> &#x2F;&#x2F; 补0<br> function padZero(str) {<br>   str &#x3D; str + “”;<br>   return str.padStart(2, “0”);<br> }</p><blockquote><pre><code></code></pre></blockquote><h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><blockquote><ul><li>时间戳：表示 1970 年 1 月 1 日零点整<strong>距离某时刻</strong>的毫秒数</li><li><code>getTime</code>方法：可以把对应的日期时间转换为对应的时间戳</li></ul><pre><code>//得到此时距1970 年 1 月 1 日零点整的毫秒数 var d1 = new Date(); console.log(d1.getTime()); //1692958123935//得到2023/8/26 距1970 年 1 月 1 日零点整的毫秒数 var d2 = new Date(&quot;2023 / 8 / 26&quot;); console.log(d2.getTime()); //1692979200000</code></pre></blockquote><ol><li><p>应用：利用 getTime 方法，可以测试代码的执行时间</p><blockquote><pre><code>var start = new Date();for (var i = 0; i &lt; 1000; i++) &#123;  console.log(i);&#125;var end = new Date();// 代码执行时间，为两者时间之差（毫秒数）var time = end.getTime() - start.getTime();console.log(&quot;代码执行时间&quot; + time + &quot;毫秒&quot;); // 代码执行时间20毫秒</code></pre></blockquote></li><li><p>将一个日期转换为对应的时间戳 ，还有以下 4 种方法</p><table><thead><tr><th>时间戳方法</th><th>说明</th></tr></thead><tbody><tr><td>日期对象.getTime()</td><td>可以把对应的日期时间转换为对应的时间戳</td></tr><tr><td>日期对象.valueOf方法</td><td>返回 Date 对象的原始值，其功能和 getTime</td></tr><tr><td>+日期对象</td><td>这种是一种技巧，利用+号的特性，底层调用的是 valueOf 方法</td></tr><tr><td>Date.parse(“”)方法</td><td>静态方法，返回传递的日期的时间戳</td></tr><tr><td>Date.now() 方法</td><td>静态方法 返回<strong>当前的日期</strong>的时间戳</td></tr></tbody></table></li></ol><blockquote><pre><code>var d = new Date(2022, 9, 9);console.log(d.valueOf()); // 1665244800000console.log(d.getTime()); // 1665244800000console.log(+d); // 1665244800000</code></pre></blockquote><p>console.log(Date.now()); &#x2F;&#x2F; 1665244823500</p><blockquote></blockquote><p>console.log(Date.parse(“2022-9-1”)); &#x2F;&#x2F; 本地时间  1661961600000<br>console.log(Date.parse(“2022&#x2F;9&#x2F;1”)); &#x2F;&#x2F; 本地时间  1661961600000<br>console.log(Date.parse(“2022-09-01”)); &#x2F;&#x2F; UTC 1661990400000</p><blockquote><pre><code></code></pre></blockquote><blockquote><ul><li><code>Date.parse()</code>方法传入日期必须用引号包裹，并且根据不同的日期格式会返回UTC或者本地时间</li><li>其他方法，如果在<code>new Date()</code>里传入字符串格式的日期，根据不同的日期格式也会返回UTC或者本地时间</li></ul></blockquote><h4 id="案例：活动倒计时"><a href="#案例：活动倒计时" class="headerlink" title="案例：活动倒计时"></a>案例：活动倒计时</h4><blockquote><p>涉及知识点</p><ul><li>定时器</li><li>Date 对象、getTime() 方法</li><li>倒计时原理： 时间戳如何转换为对应的天数，小时，分钟，秒数</li></ul></blockquote><ol><li><p>CSS布局</p><blockquote><pre><code>&lt;style&gt;  .countDown &#123; position: relative; width: 190px; height: 260px; background-image: url(../src/miaosha.png); margin: 100px;  &#125;  .countDown .title &#123; font-size: 30px; text-align: center; padding-top: 50px; color: #fff; font-weight: bold;  &#125;  .countDown .main &#123; position: absolute; bottom: 50px; width: 100%; height: 30px; text-align: center; font-size: 0;  &#125;  .countDown .main span &#123; position: relative; display: inline-block; width: 30px; height: 30px; margin: 0 8px; font-size: 20px; color: #fff; background-color: #000;  &#125;  .main span::after &#123; position: absolute; top: 0; right: -10px; content: &quot;:&quot;; display: block;  &#125;  .main span.second::after &#123; content: &quot;&quot;;  &#125;&lt;/style&gt;&lt;div class=&quot;countDown&quot; id=&quot;J-countDown&quot;&gt; &lt;!-- &lt;div class=&quot;title&quot;&gt;京东秒杀&lt;/div&gt; &lt;div class=&quot;main&quot;&gt;   &lt;span class=&quot;hour&quot;&gt;00&lt;/span&gt;   &lt;span class=&quot;minute&quot;&gt;00&lt;/span&gt;   &lt;span class=&quot;second&quot;&gt;00&lt;/span&gt; &lt;/div&gt; --&gt;&lt;/div&gt;</code></pre></blockquote></li><li><p>JS实现思路</p><blockquote><ul><li>倒计时需要三个时间：当前时间，活动开始时间，活动结束时间</li><li>活动没有开始前，活动版块不会出现在页面中；活动结束后，活动版块要在页面中删除</li><li><code>当前时间 &gt;= 活动开始时间</code>，表示当前活动正在进行，开始倒计时功能</li></ul><p><strong>倒计时实现原理</strong></p><ul><li><p>利用<strong>活动结束时间戳 - 当前时间戳</strong> ，得到的剩余时间（毫秒）</p></li><li><p>把<code>剩余时间（毫秒）/ 1000</code>得到对应的秒数，然后将秒数转换为对应的<strong>天、时、分、秒</strong></p></li><li><p>然后利用定时器，每过1秒钟就更新下时间</p></li><li><p>秒数转换成天、时、分、秒公式</p></li><li><p>我们知道 1天 &#x3D; 24小时，1小时 &#x3D; 60分，1分 &#x3D; 60秒，如果当前为 n 天，则 <code>总秒数 = n * 60 * 60 * 24</code></p></li><li><p>天数：<code>day = parseInt(总秒数 / 24 / 60 / 60)</code></p></li><li><p>小时：<code>hour = parseInt(总秒数 / 60 / 60 % 24 )</code></p></li><li><p><strong>如果不考虑天数</strong>，也就是所有天数的时间也按小时来算，<code>hour=parseInt(总秒数 / 60 / 60 )</code></p></li><li><p>分钟：<code>minutes=parseInt(总秒数 / 60 % 60)</code></p></li><li><p>秒数：<code>secondes=parseInt(总秒数 % 60)</code></p></li></ul></blockquote></li><li><p>实现步骤</p><blockquote><ul><li>第一步：创建DOM元素，添加到页面</li><li>第二步：创建 countDown 函数<ul><li>这个函数有两个参数，分别代表<strong>开始时间</strong>和<strong>结束时间</strong>，只要调用这个函数，传入对应实参，就能实现<strong>倒计时</strong>功能</li></ul></li><li>第三步：完善 countDown 函数功能<ul><li>检测是否传了两个参数</li><li>传的类型是否是时间对象</li><li>是否满足 <code>endDate</code> 大于 <code>startDate</code></li><li>如果不满足以上条件，则直接抛出对应的错误</li><li>同时开始定时器，每隔<code>1</code>秒更新下时间，实现倒计时功能,每隔一秒就检查活动是否开始&#x2F;结束。</li></ul></li><li>第四步：判断活动是否结束<ul><li><code>如果当前时间 &gt; 活动结束时间</code>，则表明活动结束，将活动版块从页面移除</li></ul></li><li>第五步：判断活动是否开始<ul><li>如果<code>活动开始时间 &gt; 当前时间</code>，则表示活动开始，在活动版块插入页面中（显示）</li><li>用<code>活动结束时间戳 - 当前时间戳</code>得到的毫秒数，转换成秒。</li><li>最后将秒数，换算成对应<strong>时，分，秒</strong>，更新到页面中</li></ul></li><li>第六步：优化细节<ul><li>如果<strong>时，分</strong>没有变化，则不需要再次更新 <code>DOM</code>，只有不相同时，才需要更新 <code>DOM</code></li><li>创建一个<strong>对象</strong>，用来前面的时，分，然后拿 <strong>对象中的时，分</strong>与<strong>现在的</strong>对比，如果不相同则更新 DOM，同时把自身的值也更新为最新的，否则啥也不做</li><li>用户刚打开页面，活动已经开始了，则需要立马显示倒计时，而不用等到 1 秒后，才开始显示元素，然后显示对应时间</li><li>所以把定时器需要执行的代码封装到函数<code>upDate</code> 中，然后在定时器之前，先调用下<code>upDate</code>函数</li></ul></li></ul></blockquote></li><li><p>完整 js代码</p><blockquote><pre><code>&lt;script&gt; var count = document.getElementById(&quot;J-countDown&quot;); //创建DOM元素，并插入到页面中 var frag = document.createDocumentFragment(); var title = document.createElement(&quot;div&quot;); title.innerText = &quot;京东秒杀&quot;; var main = document.createElement(&quot;div&quot;); var span1 = document.createElement(&quot;span&quot;); var span2 = document.createElement(&quot;span&quot;); var span3 = document.createElement(&quot;span&quot;); title.classList.add(&quot;title&quot;); main.classList.add(&quot;main&quot;); span1.classList.add(&quot;hour&quot;); span2.classList.add(&quot;minute&quot;); span3.classList.add(&quot;second&quot;); main.appendChild(span1); main.appendChild(span2); main.appendChild(span3); frag.appendChild(title); frag.appendChild(main); count.appendChild(frag);/*** countDown 倒计时函数* @param startDate 开始时间，日期对象* @param endDate 结束时间，日期对象*/ function countDown(startDate, endDate) &#123;//判断是否同时传了两个参数if (startDate === undefined || endDate === undefined)  throw new Error(&quot;必须同时传入两个日期，作为活动的开始时间和结束时间&quot;);//判断传入的是日期对象if (!startDate instanceof Date || !endDate instanceof Date)  throw new Error(&quot;必须传入两个正确的日期对象&quot;);//判断是否结束日期大于起始日期if (startDate.getTime() &gt;= endDate.getTime())  throw new Error(&quot;结束日期必须大于起始日期&quot;);</code></pre></blockquote><p>&#x2F;&#x2F; 用来记录前前面时，分<br>var time &#x3D; {<br>  hour: “00”,<br>  minute: “00”,<br>};<br>var timer &#x3D; setInterval(upDate, 1000);<br>upDate(); &#x2F;&#x2F;  进来就调用更新时间的函数<br>function upDate() {<br>  &#x2F;&#x2F;判断活动是否结束<br>  var nowDate &#x3D; new Date();<br>  if (nowDate.getTime() &gt; endDate.getTime()) {<br>&#x2F;&#x2F;活动结束，将元素从页面删除<br>count.parentNode.removeChild(“count”);<br>clearInterval(timer);<br>  }<br>  &#x2F;&#x2F;判断活动是否开始<br>  if (nowDate.getTime() &gt;&#x3D; startDate.getTime()) {<br>&#x2F;&#x2F;倒计时<br>var timeDiff &#x3D; (endDate.getTime() - nowDate.getTime()) &#x2F; 1000;<br>var hour &#x3D; parseInt(timeDiff &#x2F; 60 &#x2F; 60);<br>var minute &#x3D; parseInt((timeDiff &#x2F; 60) % 60);<br>var second &#x3D; parseInt(timeDiff % 60);<br>&#x2F;&#x2F; 更新DOM元素,对于不足两位的数，前面补0,<br>if (time.hour !&#x3D; hour) {<br>  span1.innerText &#x3D; (hour + “”).padStart(2, “0”);<br>  time.hour &#x3D; hour;<br>}</p></li></ol><blockquote></blockquote><pre><code>   if (time.minute != minute) &#123;     span2.innerText = (minute + &quot;&quot;).padStart(2, &quot;0&quot;);     time.minute = minute;   &#125;   span3.innerText = (second + &quot;&quot;).padStart(2, &quot;0&quot;); &#125;</code></pre><p>   }<br> }<br> var startDate &#x3D; new Date(“2023&#x2F;8&#x2F;25”);<br> var endDate &#x3D; new Date(“2023&#x2F;8&#x2F;27”);<br> countDown(startDate, endDate);</p><blockquote><p></script></p><pre><code></code></pre></blockquote><h3 id="案例-手写日历组件"><a href="#案例-手写日历组件" class="headerlink" title="案例-手写日历组件"></a>案例-手写日历组件</h3><ol><li>布局思路<blockquote><ul><li>其中<code>calendar-main</code>中的内容，是重点渲染的内容，后期通过 JS 动态生成</li></ul></blockquote></li></ol><ul><li>HTML布局<blockquote><pre><code>&lt;div class=&quot;calendar&quot;&gt;&lt;!-- calendar-menu start --&gt;&lt;div class=&quot;calendar-menu&quot;&gt; &lt;span class=&quot;prev-year&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;prev-month&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;current-date&quot;&gt;2022年12月&lt;/span&gt; &lt;span class=&quot;next-month&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;next-year&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;!--end calendar-menu --&gt;&lt;!-- calendar-week start --&gt;&lt;div class=&quot;calendar-week table&quot;&gt; &lt;div class=&quot;tr&quot;&gt;   &lt;div class=&quot;th&quot;&gt;一&lt;/div&gt;   &lt;div class=&quot;th&quot;&gt;二&lt;/div&gt;   &lt;div class=&quot;th&quot;&gt;三&lt;/div&gt;   &lt;div class=&quot;th&quot;&gt;四&lt;/div&gt;   &lt;div class=&quot;th&quot;&gt;五&lt;/div&gt;   &lt;div class=&quot;th&quot;&gt;六&lt;/div&gt;   &lt;div class=&quot;th&quot;&gt;日&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;!-- end calendar-week  --&gt;&lt;!-- calendar-main start --&gt;&lt;div class=&quot;calendar-main&quot;&gt; &lt;div class=&quot;table&quot;&gt;   &lt;div class=&quot;tr&quot;&gt;     &lt;div class=&quot;td prev-month&quot;&gt;28&lt;/div&gt;</code></pre></blockquote></li></ul><blockquote><pre><code> &lt;div class=&quot;td prev-month&quot;&gt;29&lt;/div&gt; &lt;div class=&quot;td prev-month&quot;&gt;30&lt;/div&gt; &lt;div class=&quot;td&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;td&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;td&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;td&quot;&gt;4&lt;/div&gt;</code></pre>   </div>   <div class="tr">     <div class="td active">5</div>     <div class="td">6</div>     <div class="td">7</div>     <div class="td">8</div>     <div class="td">9</div>     <div class="td">10</div>     <div class="td">11</div>   </div>   <div class="tr">     <div class="td">12</div>     <div class="td">13</div>     <div class="td">14</div>     <div class="td">15</div>     <div class="td">16</div>     <div class="td">17</div>     <div class="td">18</div>   </div>   <div class="tr">     <div class="td">19</div>     <div class="td">20</div>     <div class="td">21</div>     <div class="td">22</div>     <div class="td">23</div>     <div class="td">24</div>     <div class="td">25</div>   </div>   <div class="tr">     <div class="td current">26</div>     <div class="td">27</div>     <div class="td">28</div>     <div class="td">29</div>     <div class="td">30</div>     <div class="td">31</div>     <div class="td next-month">1</div>   </div>   <div class="tr">     <div class="td next-month">2</div>     <div class="td next-month">3</div>     <div class="td next-month">4</div>     <div class="td next-month">5</div>     <div class="td next-month">6</div>     <div class="td next-month">7</div>     <div class="td next-month">8</div>   </div> </div></div><!-- end calendar-main  --></div>```</blockquote><ul><li>CSS布局<blockquote><pre><code>&lt;style&gt;.calendar &#123;  width: 300px;  border: 1px solid #ddd;  padding: 20px;  box-shadow: 0 0 5px #ddd;  border-radius: 5px;  margin: 100px;&#125;/* calendar-menu start */.calendar-menu &#123;  display: flex;&#125;.calendar-menu span &#123;  color: #898484;  user-select: none;  cursor: pointer;&#125;.calendar-menu .current-date &#123;  color: #000;  flex-grow: 1;  text-align: center;&#125;.calendar-menu .prev-year &#123;  margin-right: 20px;&#125;.calendar-menu .next-year &#123;  margin-left: 20px;&#125;/* end calendar-menu *//* calendar-week start */.calendar .table &#123;  display: table;  width: 100%;&#125;.calendar .tr &#123;  display: table-row;&#125;.table .tr .th,.table .tr .td &#123;  display: table-cell;  height: 35px;  font-size: 12px;  text-align: center;  vertical-align: middle;  cursor: pointer;&#125;.table .tr .th &#123;  padding-top: 15px;  border-bottom: 1px solid #ddd;&#125;/* end calendar-week *//* calendar-main start */.table .tr .td.prev-month,.table .tr .td.next-month &#123;  color: rgb(194, 194, 194);&#125;/* 今日 */.table .tr .td.current &#123;  background-color: rgb(232, 6, 6);  color: #fff;  font-weight: bold;&#125;/* 鼠标滑动 */.table .tr .td:hover &#123;  outline: 1px solid #ddd;&#125;/* 鼠标点击 */.table .tr .td.active &#123;  outline: 2px solid rgb(244, 31, 102);&#125;/* end calendar-main */&lt;/style&gt;</code></pre></blockquote></li></ul><ol start="2"><li><p>JS 实现思路</p><blockquote><p>关于日历的渲染，我们需要知道以下几方面信息</p><ul><li>1、<strong>当月有多少天</strong>，这样就可以知道当月从 1 号渲染到几号；并且通过这个函数可以知道上月最后一天的日期；</li><li>2、<strong>当月的第一天是星期几</strong>，这样就能知道当月 1 号的渲染位置</li><li>3、上月需要渲染天数对应的日期，（知道了当月第一天是星期几，就可以知道上月需要渲染的天数，同时还要知道上月最后一天是几号，就要以知道对应的日期）</li><li>4、下个月需要渲染的天数对应日期，保存在数组中。（<code>下月需要渲染天数 = 42 - 当月总天数 - 上月需要渲染的天数</code>，对应日期，从<code>1</code>号开始渲染到对应天数就可以）<blockquote><p>要注意：获取星期时，星期日的对应的数字是<code>0</code>，要处理</p></blockquote></li></ul></blockquote></li><li><p>书写相关的工具函数</p></li></ol><ul><li><p>获取对应年份的月份的总天数</p><blockquote><ul><li>既可以知道当月有多少天</li><li>也可以知道上月有多少天——&gt;得到上月最后一天的日期</li></ul><pre><code> function getMonthDay(year,month)&#123;var date=new Date(year,month,0);return date.getDate();&#125;</code></pre></blockquote></li><li><p>获取当月第一天是星期几</p><blockquote><pre><code> function getMonthWeek(year,month)&#123;var date=new Date(year,month-1,1);return date.getDay();   &#125;</code></pre></blockquote></li><li><p>将上月需要渲染天数对应的日期，保存在数组中</p><blockquote><pre><code> function getPrevMonth(year,month)&#123;//需要知道当月第一天是星期几var week=getMonthWeek(year,month);//得到上月需要渲染的天数,如果week=0表示周日，则需要上个月需要渲染6天weekCount=week===0?6:week-1;//需要知道上月最后一天的日期var prevCount=getMonthDay(year,month-1);var prevDate=[];//保存上月需要渲染的日期while(weekCount&gt;0)&#123;    //只要需要渲染的天数大于0就将上月的日期保存到数组中    prevDate.push(prevCount--);    weekCount--;&#125;return prevDate.reverse();&#125;</code></pre></blockquote></li><li><p>将下个月需要渲染的天数对应的日期，保存在数组中</p><blockquote><pre><code> function nextMonthDate(year,month)&#123;//需要知道当月第一天是星期几var week=getMonthWeek(year,month);//得到上月需要渲染的天数,如果week=0表示周日，则需要上个月需要渲染6天weekCount=week===0?6:week-1;//得到当月天数var monthDay=getMonthDay(year,month);</code></pre></blockquote><p>var nextDate&#x3D;[];&#x2F;&#x2F;保存下个月需要渲染的日期<br>var nextCount&#x3D;42-monthDay-weekCount;<br>for(var i&#x3D;1;i&lt;&#x3D;nextCount;i++){<br>nextDate.push(i)<br>}<br>return nextDate;<br>}</p><blockquote><pre><code></code></pre></blockquote></li></ul><ol start="4"><li><p>根据日期创建 td 结构数组</p><blockquote><ul><li>分别根据上月&#x2F;当月&#x2F;下月需要渲染的日期，生成对应 td 标签和样式，保存到不同数组里</li><li><code>map()</code>方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。</li><li>根据前面写的功能函数可知，上月、下月的日期已经保存在数组里，而当月需要渲染的日期有当月的天数决定</li></ul><pre><code>//根据上月需要渲染的日期，生成td标签和样式function creatTd1(arr)&#123; return arr.map(function(item)&#123;     var td=document.createElement(&quot;div&quot;);     td.className=&quot;td prev-month&quot;;     td.innerText=item;     return td; &#125;)&#125;//根据本月需要渲染的天数，生成td标签和样式function creatTd2(days)&#123; return arr.map(function(item)&#123;     var td=document.createElement(&quot;div&quot;);     td.className=&quot;td&quot;;     td.innerText=item;     return td; &#125;)&#125;//根据下月需要渲染的日期，生成td标签和样式function creatTd1(arr)&#123; return arr.map(function(item)&#123;     var td=document.createElement(&quot;div&quot;);     td.className=&quot;td next-month&quot;;     td.innerText=item;     return td; &#125;)&#125;</code></pre></blockquote></li><li><p>创建 render 渲染函数，根据对应年月来渲染出日历内容</p><blockquote><ul><li>调用功能函数得到需要渲染的日期</li><li>然后调用创建td结构的函数，得到保存了td结构和样式的数组</li><li>将上月、本月、下月的td结构数组拼接成一个新数组</li><li>根据新数组，创建6行7列的表格，并将这个表格插入到<code>table</code>里</li><li><strong>获取</strong><code>calendar-main</code>再把<code>table</code>插入到它里面<blockquote><p>注意：</p></blockquote></li><li>在渲染前，还要把原有内容清空</li></ul><pre><code>// 创建渲染函数，用来渲染 xxxx年xx月的日历表 function render(year,month)&#123;  //先拿到上月、当月、下月的日期  var prevMonth=getPrevMonth(year,month);  var currentMonth=getMonthDay(year,month);  var nextMonth=nextMonthDate(year,month);  //创建td结构  var td1=creatTd1(prevMonth);  var td2=creatTd2(currentMonth);  var td3=creatTd3(nextMonth);  //将td拼接成一个数组  var tds=td1.concat(td2,td3);  //获取calendar-main  var calendarMain=document.querySelector(&quot;.calendar-main&quot;);  //渲染前将原有内容清空  calendarMain.innerHTML=&quot;&quot;;  //将table插入到calendar-main中  calendarMain.appendChild(creatTable(tds))</code></pre></blockquote><p>  &#x2F;&#x2F;将tds插入到table中<br>  function creatTable(tds){<br>   var table&#x3D;document.createElement(“div”);<br>   table.className&#x3D;”table”;<br>   var n&#x3D;0;<br>   &#x2F;&#x2F;行<br>   for(var i&#x3D;0;i&lt;6;i++){<br>   var tr&#x3D;document.createElement(“div”);<br>   tr.className&#x3D;”tr”;<br>   &#x2F;&#x2F;列<br>   for(var j&#x3D;0;j&lt;7;j++){<br>       tr.appendChild(tds[n]);<br>       n++;<br>   }<br>   table.appendChild(tr);<br>   }<br>   return table;<br>  }<br>}</p><blockquote><pre><code></code></pre></blockquote></li></ol><ul><li><p>创建函数，用来获取当前的日期</p><blockquote><pre><code>function getNowDate()&#123;  var nowDate=new Date();  return &#123;      year:nowDate.getFullYear(),      month:nowDate.getMonth()+1,      date:nowDate.getDate(),  &#125;&#125;</code></pre></blockquote></li><li><p>调用 render 函数，来生成对应日历</p><blockquote><ul><li>给render函数传入当前年月</li></ul><pre><code>render(getNowDate().year, getNowDate().month)</code></pre></blockquote></li></ul><ol start="6"><li><p>今天的日期，背景要变成红色</p><blockquote><ul><li>改写上面创建当月<code>td</code>结构的函数</li><li>形参改为年月，在render函数里调用时，传入实参</li><li>获取当前日期(年、月、日)</li><li>通过传入的实参，获取实参月的总天数</li><li>在for循环创建td结构时，如果传入的年份等于当前年，传入的月份等于当前月、当前日等于i时，给该td添加样式</li></ul></blockquote></li><li><p>完善 render 函数</p><blockquote><ul><li>当前日历表头的xxxx年xx月日期，要更新为当前渲染的日期</li></ul><pre><code>function render(year, month) &#123;  // 日历头部日期显示为渲染日期  var dateDom = document.querySelector(&quot;.calendar-menu .current-date&quot;);  dateDom.innerText = dateDom.innerText = year + &quot;年 &quot; + month + &quot;月&quot;;</code></pre></blockquote></li></ol><p>  &#x2F;&#x2F; …..<br>}</p><blockquote><pre><code></code></pre></blockquote><ol start="8"><li><p>年月切换按扭事件处理</p><blockquote><ul><li>注意切换到第0月和第13月的时候，要处理一下</li></ul><pre><code>  var date = getNowDate();  var currentYear = date.year;  var currentMonth = date.month;  var currentDate = date.date;  render(currentYear, currentMonth);</code></pre></blockquote><p>  var prevYearDom &#x3D; document.querySelector(“.prev-year”);<br>  var nextYearDom &#x3D; document.querySelector(“.next-year”);<br>  var prevMonthDom &#x3D; document.querySelector(“.prev-month”);<br>  var nextMonthDom &#x3D; document.querySelector(“.next-month”);</p><blockquote></blockquote><p>  &#x2F;&#x2F;上一年<br>  prevYearDom.onclick &#x3D; function () {<br> currentYear–;<br> render(currentYear, currentMonth);<br>  };<br>  &#x2F;&#x2F;下一年<br>  nextYearDom.onclick &#x3D; function () {<br> currentYear++;<br> render(currentYear, currentMonth);<br>  };<br>  &#x2F;&#x2F;上一月<br>  prevMonthDom.onclick &#x3D; function () {<br> currentMonth–;<br> if (currentMonth &#x3D;&#x3D;&#x3D; 0) {<br>   currentMonth &#x3D; 12;<br>   currentYear–;<br> }<br> render(currentYear, currentMonth);<br>  };<br>  &#x2F;&#x2F;下一月<br>  nextMonthDom.onclick &#x3D; function () {<br> currentMonth++;<br> if (currentMonth &#x3D;&#x3D;&#x3D; 13) {<br>   currentMonth &#x3D; 1;<br>   currentYear++;<br> }<br> render(currentYear, currentMonth);<br>  };</p><blockquote><pre><code></code></pre></blockquote></li><li><p>选中对应日期</p><blockquote><ul><li>使用事件委托</li><li>选中日期后，添加样式</li><li>打印出当前的日期</li></ul><pre><code>  //选中对应日期  var calendarMain = document.querySelector(&quot;.calendar-main&quot;);  var prevEl = null; //前一个被选中的元素  calendarMain.onclick = function (e) &#123; var target = e.target; var bool = target.classList.contains(&quot;td&quot;); if (!bool) return; //将前一个选中元素的样式清除 if (prevEl) prevEl.classList.remove(&quot;active&quot;); //给被选中元素添加样式 target.classList.add(&quot;active&quot;); prevEl = target; console.log(      currentYear + &quot;年&quot; + currentMonth + &quot;月&quot; + target.innerText + &quot;日&quot;    );</code></pre></blockquote></li></ol><p>  }</p><blockquote><pre><code></code></pre></blockquote><ul><li><p>方式1：点击上月&#x2F;下月日期，不切换页面</p><blockquote><pre><code>calendarMain.onclick = function (e) &#123;//如果点击上/月日期，不切换页面，则：var _currentYear = currentYear;var _currentMonth = currentMonth;var prevBool = target.classList.contains(&quot;prev-month&quot;);var nextBool = target.classList.contains(&quot;next-month&quot;);if (prevBool) &#123;  _currentMonth--;  if (currentMonth === 0) &#123;    _currentMonth = 12;    _currentyear--;  &#125;&#125;if (nextBool) &#123;  _currentMonth++;  if (currentMonth === 13) &#123;    _currentMonth = 1;    _currentyear++;  &#125;&#125;//打印对应日期console.log(  _currentYear + &quot;年&quot; + _currentMonth + &quot;月&quot; + target.innerText + &quot;日&quot;);&#125;</code></pre></blockquote></li><li><p>方式2：点击上月&#x2F;下月日期，跳转到对应月份</p><blockquote><ul><li>再次修改创建当月td的函数，传入<code>selectDate</code>变量，里面保存当前选中的日</li><li>在for循环创建<code>td</code>时，如果i等于<code>selectDate</code>，就给它添加样式<blockquote><p>注意:</p></blockquote></li><li><code>selectDate</code>是字符串，i是数字，只能用<code>==</code>不能全等</li></ul><pre><code> calendarMain.onclick = function (e) &#123;var target = e.target;var bool = target.classList.contains(&quot;td&quot;);if (!bool) return;//将前一个选中元素的样式清除if (prevEl) prevEl.classList.remove(&quot;active&quot;);//给被选中元素添加样式target.classList.add(&quot;active&quot;);prevEl = target;//如果点击上/月日期，切换页面，则：var prevBool = target.classList.contains(&quot;prev-month&quot;);var nextBool = target.classList.contains(&quot;next-month&quot;);</code></pre></blockquote><p>if (prevBool) {<br>  currentMonth–;<br>  if (currentMonth &#x3D;&#x3D;&#x3D; 0) {<br>currentMonth &#x3D; 12;<br>currentYear–;<br>  }<br>  var selectDate &#x3D; target.innerText; &#x2F;&#x2F;保存被点击的日期<br>  render(currentYear, currentMonth, selectDate);<br>}<br>if (nextBool) {<br>  currentMonth++;<br>  if (currentMonth &#x3D;&#x3D;&#x3D; 13) {<br>currentMonth &#x3D; 1;<br>currentYear++;<br>  }<br>  var selectDate &#x3D; target.innerText; &#x2F;&#x2F;保存被点击的日期<br>  render(currentYear, currentMonth, selectDate);<br>}<br>&#x2F;&#x2F;打印对应日期<br>console.log(<br>  currentYear + “年” + currentMonth + “月” + target.innerText + “日”<br>);<br>};</p><blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><p><strong>更新 render函数</strong></p><pre><code>//selectDate 表示当前选中天数function render(year, month, selectDate) &#123;  if(selectDate)&#123;      var td2=creatTd2(year,month,selectDate);  &#125;else&#123;      var td2=creatTd2(year,month);  &#125;  //....&#125;</code></pre></blockquote><blockquote><p><strong>更新 createTd3 函数</strong></p><pre><code> //根据本月需要渲染的天数，生成td标签和样式 function creatTd2(year,month,selectDate)&#123;   var result=[];   var currentYear=getNowDate().year;   var currentMonth=getNowDate().month;   var currentDate=getNowDate().date;</code></pre></blockquote><p>   var days&#x3D;getMonthDay(year,month);<br>   for(var i&#x3D;1;i&lt;&#x3D;days;i++){<br>       var td&#x3D;document.createElement(“div”);<br>       if(year&#x3D;&#x3D;&#x3D;currentYear&amp;&amp;month&#x3D;&#x3D;&#x3D;currentMonth&amp;&amp;currentDate&#x3D;&#x3D;&#x3D;i){<br>           td.className&#x3D;”td current”<br>       }else{<br>           td.className&#x3D;”td”;<br>       }<br>       if(selectDate &amp;&amp; selectDate&#x3D;&#x3D;i) {<br>           td.classList.add(“active”);<br>           prevEl&#x3D;td;<br>       }<br>       td.innerText&#x3D;i;<br>       result.push(td)<br>   }<br>   return result;<br>}</p><blockquote><pre><code></code></pre></blockquote><ol start="10"><li><p>优化</p><blockquote><ul><li>如果现在翻到12月，今天的日期在12月的页面可以看到。此时，今天的日期也应该有样式</li><li>把<code>creatTd1</code>、<code>creatTd3</code>也修改成<code>creatTd2</code>那样</li><li>参数为年月，根据传入的参数，得到上一个月的年月</li><li>参数为年月，根据传入的参数，得到下一个月的年月</li><li>在函数内获取今年今月今日，和上一个月(下月)的年月做比较，如果相同就加样式</li></ul><pre><code> //根据上月需要渲染的日期，生成td标签和样式 function creatTd1(year,month)&#123;   //获取今天的日期   var currentYear=getNowDate().year;   var currentMonth=getNowDate().month;   var currentDate=getNowDate().date;</code></pre></blockquote><p>   &#x2F;&#x2F;获取上个月的年月<br>   var prevYear&#x3D;year;<br>   var prevMonth&#x3D;month-1;<br>   if(prevMonth&#x3D;&#x3D;&#x3D;0){<br>   prevMonth&#x3D;&#x3D;&#x3D;12;<br>   prevYear&#x3D;year-1;<br>   }<br>   var arr&#x3D;getPrevMonth(year,month);</p><blockquote></blockquote><p>   return arr.map(function(item){<br>   var td&#x3D;document.createElement(“div”);<br>   td.className&#x3D;”td prev-month”;<br>&#x2F;&#x2F; 判断当前月的前一个月中的某个日期为当前日期时<br>   if(currentYear&#x3D;&#x3D;&#x3D;prevYear&amp;&amp;currentMonth&#x3D;&#x3D;&#x3D;prevMonth&amp;&amp;currentDate&#x3D;&#x3D;&#x3D;item){<br>   td.classList.add(“current”)<br>   }<br>   td.innerText&#x3D;item;<br>   return td;<br>   })<br>}<br> &#x2F;&#x2F;根据下月需要渲染的日期，生成td标签和样式<br> function creatTd3(year,month){<br>   &#x2F;&#x2F;获取今天的日期<br>   var currentYear&#x3D;getNowDate().year;<br>   var currentMonth&#x3D;getNowDate().month;<br>   var currentDate&#x3D;getNowDate().date;</p><blockquote></blockquote><p>   &#x2F;&#x2F;获取上个月的年月<br>   var nextYear&#x3D;year;<br>   var nextMonth&#x3D;month+1;<br>   if(nextMonth&#x3D;&#x3D;&#x3D;13){<br>   nextMonth&#x3D;&#x3D;&#x3D;1;<br>   nextYear&#x3D;year+1;<br>   }<br>   var arr&#x3D;nextMonthDate(year,month);<br>   return arr.map(function(item){<br>   var td&#x3D;document.createElement(“div”);<br>   td.className&#x3D;”td next-month”;<br>   if(currentYear&#x3D;&#x3D;&#x3D;nextYear&amp;&amp;currentMonth&#x3D;&#x3D;&#x3D;nextMonth&amp;&amp;currentDate&#x3D;&#x3D;&#x3D;item){<br>   td.classList.add(“current”)<br>   }<br>   td.innerText&#x3D;item;<br>   return td;<br>   })<br>}</p><blockquote><pre><code></code></pre></blockquote></li><li><p>封装完整版工具函数 calendar.js</p><blockquote><ul><li>保存功能性函数</li></ul><pre><code>//1、获取当月的天数function getMonthDay(year,month)&#123;var date=new Date(year,month,0);return date.getDate();&#125;// console.log(getMonthDay(2023,8))</code></pre></blockquote><p>&#x2F;&#x2F;2、获取当月第一天是星期几<br>function getMonthWeek(year,month){<br>var date&#x3D;new Date(year,month-1,1);<br>return date.getDay();<br>}<br>&#x2F;&#x2F; console.log(getMonthWeek(2023,8))</p><blockquote></blockquote><p>&#x2F;&#x2F;3、把上月需要渲染的日期存入数组：<br>function getPrevMonth(year,month){<br>&#x2F;&#x2F;需要知道当月第一天是星期几<br>var week&#x3D;getMonthWeek(year,month);<br>&#x2F;&#x2F;得到上月需要渲染的天数,如果week&#x3D;0表示周日，则需要上个月需要渲染6天<br>weekCount&#x3D;week&#x3D;&#x3D;&#x3D;0?6:week-1;<br>&#x2F;&#x2F;需要知道上月最后一天的日期<br>var prevCount&#x3D;getMonthDay(year,month-1);<br>var prevDate&#x3D;[];&#x2F;&#x2F;保存上月需要渲染的日期<br>while(weekCount&gt;0){<br>&#x2F;&#x2F;只要需要渲染的天数大于0就将上月的日期保存到数组中<br>prevDate.push(prevCount–);<br>weekCount–;<br>}<br>return prevDate.reverse();<br>}<br>&#x2F;&#x2F; console.log(getPrevMonth(2023,7))</p><blockquote></blockquote><p>&#x2F;&#x2F; 4、下个月需要渲染的天数对应的日期，保存在数组中<br>function nextMonthDate(year,month){<br> &#x2F;&#x2F;需要知道当月第一天是星期几<br> var week&#x3D;getMonthWeek(year,month);<br> &#x2F;&#x2F;得到上月需要渲染的天数,如果week&#x3D;0表示周日，则需要上个月需要渲染6天<br> weekCount&#x3D;week&#x3D;&#x3D;&#x3D;0?6:week-1;<br> &#x2F;&#x2F;得到当月天数<br> var monthDay&#x3D;getMonthDay(year,month);</p><blockquote></blockquote><p>var nextDate&#x3D;[];&#x2F;&#x2F;保存下个月需要渲染的日期<br>var nextCount&#x3D;42-monthDay-weekCount;<br>for(var i&#x3D;1;i&lt;&#x3D;nextCount;i++){<br>nextDate.push(i)<br>}<br>return nextDate;<br>}<br>&#x2F;&#x2F; console.log(nextMonthDate(2023,7))</p><blockquote></blockquote><p>&#x2F;&#x2F;根据上月需要渲染的日期，生成td标签和样式<br>function creatTd1(year,month){<br>&#x2F;&#x2F;获取今天的日期<br>var currentYear&#x3D;getNowDate().year;<br>var currentMonth&#x3D;getNowDate().month;<br>var currentDate&#x3D;getNowDate().date;</p><blockquote></blockquote><p>&#x2F;&#x2F;获取上个月的年月<br>var prevYear&#x3D;year;<br>var prevMonth&#x3D;month-1;<br>if(prevMonth&#x3D;&#x3D;&#x3D;0){<br>prevMonth&#x3D;&#x3D;&#x3D;12;<br>prevYear&#x3D;year-1;<br>}<br>var arr&#x3D;getPrevMonth(year,month);</p><blockquote></blockquote><p>return arr.map(function(item){<br>var td&#x3D;document.createElement(“div”);<br>td.className&#x3D;”td prev-month”;<br> &#x2F;&#x2F; 判断当前月的前一个月中的某个日期为当前日期时<br>if(currentYear&#x3D;&#x3D;&#x3D;prevYear&amp;&amp;currentMonth&#x3D;&#x3D;&#x3D;prevMonth&amp;&amp;currentDate&#x3D;&#x3D;&#x3D;item){<br>    td.classList.add(“current”)<br>}<br>td.innerText&#x3D;item;<br>return td;<br>})<br>}<br>&#x2F;&#x2F;根据本月需要渲染的天数，生成td标签和样式<br>function creatTd2(year,month,selectDate){<br>var result&#x3D;[];<br>var currentYear&#x3D;getNowDate().year;<br>var currentMonth&#x3D;getNowDate().month;<br>var currentDate&#x3D;getNowDate().date;</p><blockquote></blockquote><p>var days&#x3D;getMonthDay(year,month);<br>for(var i&#x3D;1;i&lt;&#x3D;days;i++){<br>var td&#x3D;document.createElement(“div”);<br>if(year&#x3D;&#x3D;&#x3D;currentYear&amp;&amp;month&#x3D;&#x3D;&#x3D;currentMonth&amp;&amp;currentDate&#x3D;&#x3D;&#x3D;i){<br>    td.className&#x3D;”td current”<br>}else{<br>    td.className&#x3D;”td”;<br>}<br>if(selectDate &amp;&amp; selectDate&#x3D;&#x3D;i) {<br>    td.classList.add(“active”);<br>    prevEl&#x3D;td;<br>}<br>td.innerText&#x3D;i;<br>result.push(td)<br>}<br>return result;<br>}<br>&#x2F;&#x2F;根据下月需要渲染的日期，生成td标签和样式<br>function creatTd3(year,month){<br>&#x2F;&#x2F;获取今天的日期<br>var currentYear&#x3D;getNowDate().year;<br>var currentMonth&#x3D;getNowDate().month;<br>var currentDate&#x3D;getNowDate().date;</p><blockquote></blockquote><p>&#x2F;&#x2F;获取上个月的年月<br>var nextYear&#x3D;year;<br>var nextMonth&#x3D;month+1;<br>if(nextMonth&#x3D;&#x3D;&#x3D;13){<br>nextMonth&#x3D;&#x3D;&#x3D;1;<br>nextYear&#x3D;year+1;<br>}<br>var arr&#x3D;nextMonthDate(year,month);<br>return arr.map(function(item){<br>var td&#x3D;document.createElement(“div”);<br>td.className&#x3D;”td next-month”;<br>if(currentYear&#x3D;&#x3D;&#x3D;nextYear&amp;&amp;currentMonth&#x3D;&#x3D;&#x3D;nextMonth&amp;&amp;currentDate&#x3D;&#x3D;&#x3D;item){<br>    td.classList.add(“current”)<br>}<br>td.innerText&#x3D;item;<br>return td;<br>})<br>}<br>&#x2F;&#x2F; 创建渲染函数，用来渲染 xxxx年xx月的日历表<br>function render(year,month,selectDate){<br>&#x2F;&#x2F;更新日历头部<br>var dateDom&#x3D;document.querySelector(“.calendar-menu .current-date”);<br>dateDom.innerText&#x3D;year+”年”+month+”月”;<br>&#x2F;&#x2F;先拿到上月、当月、下月的日期<br>var prevMonth&#x3D;getPrevMonth(year,month);<br>var currentMonth&#x3D;getMonthDay(year,month);<br>var nextMonth&#x3D;nextMonthDate(year,month);<br>&#x2F;&#x2F;创建td结构<br>var td1&#x3D;creatTd1(year,month);<br>if(selectDate){<br>var td2&#x3D;creatTd2(year,month,selectDate);<br>}else{<br>var td2&#x3D;creatTd2(year,month);<br>}<br>var td3&#x3D;creatTd3(year,month);</p><blockquote></blockquote><p>&#x2F;&#x2F;将td拼接成一个数组<br>var tds&#x3D;td1.concat(td2,td3);<br>&#x2F;&#x2F;获取calendar-main<br>var calendarMain&#x3D;document.querySelector(“.calendar-main”);<br>&#x2F;&#x2F;渲染前将原有内容清空<br>calendarMain.innerHTML&#x3D;””;<br>&#x2F;&#x2F;将table插入到calendar-main中<br>calendarMain.appendChild(creatTable(tds))</p><blockquote></blockquote><p>&#x2F;&#x2F;将tds插入到table中<br>function creatTable(tds){<br>var table&#x3D;document.createElement(“div”);<br>table.className&#x3D;”table”;<br>var n&#x3D;0;<br>&#x2F;&#x2F;行<br>for(var i&#x3D;0;i&lt;6;i++){<br>    var tr&#x3D;document.createElement(“div”);<br>    tr.className&#x3D;”tr”;<br>    &#x2F;&#x2F;列<br>    for(var j&#x3D;0;j&lt;7;j++){<br>        tr.appendChild(tds[n]);<br>        n++;<br>    }<br>    table.appendChild(tr);<br>}<br>return table;<br>}<br>}<br>function getNowDate(){<br>var nowDate&#x3D;new Date();<br>return {<br>year:nowDate.getFullYear(),<br>month:nowDate.getMonth()+1,<br>date:nowDate.getDate(),<br>}<br>}</p><blockquote><pre><code></code></pre></blockquote></li><li><p>完整版日历组件开发</p><blockquote><pre><code>&lt;script&gt;  var date = getNowDate();  var currentYear = date.year;  var currentMonth = date.month;  var currentDate = date.date;  render(currentYear, currentMonth);</code></pre></blockquote><p>  var prevYearDom &#x3D; document.querySelector(“.prev-year”);<br>  var nextYearDom &#x3D; document.querySelector(“.next-year”);<br>  var prevMonthDom &#x3D; document.querySelector(“.prev-month”);<br>  var nextMonthDom &#x3D; document.querySelector(“.next-month”);</p><blockquote></blockquote><p>  &#x2F;&#x2F;上一年<br>  prevYearDom.onclick &#x3D; function () {<br>currentYear–;<br>render(currentYear, currentMonth);<br>  };<br>  &#x2F;&#x2F;下一年<br>  nextYearDom.onclick &#x3D; function () {<br>currentYear++;<br>render(currentYear, currentMonth);<br>  };<br>  &#x2F;&#x2F;上一月<br>  prevMonthDom.onclick &#x3D; function () {<br>currentMonth–;<br>if (currentMonth &#x3D;&#x3D;&#x3D; 0) {<br>  currentMonth &#x3D; 12;<br>  currentYear–;<br>}<br>render(currentYear, currentMonth);<br>  };<br>  &#x2F;&#x2F;下一月<br>  nextMonthDom.onclick &#x3D; function () {<br>currentMonth++;<br>if (currentMonth &#x3D;&#x3D;&#x3D; 13) {<br>  currentMonth &#x3D; 1;<br>  currentYear++;<br>}<br>render(currentYear, currentMonth);<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F;选中对应日期<br>  var calendarMain &#x3D; document.querySelector(“.calendar-main”);<br>  var prevEl &#x3D; null; &#x2F;&#x2F;前一个被选中的元素<br>  calendarMain.onclick &#x3D; function (e) {<br>var target &#x3D; e.target;<br>var bool &#x3D; target.classList.contains(“td”);<br>if (!bool) return;<br>&#x2F;&#x2F;将前一个选中元素的样式清除<br>if (prevEl) prevEl.classList.remove(“active”);<br>&#x2F;&#x2F;给被选中元素添加样式<br>target.classList.add(“active”);<br>prevEl &#x3D; target;<br>&#x2F;&#x2F;如果点击上&#x2F;月日期，切换页面，则：<br>var prevBool &#x3D; target.classList.contains(“prev-month”);<br>var nextBool &#x3D; target.classList.contains(“next-month”);</p><blockquote></blockquote><p>  if (prevBool) {<br>currentMonth–;<br>if (currentMonth &#x3D;&#x3D;&#x3D; 0) {<br>  currentMonth &#x3D; 12;<br>  currentYear–;<br>}<br>var selectDate &#x3D; target.innerText; &#x2F;&#x2F;保存被点击的日期<br>render(currentYear, currentMonth, selectDate);<br>  }<br>  if (nextBool) {<br>currentMonth++;<br>if (currentMonth &#x3D;&#x3D;&#x3D; 13) {<br>  currentMonth &#x3D; 1;<br>  currentYear++;<br>}<br>var selectDate &#x3D; target.innerText; &#x2F;&#x2F;保存被点击的日期<br>render(currentYear, currentMonth, selectDate);<br>  }<br>  &#x2F;&#x2F;打印对应日期<br>  console.log(<br>currentYear + “年” + currentMonth + “月” + target.innerText + “日”<br>  );<br>};</p><blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（十五）</title>
      <link href="/2023/12/08/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89/"/>
      <url>/2023/12/08/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="JavaScript-继承的-6-种方式、应用场景，内置构造函数"><a href="#JavaScript-继承的-6-种方式、应用场景，内置构造函数" class="headerlink" title="JavaScript 继承的 6 种方式、应用场景，内置构造函数"></a>JavaScript 继承的 6 种方式、应用场景，内置构造函数</h2><h3 id="一、什么是继承呢-？"><a href="#一、什么是继承呢-？" class="headerlink" title="一、什么是继承呢 ？"></a>一、什么是继承呢 ？</h3><blockquote><ul><li>首先继承是一种关系，类（Class）与类之间的关系</li><li>JS 中<strong>没有类</strong>,但是可以通过构造函数<strong>模拟类</strong>，然后通过原型来实现继承。</li><li>继承是为了实现数据共享，同时对于实现<strong>代码的复用</strong>非常有用</li></ul></blockquote><blockquote><blockquote><p>我们先来看下面两个类<br><img src="继承-类.png"></p></blockquote></blockquote><blockquote><p><strong>解说</strong></p><ul><li><code>People</code>类拥有的属性和方法<code>Student</code>类都有，同时<code>Student</code>类还扩展了一些自已独有的属性和方法</li><li>我们可以按上图结构定义<code>People</code>类，然后再定义一个<code>Student</code>类，在<code>Student</code>类上只需要定义<code>People</code>类上没有的属性和方法。</li><li>然后用<code>Student</code>类继承<code>People</code>类，这样<code>Student</code>类就可以直接拥有<code>People</code>类的所有属性和方法了</li></ul></blockquote><blockquote><blockquote><p><code>Student</code> 类继承 <code>People</code> 类，在这个继承关系中</p></blockquote><ul><li><code>People</code> 类称为“父类”（或 “超类”、“基类”）</li><li><code>Student</code> 类称为“子类”（或“派生类”）</li><li><code>Student</code> 子类可以访问 <code>People</code> 父类的所有属性和方法</li><li><code>Student</code> “是一种” <code>People</code> ，两个继承类之间是<code>“is a kind of”</code>关系</li><li>继承描述了两个类之间的<code>“ is a kind of &quot;</code>关系，也就是两个类之间存在<code>&quot;is a kind of &quot;</code>关系，就可以实现继承。</li></ul></blockquote><ul><li>接下来，我们来学习下，如何实现类与类之间的继承关系。</li></ul><blockquote><p><strong>JavaScript 实现继承有以下 6 种方式</strong></p><ul><li>原型链实现继承</li><li>借用构造函数（经典继承）</li><li>组合继承</li><li>原型式继承</li><li>寄生式继承</li><li>寄生式组合继承<blockquote><p>实现继承的关键在于：子类必须拥有父类的全部公有（属性和方法），<strong>同时</strong>子类还应该能定义自己特有的属性和方法</p></blockquote></li></ul></blockquote><h3 id="二、通过原型链实现继承"><a href="#二、通过原型链实现继承" class="headerlink" title="二、通过原型链实现继承"></a>二、通过原型链实现继承</h3><blockquote><p>接下来，我们来学习下，如何<strong>利用原型链</strong>实现 <code>Student</code>类 继承 <code>People</code>类</p></blockquote><h4 id="原型链实现继承的本质"><a href="#原型链实现继承的本质" class="headerlink" title="原型链实现继承的本质"></a>原型链实现继承的本质</h4><blockquote><p>让子类构造函数的<code>prototype</code> ，指向父类的一个<strong>实例</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 子类 Student 父类 People</span>Student<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以上原型链方式实现继承，Student 的实例就可以访问 Popele类原型上的所有方法和属性</span></code></pre></blockquote><blockquote><ul><li>通过前面的学习我们知道，每个构造函数都有一个 <code>prototype</code> 属性，这个属性指向一个对象。</li><li>构造函数构造出来的实例对象，可以访问构造函数 <code>prototype</code> 属性上所有方法和属性。</li><li>如果<code>子类构造函数.prototype = 父类的实例</code> ，那<strong>子类的实例</strong>就可以通过原型链查找，访问到父类构造函数原型 <code>prototype</code> 上面的所有属性和方法。</li></ul></blockquote><ol><li>Student 类继承 People 类关系图<img src="通过原型链继承.png"></li></ol><blockquote><p>原型链实现继承本质上是<strong>扩展</strong>了原型的搜索机制。</p><ul><li>实例在访问某个属性时，会在自己身上找，找不到，就会去原型上找</li><li>原型上找不到，就会去继承的实例的原型上去找，一层层向上找，找到就不找</li><li>找不到就会一直找到原型链的终点（Object 原型的原型，为 null）</li></ul></blockquote><ul><li>Student 类 与 People 类 通过原型链实现继承，代码如下<blockquote><pre><code>// 父类  人类function People(name, age, sex) &#123;this.name = name;this.age = age;this.sex = sex;&#125;People.prototype.sayHello = function () &#123;console.log(  &quot;我是&quot; + this.name + &quot;今年&quot; + this.age + &quot;岁，我是&quot; + this.sex + &quot;生&quot;);&#125;;People.prototype.sleep = function () &#123;console.log(this.name + &quot;开始睡觉了zzzzz&quot;);&#125;;</code></pre></blockquote>&#x2F;&#x2F; 子类  学生类<br>function Student(name, age, sex, scholl, sid) {<br>this.name &#x3D; name;<br>this.age &#x3D; age;<br>this.sex &#x3D; sex;<br>this.scholl &#x3D; scholl;<br>this.sid &#x3D; sid;<br>}<blockquote></blockquote>&#x2F;&#x2F; 实现继承   一定要先实现继承，再添加新的方法和属性<br>Student.prototype &#x3D; new People();<blockquote></blockquote>Student.prototype.study &#x3D; function () {<br>console.log(this.name + “正在学习！”);<br>};<br>Student.prototype.exam &#x3D; function () {<br>console.log(this.name + “正在考试，加油！！”);<br>};<blockquote></blockquote>&#x2F;&#x2F; 创建父类 实例<br>var laoliu &#x3D; new People(“老刘”, 38, “男”);<br>laoliu.sayHello();&#x2F;&#x2F;我是老刘今年38岁，我是男生<blockquote></blockquote>&#x2F;&#x2F; 创建子类实例<br>var cuihua &#x3D; new Student(“翠花”, 18, “女”, “雅礼中学”, 20800);<br>cuihua.sayHello();&#x2F;&#x2F;我是翠花今年18岁，我是女生<br>cuihua.sleep();&#x2F;&#x2F;翠花开始睡觉了zzzzz<br>cuihua.study();&#x2F;&#x2F;翠花正在学习！<br>cuihua.exam();&#x2F;&#x2F;翠花正在考试，加油！！<blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><ul><li>一定要先实现继承，再添加新的方法和属性<ul><li><code>Student.prototype = new People();</code>改变了子类的<code>prototype</code></li><li>通过<code>Student.prototype</code>添加的方法，实际上是加在了<code>new People()</code>身上</li><li>如果先添加方法，再改变，就找不到该方法了</li></ul></li><li>父类和子类身上都有<code>name</code>、<code>sex</code>、<code>age</code>属性</li><li>写<code>Student.prototype = new People();</code>的时候，不用输入参数，输了也会被新创建的子类替代</li></ul></blockquote><ol start="2"><li><p>注意事项 1 - 重写父类方法</p><blockquote><ul><li>子类有时候需要覆盖父类的方法，或者增加父类没有的方法。这些方法必须<strong>在原型赋值之后再添加</strong>到原型上去。</li><li>子类覆盖父类上已有的方法，我们称为重写 （override）父类方法</li></ul><pre><code>// 以下代码必需写在 Student.prototype = new People(); 之后// 也可以重写（override）父类的 sayHello方法Student.prototype.sayHello = function () &#123;  console.log(&quot;大家好，我是&quot; + this.scholl + &quot;学校的学生,我叫&quot; + this.name);&#125;;</code></pre></blockquote></li><li><p>注意事项 2 - 子类的 <code>constructor</code> 指向问题</p><blockquote><p>复习知识点：</p><ul><li>任何函数都有一个<code>prototype</code>属性，<code>prototype</code>属性值是一个<strong>对象</strong>，这个对象有一个<code>constructor</code>属性，指向这个函数本身</li><li>构造函数的<code>prototype</code>属性是它的实例的原型,在构造函数的实例中有一个隐含的属性<code>__proto__</code>，指向该构造函数的原型<code>prototype</code></li><li>构造函数构造的<strong>实例</strong>可以直接访问<code>prototype</code>对象身上的属性和方法；因此<code>实例.constructor === 构造函数</code> 那就说明这个实例是这个构造函数的实例<blockquote><p>实例会沿着原型链<code>__proto__</code>一层层查找<code>constructor</code>，只有原型<code>prototype</code>才有<code>constructor</code>属性</p></blockquote></li></ul></blockquote></li></ol><img src="子类的constructor指向问题.png"><blockquote><ul><li>因为<code>Student.prototype=new People()</code>使<code>Student</code>类继承<code>People</code>类</li></ul><pre><code>Student.prototype=new People();new People().constructor===People;Student.prototype.consructor===People;cuihua.__proto__===new People();cuihua.__proto__.constuctor===People;因为构造函数构造的实例可以直接访问其构造函数的`prototype`对象身上的属性和方法所以：cuihua.constructor===People</code></pre></blockquote><blockquote><ul><li>因此<code>Student.prototype</code>中的<code>constructor</code>属性被重写为指向<code>People</code></li><li>即<code>Student</code>的所有实例访问到的<code>constructor</code>都指向<code>People</code></li><li>所以造成了子类原型中的<code>constructor</code>被丢失，当访问子类原型中的<code>constructor</code>时，其本质是通过原型链查找，最终查找到的是父类的构造函数</li></ul></blockquote><ol start="4"><li><p>注意事项 3 - instanceof</p><blockquote><ul><li><code>instanceof</code>操作符确认<strong>实例与构造函数的关系</strong></li><li>如果实例的原型链中出现过对应的构造函数的原型，则实例为对应构造函数的实例</li></ul><pre><code>cuihua instanceof Student; // truecuihua instanceof People; // truecuihua instanceof Object; // true</code></pre></blockquote></li><li><p>注意事项 4</p><blockquote><p>从继承的角度来看原型链</p><ul><li>任意函数的默认<code>prototype</code>原型都是一个<code>Object</code>的实例</li><li>这就意味着函数的默认原型中有一个<code>__proto__</code>属性指向<code>Object.prototype</code><blockquote><p>声明一个构造函数<code>People</code></p></blockquote></li></ul><pre><code>function People() &#123;&#125;People.prototype.__proto__ === Object.prototype; // truenew People().__proto__.__proto__ === Object.prototype; // true</code></pre><img src="继承的角度看原型链.png"></blockquote></li></ol><blockquote><ul><li>根据上图可知，任何函数其实都继承于<code>Object</code></li><li>这就是为什么自定义类型能继承（访问）<code>Object</code> 原型上的<code>toString()</code>、<code>valueOf()</code>等方法的原型</li></ul></blockquote><ol start="6"><li>原型链实现继承的不足之一<blockquote><ul><li>实例拥有其构造函数的所有属性和方法(可访问可修改)，并且能够调用其原型里的所有方法</li><li>如果<strong>原型中</strong>某个属性的值是<strong>引用类型值</strong>时,这个值会被所有实例共享。当实例修改这个属性值时，其它实例身上对应的这个属性值也被改变了</li><li>这也是为什么<strong>属性通常会在构造函数中定义</strong>，而不会定义在原型上的原因</li><li>原型链实现继承，子类的原型实际上变成父类的实例，则就意味<strong>父类实例身上的属性变成了子类原型属性</strong>；</li><li><strong>所有子类的实例都能访问这个属性或修改属性值</strong>,一旦子类的实例修改引用类型的属性值，那么其它实例身上对应的这个属性值也被改变了<blockquote><p>引用数据类型赋值时赋的是地址，基本数据类型赋的是值，不会被影响</p></blockquote></li></ul></blockquote></li></ol><blockquote><pre><code>// 超类 （父类）function SuperType() &#123;  this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;yellow&quot;];  this.a = 2;&#125;// 子类function subType() &#123;&#125;</code></pre></blockquote><p>subType.prototype &#x3D; new SuperType();<br>var sub1 &#x3D; new subType();<br>var sub2 &#x3D; new subType();</p><blockquote></blockquote><p>sub1.a &#x3D; 4; &#x2F;&#x2F; 修改值，相当于重写属性（遮蔽效应）<br>console.log(sub1.a); &#x2F;&#x2F; 4<br>console.log(sub2.a); &#x2F;&#x2F; 2</p><blockquote></blockquote><p>sub1.colors.push(“green”); &#x2F;&#x2F; 修改数组中值<br>console.log(sub1.colors); &#x2F;&#x2F;  [‘red’, ‘blue’, ‘yellow’, ‘green’]<br>console.log(sub2.colors); &#x2F;&#x2F; [‘red’, ‘blue’, ‘yellow’, ‘green’]</p><blockquote><pre><code>&lt;img src=&quot;通过原型链继承的缺点1.png&quot;&gt;</code></pre></blockquote><ol start="7"><li>原型链实现继承的不足之二<blockquote><p>子类在实例化时，不能给父类的构造函数传参。 也就意味着，子类不能应用父类已有的属性，而需要自己重写一份</p></blockquote></li></ol><blockquote><pre><code>// 父类  人类function People(name, age, sex) &#123;  this.name = name;  this.age = age;  this.sex = sex;&#125;</code></pre></blockquote><p>&#x2F;&#x2F; 子类  学生类<br>function Student(name, age, sex, scholl, sid) {<br>  this.name &#x3D; name;<br>  this.age &#x3D; age;<br>  this.sex &#x3D; sex;<br>}</p><blockquote></blockquote><p>&#x2F;&#x2F; 实现继承   一定要先实现继承，再添加新的方法和属性<br>Student.prototype &#x3D; new People();</p><blockquote></blockquote><p>&#x2F;&#x2F; 创建子类实例<br>var cuihua &#x3D; new Student(“翠花”, 18, “女”, “雅礼中学”, 20800);&#x2F;&#x2F;</p><blockquote><pre><code></code></pre></blockquote><h3 id="借用构造函数（经典继承）"><a href="#借用构造函数（经典继承）" class="headerlink" title="借用构造函数（经典继承）"></a>借用构造函数（经典继承）</h3><blockquote><ul><li>为了解决<strong>子类原型中包含引用类型值</strong>所带来问题和<strong>在子类构造函数中不能给父类构造函数传参</strong>的问题</li><li>开发人员通常使用一种叫做 “<strong>借用构造函数”</strong> 的技术，也被称为 “伪造对象” 或 “经典继承”</li></ul></blockquote><ol><li><p>借用构造函数的基本思路</p><blockquote><ul><li>在子类构造函数内部调用父类的构造函数</li><li>但要注意使用<code>call</code>或<code>apply</code>方法将新创建的对象作为父类构造函数的上下文对象</li><li>子类可以继承父类构造函数中的所有属性并传参</li></ul><pre><code> function People(name, sex, age) &#123;this.name = name;this.sex = sex;this.age = age;this.arr = [1, 2, 3]; &#125;</code></pre></blockquote><p> function Student(name, sex, age, school, sid) {<br>&#x2F;&#x2F; 借用构造函数<br>People.call(this, name, sex, age);<br>this.school &#x3D; school;<br>this.sid &#x3D; sid;<br> }</p><blockquote></blockquote><p> var cuihua &#x3D; new Student(“翠花”, “女”, 18, “雅礼中学”, 20230106);<br> cuihua.arr.push(“abc”); &#x2F;&#x2F;子类的实例拥有了父类身上所有方法<br> console.log(cuihua.name); &#x2F;&#x2F;翠花<br> console.log(cuihua.arr); &#x2F;&#x2F; [1, 2, 3, ‘abc’]</p><blockquote><pre><code></code></pre></blockquote></li><li><p>借用构造函数实现继承的不足之处</p><blockquote><ul><li>如果采用借用构造函数的方式实现继承，是<strong>没有办法把父类原型上的方法继承过来</strong>，只能继承父类构造函数中的属性</li><li>如果要把父类上的方法继承过来，那父类的方法就必需定义在构造函数内部，之显然是<strong>不合理</strong>的</li></ul></blockquote></li></ol><h3 id="四、组合继承"><a href="#四、组合继承" class="headerlink" title="四、组合继承"></a>四、组合继承</h3><blockquote><ul><li>将原型链实现继承和借用构造函数实现继承的技术组合到一起，这样就可以将两者的优点集中起来</li><li>这种继承方式，叫做 “组合继承” ，也叫作”伪经典继承”</li></ul></blockquote><ol><li><p>组合继承的基本思路</p><blockquote><ul><li>使用<strong>原型链</strong>继承来实现继承父类原型上的属性和方法<ul><li>弥补了借用构造函数不能继承父类原型上方法的缺陷</li></ul></li><li><strong>借用构造函数</strong>来实现继承父类实例的所有属性(可传参)<ul><li>弥补了原型链继承，父类原型上值为引用类型的属性，不能相互独立的缺陷</li><li>从父类继承的属性，是通过改变this指向给父类得到的；区别于原型链继承时，所有属性和方法都是放在子类的原型里的方式；因此，子类的这些属性相互独立，即使是引用数据类型也不是同一地址；<blockquote><p>这样就可以把父类的方法定义在子类的原型上，实现重用。同时又可以让每个实例都有自己的属性。</p></blockquote></li></ul></li></ul><pre><code> // 父类  人类 function People(name, age, sex) &#123;this.name = name;this.age = age;this.sex = sex;this.a = [1, 2, 3]; &#125; People.prototype.sayHello = function () &#123;console.log(  &quot;我是&quot; + this.name + &quot;今年&quot; + this.age + &quot;岁，我是&quot; + this.sex + &quot;生&quot;); &#125;;</code></pre></blockquote><p> &#x2F;&#x2F; 子类  学生类<br> function Student(name, age, sex, scholl, sid) {<br>&#x2F;&#x2F; 借用构造函数 继承父类构造函数中的属性<br>People.call(this, name, age, sex);<br>this.scholl &#x3D; scholl;<br>this.sid &#x3D; sid;<br> }</p><blockquote></blockquote><p> &#x2F;&#x2F; 借用原型链 继承来实现继承父类原型上的属性和方法<br> Student.prototype &#x3D; new People();</p><blockquote></blockquote><p> Student.prototype.study &#x3D; function () {<br>console.log(this.name + “正在学习！”);<br> };</p><blockquote></blockquote><p> &#x2F;&#x2F; 创建子类实例<br> var cuihua &#x3D; new Student(“翠花”, 18, “女”, “雅礼中学”, 20800); &#x2F;&#x2F;传参<br> var xiaoming &#x3D; new Student(“小明”, 16, “男”, “雅礼中学”, 20990); &#x2F;&#x2F;传参<br> cuihua.sayHello();<br> cuihua.study();<br> console.log(cuihua.a &#x3D;&#x3D;&#x3D; xiaoming.a); &#x2F;&#x2F;false<br> console.log(cuihua.a); &#x2F;&#x2F;[1, 2, 3]<br> cuihua.a.push(12);<br> console.log(cuihua.a); &#x2F;&#x2F;[1, 2, 3,12]<br> console.log(xiaoming.a); &#x2F;&#x2F;[1, 2, 3]不会受到影响</p><blockquote><pre><code></code></pre></blockquote></li><li><p>组合继承的不足之处</p><blockquote><p>组合继承最大的问题就是无论什么情况下，都会调用<strong>两次父（超）类的构造函数</strong></p><ul><li>一次是在创建子类原型的时候，如</li></ul><pre><code>Student.prototype = new People(); // 调用父类构造函数</code></pre><ul><li>另一次是在子类构造函数的内部，如</li></ul><pre><code>People.call(this, name, age, sex); // 调用父类的构造函数</code></pre><p>子类原型中的<code>constructor</code>被丢失，当访问子类原型中的 <code>constructor</code> 时，其本质是通过原型链查找，最终查找到的是父类的构造函数</p><pre><code>Student.prototype.constructor === People; // true</code></pre><blockquote><p>关于组合继承的不足之处如何解决，我们在后面会讲到</p></blockquote></blockquote></li></ol><h3 id="五、原型式继承"><a href="#五、原型式继承" class="headerlink" title="五、原型式继承"></a>五、原型式继承</h3><blockquote><p><strong>重点强调</strong>：原型式继承是一种不涉及严格意义上构造函数的继承方法</p></blockquote><ol><li>原型式继承适用场景<blockquote><ul><li>如果你有一个对象，想在它的基础上再创建一个新对象</li><li>现有对象<code>obj1</code>，现在希望再创建一个<code>obj2</code>对象，<code>obj2</code>需要继承<code>obj1</code>实例身上的所有方法和属性</li></ul><pre><code>var obj1 = &#123;  a: 1,  b: [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;],  sum: function () &#123; console.log(this.a + this.b);  &#125;,&#125;;</code></pre></blockquote></li></ol><blockquote><ul><li><code>obj2</code>要能继承<code>obj1</code>身上的所有方法和属性，则<code>obj2.__proto__</code>属性需要指向<code>obj1</code></li><li>我们知道<code>obj2.__proto__</code>指向的是<code>obj2</code>的构造函数的<code>prototype</code>，则说明<code>obj2</code>肯定是要用构造函数构造出来。</li><li>因此<code>obj2</code>的构造函数的<code>prototype=obj1</code></li></ul><pre><code>function Fn() &#123;&#125;Fn.prototype = obj1;var obj2 = new Fn();</code></pre><img src="原型式继承方法1.png"></blockquote><blockquote><ul><li>我们可以把上面的代码封装成一个函数，这个函数接受一个参数（原型指向的对象）</li><li>当我们调用这个函数时，就会创建出一个新的对象，同时这个对象的原型指向函数的参数。</li></ul><pre><code>function createObject(o) &#123;  function Fn() &#123;&#125;  Fn.prototype = o;  return new Fn();&#125;</code></pre></blockquote><ul><li>另一个版本(了解即可)<blockquote><pre><code>var obj1 = &#123;a: 1,b: [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;],sum: function () &#123;  console.log(this.a + this.b);&#125;,&#125;;</code></pre></blockquote>var obj2&#x3D;new Object();<br>obj2.<strong>proto</strong>&#x3D;obj1;<blockquote><pre><code>&lt;img src=&quot;原型式继承方法2.png&quot;&gt;</code></pre></blockquote></li></ul><blockquote><p><strong>区别：</strong></p><ul><li>方法2：把原本的<code>obj2.__proto__=Object.prototype</code>这条线切断，这样就用不了<code>Object</code>原型里的方法；但是！又通过<code>obj1.__proto__=Object.prototype</code>接上了；因为<code>obj1</code>是一个对象，它肯定是由<code>Object</code>构造出来的</li><li>然而，方法1就没这么复杂，更加节省性能，直接可以通过原型链调用<code>Object</code>的方法；所以，更推荐使用方法1</li></ul></blockquote><ol start="2"><li>原型式继承：完整版代码<blockquote><pre><code>var obj1 = &#123;  a: 1,  b: [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;],  sum: function () &#123; console.log(this.a); console.log(this.b);  &#125;,&#125;;</code></pre></blockquote>function createObject(o) {<br>  function Fn() {}<br>  Fn.prototype &#x3D; o;<br>  return new Fn();<br>}<blockquote></blockquote>var obj2 &#x3D; createObject(obj1); &#x2F;&#x2F; 以obj1为原型，创建一个新对象<br>var obj3 &#x3D; createObject(obj1);<br>obj2.c &#x3D; 3; &#x2F;&#x2F; 新对象添加自已的属性<br>obj2.a &#x3D; 4; &#x2F;&#x2F; 重写原型上属性 a<br>console.log(obj2); &#x2F;&#x2F; {c: 3, a: 4}<br>obj2.b.push(“obj2新加”);<br>obj2.sum(); &#x2F;&#x2F; 4  [‘A’, ‘B’, ‘C’, ‘obj2新加’]<br>obj1.sum(); &#x2F;&#x2F; 1 [‘A’, ‘B’, ‘C’, ‘obj2新加’]<blockquote><pre><code></code></pre></blockquote></li></ol><blockquote><p>注意事项</p><ul><li>以上方法创建出来的多个对象会<strong>共享原型上的引用类型属性</strong></li><li>其中一个对象修改了这个引用类型中的值，相当于所有创建出来的对象上的这个属性值都改变了</li></ul></blockquote><ol start="3"><li>Object.create 方法<blockquote><ul><li><code>ECMAScript5</code> 增加了<code>Object.create()</code>方法将原型式继承的概念规范化了</li><li><code>Object.create()</code>方法用于创建一个新对象，使用现有的对象来作为新创建对象的原型（prototype）<br>语法</li></ul><pre><code>Object.create(proto[,propertiesObject]);</code></pre></blockquote></li></ol><blockquote><ul><li><code>proto</code>为新创建对象的原型对象</li><li><code>propertiesObject</code>可选参数，给新对象定义额外属性的对象。 他与<code>Object.defineProperties()</code>的第二个参数一样，每个新增属性都通过各自的<strong>描述符</strong>来描述。以这种方式添加的属性会<strong>遮蔽</strong>原型对象上的同名属性<blockquote><p>只传入第一个参数时，该方法的底层逻辑就是前面的方法1</p></blockquote></li></ul></blockquote><blockquote><pre><code>var obj1 = &#123;  a: 1,  b: [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;],  sum: function () &#123;    console.log(this.a);    console.log(this.b);  &#125;,&#125;;</code></pre></blockquote><p>var obj2 &#x3D; Object.create(obj1);<br>console.log(obj2.a); &#x2F;&#x2F; 1<br>var obj3 &#x3D; Object.create(obj1, {<br>  b: {<br>    value: 4,<br>  },<br>});<br>console.log(obj3); &#x2F;&#x2F; {b:4}<br>console.log(obj3.b); &#x2F;&#x2F; 4</p><blockquote><pre><code></code></pre></blockquote><ul><li>注意事项<blockquote><ul><li><code>Object.create(proto)</code>中的<code>proto</code>，只能是 <code>null</code>或对象类型，否则会抛出<code>TypeError</code>异常</li></ul><pre><code>Object.create(1); // 报错Object.create(new Object(1)); //不报错，但用不了继承的方法Object.create(undefined); // 报错Object.create(function () &#123;&#125;); // 不报错</code></pre></blockquote></li></ul><blockquote><ul><li><code>Object.defineProperties(newObj,propertiesObject)</code>中的第二个参数，不能是<code>null</code>和<code>undefined</code>，字符串，否则会报错。实际上只要这里传的不是一个对象，就没有意义</li></ul><pre><code>var obj = &#123;&#125;;Object.defineProperties(obj, null); // 报错Object.defineProperties(obj, undefined); // 报错</code></pre></blockquote><ol start="4"><li>手写 Object.create 方法（经典面试题）<blockquote><ul><li>面试中经常会要求我们手写<code>Object.create</code>方法</li><li>当<code>Object.create()</code>只有一个参数时，其作用与上面我们自已封装的<code>createObject()</code>方法1效果一样</li><li>所以我们只需要在方法1的基础上来<strong>完善第二个参数的相关功能</strong>，并限制第一个参数的传入类型<br><strong>完善的功能：</strong></li><li>判断传入的<code>proto</code>是否为对象或<code>null</code><ul><li>只能是<code>null</code>或对象类型，否则会抛出<code>TypeError</code>异常</li></ul></li><li>利用<code>Ojbect.defineProperties(newObj,propertiesObject)</code>来实现第二个参数功能</li><li>同时要判断<code>propertiesObject</code>是否是一个对象</li></ul></blockquote></li></ol><blockquote><pre><code>Object._create = function (proto, propertiesObject) &#123;  // proto只能是null 或 对象  if (proto !== null &amp;&amp; !(proto instanceof Object))    throw new TypeError(&quot;proto只能是null或者对象,不能是其它类型&quot;);</code></pre></blockquote><p>  &#x2F;&#x2F; 实现原型式继承<br>  function Fn() {}<br>  Fn.prototype &#x3D; proto;<br>  var obj &#x3D; new Fn();</p><blockquote></blockquote><p>  &#x2F;&#x2F; 给新对象添加属性，只要当前属性不是对象，就没有意义<br>  propertiesObject instanceof Object &amp;&amp;<br>    Object.defineProperties(obj, propertiesObject);</p><blockquote></blockquote><p>  return obj;<br>};</p><blockquote><pre><code></code></pre></blockquote><ol start="5"><li>原型式继承注意事项<blockquote><ul><li><strong>适用场景</strong>：原型式继承非常适合不需要单独创建构造函数，但仍然需要在对象间共享信息的场合</li><li><strong>注意事项</strong>：如果原型对象的属性包含引用类型值时，所有以这个对象为原型创建的新对象的这个属性指向的是堆内中的同一个内容</li></ul></blockquote></li></ol><h3 id="六、寄生式继承"><a href="#六、寄生式继承" class="headerlink" title="六、寄生式继承"></a>六、寄生式继承</h3><blockquote><p><strong>寄生式继承的实现思路</strong>： 编写一个函数，它接收一个参数 O，返回以 O 为原型的新对象 p，同时给 p 添加了一些预置的新方法</p><ul><li>新对象相当于是寄生在原来的对象上，然后又添加了一些自己的新方法，所以称为 “寄生式继承”</li><li>在函数内，用<code>Object.create()</code>方法，创建出以 参数O 为原型的新对象p；并在函数p给内添加新方法，最后返回新对象p</li></ul></blockquote><blockquote><pre><code>// 创建一个对象var ball = &#123;  color: &quot;red&quot;,  r: 20,  opacity: 1,&#125;;</code></pre></blockquote><p>&#x2F;&#x2F; 创建一个函数，实现增强某个对象，实现寄生式继承<br>function enHanceObject(o) {<br>  &#x2F;&#x2F; 以o为原型，创建出一个新对象<br>  var obj &#x3D; Object.create(o);<br>  &#x2F;&#x2F; 为新创建的对象添加一些预置的方法，用来增强对象<br>  obj.changeColor &#x3D; function () {<br>    this.color &#x3D; “blue”;<br>    console.log(“我已经将颜色变成” + this.color);<br>  };<br>  &#x2F;&#x2F; ….可以为新对象添加更多的预置方法<br>  return obj;<br>}</p><blockquote></blockquote><p>var ball2 &#x3D; enHanceObject(ball);<br>console.log(ball2);<br>console.log(ball2.r); &#x2F;&#x2F;20<br>ball2.changeColor(); &#x2F;&#x2F;我已经将颜色变成blue<br>console.log(ball.color); &#x2F;&#x2F;red</p><blockquote><pre><code></code></pre></blockquote><blockquote><blockquote><p>注：</p></blockquote><ul><li><strong>寄生式继承</strong>相当于一个小工厂，他接受一个参数，然后返回一个新的对象</li><li>寄生式继承<strong>适用场景</strong>：主要关注的是对象，而不在乎类型和构造函数的场景</li><li>注意事项： 寄生式继承给新对象添加的函数是没有办法实现重用的。每创建一个新对象身上都会独有一份预置的方法,相互独立</li></ul></blockquote><h3 id="七、寄生式组合继承"><a href="#七、寄生式组合继承" class="headerlink" title="七、寄生式组合继承"></a>七、寄生式组合继承</h3><blockquote><p>在前面学习的组合继承中也存在以下不足之处</p></blockquote><ol><li><p>组合继承不足之处</p><blockquote><ul><li>组合继承最大的问题就是无论什么情况下，都会<strong>调用两次父（超）类的构造函数</strong>。一次是在创建子类原型的时候 ，另一次是在子类构造函数的内部</li></ul><pre><code>Student.prototype = new People(); // 创建子类原型时，调用父类构造函数People.call(this, name, age, sex); // 在子类的构造函数内部，调用父类的构造函数</code></pre><ul><li>子类原型中的constructor被丢失，当访问子类原型中的 constructor 时，其本质是通过原型链查找，最终查找到的是父类的构造函数</li></ul><pre><code>Student.prototype.constructor === People; // true</code></pre><p>在接下来学习的寄生式组合继承中，就能解决上面的两大问题</p></blockquote></li><li><p>寄生式组合的基本思路</p><blockquote><ul><li><strong>借用构造函数实现继承父类属性</strong>： 在子类的构造函数中调用父类的构造函数来实现继承父类属性<ul><li><code>People.call(this, name, age);</code></li></ul></li><li><strong>原型链混合原型式继承，实现继承父类原型上方法</strong>：<code>Object.create()</code>以父类的原型对象为原型，来创建出一个新的对象。并让子类的原型指向新创建出来的对象。解决了不用再次调用父类构造函数，同时父类构造函数中的属性也不会成为原型的属性<ul><li><code>var prototype = Object.create(People.prototype);</code></li><li><code>Student.prototype = prototype;</code></li></ul></li><li><strong>修正子类构造函数的 constructor 属性的指向</strong>： 把新创建对象中的<code>constructor</code>指向子类的构造函数。解决了原型中<code>constructor</code>丢失问题，同是修正了子类构造函数中的<code>constructor</code>指向子类构造函数<ul><li><code>prototype.constructor = Student;</code></li></ul></li></ul></blockquote></li></ol><img src="寄生式组合继承.png"><blockquote><ul><li>寄生式组合继承是如何实现完美继承的<img src="寄生式组合继承的完美性.png"></li></ul></blockquote><blockquote><pre><code>// 父类  人类function People(name, age) &#123;  this.name = name;  this.age = age;&#125;</code></pre></blockquote><p>People.prototype.sayHello &#x3D; function () {<br>  console.log(“大家好，我是” + this.name + “今年” + this.age + “岁了”);<br>};</p><blockquote></blockquote><p>&#x2F;&#x2F; 子类  学生类<br>function Student(name, age, scholl, sid) {<br>  People.call(this, name, age);<br>  this.scholl &#x3D; scholl;<br>  this.sid &#x3D; sid;<br>}</p><blockquote></blockquote><p>&#x2F;&#x2F; 寄生式组合继承<br>&#x2F;&#x2F; 以 People的原型为原型，创建一个新对象<br>var prototype &#x3D; Object.create(People.prototype);<br>&#x2F;&#x2F; 更改prototype中的constructor指向<br>prototype.constructor &#x3D; Student;<br>&#x2F;&#x2F; 将新创建的prototype对象，赋值给Student.prototype<br>Student.prototype &#x3D; prototype;</p><blockquote></blockquote><p>&#x2F;&#x2F; 子类原型上对象上添加新方法<br>Student.prototype.exam &#x3D; function () {<br>  console.log(this.name + “正在考试”);<br>};</p><blockquote></blockquote><p>var cuihua &#x3D; new Student(“翠花”, 13, “高新中学”, “A0001”);<br>var laoliu &#x3D; new Student(“老刘”, 20, “北京大学”, “SD0001”);<br>console.log(cuihua);<br>cuihua.sayHello();<br>cuihua.exam();<br>console.log(laoliu);<br>laoliu.sayHello();<br>laoliu.exam();</p><blockquote><pre><code></code></pre></blockquote><blockquote><blockquote><p>温馨提示：</p></blockquote><ul><li>继承的代码要写在给子类原型添加新方法的前面，否则子类在原型上新添加的方法会被覆盖</li></ul></blockquote><ol start="3"><li>封装函数 - 寄生式组合继承<blockquote><pre><code>/*** 寄生式组合继承* subType子类* superType 超类（父类）*/function inheritPrototype(subType, superType) &#123;  // 以父类的原型为原型，创建一个新对象  var prototype = Object.create(superType.prototype);  // 新对象的constructor指向子类的构造函数  prototype.constructor = subType;  // 子类的原型指向新创建的对象  subType.prototype = prototype;&#125;</code></pre></blockquote></li></ol><ul><li>使用<blockquote><pre><code>// 父类  人类function People(name, age) &#123;this.name = name;this.age = age;&#125;</code></pre></blockquote>People.prototype.sayHello &#x3D; function () {<br>console.log(“大家好，我是” + this.name + “今年” + this.age + “岁了”);<br>};<blockquote></blockquote>&#x2F;&#x2F; 子类  学生类<br>function Student(name, age, scholl, sid) {<br>People.call(this, name, age);<br>this.scholl &#x3D; scholl;<br>this.sid &#x3D; sid;<br>}<blockquote></blockquote>&#x2F;&#x2F; 寄生式组合继承<br>inheritPrototype(Student, People);<blockquote></blockquote>&#x2F;&#x2F; 子类原型上对象上添加新方法<br>Student.prototype.exam &#x3D; function () {<br>console.log(this.name + “正在考试”);<br>};<blockquote></blockquote>var cuihua &#x3D; new Student(“翠花”, 13, “高新中学”, “A0001”);<br>var laoliu &#x3D; new Student(“老刘”, 20, “北京大学”, “SD0001”);<br>console.log(cuihua);<br>cuihua.sayHello();<br>cuihua.exam();<br>console.log(laoliu);<br>laoliu.sayHello();<br>laoliu.exam();<blockquote><pre><code></code></pre></blockquote></li></ul><h3 id="八、JavaScript-6-种继承方式的实现原理、优缺点总结"><a href="#八、JavaScript-6-种继承方式的实现原理、优缺点总结" class="headerlink" title="八、JavaScript 6 种继承方式的实现原理、优缺点总结"></a>八、JavaScript 6 种继承方式的实现原理、优缺点总结</h3><table><thead><tr><th>继承方式</th><th>代码</th><th>实现原理</th><th>继承的对象</th><th>优缺点</th></tr></thead><tbody><tr><td>原型链实现继承</td><td><code>子类.prototype=new 父类()</code></td><td>子类的原型指向父类的实例</td><td>类与类</td><td>缺点：1.子类原型中的<code>constructor</code>被丢失；2.父类的属性中有引用类型，则所有子类的实例共享这个属性值；3.不能实现属性的复用，因为子类在实例化时，不能给父类的构造函数传参</td></tr><tr><td>借用构造函数</td><td><code>父类.call(this,参数)</code></td><td>子类构造函数内部调用父类构造函数，将<code>this</code>指向变为新创建的对象，并传参</td><td>类与类</td><td>优点：解决了原型链继承中<strong>引用类型共享</strong>和<strong>属性复用</strong>的问题；缺点：不能实现方法的继承</td></tr><tr><td>组合式继承</td><td><code>子类.prototype=new 父类()</code>+<code>父类.call(this,参数)</code></td><td>将原型链实现继承和借用构造函数实现继承组合一起使用</td><td>类与类</td><td>优点：既解决了原型链继承中<strong>引用类型共享</strong>和<strong>属性复用</strong>的问题，又能<strong>继承父类原型上的方法</strong>；缺点：1.两次调用父类的构造函数，也因此造成子类原型上多了一份无用的属性;2.子类原型中的<code>constructor</code>被丢失；</td></tr><tr><td>原型式继承</td><td><code>var newObj=Object.create(obj，propertiesObject)</code></td><td>实现以<code>obj</code>对象为原型，创建出一个新的对象<code>newObj</code>,同时可以给新创建的对象添加新的属性<code>propertiesObject</code></td><td>对象与对象</td><td>缺点：如果原型对象上有引用数据类型，则所有新创建的对象共享同一个属性值</td></tr><tr><td>寄生式继承</td><td><code>function enHanceObject(o) &#123; var obj = Object.create(o);//为新创建的对象添加一些预置的方法，用来增强对象obj.changeColor = function () &#123;&#125;; return obj;&#125;</code></td><td>以 obj 为原型，创建出一个新的对象，同时为新创建的对象添加一个预置的方法</td><td>对象与对象</td><td>缺点：给新对象添加的函数是没有办法实现重用的</td></tr><tr><td>寄生式组合继承</td><td><code>function inheritPrototype(subType, superType) &#123; var prototype = Object.create(superType.prototype); prototype.constructor = subType; subType.prototype = prototype;&#125;</code> 子类构造函数添加：<code>People.call(this, name, age);</code></td><td>将原型链继承、借用构造函数、原型式继承组合在一起来使用；以父类的原型为原型创建出一个新对象，同时将新对象的 <code>constructor</code>指向子类，再将新对象作为子类的原型。</td><td>类与类</td><td>完美解决类与类之间的继承</td></tr></tbody></table><img src="各类继承方式的优缺点.png"><h3 id="九、内置构造函数"><a href="#九、内置构造函数" class="headerlink" title="九、内置构造函数"></a>九、内置构造函数</h3><blockquote><p>在学习内置构造函数前，我们先来了解下 JS 中对象的分类，JS 对象分为以下 3 大类</p><table><thead><tr><th>类别</th><th>描述</th></tr></thead><tbody><tr><td>内部对象</td><td>JS 中的内部对象很多包括但不限于以下：<strong>常用构造函数（对象）</strong>：Object、Function、Array；<strong>包装类（对象）</strong>：String、Boolean、Number；<strong>Date 日期类、RegExp 正则表达式</strong>；<strong>错误处理类</strong>：Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError、URIError；<strong>内置对象</strong>：Global、Math</td></tr><tr><td>宿主对象</td><td>宿主对象就是执行 JS 脚本的环境提供的对象；对于嵌入到网页中的 JS 来说，其宿主对象就是浏览器提供的对象，所以又称为浏览器对象。不同的浏览器提供的宿主对象可能不同，即使提供的对象相同，其实现方式也大相径庭！这会带来浏览器兼容问题，增加开发难度；浏览器对象有很多，所有的 BOM 和 DOM 都是宿主对象，如Window、Document，Element，Form，Image等等</td></tr><tr><td>自定义对象</td><td>就是开发人员自己定义的对象</td></tr></tbody></table></blockquote><blockquote><p>我们接下来要学习的内置构造函数，指的就是<strong>内部对象中的相关对象</strong></p><blockquote><p>内置构造函数非常有用，所有该类型的方法都是定义在它的内置构造函数的 <code>prototype</code> 上的，我们可以给这个对象添加新的方法，从而拓展某类型的功能。</p></blockquote><p><strong>内置构造函数</strong></p><ul><li>常用构造函数：Object、Function、Array</li><li>包装类：String、Boolean、Number</li><li>Date 日期类、RegExp 正则表达式</li><li>错误处理类：Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError、URIError</li><li>……还有更多，在后面慢慢介绍<br><strong>内置对象</strong></li><li>Global 对象，全局对象</li><li>Math 对象<blockquote><p>这两个对象在脚本程序初始化时被创建，不必实例化这两个对象。即不用 <code>new</code> 来调用</p></blockquote></li></ul></blockquote><ol><li>常用构造函数<blockquote><ul><li>关于 Array、Function、Object 三个构造函数，我们在之前就有接触过，特别是 Array 构造函数。</li><li>这三个构造函数身上有那些：静态属性、静态方法、实例属性、实例方法大家可以参考 MDN 官方文档来复习。<blockquote><p>接下来，我们来复习下这三个构造函数的继承关系和原型链</p></blockquote></li><li>任意函数的默认<code>prototype</code>原型都是一个<code>Object</code>的实例,因此所有函数都继承于<code>Object</code> </li><li>所有的类(构造函数)本身都是函数，都是由Function构造出来的<blockquote><p>特别注意：<code>Function.__proto__ === Function.prototype</code></p></blockquote></li></ul></blockquote></li></ol><img src="三个构造函数的继承关系和原型链.png"><ol start="2"><li>Object 构造函数<blockquote><ul><li><code>Object</code>构造函数用来构造对象，所有对象都是 <code>Object</code>的实例</li></ul><pre><code>&#123;&#125;.__proto__===Object.prototype; // true</code></pre></blockquote></li></ol><blockquote><ul><li><code>Object</code> 的原型也是一个对象，按理来说<code>Object.prototype.___proto__===Object.prototype</code>，但显然是不合理的。实际 <code>Object</code>原型的原型指向原型链的终点，即 <code>null</code></li></ul><pre><code>Object.prototype.__proto__ === Object.prototype; // falseObject.prototype.__proto__ === null; // true;</code></pre></blockquote><blockquote><ul><li><code>Object</code> 构造函数也是函数，所以 <code>Object</code> 也是 <code>Function</code> 构造函数的实例</li></ul><pre><code>Object.__proto__ === Function.prototype; // true</code></pre></blockquote><blockquote><ul><li>所以 Object 可以打点调用 Function 原型上的方法</li></ul><pre><code>&quot;call&quot; in Object; // true&quot;bind&quot; in Object; // true</code></pre></blockquote><p>Object.call({ a: 1, b: 2 }); &#x2F;&#x2F; {}</p><blockquote><pre><code></code></pre></blockquote><ol start="3"><li>Array 构造函数<blockquote><ul><li><code>Array</code>构造函数，用来构造数组，所有数组都是 <code>Array</code>的实例</li></ul><pre><code>[].__proto__ === Array.prototype; // true</code></pre></blockquote></li></ol><blockquote><ul><li><code>Array.prototype</code>是一个对象，所以<code>Array.prototype</code>也是 <code>Object</code> 的实例</li></ul><pre><code>Array.prototype.__proto__ === Object.prototype;</code></pre></blockquote><blockquote><ul><li><code>Object</code>原型的原型为原型链的终点,即<code>null</code></li></ul><pre><code>Array.prototype.__proto__.__proto__ === null; // true</code></pre></blockquote><blockquote><ul><li><code>Array</code> 构造函数也是函数，所以<code>Array</code> 也是 <code>Function</code> 构造函数的实例</li></ul><pre><code>Array.__proto__ === Function.prototype; // true</code></pre></blockquote><ol start="4"><li>Function 构造函数<blockquote><ul><li><code>Function</code>构造函数用来构造函数，所有函数都是 <code>Function</code>的实例</li></ul><pre><code>var fn = function () &#123;&#125;;fn.__proto__ === Function.prototype; // true</code></pre></blockquote></li></ol><blockquote><ul><li><code>Function</code>构造函数也是一个函数，所以下面这种特殊情况也成立</li></ul><pre><code>Function.__proto__ === Function.prototype; // true</code></pre></blockquote><h2 id="JS三大包装类-Number、String、Boolean"><a href="#JS三大包装类-Number、String、Boolean" class="headerlink" title="JS三大包装类 Number、String、Boolean"></a>JS三大包装类 Number、String、Boolean</h2><blockquote><ul><li>为了方便操作<strong>原始值</strong>，<code>ECMAScript</code> 提供了<code>Number</code>、<code>String</code>、<code>Boolean</code>这三个特殊的构造函数</li><li>他们的主要作用就是把基本数据类型<strong>包装</strong>成一个 <strong>“对象”</strong>版本的基本类型值，所以这三个类又称为<strong>包装类</strong></li></ul></blockquote><table><thead><tr><th>包装类</th><th>说明</th></tr></thead><tbody><tr><td>Number</td><td>将数字包装成一个数字对象</td></tr><tr><td>String</td><td>将字符串包装成一个字符对象</td></tr><tr><td>Boolean</td><td>将布尔值包装成一个布尔对象</td></tr></tbody></table><blockquote><pre><code>// Number 类var n = new Number(3);console.log(n); // Number &#123;3&#125;console.log(typeof n); // objectconsole.log(n + 4); // 7</code></pre></blockquote><p>&#x2F;&#x2F; String 类<br>var str &#x3D; new String(“abcd”);<br>console.log(str); &#x2F;&#x2F; String {‘abcd’}<br>console.log(typeof str); &#x2F;&#x2F; object<br>console.log(str + “123”); &#x2F;&#x2F; abcd123</p><blockquote></blockquote><p>&#x2F;&#x2F; Boolean 类<br>var b &#x3D; new Boolean(true);<br>console.log(b); &#x2F;&#x2F; Boolean {true}<br>console.log(typeof b);&#x2F;&#x2F;object<br>console.log(true + 1); &#x2F;&#x2F; 2</p><blockquote><pre><code></code></pre></blockquote><h3 id="一、包装类核心基础"><a href="#一、包装类核心基础" class="headerlink" title="一、包装类核心基础"></a>一、包装类核心基础</h3><blockquote><ul><li>包装类的<strong>主要目的</strong>：是让基本类型值可以从它们的构造函数的 <code>prototype</code> 上获得方法。</li><li>每当用到某个原始值的方法或属性时，<strong>后台都会创建一个相应的原始包装类型的对象</strong>，从而暴露出操作原始值的各种方法</li></ul></blockquote><p><strong>我们来分析下，下面代码的执行流程</strong></p><blockquote><pre><code>var str1 = &quot;我就是我，不一样的小花朵&quot;;var str2 = str1.charAt(2); // 是</code></pre></blockquote><blockquote><ul><li>上面代码中<code>str1</code>是一个原始值，原始值不是一个对象，因此逻辑上不能调用方法。但实际上按预期输出了结果。为什么呢 ？</li><li>实际上代码执行到<code>str1.charAt(2)</code>时，JS 后台进行了很多处理<br><strong>具体处理步骤如下：</strong></li></ul><pre><code>var str1 = &quot;我就是我，不一样的小花朵&quot;;var str2 = str1.charAt(2);//当执行到这句代码时，会先执行右边，再赋值 //在执行str1.charAt(2)时，JS内部会进行：var str = new String(str1); // 1、将str1包装成一个新String对象str.charAt(2)// 2、让新对象调用方法str2 = str.charAt(2); //3、将返回的结果赋值给到 str2str = null; // 4、销毁创建的实例</code></pre></blockquote><ol><li>包装类的生命周期<blockquote><ul><li><code>new</code>关键字创建的原始值包装对象，只有<strong>在当前作用域被销毁时</strong>才销毁</li><li>自动创建的原始值包装对象，只存在于访问它的<strong>那一行代码执行期间</strong>。执行完就自动销毁</li></ul></blockquote></li></ol><blockquote><pre><code>var str1 = &quot;我就是我，不一样的小花朵&quot;;str1.name = &quot;张三&quot;;console.log(str1.name); // undefinedconsole.log(typeof str1); // string</code></pre></blockquote><p>var str2 &#x3D; new String(“我就是我”);<br>str2.name &#x3D; “清心”;<br>console.log(str2.name); &#x2F;&#x2F; 清心<br>console.log(typeof str2); &#x2F;&#x2F; object</p><blockquote><pre><code></code></pre></blockquote><blockquote><p><strong>分析 str1 变量</strong></p><ul><li>当代码执行到<code>str1.name=&quot;张三&quot;</code>时，<code>str1</code> 确实被包装成了<strong>对象</strong>，然后在对象上添加了 <code>name</code> 属性，<strong>但执行完，被包装成的对象就销毁了</strong></li><li>当执行到<code>console.log(str1.name)</code>时，<code>str1</code><strong>又创建了一个新的 <code>String</code> 对象</strong>，但是这个对象已经不是前面的那个对象，他身上没有 <code>name</code> 属性，访问对象身上不存在的属性不会报错，返回值为<code>undefined</code><br><strong>分析 str2 变量</strong></li><li>执行<code>var str2 = new String(&quot;我就是我&quot;);</code>时，相当于创建了一个包装对象，然后把这个包装对象赋值级到 <code>str2</code></li><li>当执行到<code>str2.name = &quot;清心&quot;;</code>时，相当于给对象添加 <code>name</code> 属性</li><li>当执行到<code>str2.name</code>时，相当于读到对象身上的属性，返回结果为清心</li></ul></blockquote><ol start="2"><li><p>原始值包装对象 - 转为布尔值都是 true</p><blockquote><p>直接调用 <code>Boolean</code> 函数，可以将其它类型转换为对应的 <code>boolean</code> 值</p><ul><li>基本数据类型的包装对象，转布尔值得到的都是<code>true</code></li></ul><pre><code>// 数字console.log(Boolean(0)); // falsevar n1 = new Number(0);console.log(Boolean(n1)); // trueconsole.log(n1); // Number &#123;0&#125;</code></pre></blockquote><p>&#x2F;&#x2F; 布尔值<br>var flag &#x3D; new Boolean(false);<br>console.log(Boolean(false)); &#x2F;&#x2F; false<br>console.log(Boolean(flag)); &#x2F;&#x2F; true<br>console.log(flag); &#x2F;&#x2F; Boolean {false}</p><blockquote></blockquote><p>&#x2F;&#x2F; 字符串<br>var str &#x3D; new String(“”);<br>console.log(Boolean(“”));<br>console.log(Boolean(str));<br>console.log(str);</p><blockquote><pre><code></code></pre></blockquote></li><li><p>区分直接调用包装类与 new 调用</p><blockquote><ul><li><strong>直接调用</strong>包装类函数，主要目的是实现数据类型的转换</li><li>使用**<code>new</code>调用**包装类，是为了把基本数据类型转换为对象类型</li></ul><pre><code>var value = &quot;20&quot;;var number = Number(value);//字符串转数字类型console.log(number); // 20console.log(typeof number); // number</code></pre></blockquote><p>var obj &#x3D; new Number(value);<br>console.log(obj); &#x2F;&#x2F; Number {20}<br>console.log(typeof obj); &#x2F;&#x2F; object</p><blockquote><pre><code></code></pre></blockquote></li></ol><h3 id="二、Number-包装类"><a href="#二、Number-包装类" class="headerlink" title="二、Number 包装类"></a>二、Number 包装类</h3><blockquote><p>Number 类有很多方法和属性，我们这里挑出最常用的给大家讲解</p></blockquote><ul><li><p>以下是常见的<code>Number</code>的<strong>静态属性</strong>，只需要了解即可</p><table><thead><tr><th>静态属性</th><th>描述</th></tr></thead><tbody><tr><td>Number.MAX_SAFE_INTEGER</td><td>表示在 JavaScript 中最大的安全整数<code>2^53 - 1</code></td></tr><tr><td>Number.MIN_SAFE_INTEGER</td><td>代表在 JavaScript 中最小的安全整数 <code>-(2^53 - 1)</code></td></tr><tr><td>Number.MAX_VALUE</td><td>JavaScript 里所能表示的最大数值</td></tr><tr><td>大于 <code>MAX_VALUE</code> 的值代表 <code>&quot;Infinity&quot;</code></td><td></td></tr><tr><td>Number.MIN_VALUE</td><td>表示在 JavaScript 中所能表示的最小的正值；小于<code>MIN_VALUE (&quot;underflow values&quot;)</code>的值将会转换为 0</td></tr></tbody></table></li><li><p>以下是常用的<code>Number</code><strong>原型上的方法</strong>，之些方法我们之前都学习过，列出来用于复习<br>|实例方法（原型方法）|描述|<br>|toFixed|返回结果后的小数部分<strong>保留指定小数位数</strong>，返回结果为一个字符串；保留小数位时，会采用四舍五入；如果小数位不足，则用 0 来补充；如果参数为空，则表示不保留小数位|<br>|toString|<code>toString()</code>用来将数值类型转换为字符串类型；<code>toString()</code>可以接受一个参数，用来将数字转换成对应进制的字符串|<br>|valueOf|<code>valueOf</code>方法返回被<code>Number</code>对象包装的原始值|</p></li></ul><ol><li>Number.MAX_SAFE_INTEGER 属性<blockquote><ul><li>是一个值为 <code>9007199254740991</code> （即<code>2^53-1</code>）的常量。</li><li>表示在 <code>JavaScript</code> 中最大的安全整数<code>(maxinum safe integer)``（2^53 - 1）</code></li><li>所谓的安全，是指<strong>能够准确的区分两个不相同的值</strong></li></ul><pre><code>var n = Math.pow(2, 53) - 1;console.log(n); // 9007199254740991console.log(Number.MAX_SAFE_INTEGER); // 9007199254740991</code></pre></blockquote>&#x2F;&#x2F; 安全系数  以下得到结果为true，显然是不合理的<br>console.log(Number.MAX_SAFE_INTEGER + 1 &#x3D;&#x3D;&#x3D; Number.MAX_SAFE_INTEGER + 2); &#x2F;&#x2F; true<blockquote><pre><code></code></pre></blockquote></li></ol><blockquote><blockquote><p><code>Math.pow(base,exponent)</code>函数返回基数（base）的指数（exponent）次幂</p></blockquote></blockquote><ol start="2"><li>Number.MIN_SAFE_INTEGER 属性<blockquote><ul><li>是一个值为<code>-9007199254740991</code>的常量，即<code>-(2^53 -1)</code></li><li>表示在在 <code>JavaScript</code> 中最小的安全整数<code>-(2^53 - 1)</code></li><li>所谓的安全，是指能够准确的区分两个不相同的值</li></ul></blockquote></li></ol><blockquote><pre><code>var n = -(Math.pow(2, 53) - 1);console.log(n); // -9007199254740991console.log(Number.MIN_SAFE_INTEGER); // -9007199254740991</code></pre></blockquote><p>&#x2F;&#x2F;安全系数  以下得到结果为true，显然是不合理的<br>console.log(Number.MIN_SAFE_INTEGER - 1 &#x3D;&#x3D;&#x3D; Number.MIN_SAFE_INTEGER - 2); &#x2F;&#x2F; true</p><blockquote><pre><code></code></pre></blockquote><p>3、<code>Number.MAX_VALUE</code>与<code>Number.MIN_VALUE</code>属性</p><blockquote><ul><li><code>Number.MAX_VALUE</code>表示<code>JavaScript</code>里所能表示的<strong>最大数值</strong></li><li><code>Number.MIN_VALUE</code>表示在<code>JavaScript</code>中所能表示的<strong>最小的数值</strong></li></ul><pre><code>console.log(Number.MAX_VALUE); // 1.7976931348623157e+308console.log(Number.MIN_VALUE); // 5e-324</code></pre></blockquote><ol start="4"><li><p>toFixed 方法</p><blockquote><ul><li>返回结果后的小数部分<strong>保留指定小数位数</strong>，返回结果为一个<strong>字符串</strong></li><li>如果参数为空，则表示不保留小数位</li><li>保留小数位时，会采用四舍五入</li><li>如果小数位不足，则用 0 来补充</li></ul><pre><code>var n = 1.447;console.log(n.toFixed()); // 1console.log(n.toFixed(1)); // 1.4console.log(n.toFixed(2)); // 1.45console.log(n.toFixed(5)); // 1.44700console.log(typeof n.toFixed()); // string</code></pre></blockquote></li><li><p>toString 方法</p><blockquote><ul><li><code>Number</code>类<strong>重写了</strong>原型上继承于<code>Object</code>对象的<code>toString</code>方法</li><li><code>toString()</code>用来将数值类型转换为字符串类型</li><li><code>toString()</code>可以接受一个参数，用来将数字转换成对应进制的字符串</li></ul><pre><code>var n = 16;console.log(n.toString()); // 16console.log(typeof n.toString()); // stringconsole.log(n.toString(2)); // 10000console.log(n.toString(8)); // 20console.log(n.toString(10)); // 16console.log(n.toString(16)); // 10</code></pre></blockquote></li><li><p>valueOf 方法</p><blockquote><ul><li><code>Number</code>类重写了原型上的<code>valueOf</code>方法</li><li><code>valueOf</code>方法返回被<code>Number</code>对象包装的原始值</li><li>该方法通常是由<code>JavaScript</code>引擎在内部隐式调用的，而不是由用户在代码中显式调用的</li></ul><pre><code>var n = 16;var obj = new Number(n);console.log(obj); // Number &#123;16&#125;console.log(obj.valueOf()); // 16console.log(obj + 3); // 19 内部自动调用了valueOf方法</code></pre></blockquote></li></ol><h3 id="三、Boolean-包装类"><a href="#三、Boolean-包装类" class="headerlink" title="三、Boolean 包装类"></a>三、Boolean 包装类</h3><blockquote><p>以下是<code>Boolean</code>包装类原型上的方法</p></blockquote><table><thead><tr><th>实例方法（原型方法）</th><th>描述</th></tr></thead><tbody><tr><td>toString</td><td>方法返回表示指定的布尔对象的字符串</td></tr><tr><td>valueOf</td><td>返回一个原始值true或false</td></tr></tbody></table><ol><li><p>toString 方法</p><blockquote><ul><li><code>Boolean</code>类<strong>重写了</strong>原型上继承于<code>Object</code>对象的<code>toString</code>方法</li><li>方法返回表示指定的布尔对象的字符串</li><li>当一个<code>Boolean</code>对象作为文本值或进行字符串连接时，<code>JavaScript</code>会自动调用其<code>toString</code>方法</li></ul><pre><code>console.log(true.toString()); // &#39;true&#39;console.log(typeof true.toString()); // stringconsole.log(false.toString()); // &#39;false&#39;console.log(true + &quot;abc&quot;); // trueabc 内部自动调用了toString()方法</code></pre></blockquote></li><li><p>valueOf</p><blockquote><blockquote><p>返回原始值<code>true</code>或<code>false</code></p></blockquote><pre><code>var flag = new Boolean(&quot;12&quot;);console.log(flag); // Boolean &#123;true&#125;console.log(flag.valueOf()); // true</code></pre></blockquote><p>var flag2 &#x3D; new Boolean(0);<br>console.log(flag2); &#x2F;&#x2F; Boolean {false}<br>console.log(flag2.valueOf()); &#x2F;&#x2F; false</p><blockquote><pre><code>&gt;建议永远不要使用 `new Boolean()` 来包装一个布尔值，这里只当做了解</code></pre></blockquote></li></ol><h3 id="四、String-包装类"><a href="#四、String-包装类" class="headerlink" title="四、String 包装类"></a>四、String 包装类</h3><table><thead><tr><th>实例（原型）方法</th><th>描述</th></tr></thead><tbody><tr><td>charAt()</td><td>返回字符串中指下标的字符</td></tr><tr><td>concat()</td><td>将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回</td></tr><tr><td>indexOf</td><td>返回给定的字符串在整个字符串中第一次出现的索现</td></tr><tr><td>slice</td><td>方法提取某个字符串的一部分，并返回一个新的字符串，且不会改动原字符串。</td></tr><tr><td>substring</td><td>返回字符串中指定开始索引到结束索引之间的字符串，包含起始索引，不包含结束索引</td></tr><tr><td>trim</td><td>清除字符串两端的空格，返回一个新的字符串</td></tr><tr><td>trimEnd</td><td>方法会删除字符串末尾的空白字符。trimRight() 是这个方法的别名</td></tr><tr><td>trimStart</td><td>方法会删除字符串开头的空白字符。trimLeft() 是此方法的别名</td></tr><tr><td>toUpperCase()</td><td>将字符串中字母转换为大写</td></tr><tr><td>toLowerCase()</td><td>将字符串中字母转换为小写</td></tr><tr><td>valueOf</td><td>返回 String 对象的原始值</td></tr></tbody></table><blockquote><blockquote><p>这些字符串方法（split 、match、search、replace）涉及到正则表达式的应用，则放在正则表达式那一章节来学</p></blockquote></blockquote><ol><li>charAt<blockquote><ul><li>返回字符串中指定下标的字符</li></ul><pre><code>str.charAt(index);</code></pre></blockquote></li></ol><blockquote><ul><li><code>index</code>值介于<code>0 ~ 字符串长度-1</code>之间的整数,如果值超出这个范围，返回空字符串</li><li>如果没有传入参数，则默认返回下标为 0 的字符</li></ul><pre><code>var str = &quot;我就是我，不一样的小花朵&quot;;console.log(str.charAt()); // 我console.log(str.charAt(str.length - 1)); // 朵console.log(str.charAt(str.length)); // 超出范围 返回空字符串console.log(str.charAt(-1)); // 超出范围 返回空字符串</code></pre></blockquote><ol start="2"><li>concat<blockquote><ul><li>将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。</li><li>如果传入的参数为非字符串，<strong>会先转换成字符串</strong>，然后再拼接</li><li>concat 方法，并不影响原字符串<blockquote><p>MDN上明确强调：出于性能考虑，强烈建议使用<code>+</code>或<code>+=</code>来代替<code>concat()</code>方法拼接字符串</p></blockquote></li></ul><pre><code>str.concat(str2, [, ...strN]); // [] 里面表示可选，即concat的中的参数 &gt;= 1个</code></pre></blockquote></li></ol><blockquote><pre><code>var str = &quot;abc&quot;;console.log(str.concat(&quot;c&quot;)); // abccconsole.log(str.concat(&quot;c&quot;, 4, 5)); // abcc45console.log(str.concat([&quot;d&quot;, &quot;e&quot;, &quot;f&quot;])); // abcd,e,fconsole.log(str.concat(true)); // abctrueconsole.log(str.concat(null)); // abcnullconsole.log(str.concat([])); // abcconsole.log(str.concat(&#123;&#125;)); // abc[object Object]console.log(str.concat(&#123; a: 1, b: 2 &#125;)); // abc[object Object]</code></pre></blockquote><blockquote><blockquote><ul><li>其他类型转字符串</li></ul></blockquote><ul><li><code>String(&#123;&#125;)</code>&#x3D;&#x3D;&#x3D;<code>&#39;[object Object]&#39;</code></li><li><code>String(&#123;a: 1, b: 2&#125;)</code>&#x3D;&#x3D;&#x3D;<code>&#39;[object Object]&#39;</code></li><li><code>String([&quot;d&quot;, &quot;e&quot;, &quot;f&quot;])</code>&#x3D;&#x3D;&#x3D;<code>&#39;d,e,f&#39;</code></li></ul></blockquote><ol start="3"><li>indexOf<blockquote><ul><li>返回指定字符串在大于或等于<code>position</code>位置的第一次出现的索引，如果没有找到则返回<code>-1</code></li><li><code>searchString</code>要搜索的子字符串</li><li><code>position</code>从指定位置开始往后查询</li></ul><pre><code>indexOf(searchString);indexOf(searchString, position);</code></pre></blockquote></li></ol><blockquote><ul><li>如果没有传第二个参数，则默认从 0 的位置开始查找</li><li>给定了第二个参数，会从当前位置开始往后查找，包括当前位置</li></ul><pre><code>var str = &quot;hello world&quot;;console.log(str.indexOf(&quot;o&quot;)); // 4console.log(str.indexOf(&quot;o&quot;, 7)); // 7console.log(str.indexOf(&quot;o&quot;, 8)); // -1</code></pre></blockquote><blockquote><ul><li>如果 <code>position</code> 大于字符串长度(空格也算)，则搜索不到对应字符串，返回结果为 <code>-1</code></li><li>如果 <code>position</code> 小于 <code>0</code>，则当成 <code>0</code> 来处理，从第<code>0</code>的位置往后查询<blockquote><p>唯一区别：数组中的<code>indexOf</code>方法,如果第二个数是负数，则表示从后往前找</p></blockquote></li></ul><pre><code>var str = &quot;hello world&quot;;console.log(str.indexOf(&quot;o&quot;, 11)); // -1console.log(str.indexOf(&quot;o&quot;, -4)); // 4indexOf 查询内容时，是严格区分大小写的，数组中的 indexOf 方法也是一样的var str = &quot;hello world&quot;;console.log(str.indexOf(&quot;W&quot;)); // -1console.log(str.indexOf(&quot;w&quot;)); // 6</code></pre></blockquote><blockquote><blockquote><p>空字符串搜索时会产生以下奇怪的结果，所以在查询时如果查询内容有可能为空，则需要提前判断</p></blockquote><ul><li><code>position</code>未传，返回<code>0</code></li><li><code>position</code>传了：<ul><li><code>position &lt; 字符串长度</code>，返回结果为 <code>position</code> 值</li><li><code>position &gt;= 字符串长度</code>，返回结果为字符串的长度</li></ul></li></ul></blockquote><ul><li><code>案例应用</code>： 统计某个字母或单词在字符串中出现的次数<blockquote><pre><code>String.prototype.count = function (searchString, position) &#123;var n = 0; // 统计字符串出现的次数if (position === undefined) position = 0; // 如果没有赋值，默认为0if (typeof position !== &quot;number&quot;) &#123;  // 如果不是数字类型，则抛出错误  throw new TypeError(&quot;position只能是数字类型&quot;);&#125;// 从当前位置往后查找，并将查询的位置结果返回position = this.indexOf(searchString, position);while (position !== -1) &#123;  n++;  position = this.indexOf(searchString, position + 1);&#125;return n;&#125;;</code></pre></blockquote>var str &#x3D; “on test my love on top bottom test”;<br>console.log(str.count(“on”));<br>console.log(str.count(“o”, 2));<br>console.log(str.count(“test”, -2));<blockquote><pre><code></code></pre></blockquote></li></ul><ol start="4"><li>slice<blockquote><ul><li>方法提取某个字符串的一部分，并返回一个新的字符串，且不会改动原字符串</li><li>其用法和数组的 slice 方法一样</li></ul><pre><code>str.slice(beginIndex[, endIndex])</code></pre></blockquote></li></ol><blockquote><ul><li><code>beginIndex</code>为查询的起始索引，默认为 <code>0</code></li><li><code>endIndex</code>为结束索引，可选参数，默认不写，表示从结束位置提取到整个字符串的尾部。</li><li>如果<code>beginIndex</code>和<code>endIndex</code>为负数，表示从后往前数，找到对应位置，再从开始位置向右查询到结束位置。</li><li>从后往前数，下标从<code>-1</code>开始，同时查询字符串包含 <code>beginIndex</code>，但不包换<code>endIndex</code></li></ul><pre><code>var str = &quot;abcdefc&quot;;console.log(str.slice(2, 5)); // cdeconsole.log(str.slice(2, -2)); // cdeconsole.log(str.slice(-5, -2)); // cdeconsole.log(str.slice(-3)); // efc</code></pre></blockquote><ol start="5"><li>substring<blockquote><ul><li>返回字符串中指定开始索引到结束索引之间的字符串，包含起始索引，不包含结束索引</li></ul><pre><code>str.substring(startIndex[,endIndex])</code></pre></blockquote></li></ol><blockquote><ul><li><code>startIndex</code>开始索引，如果小于 0 或为 <code>NaN</code>，则当成 0 处理，大于字符串长度，则当成字符串长度处理</li><li><code>endIndex</code> 结束索引，如果小于 0 或为 NaN，则当成 0 处理，大于字符串长度，则当成字符串长度处理</li><li>特殊之处：如果 <code>startIndex &gt; endIndex</code> ，则执行效果像两个参数调换一样</li></ul><pre><code>var str = &quot;abcdefc&quot;;console.log(str.substring(2)); // cdefcconsole.log(str.substring(-2)); // abcdefcconsole.log(str.substring(5, 2)); //cdeconsole.log(str.substring(2, -3)); // abconsole.log(str.substring(2, 5)); //cdeconsole.log(str.substring(-2, -3)); //&quot;&quot;</code></pre></blockquote><ol start="6"><li>trim、trimEnd、trimStart<blockquote><ul><li><code>trim</code>：清除字符串两端的空格，返回一个新的字符串</li><li><code>trimEnd</code>： 方法会删除字符串末尾的空白字符，<code>trimRight()</code> 是这个方法的别名</li><li><code>trimStart</code>：方法会删除字符串开头的空白字符,<code>trimLeft()</code> 是此方法的别名<blockquote><p>这里的空格是指：所有的空白字符（空格、tab、不换行空格等）以及所有行终止符字符（如 LF、CR 等）</p></blockquote></li></ul></blockquote></li></ol><blockquote><pre><code>var str = &quot;   abc   &quot;;var newstr = str.trim();console.log(str.trim()); // &quot;abc&quot;console.log(str.trim().length); // 3</code></pre></blockquote><p>console.log(str.trimStart()); &#x2F;&#x2F; “abc   “<br>console.log(str.trimStart().length); &#x2F;&#x2F; 6</p><blockquote></blockquote><p>console.log(str.trimEnd()); &#x2F;&#x2F; “   abc”<br>console.log(str.trimEnd().length); &#x2F;&#x2F; 6</p><blockquote><pre><code></code></pre></blockquote><ol start="7"><li><p>toUpperCase 与 toLowerCase</p><blockquote><ul><li>toLowerCase：将字符串中字母全部转换为小写</li><li>toUpperCase ： 将字符串中字母全部转换为大写</li></ul><pre><code>var str = &quot;I love You 是我爱你&quot;;console.log(str.toUpperCase());console.log(str.toLowerCase());以下方法可实现将 true、false 这些非字符串值转换全大写String.prototype.toUpperCase.call(true);String.prototype.toUpperCase.call(false);以下代码会抛出类型错误String.prototype.toUpperCase.call(null);String.prototype.toUpperCase.call(undefined);image-20221208004420970</code></pre></blockquote></li><li><p>valueOf</p><blockquote><ul><li><code>valueOf()</code>返回<code>String</code>对象的原始值</li></ul></blockquote></li></ol><blockquote><pre><code>var obj = new String(&quot;wang&quot;);console.log(obj); // String &#123;&#39;wang&#39;&#125;console.log(obj.valueOf()); // wang</code></pre></blockquote><p>&#x2F;&#x2F; 字符串拼接时，会自动调用valueOf方法，获取原始值来拼接<br>console.log(obj + “abc”);</p><blockquote><pre><code></code></pre></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="三个特殊的构造函数的使用"><a href="#三个特殊的构造函数的使用" class="headerlink" title="三个特殊的构造函数的使用"></a>三个特殊的构造函数的使用</h4><blockquote><p><code>ECMAScript</code>提供了<code>Number</code>、<code>String</code>、<code>Boolean</code>这三个特殊的构造函数</p></blockquote><ol><li>当用<code>new</code>调用(作为一个构造函数使用)时<blockquote><ul><li>将基本数据类型包装成一个<strong>对象</strong>(又称为包装类)；</li><li>这个对象可以使用构造函数身上的属性，从构造函数的<code>prototype</code>上获得方法。</li></ul></blockquote></li></ol><ul><li><p>new Number()</p><blockquote><ul><li>创建一个 Number 对象,该对象不是一个原始值</li></ul><pre><code> var obj = new Number(42); console.log(obj); //Number &#123;42&#125; console.log(typeof obj); //object console.log(obj == 42); //true console.log(obj === 42); //false</code></pre></blockquote></li><li><p>new Boolean(参数)</p><blockquote><ul><li>如果省略该参数或参数值为 <code>0</code>、<code>-0</code>、<code>null</code>、<code>false</code>、<code>NaN</code>、<code>undefined</code>，或空字符串<code>（&quot;&quot;）</code>，则该<strong>对象</strong>具有的初始值为 false。</li><li>所有其他值，包括任何对象，空数组（[]）或字符串 “false”，都会创建一个初始值为 true 的<strong>对象</strong>。</li></ul><pre><code> var flag1 = new Boolean(&quot;&quot;); console.log(flag1); //Boolean &#123;false&#125; console.log(typeof flag1); //object</code></pre></blockquote><p> var flag2 &#x3D; new Boolean(“123”);<br> console.log(flag2); &#x2F;&#x2F;Boolean {true}<br> console.log(typeof flag2); &#x2F;&#x2F;object</p><blockquote><pre><code></code></pre></blockquote></li><li><p>new String()</p><blockquote><ul><li>创建字符串对象</li></ul><pre><code> var str = new String(&quot;a,b&quot;); console.log(str); //String &#123;&#39;a,b&#39;&#125; console.log(typeof str); //object</code></pre></blockquote></li></ul><ol><li>当作为一个函数使用时<blockquote><ul><li>主要目的是实现<strong>数据类型的转换</strong></li></ul></blockquote></li></ol><blockquote><p><strong>Number()函数：</strong></p><ul><li>基本数据类型：’’空字符串 、字符串只有前后包含空格、纯数字类字符串、2 进制或 16 进制表示的数字、科学记数表示法能转换成数字，其它都转换成 NaN</li><li>引用数据类型：<code>Number([])</code>结果是<code>0</code>，<code>Number(&#123;&#125;)</code>结果是<code>NaN</code></li></ul></blockquote><blockquote><p><strong>Boolean() 函数：</strong></p><ul><li>代表空，否定的值会被转换为<code>false</code>。 如：<code>&#39;&#39;</code>、<code>0</code>、<code>NaN</code>、<code>null</code>、<code>undefined</code></li><li>除了上面列出的 <code>5</code> 个值，其它所有值都转换为<code>true</code><blockquote><p>所有对象转布尔值都为<code>true</code>，因此<strong>原始值包装对象</strong>转为布尔值都是<code>true</code></p></blockquote></li></ul></blockquote><blockquote><p><strong>String()函数：</strong></p><ul><li>其它类型转换字符串</li></ul></blockquote><h4 id="三大包装类常用的属性和方法"><a href="#三大包装类常用的属性和方法" class="headerlink" title="三大包装类常用的属性和方法"></a>三大包装类常用的属性和方法</h4><blockquote><ul><li>Number类<img src="Number类的常用属性和方法.png"></li></ul></blockquote><blockquote><ul><li>Boolean类<img src="Boolean类的常用属性和方法.png"></li></ul></blockquote><blockquote><ul><li>String类<img src="String类的常用属性和方法.png"></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（十四）</title>
      <link href="/2023/12/07/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89/"/>
      <url>/2023/12/07/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、Object-defineProperty"><a href="#一、Object-defineProperty" class="headerlink" title="一、Object.defineProperty"></a>一、Object.defineProperty</h3><blockquote><p><code>Object.defineProperty()</code>方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，<strong>并返回此对象</strong>。</p><ul><li><code>// 语法 Object.defineProperty(obj, prop, descriptor);</code></li><li>obj ：要定义属性的对象</li><li>prop ：要定义或修改的属性的名称</li><li>descriptor : 要定义或修改的<strong>属性描述符</strong>，是一个对象<blockquote><p>目前存在的属性描述符有两种主要形式：数据描述符 和 存取描述符</p></blockquote></li></ul></blockquote><h4 id="数据描述符"><a href="#数据描述符" class="headerlink" title="数据描述符"></a>数据描述符</h4><blockquote><ul><li>数据描述符是一个具有值的属性，该值可以是可写的，也可以是不可写的。</li><li>数据描述符有以下 4 个特性描述它们的行为，具体如下表</li></ul></blockquote><table><thead><tr><th>属性特性</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>writable</td><td>表示属性值是否可以被修改，false 不能改，true 可以修改</td><td>false</td></tr><tr><td>value</td><td>属性的实际值</td><td>undefined</td></tr><tr><td>configurable</td><td>该特性表示对象的属性是否可以被删除，以及除 value 和 writable 特性外的其他特性是否可以被修改</td><td>false</td></tr><tr><td>enumerable</td><td>表示属性是否可通过 <code>for-in</code> 循环遍历</td><td>false</td></tr></tbody></table><blockquote><blockquote><p>注</p></blockquote><ul><li><code>Object.defineProperty</code>定义的属性，如果属性描述符为数据描述符，那这个属性被称为 “数据属性”</li></ul></blockquote><ol><li>具体演示<blockquote><ul><li>当<code>configurable: false</code>时，重新定义属性，<strong>会报错</strong>，所有特性都不能修改；只有在它为<code>true</code>才能修改所有属性</li><li></li><li></li></ul></blockquote></li></ol><blockquote><pre><code>  // 定义对象  var obj = &#123;    name: &quot;张三&quot;,  &#125;;  //用Object.defineProperty定义新属性  Object.defineProperty(obj, &quot;age&quot;, &#123;    writable: false,    value: 22,    enumerable: false,    configurable: true,  &#125;);  console.log(obj); //&#123;name: &#39;张三&#39;, age: &#39;22&#39;&#125;  //修改age,因为writable是false所以不能直接修改,除非重新定义  obj.age = 33;  console.log(obj); //&#123;name: &#39;张三&#39;, age: &#39;22&#39;&#125;  //遍历该对象,因为enumerable是false,所以age不能被遍历出来  for (var key in obj) &#123;    console.log(obj[key]); //张三  &#125;  //删除属性,因为configurable是false,所以无法删除  delete obj.age;  console.log(obj); //&#123;name: &#39;张三&#39;, age: 22&#125;  //修改属性,因为configurable是true,所以都可修改  Object.defineProperty(obj, &quot;age&quot;, &#123;    writable: false,    value: 44,    configurable: false,    enumerable: false,  &#125;);  console.log(obj); //&#123;name: &#39;张三&#39;, age: 44&#125;  var a1 = Object.getOwnPropertyDescriptor(obj, &quot;age&quot;);  console.log(a1); //&#123;value: 44, writable: false, enumerable: false, configurable: false&#125;</code></pre></blockquote><ol start="2"><li><p>Object.getOwnPropertyDescriptor</p><blockquote><ul><li><code>Object.getOwnPropertyDescriptor()</code>方法可以取得指定属性的属性描述符</li><li><code>Object.getOwnPropertyDescriptor(obj, prop);</code></li></ul></blockquote></li><li><p>注意事项</p><blockquote><ul><li>直接定义在对象身上的属性，以上属性特性的默认值分别为：<code>writable:true</code>、<code>value:undefined</code>、<code>configurable：true</code>、<code>enumerable:true</code></li><li>通过<code>Object.defineProperty</code>方式定义的属性，其属性特性的默认值分别为：<code>writable:false</code>、<code>value:undefined</code>、<code>configurable：false</code>、<code>enumerable:false</code></li></ul></blockquote></li></ol><h4 id="存取描述符"><a href="#存取描述符" class="headerlink" title="存取描述符"></a>存取描述符</h4><blockquote><p>存取描述符有以下 4 个特性描述它们的行为，具体如下表</p></blockquote><table><thead><tr><th>属性特性</th><th>说明</th><th>默认</th></tr></thead><tbody><tr><td>configurable</td><td>特性表示对象的属性是否可以被删除，以及除 value 和 writable 特性外的其他特性是否可以被修改</td><td>false</td></tr><tr><td>enumerable</td><td>表示属性是否可以通过<code>for...in</code> 循环遍历</td><td>false</td></tr><tr><td>get获取函数</td><td>获取函数，在读取属性时调用。这个函数的主要责任就是返回一个有效的值</td><td>undefined</td></tr><tr><td>set 设置函数</td><td>设置函数，在写入属性时调用。这个函数决定了对数据做什么样的修改，这个函数有一个参数</td><td>undefined</td></tr></tbody></table><blockquote><blockquote><p>注：<br><code>Object.defineProperty</code>定义的属性，如果属性描述符为存取描述符，那这个属性被称为 “<strong>访问器属性</strong>”</p></blockquote><ul><li><code>configurable</code>与 <code>enumerable</code>特性与 数据描述符的用法是一样的</li><li><code>get</code> 获取函数，在读取属性时调用，这个函数的返回值为这个属性的值</li><li><code>set</code> 设置函数，在写入属性时调用，这个函数决定了对数据做什么样的修改,重新设置属性值时，这个值就是set函数的<strong>实参</strong></li><li>一般用访问器属性获取&#x2F;修改的属性 与 对象被定义时设置的名称不一样，在定义时会被设置成”私有变量”，我们约定用<code>_</code>开头的方式命名(依旧可以打点访问)，因为在ES5中无法设置私有变量，只能这么做</li></ul></blockquote><blockquote><pre><code>var obj = &#123;    name: &quot;张三&quot;,    age: 23,    _sex: &quot;女&quot;,    identity: &quot;女士&quot;,  &#125;;</code></pre></blockquote><p>  Object.defineProperty(obj, “sex”, {<br>    &#x2F;&#x2F;获取属性<br>    get: function () {<br>      return this._sex;<br>    },<br>    &#x2F;&#x2F;设置属性<br>    set: function (value) {<br>      this._sex &#x3D; value;<br>      if (value &#x3D;&#x3D;&#x3D; “女”) {<br>        this.identity &#x3D; “女士”;<br>      } else {<br>        this.identity &#x3D; “先生”;<br>      }<br>    },<br>  });<br>  &#x2F;&#x2F;获取属性<br>  console.log(obj.sex); &#x2F;&#x2F;女<br>  &#x2F;&#x2F;重新设置属性<br>  obj.sex &#x3D; “男”;<br>  console.log(obj.sex); &#x2F;&#x2F;男<br>  console.log(obj.identity); &#x2F;&#x2F;先生</p><blockquote><pre><code></code></pre></blockquote><ul><li><p>访问器属性的典型<strong>应用场景</strong>：</p><blockquote><ul><li>当设置或获取一个属性的值时，我们还需要做相关的其它操作，就可以把这个属性设置成访问器属性。</li><li>get 和 set 方法的这种机制，我们可以理解为<strong>数据拦截</strong>或<strong>数据劫持</strong>。<blockquote><p>也就是在我操作数据时，会被 get 和 set 方法拦截，然后在里面做相应的操作,改变正常的访问和设置行为。</p></blockquote></li></ul></blockquote></li><li><p>注意事项</p><blockquote><ul><li>获取函数和设置函数<strong>不一定都要定义</strong></li><li><strong>只定义获取函数</strong>意味着属性是只读的，尝试修改属性会被忽略，严格模式会抛错</li><li><strong>只有一个设置函数</strong>的属性是不能读取的，非严格模式下返回值为<code>undefined</code>,严格模式下（有可能）会抛错。</li></ul></blockquote></li></ul><h4 id="Object-defineProperties"><a href="#Object-defineProperties" class="headerlink" title="Object.defineProperties"></a>Object.defineProperties</h4><blockquote><p><code>Object.defineProperties()</code>方法允许我们在一个对象上同时定义多个属性。</p><ul><li><code>Object.defineProperties(obj, props)</code>;</li><li><code>obj</code> 需要定义和修改属性的对象</li><li><code>props</code> 用来修改对应属性的描述符对象</li></ul><pre><code> var obj = &#123;   _sex: &quot;女&quot;, &#125;; Object.defineProperties(obj, &#123;   name: &#123;     value: &quot;李四&quot;,     writable: true,   &#125;,   age: &#123;     value: 11,     configurable: false,   &#125;,   sex: &#123;     get: function () &#123;       return this._sex;     &#125;,     set: function (value) &#123;       this._sex = value;     &#125;,   &#125;, &#125;); console.log(obj.sex); //女 obj.sex = &quot;男&quot;; console.log(obj.sex); //男</code></pre></blockquote><h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><blockquote><p><code>JavaScript</code>中有没有可能让<code>(a === 1 &amp;&amp; a === 2 &amp;&amp; a === 3)</code>返回<code>true</code> ？</p><ul><li>这是阿里的一个经典面试题，刚开始一看你觉得这是不可能的，因为一个变量怎么可能同时存在三个不同的值呢？ 但你静下心来分析，你就能找到面试官在考什么 ？</li><li>如果我们在<strong>读取</strong>一个变量的值时，能<strong>修改</strong>这个变量对应的值，那不就有解了吗 ?</li><li>我们可以把变量 a 当成 <code>window</code> 对象的属性，同时 a 还是一个访问器属性，那我们就可以在他的 <code>get</code> 方法中来修改他的值。</li></ul><pre><code>  var _a = 0;  Object.defineProperty(window, &quot;a&quot;, &#123;    get: function () &#123;      return ++_a;    &#125;,  &#125;);  if (a === 1 &amp;&amp; a === 2 &amp;&amp; a == 3) &#123;    console.log(&quot;true&quot;);  &#125;</code></pre><blockquote><p>通过上面这个面试题给了我们一个启发</p></blockquote><ul><li>如果在获取或设置一个变量的值时，<strong>还需要做相关的其它操作</strong>，我们就可以把这个变量设置成一个访问器属性，然后在他的 get 和 set 方法中做相应的操作。</li></ul></blockquote><h4 id="案例应用1：追溯属性的赋值记录"><a href="#案例应用1：追溯属性的赋值记录" class="headerlink" title="案例应用1：追溯属性的赋值记录"></a>案例应用1：追溯属性的赋值记录</h4><blockquote><p>当我们每次设置属性的值时，可以把设置的值保存在<strong>数组</strong>中，那这个数组就是用来保存属性赋值的记录</p><ul><li>除了可以保存赋值记录，还可以查询某次的记录、总值</li></ul><pre><code> var obj = &#123;   _num: 0,   _historyValue: [], &#125;; Object.defineProperty(obj, &quot;num&quot;, &#123;   get: function () &#123;     return this._num;   &#125;,   set: function (value) &#123;     this._num = value;     this._historyValue.push(value);   &#125;, &#125;); //查找全部历史记录 obj.getHistory = function () &#123;   return this._historyValue; &#125;; //查找某次记录 obj.go = function (index) &#123;   if (index &gt;= this._historyValue.length)     throw new Error(&quot;访问下标超出范围&quot;);   return this._historyValue[index - 1]; &#125;; //查找总金额 obj.sum = function () &#123;   var _sum = 0;   for (var i = 0; i &lt; obj._historyValue.length; i++) &#123;     _sum += this._historyValue[i];   &#125;   return _sum; &#125;; obj.num = 45; obj.num = 32; obj.num = 23; console.log(obj.getHistory());//45,32,23 console.log(obj.go(1)); //45 console.log(obj.sum());//100</code></pre></blockquote><h4 id="案例应用2：数据驱动页面更新（单向）"><a href="#案例应用2：数据驱动页面更新（单向）" class="headerlink" title="案例应用2：数据驱动页面更新（单向）"></a>案例应用2：数据驱动页面更新（单向）</h4><blockquote><p>Vue 中有两种数据绑定方式</p><ul><li>单向绑定（v-bind）：数据只能从 data 流向页面</li><li>双向绑定（v-modle）：数据不仅能从 data 流向页面，还能从页面流向 data<br>在 Vue2 中，其数据的绑定方式底层采用的是 <code>Object.defineProperty</code>，在 <code>Vue3</code> 中，底层采用的是 <code>Proxy</code> 代理。但本质的原理是一样的。</li></ul></blockquote><blockquote><ul><li>以下案例简单实现了数据的单向绑定，关于双向绑定后面的案例中会讲到</li><li>效果：当data中的数据发生更新数据，则页面数据就发生相应的变化</li></ul><pre><code>&lt;div class=&quot;goods&quot;&gt; &lt;h3 class=&quot;title&quot;&gt;&lt;/h3&gt; &lt;img src=&quot;&quot; alt=&quot;&quot; class=&quot;main-img&quot; /&gt; &lt;p&gt;价格：&lt;span class=&quot;price&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;script&gt;  function update() &#123;    var obj = &#123;&#125;;    //这三个元素相当于私有变量，外面访问不到    var title = &quot;云原生容器化docker+K8S+CICD弹性扩容集群架构实战&quot;;    var mainImg =      &quot;https://sce7a2b9c9d95a-sb-qn.qiqiuyun.net/files/course/2020/04-23/1339186404a1276893.jpg&quot;;    var price = 3680.0;    //获取元素    var oTitle = document.querySelector(&quot;.title&quot;);    var oImg = document.querySelector(&quot;.main-img&quot;);    var oPrice = document.querySelector(&quot;.price&quot;);    //初始渲染：    oTitle.innerText = title;    oImg.src = mainImg;    oPrice.innerText = price;</code></pre></blockquote><pre><code>var data = Object.defineProperties(obj, &#123;  title: &#123;    get: function () &#123;      return title;    &#125;,    set: function (value) &#123;      title = value;      oTitle.innerText = value;    &#125;,  &#125;,  mainImg: &#123;    get: function () &#123;      return mainImg;    &#125;,    set: function (value) &#123;      mainImg = value;      oImg.src = value;    &#125;,  &#125;,  price: &#123;    get: function () &#123;      return price;    &#125;,    set: function (value) &#123;      price = value;      oPrice.innerText = value &gt; 0 ? value : &quot;免费&quot;;    &#125;,  &#125;,&#125;);return data; //将obj对象返回</code></pre><p>  }<br>  var date &#x3D; update(); &#x2F;&#x2F;调用函数，得到obj对象<br>  &#x2F;&#x2F;更新数据，当date中的数据发生更新数据，则页面数据就发生相应的变化<br>  date.title &#x3D; “Web前端高级工程师系统课-星辰班”;<br>  date.mainImg &#x3D;<br>    “<a href="https://sce7a2b9c9d95a-sb-qn.qiqiuyun.net/files/course/2022/08-29/210311f40bcf290736.jpg">https://sce7a2b9c9d95a-sb-qn.qiqiuyun.net/files/course/2022/08-29/210311f40bcf290736.jpg</a>“;<br>  date.price &#x3D; 300;</p><blockquote><p></script></p><pre><code></code></pre></blockquote><h3 id="二、区分公有、静态、私有属性"><a href="#二、区分公有、静态、私有属性" class="headerlink" title="二、区分公有、静态、私有属性"></a>二、区分公有、静态、私有属性</h3><h4 id="JS-公有属性和公有方法"><a href="#JS-公有属性和公有方法" class="headerlink" title="JS 公有属性和公有方法"></a>JS 公有属性和公有方法</h4><blockquote><ul><li>公有属性：所有构造函数的实例都可以访问的属性，在构造函数内部通过 <code>this.属性名</code> 定义的。</li><li>公有方法：所有构造函数的实例都可以访问的方法，在构造函数 <code>prototype</code> 原型上定义的方法。<blockquote><p>公有属性也称实例属性，公有方法也称实例方法</p></blockquote></li></ul></blockquote><blockquote><p>定义公有方法有两种方式:</p><ul><li>一种是在在构造函数内部通过<code>this.方法</code>定义；但不推荐这种方式，因为它在每个实例身上都会创建，并且相互独立，所以就会造成内存的浪费</li><li>另一种方式就是在构造函数的原型上定义，所有实例都是共用原型上的同一个方法，更推荐这种方式</li></ul></blockquote><blockquote><pre><code>function Person(name, age) &#123;  // 公有属性 实例属性  this.name = name;  this.age = age;</code></pre></blockquote><p>  &#x2F;&#x2F; 公有方法（一般不会这样写）<br>  this.toSleep &#x3D; function () {<br>    console.log(“我正在睡觉”);<br>  };<br>}<br>&#x2F;&#x2F; 公有方法 实例方法<br>Person.prototype.sayHello &#x3D; function () {<br>  console.log(“大家好，我是” + this.name);<br>};</p><blockquote></blockquote><p>var p1 &#x3D; new Person(“张三”, 32);<br>console.log(p1.name);<br>console.log(p1.age);<br>p1.sayHello();</p><blockquote><pre><code></code></pre></blockquote><h4 id="JS-静态属性和静态方法"><a href="#JS-静态属性和静态方法" class="headerlink" title="JS 静态属性和静态方法"></a>JS 静态属性和静态方法</h4><blockquote><ul><li>静态属性：只有类（构造函数）本身能访问的属性，通过<code>类名.属性名</code>来定义</li><li>静态方法：只有类（构造函数）本身能访问的属性，通过<code>类名.方法名 = function() &#123;...&#125;</code> 来定义</li><li>访问的时候也是通过<code>类名.属性名/方法名</code>的方式</li></ul></blockquote><blockquote><pre><code>function Person() &#123;&#125;// 静态属性Person.length = 0;Person.children = function () &#123;  console.log(&quot;静态方法&quot;);&#125;;</code></pre></blockquote><p>var p &#x3D; new Person();<br>console.log(p.length); &#x2F;&#x2F; 不能访问<br>console.log(Person.length); &#x2F;&#x2F; 能访问</p><blockquote><pre><code></code></pre></blockquote><h4 id="JS-私有属性、私有方法和特权方法"><a href="#JS-私有属性、私有方法和特权方法" class="headerlink" title="JS 私有属性、私有方法和特权方法"></a>JS 私有属性、私有方法和特权方法</h4><blockquote><ul><li>私有属性：只能在构造函数<strong>内部</strong>才能访问的属性，如果外部要访问必须<strong>通过指定的方法</strong>来访问和修改</li><li>私有方法：是指对象不希望公开的方法，只能在构造函数<strong>内部</strong>才能调用的方法</li><li><strong>特权方法：是指有权访问内部私有属性和私有方法的公有方法</strong></li></ul></blockquote><blockquote><blockquote><p>注意：</p></blockquote><ul><li>在JS中并没有私有属性和私有方法的概念，所以需要利用<strong>闭包</strong>的思想<ul><li>在构造函数里<strong>直接声明</strong>属性和方法<blockquote><p>注意与公有的声明方式：<code>this.属性/方法</code>区分</p></blockquote></li></ul></li><li>行业约定规范，私有属性和方法在命名时以<code>_</code>下划线开头</li></ul></blockquote><blockquote><pre><code>function Price() &#123;  // 私有属性  var _price = 0;</code></pre></blockquote><p>  &#x2F;&#x2F; 私有方法  用来对属性price做相关操作<br>  function _computed() {<br>    return _price &gt; 0 ? “￥” + _price : “免费”;<br>  }</p><blockquote></blockquote><p>  &#x2F;&#x2F; 特权方法  获取属性计算后的值<br>  this.getPrice &#x3D; function () {<br>    return _computed();<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F; 特权方法<br>  this.setPrice &#x3D; function (value) {<br>    if (typeof value !&#x3D;&#x3D; “number”) throw new TypeError(“传入一个数字”);<br>    _price &#x3D; value;<br>  };<br>}</p><blockquote></blockquote><p>var p &#x3D; new Price();<br>p.setPrice(200.05);<br>console.log(p.getPrice()); &#x2F;&#x2F; ￥200.05<br>p.setPrice(-90); &#x2F;&#x2F;<br>console.log(p.getPrice()); &#x2F;&#x2F; 免费</p><blockquote><pre><code></code></pre></blockquote><h4 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h4><blockquote><ul><li>将所有实例都操作的<strong>特权方法</strong>定义在构造函数的<strong>原型链</strong>上</li><li>特权方法要访问到私有属性和方法可以利用<strong>闭包</strong>来实现</li></ul></blockquote><blockquote><blockquote><p>矛盾点：</p></blockquote><ul><li>定义在原型链上的是公有方法,它只能通过<code>this.</code>的方式访问构造函数里的<strong>公有属性&#x2F;方法</strong>，<strong>不能访问到私有的</strong></li><li>因此要用<strong>立即执行函数+闭包</strong>的方式才能实现混合模式</li></ul><pre><code> var GetNum = (function () &#123;   var _num = 4;   function GetNum() &#123;&#125;   GetNum.prototype.get = function () &#123;     return _num;   &#125;;   GetNum.prototype.set = function (value) &#123;     _num = value;   &#125;;   return GetNum; &#125;)();</code></pre></blockquote><p> var n1 &#x3D; new GetNum();<br> console.log(n1);<br> console.log(n1.get());&#x2F;&#x2F;4<br> n1.set(555);<br> console.log(n1.get());&#x2F;&#x2F;555</p><blockquote><pre><code></code></pre></blockquote><blockquote><p><strong>案例应用</strong></p><ul><li>利用 JS 来模拟现实生活中，父亲有挣钱、花钱、查看账户金额的能力，但是他的孩子只有花钱能力</li><li>我们可以定义两个类：Father类（模拟父亲） Children类（模拟孩子们）</li></ul></blockquote><p><strong>Father 类身上有的方法和属性</strong></p><table><thead><tr><th>属性与方法</th><th>功能</th></tr></thead><tbody><tr><td>私有属性</td><td>_money</td></tr><tr><td>静态方法</td><td>save</td></tr><tr><td>静态方法</td><td>take</td></tr><tr><td>静态方法</td><td>view</td></tr><tr><td>实例方法</td><td>take</td></tr></tbody></table><p><strong>Children 类身上有的方法和属性</strong></p><table><thead><tr><th>属性和方法</th><th>功能</th></tr></thead><tbody><tr><td>实例属性 姓名</td><td>保存孩子的姓名</td></tr></tbody></table><blockquote><pre><code> var Father = (function () &#123;   //私有属性   var _money = 0;   function Father() &#123;&#125;   //静态方法：存钱   Father.save = function (value) &#123;     _money += value;     console.log(&quot;父亲存了&quot; + value + &quot;元&quot;);   &#125;;   // 静态方法 取钱   Father.take = function (value) &#123;     _money -= value;     console.log(&quot;父亲取走&quot; + value + &quot;元&quot;);   &#125;;   // 静态方法 查看   Father.view = function () &#123;     console.log(&quot;目前账户还有&quot; + _money + &quot;元&quot;);     return _money;   &#125;;   //公有方法(实例方法)   Father.prototype.take = function (value) &#123;     _money -= value;     console.log(this.name + &quot;取走&quot; + value + &quot;元&quot;);   &#125;;   return Father;  &#125;)(); //子类 function Child(name) &#123;  this.name = &quot;张三&quot;;  Father.call(this); // 经典继承（盗用构造函数） &#125; // 原型式继承 Child.prototype = Object.create(Father.prototype);</code></pre></blockquote><p> var child1 &#x3D; new Child();<br> Father.save(2000); &#x2F;&#x2F;父亲存了2000元<br> Father.take(200); &#x2F;&#x2F;父亲取走200元<br> Father.view(); &#x2F;&#x2F;目前账户还有1800元<br> child1.take(100); &#x2F;&#x2F;张三取走100元</p><blockquote><pre><code></code></pre></blockquote><blockquote><blockquote><p>注意： 以上情况，所有实例本质上操作的是同一个变量<code>_money</code></p></blockquote></blockquote><h4 id="多彩运动的小球"><a href="#多彩运动的小球" class="headerlink" title="多彩运动的小球"></a>多彩运动的小球</h4><ol><li>多彩运动小球的实现原理<blockquote><ul><li>当鼠标滑动时，会产生一系列的彩色小球，然后这些小球开始向不同的方向运动，运动过程中会发生（大小，位置，透明度）的变化</li><li>所以我们需要构建一个球类，这个类身上有以下相关的属性和方法<table><thead><tr><th>属性和方法</th><th>说明</th></tr></thead><tbody><tr><td>实例属性x</td><td>小球水平方向坐标 ，默认值 0</td></tr><tr><td>实例属性y</td><td>小球垂直方向从标 ，默认值 0</td></tr><tr><td>实例属性r</td><td>小球的半径，默认值 20</td></tr><tr><td>实例属性color</td><td>数组，从数组中随机取出一个颜色作为小球的颜色</td></tr><tr><td>实例属性 opacity</td><td>小球的透明度（刚开始透明度为 1）</td></tr><tr><td>实例属性 speedX</td><td>小球水平方向运动速度（步长）随机 （取值范围[-10,10]）</td></tr><tr><td>实例属性 speedY</td><td>小球垂直方向运动速度（步长）随机（取值范围[-10,10]）</td></tr><tr><td>实例属性 dom</td><td>小球的 dom 结构</td></tr><tr><td>实例方法 init</td><td>初始化一个小球（根据小球属性，在页面创建一个真实的 DOM 球）</td></tr><tr><td>实例方法 update</td><td>更新小球的属性值(x,y,r,opacity)，同时当小球透明度为 0，将其从 DOM 中删除</td></tr></tbody></table></li></ul></blockquote></li></ol><ul><li><p>x,y属性由鼠标的位置决定，所以当<code>onmousemove</code>事件触发时，创建实例</p></li><li><p><code>speedx、speedy</code>：不能同时等于0，用<code>do...while</code>语句</p><blockquote><pre><code>/*** Ball 创建一个球类* @param x坐标  默认值 0* @param y坐标  默认值 0* @param r小球半径 默认 20*/function Ball(x = 0, y = 0, r = 20) &#123;this.x = x; // x坐标this.y = y; // y坐标this.r = r; // 小球半径// 随机生成一个小球颜色this.color = (function () &#123;  var color = [    &quot;red&quot;,    &quot;pink&quot;,    &quot;skyblue&quot;,    &quot;orange&quot;,    &quot;tomato&quot;,    &quot;khaki&quot;,    &quot;greenyellow&quot;,  ];  var index = (Math.random() * color.length) &gt;&gt; 0;  return color[index];&#125;)();this.opacity = 1; // 小球透明度// 小球运动速度，speedX和speedY的取值范围 [-10,10]，但不能同时为0do &#123;  this.speedX = Math.floor(Math.random() * 21) - 10;  this.speedY = Math.floor(Math.random() * 21) - 10;&#125; while (this.speedX === 0 &amp;&amp; this.speedY === 0);</code></pre></blockquote><p>&#x2F;&#x2F; 在new Ball(),内部会自动调用this.init()初始化小球，在页面显示，其 实现代码看下一步<br>this.init();<br>}</p><blockquote></blockquote><p>&#x2F;&#x2F; 鼠标在页面滑动时，会创建实例化的小球<br>document.onmousemove &#x3D; function (e) {<br>var pageX &#x3D; e.pageX;<br>var pageY &#x3D; e.pageY;<br>new Ball(pageX, pageY);<br>};</p><blockquote><pre><code></code></pre></blockquote></li><li><p><code>init</code>方法</p><blockquote><ul><li>要在定义实例属性的最后调用该方法；创建实例的时候就会自动调用,实现在页面插入一个真实的小球；</li><li>创建DOM后，要将DOM设置成<strong>绝对定位</strong></li><li>为了鼠标出现在小球中心，小球的宽等于<code>x-小球的半径</code>，高同理</li></ul><pre><code>Ball.prototype.init = function () &#123;this.dom = document.createElement(&quot;div&quot;); // 创建dom结构this.dom.style.position = &quot;absolute&quot;;this.dom.style.left = this.x - this.r + &quot;px&quot;;this.dom.style.top = this.y - this.r + &quot;px&quot;;this.dom.style.width = 2 * this.r + &quot;px&quot;;this.dom.style.height = 2 * this.r + &quot;px&quot;;this.dom.style.borderRadius = &quot;50%&quot;;this.dom.style.backgroundColor = this.color;// 添加到页面document.body.appendChild(this.dom);&#125;;</code></pre></blockquote></li><li><p><code>update</code>方法</p><blockquote><ul><li>放在定时器内，每间隔一段时间就调用</li><li>更新小球的属性值(x,y,r,opacity)，并将这些值再次更新到DOM中</li><li>监控小球的透明度，一旦透明度为0，就把他从DOM和数组中删除</li></ul><pre><code>Ball.prototype.update = function () &#123;this.x += this.speedX; // 更新x坐标this.y += this.speedY; // 更新y坐标this.r += 0.3; // 更新半径this.opacity -= 0.01;</code></pre></blockquote><p>&#x2F;&#x2F; 更新的属性更新到真实DOM上<br>this.dom.style.display &#x3D; “none”;<br>this.dom.style.width &#x3D; this.r * 2 + “px”;<br>this.dom.style.height &#x3D; this.r * 2 + “px”;<br>this.dom.style.left &#x3D; this.x - this.r + “px”;<br>this.dom.style.top &#x3D; this.y - this.r + “px”;<br>this.dom.style.opacity &#x3D; this.opacity;<br>this.dom.style.display &#x3D; “block”;<br>};</p><blockquote><pre><code></code></pre></blockquote></li><li><p>那如何监控鼠标在滑动过程中被创建出来的一堆小球，然后让他们不停的<strong>运动</strong>呢 ？</p><blockquote><ul><li>我们需要在球类上创建一个<strong>私有属性</strong><code>_ballArr = []</code>，用来保存鼠标移动时创建出来的实例化小球。每实例化一个小球，就把这个实例化的小球对象添加到<code>_ballArr</code>数组中</li><li>还需要创建一个静态方法<code>ballArr</code>用来获取所有实例化的小球。这样我们就能拿到所有实例化的小球，对他们进行操作。<table><thead><tr><th>属性和方法</th><th>说明</th></tr></thead><tbody><tr><td>私有属性 <code>_ballArr</code></td><td>数组，用来保存创建好的实例化小球</td></tr><tr><td>静态方法 <code>getBalls</code></td><td>用来获取所有实例化的小球 （返回数组<code>ballArr</code>）</td></tr></tbody></table></li></ul><pre><code>var _ballArr=[]; // 类的私有属性// 静态方法Ball.getBalls = function () &#123;  return ballArr;&#125;;</code></pre></blockquote><p>function Ball(x &#x3D; 0, y &#x3D; 0, r &#x3D; 20){<br>&#x2F;&#x2F; ……<br>&#x2F;&#x2F; …..以下代码放在 this.init() 后面</p><blockquote></blockquote><p>&#x2F;&#x2F; 每次创建的实例对象，添加到数组 _ballArrl中<br>_ballArr.push(this);<br>}</p><blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><p>拿到实例化小球后，如何让小球运动起来 ？</p><ul><li>要让小球运动起来，需要开启一个<strong>定时器</strong>，让球不断的调用自身的<code>update</code>方法，实现小球运动及运动中各种属性的变化</li><li>同时还要判断如果小球的透明度为 <code>0</code>，则需要将小球从<code>_ballArr</code>数组和 <code>DOM</code> 中删除，确保垃圾能及时被回收，不至于小球多了造成页面卡顿,这段代码写在<code>update</code>方法的最后</li></ul></blockquote><blockquote><pre><code>var timer = setInterval(function () &#123;  var balls = Ball.getBalls();  // 更新小球  for (var i = 0; i &lt; balls.length; i++) &#123;    balls[i].update();  &#125;&#125;, 20);</code></pre></blockquote><p>&#x2F;&#x2F; 以下代码添加到update方法的最后面<br>&#x2F;&#x2F; 如果小球的透明度小于等于0,则将其从数组和DOM中删除<br>if (this.opacity &lt;&#x3D; 0) {<br>  for (var i &#x3D; 0; i &lt; _ballArr.length; i++) {<br>    if (_ballArr[i] &#x3D;&#x3D;&#x3D; this) {<br>      _ballArr.splice(i, 1); &#x2F;&#x2F; 从数组中删除<br>      document.body.removeChild(this.dom); &#x2F;&#x2F; 从DOM中删除<br>      break;<br>    }<br>  }<br>}</p><blockquote><pre><code></code></pre></blockquote><ol start="2"><li>完整源码<blockquote><ul><li>为了防止变量造成全局污染，则利用闭包，将所有代码封装在立即执行函数中，然后将 <code>Ball</code> 类作为返回值返回</li></ul><pre><code> //构造函数 var Ball = (function () &#123;  var _ballArr = [];  function Ball(x = 0, y = 0, r = 20) &#123; //公有属性 this.x = x; this.y = y; this.r = r; this.opacity = 1; this.color = (function () &#123;   var colorArr = [&quot;red&quot;, &quot;skyblue&quot;, &quot;pink&quot;, &quot;tomato&quot;, &quot;yellow&quot;];   var index = (Math.random() * colorArr.length) &gt;&gt; 0;   return colorArr[index]; &#125;)(); do &#123;   this.speedx = (Math.random() * 21 - 10) &gt;&gt; 0;   this.speedy = (Math.random() * 21 - 10) &gt;&gt; 0; &#125; while (this.speedx == 0 &amp;&amp; this.speedy == 0); _ballArr.push(this); //将创建的实例放入数组中 //初始化小球 this.init();  &#125;  //静态方法  Ball.ballArr = function () &#123; return _ballArr;  &#125;;  //公有方法：初始化  Ball.prototype.init = function () &#123; this.dom = document.createElement(&quot;div&quot;); //球在鼠标中心出现 this.dom.style.position = &quot;absolute&quot;; this.dom.style.left = this.x - this.r / 2 + &quot;px&quot;; this.dom.style.top = this.y - this.r / 2 + &quot;px&quot;; this.dom.style.width = this.r * 2 + &quot;px&quot;; this.dom.style.height = this.r * 2 + &quot;px&quot;; this.dom.style.borderRadius = &quot;50%&quot;; this.dom.style.opacity = this.opacity; this.dom.style.backgroundColor = this.color; //插入页面 document.body.appendChild(this.dom);  &#125;;  //公有方法：运动函数  Ball.prototype.update = function () &#123; this.x += this.speedx; this.y += this.speedy; this.r += 0.3; this.opacity -= 0.01;           //将更新后的属性 更新到真实的DOM上 this.dom.style.display = &quot;none&quot;; this.dom.style.left = this.x + &quot;px&quot;; this.dom.style.top = this.y - this.r / 2 + &quot;px&quot;; this.dom.style.width = this.r * 2 + &quot;px&quot;; this.dom.style.height = this.r * 2 + &quot;px&quot;; this.dom.style.opacity = this.opacity; this.dom.style.display = &quot;block&quot;;</code></pre></blockquote> &#x2F;&#x2F;删除dom、数组中的实例<br> if (this.opacity &lt;&#x3D; 0) {<br>   &#x2F;&#x2F; 找到小球实例在数组中的位置，然后将他从数组中删除<br>   var index &#x3D; _ballArr.indexOf(this);<br>   _ballArr.splice(index, 1);<br>   &#x2F;&#x2F; 从dom中删除<br>   document.body.removeChild(this.dom);<br> }<br>  };<br>  return Ball;<br>})();<blockquote></blockquote> &#x2F;&#x2F;定时器<br> var timer &#x3D; setInterval(function () {<br>var balls &#x3D; Ball.ballArr();<br>for (var i &#x3D; 0; i &lt; balls.length; i++) {<br>  balls[i].update();<br>}<br> }, 20);<br> &#x2F;&#x2F;鼠标事件<br> document.onmousemove &#x3D; function (e) {<br>var target &#x3D; e.target;<br>var _x &#x3D; e.pageX;<br>var _y &#x3D; e.pageY;<br>new Ball(_x, _y);<br> };<blockquote><pre><code></code></pre></blockquote></li></ol><h3 id="三、JS-实现栈与队列"><a href="#三、JS-实现栈与队列" class="headerlink" title="三、JS 实现栈与队列"></a>三、JS 实现栈与队列</h3><ol><li>什么是栈<blockquote><p>栈是一种先进后出的数据结构，是一种逻辑结构，一种抽像出来的理论模型</p><ul><li>入栈操作（push）：就将新元素放入到栈中，先放的在栈底</li><li>出栈操作（pop）：就是将元素从栈中弹出，只有栈顶元素才能出<img src="栈.jpg"></li></ul></blockquote></li></ol><blockquote><ul><li>之前课程中我们简单的用数组来模拟一个栈的出栈和入栈全过程</li><li>数组相当于一个栈结构，向数组中<code>push</code>添中元素为入栈，从数组尾部<code>pop</code>取出元素为出栈<blockquote><p>接下来，我们利用 JS 来模拟一个完整的栈对象</p></blockquote></li></ul></blockquote><ol start="2"><li>JS 实现栈结构<blockquote><ul><li>构建一个 <code>Stack</code> 类，只要 <code>new Stack()</code> 就能创建一个新的栈</li><li>一个基础的栈对象要求有以下方法和属性<table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>push</td><td>入栈，向栈中添加元素</td></tr><tr><td>pop</td><td>出栈，从栈顶部弹出元素</td></tr><tr><td>isFull</td><td>查看栈是否满</td></tr><tr><td>isEmpty</td><td>查看栈是否为空</td></tr><tr><td>getTop</td><td>取出栈顶部元素</td></tr><tr><td>clear</td><td>清空栈中元素</td></tr><tr><td>view</td><td>查看当前栈中元素</td></tr></tbody></table></li></ul></blockquote></li></ol><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>实例属性：size</td><td>查看栈的长度（模拟大小）</td></tr><tr><td>私有属性：_stack</td><td>数组，模拟栈容器，栈中元素都存在<code>_stack</code>中；私有属性，不允许直接操作<code>_stack</code>，只能通过给定的接口来操作</td></tr></tbody></table><blockquote><blockquote><p>注：</p></blockquote><ul><li>以上栈（数组）的长度是在动态变化的，但最终入栈的个数不能大于栈的<code>size</code>大小</li><li>如果栈满，再入栈就会抛出栈满错误提示</li><li>如果栈空，再出栈就会抛出栈空错误提示</li></ul></blockquote><ul><li>基础版代码<blockquote><pre><code>/*** Stack 栈* size 栈的大小（长度）*/function Stack(size = 100) &#123;this._stack = []; // 私有属性，栈容器this.size = size; // 返回栈的大小（长度）,可更改&#125;</code></pre></blockquote>&#x2F;&#x2F; 判断栈是否满,满返回true,否则false<br>Stack.prototype.isFull &#x3D; function () {<br>return this._stack.length &gt;&#x3D; this.size ? true : false;<br>};<blockquote></blockquote>&#x2F;&#x2F; 判断栈是否为空,为空返回true,否则false<br>Stack.prototype.isEmpty &#x3D; function () {<br>return this._stack.length &lt;&#x3D; 0 ? true : false;<br>};<blockquote></blockquote>&#x2F;&#x2F; 入栈<br>Stack.prototype.push &#x3D; function (value) {<br>if (this.isFull()) {<br>  throw new Error(“栈满，不能再填加元素”);<br>} else {<br>  this._stack.push(value);<br>  return true; &#x2F;&#x2F; 返回true，表示入栈成功<br>}<br>};<blockquote></blockquote>&#x2F;&#x2F; 出栈<br>Stack.prototype.pop &#x3D; function () {<br>if (this.isEmpty()) {<br>  throw new Error(“栈空，没有元素可以出栈”);<br>} else {<br>  return this._stack.pop(); &#x2F;&#x2F; 返回出栈元素<br>}<br>};<blockquote></blockquote>&#x2F;&#x2F; 取出栈顶元素<br>Stack.prototype.getTop &#x3D; function () {<br>return this._stack[this._stack.length - 1];<br>};<blockquote></blockquote>&#x2F;&#x2F; 查看栈中元素<br>Stack.prototype.view &#x3D; function () {<br>console.log(“当前栈中的元素有”);<br>this._stack.forEach(function (item) {<br>  console.log(item);<br>});<br>};<blockquote></blockquote>&#x2F;&#x2F; 清空栈<br>Stack.prototype.clear &#x3D; function () {<br>this._stack &#x3D; [];<br>return true; &#x2F;&#x2F; 清空栈成功<br>};<blockquote></blockquote>var stack &#x3D; new Stack(4);<br>&#x2F;&#x2F; 入栈<br>console.log(stack.push(1)); &#x2F;&#x2F; true<br>console.log(stack.push(2)); &#x2F;&#x2F; true<br>console.log(stack.push(3)); &#x2F;&#x2F; true<br>console.log(stack.push(4)); &#x2F;&#x2F; true<br>&#x2F;&#x2F; 查看栈是否满<br>console.log(stack.isFull()); &#x2F;&#x2F; true<br>&#x2F;&#x2F; 查看栈元素<br>console.log(stack.view()); &#x2F;&#x2F;  [1, 2, 3, 4]<br>&#x2F;&#x2F; 出栈<br>console.log(stack.pop()); &#x2F;&#x2F; 4<br>console.log(stack.pop()); &#x2F;&#x2F; 3<br>&#x2F;&#x2F; 查看栈元素<br>console.log(stack.view()); &#x2F;&#x2F; [1, 2]<br>&#x2F;&#x2F; 查看栈是否满<br>console.log(stack.isFull()); &#x2F;&#x2F; false<br>&#x2F;&#x2F; 清空栈<br>console.log(stack.clear()); &#x2F;&#x2F; true<br>&#x2F;&#x2F; 判断栈是否为空<br>console.log(stack.isEmpty()); &#x2F;&#x2F; true<br>&#x2F;&#x2F; 查看栈元素<br>console.log(stack.view()); &#x2F;&#x2F; []<blockquote><pre><code></code></pre></blockquote></li></ul><ol start="3"><li><p>JS 实现栈结构 - 优化版</p><blockquote><p>以上版本，最终用户本质上还是可以通过 <code>stack._stack</code>的方式操作数组</p><ul><li>我们可以把私有属性的名字，改成<code>Symbol</code>类型，这样用户就真正没有办法访问到该属性了</li></ul><pre><code>var Stack = (function () &#123;/*** Stack 栈* size 栈的大小（长度）*/  var _stack = Symbol(&quot;_stack&quot;); // 生成唯一标识符  function Stack(size = 100) &#123; this[_stack] = []; //  私有属性，栈容器 var _size = size; // 返回栈的大小（长度）,可更改</code></pre></blockquote><p> Object.defineProperty(this, “size”, {<br>   get: function () {<br> return _size;<br>   },<br>   &#x2F;&#x2F; 当对size进行操作时，需要对数组做相关操作<br>   set: function (value) {<br> if (value &lt; _size) {<br>   this[_stack] &#x3D; this[_stack].slice(0, value);<br>   _size &#x3D; value;<br> }<br>   },<br> });<br>  }</p><blockquote></blockquote><p>  &#x2F;&#x2F; 判断栈是否满,满返回true,否则false<br>  Stack.prototype.isFull &#x3D; function () {<br> return this[_stack].length &#x3D;&#x3D;&#x3D; this._size ? true : false;<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F; 判断栈是否为空,为空返回true,否则false<br>  Stack.prototype.isEmpty &#x3D; function () {<br> return this[_stack].length &#x3D;&#x3D;&#x3D; 0 ? true : false;<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F; 入栈<br>  Stack.prototype.push &#x3D; function (value) {<br> if (this.isFull()) {<br>   throw new Error(“栈满，不能再填加元素”);<br> } else {<br>   this[_stack].push(value);<br>   return true; &#x2F;&#x2F; 返回true，表示入栈成功<br> }<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F; 出栈<br>  Stack.prototype.pop &#x3D; function () {<br> if (this.isEmpty()) {<br>   throw new Error(“栈空，没有元素可以出栈”);<br> } else {<br>   return this[_stack].pop(); &#x2F;&#x2F; 返回出栈元素<br> }<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F; 取出栈顶元素<br>  Stack.prototype.getTop &#x3D; function () {<br> return this[_stack][this[_stack].length - 1];<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F; 查看栈中元素<br>  Stack.prototype.view &#x3D; function () {<br> console.log(“当前栈中的元素有”);<br> this[_stack].forEach(function (item) {<br>   console.log(item);<br> });<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F; 清空栈<br>  Stack.prototype.clear &#x3D; function () {<br> this[_stack] &#x3D; [];<br> return true; &#x2F;&#x2F; 清空栈成功<br>  };<br>  return Stack;<br>})();</p><blockquote></blockquote><p>var stack &#x3D; new Stack();<br>&#x2F;&#x2F; 入栈<br>console.log(stack.push(1)); &#x2F;&#x2F; true<br>console.log(stack.push(2)); &#x2F;&#x2F; true<br>console.log(stack.push(3)); &#x2F;&#x2F; true<br>console.log(stack.push(4)); &#x2F;&#x2F; true<br>&#x2F;&#x2F; 查看栈是否满<br>console.log(stack.isFull()); &#x2F;&#x2F; true<br>&#x2F;&#x2F; 查看栈元素<br>console.log(stack.view()); &#x2F;&#x2F;  [1, 2, 3, 4]<br>&#x2F;&#x2F; 出栈<br>console.log(stack.pop()); &#x2F;&#x2F; 4<br>console.log(stack.pop()); &#x2F;&#x2F; 3<br>&#x2F;&#x2F; 查看栈元素<br>console.log(stack.view()); &#x2F;&#x2F; [1, 2]<br>&#x2F;&#x2F; 查看栈是否满<br>console.log(stack.isFull()); &#x2F;&#x2F; false<br>&#x2F;&#x2F; 清空栈<br>console.log(stack.clear()); &#x2F;&#x2F; true<br>&#x2F;&#x2F; 判断栈是否为空<br>console.log(stack.isEmpty()); &#x2F;&#x2F; true<br>&#x2F;&#x2F; 查看栈元素<br>console.log(stack.view()); &#x2F;&#x2F; []</p><blockquote><pre><code></code></pre></blockquote></li><li><p>什么是队列</p><blockquote><p>现在我们来学习一种新的数据结构队列</p><ul><li>队列是一种线性的数据结构，它的特点是先进先出（<code>First In First Out</code>，简称<code>FIFO</code>），后进后出</li><li>队列的出口端叫作队头（<code>front</code>），队列的入口端叫作队尾（<code>rear</code>）</li><li>入队（<code>enqueue</code>）就是把新元素放入队列中，只允许在队列的队尾放入元素</li><li>出队（<code>dequeue</code>）就是把元素移出队列，只允许在队列的队头移出元素<img src="队列.png"></li></ul></blockquote></li><li><p>JS 实现队列</p><blockquote><p>构建一个 Queue 类，只要new Queue() 就能创建一个新的队列</p><ul><li>一个基础的队列对象要求有以下方法和属性</li></ul></blockquote></li></ol><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>enQueue</td><td>入队，向队尾添加元素</td></tr><tr><td>deQueue</td><td>出队，从队头删除元素</td></tr><tr><td>isFull</td><td>判断队列是否已满</td></tr><tr><td>isEmpty</td><td>判断队列是否为空</td></tr><tr><td>getFront</td><td>取出队头元素</td></tr><tr><td>clear</td><td>清空队列</td></tr><tr><td>view</td><td>查看队列中元素</td></tr></tbody></table><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>私有属性：<code>_queue</code></td><td>数组，模拟队列容器，队中元素都存在<code>_queue</code>中；私有属性，不允许直接操作<code>_queue</code>，只能通过给定的接口来操作</td></tr><tr><td>实例属性：size</td><td>队列的大小（长度）</td></tr></tbody></table><blockquote><pre><code>&lt;script&gt;  var Queue = (function () &#123;    var _queue = Symbol(&quot;queue&quot;); // 创建唯一标识符    function Queue(size) &#123;      this[_queue] = []; // 私有属性，队列容器      this.size = size; // 队列的长度（大小）    &#125;    // 判断队列是否已满,true表示已满，false表示未满    Queue.prototype.isFull = function () &#123;      return this[_queue].length === this.size ? true : false;    &#125;;    // 判断队列是否为空    Queue.prototype.isEmpty = function () &#123;      return this[_queue].length === 0 ? true : false;    &#125;;</code></pre></blockquote><pre><code>// 入队Queue.prototype.enQueue = function (value) &#123;  if (this.isFull()) &#123;    throw new Error(&quot;队列已满，不能现入队&quot;);  &#125; else &#123;    this[_queue].push(value);    return true; //表示入队成功  &#125;&#125;;</code></pre><blockquote></blockquote><pre><code>// 出队Queue.prototype.deQueue = function () &#123;  if (this.isEmpty()) &#123;    throw new Error(&quot;队列已为空，没有元素可出队&quot;);  &#125; else &#123;    return this[_queue].shift(); // 返回出队元素  &#125;&#125;;</code></pre><blockquote></blockquote><pre><code>// 取出队头元素Queue.prototype.getFront = function () &#123;  return this[_queue][0]; // 返回值为undefined表示当前队列已空&#125;;</code></pre><blockquote></blockquote><pre><code>// 查看队列中元素Queue.prototype.view = function () &#123;  this[_queue].forEach(function (item) &#123;    console.log(item);  &#125;);&#125;;</code></pre><blockquote></blockquote><pre><code>// 清空队列Queue.prototype.clear = function () &#123;  this[_queue] = [];  return true; // true清空队列成功&#125;;return Queue;</code></pre><p>  })();</p><blockquote><p></script></p><pre><code>&gt;上述代码与模拟栈类似，只是出栈方式不同</code></pre></blockquote><blockquote><p><strong>上述版本缺点</strong></p><ul><li>以上版本，在入队时还好，直接尾部插入元素，但是在出队时<strong>从队头取出元素</strong>，本质上会造成整个数组往后的所有元素都向前移动，非常消耗性能</li><li>同时队列的容量大小一直是在不断变化的，而实际上一个队列的大小在刚开始分配时，大小应该是固定才更合理<br><strong>优化方向</strong></li><li>有没有什么办法能实现在出队时，能正常出，不需要动数组中的其它元素呢 ?</li><li>同时保证整个出队和入队过程程中，栈的容量大小是固定的</li></ul></blockquote><ol start="6"><li>优化版本 - JS 实现循环队列<blockquote><ul><li>我们可以利用<strong>双指针</strong>思想，同时采用循环队列的方式来实现</li><li>以下图中的队列容量（长度）为 <code>4</code>，需要用长度为 <code>5</code> 的数组来实现。<img src="模拟队列.png"></li></ul></blockquote></li></ol><blockquote><ul><li>定义两个指针 <code>front</code> 和 <code>rear</code>，<code>front</code>和<code>rear</code>分别表示当前队列队头和队尾的下标<ul><li><code>front</code> &#x3D; <code>rear</code> &#x3D; <code>0</code></li></ul></li><li>队列的长度为用户设定的<code>size+1</code> ，初始化后，不可更改<ul><li><code>this[_queue] = new Array(size + 1);</code></li></ul></li></ul></blockquote><blockquote><ul><li>查看队列元素：使用<code>filter</code>方法，过滤空元素，声明一个变量保存由<code>filter</code>方法筛选出来的元素所组成的数组</li><li>清空队列：初始化队列容器、队头、队尾</li></ul></blockquote><blockquote><ul><li>如果队未满，<ul><li>入队一个元素，<code>rear + 1</code>，向右移一位，<code>front</code>不变</li><li>当<code>rear + 1 === arr.length</code>时，则在下一次入队后， <code>rear = 0</code></li></ul></li></ul></blockquote><blockquote><p><strong>因此入队：</strong></p><ul><li>入队时要判断当前队是否满，如果满，啥也不做</li><li>先在队头处放置入队元素</li><li>然后移动<code>rear</code>的位置，要判断 <code>rear + 1 === arr.lenght</code>,如果成立，则入队后，<code>rear = 0</code></li><li>如果未满，则 <code>rear + 1</code></li><li>所以可得<code>rear</code> 的计算公式：<code>rear = (rear + 1) % arr.length</code></li></ul></blockquote><blockquote><ul><li>如果队未空，<ul><li>出队一个元素，<code>front + 1</code>，向右移一位，<code>rear</code>不变</li><li>当<code>front + 1 === arr.lenght</code> 时，则在下一次出队后，<code>front = 0</code></li></ul></li></ul></blockquote><blockquote><p><strong>因此出队：</strong></p><ul><li>出队时要判断当前队是否为空，如果为空，啥也不做。</li><li>如果队不为空，保存队尾的值，并返回</li><li>将当前队尾的值设为<code>null</code>,出队不是真的把这个元素从数组中删除,而是把指针移动到下一位,为了能看到效果,我们把出队的元素的位置值设置为null</li><li>接着改变<code>front</code>的位置，要判断 <code>front+1 === arr.length</code> 如果成立则出队后，<code>front = 0</code>，</li><li>如果不成立，则<code>front + 1</code></li><li>因此可得<code>front</code>的计算公式：<code>front = (front + 1) % arr.length</code></li></ul></blockquote><blockquote><ul><li>队满的条件：当<code>(rear + 1) % arr.lenght === front</code> 时，表示队满</li><li>队空的条件：当 <code>rear === front</code> 时，表示队空</li><li>重点强调：<strong>队列的容量 + 1 &#x3D; 数组的长度</strong><blockquote><ul><li>先进先出：从最左边开始入队，队列容量满了之后，出列时，也是从最左边开始出队(从队头删除元素)；</li><li><strong>但再次入队时</strong>，不是从最左边开始，而是入到<code>过渡项</code>：数组长度比队列容量多的那块；之后就是从最左边开始(此时的最左边相对于<code>front</code>来说是队尾)</li></ul></blockquote></li></ul></blockquote><blockquote><ul><li>用<code>Object.defineProperty()</code>方法，形成访问、设置<code>size</code>的接口<ul><li>get：返回私有变量<code>_size</code>的值</li><li>set：抛出错误，不允许更改</li></ul></li></ul></blockquote><blockquote><pre><code>&lt;script&gt;  var Queue = (function () &#123;    var _queue = Symbol(&quot;queue&quot;);    var _front = Symbol(&quot;front&quot;);    var _rear = Symbol(&quot;rear&quot;);    function Queue(size = 100) &#123;      // 私有属性      this[_queue] = new Array(size + 1); // 队容器（固定长度）      this[_front] = 0; // 队头      this[_rear] = 0; // 队尾      // 实例属性      var _size = size;      Object.defineProperty(this, &quot;size&quot;, &#123;        get: function () &#123;          return _size;        &#125;,        set: function () &#123;          throw new Error(&quot;不允许设置size的值&quot;);        &#125;,      &#125;);    &#125;</code></pre></blockquote><pre><code>// 队是否为空Queue.prototype.isFull = function () &#123;  //   队满的条件  return (this[_rear] + 1) % this[_queue].length === this[_front];&#125;;// 队是否为空Queue.prototype.isEmpty = function () &#123;  return this[_front] === this[_rear];&#125;;// 入队Queue.prototype.enQueue = function (value) &#123;  //入队前要判断当前队列是否已满,如果已满,则啥也不做,抛出错误提示  if (this.isFull()) throw new Error(&quot;当前队列已满,不能再入队&quot;);</code></pre><blockquote></blockquote><pre><code>  // 先在当前位置入队元素,然后指向右移动  this[_queue][this[_rear]] = value;  // 判断当前是不是在数组的最后面,最后一位就回到0  this[_rear] = (this[_rear] + 1) % this[_queue].length;  return true;&#125;;// 出队Queue.prototype.deQueue = function () &#123;  // 出队前要判断当前队列是否为空  if (this.isEmpty()) throw new Error(&quot;当前队列已空,没有元素可出队&quot;);  // 只存要出队的元素  var deQueueValue = this[_queue][this[_front]];  // 出队不是真的把这个元素从数组中删除,而是把指针移动到下一位  // 为了能看到效果,我们把出队的元素的位置值设置为null  this[_queue][this[_front]] = null;  // 判断出对的指针是否指向了数组的最后面,如果是,则出队后指向0  this[_front] = (this[_front] + 1) % this[_queue].length;</code></pre><blockquote></blockquote><pre><code>  return deQueueValue;&#125;;</code></pre><blockquote></blockquote><pre><code>// 队头元素Queue.prototype.getTop = function () &#123;  // 返回出队的元素,如果为null表示当前队列为空  return this[_queue][this[_front]];&#125;;// 查看队列元素Queue.prototype.view = function () &#123;  var result = this[_queue].filter(function (item) &#123;    return item !== null;  &#125;);  return result;&#125;;// 清空队列Queue.prototype.clear = function () &#123;  // 清空队列,就是重新初始化队列  this[_queue] = new Array(this.size + 1);  this[_front] = this[_rear] = 0;  return true;&#125;;return Queue;</code></pre><p>  })();</p><blockquote><p></script></p><pre><code></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（十三）</title>
      <link href="/2023/12/07/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/"/>
      <url>/2023/12/07/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>什么是 BOM</p><ul><li>BOM（Browser Object Model）浏览器对象模型，是 JS 与浏览器窗口交互的接口</li><li>BOM 的核心是 window 对象，它表示浏览器的实例<blockquote><p>前面学过的定时器属于BOM相关内容</p></blockquote></li></ul></blockquote><h3 id="一、window-对象"><a href="#一、window-对象" class="headerlink" title="一、window 对象"></a>一、window 对象</h3><blockquote><ul><li><code>window</code>作为全局变量，代表了脚本正在运行的窗口，暴露给<code>Javascript</code>代码</li><li>在有标签页功能的浏览器中，每个标签都拥有自己的<code>window</code>对象</li><li>也就是说，同一个窗口的标签页之间<strong>不会共享</strong>一个<code>window</code>对象</li></ul></blockquote><blockquote><p>window对象有<strong>两重身份</strong></p><ul><li>在<code>ECMScript</code>中为<code>Global</code>对象，也就是后面常说的 <code>Node</code>中的全局对象。</li><li>在浏览器窗口中为<code>window</code>对象，所有全局作用域下的 <code>var</code>声明的全局变量和函数都是<code>window</code>对象的属性</li></ul></blockquote><ol><li>全局变量是 window 属性<blockquote><p>所有全局作用域下 var 声明的全局变量和函数都是<code>window</code>对象的属性</p><pre><code>var a = 2;// hasOwnProperty 检测当前对象是否拥有该属性console.log(window.hasOwnProperty(&quot;a&quot;)); // trueconsole.log(window.a); // 2console.log(window.a == a); // true</code></pre></blockquote></li></ol><blockquote><ul><li>多个 JS 文件之间是<strong>共享全局作用域</strong>的，即 JS 文件没有作用域隔离功能</li><li>创建<code>a.js</code>和<code>b.js</code>及<code>c.html</code>文件，在<code>c.html</code>页面引入<code>a.js</code>和<code>b.js</code></li></ul><pre><code>// a.js文件代码如下var i=2;</code></pre></blockquote><p>&#x2F;&#x2F; b.js文件代码如下<br>var i++;</p><!-- c.html文件代码如下 --><blockquote><script src="js/a.js"></script><script src="js/b.js"></script><script>  console.log(i); // 3</script><pre><code></code></pre></blockquote><ol start="2"><li><p>内置函数普遍是 window 对象的方法</p><blockquote><ul><li><code>setInterval()</code>、<code>alert()</code>、<code>Array</code>等普遍是 <code>window</code>的方法</li></ul></blockquote></li><li><p>浏览器窗口大小</p><blockquote><ul><li>window 对象身上的以下 4 个属性用来确定浏览器窗品大小</li></ul></blockquote></li></ol><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>innerWidth</td><td>返回浏览器窗口中页面可视区宽（不包含 浏览器边框和工具栏，包括滚动条）</td></tr><tr><td>innerHeight</td><td>返回浏览器窗口中页面可视区高（不包含 浏览器边框和工具栏，包括滚动条）</td></tr><tr><td>outerWidth</td><td>返回浏览器窗口自身的实际宽(浏览器边框、工具栏、滚动条)</td></tr><tr><td>outerHeight</td><td>返回浏览器窗口自身的实际高(浏览器边框、工具栏、滚动条)</td></tr></tbody></table><blockquote><ul><li>因为 innerWidth 和 innerHeight 包括了滚动条的宽和高，所以很多时候我们获取页面可视宽和高是通过：<code>document.body.clientWidth || document.documentElement.clientWidth</code>来实现，它不包括滚动条宽高、浏览器边框和工具栏</li></ul><pre><code>// 浏览器窗口中页面视口大小 包括滚动条console.log(&quot;innerWidth:&quot; + window.innerWidth);console.log(&quot;innerHeight:&quot; + window.innerHeight);// 浏览器窗口大小console.log(&quot;outerWidth:&quot; + window.outerWidth);console.log(&quot;outerHeight:&quot; + window.outerHeight);</code></pre></blockquote><p>&#x2F;&#x2F; 页面可视区大小（不包括滚动条）<br>console.log(“clientWidth:” + document.documentElement.clientWidth);<br>console.log(“clientHeight:” + document.documentElement.clientHeight);</p><blockquote><pre><code></code></pre></blockquote><ol start="4"><li>滚动距离<table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>window.scrollX</td><td>返回文档&#x2F;页面在水平方向滚动的像素值</td></tr><tr><td>window.scrollY</td><td>返回文档在垂直方向已滚动的像素值</td></tr><tr><td>window.pageXoffset</td><td>相当于 scrollX 的别名</td></tr><tr><td>window.pageYoffset</td><td>相当于 scrollY 的别名</td></tr></tbody></table></li></ol><blockquote><blockquote><p>通常获取页面的水平和垂直滚动距离还会通过如下代码获取</p></blockquote><ul><li>文档水平滚动距离：<code>document.documentElement.scrollLeft || document.body.scrollLeft</code></li><li>文档垂直滚动距离：<code>document.documentElement.scrollTop || document.body.scrollTop</code></li></ul><pre><code>console.log(&quot;scrollX:&quot; + window.scrollX);console.log(&quot;scrollY:&quot; + window.scrollY);console.log(&quot;pageXoffset:&quot; + window.pageXOffset);console.log(&quot;pageYoffset:&quot; + window.pageYOffset);console.log(&quot;scrollTop:&quot; + document.documentElement.scrollTop);console.log(&quot;scrollLeft:&quot; + document.documentElement.scrollLeft);</code></pre></blockquote><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>scroll(x,y)</td><td>x，y表示相对视口距离的x和y坐标，<code>scroll(x,y)</code>表示文档滚动到<strong>指定坐标</strong>位置</td></tr><tr><td>scrollBy(x,y)</td><td>x表示水平方向上要滚动的<strong>偏移量</strong>，y表示垂直方向上要滚动的<strong>偏移量</strong></td></tr></tbody></table><blockquote><p>与按钮绑定：</p><ul><li><code>scroll(x,y)</code>只能点击一次，直接滚动条指定位置</li><li><code>scrollBy(x,y)</code>可多次点击，每次点击后移动指定距离</li></ul><pre><code>&lt;style&gt;  html,  body &#123;    margin: 0;    padding: 0;    height: 3000px;    width: 3000px;  &#125;  button &#123;    width: 150px;    height: 50px;    position: fixed;    right: 50px;    top: 200px;  &#125;  .by &#123;    top: 280px;  &#125;&lt;/style&gt;&lt;button class=&quot;to&quot;&gt;滚动到指定位置&lt;/button&gt;&lt;button class=&quot;by&quot;&gt;滚动一定距离&lt;/button&gt;&lt;script&gt;  var button = document.getElementsByTagName(&quot;button&quot;);  button[0].onclick = function () &#123;    window.scroll(100, 200); // 点击后，跳转到与视口x=100,y=200的坐标位置  &#125;;</code></pre></blockquote><p>  button[1].onclick &#x3D; function () {<br>    &#x2F;&#x2F; window.scrollBy(0, -100); &#x2F;&#x2F; 每次点击，滚动条向上滚动 100px<br>    window.scrollBy(0, 100); &#x2F;&#x2F; 每次点击，滚动条向上滚动100px<br>  };</p><blockquote><p></script></p><pre><code></code></pre></blockquote><ol start="5"><li>window 其它属性<blockquote><p>重点提示</p><ul><li>因为 window 对象的属性在全局作用域中有效，所以很多浏览器<code>API</code>及相关构造函数等都以<code>window</code>对象属性的形式暴露出来</li><li>总结一句话：window 对象身上的属性<strong>并非全是</strong>与 BOM 操作相关的方法和属性<br>接下来我们学习<code>window</code>对象身上与<code>BOM</code>相关的属性</li></ul></blockquote></li></ol><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>location</td><td>获取当前页面的 URL信息</td></tr><tr><td>history</td><td>对象提供了操作浏览器会话历史的接口</td></tr><tr><td>navigator</td><td>对象包含用户此次活动的浏览器的相关属性和标识</td></tr></tbody></table><h3 id="二、window-location-对象"><a href="#二、window-location-对象" class="headerlink" title="二、window.location 对象"></a>二、window.location 对象</h3><blockquote><ul><li><code>window.location</code>只读属性，返回一个 <code>Location</code>对象，其中包含有关文档<strong>当前位置</strong>的信息。</li><li><code>Location</code>接口表示其链接到的对象的位置（URL）<ul><li><code>location.__proto__ === Location.prototype; // true</code><blockquote><p>强调：location 对象虽然是只读属性，但它比较特殊，可以赋值，重新赋值URL，相当于跳转到URL</p></blockquote></li></ul></li></ul><pre><code>// 跳转到  http://www.icodingedu.com 这个页面window.location = &quot;http://www.icodingedu.com&quot;;</code></pre></blockquote><ol><li>URL 组成部分<blockquote><ul><li><code>URL（Uniform Resource Locator）</code>统一资源定位符</li><li>URL 无非就是一个给定的独特资源在 Web 上的地址</li><li>理论上说，每个有效的 URL 都指向一个唯一的资源</li><li>这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等</li></ul></blockquote></li></ol><blockquote><pre><code>protocol://host[:port]/path/[?query]#fragment  /* [] 方括号表示可选 */http://www.arryblog.com/guide/html5/html5.html?targetId=12&amp;preview=0#top</code></pre></blockquote><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>protocol</td><td>URL 对应的协议名，常用的协议有：http、https、ftp、maito、file等</td></tr><tr><td>host</td><td>主机（域名），如 <code>www.arryblog.com</code></td></tr><tr><td>port</td><td>网络端口号，可选。如果省略，表示使用默认的端口。如 http 的默认端口是 80</td></tr><tr><td>path</td><td>路径，用来表示服务器上的一个目录或文件路径 如：<code>guide/html5/html5.html</code></td></tr><tr><td>query</td><td>查询字符串（参数），以键值对的形式表示，多个用&amp;符号分隔，如：<code>targetId=12&amp;preview=0</code></td></tr><tr><td>fragment</td><td>片段标识符，#后内容，用来标记已获取资源的文档内的某个位置。如：常见锚点 <code>#top</code></td></tr></tbody></table><ol start="2"><li>location 对象的属性<blockquote><ul><li>location对象上有很多属性，以下就是其中的一部分</li></ul></blockquote></li></ol><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>location.href</td><td>获取完整的 URL，也可以重新设置 URL</td></tr><tr><td>location.host</td><td>获取主机名（域名）</td></tr><tr><td>location.port</td><td>获取端口号，如果端口号省略，返回空字符串””</td></tr><tr><td>location.pathname</td><td>返回 URL 中 path 路径部分</td></tr><tr><td>location.search</td><td>返回 URL 中的 query 查询字符串部分内容</td></tr><tr><td>location.hash</td><td>返回 URL 中的 fragment 部分内容。</td></tr></tbody></table><ol start="3"><li>处理 URL 中 query 部分数据<blockquote><ul><li>写一个<strong>函数</strong>，把 URL 中的 query 部分参数转换成对象中的属性和值，然后将这个对象返回，同时要考虑参数的类型。</li><li>MDN 官方参考地址：<code>https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location</code></li></ul></blockquote></li></ol><blockquote><pre><code>// location.search得到 URL中的query数据&quot;?targetId=99&amp;sort=hot&amp;bool=true&amp;name=张三&quot;</code></pre></blockquote><p>&#x2F;&#x2F; 最终转换成下面这样一个对象<br>{ targetId: 99, sort: ‘hot’, bool: true, name: ‘张三’}</p><blockquote><pre><code></code></pre></blockquote><ul><li>思路：<blockquote><p><strong>写一个函数，将传入的查询字符串query，处理成对象形式</strong></p><ul><li>第一步：去掉问号<code>slice(start);</code>，如果只有问号，就返回空对象</li><li>第二步：分割<code>&amp;</code>前后的数据<code>split(&quot;&amp;&quot;)</code>，并返回一个数组</li><li>第三步：将数组中的每一项，以键值对的形式存入一个对象中<ul><li>遍历每一项，先用&#x3D;分隔，形成一个新数组</li><li>再将新数组的每一项分别存成<code>key</code>和<code>value</code></li></ul></li><li>第四步：给<code>value</code>转码，将已编码 URI 中所有能识别的转义序列转换成原字符<ul><li><code>decodeURIComponent()</code>：用于解码由 <code>encodeURIComponent</code>方法或者其他类似方法编码的部分统一资源标识符（URI）<blockquote><p>此时，返回的对象的值都是字符串的形式</p></blockquote></li></ul></li><li>第五步：处理数据类型</li></ul></blockquote></li></ul><blockquote><p><strong>因此，还要写个代码，转换数据类型</strong></p><ul><li>查询字符串query一定是<strong>基本数据类型</strong></li><li>考虑传过来的值是不是空的&#x2F;<code>&quot;  &quot;</code>&#x2F;<code>null</code>&#x2F;<code>undefined</code>，如果为空就返回<code>null</code></li><li><code>.trim()</code>：从字符串的两端移除空白字符，并返回一个新的字符串<ul><li><code>null==undefined</code></li></ul></li><li>其次考虑布尔类型<ul><li><code>.toLowerCase()</code>：将该字符串转换为小写形式</li></ul></li><li>再次考虑数值<ul><li><code>parseFloat()</code>：将给定值解析成浮点数</li><li><code>isFinite()</code>：用来判断被传入的参数值是否为一个有限数值,是的话返回<code>true</code></li></ul></li><li>最后考虑是否为日期<ul><li><code>Date.parse()</code>：解析一个表示某个日期的字符串，并返回一个毫秒数，如果该字符串无法识别，则返回值为 NaN。</li><li><code>Date() 构造函数</code>：可以创建一个Date实例或返回代表当前时间的字符串</li></ul></li><li>如果上面的都不是，就只能是字符串了</li></ul></blockquote><blockquote><pre><code>&lt;script&gt;  var search = &quot;?targetId=99&amp;sort=hot&amp;bool=true&amp;name=张三&quot;;  var paramObj = getVars(search);  console.log(paramObj);  //将query转换成一个对象，并考虑数据类型/** * getVars 将取得的查询参数以键值对形式存到对象中，同时考虑数据类型 * @param search查询的字符串内容 */  function getVars(search) &#123;    var obj = &#123;&#125;;    if (search.length === 1) return &#123;&#125;; //如果只有?就返回空对象    var arr = search.slice(1).split(&quot;&amp;&quot;);    arr.forEach(function (item) &#123;      var keyValue = item.split(&quot;=&quot;);      var key = keyValue[0];      var value = keyValue[1];      //解码      obj[key] = transferValue(decodeURIComponent(value));    &#125;);    return obj;  &#125;</code></pre></blockquote><p>  &#x2F;&#x2F;处理数据类型的函数<br>  function transferValue(value) {<br>    &#x2F;&#x2F;先考虑传入的值是否为空、null、undfined、”  “<br>    if (value &#x3D;&#x3D; undefined || value.trim() &#x3D;&#x3D; “”) return null;<br>    &#x2F;&#x2F;考虑布尔值<br>    if (value.toLowerCase() &#x3D;&#x3D;&#x3D; “true”) return true;<br>    if (value.toLowerCase() &#x3D;&#x3D;&#x3D; “false”) return false;<br>    &#x2F;&#x2F;考虑数值<br>    if (isFinite(value)) return parseFloat(value);<br>    &#x2F;&#x2F;考虑日期<br>    if (isFinite(Date.parse(value))) return new Date(value);<br>    return value;<br>  }</p><blockquote><p></script></p><pre><code></code></pre></blockquote><ol start="4"><li>数据交互 - 根据参数显示页面内容<blockquote><ul><li><code>index.html</code>表示首页，用来显示产品列表</li><li><code>goods.html</code>表示产品详细页，根据 URL 中的参数来决定显示那个产品的详细信息</li><li>当点击<code>index.html</code>页面的产品名，就会跳转到<code>goods.html</code>页面，显示对应产品的详细信息</li></ul></blockquote></li></ol><ul><li><p>思路：</p><blockquote><ul><li>后端提供一个接口数据，里面放着<code>query</code>数据、产品信息(图片、标题、价格)</li><li><code>index.html</code>里面放的是a标签，它是由JS动态生成的，因为它的<code>href</code>放的是文件路径和<code>targetId</code></li><li><code>goods.html</code>里面放的是产品信息，也需要根据不同的<code>targetId</code>来创建</li><li>当本页面的<code>targetId</code>等于接口数据里<code>targetId</code>时，就提取该ID下的信息，并创建HTML节点，渲染出商品页面</li><li>要取得本页面的<code>targetId</code>，就需要用前面写的函数处理<code>location.search</code><blockquote><p>只有当我们从<code>index.html</code>页面跳转到<code>goods.html</code>时，<code>goods.html</code>才会获得相应的<code>targetId</code></p></blockquote></li></ul></blockquote></li><li><p><code>index.html</code> 页面源代码</p><blockquote><pre><code>&lt;ul class=&quot;container&quot;&gt;</code></pre></blockquote><!-- <li>  <a href="./06-goods.html?targetID=93">    Web前端高级工程师系统课-星辰班  </a></li><li>  <a href="./06-goods.html?targetID=91"> 30个HTML+CSS实战小案例详解 </a></li><li>  <a href="./06-goods.html?targetID=77"    >云原生Kubernetes与云上DevOps新版系统实战课  </a></li> --><blockquote></ul><script>var data = [  {    targetId: 93,    title: "Web前端高级工程师系统课-星辰班",    mainImage:      "https://sce7a2b9c9d95a-sb-qn.qiqiuyun.net/files/course/2022/08-29/210311f40bcf290736.jpg",    price: 8680,  },  {    targetId: 91,    title: "30个HTML+CSS实战小案例详解",    mainImage:      "https://sce7a2b9c9d95a-sb-qn.qiqiuyun.net/files/course/2022/03-19/174949d70767470556.jpg",    price: 0,  },  {    targetId: 77,    title: "云原生Kubernetes与云上DevOps新版系统实战课",    mainImage:      "https://sce7a2b9c9d95a-sb-qn.qiqiuyun.net/files/course/2020/07-14/122139326c0d505110.png",    price: 2680,  },];var oUL = document.querySelector(".container");data.forEach(function (item) {  var li = document.createElement("li");  var a = document.createElement("a");  a.href = "./06-goods.html?targetId=" + item.targetId;  a.innerText = item.title;  a.target = "blank";  li.appendChild(a);  oUL.appendChild(li);});</script>```</blockquote></li><li><p><code>goods.html</code> 页面源代码</p><blockquote><pre><code>&lt;div class=&quot;show&quot;&gt;</code></pre></blockquote><!-- <img  src="https://sce7a2b9c9d95a-sb-qn.qiqiuyun.net/files/course/2022/08-29/210311f40bcf290736.jpg"  alt=""/><h3>Web前端高级工程师系统课-星辰班</h3><p>价格：8680</p> --><blockquote></div><script src="./getVars.js"></script><script>var data = [  {    targetId: 93,    title: "Web前端高级工程师系统课-星辰班",    mainImage:      "https://sce7a2b9c9d95a-sb-qn.qiqiuyun.net/files/course/2022/08-29/210311f40bcf290736.jpg",    price: 8680,  },  {    targetId: 91,    title: "30个HTML+CSS实战小案例详解",    mainImage:      "https://sce7a2b9c9d95a-sb-qn.qiqiuyun.net/files/course/2022/03-19/174949d70767470556.jpg",    price: 0,  },  {    targetId: 77,    title: "云原生Kubernetes与云上DevOps新版系统实战课",    mainImage:      "https://sce7a2b9c9d95a-sb-qn.qiqiuyun.net/files/course/2020/07-14/122139326c0d505110.png",    price: 2680,  },];var show = document.querySelector(".show");var search = location.search;var Vars = getVars(search);data.forEach(function (item) {  if (item.targetId === Vars.targetId) {    var frag = document.createDocumentFragment();    var img = document.createElement("img");    img.src = item.mainImage;    frag.appendChild(img);    var h3 = document.createElement("h3");    h3.innerText = item.title;    frag.appendChild(h3);    var p = document.createElement("p");    var price = item.price === 0 ? "免费" : item.price;    p.innerText = "价格：" + price;    frag.appendChild(p);    show.appendChild(frag);  }});</script>```</blockquote></li></ul><ol start="5"><li><p>404 页面，定时跳转功能</p><blockquote><ul><li>写一个定时器，做倒计时效果</li><li>当倒计时结束，就改变页面的<code>url</code>，使其跳转到另一个页面</li></ul><pre><code>&lt;style&gt; body &#123;   margin: 0;   display: flex;   justify-content: center; &#125; span &#123;   font-size: 50px;   color: red; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;&lt;span class=&quot;time&quot;&gt;5&lt;/span&gt;秒后，跳转到首页&lt;/p&gt;&lt;script&gt;  var span = document.querySelector(&quot;.time&quot;);  var sum = 5;  var timer = setInterval(function () &#123; sum--; span.innerText = sum; if (sum &lt;= 0) &#123;   clearInterval(timer);   location.href = &quot;https://www.icodingedu.com/&quot;; &#125;  &#125;, 1000);&lt;/script&gt;</code></pre></blockquote></li><li><p>location 对象的方法</p><blockquote><p>以下是<code>location</code>对象身上的一些常见的方法</p></blockquote></li></ol><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>assign</td><td><code>location.assign()</code>方法会触发窗口加载并显示指定的<code>URL</code>的内容，类似<code>location.href</code>；<strong>会有历史记录</strong>，可通过前进和后退按扭来追回历史页；如果传入一个无效的 URL，则会抛出一个<code>syntax_error</code>语法错误</td></tr><tr><td>replace</td><td>用给定的URL替换掉当前的资源，<strong>不会有历史记录</strong>，即不能用后退回到原页面</td></tr><tr><td>reload</td><td>重新加载当前页面，相当于刷新按扭或F5；如果参数 为<code>true</code>，表示强制刷新<code>ctrl + F5</code>，即：要<strong>从服务器上</strong>加载数据；如果参数为<code>false</code>，表示浏览器优先从缓存当中加载页面</td></tr></tbody></table><blockquote><pre><code>&lt;script&gt;  document.onclick = function () &#123;    // assign 相当于href，跳转到一个新的页面    location.assign(&quot;https://www.baidu.com/&quot;);    // 用给定URL替换当前面 不会产生历史记录    location.replace(&quot;https://www.baidu.com/&quot;);    location.reload(true); // 强制制新，重新从服务器加载数据  &#125;;&lt;/script&gt;</code></pre></blockquote><h3 id="三、window-history-对象"><a href="#三、window-history-对象" class="headerlink" title="三、window.history 对象"></a>三、window.history 对象</h3><blockquote><ul><li><code>Window.history</code>是一个只读属性，用来获取<code>History</code>对象的引用，<code>History</code>对象提供了操作浏览器<strong>会话历史</strong>的接口<br>window.history对象相关方法</li></ul></blockquote><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>back</td><td>后退功能，返回上一页，相当于用户点击了浏览的 <code>←</code> 等价 <code>history.go(-1)</code></td></tr><tr><td>forward</td><td>前进功能，进入下一页，相当于用户点击了浏览的 <code>➔</code> 等价<code>history.go(1)</code></td></tr><tr><td>go</td><td>前进与后退，当参数为<code>1</code>，表示进入下一页；当参数为<code>-1</code>，表示退回上一页，如果参数为<code>0</code>，则重新载入当前页面</td></tr></tbody></table><blockquote><pre><code>history.back(); // 后退history.forward(); // 前进history.go(1); // 前进 进入下一页</code></pre></blockquote><h3 id="四、navigator-对象"><a href="#四、navigator-对象" class="headerlink" title="四、navigator 对象"></a>四、navigator 对象</h3><blockquote><ul><li><code>window.navigator</code>对象包含用户此次活动的浏览器的相关属性和标识</li><li>他有很多属性，但最常用的是 <code>userAgent</code> 这个属性</li><li><code>userAgent</code> 属性返回当前浏览器的用户代理字符串</li><li><code>navigator.userAgent; // 返回用户代理（浏览器）相关信息</code><blockquote><p>我们通常利用这个<code>userAgent</code>属性来判断当前的打开页面的浏览器和设备</p></blockquote></li></ul></blockquote><ol><li>检测浏览器并返回浏览器名称<blockquote><ul><li>以下代码来自MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/navigator">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/navigator</a></li></ul></blockquote></li></ol><blockquote><pre><code>function BrowserName() &#123;  var sBrowser,    sUsrAg = navigator.userAgent;  if (sUsrAg.indexOf(&quot;Firefox&quot;) &gt; -1) &#123;    sBrowser = &quot;Mozilla Firefox&quot;; // 火狐  &#125; else if (sUsrAg.indexOf(&quot;Opera&quot;) &gt; -1 || sUsrAg.indexOf(&quot;OPR&quot;) &gt; -1) &#123;    sBrowser = &quot;Opera&quot;; // 欧朋  &#125; else if (sUsrAg.indexOf(&quot;Trident&quot;) &gt; -1) &#123;    sBrowser = &quot;Microsoft Internet Explorer&quot;;  &#125; else if (sUsrAg.indexOf(&quot;Edge&quot;) &gt; -1) &#123;    sBrowser = &quot;Microsoft Edge&quot;; //Edge浏览器  &#125; else if (sUsrAg.indexOf(&quot;Chrome&quot;) &gt; -1) &#123;    sBrowser = &quot;Google Chrome or Chromium&quot;; // Chrome  &#125; else if (sUsrAg.indexOf(&quot;Safari&quot;) &gt; -1) &#123;    sBrowser = &quot;Apple Safari&quot;; // Safari  &#125; else &#123;    sBrowser = &quot;unknown&quot;; // 不知道  &#125;  return sBrowser;&#125;</code></pre></blockquote><ol start="2"><li>判断是否为微信环境<blockquote><ul><li><code>micromessenger</code>为微信内嵌的浏览器，有此标识的基本上可以判断是微信环境，但此标识也<strong>可以伪造</strong></li></ul><pre><code>// 判断是否为微信const isWx = function () &#123;  var ua = window.navigator.userAgent.toLowerCase();  if (ua.indexOf(&quot;micromessenger&quot;) !== -1) return true;  return false;&#125;;</code></pre></blockquote></li></ol><p>3、设备判断：android、ios、web</p><blockquote><pre><code>function isDevice() &#123;  if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) &#123;    return &quot;iOS&quot;;  &#125; else if (/(Android)/i.test(navigator.userAgent)) &#123;    return &quot;Android&quot;;  &#125;  return &quot;Web&quot;;&#125;</code></pre></blockquote><blockquote><blockquote><p>注：</p></blockquote><ul><li>i：代表不区分大小写匹配</li><li><code>()</code>是为了提取匹配字符串的，表达式中有几个<code>()</code>，就有几个相应的匹配字符串</li></ul></blockquote><h3 id="五、window-相关事件"><a href="#五、window-相关事件" class="headerlink" title="五、window 相关事件"></a>五、window 相关事件</h3><blockquote><p>接下来我们学习几个非常重要的事件</p></blockquote><table><thead><tr><th>事件名</th><th>说明</th></tr></thead><tbody><tr><td>load</td><td>整个页面（包括所有外部资源，如：图片、JavaScript 文件和 CSS 文件）加载完成后触发，这里指的是<code>window</code>身上的load事件</td></tr><tr><td>DOMContentLoaded</td><td>在 DOM 树构建完成后立即触发，不用等待图片、JavaScript 文件、CSS 文件或其它资源加载完成。</td></tr><tr><td>resize</td><td>当调整浏览器的窗口大小时，会触发 resize 事件；resize 事件触发会很频繁，所以我们在处理时，可以设置<strong>节流</strong>操作</td></tr><tr><td>scroll</td><td>当浏览器滚动条发生滚动时触发<code>window.onsrcoll</code>事件</td></tr></tbody></table><blockquote><blockquote><p><code>DOMContentLoaded</code>事件的实际目标是<code>document</code>，但会冒泡到<code>window</code>；所以我们可以在<code>document</code>上监听这个事件</p></blockquote></blockquote><h4 id="load-和-DOMContentLoaded-事件"><a href="#load-和-DOMContentLoaded-事件" class="headerlink" title="load 和 DOMContentLoaded 事件"></a>load 和 DOMContentLoaded 事件</h4><blockquote><ul><li>load ：<strong>整个页面</strong>（包括所有外部资源，如：图片、JavaScript 文件和 CSS 文件）加载完成后触发</li><li>DOMContentLoaded ：<strong>在 <code>DOM</code> 树构建完成后</strong>立即触发，不用等待图片、JavaScript 文件、CSS 文件或其它资源加载完成。<blockquote><p><code>DOMContentLoaded</code>事件始终在<code>load</code>事件之前发生</p></blockquote></li></ul></blockquote><blockquote><pre><code>console.log(&quot;我第一个出来&quot;);// DOM树构建完成时触发window.addEventListener(&quot;DOMContentLoaded&quot;, function () &#123;  alert(&quot;我第二个出来&quot;);&#125;);// 页面加载完成后触发window.onload = function () &#123;  alert(&quot;我第三个出来&quot;);&#125;;</code></pre></blockquote><ul><li>除了页面加完会触发 load 事件外，其它元素也会触发与之对应的 load 的事件<table><thead><tr><th>元素</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;img&gt;</code>标签</td><td>图片会在<strong>图片加载完成后</strong>触发 load 事件；<strong>图片并不需要插入到页面</strong>。只要 img 对象添加 src 属性，就会发起 http 请求，下载成功就会触发 load 事件</td></tr><tr><td><code>&lt;script&gt;</code>标签</td><td>在 <strong>JS 加载完后</strong>会触发 load 事件；不过<code>&lt;script&gt;</code>标签要指定 src 属性，<strong>同时要插入到文档中</strong>，才会发起 http 请求，下载成功才会触发 load 事件</td></tr><tr><td><code>&lt;link&gt;</code>标签</td><td>需要指定<code>&lt;link&gt;</code>标签的<code>href</code>属性，<strong>同时要插入到文档中</strong>，才会发起 http 请求，在 <strong>CSS 文件</strong>全部加载完成后会触发 load 事件</td></tr></tbody></table></li></ul><ol><li>动态加载图片，插入页面<blockquote><p>load 加载成功，触发 load 事件</p><ul><li>图片加载完成后触发<code>load</code>事件，图片并不需要插入到页面。</li><li>只要 img 对象添加<code>src</code>属性，就会发起<code>http</code>请求，下载成功就会触发<code>load</code>事件</li><li><code>error</code>加载失败，触发<code>error</code>事件</li></ul></blockquote></li></ol><blockquote><pre><code>/*** loadImg 动态加载图片* @param url 图片地址*/function loadImg(url) &#123;  var img = new Image(); // 创建img对象  // 图片加载成功，插入到页面  img.onload = function () &#123;    // alert(&#39;加载成功&#39;)    document.body.appendChild(img);  &#125;;  // 图片加载失败，在页面显示图片加载失败  img.onerror = function () &#123;    document.body.innerText = &quot;图片加载失败&quot;;  &#125;;  img.src = url;&#125;</code></pre></blockquote><p>var url &#x3D;<br>  “<a href="https://sce7a2b9c9d95a-sb-qn.qiqiuyun.net/files/course/2022/08-29/210311f40bcf290736.jpg">https://sce7a2b9c9d95a-sb-qn.qiqiuyun.net/files/course/2022/08-29/210311f40bcf290736.jpg</a>“;<br>loadImg(url);</p><blockquote><pre><code></code></pre></blockquote><ol start="2"><li>动态加载 JS<blockquote><ul><li>在 JS 加载完后会触发 load 事件</li><li>不过<code>&lt;script&gt;</code>标签要指定 src 属性，同时<strong>要插入到文档中</strong>，才会发起 http 请求，下载成功才会触发 load 事件。</li></ul></blockquote></li></ol><blockquote><pre><code>/*** loadScript 动态加载JS文件* @param src js文件地址* @param callback回调函数，js加载完成后，要处理的事情*/function loadScript(src, callback) &#123;  var script = document.createElement(&quot;script&quot;);  script.onload = function () &#123;    typeof callback === &quot;function&quot; ? callback() : callback;  &#125;;  script.onerror = function () &#123;    alert(&quot;加载失败&quot;);  &#125;;  // 指定src属性值，并插入到页面中  script.src = src;  document.body.appendChild(script); // 不插入到页面，load事件永远不会触发&#125;</code></pre></blockquote><p>loadScript(“.&#x2F;a.js”, function () {<br>  alert(“加载成功”);<br>});</p><blockquote><pre><code></code></pre></blockquote><ol start="3"><li>动态加载 CSS<blockquote><ul><li>在 CSS 文件全部加载完成后会触发 load 事件</li><li>和<code>&lt;script&gt;</code>标签一样，需要指定 <code>href</code> 属性值，并且要把<code>&lt;link&gt;</code>标签插入到文档发中才会开始下载 <code>CSS</code> 样式，下载完成后才会触发 <code>load</code> 事件</li><li>要设置<code>link.rel = &quot;stylesheet&quot;;</code></li><li><code>&lt;link&gt;</code>标签是插入到<code>head</code>标签里面，不是<code>document</code></li></ul></blockquote></li></ol><blockquote><pre><code>/*** 动态插入外链css* href css外链地址*/function loadCSS(href) &#123;  var link = document.createElement(&quot;link&quot;);  link.rel = &quot;stylesheet&quot;;  link.addEventListener(    &quot;load&quot;,    function () &#123;      alert(&quot;css加载成功&quot;);    &#125;,    false  );  link.href = href;  // 把link标签插入到head标签中  var head = document.getElementsByTagName(&quot;head&quot;)[0];  head.appendChild(link);&#125;loadCSS(&quot;./index.css&quot;);</code></pre></blockquote><h4 id="resize-事件"><a href="#resize-事件" class="headerlink" title="resize 事件"></a>resize 事件</h4><blockquote><ul><li>当调整浏览器的窗口大小时，会触发<code>resize</code>事件</li><li><code>resize</code>事件触发会很频繁，所以我们在处理时，可以设置节流操作</li></ul></blockquote><blockquote><pre><code>var a = 0;window.onresize = throttle(fn, 50);function fn() &#123;  console.log(a++);&#125;/*** 节流函数* fn 事件处理函数* delay 函数执行间隔时间*/function throttle(fn, delay) &#123;  var timer = null;</code></pre></blockquote><p>  return function () {<br>    var self &#x3D; this;<br>    var args &#x3D; arguments;<br>    if (timer) return;<br>    timer &#x3D; setTimeout(function () {<br>      &#x2F;&#x2F; 函数体执行代码<br>      fn.apply(self, args);<br>      &#x2F;&#x2F; 开锁<br>      timer &#x3D; null;<br>    }, delay);<br>  };<br>}</p><blockquote><pre><code></code></pre></blockquote><h4 id="srcoll-事件"><a href="#srcoll-事件" class="headerlink" title="srcoll 事件"></a>srcoll 事件</h4><blockquote><ul><li>当浏览器滚动条发生滚动时触发<code>window.onsrcoll</code>事件</li><li>如果<strong>某个元素</strong>内的内容溢出，显示了滚动条，滚动对应的滚动条，也会触发对应的<code>scroll</code>事件</li><li><code>scroll</code>事件的触发频率也非常的快，所以了要根据实际业务场景来添加节流操作</li></ul></blockquote><blockquote><pre><code>&lt;style&gt;  .body &#123;    margin: 0;    height: 3000px;  &#125;  .box &#123;    width: 200px;    height: 300px;    margin: 100px;    border: 1px solid #000;    overflow-y: scroll;  &#125;  p &#123;    width: 100%;    height: 800px;    margin: 0;    background-color: khaki;  &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt; &lt;p&gt;   我是一段内容我是一段内容我是一段内容我是一段内容我是一段内容我是一段内容我是一段内容 &lt;/p&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  var a = 0;  //浏览器的scroll事件  window.onscroll = throttle(fn, 300);  function fn() &#123;    console.log(a++);  &#125;  //元素的scroll事件  box.onscroll = throttle(fn1, 300);  function fn1() &#123;    console.log(&quot;box&quot;);  &#125;/** * 节流函数 * fn 事件处理函数 * delay 函数执行间隔时间 */  function throttle(fn, delay) &#123;    var timer = null;</code></pre></blockquote><pre><code>return function () &#123;  var self = this;  var args = arguments;  if (timer) return;  timer = setTimeout(function () &#123;    // 函数体执行代码    fn.apply(self, args);    // 开锁    timer = null;  &#125;, delay);&#125;;</code></pre><p>  }</p><blockquote><p></script></p><pre><code></code></pre></blockquote><h4 id="案例1：返回顶部"><a href="#案例1：返回顶部" class="headerlink" title="案例1：返回顶部"></a>案例1：返回顶部</h4><blockquote><ul><li>实现效果：点击返回顶部按扭，页面滚动到最顶部，即滚动条与浏览器顶部的滚动距离<strong>不断的减小</strong>(不是直接到顶部)，直到减少到 0</li></ul></blockquote><ol><li>限定步长的匀速运动<blockquote><p>实现方式有三种</p><ul><li>1、不断减小<code>window.scroll(x,y)</code>中 y 的值，直到y &lt;&#x3D; 0</li><li>2、通过<code>window.scrollBy(x,y)</code> 方法，每次向上移动一点距离，直到<code>window.scrollY &lt;= 0</code></li><li>3、通过不断减小<code>document.documentElement.scrollTop</code>的值，直到 <code>&lt;= 0</code></li></ul></blockquote></li></ol><ul><li><p>三种实现方式的通用布局</p><blockquote><pre><code>&lt;style&gt;#back-top &#123;  width: 80px;  height: 80px;  background-color: #ddd;  text-align: center;  line-height: 80px;  cursor: pointer;  position: fixed;  right: 10px;  bottom: 100px;&#125;body &#123;  height: 3000px;&#125;&lt;/style&gt;&lt;div id=&quot;back-top&quot;&gt;返回顶部&lt;/div&gt;</code></pre></blockquote></li><li><p>实现方式1</p><blockquote><p>使用 <code>window.scroll(x,y)</code> 和 <code>window.scrollY</code></p><ul><li>点击后，首先获取当前滚动条滚动的距离<code>scrollY = window.scrollY</code></li><li>然后开启一个定时器，隔一定时间让<code>window.scroll(0,y)</code>中 <code>y</code> 的值减小 100 ，直到<code>window.scrollY &lt;= 0</code>，说明滚动条滚动到页面的顶部，然后暂停定时器</li><li>添加 <code>lock</code> 变量，用来防止当次滚动没有结束前，再次执行新的动画</li></ul><pre><code>&lt;script&gt;var backTop = document.getElementById(&quot;back-top&quot;);// 第一套方案 window.scroll();var timer = null;var lock = false; // 可以点击// 点击事件backTop.onclick = function () &#123;  // 获取滚动条与浏览器顶部的距  if (lock) return;  lock = true;  var scrollY = window.scrollY; // 把他放在外面，不用频繁的读他  timer = setInterval(function () &#123;    scrollY -= 100;    if (scrollY &lt;= 0) &#123;      clearInterval(timer);      lock = false;    &#125;    window.scroll(0, scrollY);  &#125;, 20);&#125;;&lt;/script&gt;</code></pre></blockquote></li><li><p>实现方式二</p><blockquote><p>使用 <code>window.scrollBy</code> 和 <code>window.scrollY</code></p><ul><li>通过<code>window.scrollBy(x,y)</code> 方法，每次向上移动一点距离，直到<code>window.scrollY &lt;= 0</code></li><li>添加 <code>lock</code> 变量，用来防止当次滚动没有结束前，再次执行新的动画</li></ul><pre><code>&lt;script&gt;var backTop = document.getElementById(&quot;back-top&quot;);// 第一套方案 window.scroll();var timer = null;var lock = false; // 可以点击</code></pre></blockquote><p>&#x2F;&#x2F; 点击事件<br>backTop.onclick &#x3D; function () {<br>  &#x2F;&#x2F; 获取滚动条与浏览器顶部的距离<br>  if (lock) return;<br>  lock &#x3D; true;</p><blockquote></blockquote><p>  timer &#x3D; setInterval(function () {<br>var scrollY &#x3D; window.scrollY;<br>if (scrollY &lt;&#x3D; 0) {<br>  clearInterval(timer);<br>  lock &#x3D; false;<br>}<br>window.scrollBy(0, -20);<br>  }, 20);<br>};</p><blockquote><p></script></p><pre><code></code></pre></blockquote></li><li><p>实现方式三</p><blockquote><p>使用 <code>document.documentElement.scrollTop</code> 来实现</p><ul><li>首先获取当前滚动条滚动过的距离<code>document.documentElement.scrollTop</code></li><li><code>Element.scrollTop</code>属性可以<strong>获取或设置</strong>一个元素的内容垂直滚动的像素数。</li><li>开启定时器，不断的减小<code>scrollTop</code> 的值，直到 <code>&lt;= 0</code></li><li>添加 <code>lock</code> 变量，用来防止当次滚动没有结束前，再次执行新的动画</li></ul><pre><code>&lt;script&gt;var backTop = document.getElementById(&quot;back-top&quot;);backTop.addEventListener(&quot;click&quot;, backToTop, false);var lock = false;function backToTop() &#123;  if (lock) return;  lock = true;  // 获取当前滚动条滚动的距离  var doc = document.documentElement || document.body;  var top = doc.scrollTop;  clearInterval(this.timer); // 多次点击无效，以最后一次为主  var that = this; // 保存this，在定时器内需要用到</code></pre></blockquote><p>  this.timer &#x3D; setInterval(function () {<br>if (top &lt;&#x3D; 0) {<br>  clearInterval(that.timer); &#x2F;&#x2F; 如果top小于0清除定时器<br>  lock &#x3D; false;<br>} else {<br>  top &#x3D; top - 100; &#x2F;&#x2F; 每次减 100<br>  doc.scrollTop &#x3D; top; &#x2F;&#x2F; 动态更改滚动条件与浏览器的滚动的距离<br>}<br>  }, 20);<br>}</p><blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul><ol start="2"><li>限时匀速运动——最佳实践<blockquote><ul><li>T：<code>time</code>已经运动的时间</li><li>B：<code>begin</code>开始位置</li><li>C： <code>change</code>需要移动的总距离 &#x3D; Target - Begin</li><li>D： <code>duration</code>动画运动的总时间 </li><li>每次运动后，滚动条要到的位置(距顶部的距离)：<code>CurrentDistance = T / D * C + B</code> 即：<code>当前位置 = T / D * C + B</code></li></ul></blockquote></li></ol><ul><li><p>使用<code>window.scroll(x,y)</code>和<code>window.scrollY</code>实现</p><blockquote><pre><code>&lt;script&gt;var backTop = document.getElementById(&quot;back-top&quot;);var timer = null; //定时器var lock = false; //未上锁backTop.onclick = function () &#123;  if (lock) return;  lock = true;  var T = 0; //记录已经运动的时间  var B = window.scrollY; // 开始位置  var C = 0 - B; //需要移动的总距离,target=0  var D = 500; //限定时间  timer = setInterval(function () &#123;    T += 20;    // 当次滚动条要到的位置    var currentDistance = (T / D) * C + B;    if (T &gt; D) &#123;      clearInterval(timer);      currentDistance = 0;      lock = false;    &#125;    window.scroll(0, currentDistance);  &#125;, 20);&#125;;&lt;/script&gt;</code></pre></blockquote></li><li><p>使用 <code>document.documentElement.scrollTop</code> 实现</p></li></ul><blockquote><pre><code>&lt;script&gt;  var backTop = document.getElementById(&quot;back-top&quot;);  var doc = document.documentElement || document.body;  var timer = null;  var lock = false;  //点击后要处理的事情  // 限定时间动画  backTop.onclick = function () &#123;    if (lock) return;    lock = true;    // 运动的时间    var T = 0;    var B = doc.scrollTop; // 开始位置    // target=0 目标位置    var C = 0 - B; // 总共需要改变的距离    var D = 500; // 总共运动的时间</code></pre></blockquote><pre><code>timer = setInterval(function () &#123;  // 记录运的时间  T += 20;  // 当前运动到的位置  var currentDistance = (T / D) * C + B;  // currentDistance &lt; 0  if (T &gt;= D) &#123;    clearInterval(timer);    currentDistance = 0;    lock = false;  &#125;</code></pre><blockquote></blockquote><pre><code>  doc.scrollTop = currentDistance;&#125;, 20);</code></pre><p>  };</p><blockquote><p></script></p><pre><code></code></pre></blockquote><h4 id="案例2：图片延时加载"><a href="#案例2：图片延时加载" class="headerlink" title="案例2：图片延时加载"></a>案例2：图片延时加载</h4><blockquote><p><strong>实现原理：</strong></p><ul><li>页面中所有需要做延时加载的图片上加上<code>class = &#39;lazy&#39;</code> 和 <code>data-src = &#39; 图片真实地址&#39;</code></li><li>获取页面中所有<code>class</code>中包含<code>lazy</code>的元素，同时要判断元素是否为<code>img</code>标签且<code>data-src</code>是否有值。确保操作的元素是 <code>img</code> 元素，同时<code>data-src</code>中有图片地址。</li><li>当滚动浏览器的滚动条时，要判断对应的图片<strong>是否进入可视区</strong>，如果进入，则给<code>img.src</code>动态赋值</li><li>如果图片一旦赋值，则后面就不需要再对此 <code>img</code> 标签做监听。则可以从数组对象中将其删除，同时把 <code>lazy</code> 样式删除</li><li>最后考虑浏览器窗口大小改变时(响应式布局)的情况，还有要考虑对 <code>scroll</code> 和 <code>resize</code> 事件做节流操作</li></ul></blockquote><blockquote><p><strong>步骤</strong></p><ul><li>CSS布局</li><li>用JS实现响应式布局</li><li>JS实现延时加载效果</li></ul></blockquote><ul><li>布局</li></ul><blockquote><pre><code>&lt;style&gt;  html,  body,  ul,  li &#123;    margin: 0;    padding: 0;  &#125;  ul &#123;    /* width: 968px; */    margin: 0 auto;  &#125;  li &#123;    list-style: none;    width: 200px;    height: 200px;    padding: 10px;    margin: 10px;    border: 1px solid #ddd;    float: left;  &#125;  li img &#123;    width: 200px;    height: 200px;  &#125;&lt;/style&gt;&lt;ul id=&quot;J_container&quot;&gt; &lt;li&gt;   &lt;img     src=&quot;./images/loading-svg/loading-bars.svg&quot;     data-src=&quot;./images/01.png&quot;     class=&quot;lazy&quot;   /&gt; &lt;/li&gt; &lt;li&gt;   &lt;img     src=&quot;./images/loading-svg/loading-bars.svg&quot;     data-src=&quot;./images/01.png&quot;     class=&quot;lazy&quot;   /&gt; &lt;/li&gt;……&lt;/ul&gt;</code></pre></blockquote><ul><li>JS 实现页面响应式布局<blockquote><ul><li>效果：无论怎么调整浏览器窗口，ul都能居中对齐</li><li>第一次打开页面或当浏览器窗口大小发生改变时，获取浏览器窗口的可视区宽 <code>clientWidth</code></li></ul><pre><code>var clientWidth =document.documentElement.clientWidth || document.body.clientWidth;</code></pre></blockquote></li></ul><blockquote><ul><li>然后用<code>clienwWidth / 每个li元素的占位宽</code>（包括 margin，border，padding），对结果向下取整，计算得出页面一行最多能放几个li</li></ul><pre><code>var count = Math.floor(clientWidth / 242);</code></pre></blockquote><blockquote><ul><li>利用 <code>count * li占位宽</code> 动态计算得到其父容器ul的宽</li></ul><pre><code>container.style.width = count * 242 + &quot;px&quot;;</code></pre></blockquote><blockquote><ul><li><code>ul</code>设置左右居中</li></ul></blockquote><ul><li>JS 实现懒加载（延时加载）效果<blockquote><ul><li>获取页面中所有<code>class = &#39;lazy&#39;</code> 的元素，同时过滤掉不是图片的元素</li></ul><pre><code>// 1、需要获取到所有需要延时加载的图片var imgs = document.querySelectorAll(&quot;.lazy&quot;);// 2、过滤掉不是图片的标签//方式一：var imgs = document.querySelectorAll(&quot;img.lazy&quot;);//方式二：imgs = Array.prototype.filter.call(imgs, function (item) &#123;return item instanceof Image;&#125;);//方式三：imgs = Array.prototype.filter.call(imgs, function (item) &#123;return item instanceof HTMLImageElement;&#125;);</code></pre><blockquote><p>注意：方式一得到的是类数组，没有<code>indexOf</code>方法</p></blockquote></blockquote></li></ul><blockquote><ul><li>获取页面可视区的高</li></ul><pre><code>// 获取浏览器可视区的高var clientHeight =  document.documentElement.clientHeight || document.body.clientHeight;</code></pre></blockquote><blockquote><ul><li>对获取的所有图片进行遍历，遍历时判断元素是否进入到可视区</li><li>元素进入可视区原理：元素底部与浏览器可视区的高 &gt; 0 同时元素顶部与浏览器可视区的高要小于浏览器可视区高。 即<code>bottom &gt; 0 &amp;&amp; _top &lt; clientHeight</code></li><li>如果元素进入可视区，将图片保存在<code>data-src</code>属性上的正确地址赋值给<code>src</code>属性</li><li>同时将此图片从<code>imgs</code>数组中删除，以后不需要再监听了</li><li>当<strong>滚动条滚动</strong>时，或<strong>浏览器窗口大小发生改变</strong>时，会有其它图片进入到当前浏览器可视区,则需要添加对应的<strong>事件来监听</strong>。</li><li>当所有图片都被加载出来了，<code>imgs</code>是空数组；此时就不用再遍历了</li><li>最后还要做相关节流操作<blockquote><p>注意：</p></blockquote></li><li>如果动态调整<code>ul</code>宽度的<code>resize</code>事件也做节流的话，那么，它的间隔时间必须短于懒加载函数中<code>resize</code>事件的间隔时间</li><li>不要用<code>top</code>命名变量，因为，<code>window</code>里面有一个<code>top</code>方法，它指向<code>window</code>本身</li></ul></blockquote><p><strong>主页面</strong></p><blockquote><pre><code>&lt;script&gt;  //获取元素  var container = document.getElementById(&quot;J_container&quot;);  //第一次进来时，初始化ul的宽度  initUlWidth();  //每次调整浏览器可视区时，动态调整ul的宽度  window.addEventListener(&quot;resize&quot;, throttle(initUlWidth, 90));  //调整ul宽度函数  function initUlWidth() &#123;    //获取可视区宽度    var clientWidth =      document.documentElement.clientWidth || document.body.clientWidth;    var count = Math.floor(clientWidth / 242);    container.style.width = count * 242 + &quot;px&quot;;  &#125;  lazyload(); //实现延迟加载效果/** * 节流函数 * fn 事件处理函数 * delay 函数执行间隔时间 */  function throttle(fn, delay) &#123;    var timer = null;    return function () &#123;      var self = this;      var args = arguments;      if (timer) return;      timer = setTimeout(function () &#123;        // 函数体执行代码        fn.apply(self, args);        // 开锁        timer = null;      &#125;, delay);    &#125;;  &#125;&lt;/script&gt;</code></pre></blockquote><p><strong>完整JS文件</strong></p><blockquote><ul><li>只需要将图片上添加<code>data-src</code>属性，存放真实图片地址，同时添加<code>class=&#39;lazy&quot;</code>,最后调用<code>lazyLoad()</code>即可</li></ul><pre><code>(function () &#123;  // 实现延时加载  function lazyLoad() &#123;    // 1、需要获取到所有需要延时加载的图片    var imgs = document.querySelectorAll(&quot;.lazy&quot;);    // 2、过滤掉不是图片的标签    imgs = Array.prototype.filter.call(imgs, function (item) &#123;      return item instanceof Image;    &#125;);    lazy(); // 调用    window.addEventListener(&quot;scroll&quot;, throttle(lazy, 100)); //  给window绑定滚动事件    window.addEventListener(&quot;resize&quot;, throttle(lazy, 100));    function lazy() &#123;      if (imgs.length === 0) return; // 当前数组中没有需要监听的图片了      // 获取浏览器可视区的高      var clientHeight =        document.documentElement.clientHeight || document.body.clientHeight;</code></pre></blockquote><pre><code>  // 遍历所有过滤后得图片，然后查看图片是否进入到可视区，  // 如果进入到可视区，就动态给图片添加真实的图片地址  for (var i = 0; i &lt; imgs.length; i++) &#123;    // 判断图片是否进入可视区  bottom&gt;0  &amp;&amp; top&lt;浏览器可视区高    var rect = imgs[i].getBoundingClientRect();</code></pre><blockquote></blockquote><pre><code>    var bottom = rect.bottom;    var _top = rect.top;    // 以下条件成立，代表元素进入到可视区    if (bottom &gt; 0 &amp;&amp; _top &lt; clientHeight) &#123;      // 把自定义属性上的真实地址赋值给图片      imgs[i].src = imgs[i].dataset.src;      // 如果图片进入过一次可视区，动态赋过值，就不用再管他了      var index = imgs.indexOf(imgs[i]);      imgs.splice(index, 1);      i--; // 一定要注意，i--    &#125;  &#125;&#125;</code></pre><p>  }</p><blockquote><p>&#x2F;**</p><ul><li>节流函数</li><li>fn 事件处理函数</li><li>delay 函数执行间隔时间<br>*&#x2F;<br>function throttle(fn, delay) {<br>  var timer &#x3D; null;<br>  return function () {<br>var self &#x3D; this;<br>var args &#x3D; arguments;<br>if (timer) return;<br>timer &#x3D; setTimeout(function () {<br>  &#x2F;&#x2F; 函数体执行代码<br>  fn.apply(self, args);<br>  &#x2F;&#x2F; 开锁<br>  timer &#x3D; null;<br>}, delay);<br>  };<br>}</li></ul></blockquote><p>  window.lazyLoad &#x3D; lazyLoad;<br>})();</p><blockquote><pre><code></code></pre></blockquote><h4 id="案例3：吸顶盒导航"><a href="#案例3：吸顶盒导航" class="headerlink" title="案例3：吸顶盒导航"></a>案例3：吸顶盒导航</h4><blockquote><p><strong>涉及知识点</strong></p><ul><li>过渡动画</li><li><code>window.onsrcoll</code>事件</li><li><code>offsetTop</code>、<code>offsetHeight</code>、<code>scrollTop</code></li></ul></blockquote><blockquote><p>思路：</p><ul><li>给吸顶盒元素做一个<strong>副本</strong>，定在可视区之外</li><li>滚动条往下走，当它滚动的距离 超过 元素自身高度+元素距顶部距离 时，副本<strong>缓慢</strong>定在最顶部<ul><li>副本出现的时候，给它加动画效果的样式</li></ul></li><li>滚动条往上走，当 它滚动的距离 小于 元素元素距浏览器顶部距离时，副本马上消失<ul><li>副本消失时，去掉样式<blockquote><p>注意<strong>副本消失时的条件</strong>，如果直接写在<code>else</code>里，就会发生抖动</p></blockquote></li></ul></li></ul></blockquote><blockquote><pre><code>&lt;style&gt;  html,  body &#123;    margin: 0;    height: 100%;  &#125;  .top &#123;    height: 50px;    background-color: #000;  &#125;  .header &#123;    height: 120px;    background-color: skyblue;  &#125;  .nav &#123;    width: 100%;    height: 100px;    background-color: red;  &#125;  .nav2 &#123;    background-color: red;    position: fixed;    top: -100px;  &#125;  .transition &#123;    transition: top 1s ease;  &#125;  .main &#123;    height: 3000px;  &#125;&lt;/style&gt;&lt;!-- 模拟的头部内部 --&gt;&lt;div class=&quot;top&quot;&gt;&lt;/div&gt;&lt;div class=&quot;header&quot;&gt;&lt;/div&gt;&lt;!-- 吸顶盒 --&gt;&lt;!-- nav2相当于nav1的副本，不过nav2是固定定位在浏览器的外部 --&gt;&lt;div class=&quot;nav nav1&quot;&gt;&lt;/div&gt;&lt;div class=&quot;nav nav2&quot;&gt;&lt;/div&gt;&lt;div class=&quot;main&quot;&gt;&lt;/div&gt;&lt;script&gt;  // 获取nav1与nav2  var nav1 = document.querySelector(&quot;.nav1&quot;);  var nav2 = document.querySelector(&quot;.nav2&quot;);  var nav1Top = nav1.offsetTop; // nav1的顶部与浏览器顶部距离  var bottom = nav1Top + nav1.offsetHeight; // nav1的底部与浏览器顶部距离</code></pre></blockquote><p>  &#x2F;&#x2F;添加 scroll事件<br>  window.addEventListener(“scroll”, fn);<br>  function fn() {<br>    var scrollTop &#x3D;<br>      document.documentElement.scrollTop || document.body.scrollTop;<br>    &#x2F;&#x2F; 滚动条滚动距离 &gt;&#x3D; 元素底部与浏览器顶部距离<br>    if (scrollTop &gt;&#x3D; bottom) {<br>      nav2.classList.add(“transition”);<br>      &#x2F;&#x2F;nav2 区块显示出<br>      nav2.style.top &#x3D; “0px”;<br>    }<br>    &#x2F;&#x2F; 滚动条滚动距离 &lt;&#x3D; 元素顶部与浏览器项部距离<br>    if (scrollTop &lt;&#x3D; nav1Top) {<br>      nav2.classList.remove(“transition”);<br>      nav2.style.top &#x3D; “-100px”;<br>    }<br>  }</p><blockquote><p></script></p><pre><code></code></pre></blockquote><h4 id="案例4：滚动加载更多"><a href="#案例4：滚动加载更多" class="headerlink" title="案例4：滚动加载更多"></a>案例4：滚动加载更多</h4><blockquote><ul><li>当滚动条滚动到最底部时，加载一批数据，填充到页面上</li><li>判断滚动条滚动到底部公式：<code>scrollHeight - scrollTop - clientHeight = 0</code></li></ul></blockquote><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>scrollTop</td><td>元素滚动出去的高</td></tr><tr><td>clientHeight</td><td>元素的可视高（height + padding）</td></tr><tr><td>scrollHeight</td><td>元素实际内容的高</td></tr></tbody></table><blockquote><pre><code>var doc = document.documentElement || document.body;if (doc.scrollHeight - doc.scrollTop - doc.clientHeight &lt; 100) &#123;  // 快滚动到底部时，就开始请求加载数据&#125;</code></pre></blockquote><blockquote><pre><code>&lt;style&gt;  .main &#123;    height: 3000px;  &#125;  .box1 &#123;    background-color: khaki;    height: 500px;    margin: 50px;  &#125;&lt;/style&gt;&lt;div class=&quot;main&quot;&gt;&lt;/div&gt;&lt;script&gt;  // window滚动事件  window.addEventListener(&quot;scroll&quot;, throttle(loadmore, 100));  // 加载更多函数  function loadmore() &#123;    var doc = document.documentElement || document.body;    var scrollHeight = doc.scrollHeight;    var scrollTop = doc.scrollTop;    var clientHeight = doc.clientHeight;    // 什么时开始加载下一批内容    // 当浏览器的srollHeight - scrollTop -clientHeight=0时，表示滚动到页面的底部    // 但我们更希望在快到达底部前，就开始加载下一批数据，所以可以设置100左右的差值    if (scrollHeight - scrollTop - clientHeight &lt; 100) &#123;      // 加载更多内容      //   console.log(&quot;加载更多内容&quot;);      // 每次滚动到底部，创建一批内容，加载到页面当中      var div = document.createElement(&quot;div&quot;);      div.className = &quot;box1&quot;;      document.body.appendChild(div);</code></pre></blockquote><pre><code>  // ajax请求  // 把数据渲染到页面当中来&#125;</code></pre><p>  }</p><blockquote><p>&#x2F;**</p><ul><li>节流函数</li><li>fn 事件处理函数</li><li>delay 函数执行间隔时间<br> *&#x2F;<br>  function throttle(fn, delay) {<br> var timer &#x3D; null;<br> return function () {<br>   var self &#x3D; this;<br>   var args &#x3D; arguments;<br>   if (timer) return;<br>   timer &#x3D; setTimeout(function () {<br> &#x2F;&#x2F; 函数体执行代码<br> fn.apply(self, args);<br> &#x2F;&#x2F; 开锁<br> timer &#x3D; null;<br>   }, delay);<br> };<br>  }<br></script></li></ul><pre><code></code></pre></blockquote><h4 id="案例5：楼梯式导航"><a href="#案例5：楼梯式导航" class="headerlink" title="案例5：楼梯式导航"></a>案例5：楼梯式导航</h4><blockquote><p>涉及知识</p><ul><li>元素添加自定义属性绑定<strong>下标序号</strong></li><li>事件委托</li><li>查找数组中第一个大于 n 的数的下标</li><li>限时匀速动画</li><li>window.onscroll事件</li><li>scrollTop、offsetTop</li><li>函数节流</li></ul></blockquote><blockquote><p>布局思路</p><ul><li><code>foor-nav</code>用来制作右侧楼梯导航，采用固定定位，定位到浏览右侧</li><li><code>header</code> 和 <code>footer</code> 用来占位，模拟真实网站头部和尾部占用的空间</li><li><code>main</code> 中的直接子元素<code>floor-item</code>区域为楼梯导航滚动相关内容区块</li></ul></blockquote><ul><li><p>HTML结构</p><blockquote><pre><code>&lt;style&gt;html &#123;  /* 滚动条平滑滚动效果 */  scroll-behavior: smooth;&#125;html,body,ul,li &#123;  padding: 0;  margin: 0;  list-style: none;&#125;body &#123;  background-color: #ddd;&#125;.floor-nav &#123;  position: fixed;  right: 50px;  top: 100px;  width: 50px;  background-color: #fff;  padding: 10px 10px;&#125;.floor-nav li &#123;  height: 35px;  line-height: 35px;  text-align: center;  color: #000;  font-size: 14px;  border-bottom: 1px dashed #ddd;  cursor: pointer;&#125;.floor-nav li:hover,.floor-nav li.active:hover &#123;  background-color: red;  color: #fff;&#125;.floor-nav li.active &#123;  color: red;&#125;.main &#123;  width: 600px;  margin: 0px auto;&#125;.main .floor-item &#123;  width: 100%;  background-color: skyblue;  font-size: 50px;  text-align: center;  line-height: 200px;  margin-top: 50px;&#125;&lt;/style&gt;&lt;!-- 楼梯导航按扭开始 --&gt;&lt;ul class=&quot;floor-nav&quot; id=&quot;J_floor&quot;&gt; &lt;li&gt;国创&lt;/li&gt; &lt;li&gt;综艺&lt;/li&gt; &lt;li&gt;娱乐&lt;/li&gt; &lt;li&gt;电影&lt;/li&gt; &lt;li&gt;游戏&lt;/li&gt; &lt;li&gt;纪录片&lt;/li&gt; &lt;li&gt;电视剧&lt;/li&gt;&lt;/ul&gt;&lt;!-- 楼梯导航按扭开始 --&gt;&lt;div class=&quot;header&quot; style=&quot;height: 500px&quot;&gt;&lt;/div&gt;&lt;!--楼梯内容开始--&gt;&lt;div id=&quot;J_app&quot; class=&quot;main&quot;&gt; &lt;div class=&quot;floor-item&quot; style=&quot;height: 500px&quot;&gt;国创&lt;/div&gt; &lt;div class=&quot;floor-item&quot; style=&quot;height: 530px&quot;&gt;综艺&lt;/div&gt; &lt;div class=&quot;floor-item&quot; style=&quot;height: 400px&quot;&gt;娱乐&lt;/div&gt; &lt;div class=&quot;floor-item&quot; style=&quot;height: 600px&quot;&gt;电影&lt;/div&gt; &lt;div class=&quot;floor-item&quot; style=&quot;height: 560px&quot;&gt;游戏&lt;/div&gt; &lt;div class=&quot;floor-item&quot; style=&quot;height: 400px&quot;&gt;纪录片&lt;/div&gt; &lt;div class=&quot;floor-item&quot; style=&quot;height: 620px&quot;&gt;电视剧&lt;/div&gt;&lt;/div&gt;&lt;!--楼梯内容结束--&gt;&lt;div class=&quot;footer&quot; style=&quot;height: 1500px&quot;&gt;&lt;/div&gt;</code></pre></blockquote></li><li><p>JS 实现思路</p><blockquote><p><strong>第一步：实现右侧楼梯导航按扭点击滚动效果</strong></p><ul><li>利用事件委托来实现，所有<code>li</code>的点击事件全委托给父元素<code>#J_floor</code>来实现</li><li>点击对应按扭实现：当前点击元素文字变红，其它文字为灰色，同时滚动条滚动到对应楼层</li><li>要实现当前文字变红，其它文字变灰，需要定义变量 <code>prevIndex</code>来保存前一项被点击元素的下标</li></ul></blockquote></li></ul><blockquote><pre><code>// 获取id为 J_floor元素var floorNav = document.getElementById(&quot;J_floor&quot;);var navs = document.querySelectorAll(&quot;#J_floor li&quot;);var prevIndex = -1; // 前一个楼梯按扭序号// 事件委托，所有子元素li的点击事件委托给父元素来处理floorNav.onclick = function (e) &#123;  var target = e.target;  var tagName = target.tagName.toLowerCase();  // 如果不是点击对应的li啥也不做  if (tagName !== &quot;li&quot;) return;</code></pre></blockquote><p>  &#x2F;&#x2F; 点击后要处理的事情<br>  &#x2F;&#x2F; 1.前面变红的li复原<br>  prevIndex !&#x3D;&#x3D; -1 &amp;&amp; navs[prevIndex].classList.remove(“active”);<br>  &#x2F;&#x2F; 2.当前项变红色<br>  target.classList.add(“active”);<br>  &#x2F;&#x2F; 3、把前一个序号更新为当前序号，供后面使用<br>  prevIndex &#x3D; Array.prototype.indexOf.call(navs, target);<br>  &#x2F;&#x2F; 4、滚动条滚动到当前楼层所在位置<br>  &#x2F;&#x2F; ………具体实现思路看下一步，<br>};</p><blockquote><pre><code></code></pre></blockquote><blockquote><p><strong>第二步：实现点击导航按扭后，滚动条滚动到对应楼层</strong></p><ul><li>创建一个空数组<code>floorItemsTopArr = []</code>，用来保存每一个楼层的元素与浏览器顶部的距离</li><li>点击按扭时，找到对应按扭元素的下标，再找到<code>floorItemsTopArr</code>数组中对应下标的元素，获得当前浏览器滚动条需要滚动到的距离。</li><li>实现滚动条在滚动时能平滑滚动:<ul><li>方法1：在html 标签的样式中添加<code>scroll-behavior: smooth;</code>样式;但目前在一些低版本浏览器中不支持</li><li>方法2：JS手动封装实现滚动条平滑滚动的函数，利用限时匀速运动</li></ul></li></ul><pre><code>/*** scrollByTop 滚动条从当前位置滚动到目标位置（只针对垂直方向）* target 滚动到的目标位置* delay 滚动的总时间*/function scrollByTop(target, delay = 200) &#123;  // 已经运动的时间  var T = 0;  // 开始运动的位置  var B = window.scrollY;  // 目标位置是 0  var targe=0;  // 总共需要改变的距离  var C = target - B;  // 总共需要运动的时间  var D = delay;</code></pre></blockquote><p>  &#x2F;&#x2F; 开始执行动画<br>  timer &#x3D; setInterval(function () {<br>    T +&#x3D; 20; &#x2F;&#x2F; 记录运动的时间<br>    &#x2F;&#x2F; 当前滚动条运动的距离<br>    var currentDistance &#x3D; (T &#x2F; D) * C + B;<br>    if (T &gt;&#x3D; D) {<br>      currentDistance &#x3D; target;<br>      clearInterval(timer);<br>    }<br>    window.scroll(0, currentDistance);<br>  }, 20);<br>}</p><blockquote><pre><code></code></pre></blockquote><blockquote><p><strong>第三步：实现滚动浏览器窗口，对应楼层按扭显示对应样式</strong></p><ul><li>如何知道当前滚动条滚动所在的对应楼层呢 ？可以通过当前滚动条滚动的距离与楼层顶部与浏览器的距离来判断</li><li>找到数组中<strong>从前往后</strong>满足： <code>滚动条滚动距离 &gt; 楼层顶部与浏览器顶部距离的最后一个元素</code> 。这个元素所在的下标，就是当前滚动条滚动到的楼层所对应的下标。把这个下标保存在变量<code>currentIndex</code>中，供后面使用。</li><li>找到对应楼层序号，就可以修改楼层的按扭样式。</li></ul></blockquote><blockquote><blockquote><p>性能优化</p></blockquote><ul><li>如果滚动条一直在当前楼层中滚动，则不需要频繁执行更改楼层按扭样式的代码</li><li>如果<code>prevIndex === currentIndex</code>说明当前滚动条一直在当前楼层滚动</li></ul><pre><code>var currentIndex = -1; // 当前楼梯所在按扭序号// 当滚动浏览器窗口时，对应导航的样式要显示到对应楼层window.onscroll = function () &#123;  // 不断获取浏览器滚动的距离  var scrollY = window.scrollY;  // 找到当前滚动所在的楼层序号  for (var i = 0; i &lt; floorItemsTopArr.length; i++) &#123;    if (scrollY &gt;= floorItemsTopArr[i]) &#123;      currentIndex = i; // 最后一次找到的i就是当前滚动所在的楼层    &#125; else &#123;      break;    &#125;  &#125;</code></pre></blockquote><p>  if (prevIndex &#x3D;&#x3D;&#x3D; currentIndex) return;</p><blockquote></blockquote><p>  &#x2F;&#x2F; 找到对应楼层后，需要处理的事情<br>  prevIndex !&#x3D;&#x3D; -1 &amp;&amp; navs[prevIndex].classList.remove(“active”);<br>  currentIndex !&#x3D;&#x3D; -1 &amp;&amp; navs[currentIndex].classList.add(“active”);<br>  prevIndex &#x3D; currentIndex;<br>};</p><blockquote><pre><code></code></pre></blockquote><blockquote><p><strong>第四步：第一个按扭和最后一个按扭样式的特殊情况</strong></p><ul><li>当滚动条滚动在最上面，不在第一个楼层区，即 <code>滚动距离 &lt; 第一个楼层与浏览器顶部距离</code>，则楼层按扭文字不变红</li><li>当滚动条滚动到最后面，不在最后一个楼层区，即 <code>滚动距离 &gt; 最后一个楼层与浏览器顶部距离 + 最后一个楼层的高度</code> ，则最后一个楼层按扭文字也不变红</li><li>要使楼层按扭文字不变红，只需要把<code>currentIndex = -1</code>即可</li></ul></blockquote><blockquote><pre><code>var len = floorItemTopArr.length;// 最后一个元素底部与浏览器顶部距离var bottom = floorItemsTopArr[len - 1] + floorItems[len - 1].offsetHeight;if (scrollY &lt; floorItemsTopArr[0] || scrollY &gt; bottom) &#123;  currentIndex = -1;&#125;</code></pre></blockquote><ul><li>完整源代码<blockquote><pre><code>&lt;script&gt;// 获取id为 J_floor元素var floorNav = document.getElementById(&quot;J_floor&quot;);var navs = document.querySelectorAll(&quot;#J_floor li&quot;);var floorItems = document.querySelectorAll(&quot;#J_app .floor-item&quot;);var len = floorItemTopArr.length;var prevIndex = -1; // 前一个楼梯按扭序号var currentIndex = -1; // 当前楼梯所在按扭序号var floorItemsTopArr = []; // 用来保存每一层的顶部与浏览器顶部的高</code></pre></blockquote>&#x2F;&#x2F; 把所有 floor-item与body顶部的距离添加到一个数组floorItemsTopArr<br>for (var i &#x3D; 0; i &lt; floorItems.length; i++) {<br>  floorItemsTopArr.push(floorItems[i].offsetTop);<br>}<blockquote></blockquote>&#x2F;&#x2F; 事件委托，所有子元素li的点击事件委托给父元素来处理<br>floorNav.onclick &#x3D; function (e) {<br>  var target &#x3D; e.target;<br>  var tagName &#x3D; target.tagName.toLowerCase();<br>  &#x2F;&#x2F; 如果不是点击对应的li啥也不做<br>  if (tagName !&#x3D;&#x3D; “li”) return;<blockquote></blockquote>  &#x2F;&#x2F; 点击后要处理的事情<br>  &#x2F;&#x2F; 1.前面变红的li复原<br>  prevIndex !&#x3D;&#x3D; -1 &amp;&amp; navs[prevIndex].classList.remove(“active”);<br>  &#x2F;&#x2F; 2.当前项变红色<br>  target.classList.add(“active”);<br>  &#x2F;&#x2F; 3、把前一个序号更新为当前序号，供后面使用<br>  prevIndex &#x3D; Array.prototype.indexOf.call(navs, target);<br>  &#x2F;&#x2F; 4、滚动条滚动到当前楼层所在位置<br>  &#x2F;&#x2F; 方法一：<br>  window.scroll(0, floorItemsTopArr[prevIndex]);<br>  &#x2F;&#x2F; 方法二：<br>  &#x2F;&#x2F; var doc &#x3D; document.documentElement || document.body;<br>  &#x2F;&#x2F; doc.scrollTop &#x3D; floorItemsTopArr[prevIndex];<br>  &#x2F;&#x2F; 方法三<br>  &#x2F;&#x2F;   scrollByTop(floorItemsTopArr[prevIndex]);<br>};<blockquote></blockquote>&#x2F;&#x2F; 当滚动浏览器窗口时，对应导航的样式要显示到对应楼层<br>window.onscroll &#x3D; function () {<br>  &#x2F;&#x2F; 不断获取浏览器滚动的距离<br>  var scrollY &#x3D; window.scrollY;<br>  &#x2F;&#x2F; 找到当前滚动所在的楼层序号<br>  &#x2F;&#x2F; 楼层数据中最后一个满足： 条件的的元素所在序号<br>  for (var i &#x3D; 0; i &lt; floorItemsTopArr.length; i++) {<br>if (scrollY &gt;&#x3D; floorItemsTopArr[i]) {<br>  currentIndex &#x3D; i; &#x2F;&#x2F; 最后一次找到的i就是当前滚动所在的楼层<br>} else {<br>  break;<br>}<br>  }<br>  &#x2F;&#x2F; 考虑第一个和最后一个的特殊情况<br>  &#x2F;&#x2F; 最后一个元素底部与浏览器顶部距离<br>  var bottom &#x3D; floorItemsTopArr[len - 1] + floorItems[len - 1].offsetHeight;<br>  if (scrollY &lt; floorItemsTopArr[0] || scrollY &gt; bottom) {<br>currentIndex &#x3D; -1;<br>  }<blockquote></blockquote>  &#x2F;&#x2F; 优化处理，如果一直在当前楼层内滚动，不执行以下代码<br>  if (prevIndex &#x3D;&#x3D;&#x3D; currentIndex) return;<br>  &#x2F;&#x2F; 找到对应楼层后，需要处理的事情<br>  prevIndex !&#x3D;&#x3D; -1 &amp;&amp; navs[prevIndex].classList.remove(“active”);<br>  currentIndex !&#x3D;&#x3D; -1 &amp;&amp; navs[currentIndex].classList.add(“active”);<br>  prevIndex &#x3D; currentIndex;<br>};<blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（十二）</title>
      <link href="/2023/12/07/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/12/07/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、鼠标滚轮事件"><a href="#一、鼠标滚轮事件" class="headerlink" title="一、鼠标滚轮事件"></a>一、鼠标滚轮事件</h3><blockquote><p>鼠标滚轮事件存在兼容性问题，不同浏览器对应的事件名不一样。</p><table><thead><tr><th>事件名</th><th>事件对象属性（判断滚动方向）</th><th>支持浏览器</th></tr></thead><tbody><tr><td>mousewheel（非标准）</td><td><code>e.wheelDelta</code>：正值（120） ↑;负值（-120）↓</td><td>Webkit 和 Edge 等各大浏览器，但 Firefox 不支持</td></tr><tr><td>DOMMouseScroll（非标准）</td><td><code>e.detail</code>：</td><td></td></tr><tr><td>正值（3）↓;负值（-3）↑</td><td>低版本 firefox，同时该事件需要通过<code>addEventListener</code>方式绑定事件监听</td><td></td></tr><tr><td>wheel（标准）</td><td><code>e.deltaY</code>：正值 ↓;负值 ↑</td><td>各个厂商的高版本浏览器都支持</td></tr></tbody></table></blockquote><ol><li><p>mousewheel 事件</p><blockquote><ul><li>早期低版本的<code>webkit</code>和<code>Edge</code>支持</li><li>通过<code>e.wheelDelta</code>的值来判断鼠标滚动的方向，值为 120 向上，值为-120 向下</li></ul><pre><code>box.addEventListener(&quot;wheel&quot;, eventFn, false);function eventFn(e) &#123;  // 负值 向下滚  正值 向上滚  console.log(e.wheelDelta);&#125;</code></pre></blockquote></li><li><p>DOMMouseScroll 事件</p><blockquote><ul><li>低版本的<code>Firefox</code>支持</li><li>通过<code>e.detail</code>的值来判断鼠标滚动方向，值为 3，向下滚，值为 -3 向上滚</li></ul><pre><code>box.addEventListener(&quot;DOMMouseScroll&quot;, eventFn, false);function eventFn(e) &#123;  // 正值 3 向下滚  负值 -3  向上滚  console.log(e.detail);&#125;</code></pre></blockquote></li><li><p>wheel 事件</p><blockquote><ul><li>为了统一滚轮事件的标准，各大浏览器的高版本都支持这个事件</li><li>通过 <code>e.deltaY</code> 的值来判断鼠标滚动方向，正值向下，负值向上。</li></ul><pre><code>var box = document.querySelector(&quot;.box&quot;);box.addEventListener(&quot;wheel&quot;, eventFn, false);function eventFn(e) &#123;  // 正值 向下滚  负值 向上滚  console.log(e.deltaY);&#125;</code></pre></blockquote></li><li><p>兼容型处理</p><blockquote><ul><li>以下代码封装成<code>wheel.js</code>文件，供后期使用</li></ul></blockquote></li></ol><ul><li>获取浏览器当前支持的版本的鼠标滚轮事件名<blockquote><pre><code> var box = document.querySelector(&quot;.box&quot;); // 获取浏览器当前支持的版本的鼠标滚轮事件名 console.log(&quot;onwheel&quot; in box); //true var support = &quot;onwheel&quot; in document.createElement(&quot;div&quot;)   ? &quot;wheel&quot; // 各个厂商的高版本浏览器都支持&quot;wheel&quot;   : document.onmousewheel !== undefined   ? &quot;mousewheel&quot; // Webkit 和 IE 一定支持&quot;mousewheel&quot;   : &quot;DOMMouseScroll&quot;; // 低版本 firefox</code></pre></blockquote></li></ul><blockquote><ul><li><code>&quot;onwheel&quot; in box</code>：用<code>in</code>检查<code>HTMLElement</code>原型上是否有<code>onwheel</code>这个方法，如果有就用<code>wheel</code>事件</li><li>但因为要封装，所以自己创建一个元素，并查看它的原型上是否有这个方法</li><li><code>document.onmousewheel !== undefined</code>用来检查是否支持<code>mousewheel</code>事件，如果不支持，就会使用<code>DOMMouseScroll</code></li></ul></blockquote><ul><li><p>处理事件对象的属性值</p><blockquote><pre><code>function callback(e) &#123;var e = e || window.event;e.preventDefault(); // 阻止默认行为// 处理低版本火狐,如果有detail值，就给e添加deltaY属性,并统一正负e.detail &amp;&amp; (e.deltaY = e.detail * 40);// 处理低版本 ie 和  Edge等浏览器,如果有wheelDelta值，就给e添加deltaY属性,并统一正负e.wheelDelta &amp;&amp; (e.deltaY = -e.wheelDelta);//如果前两个版本都没有，就使用e.deltaYif (e.deltaY &gt; 0) &#123;    //向下滚    //要处理的业务逻辑写在这里  &#125; else &#123;    //向上滚    //要处理的业务逻辑写在这里  &#125;</code></pre></blockquote><p>}</p><blockquote><pre><code></code></pre></blockquote></li><li><p>优化</p><blockquote><ul><li>将事件处理函数抽离，供用户自己设置</li><li>事件处理函数中的<code>this</code>和<code>arguments</code>丢失问题</li></ul></blockquote></li><li><p>封装</p><blockquote><pre><code>/*** addWheelListener 兼容不同版板的鼠标滚轮事件* element 绑定滚轮事件的元素* eventFn 事件处理函数* useCapture 在捕获还是冒泡阶段执行*/window.addWheelListener = function (element, eventFn, useCapture = false) &#123;// 获取浏览器当前支持的版本的鼠标滚轮事件名var support =  &quot;onwheel&quot; in document.createElement(&quot;div&quot;)    ? &quot;wheel&quot; // 各个厂商的高版本浏览器都支持&quot;wheel&quot;    : document.onmousewheel !== undefined    ? &quot;mousewheel&quot; // Webkit 和 IE 一定支持&quot;mousewheel&quot;    : &quot;DOMMouseScroll&quot;; // 低版本 firefox</code></pre></blockquote></li></ul><blockquote></blockquote><p>  &#x2F;&#x2F; 添加鼠标事件<br>  element.addEventListener(support, callback, useCapture);</p><blockquote></blockquote><p>  &#x2F;&#x2F; 兼容写法的事件方法<br>  function callback(e) {<br>    var e &#x3D; e || window.event;<br>    e.preventDefault(); &#x2F;&#x2F; 阻止默认行为<br>    &#x2F;&#x2F; 处理低版本火狐<br>    e.detail &amp;&amp; (e.deltaY &#x3D; e.detail * 40);<br>    &#x2F;&#x2F; 处理低版本 ie 和  Edge等浏览器<br>    e.wheelDelta &amp;&amp; (e.deltaY &#x3D; -e.wheelDelta);</p><blockquote></blockquote><pre><code>// 滚动事件要处理的事情，通过e.deltaY来判断滚动的方向，正向下，负向上eventFn.apply(this, arguments);//传入this和arguments</code></pre><p>  }<br>};<br>  &#x2F;&#x2F;调用函数<br>  function fn(e) {<br>    console.log(this);<br>    console.log(e);<br>    &#x2F;&#x2F;真正的事件处理函数<br>    if (e.deltaY &gt; 0) {<br>      &#x2F;&#x2F;向下滚<br>      &#x2F;&#x2F;要处理的业务逻辑写在这里<br>      console.log(“向下”);<br>    } else {<br>      &#x2F;&#x2F;向上滚<br>      &#x2F;&#x2F;要处理的业务逻辑写在这里<br>      console.log(“向上”);<br>    }<br>  }<br>  addWheelListener(box, fn, false);</p><blockquote><pre><code></code></pre></blockquote><ol start="5"><li><p>案例 1：滚动实现元素高度变化</p><blockquote><pre><code>&lt;style&gt;  html,  body &#123; margin: 0; padding: 0;  &#125;  .box &#123; width: 100px; height: 200px; background-color: khaki; margin: 50px;  &#125;&lt;/style&gt;&lt;script src=&quot;./wheel.js&quot;&gt;&lt;/script&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);</code></pre></blockquote><p>  function fn(e) {<br> var speed &#x3D; 10;<br> if (e.deltaY &gt; 0) {<br>   &#x2F;&#x2F;向下滚<br>   box.style.height &#x3D; this.offsetHeight + speed + “px”;<br> } else {<br>   &#x2F;&#x2F;向上滚<br>   box.style.height &#x3D; this.offsetHeight - speed + “px”;<br> }<br>  }</p><blockquote></blockquote><p>  addWheelListener(box, fn);</p><blockquote><p></script></p><pre><code></code></pre></blockquote></li><li><p>案例2：全屏垂直滚动轮播</p><blockquote><p>涉及知识点</p><ul><li>鼠标滚轮事件</li><li><code>transitionend</code>事件</li><li>节流操作</li><li>事件委托</li><li><code>window.resize</code>事件</li></ul></blockquote></li></ol><ul><li><p>CSS布局代码</p><blockquote><pre><code>&lt;style&gt; html, body &#123; margin: 0; padding: 0; height: 100%; &#125; .wrap &#123; width: 100%; height: 500%; transform: translate3d(0, 0, 0); transition: transform 1s ease; &#125; .wrap .slide &#123; display: flex; /*使文字居中*/ align-items: center; justify-content: center; color: #fff; font-size: 60px; height: 20%; &#125; .wrap .slide:nth-child(1) &#123; background-color: khaki; &#125; .wrap .slide:nth-child(2) &#123; background-color: skyblue; &#125; .wrap .slide:nth-child(3) &#123; background-color: tomato; &#125; .wrap .slide:nth-child(4) &#123; background-color: rgb(154, 236, 197); &#125; .wrap .slide:nth-child(5) &#123; background-color: rgb(174, 139, 223); &#125; /* 分页器 */ .pagination &#123; position: fixed; /*固定在一个位置*/ right: 20px; top: 50%; transform: translateY(-50%); width: 11px; height: 100px; display: flex; /*使span居中*/ flex-direction: column; /*改变方向*/ justify-content: space-between; /*使span两端对齐*/ &#125; .pagination span &#123; width: 100%; height: 11px; background-color: #fff; border-radius: 50%; cursor: pointer; &#125; .pagination span.active &#123; background-color: orange; box-shadow: 0 0 2px 3px orange; &#125;&lt;/style&gt;&lt;div class=&quot;wrap&quot;&gt; &lt;div class=&quot;slide&quot;&gt;第一屏&lt;/div&gt; &lt;div class=&quot;slide&quot;&gt;第二屏&lt;/div&gt; &lt;div class=&quot;slide&quot;&gt;第三屏&lt;/div&gt; &lt;div class=&quot;slide&quot;&gt;第四屏&lt;/div&gt; &lt;div class=&quot;slide&quot;&gt;第五屏&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;pagination&quot;&gt; &lt;span class=&quot;active&quot;&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt;&lt;/div&gt;</code></pre></blockquote></li><li><p>处理分页器切换效果</p><blockquote><pre><code>&lt;script&gt; var spans = document.querySelectorAll(&quot;.pagination span&quot;); var pagination = document.querySelector(&quot;.pagination&quot;); var viewHeight = document.documentElement.clientHeight; var wrap = document.querySelector(&quot;.wrap&quot;); var currentIndex = 0; var prevSpan = 0; //给span加下标 var len = spans.length; for (var i = 0; i &lt; len; i++) &#123; spans[i].index = i; &#125; //利用事件委托，切换slide和span pagination.onclick = function (e) &#123; var target = e.target; var tagName = target.tagName.toLowerCase(); if (tagName !== &quot;span&quot;) return; //给span加样式 spans[prevSpan].classList.remove(&quot;active&quot;); currentIndex = target.index; spans[currentIndex].classList.add(&quot;active&quot;); prevSpan = currentIndex; //改变slide var translateY = -currentIndex * viewHeight; wrap.style.transform = &quot;translate3d(0,&quot; + translateY + &quot;px, 0)&quot;; &#125;;&lt;/script&gt;</code></pre></blockquote></li><li><p>滚轮操作切换效果</p><blockquote><pre><code>&lt;script src=&quot;./wheel.js&quot;&gt;&lt;/script&gt;// 滚轮切换 function fn(e) &#123; if (e.deltaY &gt; 0) &#123;   currentIndex++;   if (currentIndex === len) &#123;     currentIndex = len - 1;     return;   &#125;   //给span加样式   spans[prevSpan].classList.remove(&quot;active&quot;);   spans[currentIndex].classList.add(&quot;active&quot;);   prevSpan = currentIndex;   //改变slide   var translateY = -currentIndex * viewHeight;   wrap.style.transform = &quot;translate3d(0,&quot; + translateY + &quot;px, 0)&quot;; &#125; else &#123;   currentIndex--;   if (currentIndex &lt; 0) &#123;     currentIndex = 0;     return;   &#125;   //给span加样式   spans[prevSpan].classList.remove(&quot;active&quot;);   spans[currentIndex].classList.add(&quot;active&quot;);   prevSpan = currentIndex;   //改变slide   var translateY = -currentIndex * viewHeight;   wrap.style.transform = &quot;translate3d(0,&quot; + translateY + &quot;px, 0)&quot;;&#125; &#125; addWheelListener(wrap, fn);</code></pre></blockquote></li><li><p>节流操作</p><blockquote><ul><li>方法1：节流函数</li><li>引入节流函数，因为是低频，所以注意要把事件处理函数放定时器外面</li><li>缺点：滚动事件的节流和分页器的节流相互独立，虽然在限时时间内不能滚动，但如果同时点分页器，就会受到影响</li></ul></blockquote></li></ul><blockquote><ul><li>方法2：<code>addtransitionend</code>事件</li><li>设置一把锁，当<code>lock=true</code>时，不能触发<code>span</code>的点击事件和滚轮事件</li><li>当动画完结时，开锁</li><li>注意还有几个需要开锁的地方<ul><li>当滚动到最后一个&#x2F;第一个后，再次滚动，不会触发动画，因此就不会开锁</li><li>当连续点击同一个分页器时，也不会触发动画<blockquote><p>这个方法使滚轮事件和分页器相互影响，在其中一个事件的动画完成之前，另一个事件是触发不了的</p></blockquote></li></ul></li></ul></blockquote><ul><li>优化<blockquote><ul><li>把公用的代码抽离出来</li><li>当浏览器窗口大小改变时，<code>viewHeight</code>、<code>translateY</code>也要做相应改变<ul><li>使用<code>resize</code></li></ul></li></ul></blockquote></li></ul><blockquote><pre><code>function to(index) &#123;  //给span加样式  currentIndex = index;  spans[prevSpan].classList.remove(&quot;active&quot;);  spans[currentIndex].classList.add(&quot;active&quot;);  prevSpan = currentIndex;  //改变slide  var translateY = -currentIndex * viewHeight;  wrap.style.transform = &quot;translate3d(0,&quot; + translateY + &quot;px, 0)&quot;;&#125;window.addEventListener(&quot;resize&quot;, function () &#123;  // 同时还要重新计算，wrap 的translateY的值  viewHeight = document.documentElement.clientHeight;  var translateY = -(currentindex * viewHeight);  wrap.style.transform = &quot;translate3d(0, &quot; + translateY + &quot;px, 0)&quot;;&#125;);</code></pre></blockquote><h3 id="二、鼠标按键"><a href="#二、鼠标按键" class="headerlink" title="二、鼠标按键"></a>二、鼠标按键</h3><ol><li><p>禁止右键菜单</p><blockquote><ul><li><code>contextmenu</code>事件，会在鼠标点击右键或者按下键盘上的菜单键时被触发，用于显示上下文菜单</li><li>如果我们希望在按下右键时，不要显示上下文菜单，我们可以在<code>contextmenu</code>事件中，阻止默认行为。</li></ul><pre><code>// 在页面任意位置按下右键，都不会显示上下文菜单document.addEventListener(&quot;contextmenu&quot;, function (e) &#123;  e.preventDefault();&#125;);</code></pre></blockquote><p>var box &#x3D; document.querySelector(“.box”);<br>&#x2F;&#x2F; 只在当前元素上按下时，不显示上下文菜单<br>box.addEventListener(“contextmenu”, function (e) {<br>  e.preventDefault();<br>});</p><blockquote><pre><code></code></pre></blockquote></li><li><p>禁止选中元素</p><blockquote><ul><li><code>selectstart</code>事件，在用户开始一个新的选择时候触发<blockquote><p>如果不想用户选择内容，可以在事件中阻止默认行为</p></blockquote></li></ul><pre><code>我是一堆测试文字&lt;script&gt;  document.onselectstart = function (e) &#123; e.preventDefault();  &#125;;&lt;/script&gt;</code></pre></blockquote></li><li><p>判断按下的鼠标键</p><blockquote><ul><li><code>MouseEvent.button</code>(e.button)是只读属性，它返回一个值，代表用户按下并触发了事件的鼠标按键。</li><li>常用于在<code>onmouseup</code>事件中，判断用户按下的是鼠标左键 、中键、右键中的那个键<table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>主按键，通常指鼠标左键或默认值</td></tr><tr><td>1</td><td>辅助按键，通常指鼠标滚轮中键</td></tr><tr><td>2</td><td>次按键，通常指鼠标右键</td></tr></tbody></table></li></ul><pre><code>&lt;style&gt;  .box &#123; width: 200px; height: 200px; background-color: khaki;  &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  box.onmouseup = function (e) &#123; console.log(e.button); // 0 左键  1中键  2右键  &#125;;&lt;/script&gt;</code></pre></blockquote></li><li><p>案例-自定义右键菜单</p><blockquote><ul><li>禁止出现原本的右键菜单</li><li>自定义新的菜单栏<ul><li>鼠标点哪菜单就出现在哪：将菜单栏的left、top与鼠标事件绑定</li><li>点击其他位置取消菜单栏：设置一个点击事件隐藏菜单栏</li></ul></li><li>处理菜单栏<ul><li>给每个li设置下标</li><li>用事件委托+<code>switch</code></li></ul></li></ul><pre><code>&lt;style&gt;  html,  body,  ul,  li &#123; margin: 0; padding: 0;  &#125;  li &#123; list-style: none;  &#125;  .menu &#123; position: absolute; left: 100px; top: 100px; box-shadow: 2px 1px 2px 2px #d7d1d1; display: none;  &#125;  .menu li &#123; width: 120px; border-bottom: 1px solid #ddd; height: 30px; line-height: 30px; text-indent: 5px; cursor: pointer; background-color: #fff;  &#125;  .skin &#123; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 540px; background-color: khaki; display: none;  &#125;  .select-skin li img &#123; width: 260px; height: 163px; float: left; margin: 5px; cursor: pointer;  &#125;  .clear::after &#123; content: &quot;&quot;; clear: both; display: block;  &#125;  .skin .close &#123; position: absolute; top: -15px; right: -15px; width: 30px; height: 30px; color: #fff; text-align: center; line-height: 30px; border-radius: 50%; background-color: #000; cursor: pointer;  &#125;&lt;/style&gt;&lt;ul class=&quot;menu&quot;&gt; &lt;li&gt;更换浏览器背景&lt;/li&gt; &lt;li&gt;刷新&lt;/li&gt; &lt;li&gt;跳转到&lt;/li&gt; &lt;li&gt;更换背景颜色&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;skin&quot;&gt; &lt;ul class=&quot;select-skin clearfix&quot;&gt;   &lt;li&gt;     &lt;img</code></pre></blockquote></li></ol><blockquote><pre><code>   src=&quot;../src/skin/min1.jpg&quot;   alt=&quot;&quot;   data-skin=&quot;../src/skin/big1.jpg&quot; /&gt;</code></pre>   </li>   <li>     <img       src="../src/skin/min2.jpg"       alt=""       data-skin="../src/skin/big2.jpg"     />   </li>   <li>     <img       src="../src/skin/min3.jpg"       alt=""       data-skin="../src/skin/big3.jpg"     />   </li>   <li>     <img       src="../src/skin/min4.jpg"       alt=""       data-skin="../src/skin/big4.jpg"     />   </li> </ul> <div class="close">X</div></div><script>  var menu = document.querySelector(".menu");  var list = document.querySelectorAll(".menu li");  var skin = document.querySelector(".skin");  var close = document.querySelector(".skin .close");  var imgList = document.querySelectorAll(".skin img");  //禁止原本的右键菜单  document.oncontextmenu = function (e) {    e.preventDefault();  };  //鼠标右击菜单出现  document.addEventListener("mouseup", function (e) {    if (e.button === 2) {      menu.style.left = e.pageX + "px";      menu.style.top = e.pageY + "px";      menu.style.display = "block";    }  });  // 在页面任意位置点击，即关闭自定义菜单  document.onclick = function () {    menu.style.display = "none";  };  //为菜单选项，添加点击事件，点击后做相关操作,事件委托  //1.给li加下标  for (var i = 0; i < list.length; i++) {    list[i].index = i;  }  // 事件委托，右键菜单的点击事件委托给父元素来处理  menu.onclick = function (e) {    var target = e.target;    var _index = target.index;    switch (_index) {      case 0:        skin.style.display = "block";        break;      case 1:        alert("1");        break;      case 2:        alert("2");        break;      case 3:        document.body.style.backgroundColor = "skyblue";        break;    }  };  // 点击关闭按扭，关闭换肤  close.onclick = function () {    skin.style.display = "none";  };  //换肤效果  var prevImg = imgList[0];  prevImg.style.outline = "1px solid red";  skin.onclick = function (e) {    var target = e.target;    var tagName = target.tagName.toLowerCase();    if (tagName !== "img") return;    prevImg.style.outline = "";    target.style.outline = "1px solid red";    prevImg = target;    var src = target.dataset.skin;    document.body.style.backgroundImage = "url(" + src + ")";  };</script>```</blockquote><h3 id="三、HTML5-的拖拽事件"><a href="#三、HTML5-的拖拽事件" class="headerlink" title="三、HTML5 的拖拽事件"></a>三、HTML5 的拖拽事件</h3><blockquote><ul><li>默认情况下，网页中<strong>只有图片和文本</strong>可以拖动。其它元素默认情况下，均不允许被拖动</li><li>在图片上按下鼠标不放，然后移动鼠标就可以拖动图片。</li><li>当需要拖动文本时，只需要先选中文本，然后在选中文本上按下，最后移动鼠标，就可以实现拖动。</li></ul></blockquote><blockquote><p>如果想要其它元素也能被拖动呢 ？</p><ul><li>在<code>HTML5</code>中为每个元素提供了一个<code>draggable</code>属性，这个属性用于标识元素是否允许使用拖放操作拖动。</li><li>我们可以在元素身上添加<code>draggabel</code>属性，同时值为字符”true”，元素就可以被拖动了</li></ul></blockquote><h4 id="draggable-属性"><a href="#draggable-属性" class="headerlink" title="draggable 属性"></a>draggable 属性</h4><blockquote><p>draggable 属性有以下三个值，用来控制元素是否能被拖拽<br>|属性值|描述|<br>|true|表示元素可以被拖动|<br>|false|表示元素不可以被拖动|<br>|auto|默认值，表示使用浏览器定义的默认行为；默认情况下,只有已选中的文本、图片、链接可以拖动，其它元素是不可拖拽的。|</p></blockquote><blockquote><blockquote><p>注意</p></blockquote><ul><li>当元素被设置为可拖拽时，其元素中的文本和其子元素都不能以正常的方式被选中，而是会随着父容器一起被拖动</li><li>当元素被设置为不可拖拽时，其元素中的文本仍然会被拖动</li></ul></blockquote><blockquote><pre><code>&lt;style&gt; .box &#123;   width: 200px;   height: 200px;   background-color: khaki; &#125;&lt;/style&gt;&lt;div class=&quot;box&quot; draggable=&quot;true&quot;&gt;我是一堆测试文字&lt;/div&gt;</code></pre></blockquote><h4 id="拖拽基础概念"><a href="#拖拽基础概念" class="headerlink" title="拖拽基础概念"></a>拖拽基础概念</h4><blockquote><ul><li>在拖放（drag and drop）操作过程中，分为<strong>拖拽元素</strong>和<strong>目标元素（可放置元素）</strong></li><li>拖拽元素： 鼠标按下进行拖拽的元素为拖拽元素</li><li>目标元素： 把拖拽元素放入某个元素内部，或与某个元素发生碰撞等，这些元素为目标元素（可放置元素）。<br>如下图：假设把 A 元素拖拽放到 B 元素中，那A元素为拖拽元素，B元素为目标元素(可放置元素)<img src="拖拽基本概念.png"></li></ul></blockquote><h4 id="拖拽事件"><a href="#拖拽事件" class="headerlink" title="拖拽事件"></a>拖拽事件</h4><blockquote><p>元素在拖拽期间，会触发一些事件类型，其中分为</p><ul><li>拖拽元素事件：<code>dragstart</code> 、<code>drag</code>、<code>dragend</code></li><li>目标元素（放置元素）事件：<code>dragenter</code>、<code>dragover</code>、<code>dragleave</code>、<code>drop</code></li></ul></blockquote><ol><li>拖拽元素事件：drag、dragstart 、dragend<table><thead><tr><th>事件名</th><th>说明</th></tr></thead><tbody><tr><td>dragstart</td><td>当按住鼠标键<strong>不放并开始移动鼠标</strong>的那一刻，被拖动元素上会触发<code>dragstart</code>事件。只会在刚开始移动时触发一次。</td></tr><tr><td>drag</td><td>只要拖拽元素在拖拽中，就会持续的触发drag事件，有点类似于 <code>mousemove</code> 事件，只要鼠标在移动就会<strong>不断触发</strong></td></tr><tr><td>dragend</td><td>dragend 事件在拖放操作<strong>结束</strong>时触发（通过释放鼠标按钮或单击 <code>escape</code> 键），只会在结束时触发一次</td></tr></tbody></table></li></ol><blockquote><blockquote><p>使用这些事件之前，确认该元素可拖拽，已设置<code>draggable=&quot;true&quot;</code></p></blockquote><ul><li>通常会在dragstart中，设置被拖拽元素为半透明，标识元素正在被拖动。</li><li>在dragend中，恢复被拖拽元素为不透明。</li><li>所有<strong>子元素</strong>的拖拽事件，都会<strong>冒泡</strong>到他们的父元素身上，所以在处理拖拽事件时，<strong>可以利用事件委托</strong></li></ul><pre><code>&lt;style&gt;  .box &#123;    width: 200px;    height: 200px;    background-color: khaki;  &#125;  .box2 &#123;    width: 100px;    height: 100px;    background-color: skyblue;  &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;box2&quot; draggable=&quot;true&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  var box2 = document.querySelector(&quot;.box2&quot;);</code></pre></blockquote><p>  &#x2F;&#x2F; 给box2添加对应拖拽事件<br>  box2.ondragstart &#x3D; function (e) {<br>    console.log(“box2-start”);<br>  };<br>  box2.ondrag &#x3D; function (e) {<br>    console.log(“box2-drag”);<br>  };<br>  box2.ondragend &#x3D; function (e) {<br>    console.log(“box2-end”);<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F; 以下元素默认不能拖，但事件能被成功触发<br>  &#x2F;&#x2F; 是因为box2元素上对应事件触发后，会冒泡到父元素上<br>  box.ondragstart &#x3D; function (e) {<br>    console.log(“box-start”);<br>  };<br>  box.ondrag &#x3D; function (e) {<br>    console.log(“box-drag”);<br>  };<br>  box.ondragend &#x3D; function (e) {<br>    console.log(“box-end”);<br>  };</p><blockquote></blockquote><p>  document.ondragstart &#x3D; function (e) {<br>    console.log(“document-start”);<br>  };<br>  document.ondrag &#x3D; function (e) {<br>    console.log(“document-drag”);<br>  };<br>  document.ondragend &#x3D; function (e) {<br>    console.log(“document-end”);<br>  };</p><blockquote><p></script></p><pre><code></code></pre></blockquote><ol start="2"><li>dragenter、dragover、dragleave 放置元素事件<table><thead><tr><th>事件名</th><th>说明</th></tr></thead><tbody><tr><td>dragenter</td><td>当拖动的元素或被选择的文本<strong>进入有效的放置目标</strong>时， dragenter 事件被触发。</td></tr><tr><td>dragover</td><td>当元素或者选择的文本被拖拽到一个有效的放置目标上时，触发 dragover 事件（每几百毫秒触发一次）</td></tr><tr><td>dragleave</td><td>dragleave 事件在拖动的元素或选中的文本<strong>离开</strong>一个有效的放置目标时被触发</td></tr></tbody></table></li></ol><blockquote><blockquote><p>同样支持冒泡</p></blockquote><pre><code>&lt;style&gt;  .drag &#123;    position: absolute;    left: 10px;    top: 10px;    width: 100px;    height: 100px;    background-color: khaki;  &#125;  .target-wrap &#123;    position: absolute;    top: 10px;    left: 300px;    width: 250px;    height: 250px;    background-color: tomato;  &#125;  .target &#123;    width: 150px;    height: 150px;    background-color: skyblue;  &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;drag&quot; draggable=&quot;true&quot;&gt;&lt;/div&gt; &lt;div class=&quot;target-wrap&quot;&gt;   &lt;div class=&quot;target&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;script&gt;  // 拖拽元素  var drag = document.querySelector(&quot;.drag&quot;);  // 目标元素  var target = document.querySelector(&quot;.target&quot;);  //拖拽父元素  var targetWrap = document.querySelector(&quot;.target-wrap&quot;);  // 当拖拽元素进入目标元素时触发  target.ondragenter = function () &#123;    console.log(&quot;dragenter&quot;);  &#125;;  //当拖拽元素在有效的目标位置上时会触发;  target.ondragover = function () &#123;    console.log(&quot;dragover&quot;);  &#125;;  //当拖拽元素离开有效的目标位置上时会触发  target.ondragleave = function () &#123;    console.log(&quot;dragleave&quot;);  &#125;;  //此时box-wrap就是一个放置目标  targetWrap.ondragover = function () &#123;    console.log(&quot;targetWrap-dragover&quot;);  &#125;;  //当box被拖拽到target上时，会同时打印dragover和targetWrap-dragover&lt;/script&gt;</code></pre></blockquote><ol start="3"><li><p>drop 事件</p><table><thead><tr><th>事件名</th><th>说明</th></tr></thead><tbody><tr><td>drop</td><td>drop事件在被拖拽元素或选中的文本被放置在有效的放置目标上时被触发</td></tr></tbody></table></li><li><p>默认情况，元素不允许放置</p><blockquote><ul><li>在网页中，默认情况下，<strong>唯一有效</strong>的放置目标元素是文本框。但默认<strong>只能放置文本、链接、图片</strong></li><li>页面其它元素默认情况下，是不允许放置。如果把元素拖动到不允许放置的目标上，然后放下，不会触发 <code>drop</code> 事件。</li></ul><pre><code>&lt;style&gt;  .drag &#123; width: 100px; height: 100px; background-color: khaki;  &#125;  .target &#123; width: 200px; height: 100px; border: 2px dashed #ddd; position: absolute; top: 10px; left: 300px;  &#125;  textarea &#123; width: 200px; height: 100px; position: absolute; left: 300px; top: 150px;  &#125;&lt;/style&gt;&lt;img src=&quot;https://www.arryblog.com/logo.png&quot; width=&quot;100&quot; /&gt;我是一段文字&lt;a href=&quot;www.baidu.com&quot;&gt;百度&lt;/a&gt;&lt;div class=&quot;drag&quot; draggable=&quot;true&quot;&gt;&lt;/div&gt;&lt;textarea name=&quot;&quot; id=&quot;text&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;&lt;!--普通元素框  --&gt;&lt;div class=&quot;target&quot;&gt;&lt;/div&gt;&lt;script&gt;  var drag = document.querySelector(&quot;.drag&quot;);  var text = document.getElementById(&quot;text&quot;);  var target = document.querySelector(&quot;.target&quot;);</code></pre></blockquote><p>  text.ondrop &#x3D; function () {<br> console.log(“text - drop”);<br>  };<br>  target.ondrop &#x3D; function () {<br> console.log(“target - drop “);<br>  };</p><blockquote><p></script></p><pre><code></code></pre></blockquote></li><li><p>如何使放置元素触发 <code>drop</code> 事件</p><blockquote><ul><li>如果被拖拽元素在进入放置（目标）元素时，其<strong>鼠标状态</strong>显示禁止，则表示禁止该行为，在鼠标松开时，不会触发<code>drop</code>事件。</li><li>因为默认情况，元素是不允许放置的，要使目标元素能够接收到<code>drop</code>事件，需要使目标元素在<code>dragenter</code>和<code>dragover</code>事件中<strong>阻止默认行为</strong>。<blockquote><p>一般只需要在<code>dragover</code>事件中<strong>阻止默认行为</strong>就可以了</p></blockquote></li></ul></blockquote></li></ol><blockquote><pre><code>  //要使放置元素的drop事件能触发，需要在dragover中禁止其默认行为 target.ondragover = function (e) &#123;   e.preventDefault(); &#125;; target.ondragenter = function (e) &#123;   e.preventDefault(); &#125;; target.ondrop = function () &#123;   console.log(&quot;target - drop &quot;); &#125;;</code></pre></blockquote><ol start="6"><li>drop 事件兼容问题<blockquote><p>在 Firefox 浏览器中，drop 放置事件的默认行为如下：</p><ul><li>如果拖动元素是<strong>链接</strong>，则在放置（目标）元素上松开鼠标时，会导航到对应页面</li><li>如果拖动元素是<strong>图片</strong>，则在放置（目标）元素上松开鼠标时，会导航到图片文件</li><li>如果拖动元素是文本，会导致无效的 <code>URL</code> 错误（或默认开启百度搜索）<blockquote><p>所以如果拖动元素为以上三者，我们需要在 <code>drop</code> 放置事件中，<strong>阻止其默认行为和事件冒泡</strong></p></blockquote></li></ul><pre><code>e.preventDefault(); // 阻止默认行为e.stopPropagation(); // 阻止事件冒泡</code></pre></blockquote></li></ol><blockquote><pre><code>&lt;style&gt;  .drag &#123;    width: 100px;    height: 100px;    background-color: khaki;  &#125;  .target &#123;    width: 200px;    height: 200px;    border: 2px dashed #ddd;    position: absolute;    top: 10px;    left: 220px;  &#125;&lt;/style&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;我是大美人&lt;/a&gt;&lt;br /&gt;&lt;img src=&quot;https://www.arryblog.com/logo.png&quot; alt=&quot;&quot; width=&quot;100&quot; /&gt;&lt;br /&gt;我只是个文字&lt;div class=&quot;drag&quot; draggable=&quot;true&quot;&gt;&lt;/div&gt;&lt;div class=&quot;target&quot;&gt;&lt;/div&gt;&lt;script&gt;  var drag = document.querySelector(&quot;.drag&quot;);  var target = document.querySelector(&quot;.target&quot;);  // 要使放置元素的drop事件能触发，需要在dragover中禁止其默认行为  target.ondragover = function (e) &#123;    e.preventDefault();  &#125;;  // 放置元素绑定drop事件</code></pre></blockquote><p>  target.ondrop &#x3D; function (e) {<br>    console.log(“drop”);<br>    e.preventDefault(); &#x2F;&#x2F; 阻止默认行为<br>    e.stopPropagation(); &#x2F;&#x2F; 阻止事件冒泡<br>  };</p><blockquote><p></script></p><pre><code></code></pre></blockquote><h4 id="DataTransfer-对象"><a href="#DataTransfer-对象" class="headerlink" title="DataTransfer 对象"></a>DataTransfer 对象</h4><blockquote><ul><li>在事件对象<code>e</code>上有一个<code>dataTransfer</code>属性，这个属性是一个<code>DataTransfer</code>对象</li><li><code>e.dataTransfer</code> 对象用于保存拖放<code>（drag and drop）</code>过程中的拖拽数据，可以保存一项或多项数据，这些数据项可以是一种或者多种数据类型。</li><li><code>e.dataTransfer</code> 对象提供了相关的属性和方法实现拖放功能<blockquote><p>具体如下：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>dropEffect</td><td>可以告诉浏览器目标元素<strong>允许哪种放置行为</strong>， 同时会影响<strong>鼠标的样式</strong></td></tr><tr><td>effectAllowed</td><td>表示对被拖动元素<strong>是否允许</strong><code>dropEffect</code> 中设置的行为，同时会影响<strong>鼠标的样式</strong></td></tr></tbody></table></blockquote></li></ul></blockquote><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>setDragImage</td><td>可以自定义一处图片元素来设置拖放图片</td></tr><tr><td>setData</td><td>方法用来设置拖放操作的<code>drag data</code>到指定的数据和类型</td></tr><tr><td>getData</td><td>方法接受指定类型的拖放(以<code>DOMString</code>的形式)数据。如果拖放行为没有操作任何数据，会返回一个空字符串</td></tr><tr><td>clearData()</td><td>删除与给定类型关联的数据,如果类型为空或未指定，则删除与所有类型关联的数据</td></tr></tbody></table><ol><li>dropEffect 属性<blockquote><ul><li><code>dropEffect</code>属性：可以告诉浏览器目标元素允许哪种放置行为，比如：复制、移动、导航等，这些只是<strong>表面形态</strong>；但具体行为的动作还需要开发者自己代码实现。</li><li>当拖动元素在目标元素上放置时，只有<code>dropEffect</code><strong>允许的行为</strong>，才会触发 drop 事件(none不会触发drop事件)</li><li>dropEffect 属性值，还会影响拖拽过程中光标的手势，这个手势；可能会预示了将要发生什么样的操作，但仅是视觉上的反馈。<blockquote><p>这个属性有以下 4 种可能值</p></blockquote></li></ul></blockquote></li></ol><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>none</td><td>被拖动元素<strong>不允许</strong>被放置在目标元素，鼠标样式是禁止状态</td></tr><tr><td>move</td><td>被拖动元素应该移动到放置的目标元素中，但必需满足 <code>dropEffect</code> 的行为是<code>effectAllowed</code>允许的行为</td></tr><tr><td>copy</td><td>被拖动元素应该复制到放置目标元素中，但必需满足 <code>dropEffect</code>的行为是<code>effectAllowed</code>允许的行为</td></tr><tr><td>link</td><td>放置目标会导航到被拖动元素（仅限它是<code>URL</code>情况）</td></tr></tbody></table><blockquote><blockquote><p>注意事项</p></blockquote><ul><li>对于<code>dragenter</code>和<code>dragover</code>事件，<code>dropEffect</code> 会根据用户的请求的行为进行<strong>初始化</strong>。具体如何初始化和浏览器平台有关。（即<strong>没有</strong>设置 <code>dropEffect</code> 属性值时，浏览器会自动为其赋值）</li><li>我们期望得到一个指定的行为而不是用户的请求行为时，可以通过 <code>dragenter</code> 和 <code>dragover</code> 事件处理中修改 <code>dropEffect</code>的值。</li></ul></blockquote><blockquote><pre><code>&lt;style&gt;  .drag &#123;    width: 100px;    height: 100px;    background-color: khaki;  &#125;  .target &#123;    width: 200px;    height: 200px;    border: 2px dashed #ddd;    position: absolute;    top: 10px;    left: 220px;  &#125;&lt;/style&gt;&lt;div class=&quot;drag&quot; draggable=&quot;true&quot;&gt;&lt;/div&gt;&lt;div class=&quot;target&quot;&gt;&lt;/div&gt;&lt;script&gt;  var drag = document.querySelector(&quot;.drag&quot;); // 被拖动元素  var target = document.querySelector(&quot;.target&quot;); // 目标放置元素</code></pre></blockquote><p>  &#x2F;&#x2F; 拖动元素进入目标元素那一刻<br>  target.ondragenter &#x3D; function (e) {<br>    &#x2F;&#x2F; 阻止默认行为，元素才能被放置，才有可能触发drop事件<br>    e.preventDefault();<br>    &#x2F;&#x2F; move 允许被拖动元素移动到目标元素上 , 同时光标也会变化<br>    e.dataTransfer.dropEffect &#x3D; “move”;<br>  };</p><blockquote></blockquote><p>  target.ondragover &#x3D; function (e) {<br>    &#x2F;&#x2F; 阻止默认行为，元素才能被放置，才有可能触发drop事件<br>    e.preventDefault();<br>    &#x2F;&#x2F; move 允许被拖动元素移动到目标元素上 , 同时光标也会变化<br>    e.dataTransfer.dropEffect &#x3D; “move”;<br>    &#x2F;&#x2F; 被动元素不允许放在这里，不会触发drop事件，光标为禁止样式<br>    &#x2F;&#x2F; e.dataTransfer.dropEffect &#x3D; “none”;<br>  };</p><blockquote></blockquote><p>  target.ondrop &#x3D; function () {<br>    console.log(“drop”);<br>  };</p><blockquote><p></script></p><pre><code></code></pre></blockquote><ol start="2"><li>effectAllowed 属性<blockquote><p><code>effectAllowed</code>属性：表示<strong>被拖动元素</strong>是否允许 <code>dropEffect</code>中设置的行为</p></blockquote></li></ol><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>none</td><td>不允许<code>dropEffect</code>的任何行为</td></tr><tr><td>copy</td><td>只允许”copy”这种<code>dropEffect</code>行为</td></tr><tr><td>link</td><td>只允许”link”这种<code>dropEffect</code>行为</td></tr><tr><td>move</td><td>只允许”move”这种<code>dropEffect</code>行为</td></tr><tr><td>copyLink</td><td>允许”copy” 和 “link”两种<code>dropEffect</code>行为,显示的是copy样式</td></tr><tr><td>copyMove</td><td>允许”copy” 和 “move”两种<code>dropEffect</code>行为,显示的是move样式</td></tr><tr><td>linkMove</td><td>允许”link” 和 “move”两种<code>dropEffect</code>行为,显示的是move样式</td></tr><tr><td>all</td><td>允许所有<code>dropEffect</code>行为,显示的是copy样式</td></tr><tr><td>uninitialized</td><td>效果没有设置时的默认值，则等同于all,显示的是copy样式</td></tr></tbody></table><blockquote><blockquote><p>注意事项</p></blockquote><ul><li>应该在<code>dragstart</code>事件处理函数中设置<code>effectAllowed</code>的属性值，以便为拖动元素设置所需的拖动效果（鼠标样式）</li><li>要看到不同属性值对应的鼠标样式，还需要在<code>document.ondragover</code>事件中，取消默认行为。</li><li>因为默认情况下，元素是不允许被放置的，所以在拖动元素时，事件会冒泡到<code>document</code>的<code>ondragover</code>事件中，鼠标样式为禁用。（整个拖动过程中<code>document</code>默认都是被放置元素）</li><li>如果<code>effectAllowed</code>的值，不是在<code>dropEffect</code>允许的范围，则不会触发<code>drop</code>事件；同时拖动元素进入目标元素时，鼠标样式为<strong>禁止样式</strong></li><li>在进入目标元素前，鼠标为<code>effectAllowed</code>设置的样式，进入后，鼠标为<code>dropEffect</code>设置的样式&#x2F;禁止样式</li></ul><pre><code>&lt;style&gt;  .drag &#123;    width: 100px;    height: 100px;    background-color: khaki;  &#125;  .target &#123;    width: 200px;    height: 200px;    border: 2px dashed #ddd;    position: absolute;    left: 200px;    top: 10px;  &#125;&lt;/style&gt;&lt;div class=&quot;drag&quot; draggable=&quot;true&quot;&gt;&lt;/div&gt;&lt;div class=&quot;target&quot;&gt;&lt;/div&gt;&lt;script&gt;  var drag = document.querySelector(&quot;.drag&quot;);  var target = document.querySelector(&quot;.target&quot;);  drag.ondragstart = function (e) &#123;    // 设置被拖动元素允许的 dropEffect行为    e.dataTransfer.effectAllowed = &quot;linkMove&quot;;  &#125;;  document.ondragover = function (e) &#123;    // 禁止默认行为,才能看到拖动元素的光标样式与effectAllowed的值对应    e.preventDefault();  &#125;;  target.ondragover = function (e) &#123;    //阻止默认行为，target元素才能允许被放置    e.preventDefault();    // 如果EffectAllowed的值不是在 dropEffect允许内，不会触发drop事件，同时光标为禁止    e.dataTransfer.dropEffect = &quot;link&quot;;  &#125;;  target.ondrop = function (e) &#123;    console.log(&quot;drop&quot;);  &#125;;&lt;/script&gt;</code></pre></blockquote><ol start="4"><li>setData 、getData 方法<table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>setData</td><td>方法用来设置拖放操作的<code>drag data</code>到指定的数据和类型</td></tr><tr><td>getData</td><td>方法读取指定类型的拖放(以<code>DOMString</code>的形式)数据。如果拖放行为没有操作任何数据，会返回一个空字符串</td></tr></tbody></table></li></ol><blockquote><p>语法</p><pre><code>e.dataTransfer.setData(format, data); // 保存数据e.dataTransfer.getData(format); // 取出数据</code></pre><ul><li><code>data</code>表示要存入的数据</li><li><code>format</code>表示存入的数据类型，常见的支持类型如下：<blockquote><p>推荐的拖动数据类型参考官网链接地址：<code>https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types</code></p></blockquote></li></ul></blockquote><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>text&#x2F;plain 支持简写：text</td><td>文本类型（string）</td></tr><tr><td>text&#x2F;html</td><td>HTML文字</td></tr><tr><td>text&#x2F;xml</td><td>XML文字</td></tr><tr><td>text&#x2F;uri-list支持简写： url</td><td>链接</td></tr><tr><td>application&#x2F;x-moz-file</td><td>文件</td></tr></tbody></table><blockquote><blockquote><p>注意事项</p></blockquote><ul><li>一般都会在<code>dragstart</code>事件中，利用<code>e.dataTransfer.setData()</code>保存数据,可以存储一项或多项</li><li>存储在<code>dataTransfer</code>对象中的数据只能在<code>drop</code>放置事件中读取。</li><li>如果没有在<code>drop</code>事件处理函数中取得这些数据，随后 <code>dataTransfer</code>对象被销毁，数据也就丢失了。</li></ul></blockquote><blockquote><pre><code>&lt;style&gt;  .drag &#123;    width: 100px;    height: 100px;    background-color: khaki;  &#125;  .target &#123;    width: 200px;    height: 200px;    border: 2px dashed #ddd;    position: absolute;    left: 200px;    top: 10px;  &#125;&lt;/style&gt;&lt;div class=&quot;drag&quot; draggable=&quot;true&quot; id=&quot;J_drag&quot;&gt;&lt;/div&gt;&lt;div class=&quot;target&quot;&gt;&lt;/div&gt;&lt;script&gt;  var drag = document.querySelector(&quot;.drag&quot;);  var target = document.querySelector(&quot;.target&quot;);  drag.ondragstart = function (e) &#123;    e.dataTransfer.setData(&quot;text&quot;, e.target.id);    // 下面这种情况保存id，在获取时得到的数据为空，因为他会把后面数据当链接处理    // e.dataTransfer.setData(&quot;url&quot;, e.target.id);    this.style.opacity = &quot;0.3&quot;;  &#125;;</code></pre></blockquote><p>  target.ondragover &#x3D; function (e) {<br>    &#x2F;&#x2F;允许放置行为<br>    e.preventDefault();<br>  };</p><blockquote></blockquote><p>  target.ondrop &#x3D; function (e) {<br>    var id &#x3D; e.dataTransfer.getData(“text”);<br>    &#x2F;&#x2F; var id &#x3D; e.dataTransfer.getData(“url”);<br>    &#x2F;&#x2F; console.log(id);<br>    var dragElement &#x3D; document.getElementById(id);<br>    target.appendChild(dragElement);<br>    drag.style.opacity &#x3D; “1”;<br>  };</p><blockquote><p></script></p><pre><code></code></pre></blockquote><ol start="5"><li><p>clearData</p><blockquote><ul><li><code>clearData()</code>方法删除给定类型的拖动操作的<code>drag data</code>，如果给定类型的数据不存在，则此方法不执行任何操作</li><li>如果不带参数，默认清空所有setData方式添加的数据</li></ul><pre><code>// 清空对应类型数据  如果不带参数，默认清空所有setData方式添加的数据e.dataTransfer.clearData([format]);</code></pre></blockquote></li><li><p>setDragImage</p><blockquote><ul><li><code>setDragImage</code>可以自定义一个<code>img</code>类型，用来设置拖放过程中的鼠标下面的图标</li><li>在<code>dragstart</code>里创建图片元素</li></ul><pre><code>setDragImage(element, x, y);</code></pre><ul><li><code>element</code>拖拽时鼠标下面的图片，必需是一个元素节点</li><li>x表示：图标距离鼠标指针的 x 轴方向的偏移量</li><li>y表示：图标距离鼠标指针 y 轴方向的偏移量</li></ul><pre><code>&lt;div class=&quot;drag&quot; draggable=&quot;true&quot; id=&quot;J_drag&quot;&gt;&lt;/div&gt;&lt;div class=&quot;target&quot;&gt;&lt;/div&gt;&lt;script&gt;  var drag = document.querySelector(&quot;.drag&quot;);  var target = document.querySelector(&quot;.target&quot;);</code></pre></blockquote><p>  drag.ondragstart &#x3D; function (e) {<br> &#x2F;&#x2F;创建图片元素<br> var img &#x3D; document.createElement(“img”);<br> img.src &#x3D; “..&#x2F;src&#x2F;skin&#x2F;min1.jpg”;<br> e.dataTransfer.setDragImage(img, 100, 100); &#x2F;&#x2F; 设置自定义图拖拽图像<br>  };</p><blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ol><h3 id="四、HTML5-拖拽综合应用案例"><a href="#四、HTML5-拖拽综合应用案例" class="headerlink" title="四、HTML5 拖拽综合应用案例"></a>四、HTML5 拖拽综合应用案例</h3><blockquote><p>结合本章节所学内容进行综合实践应用。</p></blockquote><ol><li>双向拖拽添加内容<blockquote><p>涉及知识点</p><ul><li>事件委托</li><li>拖拽事件（dragstart、dragend、dragover、drop）</li></ul></blockquote></li></ol><ul><li>CSS布局<blockquote><pre><code>&lt;style&gt;html,body,ul,li &#123;  margin: 0;  padding: 0;&#125;li &#123;  list-style: none;&#125;.container &#123;  display: flex;  justify-content: space-around;  width: 600px;  margin: 50px;&#125;.container h3 &#123;  text-align: center;&#125;.drag-wrap,.target-wrap &#123;  width: 200px;  height: 280px;&#125;.drag-wrap &#123;  border: 1px solid #ddd;&#125;.target-wrap &#123;  border: 2px dashed #ddd;&#125;.drag-wrap li,.target-wrap li &#123;  height: 40px;  margin: 5px;  color: #fff;  text-align: center;  font-size: 20px;  line-height: 40px;  cursor: pointer;&#125;.drag-wrap li:hover,.target-wrap li:hover &#123;  background-color: khaki;&#125;.drag-wrap li &#123;  background-color: #ddd;&#125;.target-wrap li &#123;  background-color: lightcoral;&#125;&lt;/style&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;select-fruit&quot;&gt;   &lt;h3&gt;选择你喜欢的水果&lt;/h3&gt;   &lt;ul class=&quot;drag-wrap&quot;&gt;     &lt;li class=&quot;drag-item&quot; draggable=&quot;true&quot;&gt;苹果&lt;/li&gt;</code></pre></blockquote></li></ul><blockquote><pre><code> &lt;li class=&quot;drag-item&quot; draggable=&quot;true&quot;&gt;梨子&lt;/li&gt; &lt;li class=&quot;drag-item&quot; draggable=&quot;true&quot;&gt;水蜜桃&lt;/li&gt; &lt;li class=&quot;drag-item&quot; draggable=&quot;true&quot;&gt;荔枝&lt;/li&gt; &lt;li class=&quot;drag-item&quot; draggable=&quot;true&quot;&gt;葡萄&lt;/li&gt; &lt;li class=&quot;drag-item&quot; draggable=&quot;true&quot;&gt;香蕉&lt;/li&gt;</code></pre>   </ul> </div> <div class="like-fruit">   <h3>你最喜欢的水果是</h3>   <ul class="target-wrap"></ul> </div></div>```</blockquote><ul><li>JS实现<blockquote><ul><li>在这个案例中，拖动元素的容器本身也是放置目标元素。</li><li>放置目标元素中的子元素，本身也是被拖动的元素。</li><li>所有拖动元素要处理的事情，全部委托给他到们的父容器来处理。</li><li>声明一个元素来记录当前被拖动的元素，放置到目标区域时，将该元素插入页面中</li></ul><pre><code>&lt;script&gt;var dragWrap = document.querySelector(&quot;.drag-wrap&quot;);var targetWrap = document.querySelector(&quot;.target-wrap&quot;);var dragElement = null; //记录当前被拖动的元素//从左往右：//拖拽元素dragWrap.ondragstart = dragStartHandle;dragWrap.ondragend = dragEndHandle;//放置元素targetWrap.ondragover = dragOver;targetWrap.ondrop = dropHandle;//从右往左：//拖拽元素targetWrap.ondragstart = dragStartHandle;targetWrap.ondragend = dragEndHandle;//放置元素dragWrap.ondragover = dragOver;dragWrap.ondrop = dropHandle;</code></pre></blockquote>&#x2F;&#x2F;处理拖拽元素<br>function dragStartHandle(e) {<br>  var target &#x3D; e.target;<br>  target.style.opacity &#x3D; “0.5”;<br>  dragElement &#x3D; target;<br>  e.dataTransfer.effctAllowed &#x3D; “move”;<br>}<br>function dragEndHandle(e) {<br>  var target &#x3D; e.target;<br>  target.style.opacity &#x3D; “1”; &#x2F;&#x2F;恢复透明度<br>}<br>&#x2F;&#x2F;处理放置元素<br>function dragOver(e) {<br>  e.preventDefault(); &#x2F;&#x2F;禁止默认行为<br>  e.dataTransfer.dropEffect &#x3D; “move”;<br>}<br>function dropHandle(e) {<br>  this.appendChild(dragElement);<br>  dragElement.style.opacity &#x3D; “1”; &#x2F;&#x2F;恢复透明度<br>}<br>document.ondragover &#x3D; function (e) {<br>  e.preventDefault();<br>};<blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul><ol start="2"><li>页面中随意拖拽<blockquote><ul><li>获取拖动前，元素的<code>offsetLeft</code>、<code>offsetTop</code></li><li>获取被拖动那一刻<code>dragstart</code>，鼠标的位置<code>_clientX</code>、<code>_clientY</code></li><li>获取被拖动时，鼠标的位置<code>clientX</code>、<code>clientY</code></li><li>元素的<code>left</code>&#x3D;<code>clientX-_clientX+offsetLeft</code></li><li>元素的<code>top</code>&#x3D;<code>clientY-_clientY+offsetTop</code><blockquote><p>注意：</p></blockquote></li><li>当放置元素没有触发drop事件时，元素被拖拽后会迅速回到原位置</li><li>松开元素后，鼠标的位置<code>clientX</code>、<code>clientY</code>变成0；由于公式控制了元素的<code>left</code>、<code>top</code>，所以回不到原来的位置</li><li>因此，必须在放置元素的<code>dragover</code>事件中阻止默认行为。</li></ul></blockquote></li></ol><blockquote><pre><code>&lt;style&gt;  html,  body &#123;    margin: 0;    padding: 0;  &#125;  .box &#123;    position: absolute;    left: 100px;    top: 100px;    width: 200px;    height: 200px;    background-color: khaki;  &#125;&lt;/style&gt;&lt;div class=&quot;box&quot; draggable=&quot;true&quot;&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  document.ondragover = function (e) &#123;    e.preventDefault();  &#125;;  var offsetLeft;  var offsetTop;  var _clientX;  var _clientY;</code></pre></blockquote><p>  box.ondragstart &#x3D; function (e) {<br>    _clientX &#x3D; e.clientX;<br>    _clientY &#x3D; e.clientY;<br>    offsetLeft &#x3D; this.offsetLeft;<br>    offsetTop &#x3D; this.offsetTop;<br>  }; &#x2F;&#x2F;213 171 100 100<br>  box.ondrag &#x3D; function (e) {<br>    var clientX &#x3D; e.clientX;<br>    var clientY &#x3D; e.clientY;<br>    var left &#x3D; clientX - _clientX + offsetLeft;<br>    var top &#x3D; clientY - _clientY + offsetTop;<br>    this.style.left &#x3D; left + “px”;<br>    this.style.top &#x3D; top + “px”;<br>  };</p><blockquote><p></script></p><pre><code></code></pre></blockquote><ol start="3"><li>拖拽排序<blockquote><p>核心知识</p><ul><li>拖拽相关事件</li><li>占位思想</li><li>找出相邻兄弟中离自己最近的元素</li><li>insertAdjacentElement 方法</li><li>prepend 方法</li></ul></blockquote></li></ol><ul><li><p>CSS布局</p><blockquote><pre><code>&lt;style&gt;html,body,ul,li &#123;  margin: 0;  padding: 0;&#125;li &#123;  list-style: none;&#125;.drag-wrap &#123;  position: relative;  width: 200px;  height: 280px;  padding: 10px;  margin: 50px;  border: 1px solid #ddd;&#125;.drag-wrap .drag-item &#123;  width: 200px;  height: 50px;  background-color: #ddd;  margin: 5px auto;  text-align: center;  line-height: 50px;  cursor: pointer;&#125;.drag-wrap .draging &#123;  background-color: khaki;&#125;.stand &#123;  width: 200px;  height: 50px;  margin: 5px auto;&#125;&lt;/style&gt;&lt;ul class=&quot;drag-wrap&quot;&gt; &lt;li class=&quot;drag-item&quot; draggable=&quot;true&quot;&gt;苹果&lt;/li&gt; &lt;li class=&quot;drag-item&quot; draggable=&quot;true&quot;&gt;香蕉&lt;/li&gt; &lt;li class=&quot;drag-item&quot; draggable=&quot;true&quot;&gt;梨子&lt;/li&gt; &lt;li class=&quot;drag-item&quot; draggable=&quot;true&quot;&gt;葡萄&lt;/li&gt; &lt;li class=&quot;drag-item&quot; draggable=&quot;true&quot;&gt;火龙果&lt;/li&gt;&lt;/ul&gt;</code></pre></blockquote></li><li><p>JS 实现原理<br><strong>第一步：实现鼠标按下开始拖动时要处理的事情</strong></p><blockquote><ul><li>1、为了后面 drag 事件中能获取到当前拖动的元素，还需要<strong>把拖动元素保存到全局变量</strong>中</li><li>2、把拖动元素的<strong>背景色</strong>设置为黄色</li><li>3、同时把拖动元素设置为<strong>绝对定位</strong>元素，设置好初始 left 和 top 值，同时把 margin 值为 0</li><li>4、<strong>创建一个 div 元素</strong>，作为占位元素，其宽、高、margin 和被拖动元素一样，然后把创建好的空元素插入当前元素前面。</li><li>5、为了后面拖动元素，还需要在此记录鼠标按下时<strong>与浏览器左边和上边的距离</strong>。<blockquote><p>以上拖动元素需要处理的事情，全委托给他们的父元素来处理。</p></blockquote></li></ul><pre><code>var dragWrap = document.querySelector(&quot;.drag-wrap&quot;);var standElement = null;var dragElement = null;var dragLeft;var dragTop;var pageX;var pageY;</code></pre></blockquote><p>&#x2F;&#x2F;刚开始拖动时，需要处理的事件<br>dragWrap.ondragstart &#x3D; function (e) {<br>  var target &#x3D; e.target;<br>  &#x2F;&#x2F;1.元素背景变色<br>  target.classList.add(“draging”);<br>  &#x2F;&#x2F;2.把拖拽元素设置成为绝对定位元素，设置left、top、margin<br>  dragLeft &#x3D; target.offsetLeft;<br>  dragTop &#x3D; target.offsetTop;<br>  dragElement &#x3D; target;<br>  target.style.display &#x3D; “none”;<br>  target.style.position &#x3D; “absolute”;<br>  target.style.left &#x3D; dragLeft + “px”;<br>  target.style.top &#x3D; dragTop + “px”;<br>  target.style.margin &#x3D; “0 auto”;<br>  target.style.display &#x3D; “block”;<br>  &#x2F;&#x2F;3.创建站位元素<br>  standElement &#x3D; document.createElement(“div”);<br>  standElement.classList.add(“stand”);<br>  this.insertBefore(standElement, target);</p><blockquote></blockquote><p>  pageX &#x3D; e.pageX;<br>  pageY &#x3D; e.pageY;<br>};</p><blockquote><pre><code></code></pre></blockquote></li></ul><p><strong>第二步：拖动过程中要处理的事情</strong></p><blockquote><ul><li>元素能正常随着鼠标<strong>拖动</strong>，动态改变<code>left</code>、和<code>top</code></li><li>找到与当前拖动元素同时满足以下条件的<strong>兄弟元素</strong>（兄弟元素不包含占位元素）<ul><li>拖动元素底部与浏览器的距离 &gt;&#x3D; 兄弟元素垂直中心点与浏览器顶部的距离</li></ul></li><li>封装一个函数来实现，如果有对应的兄弟元素就将元素返回，没有就返回 <code>null</code></li><li>如果有满足条件的兄弟元素，就将兄弟元素的<strong>背景色变为红色</strong>，同时将占位符<strong>插入</strong>当前兄弟元素的后面。</li><li>如果没有满足条件的兄弟元素，说明当前拖动元素在第一个子元素的前面，此时可以将占位元素插入到父元素的第一个子元素的前面。目的是在与最前面一个元素交换时，能将它挤到第二个<ul><li>将新节点插入到参考节点后面：<code>referenceNode.insertAdjacentElement(&quot;afterend&quot;, neNode);</code></li><li>将节点插入到父节点的最前面：<code>父节点.prepend(child)</code></li></ul></li></ul><pre><code>//元素被拖动过程中，应处理的事dragWrap.ondrag = function (e) &#123;  var _pageX = e.pageX;  var _pageY = e.pageY;  //改变元素的位置，动态赋值  var left = _pageX - pageX + dragLeft;  var top = _pageY - pageY + dragTop;  dragElement.style.left = left + &quot;px&quot;;  dragElement.style.top = top + &quot;px&quot;;  //找到符合要求的兄弟元素，  //改变它的背景色，并将占位元素插入当前兄弟元素的后面。  var nearSibling = findSibling(dragElement);  //如果nearSibling=null,说明当前拖动元素在第一个子元素的最前面  if (!nearSibling) &#123;    // 将占位元素插入到父元素的第一个子元素的前面    dragWrap.prepend(standElement);  &#125;  //如果存在最近的兄弟元素  if (nearSibling) &#123;    //将前一个颜色恢复    prevNearSibling &amp;&amp; (prevNearSibling.style.backgroundColor = &quot;&quot;);    //改变它的背景色    nearSibling.style.backgroundColor = &quot;red&quot;;    prevNearSibling = nearSibling;    //将占位元素插入到兄弟元素的后面    nearSibling.insertAdjacentElement(&quot;afterend&quot;, standElement);  &#125;&#125;;</code></pre></blockquote><p>&#x2F;&#x2F;函数：找到符合要求的兄弟元素<br>function findSibling(dragEle) {<br>  &#x2F;&#x2F;条件:1.不包含占位元素<br>  &#x2F;&#x2F;2.拖动元素底部与浏览器的距离&gt;&#x3D; 兄弟元素垂直中心点与浏览器顶部的距离<br>  &#x2F;&#x2F;获取拖拽元素到浏览器顶部的距离<br>  var rect &#x3D; dragEle.getBoundingClientRect();<br>  var rectBottom &#x3D; rect.bottom;<br>  &#x2F;&#x2F; 获取拖动元素的所有兄弟元素<br>  var siBlings &#x3D; dragEle.parentNode.children;<br>  &#x2F;&#x2F;将类数组转成数组<br>  siBlings &#x3D; Array.prototype.slice.call(siBlings, 0);<br>  &#x2F;&#x2F;首先过滤掉占位元素<br>  siBlings &#x3D; siBlings.filter(function (item) {<br>    return item !&#x3D;&#x3D; standElement;<br>  });<br>  var result &#x3D; null; &#x2F;&#x2F;用来保存找到了满足条件兄弟元素<br>  for (var i &#x3D; 0; i &lt; siBlings.length; i++) {<br>    &#x2F;&#x2F;排除自身<br>    if (siBlings[i] &#x3D;&#x3D;&#x3D; dragEle) continue; &#x2F;&#x2F;跳过当次<br>    var rect1 &#x3D; siBlings[i].getBoundingClientRect();<br>    &#x2F;&#x2F; 获取每个元素中心与浏览器顶部的距离<br>    var center &#x3D; rect1.y + siBlings[i].offsetHeight &#x2F; 2;<br>    &#x2F;&#x2F; 找到离自己最近的满足 rectBottom&gt;center的兄弟元素<br>    if (rectBottom &gt; center) {<br>      result &#x3D; siBlings[i];<br>    } else {<br>      return result;<br>    }<br>  }<br>  return result;<br>}</p><blockquote><pre><code></code></pre></blockquote><blockquote><blockquote><p>注意：</p></blockquote><ul><li>整个<code>drag</code>操作过程的样式要生效，必需要设置父容器为允许放置行为，即在<code>dragover</code>中取消默认行为</li></ul><pre><code>dragWrap.ondragover = function (e) &#123;  e.preventDefault();&#125;;</code></pre></blockquote><p><strong>第三步：拖动结束要处理的事情</strong></p><blockquote><ul><li>拖动元素的背景色还原</li><li>拖动元素要取消定位，同时恢复 margin 值</li><li>将拖动元素放入占位元素所在位置（前或后）</li><li>将占位元素从页面中移除</li><li>如果存在前一个背景变红的兄弟元素，将红色背景去掉，使页面最后无红色背景元素</li></ul><pre><code> //拖拽结束时，应该处理的事 dragWrap.ondragend = function (e) &#123;   var target = e.target;   //1.拖拽元素恢复颜色   target.classList.remove(&quot;draging&quot;);   //2.把拖动的元素还原，去掉绝对定位和margin   target.style.position = &quot;&quot;;   target.style.margin = &quot;5px auto&quot;;   //3.将拖动元素放入占位元素所在位置（前或后）   this.insertBefore(dragElement, standElement);   //4.删除站位节点   this.removeChild(standElement);   //如果存在前一个背景变红的兄弟元素，将红色背景去掉   prevNearSibling &amp;&amp; (prevNearSibling.style.backgroundColor = &quot;&quot;); &#125;;</code></pre></blockquote><p><strong>完整源码</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">var</span> dragWrap <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".drag-wrap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> dragLeft<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录被拖动元素的初始left值</span>  <span class="token keyword">var</span> dragTop<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录被拖动元素的初始top值</span>  <span class="token keyword">var</span> pageX<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录拖动元素开始拖动时，鼠标与浏览器的水平距离</span>  <span class="token keyword">var</span> pageY<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录拖动元素开始拖动时，鼠标与浏览器的垂直距离</span>  <span class="token keyword">var</span> standElement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用来保存占位元素</span>  <span class="token keyword">var</span> dragElement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录被拖动的元素</span>  <span class="token keyword">var</span> prevNearSibling <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存前一个最近的兄弟元素</span></code></pre></blockquote><p>  &#x2F;&#x2F;刚开始拖动时，需要处理的事件<br>  dragWrap.ondragstart &#x3D; function (e) {<br>    var target &#x3D; e.target;<br>    dragElement &#x3D; target; &#x2F;&#x2F;记录被拖动的元素<br>    &#x2F;&#x2F;1.元素背景变色<br>    target.classList.add(“draging”);<br>    &#x2F;&#x2F;2.把拖拽元素设置成为绝对定位元素，设置left、top、margin<br>    dragLeft &#x3D; target.offsetLeft;<br>    dragTop &#x3D; target.offsetTop;<br>    target.style.display &#x3D; “none”;<br>    target.style.position &#x3D; “absolute”;<br>    target.style.left &#x3D; dragLeft + “px”;<br>    target.style.top &#x3D; dragTop + “px”;<br>    target.style.margin &#x3D; “0 auto”;<br>    target.style.display &#x3D; “block”;<br>    &#x2F;&#x2F;3.创建站位元素,将其插入当前拖动元素的后面<br>    standElement &#x3D; document.createElement(“div”);<br>    standElement.classList.add(“stand”);<br>    dragElement.insertAdjacentElement(“afterend”, standElement);<br>    &#x2F;&#x2F;4.记录鼠标按下开始拖动时，鼠标与浏览器左边和顶部的距离<br>    pageX &#x3D; e.pageX;<br>    pageY &#x3D; e.pageY;<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F;元素被拖动过程中，应处理的事<br>  dragWrap.ondrag &#x3D; function (e) {<br>    &#x2F;&#x2F; 获取鼠标与浏览器左边和上边距离<br>    var _pageX &#x3D; e.pageX;<br>    var _pageY &#x3D; e.pageY;<br>    &#x2F;&#x2F;改变元素的位置，动态赋值<br>    var left &#x3D; _pageX - pageX + dragLeft;<br>    var top &#x3D; _pageY - pageY + dragTop;<br>    dragElement.style.left &#x3D; left + “px”;<br>    dragElement.style.top &#x3D; top + “px”;<br>    &#x2F;&#x2F;找到符合要求的兄弟元素，<br>    &#x2F;&#x2F;改变它的背景色，并将占位元素插入当前兄弟元素的后面。<br>    var nearSibling &#x3D; findSibling(dragElement);<br>    &#x2F;&#x2F;如果nearSibling&#x3D;null,说明当前拖动元素在第一个子元素的最前面<br>    if (!nearSibling) {<br>      &#x2F;&#x2F; 将占位元素插入到父元素的第一个子元素的前面<br>      dragWrap.prepend(standElement);<br>    }<br>    &#x2F;&#x2F;如果存在最近的兄弟元素<br>    if (nearSibling) {<br>      &#x2F;&#x2F;将前一个颜色恢复<br>      prevNearSibling &amp;&amp; (prevNearSibling.style.backgroundColor &#x3D; “”);<br>      &#x2F;&#x2F;改变它的背景色<br>      nearSibling.style.backgroundColor &#x3D; “red”;<br>      prevNearSibling &#x3D; nearSibling;<br>      &#x2F;&#x2F;将占位元素插入到兄弟元素的后面<br>      nearSibling.insertAdjacentElement(“afterend”, standElement);<br>    }<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F;拖拽结束时，应该处理的事<br>  dragWrap.ondragend &#x3D; function (e) {<br>    var target &#x3D; e.target;<br>    &#x2F;&#x2F;1.拖拽元素恢复颜色<br>    target.classList.remove(“draging”);<br>    &#x2F;&#x2F;2.把拖动的元素还原，去掉绝对定位和margin<br>    target.style.position &#x3D; “”;<br>    target.style.margin &#x3D; “5px auto”;<br>    &#x2F;&#x2F;3.将拖动元素放入占位元素所在位置（前或后）<br>    this.insertBefore(dragElement, standElement);<br>    &#x2F;&#x2F;4.删除站位节点<br>    this.removeChild(standElement);<br>    &#x2F;&#x2F;如果存在前一个背景变红的兄弟元素，将红色背景去掉<br>    prevNearSibling &amp;&amp; (prevNearSibling.style.backgroundColor &#x3D; “”);<br>  };</p><blockquote></blockquote><p>  dragWrap.ondragover &#x3D; function (e) {<br>    e.preventDefault(); &#x2F;&#x2F;允许放置<br>    e.dataTransfer.dropEffect &#x3D; “move”;<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F;找到符合要求的兄弟元素<br>  function findSibling(dragEle) {<br>    &#x2F;&#x2F;条件:1.不包含占位元素<br>    &#x2F;&#x2F;2.拖动元素底部与浏览器的距离&gt;&#x3D; 兄弟元素垂直中心点与浏览器顶部的距离<br>    &#x2F;&#x2F;获取拖拽元素到浏览器顶部的距离<br>    var rect &#x3D; dragEle.getBoundingClientRect();<br>    var rectBottom &#x3D; rect.bottom;<br>    &#x2F;&#x2F; 获取拖动元素的所有兄弟元素<br>    var siBlings &#x3D; dragEle.parentNode.children;<br>    &#x2F;&#x2F;将类数组转成数组<br>    siBlings &#x3D; Array.prototype.slice.call(siBlings, 0);<br>    &#x2F;&#x2F;首先过滤掉占位元素<br>    siBlings &#x3D; siBlings.filter(function (item) {<br>      return item !&#x3D;&#x3D; standElement;<br>    });<br>    var result &#x3D; null; &#x2F;&#x2F;用来保存找到了满足条件兄弟元素<br>    for (var i &#x3D; 0; i &lt; siBlings.length; i++) {<br>      &#x2F;&#x2F;排除自身<br>      if (siBlings[i] &#x3D;&#x3D;&#x3D; dragEle) continue; &#x2F;&#x2F;跳过当次<br>      var rect1 &#x3D; siBlings[i].getBoundingClientRect();<br>      &#x2F;&#x2F; 获取每个元素中心与浏览器顶部的距离<br>      var center &#x3D; rect1.y + siBlings[i].offsetHeight &#x2F; 2;<br>      &#x2F;&#x2F; 找到离自己最近的满足 rectBottom&gt;center的兄弟元素<br>      if (rectBottom &gt; center) {<br>        result &#x3D; siBlings[i];<br>      } else {<br>        return result;<br>      }<br>    }<br>    return result;<br>  }</p><blockquote><p></script></p><pre><code></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（十一）</title>
      <link href="/2023/12/07/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/"/>
      <url>/2023/12/07/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、定时器与延时器"><a href="#一、定时器与延时器" class="headerlink" title="一、定时器与延时器"></a>一、定时器与延时器</h3><h4 id="setInterval-与-clearInterval"><a href="#setInterval-与-clearInterval" class="headerlink" title="setInterval() 与 clearInterval()"></a>setInterval() 与 clearInterval()</h4><blockquote><ul><li><code>setInterval()</code>方法设置一个定时器，每间隔相同的一段时间，重复调用一个函数或执行一个代码片段</li><li>清除定时器：<code>clearInterval()</code> 函数可以清除一个定时器</li></ul></blockquote><blockquote><pre><code>// 基本语法var timer = setInterval(funtion, delay, arg1, arg2, arg3);</code></pre></blockquote><blockquote><ul><li>function：这个参数是一个<strong>函数</strong>，每经过指定 <code>delay</code> 毫秒后执行一次。第一次调用发生在 <code>delay</code> 毫秒之后。</li><li>delay：表示定时器延迟的时间，<strong>以毫秒为单位</strong>，1 秒等于 1000 毫秒</li><li>arg1…arg3：每次定时器到指定时间，要执行 function 函数前，这些参数会被当成 function 的参数传递给 function</li><li>timer：表示延时器的<strong>返回值</strong>，返回值是一个<strong>正整数</strong>，表示定时器的编号，这个值可以传递给<code>clearInterval()</code>来取消该定时器</li></ul></blockquote><blockquote><pre><code>&lt;button&gt;点击结束&lt;/button&gt;&lt;script&gt;  //不传参数  var timer1 = setInterval(function () &#123;    console.log(1);  &#125;, 1000);  //传参  var timer2 = setInterval(    function (a, b) &#123;        console.log(a, b);    &#125;,    1000,    5,    10  );</code></pre></blockquote><p>  &#x2F;&#x2F;具名函数也可以传入setInterval<br>  var a &#x3D; 0;<br>  function fun() {<br>    console.log(++a);<br>  }<br>  &#x2F;&#x2F; 具名函数当做第一个参数，注意：fun这里没有圆括号<br>  setInterval(fun, 1000);</p><blockquote></blockquote><p>  &#x2F;&#x2F;直接使用一段代码代替函数，类似eval,慎用<br>  var timer3 &#x3D; setInterval(“console.log(1)”, 1000);</p><blockquote></blockquote><p>  &#x2F;&#x2F;取消定时器<br>  var button &#x3D; document.querySelector(“button”);<br>  button.onclick &#x3D; function () {<br>    clearInterval(timer3);<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F;注意<br>  var a &#x3D; 0;<br>  var timer1 &#x3D; setInterval(function () {<br>    a++;<br>    console.log(a);<br>    if (a &#x3D;&#x3D;&#x3D; 3) {<br>      clearInterval(timer1);<br>    }<br>    console.log(“ss”);<br>    console.log(“aa”);<br>  }, 1000);<br>  &#x2F;&#x2F;1 ss aa<br>  &#x2F;&#x2F;2 ss aa<br>  &#x2F;&#x2F;3 ss aa</p><blockquote><p></script></p><pre><code></code></pre></blockquote><blockquote><blockquote><p>注意：</p></blockquote><ul><li>取消定时器<strong>不意味</strong>着马上停止所有行为(即打印出3就退出去)</li><li>它会把这一轮进行完(后面的”ss”、”aa”会被打印出来)</li><li>具名函数当做第一个参数时，注意：没有圆括号</li></ul></blockquote><ul><li>案例：计时器功能<blockquote><ul><li>开始按钮，暂停按钮</li><li>注意在每次点击开始后，先清除计算器，以避免定时器叠加（当我们不停点击开始按钮时，就能看到），但这不代表清零</li></ul><pre><code>&lt;button id=&quot;start&quot;&gt;开始&lt;/button&gt;&lt;div class=&quot;time&quot;&gt;&lt;/div&gt;&lt;button id=&quot;pause&quot;&gt;暂停&lt;/button&gt;&lt;script&gt;var start = document.getElementById(&quot;start&quot;);var pause = document.getElementById(&quot;pause&quot;);var time = document.querySelector(&quot;.time&quot;);var timer = null; //初始化计时器var sum = 0;start.onclick = function () &#123;  //为了防止定时器叠加，应在开始前清除计时器  clearInterval(timer);   timer = setInterval(function () &#123;    time.innerText = ++sum + &quot;秒&quot;;  &#125;, 1000);&#125;;pause.onclick = function () &#123;  clearInterval(timer);&#125;;&lt;/script&gt;</code></pre></blockquote></li></ul><h4 id="setTimeout-与-clearTimeout"><a href="#setTimeout-与-clearTimeout" class="headerlink" title="setTimeout() 与 clearTimeout()"></a>setTimeout() 与 clearTimeout()</h4><blockquote><ul><li><code>setTimeout()</code>方法设置一个延时器，该延时器在定时器到期后执行一个函数或指定的一段代码。</li><li><code>clearTimeout()</code>用来取消一个延时器<blockquote><p>注意：当指定时间到了之后，会执行函数<strong>一次</strong>，不再重复执行</p></blockquote></li><li>语法</li></ul><pre><code>// 设置一个定时器var timer = setTimeout(funtion, delay, arg1, arg2, arg3);// 清除一个定时器cleartTimeout(timer);</code></pre></blockquote><blockquote><ul><li><code>delay</code> ：表示定时器延迟的时间，以毫秒为位，1 秒等于 <code>1000</code> 毫秒</li><li><code>function</code> 这个参数是一个函数，当延时器延迟时间<code>delay</code>到期后，就会执行这个函数</li><li><code>arg1...arg3</code>等：附加参数，一旦定时器到期，它们会作为参数传递给 <code>function</code> ，<code>ie</code>不支持</li><li><code>timer</code>：表示延时器的返回值，返回值是一个正整数，表示定时器的编号，这个值可以传递给<code>clearTimeout()</code>来取消该延时器。</li></ul></blockquote><h4 id="定时器中-this-问题"><a href="#定时器中-this-问题" class="headerlink" title="定时器中 this 问题"></a>定时器中 this 问题</h4><blockquote><ul><li><code>setTimout</code>和<code>setInterval</code>函数中的第一个参数是一个函数，当定时器到时间执行这个函数</li><li>这个函数中的<code>this</code>默认指向<code>window</code>或<code>global</code>，不管在严格模式还是非严格模式下，<code>this</code>都指向<code>window</code></li></ul><pre><code>var obj = &#123;   name: &quot;张三&quot;,   sayHello: function () &#123;     console.log(this); // window     console.log(&quot;大家好，我叫&quot; + this.name);   &#125;, &#125;;</code></pre></blockquote><p> var timer;</p><blockquote></blockquote><p> timer &#x3D; setInterval(function () {<br>   console.log(this); &#x2F;&#x2F;window<br> }, 1000);</p><blockquote></blockquote><p> timer &#x3D; setInterval(obj.sayHello, 1000); &#x2F;&#x2F;this指window<br> &#x2F;&#x2F;相当于：<br> timer &#x3D; setInterval(function () {<br>  console.log(this); &#x2F;&#x2F; window<br>  console.log(“大家好，我叫” + this.name);<br>}, 1000); &#x2F;&#x2F;this指window</p><blockquote><pre><code></code></pre></blockquote><ol><li>修改 this 指向<blockquote><ul><li>注意：这里的方法实质上并不是真的改变了定时器的this指向，只是改变了结果</li></ul></blockquote></li></ol><blockquote><p>知识点：</p><ul><li>在之前的学习中我们知道，<code>this</code>代表的是函数的上下文对象，指向把函数当成方法调用的那个对象</li></ul></blockquote><ul><li><p>方法1：包装函数来实现this</p><blockquote><pre><code>var obj = &#123;name: &quot;张三&quot;,sayHello: function () &#123;  console.log(this); // obj  console.log(&quot;大家好，我叫&quot; + this.name);&#125;,&#125;;var timer = setInterval(function () &#123;//定时器的this仍然指向windowobj.sayHello();//在函数内obj调用sayHello方法&#125;, 2000);//输出结果：每个两秒打印出 大家好，我叫张三</code></pre></blockquote></li><li><p>方法2：利用 bind 来实现</p><blockquote><ul><li>bind方法：<code>var fn2 = fn.bind(thisArg, arg1, arg2, arg3);</code></li><li>改变<code>this</code>指向并返回一个新函数</li><li><code>setInterval(obj.sayHello, 1000);</code>this指的是window</li><li>然而<code>.bind(obj)</code>把<code>obj.sayHello</code>方法的this改成了obj</li></ul><pre><code>var obj = &#123;name: &quot;张三&quot;,sayHello: function () &#123;  console.log(this);  console.log(&quot;大家好，我叫&quot; + this.name);&#125;,&#125;;</code></pre></blockquote><p>setInterval(obj.sayHello.bind(obj), 1000);</p><blockquote><pre><code></code></pre></blockquote></li><li><p>方法三：在外层作用域，保存 this</p><blockquote><ul><li>事件函数中的this指向绑定事件的那个对象</li><li>实现效果：点击开始按钮，1秒后，开始按钮变颜色</li><li>因为不一定知道按钮元素名，所以一般会写成<code>this.style...</code>；但定时器函数的<code>this</code>指的是window，所以就会报错</li><li>因此，声明一个变量<code>that</code>接收事件处理函数的<code>this</code>，在定时器内调用</li></ul></blockquote></li></ul><blockquote><pre><code>&lt;button id=&quot;start&quot;&gt;开始&lt;/button&gt;&lt;script&gt;  var start = document.getElementById(&quot;start&quot;);  start.onclick = function () &#123;    //事件处理函数的this指的是start    var that = this;    setInterval(function () &#123;      console.log(that); // that指向start      that.style.backgroundColor = &quot;red&quot;;//改变start的背景颜色    &#125;, 1000);  &#125;;&lt;/script&gt;</code></pre></blockquote><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><blockquote><p>在讲接下来的同步与异步相关内容时，会涉及到队列相关知识，所以我们先来学习下队列相关内容</p><ul><li>队是一种线性的数据结构，它的特点是先进先出（<code>First In First Out</code>,简称<code>FIFO</code>），后进后出。</li><li>队列的出口端叫作队头（<code>front</code>），队列的入口端叫作队尾(<code>rear</code>)</li><li>入队（<code>enqueue</code>）就是把新元素放入队列中，只允许在队列的<strong>队尾</strong>放入元素</li><li>出队（<code>dequeue</code>）就是把元素移出队列，只允许在队列的<strong>队头</strong>移出元素。<img src="队列.png"></li></ul></blockquote><h4 id="单线程、同步与异步"><a href="#单线程、同步与异步" class="headerlink" title="单线程、同步与异步"></a>单线程、同步与异步</h4><blockquote><p>生活的角度来举一个例子，帮助大家理解。</p><ul><li>比如你现在工作是查阅合同，并归档，并且这个工作只有你一个人在做，那就属与<strong>单线程执行</strong>。<blockquote><p>所谓单线程，站在现实角度，简单理解就是一个人干了所有活。</p></blockquote></li></ul></blockquote><blockquote><ul><li>至于 JS 为什么设置成单线程的，我们后面在性能优化那节课来专门讲解。</li></ul></blockquote><blockquote><p>比如，你现在的工作流程如下：</p><ul><li>第一：查阅合同是否有错误，我们简称 A 事情</li><li>第二：如果有错误就要提交到老板处，让老板改正 我们简称 B 事情</li><li>第三：老板改正好之后，我们要拿回合同，然后一起归档，简称 C 事情</li><li>第四：可能中间还有其它同事需要我帮助等啥的，我们简称 D 事情<blockquote><p>如果说你现在手上有 10 个文档，当你查阅到第 3 个文档时，发现文档有错误，那你现在该怎么办 ？</p></blockquote></li></ul></blockquote><ol><li>第一种情况：同步执行任务<blockquote><ul><li>把错误合同提交到老板处，让老板改正后，等老板改好，再拿回来，继续查况后面的合同。老板修改合同上的错误，肯定需要花很多时间，还要找律师啥，显然在老师改合同这个时间里，我们一直等着，后面的合同也不审，那太浪费时间了。<blockquote><p>这种情况，就是单线的同步执行任务</p></blockquote></li><li><strong>一次只能做一件事</strong>，而且每次要等前面的事做完了，再做后面的，否则就<strong>一直等着</strong>。而自己一直空闲着，但后面还有好多事又做不了。</li></ul></blockquote></li></ol><p><strong>JS 单线程同步执行任务</strong></p><blockquote><ul><li><code>JS</code> 是属于单线程的，也就是一次只能做一件事。做了 A 就不能做 B。如果前面的 A 任务会花费大量的时间，就会导致后面的 B 任务停止执行，直到 A 执行完才会执行 B。</li><li>如果排队是因为计算量大，CPU 忙不过来，倒也算了，但是很多时候 CPU 是闲着的，因为 IO 设备（输入输出设备）很慢（比如 Ajax 操作从网络读取数据，进行大量计算），不得不等着结果出来，再往下执行。<blockquote><p>显示如果单线执行任务，只能同步执行的话，那是非常麻烦的。</p></blockquote></li></ul></blockquote><ol start="2"><li>第二种情况：同步与异步结合执行任务<blockquote><ul><li>每次把错误的合同提交到老板那里，让老板去改正，自己继续审下面的合同。等老板改好合同后，来通知我去拿合同时，我才会考虑去取回合同。</li><li>老板通知我拿合同时，如果手上的事没有忙完，则等我忙完了，再去老板那里拿回合同，一起归档，如果忙完了，那就直接去老板哪里取回合同。</li><li>如果我忙完了，老板还没有通知我，那我闲着没事也没关系。<blockquote><p>这种情况，就是<strong>同步与异步混合</strong>的方式来执行任务</p></blockquote></li></ul></blockquote></li></ol><blockquote><ul><li>从上面这件事来看，第二种情况肯定工作效率会更高，那在我们 JS 执行代码时，他也采用的是<strong>第二种机制</strong>，同步与异步结合的方式执行代码。</li></ul></blockquote><blockquote><p>为了防止主线程的不阻塞，异步方案产生</p><ul><li>所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。<blockquote><p>就好比上面的 A、B、D 是同步任务，C 是异步任务</p></blockquote></li><li>同步任务指的是： 在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；</li><li>异步任务指的是： 不进入主线程、而进入**”任务队列”<strong>（task queue）的任务，</strong>只有”任务队列”通知主线程**，某个异步任务可以执行了，该任务才会进入主线程执行</li><li>JS 中代码分为同步代码和异步代码。大部分代码是同步的，只有少许代码是异步的</li></ul></blockquote><ol start="3"><li><p>JS 执行中遇到异步任务如何处理</p><blockquote><ul><li>JS 代码在执行代码时，也是一样的，首先会将所有同步代码执行完了，再去执行异步的代码。</li><li>如果在执行过程中碰到了异步的代码，那 JS 就会先把他暂时放到一个<strong>任务队列</strong>中等着，<strong>等同步的代码全部执行完了</strong>再执行任务队列中的异步代码。</li><li>执行顺序按<strong>先插入队列的先拿出来执行</strong>。<img src="JS代码执行流程（简化版）.png"></li></ul></blockquote></li><li><p>setInterval 和 setTimeout 是两个异步语句</p><blockquote><ul><li>我们来分析下，下面这段代码的执行结果</li></ul><pre><code>console.log(1);console.log(2);setTimeout(function () &#123; console.log(&quot;定时器1000&quot;);&#125;, 1000);console.log(3);</code></pre></blockquote><p>setTimeout(function () {<br> console.log(“定时器0”);<br>}, 0);<br>console.log(4);<br>……</p><blockquote></blockquote><p>&#x2F;&#x2F; 最后执行结果  1，2，3，4 定时器0  定时器1000</p><blockquote><pre><code></code></pre></blockquote></li></ol><blockquote><ul><li>代码从上往下执行时，碰到<code>setInterval()</code>和<code>setTimeout()</code>异步任务时，浏览器会把这个任务放在<code>Event Table</code>，</li><li>等到<strong>定时器计时一到</strong>，会把对应回调函数加入到<code>Event Queue</code><strong>事件队列</strong>中，<strong>等</strong>其它的同步代码执行完了，再去执行他们。<blockquote><p>定时器的计时不是由 JS 主线程来负责的。</p></blockquote></li><li>这里就会造成定时器并不能完全按预期的延迟时间来执行代码。因为有可能定时器的等待时间是<code>100ms</code>，而<strong>同步代码</strong>执行的时间要 <code>200ms</code>，这样就会造成定时器要在 <code>200ms</code> 后才会第一次被执行。</li></ul></blockquote><blockquote><blockquote><p>总结</p></blockquote><ul><li>单线程： 一个人干了所有活，而且每次只能做一件事，JS 就是单线程的。<br><strong>同步</strong></li><li>同步就是一件一件事情来，只有等前面的事情做完了，才会做后面的事情，如果前面的事情耗时很长，也要一直等着完成才做后面。</li><li>同步会阻塞后续代码的执行<br><strong>异步</strong></li><li>异步是相同同步而言的，如果在做的过程中遇到异步的任务，就把他先放在一边，等同步的事情做完了，再去做异步的任务</li><li>异步不会阻塞后续代码的执行</li><li>异步任务一般都是非常耗时的，而且会受到外部影响。</li></ul></blockquote><ol start="5"><li>异步的应用场景<blockquote><ul><li>异步任务都是基于 <code>callback</code> 回调函数的形式来处理的，即需要异步处理的代码放在 <code>callbacak</code> 回调函数中</li><li>遇到异步任务，就会把对应的 <code>callback</code> 函数，添加到<strong>任务队列</strong>中，等同步执行完，定时器时间一到，再到任务队列中取出对应的回调函数放入事件队列中，开始执行。</li></ul></blockquote></li></ol><blockquote><p>常见的异步任务有</p><ul><li>网络请求，如：ajax，图片加载</li><li>定时任务，如：setInterval() 和 setTimeout()</li></ul></blockquote><blockquote><p>图片加载案例</p><ul><li>load 事件，表示图片加载成功后要触发的事件</li><li>error 事件，表示图片加载失败后要触发的事件</li></ul><pre><code>console.log(&quot;同步代码1&quot;);var img = document.createElement(&quot;img&quot;); // 同步代码img.src = &quot;https://www.arryblog.com/logo.png&quot;; // 同步代码img.onload = function () &#123;  console.log(&quot;图片加载成功&quot;);  document.body.appendChild(img);&#125;; // 异步回调img.onerror = function () &#123;  console.log(&quot;图片加载失败&quot;);&#125;; // 异步回调console.log(&quot;同步代码2&quot;);//同步代码1 同步代码2 图片加载成功</code></pre></blockquote><h4 id="定时器实现动画"><a href="#定时器实现动画" class="headerlink" title="定时器实现动画"></a>定时器实现动画</h4><blockquote><ul><li>动画的本质，就是在更改 CSS 样式</li><li>比如，制作一个变色的小球，就是在一定的时间内改变 div 的背景颜色</li><li>比如，实现一个长方形，从左边移动到右边，本质就是在不停的更改 div 的 left 值（前提 div 是一个定位元素）<blockquote><p>我们利用定时器，在一定的时间内，更改元素身上的 CSS 属性，就能实现简单的动画效果</p></blockquote></li></ul></blockquote><ol><li><p>案例 1：实现变色小球</p><blockquote><ul><li>开一个定时器，间隔一定的时间，就更改下元素的背景颜色</li></ul><pre><code>var ball = document.querySelector(&quot;.ball&quot;);var arrColor = [  &quot;lightblue&quot;,  &quot;lightcoral&quot;,  &quot;lightgray&quot;,  &quot;lightseagreen&quot;,  &quot;lightpink&quot;,  &quot;skyblue&quot;,];var len = arrColor.length;setInterval(function () &#123;  var index = (Math.random() * len) &gt;&gt; 0;  ball.style.backgroundColor = arrColor[index];&#125;, 500);</code></pre></blockquote></li><li><p>案例 2：匀速运动 - 向右</p><blockquote><p>当点击开始按扭时，希望小球从左边运动到右边的某个位置，然后停下来，在整个过程中小球运动要到达目的地，可以是</p><ul><li>匀速运动</li><li>减速运动</li><li>限定时间（规定多长时间运动到目的）</li></ul></blockquote></li></ol><ul><li>我们来先看第一种：匀速运动 - 向右运动<blockquote><ul><li>匀速运动，即小球每次移动的距离是一样的，我们把每一次移动距离称为<strong>步长</strong>（step）</li><li>我们可以开启一个定时器，让小球每次从当前位置向右移动规定的步长</li><li>当小球到达目的时，<strong>暂停</strong>动画（即关闭定时器）</li><li>因为在小球每次到达目地的时，如果一直按开始按扭，会开启很多个定时器，小球的运动速度会<strong>越来越快</strong></li><li>所以每次在开启一个新的定时器前，要<strong>关闭之前的定时器</strong></li></ul><pre><code>&lt;style&gt;.ball &#123;  position: absolute;  left: 0;  top: 100px;  width: 100px;  height: 100px;  background-color: skyblue;  border-radius: 50%;&#125;&lt;/style&gt;&lt;button class=&quot;start&quot;&gt;开始&lt;/button&gt;&lt;div class=&quot;ball&quot;&gt;&lt;/div&gt;&lt;script&gt;var start = document.querySelector(&quot;.start&quot;);var ball = document.querySelector(&quot;.ball&quot;);var timer = null; //记录定时器// 点击按扭，球开始运动start.onclick = function () &#123;  move(ball, 10, 500, 100);&#125;;/*move:封装运动动画el:运动的元素step:小球每次运动的步长target:目的地距离delay:表示定时器的执行时间，默认值是20ms*/function move(el, step, target, delay = 20) &#123;  // 每次开启新定时器前，把之前的定时器关闭  clearInterval(el.timer);  // 定时器隔一定时间，让小球向右移动一定距离  el.timer = setInterval(function () &#123;    //将定时器绑定到元素身上    // 如果移动距离超过了目标位置，则让他运动到目标位置    var location = el.offsetLeft + step;    if (location &gt;= target) &#123;      location = target;      clearInterval(el.timer);//清除下一次的定时器    &#125;    el.style.left = location + &quot;px&quot;;  &#125;, delay);&#125;&lt;/script&gt;</code></pre><blockquote><p>以上方法，小球只能向右运动。如果想让小球在水平向左或向右运动，我们需要修改代码</p></blockquote></blockquote></li></ul><ol start="3"><li>案例 3：匀速水平——向左&#x2F;向右<blockquote><p>小球沿水平（向左或向右）运动的条件：判断小球的位置与目标点的距离</p><ul><li>如果小球位置 &lt; 目标点位置，则 step 为正数</li><li>如果小球位置 &gt; 目标点位置，则 step 为负数<br>所以小球运动到目标点<strong>停止的条件</strong>就变成了：</li><li>当前位置 &gt;&#x3D; 目标位置 &amp;&amp; step 为正数时，停止</li><li>或 当前位置 &lt;&#x3D; 目标位置 &amp;&amp; step 为负数时，停止</li></ul></blockquote></li></ol><ul><li>封装函数<blockquote><pre><code>/*** move 运动函数 指定元素以规定的步长匀速运动到目的* @param el 需要运动的元素* @param step 每次运动的步长（移动的距离）* @param target 运动到的目的点* @param delay 定时器每次间隔时长，如果没有传就启用默认值20*/function move(el, step, target, delay = 20) &#123;// 判断目标位置与当前元素位置if (el.offsetLeft &gt; target) step = -step;clearInterval(el.timer);// 定时器隔一定时间，让小球向右移动一定距离el.timer = setInterval(function () &#123;  // 如果移动距离超过了目标位置，则让他运动到目标位置  var currentLocation = el.offsetLeft + step;  // 小球停止运动的条件  if (    (currentLocation &gt;= target &amp;&amp; step &gt; 0) ||    (currentLocation &lt;= target &amp;&amp; step &lt; 0)  ) &#123;    currentLocation = target;    clearInterval(el.timer);//清除下一次的定时器  &#125;  el.style.left = currentLocation + &quot;px&quot;;&#125;, delay);&#125;</code></pre></blockquote></li></ul><ol start="4"><li><p>案例 4：匀速水平——往返运动</p><blockquote><ul><li>使用回调函数</li></ul><pre><code>&lt;button class=&quot;btn&quot;&gt;先向左后向右&lt;/button&gt;  &lt;div class=&quot;ball&quot;&gt;&lt;/div&gt;  &lt;script&gt; var btn = document.querySelector(&quot;.btn&quot;); var ball = document.querySelector(&quot;.ball&quot;); var timer = null; //记录定时器 // 点击按扭，球开始运动 btn.onclick = function () &#123;  //用实参传入回调函数move(ball, 10, 500, 50, function () &#123;  move(ball, 10, 0, 50);&#125;); &#125;;//先左后右 btn.onclick = function () &#123;move(ball, 10, 500, 50, function () &#123;  move(ball, 10, 0, 50, function () &#123;    move(ball, 10, 500, 50);  &#125;);&#125;); &#125;;//先左后右再左</code></pre></blockquote><p> function move(el, step, target, delay &#x3D; 20, callback) {<br>&#x2F;&#x2F; 判断目标位置与当前元素位置<br>if (el.offsetLeft &gt; target) step &#x3D; -step;<br>clearInterval(el.timer);<br>&#x2F;&#x2F; 定时器隔一定时间，让小球向右移动一定距离<br>el.timer &#x3D; setInterval(function () {<br>  &#x2F;&#x2F; 如果移动距离超过了目标位置，则让他运动到目标位置<br>  var currentLocation &#x3D; el.offsetLeft + step;<br>  &#x2F;&#x2F; 小球停止运动的条件<br>  if (<br>(currentLocation &gt;&#x3D; target &amp;&amp; step &gt; 0) ||<br>(currentLocation &lt;&#x3D; target &amp;&amp; step &lt; 0)<br>  ) {<br>currentLocation &#x3D; target;<br>clearInterval(el.timer);&#x2F;&#x2F;清除下一次的定时器<br>&#x2F;&#x2F;这里清理定时器，表示到头了<br>&#x2F;&#x2F;判断传入类型，如果是函数，则调用，不是则什么也不做<br>typeof callback &#x3D;&#x3D;&#x3D; “function” ? callback() : callback;<br>&#x2F;&#x2F;callback instanceof Function()?callback():callback;&#x2F;&#x2F;所有的函数都是Function的实例<br>  }<br>  el.style.left &#x3D; currentLocation + “px”;<br>}, delay);<br> }</p><blockquote><p></script></p><pre><code></code></pre></blockquote></li><li><p>案例 5：减速运动 - 向右</p><blockquote><ul><li>所谓减速运动，我们可以理解为，让一个元素从左边运动到右边，其运动的速度越来越小，到最后停止运动。</li><li>比如小球从左边运动到右边，其步长变化类似于： step &#x3D; 10，step &#x3D; 9、step &#x3D; 7 … step &#x3D; 1 最后到达终点，然后停止运动。<blockquote><p>这里的难点在于，整个过程中速度的变化如何消减，从而还要实现在速度消减到最小的时候小球运动到了目地的。这里有一个简单计算每一次小球运动步长的<strong>公式</strong></p></blockquote></li></ul><pre><code>// n 是一个大于1的数，如果等于1，直接到达目地的，所以n尽可能设置大些step = (目地的 - 当前位置) / n;</code></pre></blockquote></li></ol><blockquote><ul><li>注意：向右减速运动时，步长是递减的，一定要<strong>向上取整</strong><code>Math.ceil</code>才能刚好停在目的地；</li><li>因为最后的几个步长一定是小数，只有向上取整，使它等于1，每次的步长为1，才会逐步到达目的地</li></ul></blockquote><ul><li>小球从最左边做减速运动运动到 500px 的位置<blockquote><pre><code>&lt;button id=&quot;start&quot;&gt;开始&lt;/button&gt;&lt;div class=&quot;ball&quot;&gt;&lt;/div&gt;&lt;script&gt;var start = document.getElementById(&quot;start&quot;);var ball = document.querySelector(&quot;.ball&quot;);var timer = null; //初始化定时器</code></pre></blockquote>start.onclick &#x3D; function () {<br>  move(ball, 500, 50);<br>};<br>&#x2F;&#x2F;向右减速运动<br>function move(el, target, delay &#x3D; 20) {<br>  &#x2F;&#x2F; 每次开启一个新定时器前，先清除原来的<br>  clearInterval(el.timer);<br>  el.timer &#x3D; setInterval(function () {<br>&#x2F;&#x2F; 计算每次运动的步长  小数向上取正<br>var step &#x3D; Math.ceil((target - el.offsetLeft) &#x2F; 10);<br>&#x2F;&#x2F; 到达目标位置，停下（即清除定时器）<br>if (el.offset &#x3D;&#x3D;&#x3D; target) {<br>  clearInterval(el.timer);<br>}<br>&#x2F;&#x2F; 让小球运动起来<br>el.style.left &#x3D; el.offsetLeft + step + “px”;<br>  }, delay);<br>}<blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul><ol start="6"><li>案例 6：减速运动 - 水平(向左&#x2F;向右&#x2F;往返)<blockquote><p>要让小球沿水平（向左或向右）运动，那就要判断小球的位置与目标点的距离</p><ul><li>如果小球位置 &lt; 目标点位置，则 step 为正数，向上取整，才能准确到达目的地</li><li>如果小球位置 &gt; 目标点位置，则 step 为负数，向下取整，才能准确到达目的地</li></ul></blockquote></li></ol><blockquote><ul><li>向左&#x2F;向右时，就把函数绑在相应的<code>onclick</code>上,改变left的初始值</li><li>往返时，就使用回调函数</li></ul><pre><code>&lt;style&gt; .ball &#123;   position: absolute;   /* left: 0; */   left: 500px;   top: 50px;   width: 100px;   height: 100px;   background-color: skyblue;   border-radius: 50%; &#125;&lt;/style&gt;&lt;button id=&quot;left&quot;&gt;向左&lt;/button&gt;&lt;button id=&quot;right&quot;&gt;向右&lt;/button&gt;&lt;button id=&quot;side&quot;&gt;往返&lt;/button&gt;&lt;div class=&quot;ball&quot;&gt;&lt;/div&gt;&lt;script&gt;  var left = document.getElementById(&quot;left&quot;);  var right = document.getElementById(&quot;right&quot;);  var side = document.getElementById(&quot;side&quot;);  var ball = document.querySelector(&quot;.ball&quot;);  var timer = null; //初始化定时器</code></pre></blockquote><p>  &#x2F;&#x2F;向左减速运动<br>  left.onclick &#x3D; function () {<br>    move(ball, 500, 50);<br>  };<br>  &#x2F;&#x2F;向右减速运动<br>  right.onclick &#x3D; function () {<br>    move(ball, 0, 50);<br>  };<br>  &#x2F;&#x2F;往返运动<br>  side.onclick &#x3D; function () {<br>    move2(ball, 500, 50, function () {<br>      move2(ball, 0, 50, function () {<br>        move2(ball, 500, 50);<br>      });<br>    });<br>  };</p><blockquote></blockquote><p>&#x2F;&#x2F;向左或向右运动<br>  function move(el, target, delay &#x3D; 20) {<br>    &#x2F;&#x2F; 每次开启一个新定时器前，先清除原来的<br>    clearInterval(el.timer);<br>    el.timer &#x3D; setInterval(function () {<br>      &#x2F;&#x2F; 计算每次运动的步长  小数向上取正<br>      var step &#x3D; (target - el.offsetLeft) &#x2F; 10;<br>      &#x2F;&#x2F; 如果step大于0，则向上取正  如果step小于0，则向下取正<br>      step &#x3D; step &gt; 0 ? Math.ceil(step) : Math.floor(step);<br>      &#x2F;&#x2F; 到达目标位置，停下（即清除定时器）<br>      if (el.offsetLeft &#x3D;&#x3D;&#x3D; target) {<br>        clearInterval(el.timer);<br>      }<br>      &#x2F;&#x2F; 让小球运动起来<br>      el.style.left &#x3D; el.offsetLeft + step + “px”;<br>    }, delay);<br>  }</p><blockquote></blockquote><p>&#x2F;&#x2F;往返运动<br>  function move2(el, target, delay &#x3D; 20, callback) {<br>    &#x2F;&#x2F; 每次开启一个新定时器前，先清除原来的<br>    clearInterval(el.timer);<br>    el.timer &#x3D; setInterval(function () {<br>      &#x2F;&#x2F; 计算每次运动的步长  小数向上取正<br>      var step &#x3D; (target - el.offsetLeft) &#x2F; 10;<br>      &#x2F;&#x2F; 如果step大于0，则向上取正  如果step小于0，则向下取正<br>      step &#x3D; step &gt; 0 ? Math.ceil(step) : Math.floor(step);<br>      &#x2F;&#x2F; 到达目标位置，停下（即清除定时器）<br>      if (el.offsetLeft &#x3D;&#x3D;&#x3D; target) {<br>        clearInterval(el.timer);<br>      }<br>      &#x2F;&#x2F; 让小球运动起来<br>      el.style.left &#x3D; el.offsetLeft + step + “px”;<br>      &#x2F;&#x2F;等赋完上一轮的值之后再来调回调函数<br>      if (el.offsetLeft &#x3D;&#x3D;&#x3D; target) {<br>            callback instanceof Function ? callback() : callback;<br>          } }, delay);<br>  }</p><blockquote><p></script></p><pre><code></code></pre></blockquote><ol start="7"><li>案例 7：多属性减速运动<blockquote><p>我们希望小球按我们指定的属性来发生变化，如果同时指定多个属性呢 ？</p></blockquote></li></ol><ul><li><p>难点一：多个属性如何指定，传值问题。</p><blockquote><ul><li>我们把 <code>target</code> 目标参数改成一个<strong>对象</strong>，用对象的形式来指定变化的属性值，如下：</li></ul><pre><code>target = &#123; left: 200, top: 300, width: 300, height: 400 &#125;;</code></pre></blockquote></li><li><p>难点二：如何控制每个属性的变化</p><blockquote><ul><li>可以利用<code>for..in</code>循环遍历出<code>target</code>中的每个<strong>属性名</strong>和对应的<strong>属性值</strong>(目标值)</li><li>然后利用<code>getComputedStyle()</code>方法，获取元素<strong>当前对应属性值</strong>，与目标值对比，来控制属性变化</li></ul><pre><code>// for ...in 遍历target，获取对应属性名和属性值for(var key in target)&#123; ....&#125;</code></pre></blockquote><p>&#x2F;&#x2F; 获取元素对应属性值<br>var attrValue &#x3D; getStyle(el, key);<br>function getStyle(el, attr) {<br>  return getComputedStyle(el, null)[attr] || 0;&#x2F;&#x2F;0是默认值<br>}<br>&#x2F;&#x2F;相当于 var attrValue &#x3D; getComputedStyle(el)[key];</p><blockquote><pre><code></code></pre></blockquote></li><li><p>难点三：何时暂停定时器</p><blockquote><ul><li>多个属性发生变化，只有当<strong>所有属性</strong>变化值都达到目标时，才会能暂停定时器。</li><li>判断方法：我们设置一个<code>flag</code>属性用来记录是否所有属性都达到了目标值，只要有一个没有达到<code>flag = false</code>,只有所有值都达到目标值时，<code>flag = true</code></li></ul><pre><code>if (flag) &#123;clearInterval(el.timer);&#125;</code></pre></blockquote></li><li><p>把 opacity 透明度属性融入进去</p><blockquote><ul><li>我们把<code>透明度的属性值 * 100</code>再处理，然后保存结果时，再<code>除以 100</code></li><li>如果用户传过来的对应属性<code>left，top，width，height，opacity</code>值，带有小数，我们在比较时<strong>用整数来比较</strong>。<blockquote><p>注：传入的 opacity 只能是 1 到 100 之间的整数</p></blockquote></li></ul><pre><code>/*** move 多属性运动动画* el 运动的元素* target 多个属性的目标值 target=&#123;width:&#39;300px&#39;,height:&#39;400px&#39;&#125;* callback 回调函数  动画结束后执行* delay 定时器的执行间隔时间*/function move(el, target = &#123;&#125;, callback, delay = 20) &#123;// 开定时器之前，要清定时器clearInterval(el.timer);el.timer = setInterval(function () &#123;  var flag = true; //假设所有的属性都到达目标值  // 多属性动画  // 通过for...in遍历 target对象，取得每个key和(value)  // 通过key得到当前改变的属性，及属性的当前值  // 通过value得到当前改变的属性的目标值  for (var key in target) &#123;   // 要对传过来的key做一个判断，判断是不是一个opacity   var attrValue = getComputedStyle(el)[key]; // 当前值   1   if (key.toLowerCase() === &quot;opacity&quot;) &#123;     // 将值 1 或 0.4等 转换成 100或 40     attrValue = attrValue * 100;   &#125; else &#123;     attrValue = parseInt(attrValue); // 当前值   1   &#125;</code></pre></blockquote><p>   var targetValue &#x3D; parseInt(target[key]); &#x2F;&#x2F; 目标值   30</p><blockquote></blockquote><p>   &#x2F;&#x2F; 计算运动的步长step(速度 speed)<br>   var step &#x3D; (targetValue - attrValue) &#x2F; 10;<br>   step &#x3D; step &gt; 0 ? Math.ceil(step) : Math.floor(step);</p><blockquote></blockquote><p>   &#x2F;&#x2F; 只要有一个属性没有到达目标值，那就把flag设置为false<br>   var currentDistance &#x3D; attrValue + step;<br>   if (currentDistance !&#x3D;&#x3D; targetValue) {<br> flag &#x3D; false;<br>   }<br>   &#x2F;&#x2F; 赋值<br>   if (key.toLowerCase() &#x3D;&#x3D;&#x3D; “opacity”) {<br> el.style[key] &#x3D; currentDistance &#x2F; 100;<br>   } else {<br> el.style[key] &#x3D; currentDistance + “px”;<br>   }<br> }</p><blockquote></blockquote><p> &#x2F;&#x2F; 清定时器,只有flage&#x3D;true时<br> if (flag) {<br>   clearInterval(el.timer);<br>   &#x2F;&#x2F; 执行回调<br>   callback instanceof Function ? callback() : callback;<br> }<br> }, delay);<br>}</p><blockquote><pre><code></code></pre></blockquote></li></ul><ol start="8"><li>案例 8：单个属性限定时间动画<blockquote><ul><li>限定步长的动画，是没有办法精准的把控好时间的，其运动的距离也长，耗时越长</li><li>如果我们要限定时间，在规定的时间内完成动画，那需要如何实现呢 ？<img src="限定时间动画.png"></li></ul></blockquote></li></ol><blockquote><ul><li>计算<strong>当前位置</strong>以控制<code>left</code>的距离</li><li><code>duration</code>&#x3D;走完全程所需要的时间（s）</li><li><code>begin</code>&#x3D;开始位置&#x3D;<code>el.offsetLeft</code></li><li><code>change</code>&#x3D;总距离&#x3D;target(目标位置)-begin(开始位置)</li><li>速度&#x3D;总距离&#x2F;总时间&#x3D;<code>change/duration</code></li><li><code>time</code>(已经走了多久)：定时器次数*延迟时间</li><li><code>currentDistance</code>(当前位置)&#x3D;left&#x3D;<code>起始位置+所用时间*速度</code>&#x3D;begin+T*C&#x2F;D</li><li>改善：将毫秒调整为秒<code>duration = parseFloat(duration) * 1000</code>,<code>parseFloat</code>过滤字符串</li><li>加入回调函数</li></ul></blockquote><ul><li>限定时间动画函数<blockquote><pre><code>&lt;div class=&quot;ball&quot;&gt;&lt;/div&gt;&lt;script&gt;var ball = document.querySelector(&quot;.ball&quot;);   function move(el, target, duration, callback) &#123;  var begin = el.offsetLeft;  var change = target - begin;  //将毫秒调整为秒  duration = parseFloat(duration) * 1000;  var time = 0;  //开启定时器时，首先清理上一个定时器  clearInterval(el.timer);  el.timer = setInterval(function () &#123;    time += 20;    var currentDistance = begin + (time * change) / duration;    //超过规定时间，就把位置拉到目标距离，清理定时器    if (time &gt;= duration) &#123;      currentDistance = target;      clearInterval(el.timer);    &#125;    el.style.left = currentDistance + &quot;px&quot;;    //到头之后使用回调函数    if (time &gt;= duration) &#123;      callback instanceof Function ? callback() : callback;    &#125;  &#125;, 20);&#125;document.documentElement.onclick = function () &#123;  move(ball, 500, &quot;1s&quot;, function () &#123;    move(ball, 10, &quot;0.5s&quot;);  &#125;);&#125;;&lt;/script&gt;</code></pre></blockquote></li></ul><ol><li><p>案例9：多个属性，同一限定时间动画</p><blockquote><ul><li>在上一个案例的基础上，再融合多个属性</li></ul><pre><code>&lt;div class=&quot;ball&quot;&gt;&lt;/div&gt;&lt;script&gt;  var ball = document.querySelector(&quot;.ball&quot;);</code></pre></blockquote><p>  document.documentElement.onclick &#x3D; function () {<br> move(ball, (target &#x3D; { top: “50px”, left: “500px” }), “1s”);<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F;回调函数<br>  document.documentElement.onclick &#x3D; function () {<br> move(<br>   ball,<br>   (target &#x3D; { top: “50px”, left: “500px” }),<br>   “1s”,<br>   function () {<br> move(ball, (target &#x3D; { top: “10px”, left: “10px” }), “1s”);<br>   }<br> );<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F;限定时间动画<br>  function move(el, target &#x3D; {}, duration, callback) {<br> var time &#x3D; 0;<br> &#x2F;&#x2F;将毫秒调整为秒<br> duration &#x3D; parseFloat(duration) * 1000;<br> &#x2F;&#x2F;开启定时器时，首先清理上一个定时器<br> clearInterval(el.timer);</p><blockquote></blockquote><p> el.timer &#x3D; setInterval(function () {<br>   time +&#x3D; 20;<br>   for (var key in target) {<br> var begin &#x3D; parseFloat(getComputedStyle(el)[key]);<br> var targerValue &#x3D; parseFloat(target[key]);<br> var change &#x3D; targerValue - begin;<br> var currentDistance &#x3D; begin + (time * change) &#x2F; duration;<br>&#x2F;&#x2F;超过规定时间，就把位置拉到目标距离，清理定时器<br> if (time &gt;&#x3D; duration) {<br>   currentDistance &#x3D; targerValue;<br>   clearInterval(el.timer);<br> }<br> el.style[key] &#x3D; currentDistance + “px”;<br>&#x2F;&#x2F;到头之后使用回调函数<br> if (time &gt;&#x3D; duration) {<br>   callback instanceof Function ? callback() : callback;<br> }<br>   }</p><blockquote></blockquote><p>}, 20);<br> }</p><blockquote><p></script></p><pre><code></code></pre></blockquote></li><li><p>案例10：多个属性，不同限定时间动画</p></li></ol><p><strong>几大核心问题：</strong></p><ul><li><p>多属性运动，target 保存数据的结构定义成如下，用户按这个格式来传数据</p><blockquote><pre><code>var target = [&#123;  width: &quot;200px&quot;,  duration: &quot;2s&quot;,&#125;,&#123;  left: &quot;600px&quot;,  duration: &quot;5s&quot;,&#125;,&#123;  top: &quot;200px&quot;,  duration: &quot;1s&quot;,&#125;,];</code></pre></blockquote></li><li><p>对上面结构的数据做转换，转成适合编程的如下结构数据</p><blockquote><pre><code>/*** attr 运动的属性* target 运动的目标值* D ：duration 动画（某个属性）运动的总时间* B ：Begin 动画（当前属性）的开始位置* C : Change 需要改变的总距离  target -B*/var target = [&#123; attr: &quot;width&quot;, D: 2000, target: 200, B: 100, C: 100 &#125;,&#123; attr: &quot;left&quot;, D: 5000, target: 600, B: 10, C: 590 &#125;,&#123; attr: &quot;top&quot;, D: 1000, target: 200, B: 10, C: 190 &#125;,];</code></pre></blockquote></li></ul><blockquote><p><strong>难点</strong></p><ul><li>怎样先得到每个对象的第一个键值对，再得到每个对象的第二个键值对</li><li><code>for in</code>不能保证按书写顺序遍历数组&#x2F;对象，怎么处理</li></ul></blockquote><blockquote><ul><li>方式一：未考虑<code>for in</code> 的遍历顺序</li><li><code>n=0</code>使得到的是每个对象的第一个键值</li><li><code>n=1</code>使得到的是每个对象的第二个键值</li></ul><pre><code>function convertDataStruct(el, target) &#123;  var result = [];  for (var i = 0; i &lt; target.length; i++) &#123;    var n = 0; //记录进入对象的次数    var obj = &#123;&#125;;    for (var key in target[i]) &#123;      if (n === 0) &#123;        obj.attr = key;        obj.target = parseInt(target[i][key]);        obj.B = parseInt(getComputedStyle(el)[key]);        obj.C = obj.target - obj.B;      &#125; else &#123;        //把秒转成毫秒        obj.D = parseFloat(target[i][key]) * 1000;      &#125;      n++;    &#125;    result.push(obj);  &#125;  return result;&#125;</code></pre></blockquote><blockquote><ul><li>优化版</li><li>用<code>indexOf</code>在attrArr数组中查找元素</li><li>找到了的就是每个对象的第一个键值</li><li>没找到的就是每个对象的第二个键值</li></ul></blockquote><blockquote><pre><code>var attrArr = [&quot;width&quot;, &quot;left&quot;, &quot;top&quot;, &quot;height&quot;];function convertDataStruct(el, target) &#123;  var result = [];  for (var i = 0; i &lt; target.length; i++) &#123;    var obj = &#123;&#125;;    for (var key in target[i]) &#123;      var index = attrArr.indexOf(key);      if (index !== -1) &#123;        obj.attr = key;        obj.target = parseInt(target[i][key]);        obj.B = parseInt(getComputedStyle(el)[key]);        obj.C = obj.target - obj.B;      &#125; else &#123;        obj.D = Math.abs(parseFloat(target[i][key]) * 1000);      &#125;    &#125;    result.push(obj);  &#125;  return result;&#125;</code></pre></blockquote><ul><li><p>何时清除定时器</p><blockquote><ul><li>累计时间 &gt; 多个属性中<strong>最大运动时间</strong>时，清定时器</li></ul></blockquote></li><li><p>那如何获取多个属性中，运动时间最长的那个时间？</p><blockquote><ul><li>如果没有输入运动时间？设默认值</li><li>如果输入的运动时间为负？用<code>Math.abs()</code></li><li>可以用for循环，也可以用<code>forEach</code></li></ul><pre><code>function getTime(target) &#123;var MaxTime = parseFloat(target[0].duration) * 1000;//如果没有设置duration，则时间为0，有就等于它的绝对值MaxTime = MaxTime ? Math.abs(MaxTime) : 0;</code></pre></blockquote><p>&#x2F;&#x2F;方法1：for 循环<br>&#x2F;&#x2F; for (var i &#x3D; 0; i &lt; target.length; i++) {<br>&#x2F;&#x2F;   var time &#x3D; parseFloat(target[i].duration) * 1000;<br>&#x2F;&#x2F;   &#x2F;&#x2F;如果某项没设置duration，就为0<br>&#x2F;&#x2F;   time &#x3D; time ? Math.abs(time) : 0;<br>&#x2F;&#x2F;   if (MaxTime &lt; time) MaxTime &#x3D; time;<br>&#x2F;&#x2F; }</p><blockquote></blockquote><p>&#x2F;&#x2F;方法2：forEach<br>target.forEach(function (value) {<br>  var time &#x3D; parseFloat(value.duration) * 1000;<br>  &#x2F;&#x2F;如果某项没设置duration，就为0<br>  time &#x3D; time ? Math.abs(time) : 0;<br>  if (MaxTime &lt; time) MaxTime &#x3D; time;<br>});<br>return MaxTime;<br>}</p><blockquote><pre><code></code></pre></blockquote></li><li><p>当累计时间大于属性运动时间</p><blockquote><ul><li>如果累计时间 &gt; 属性运动时间，则属性值 &#x3D; 目标值，将当前运动距离强制设为目标值，但<strong>不清</strong>定时器</li></ul></blockquote></li><li><p>什么时候执行回调函数</p><blockquote><ul><li>清定时器，表示动画结束，可以执行回调</li></ul></blockquote></li><li><p>加入<code>opacity</code>属性</p><blockquote><ul><li>数据转换时，把透明度的属性值 * 100</li><li>定时器中改变属性值的公式，不用再加”px”,直接<code>除100</code></li></ul></blockquote></li><li><p>完整代码：</p><blockquote><pre><code>&lt;div class=&quot;ball&quot;&gt;&lt;/div&gt;&lt;script&gt;var ball = document.querySelector(&quot;.ball&quot;);var target = [  &#123;    width: &quot;150px&quot;,    duration: &quot;2s&quot;,  &#125;,  &#123;    height: &quot;150px&quot;,    duration: &quot;2s&quot;,  &#125;,  &#123;    left: &quot;400px&quot;,    duration: &quot;3s&quot;,  &#125;,  &#123;    top: &quot;100px&quot;,    duration: &quot;1s&quot;,  &#125;,  &#123;    opacity: &quot;0.3&quot;,    duration: &quot;1s&quot;,  &#125;,];document.documentElement.onclick = function () &#123;  move(ball, target);&#125;;function move(el, target, callback) &#123;  clearInterval(el.timer); //清理定时器  var time = 0;  //获得属性中运动时间最长的时间，默认值200  var MaxTime = getTime(target) || 200;</code></pre></blockquote><p>&#x2F;&#x2F;转换数据<br>var target &#x3D; convertDataStruct(ball, target);<br>&#x2F;&#x2F;启动定时器<br>el.timer &#x3D; setInterval(function () {<br>  time +&#x3D; 20;<br>  &#x2F;&#x2F;遍历目标数组<br>  for (var i &#x3D; 0; i &lt; target.length; i++) {<br>var duration &#x3D; target[i].D || 200;<br>var targetDistance &#x3D; target[i].target;<br>var begin &#x3D; target[i].B;<br>var change &#x3D; target[i].C;</p></li></ul><blockquote></blockquote><pre><code>  var currentDistance = begin + (time * change) / duration;  //超过目标距离时  if (time &gt;= duration) &#123;    currentDistance = targetDistance;  &#125;  if (target[i].attr === &quot;opacity&quot;) &#123;    el.style[target[i].attr] = currentDistance / 100;  &#125; else &#123;    el.style[target[i].attr] = currentDistance + &quot;px&quot;;  &#125;&#125;//如果最长时间结束，清理定时器，执行回调函数if (time &gt; MaxTime) &#123;  clearInterval(el.timer);  callback instanceof Function ? callback() : callback;&#125;</code></pre><p>  }, 20);<br>}</p><blockquote></blockquote><p>  &#x2F;&#x2F;得到最长完成时间<br>  function getTime(target) {<br>    var MaxTime &#x3D; parseFloat(target[0].duration) * 1000;<br>    &#x2F;&#x2F;如果没有设置duration，则时间为0，有就等于它的绝对值<br>    MaxTime &#x3D; MaxTime ? Math.abs(MaxTime) : 0;<br>    &#x2F;&#x2F;for 循环<br>    &#x2F;&#x2F; for (var i &#x3D; 0; i &lt; target.length; i++) {<br>    &#x2F;&#x2F;   var time &#x3D; parseFloat(target[i].duration) * 1000;<br>    &#x2F;&#x2F;   &#x2F;&#x2F;如果某项没设置duration，就为0<br>    &#x2F;&#x2F;   time &#x3D; time ? Math.abs(time) : 0;<br>    &#x2F;&#x2F;   if (MaxTime &lt; time) MaxTime &#x3D; time;<br>    &#x2F;&#x2F; }</p><blockquote></blockquote><pre><code>//forEachtarget.forEach(function (value) &#123;  var time = parseFloat(value.duration) * 1000;  //如果某项没设置duration，就为0  time = time ? Math.abs(time) : 0;  if (MaxTime &lt; time) MaxTime = time;&#125;);return MaxTime;</code></pre><p>  }<br>  &#x2F;&#x2F;getTime(target)</p><blockquote></blockquote><p>  &#x2F;&#x2F;数据结构转换函数：<br>  &#x2F;&#x2F;   var target &#x3D; [<br>  &#x2F;&#x2F;     { attr: “width”, D: 2000, target: 200, B: 100, C: 100 },<br>  &#x2F;&#x2F;     { attr: “left”, D: 5000, target: 600, B: 10, C: 590 },<br>  &#x2F;&#x2F;     { attr: “top”, D: 1000, target: 200, B: 10, C: 190 },<br>  &#x2F;&#x2F;   ];</p><blockquote></blockquote><p>  &#x2F;&#x2F;基础版<br>  function convertDataStruct(el, target) {<br>    var result &#x3D; [];<br>    for (var i &#x3D; 0; i &lt; target.length; i++) {<br>      var n &#x3D; 0; &#x2F;&#x2F;记录进入对象的次数<br>      var obj &#x3D; {};<br>      for (var key in target[i]) {<br>        if (n &#x3D;&#x3D;&#x3D; 0) {<br>          if (key &#x3D;&#x3D;&#x3D; “opacity”) {<br>            obj.attr &#x3D; key;<br>            obj.target &#x3D; target[i][key] * 100;<br>            obj.B &#x3D; getComputedStyle(el)[key] * 100;<br>            obj.C &#x3D; obj.target - obj.B;<br>          } else {<br>            obj.attr &#x3D; key;<br>            obj.target &#x3D; parseInt(target[i][key]);<br>            obj.B &#x3D; parseInt(getComputedStyle(el)[key]);<br>            obj.C &#x3D; obj.target - obj.B;<br>          }<br>        } else {<br>          &#x2F;&#x2F;把秒转成毫秒<br>          obj.D &#x3D; parseFloat(target[i][key]) * 1000;<br>        }<br>        n++;<br>      }<br>      result.push(obj);<br>    }<br>    return result;<br>  }</p><blockquote></blockquote><p>  &#x2F;&#x2F;优化版<br>  var attrArr &#x3D; [“width”, “left”, “top”, “height”];<br>  function convertDataStruct(el, target) {<br>    var result &#x3D; [];<br>    for (var i &#x3D; 0; i &lt; target.length; i++) {<br>      var obj &#x3D; {};<br>      for (var key in target[i]) {<br>        var index &#x3D; attrArr.indexOf(key);<br>        if (index !&#x3D;&#x3D; -1) {<br>          if (key &#x3D;&#x3D;&#x3D; “opacity”) {<br>            obj.attr &#x3D; key;<br>            obj.target &#x3D; target[i][key] * 100;<br>            obj.B &#x3D; getComputedStyle(el)[key] * 100;<br>            obj.C &#x3D; obj.target - obj.B;<br>          } else {<br>            obj.attr &#x3D; key;<br>            obj.target &#x3D; parseInt(target[i][key]);<br>            obj.B &#x3D; parseInt(getComputedStyle(el)[key]);<br>            obj.C &#x3D; obj.target - obj.B;<br>          }<br>        } else {<br>          obj.D &#x3D; Math.abs(parseFloat(target[i][key]) * 1000);<br>        }<br>      }<br>      result.push(obj);<br>    }<br>    return result;<br>  }</p><blockquote><p></script></p><pre><code></code></pre></blockquote><ul><li>封装成一个函数，放在js文件里<blockquote><ul><li>怎样暴露在全局里：<code>window.move=move</code></li><li>为了使变量不污染全局，做成一个立即执行函数，形成闭包<code>(function()&#123;&#125;)()</code></li></ul></blockquote></li></ul><ol start="11"><li>常见的动画运动公式：<blockquote><ul><li>把以下代码放入一个JS文件中调用</li></ul></blockquote></li></ol><ul><li>使用方法<blockquote><ul><li>拿上个案例来说，将公式<code>currentDistance = begin + (time * change) / duration;</code>换成<code>currentDistance = Tween.Cubic.easeIn(time, begin, change, duration);</code></li><li>打点调用方法，以<code>Tween</code>开头</li><li>只需要提供<code>time, begin, change, duration</code>这四个变量</li></ul></blockquote></li></ul><blockquote><pre><code>// 运动方式var Tween = &#123;  // 匀速运动公式  Linear: function (t, b, c, d) &#123;    return (t / d) * c + b;  &#125;,  // 指数衰减的反弹缓动  Bounce: &#123;    easeIn: function (t, b, c, d) &#123;      return c - Tween.Bounce.easeOut(d - t, 0, c, d) + b;    &#125;,    easeOut: function (t, b, c, d) &#123;      if ((t /= d) &lt; 1 / 2.75) &#123;        return c * (7.5625 * t * t) + b;      &#125; else if (t &lt; 2 / 2.75) &#123;        return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;      &#125; else if (t &lt; 2.5 / 2.75) &#123;        return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;      &#125; else &#123;        return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;      &#125;    &#125;,    easeInOut: function (t, b, c, d) &#123;      if (t &lt; d / 2) &#123;        return Tween.Bounce.easeIn(t * 2, 0, c, d) * 0.5 + b;      &#125;      return Tween.Bounce.easeOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;    &#125;,  &#125;,  // 二次方的缓动  Quad: &#123;    easeIn: function (t, b, c, d) &#123;      return c * (t /= d) * t + b;    &#125;,    easeOut: function (t, b, c, d) &#123;      return -c * (t /= d) * (t - 2) + b;    &#125;,    easeInOut: function (t, b, c, d) &#123;      if ((t /= d / 2) &lt; 1) &#123;        return (c / 2) * t * t + b;      &#125;      return (-c / 2) * (--t * (t - 2) - 1) + b;    &#125;,  &#125;,  // 三次方的缓动  Cubic: &#123;    easeIn: function (t, b, c, d) &#123;      return c * (t /= d) * t * t + b;    &#125;,    easeOut: function (t, b, c, d) &#123;      return c * ((t = t / d - 1) * t * t + 1) + b;    &#125;,    easeInOut: function (t, b, c, d) &#123;      if ((t /= d / 2) &lt; 1) &#123;        return (c / 2) * t * t * t + b;      &#125;      return (c / 2) * ((t -= 2) * t * t + 2) + b;    &#125;,  &#125;,  // 四次方的缓动  Quart: &#123;    easeIn: function (t, b, c, d) &#123;      return c * (t /= d) * t * t * t + b;    &#125;,    easeOut: function (t, b, c, d) &#123;      return -c * ((t = t / d - 1) * t * t * t - 1) + b;    &#125;,    easeInOut: function (t, b, c, d) &#123;      if ((t /= d / 2) &lt; 1) &#123;        return (c / 2) * t * t * t * t + b;      &#125;      return (-c / 2) * ((t -= 2) * t * t * t - 2) + b;    &#125;,  &#125;,  // 五次方的缓动  Quint: &#123;    easeIn: function (t, b, c, d) &#123;      return c * (t /= d) * t * t * t * t + b;    &#125;,    easeOut: function (t, b, c, d) &#123;      return c * ((t = t / d - 1) * t * t * t * t + 1) + b;    &#125;,    easeInOut: function (t, b, c, d) &#123;      if ((t /= d / 2) &lt; 1) &#123;        return (c / 2) * t * t * t * t * t + b;      &#125;      return (c / 2) * ((t -= 2) * t * t * t * t + 2) + b;    &#125;,  &#125;,  // 正弦曲线的缓动  Sine: &#123;    easeIn: function (t, b, c, d) &#123;      return -c * Math.cos((t / d) * (Math.PI / 2)) + c + b;    &#125;,    easeOut: function (t, b, c, d) &#123;      return c * Math.sin((t / d) * (Math.PI / 2)) + b;    &#125;,    easeInOut: function (t, b, c, d) &#123;      return (-c / 2) * (Math.cos((Math.PI * t) / d) - 1) + b;    &#125;,  &#125;,  // 指数曲线的缓动  Expo: &#123;    easeIn: function (t, b, c, d) &#123;      return t == 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;    &#125;,    easeOut: function (t, b, c, d) &#123;      return t == d ? b + c : c * (-Math.pow(2, (-10 * t) / d) + 1) + b;    &#125;,    easeInOut: function (t, b, c, d) &#123;      if (t == 0) return b;      if (t == d) return b + c;      if ((t /= d / 2) &lt; 1) return (c / 2) * Math.pow(2, 10 * (t - 1)) + b;      return (c / 2) * (-Math.pow(2, -10 * --t) + 2) + b;    &#125;,  &#125;,  // 圆形曲线的缓动  Circ: &#123;    easeIn: function (t, b, c, d) &#123;      return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;    &#125;,    easeOut: function (t, b, c, d) &#123;      return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;    &#125;,    easeInOut: function (t, b, c, d) &#123;      if ((t /= d / 2) &lt; 1) &#123;        return (-c / 2) * (Math.sqrt(1 - t * t) - 1) + b;      &#125;      return (c / 2) * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;    &#125;,  &#125;,&#125;;</code></pre></blockquote><h4 id="带左右按扭的自动切换轮播效果"><a href="#带左右按扭的自动切换轮播效果" class="headerlink" title="带左右按扭的自动切换轮播效果"></a>带左右按扭的自动切换轮播效果</h4><ul><li>思路</li></ul><ol><li>首先布局</li><li>实现自动轮播<blockquote><ul><li>自动移动：定时器</li><li>匀速移动：引用上面的<code>move</code>动画</li><li>播完最后一个无缝衔接到第一个<ul><li>把第一个克隆到最后</li><li>给<code>move</code>函数设置一个回调函数</li></ul></li></ul><pre><code>  //克隆第一个li到最后  var liLast = liList[0].cloneNode(true);  wrap.appendChild(liLast);</code></pre></blockquote>  move(wrap, [{ left: targetDistance + “px” }], function () {<br> if (currentIndex &gt;&#x3D; len) {<br>   wrap.style.left &#x3D; “0px”;<br>   currentIndex &#x3D; 0;<br> }<br>  });<blockquote><pre><code></code></pre></blockquote></li></ol><blockquote><ul><li>当播到最后一个时，分页器显示第一个按钮<ul><li>在定时器内分情况</li></ul></li></ul><pre><code>if (currentIndex &gt;= len) &#123;  //分页器变化  currentSpan.classList.remove(&quot;active&quot;);  spans[0].classList.add(&quot;active&quot;);  currentSpan = spans[0];&#125; else &#123;  //分页器变化  currentSpan.classList.remove(&quot;active&quot;);  spans[currentIndex].classList.add(&quot;active&quot;);  currentSpan = spans[currentIndex];&#125;</code></pre></blockquote><ol start="3"><li><p>分页器的处理</p><blockquote><ul><li>鼠标移到分页器上，停止自动播放，鼠标移开，继续自动播放<ul><li>用for循环，给每个span添加<code>onmouseover</code>和<code>onmouseout</code>事件</li><li>给每个span添加下标</li></ul></li><li>鼠标点击到哪个span，该span变色，并播放对应的图片<ul><li>给<code>button</code>添加事件，用事件委托的方式</li><li>点击哪个span，就给它加上<code>active</code>样式</li><li>根据<code>span</code>的下标，得到相应图片的下标，移动<code>left</code></li></ul></li></ul><pre><code>for (var i = 0; i &lt; len; i++) &#123;  spans[i].index = i; //给span加下标  // 给span添加事件，鼠标放在分页器上就停止自动播放  spans[i].onmouseover = function () &#123; clearInterval(timer);  &#125;;  //给span添加事件，鼠标移开就继续播放  spans[i].onmouseout = function () &#123; autoplay();  &#125;;&#125;</code></pre></blockquote><p>&#x2F;&#x2F;点击哪个span就播放相应的图片<br>button.onclick &#x3D; function (e) {<br>  var target &#x3D; e.target;<br>  var targetTag &#x3D; target.tagName.toLowerCase();<br>  if (targetTag !&#x3D;&#x3D; “span”) return;<br>  &#x2F;&#x2F;如果点的是span,对应的span变色·<br>  currentIndex &#x3D; target.index;<br>  currentSpan.classList.remove(“active”);<br>  spans[currentIndex].classList.add(“active”);<br>  currentSpan &#x3D; spans[currentIndex];<br>  &#x2F;&#x2F;改变left,跳转到对应的图片<br>  var currentDistance &#x3D; -currentIndex * liWidth;<br>  move(wrap, [{ left: currentDistance + “px” }]);<br>};</p><blockquote><pre><code></code></pre></blockquote></li><li><p>处理左右按钮</p><blockquote><ul><li>鼠标移动到按钮上时，停止自动轮播；移开时，继续播放<ul><li>和分页器是一样的处理方式</li></ul></li><li>点击按钮，切换到上一张和下一张<blockquote><p>向上切换和向下切换有区别</p></blockquote></li><li>向下切换：<ul><li><code>currentIndex++</code></li><li>再改变分页器和图片容器的<code>left</code>(写成一个向下切换的函数)</li></ul></li><li>向上切换：<ul><li><code>currentindex--</code></li><li>当下标为0时，拉回到克隆的最后一张，<code>currentIdex=len</code></li><li>改变图片容器的<code>left</code></li></ul></li></ul><pre><code>//处理向下按钮 next.onmouseover = function () &#123;clearInterval(timer); &#125;; next.onmouseout = function () &#123;autoplay(); &#125;; next.onclick = function () &#123;currentIndex++;toNext(); &#125;; //处理向上按钮 prev.onmouseover = function () &#123;clearInterval(timer); &#125;; prev.onmouseout = function () &#123;autoplay(); &#125;; prev.onclick = function () &#123;currentIndex--;if (currentIndex &lt; 0) &#123;  //播到第一张时，拉回最后一张  wrap.style.left = -liWidth * len + &quot;px&quot;;  currentIndex = len - 1;&#125;currentSpan.classList.remove(&quot;active&quot;);spans[currentIndex].classList.add(&quot;active&quot;);currentSpan = spans[currentIndex];var currentDistance = -currentIndex * liWidth;move(wrap, [&#123; left: currentDistance + &quot;px&quot; &#125;]); &#125;;</code></pre></blockquote></li></ol><ul><li><code>toNext()</code>函数<blockquote><ul><li>和自动轮播效果的代码是一样的，所以把它摘出来</li></ul><pre><code>//向下播放函数 function toNext() &#123; if (currentIndex &gt;= len) &#123;   //分页器变化   currentSpan.classList.remove(&quot;active&quot;);   spans[0].classList.add(&quot;active&quot;);   currentSpan = spans[0]; &#125; else &#123;   //分页器变化   currentSpan.classList.remove(&quot;active&quot;);   spans[currentIndex].classList.add(&quot;active&quot;);   currentSpan = spans[currentIndex]; &#125;</code></pre></blockquote>var targetDistance &#x3D; -currentIndex * 990; &#x2F;&#x2F;获取移动距离<br> &#x2F;&#x2F; wrap.style.left &#x3D; targetDistance + “px”;<br>move(wrap, [{ left: targetDistance + “px” }], function () {<br>  if (currentIndex &gt;&#x3D; len) {<br>wrap.style.left &#x3D; “0px”;<br>currentIndex &#x3D; 0;<br>  }<br>});<br>}<blockquote><pre><code></code></pre></blockquote></li></ul><ol start="5"><li>优化<blockquote><ul><li>当上一个动画没结束时，点击无效<ul><li>声明一个<code>flag</code>，<code>flag=false</code>时表示动画结束了</li><li>什么时候动画结束？执行回调函数时</li></ul></li><li>给点击事件加<code> if (flag) return; flag = true;</code>，</li><li>加上回调函数</li></ul><pre><code>function () &#123;  flag = false;&#125;</code></pre></blockquote></li></ol><ul><li><p>布局代码</p><blockquote><pre><code>&lt;style&gt;body,ul,li &#123;  margin: 0;  padding: 0;&#125;li &#123;  list-style: none;&#125;.container &#123;  position: relative;  width: 990px;  height: 460px;  overflow: hidden;  margin: 50px;&#125;.container .wrap &#123;  position: absolute;  left: 0;  top: 0;  width: 10000px;  height: 460px;&#125;.container .wrap li &#123;  float: left;  width: 990px;  height: 460px;&#125;</code></pre></blockquote><p> &#x2F;* 分页器 *&#x2F;<br>.buttons {<br>  position: absolute;<br>  bottom: 20px;<br>  left: 0;<br>  width: 100%;<br>  height: 20px;<br>  text-align: center;<br>  font-size: 0;<br>}<br>.buttons span {<br>  display: inline-block;<br>  width: 15px;<br>  height: 15px;<br>  border-radius: 50%;<br>  background-color: #fff;<br>  margin: 0 3px;<br>cursor: pointer;<br>  }<br>  .buttons span.active {<br>background-color: orange;<br>  }</p><blockquote></blockquote><p>&#x2F;* 左右按钮 *&#x2F;<br>.container .prev,<br>.container .next {<br>  position: absolute;<br>  top: 50%;<br>  transform: translateY(-50%);<br>  width: 41px;<br>  height: 70px;<br>  cursor: pointer;<br>  background-image: url(..&#x2F;src&#x2F;images&#x2F;icon-slides.png);<br>}<br>.container .prev {<br>  left: 0;<br>  background-position: -83px 0;<br>}<br>.prev:hover {<br>  background-position: 0;<br>}<br>.container .next {<br>  right: 0;<br>  background-position: -123px 0;<br>}<br>.next:hover {<br>  background-position: -41px 0;<br>}</p><blockquote><p></style></p><pre><code></code></pre></blockquote></li><li><p>JS代码</p><blockquote><ul><li>引用了<code>move.js</code>（前面封装的多属性限时动画）</li></ul><pre><code>&lt;div class=&quot;container&quot;&gt; &lt;!-- 轮播图 --&gt; &lt;ul class=&quot;wrap&quot;&gt;   &lt;li&gt;&lt;img src=&quot;../src/images/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;   &lt;li&gt;&lt;img src=&quot;../src/images/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;   &lt;li&gt;&lt;img src=&quot;../src/images/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;   &lt;li&gt;&lt;img src=&quot;../src/images/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- 分页器 --&gt; &lt;div class=&quot;buttons&quot;&gt;   &lt;span class=&quot;active&quot;&gt;&lt;/span&gt;   &lt;span&gt;&lt;/span&gt;   &lt;span&gt;&lt;/span&gt;   &lt;span&gt;&lt;/span&gt; &lt;/div&gt; &lt;!-- 左右按钮 --&gt; &lt;div class=&quot;prev&quot;&gt;&lt;/div&gt; &lt;div class=&quot;next&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script src=&quot;./move.js&quot;&gt;&lt;/script&gt;&lt;script&gt;//获取元素var wrap = document.querySelector(&quot;.wrap&quot;);var liList = document.querySelectorAll(&quot;.wrap li&quot;);var button = document.querySelector(&quot;.buttons&quot;);var spans = document.querySelectorAll(&quot;.buttons span&quot;);var prev = document.querySelector(&quot;.prev&quot;);var next = document.querySelector(&quot;.next&quot;);var flag = false; // 表示当前没有元素在切换//克隆第一个li到最后var liLast = liList[0].cloneNode(true);wrap.appendChild(liLast);var liWidth = liList[0].offsetWidth;var len = liList.length;var currentIndex = 0; //记录轮播图下标var currentSpan = spans[0]; //记录当前分页器下标var timer = null; //定义定时器autoplay();//自动播放效果function autoplay() &#123;  clearInterval(timer);  timer = setInterval(function () &#123;    currentIndex++;    toNext();  &#125;, 2000);&#125;</code></pre></blockquote><p>for (var i &#x3D; 0; i &lt; len; i++) {<br>  spans[i].index &#x3D; i; &#x2F;&#x2F;给span加下标<br>  &#x2F;&#x2F; 给span添加事件，鼠标放在分页器上就停止自动播放<br>  spans[i].onmouseover &#x3D; function () {<br>clearInterval(timer);<br>  };<br>  &#x2F;&#x2F;给span添加事件，鼠标移开就继续播放<br>  spans[i].onmouseout &#x3D; function () {<br>autoplay();<br>  };<br>}<br>&#x2F;&#x2F;点击哪个span就播放相应的图片<br>button.onclick &#x3D; function (e) {<br>  var target &#x3D; e.target;<br>  var targetTag &#x3D; target.tagName.toLowerCase();<br>  if (flag) return;<br>   flag &#x3D; true;<br>   if (targetTag !&#x3D;&#x3D; “span”) return;<br>   &#x2F;&#x2F;如果点的是span,对应的span变色·<br>   currentIndex &#x3D; target.index;<br>   currentSpan.classList.remove(“active”);<br>   spans[currentIndex].classList.add(“active”);<br>   currentSpan &#x3D; spans[currentIndex];<br>   &#x2F;&#x2F;改变left,跳转到对应的图片<br>   var currentDistance &#x3D; -currentIndex * liWidth;<br>   move(wrap, [{ left: currentDistance + “px” }], function () {<br> flag &#x3D; false;<br>   });<br> };</p><blockquote></blockquote><p>&#x2F;&#x2F;处理向下按钮<br>next.onmouseover &#x3D; function () {<br>  clearInterval(timer);<br>};<br>next.onmouseout &#x3D; function () {<br>  autoplay();<br>};<br>next.onclick &#x3D; function () {<br>  if (flag) return;<br>  flag &#x3D; true;<br>  currentIndex++;<br>  toNext();<br>};<br>&#x2F;&#x2F;处理向上按钮<br>prev.onmouseover &#x3D; function () {<br>  clearInterval(timer);<br>};<br>prev.onmouseout &#x3D; function () {<br>  autoplay();<br>};<br>prev.onclick &#x3D; function () {<br>  if (flag) return;<br>  flag &#x3D; true;<br>  currentIndex–;<br>  if (currentIndex &lt; 0) {<br>&#x2F;&#x2F;播到第一张时，拉回最后一张<br>wrap.style.left &#x3D; -liWidth * len + “px”;<br>currentIndex &#x3D; len - 1;<br>  }<br>  currentSpan.classList.remove(“active”);<br>  spans[currentIndex].classList.add(“active”);<br>  currentSpan &#x3D; spans[currentIndex];<br>  var currentDistance &#x3D; -currentIndex * liWidth;<br>  move(wrap, [{ left: currentDistance + “px” }], function () {<br>flag &#x3D; false;<br>  });<br>};</p><blockquote></blockquote><p>&#x2F;&#x2F;向下播放函数<br>function toNext() {<br>  if (currentIndex &gt;&#x3D; len) {<br>&#x2F;&#x2F;分页器变化<br>currentSpan.classList.remove(“active”);<br>spans[0].classList.add(“active”);<br>currentSpan &#x3D; spans[0];<br>  } else {<br>&#x2F;&#x2F;分页器变化<br>currentSpan.classList.remove(“active”);<br>spans[currentIndex].classList.add(“active”);<br>currentSpan &#x3D; spans[currentIndex];<br>  }<br>   var targetDistance &#x3D; -currentIndex * 990; &#x2F;&#x2F;获取移动距离<br>   &#x2F;&#x2F; wrap.style.left &#x3D; targetDistance + “px”;<br>  move(wrap, [{ left: targetDistance + “px” }], function () {<br>flag &#x3D; false;<br>if (currentIndex &gt;&#x3D; len) {<br>  wrap.style.left &#x3D; “0px”;<br>  currentIndex &#x3D; 0;<br>}<br>  });<br>}</p><blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul><h3 id="二、定时器延迟执行与丢帧问题"><a href="#二、定时器延迟执行与丢帧问题" class="headerlink" title="二、定时器延迟执行与丢帧问题"></a>二、定时器延迟执行与丢帧问题</h3><blockquote><ul><li>要了解定时器为什么会延迟执行和存在丢帧问题，就需要先了解下面几个问题</li></ul></blockquote><ol><li>屏幕刷新频率<blockquote><ul><li>屏幕刷新频率即图像在屏幕上更新的速度，也即屏幕上的图像<strong>每秒钟</strong>出现的次数，它的单位是赫兹（Hz）。</li><li>对于一般笔记本电脑，这个频率大概是 60Hz，可以在桌面上 <code>右键 —显示设置 — 高级显示设置 — 刷新频率</code>中查看和设置<blockquote><p>这个值的设定受屏幕分辨率、屏幕尺寸和显卡的影响，原则上设置成让眼睛看着舒适的值都行。</p></blockquote></li></ul></blockquote></li></ol><ul><li>常见的显示器有两种<blockquote><p>即 CRT 和 LCD， CRT 就是传统显示器，LCD 就是我们常说的液晶显示器。</p><ul><li>CRT 是一种使用<code>阴极射线管</code>的显示器，屏幕上的图形图像是由一个个因<code>电子束</code>击打而发光的<code>荧光点</code>组成，由于显像管内荧光粉受到电子束击打后发光的时间很短，所以电子束必须不断击打荧光粉使其持续发光，电子束每秒击打荧光粉的次数就是屏幕刷新频率。</li></ul></blockquote></li></ul><blockquote><ul><li>而对于 LCD 来说，则不存在刷新频率的问题，它根本就<strong>不需要刷新</strong>，因为 LCD 中每个像素都在持续不断地发光，直到不发光的电压改变并被送到控制器中，所以 LCD 不会有电子束击打荧光粉而引起的闪烁现象。</li></ul></blockquote><blockquote><ul><li>因此，当你对着电脑屏幕什么也不做的情况下，显示器也会以每秒 60 次的频率正在不断的更新屏幕上的图像。为什么你感觉不到这个变化？</li><li>那是因为人的眼睛有<code>视觉停留效应</code>，即前一副画面留在大脑的印象还没消失，紧接着后一副画面就跟上来了，这中间只间隔了 <code>16.7ms(1000/60 ≈ 16.7)</code>。</li><li>所以会让你误以为屏幕上的图像是静止不动的，而屏幕给你的这种感觉是对的，试想一下，如果刷新频率变成 1 次&#x2F;秒，屏幕上的图像就会出现严重的闪烁，这样就很容易引起眼睛疲劳、酸痛和头晕目眩等症状。</li></ul></blockquote><ol start="2"><li><p>动画实现原理</p><blockquote><p>根据上面的原理我们知道，你眼前所看到图像正在以每秒60次的频率刷新，由于刷新频率很高，因此你感觉不到它在刷新，而动画本质就是要让人眼看到图像被刷新而引起变化的视觉效果，这个变化要以连贯的、平滑的方式进行过渡。<br>那怎么样才能做到这种效果呢 ?</p><ul><li>刷新频率为<code>60Hz</code>的屏幕每<code>16.7ms</code>刷新一次，我们在屏幕每次刷新前，将图像的位置向左移动一个像素，即1px，这样一来，屏幕每次刷出来的图像位置都比前一个要差 1px，因此你会看到图像在移动，由于我们人眼的视觉停留效应，当前位置的图像停留在大脑的印象还没消失，紧接着图像又被移到了下一个位置。</li><li>因此你才会看到图像在流畅的移动，这就是视觉效果上形成的动画。</li></ul></blockquote></li><li><p>setInterval 实现动画原理</p><blockquote><ul><li>setInterval 其实就是通过设置一个间隔时间来不断的改变图像的位置等属性，从而达到动画效果的。</li></ul><pre><code>setInterval(f, 20); // 每隔10ms 执行下回调函数 f</code></pre></blockquote></li></ol><ul><li>setInterval 执行会出现延迟问题<blockquote><ul><li>setInterval的执行时间并不是确定的。在 Javascript 中， setInterval 任务被放进了<strong>异步队列</strong>中，只有当<strong>主线程</strong>上的任务执行完以后，才会去检查该队列里的任务是否需要开始执行，因此， setInterval 的实际执行时间一般要比其设定的时间<strong>晚</strong>一些。</li><li>setInterval的<strong>第二个参数的延时</strong>只能保证何时会把回调函数添加到任务队列，<strong>不能保证</strong>添加到任务队就会立即执行。能不能执行要看主线程是否空闲，同时前面是否还有任务在等待</li></ul></blockquote></li></ul><ol start="4"><li>setTimeout 实现动画原理<blockquote><ul><li>setTimeout 是通过间隔一定时间执行动画<strong>回调函数</strong>，在回调函数执行完成后，再重新开一个 setTimeout 定时器执行下一次回调，重复上面过程。</li></ul><pre><code>function f() &#123;  /* 要执行的动画代码 */  // ....  setTimeout(f, 20);&#125;setTimeout(f, 20);</code></pre></blockquote></li></ol><blockquote><blockquote><p>注：</p></blockquote><ul><li><code>setTimeout</code>每次是在上一个动画执行完成后，再间隔相同时间，把定时器加入到<strong>任务队列</strong>等待执行。和 setInterval 一样都会存在延时问题。</li><li><strong>浏览器的计时</strong>也会存在不精准的问题，具体内容可参考官方教程</li></ul></blockquote><ol start="5"><li>动画动画卡顿、抖动现象<blockquote><ul><li><code>setInterval</code> 和 <code>setTimeout</code> 会出现<strong>执行时间延时</strong>问题</li><li>再加上<code>刷新频率</code>受屏幕分辨率和屏幕尺寸的影响，因此不同设备的屏幕刷频率可能会不同</li><li>而 <code>setInterval</code>只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。<br>以上两种情况都会导致<code>动画的执行步调</code>和<code>屏幕的刷新步调</code>不一致，从而引起<strong>丢帧现象</strong>，造成动画卡顿、抖动。</li></ul></blockquote></li></ol><ul><li><p>那为什么步调不一致就会引起丢帧呢？</p><blockquote><ul><li>首先要明白，<code>setInterval</code> 和 <code>setTimeout</code> 的执行只是在<strong>内存中对图像属性进行改变</strong>，这个变化必须要等到屏幕下次<strong>刷新时</strong>才会被更新到屏幕上。</li><li>如果两者的步调不一致，就可能会导致中间某一帧的操作被跨越过去，而直接更新下一帧的图像</li></ul></blockquote></li><li><p>案例分析</p><blockquote><p>假设屏幕每隔 <code>16.7ms</code> 刷新一次，而 setInterval 每隔 <code>10ms</code> 设置图像向左移动 <code>1px</code>， 就会出现如下<br><strong>绘制过程</strong></p><ul><li>1、第<code>0ms</code>屏幕未刷新，等待中，<code>setInterval</code>也未执行，等待中；</li><li>2、第<code>10ms</code>屏幕未刷新，等待中，<code>setInterval</code>开始执行并设置图像属性<code>left = 1px</code>;</li><li>3、第<code>16.7ms</code>屏幕开始刷新，屏幕上的图像向左移动了 <code>1px</code>，<code>setInterval</code> 未执行，继续等待中；</li><li>4、第<code>20ms</code>屏幕未刷新，等待中，<code>setInterval</code>开始执行并设置图像属性 <code>left = 2px;</code></li><li>5、 第<code>30ms</code>屏幕未刷新，等待中，<code>setInterval</code>开始执行并设置图像属性<code>left = 3px;</code></li><li>6、第<code>33.4ms</code>屏幕开始刷新，屏幕上的图像向左移动了 <code>3px</code>，<code>setInterval</code>未执行，继续等待中；</li></ul></blockquote></li></ul><blockquote><blockquote><p>注：</p><ul><li>从上面的绘制过程中可以看出，屏幕<strong>没有更新</strong><code>left = 2px</code>的那一帧画面</li><li>图像直接从1px的位置跳到了3px的的位置</li><li>这就是丢帧现象，这种现象就会引起动画卡顿</li></ul></blockquote></blockquote><ol start="6"><li>总结：定时器执行动画卡顿、抖动原理<blockquote><ul><li><code>定时器的执行时间</code>并不是一定会按预期时间执行，所以会造成<strong>动画延迟执行</strong>。</li><li>定时器的<code>执行频率</code>和屏幕的<code>刷新频率</code>不一样，会造成<strong>丢帧现象，引起动画卡顿</strong>。</li><li>当然还有<strong>各个浏览器的计时器精度</strong>也程很大差异，不能精确到 1 毫秒内<br>比如：</li><li>Chrome 的计时器精度为 4 毫秒</li><li>Firefox 和 Safari 计时器精度约为 10 毫秒<blockquote><p>为了解决上面定时器存在的问题，出现了一个新的方法 <code>requestAnimationFrame</code></p></blockquote></li></ul></blockquote></li></ol><h3 id="三、requestAnimationFrame"><a href="#三、requestAnimationFrame" class="headerlink" title="三、requestAnimationFrame"></a>三、requestAnimationFrame</h3><blockquote><p>我们都知道：浏览器是知道<code>CSS3</code>的<code>transition</code> 和 &#96;animation动画什么时候开始，并据此计算出正确的时间间隔，到时间就去刷新用户界面。</p><ul><li>但是对于 JS 动画，浏览器并不知道动画什么时候开始，如果我们能<strong>让浏览器知道动画什么时候开始，然后开始刷新屏幕</strong>。</li><li>这样不就出现丢帧问题了吗？</li></ul></blockquote><blockquote><p><code>requestAnimationFrame</code>方法就可以解决这个问题</p><ul><li><code>requestAnimationFrame</code>最大的优势是由系统(浏览器)来决定回调函数的<strong>执行时机</strong></li><li>具体一点讲，如果屏幕刷新率是60Hz，那么回调函数就每<code>16.7ms</code>被执行一次</li><li>如果刷新率是<code>75Hz</code>，那么这个时间间隔就变成了<code>1000/75 = 13.3ms</code></li><li>换句话说就是，<code>requestAnimationFrame</code>的步伐跟着系统的刷新步伐走</li><li>它能保证回调函数在屏幕<strong>每一次的刷新间隔中</strong>只被执行一次，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题。</li></ul></blockquote><ol><li><p>requestAnimationFrame 用法</p><blockquote><ul><li><code>window.requestAnimationFrame()</code>告诉浏览器——你希望执行一个动画，并且要求浏览器在<strong>下次重绘之前</strong>调用指定的回调函数更新动画。</li><li>该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</li><li><code>window.requestAnimationFrame()</code>的返回值是它的ID</li></ul><pre><code>var timer = window.requestAnimationFrame(callback);// callback 下一次重绘之前更新动画帧所调用的函数// timer 一个整数，表示请求ID 是回调列表中唯一的标识</code></pre><blockquote><p>requestAnimationFrame 方法只会执行一次</p></blockquote></blockquote></li><li><p>requestAnimationFrame 实现动画原理</p><blockquote><pre><code>window.requestAnimationFrame(f);function f() &#123;  /* 动画执行代码 */  if (条件为真) &#123; window.requestAnimationFrame(f);  &#125;&#125;</code></pre></blockquote></li><li><p>cancelAnimationFrame</p><blockquote><p><code>cancelAnimationFrame</code>方法用来<strong>取消</strong><code>requestAnimationFrame</code>方法添加的的任务。</p><pre><code>var requestId = requestAnimationFrame(fn); // 第一次执行cancelAnimationFrame(requestId);function fn() &#123;  console.log(&quot;我不会出来&quot;);&#125;</code></pre></blockquote></li><li><p>requestAnimationFrame 注意事项</p><blockquote><ul><li>为了提高性能和电池寿命，因此在大多数浏览器里，当<code>requestAnimationFrame()</code>运行在<strong>后台标签页</strong>或者隐藏的<code>&lt;iframe&gt;</code>里时，<code>requestAnimationFrame()</code>会被<strong>暂停调用</strong>以提升性能和电池寿命。</li></ul></blockquote></li><li><p>requestAnimationFrame 方法实现动画</p><blockquote><pre><code>&lt;style&gt;  .box &#123; width: 100px; height: 100px; background-color: red; position: absolute; left: 0;  &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  requestAnimationFrame(fn); // 第一次执行  function fn() &#123; var left = box.offsetLeft + 3; if (left &gt; 600) left = 600; box.style.left = left + &quot;px&quot;; if (left &lt; 600) &#123;   requestAnimationFrame(fn); // 没有有达到目标，再次执行 &#125;  &#125;&lt;/script&gt;</code></pre></blockquote></li><li><p>优雅降级 - 处理兼容问题</p><blockquote><ul><li>目前所有浏览器都支持<code>requestAnimationFrame</code>这个不带前缀的方法，但考虑有些浏览器的旧版本，还需要添加前缀，所以需要处理下兼容问题。</li></ul><pre><code>window.requestAnimFrame = (function () &#123;  return ( window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) &#123;   window.setTimeout(callback, 1000 / 60); &#125;  );&#125;)();</code></pre></blockquote></li></ol><h3 id="四、函数节流-经典面试题"><a href="#四、函数节流-经典面试题" class="headerlink" title="四、函数节流(经典面试题)"></a>四、函数节流(经典面试题)</h3><blockquote><p><strong>什么是函数节流：</strong></p><ul><li>不管事件触发有多频繁，都会保证在规定时间内执行一次真正的事件处理函数<br><strong>函数节流原理：</strong></li><li>通过判断是否到达一定时间，如果<code>时间 &gt;= 规定时间周期</code>，才会触发函数<br><strong>函数节流优点：</strong></li><li>降低函数执行的频率，从而达到节省计算资源，减少性能消耗</li></ul></blockquote><h4 id="优化JS结合CSS3的transition实现动画"><a href="#优化JS结合CSS3的transition实现动画" class="headerlink" title="优化JS结合CSS3的transition实现动画"></a>优化JS结合CSS3的transition实现动画</h4><blockquote><ul><li>如果用户<strong>频繁的点击</strong>开始动画按扭，那方块就会在未达到终点状态之间来回切换</li><li>如果我们希望在动画没有到达终点状态之前，不管用户点击多少次，都不会执行再执行新的动画。</li><li>只有动画到达终点状态后，用户再次点击，才会再执行新的动画</li></ul></blockquote><ol><li>基础版</li></ol><ul><li>设置一个锁，上锁后：在动画完成之前，用户点击无效<blockquote><ul><li>定义一个变量<code>lock</code>与定时器配合，变量 <code>lock</code> 相当于一把锁，定时器用来记录时间。</li><li>刚开始变量<code>lock = false</code>，表示锁是打开的，可以执行事件处理函数中代码，在执行时立即设置<code>lock = true</code></li><li><code>lock = true</code>，相当于当前锁是关上的，不管事件触发多少次，都不会做任何操作</li><li>等到定时器时间一到，在定时器中设置<code>lock = false</code>，相当把锁打开，下一次事件触发，则又恢复正常。</li><li>重复上面过程，就可以达到<strong>节流</strong>效果，相当于事件处理函数在1000ms内只会执行一次</li></ul><pre><code> var button = document.querySelector(&quot;.button&quot;); var box = document.querySelector(&quot;.box&quot;); var flag = false; //true表示样式还没加上去，还在原地 var lock = false; //表示未锁上 button.onclick = function () &#123; if (lock) return; //锁上时，不能进 lock=true;//动画开始后就上锁</code></pre></blockquote> &#x2F;&#x2F;如果flag&#x3D;true,则移除样式<br> if (flag) {<br> box.classList.remove(“active”);<br> flag &#x3D; false;<br> } else {<br> &#x2F;&#x2F;如果flag&#x3D;false,则添加样式<br> box.classList.add(“active”);<br> flag &#x3D; true;<br> }<blockquote></blockquote>timer &#x3D; setTimeout(function () {<br>  lock&#x3D;false; &#x2F;&#x2F;动画结束后，开锁<br>}, 1000);<br>};<blockquote><pre><code></code></pre></blockquote></li></ul><ol start="2"><li><p>第一次优化</p><blockquote><ul><li>我们把上面的<code>lock</code>变量消除掉，直接用 <code>timer</code>变量来代替。</li><li>代码中，两处<code>lock = false</code>的地方，用<code>timer = null;</code>替换, 表示当前锁是开的, 可以执行事件处理函数</li><li>把<code>if(lock)</code>换成 <code>if(timer)</code> ，如果timer有值，表示当前锁是关着的，不能再次执行事件处理函数</li><li>去掉用来保存定时器返回值 <code>timer</code>变量前面的<code>var</code>，因为<code>timer</code>在上面改成全局中声明</li></ul><pre><code> var button = document.querySelector(&quot;.button&quot;); var box = document.querySelector(&quot;.box&quot;); var flag = false; //true表示样式还没加上去，还在原地 var timer = null; //定时器不存在时，表示未锁上 button.onclick = function () &#123;if (timer) return; //锁上时，不能进</code></pre></blockquote><p> &#x2F;&#x2F;如果flag&#x3D;true,则移除样式<br> if (flag) {<br>box.classList.remove(“active”);<br>flag &#x3D; false;<br> } else {<br>&#x2F;&#x2F;如果flag&#x3D;false,则添加样式<br>box.classList.add(“active”);<br>flag &#x3D; true;<br> }</p><blockquote></blockquote><p>  &#x2F;&#x2F;动画开始后，定时器启动，即上锁<br>  timer &#x3D; setTimeout(function () {<br> timer &#x3D; null; &#x2F;&#x2F;动画结束后，开锁<br>  }, 1000);<br>};</p><blockquote><pre><code></code></pre></blockquote></li><li><p>第二次优化：封装节流函数</p><blockquote><ul><li><code>move</code>为真正的事件处理函数</li><li><code>throttle</code>是用来处理节流的函数</li><li><code>timer</code>这个变量不能放在全局作用域下,要<strong>改写</strong>到<code>throttle</code>函数内部才算是完美的。</li><li><strong>定时器的时间</strong>不能固定，可以改写成参数，让用户自己来决定</li><li><strong>事件处理函数</strong>也不能固定死，可以改写成参数，让用户自己来决定</li></ul><pre><code> var button = document.querySelector(&quot;.button&quot;); var box = document.querySelector(&quot;.box&quot;); var flag = false; //true表示样式还没加上去，还在原地 button.onclick = throttle(move, 1000); //相当于： button.onclick =function () &#123;  if (timer) return; //锁上时，不能进  fn(); //调用函数，使其运动  //动画开始后，定时器启动，即上锁  timer = setTimeout(function () &#123; timer = null; //动画结束后，开锁  &#125;, delay);&#125;;/*** throttle 节流函数* fn 事件处理函数* delay 延迟时间*/ function throttle(fn, delay = 50) &#123;var timer = null; //定时器不存在时，表示未锁上return function () &#123;  if (timer) return; //锁上时，不能进  fn(); //调用函数，使其运动  //动画开始后，定时器启动，即上锁  timer = setTimeout(function () &#123;    timer = null; //动画结束后，开锁  &#125;, delay);&#125;; &#125; //点击事件，需要处理的代码 function move() &#123;//如果flag=true,则移除样式if (flag) &#123;  box.classList.remove(&quot;active&quot;);  flag = false;&#125; else &#123;  //如果flag=false,则添加样式  box.classList.add(&quot;active&quot;);  flag = true;&#125; &#125;</code></pre></blockquote></li><li><p>第三次优化</p><blockquote><ul><li>以上事件处理函数<code>move</code>中的<code>this</code>和事件对象<code>e</code>是有问题的</li><li><code>onclick</code>原本调用的应该是<code>move</code>函数，但封装后，<code>fn()</code>直接调用，内部 <code>this</code> 肯定指向的是 <code>window</code>，同时事件对象 <code>e</code> 被丢失了</li></ul><blockquote><p>还有一个问题，就是<code>fn()</code>事件处理函数的<strong>位置问题</strong>，他是写在定时器前面，还是后面，还是定时器里面呢？</p></blockquote><ul><li>如果 fn() 写在定时器后面，相对来说没有什么问题，只是定时器会先计时，再执行fn()</li><li>如果fn()写在定时器前面，那会先执行事件处理函数，再定时器计时，那<strong>最终每次间隔时间比预期的长些</strong>，如果fn()执行时间较长，会达不到节流效果。</li><li>如果fn()写在定时器里面，那要等到计时器到达时间后才开始执行fn()，这样就会造成<strong>第一次fn()函数要在计时器到达到才执行</strong>。（针对<strong>高频事件</strong>，<code>delay</code> 的时间特别小，这个影响可以忽略不计，但如果 <code>delay</code> 的时间特别长，那这个影响就很明显了，后面用案例演示）</li><li>而我们所说的节流操作主要针对的就是<strong>高频时间</strong>，即 <code>delay</code>的时间特别小，所以面试中，各大网站上流行的面试题答案都是基于这个版本的。<blockquote><p>因此，<code>fn.apply(self, args);</code>写在定时器里面，只适合高频时间；如果是低频，就把<code>fn.apply(self, args);</code>写在定时器后面</p></blockquote></li></ul><pre><code>function throttle(fn, delay = 50) &#123;  var timer = null; //定时器不存在时，表示未锁上  return function () &#123; if (timer) return; //锁上时，不能进 //动画开始后，定时器启动，即上锁 var self = this;//将调用事件处理函数的this传过去 var args = arguments;//将事件对象e传过去 timer = setTimeout(function () &#123;   fn.apply(self, args); //只适合高频函数，调用函数，使其运动   timer = null; //动画结束后，开锁 &#125;, delay);  &#125;;&#125; //点击事件，需要处理的代码 function move() &#123;//如果flag=true,则移除样式if (flag) &#123;  box.classList.remove(&quot;active&quot;);  flag = false;&#125; else &#123;  //如果flag=false,则添加样式  box.classList.add(&quot;active&quot;);  flag = true;&#125; &#125;</code></pre></blockquote></li></ol><blockquote><ul><li>根据前面的优化，我们可以得到封装好的节流函数</li></ul></blockquote><h4 id="ES5-版本-节流函数"><a href="#ES5-版本-节流函数" class="headerlink" title="ES5 版本 - 节流函数"></a>ES5 版本 - 节流函数</h4><blockquote><ul><li><code>ES5</code>版本的定时器中的回调函数，它的this指向的是<code>window</code>，<code>arguments</code>也指的是回调函数的</li><li>所以要用变量把它们存起来再传过去</li></ul><pre><code>/*** throttle 节流函数* fn 事件处理函数* delay 执行事件处理函数的间隔时间*/function throttle(fn, delay = 20) &#123;  var timer = null; // null表示当前锁是打开的，没有锁，可以执行事件处理函数中的代码</code></pre></blockquote><p>  return function () {<br>    if (timer) return;<br>    var self &#x3D; this; &#x2F;&#x2F; 保存this 绑定事件的对象<br>    var args &#x3D; arguments; &#x2F;&#x2F; 保存arguments 主要用来获取事件对象 e<br>    &#x2F;&#x2F; 定时器计时，用来开锁<br>    timer &#x3D; setTimeout(function () {<br>      fn.apply(self, args); &#x2F;&#x2F; 事件处理函数<br>      timer &#x3D; null; &#x2F;&#x2F; 开锁<br>    }, delay);<br>    &#x2F;&#x2F;fn.apply(self, args); &#x2F;&#x2F; 事件处理函数<br>  };<br>}</p><blockquote><pre><code></code></pre></blockquote><h4 id="ES6-版本-节流函数"><a href="#ES6-版本-节流函数" class="headerlink" title="ES6 版本 - 节流函数"></a>ES6 版本 - 节流函数</h4><blockquote><ul><li><code>ES6</code>版本的节流函数用的是箭头函数的<code>setTimeout</code>，这个版本的定时器没有相应的<code>this</code>和<code>arguments</code></li><li>因此不需要用变量把它们存起来再传过去</li></ul><pre><code>/*** throttle 节流函数* fn 事件处理函数* delay 执行事件处理函数的间隔时间*/function throttle(fn, delay = 20) &#123;  var timer = null; // null表示当前锁是打开的，没有锁，可以执行事件处理函数中的代码</code></pre></blockquote><p>  return function () {<br>    if (timer) return;<br>    &#x2F;&#x2F; 定时器计时，用来开锁<br>    timer &#x3D; setTimeout(() &#x3D;&gt; {<br>      fn.apply(this, arguments); &#x2F;&#x2F; 箭头函数没有自己的this和arguments<br>      timer &#x3D; null; &#x2F;&#x2F; 开锁<br>    }, delay);<br>  };<br>}</p><blockquote><pre><code></code></pre></blockquote><h4 id="节流函数的应用场景："><a href="#节流函数的应用场景：" class="headerlink" title="节流函数的应用场景："></a>节流函数的应用场景：</h4><blockquote><ul><li>当一个事件触发的时间特别短时，就会频繁的触发事件处理函数，我们需要通过节流函数来限止执行的频率。</li><li>比如：<code>mousemove</code>、<code>mousedown</code>、<code>keydown</code>、<code>scroll</code>等事件，他们的触发时间特别短。我们可以通过节流函数来限止，在一定时间内只能执行一次</li></ul></blockquote><ol><li>案例1：对<code>mousemove</code>事件处理函数执行节流操作——高频<blockquote><ul><li>接下来我们对<code>mousemove</code>事件处理函数执行节流操作，限止其在1000ms内只能执行一次</li><li>即<code>mousemove</code>事件频繁触发，那事件处理函数也只会每间隔1000ms才会执行一次</li></ul></blockquote></li></ol><blockquote><p><strong>节流实现原理</strong></p><ul><li>用定时器作为锁，如果定时器在运行，表示当前锁是关着的，不能再次执行事件处理函数</li></ul></blockquote><ul><li>用前面封装好的节流函数，来对<code>mousemove</code>事件处理函数执行节流操作<blockquote><pre><code>&lt;script src=&quot;./throttle.js&quot;&gt;&lt;/script&gt;&lt;script&gt;// document.onmousemove = fn;//未节流document.onmousemove = throttle(fn, 1000);var i = 0;function fn() &#123;  console.log(i++);&#125;&lt;/script&gt;</code></pre></blockquote></li></ul><ol start="2"><li>案例2：规定时间内只能操作一次——低频<blockquote><ul><li>这个案例主要是用来演示上面提到事件处理函数放在<strong>定时器里面与外面</strong>的区别</li><li>我们希望点击发送按扭，就执行一次回调函数，然后间隔<code>1s </code>后，再次点击发送按扭才会再次执行回调函数。如果下一次点击时间离上一次点击时间<code>&lt; 1s</code>，就啥也不做。</li></ul><pre><code>&lt;button class=&quot;send&quot;&gt;发送&lt;/button&gt;&lt;script&gt;  var send = document.querySelector(&quot;.send&quot;);  send.onclick = throttle(fn, 1000);</code></pre></blockquote>  function fn() {<br> console.log(“111”);<br>  }<blockquote></blockquote>  function throttle(fn, delay &#x3D; 50) {<br> var timer &#x3D; null; &#x2F;&#x2F;null表示锁是打开的<br> return function () {<br>   if (timer) return; &#x2F;&#x2F;如果定时器还存在，就不能进<br>   var self &#x3D; this;<br>   var args &#x3D; arguments;<br>   timer &#x3D; setTimeout(function () {<br> timer &#x3D; null;<br>   }, delay);<br>   fn(this, args);<br> };<br>  }<blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ol><h3 id="五、CSS3动画效果开发"><a href="#五、CSS3动画效果开发" class="headerlink" title="五、CSS3动画效果开发"></a>五、CSS3动画效果开发</h3><blockquote><ul><li>在前面我们已经学习了如何利用<strong>纯JS</strong>来实现动画效果，如果实现相对较简单的动画JS肯定是没什么问题，但如果遇到相对复杂的动画，用 JS 实现起来还是很麻烦的。</li><li>我们知道，<code>CSS3</code>的<code>transition</code>可以实现过渡动画，<code>animation</code>可以实现相对复杂的动画。而且<code>CSS3</code>动画是<strong>浏览器原生支持</strong>的，相对而言性能比 JS 实现会更好。</li></ul></blockquote><h4 id="过渡事件"><a href="#过渡事件" class="headerlink" title="过渡事件"></a>过渡事件</h4><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td><code>transitionstart</code></td><td>该事件在 CSS 过渡<strong>实际开始时</strong>触发</td></tr><tr><td><code>transitionend</code></td><td>该事件在 CSS <strong>完成过渡后</strong>触发。</td></tr><tr><td><code>transitioncancel</code></td><td>该事件在 CSS 过渡动画<strong>取消时</strong>触发</td></tr><tr><td><code>transitionrun</code></td><td>该事件会在<strong>创建过渡动画前</strong>触发，即在 <code>transitionstart</code>前触发</td></tr></tbody></table><blockquote><pre><code>&lt;style&gt;  .box &#123;    width: 100px;    height: 100px;    background-color: red;    transition: width 1s ease;  &#125;  .box:hover &#123;    width: 300px;  &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  box.addEventListener(&quot;transitionend&quot;, fn, false);  function fn() &#123;    // alert(&quot;动画结束&quot;);    this.style.width = &quot;300px&quot;; // 动画结束后，停在目标点  &#125;&lt;/script&gt;</code></pre></blockquote><h4 id="动画事件"><a href="#动画事件" class="headerlink" title="动画事件"></a>动画事件</h4><blockquote><p>以下是常见的 CSS3 动画事件</p><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>animationend</td><td>该事件在 CSS 动画结束播放时触发</td></tr><tr><td>animationiteration</td><td>该事件在 CSS 动画重复播放时触发</td></tr><tr><td>animationstart</td><td>该事件在 CSS 动画开始播放时触发</td></tr><tr><td>animationcancel</td><td>该事件在 CSS 动画意外中止时触发</td></tr></tbody></table></blockquote><blockquote><ul><li><code>animationiteration</code>的触发次数是<code>重复数-1</code>，因为第一次播放动画不算</li></ul><pre><code>&lt;style&gt;  .box &#123;    width: 100px;    height: 100px;    background-color: skyblue;    /* 动画名  动画时间  速度  延时  执行次数 */    animation: move 2s ease 2s 3;  &#125;  @keyframes move &#123;    0% &#123;      width: 100px;      height: 100px;    &#125;    50% &#123;      width: 300px;      height: 100px;    &#125;    100% &#123;      width: 300px;      height: 300px;    &#125;  &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  box.addEventListener(&quot;animationstart&quot;, fn1, false);  box.addEventListener(&quot;animationend&quot;, fn2, false);  box.addEventListener(&quot;animationiteration&quot;, fn3, false);  function fn1() &#123;    console.log(&quot;动画开始前执行&quot;);  &#125;  function fn2() &#123;    console.log(&quot;动画开始结束时执行&quot;);  &#125;  function fn3() &#123;    console.log(&quot;动画重复执行时执行&quot;);  &#125;&lt;/script&gt;</code></pre></blockquote><h4 id="案例1：JS-结合-CSS3-的-transition-实现动画"><a href="#案例1：JS-结合-CSS3-的-transition-实现动画" class="headerlink" title="案例1：JS 结合 CSS3 的 transition 实现动画"></a>案例1：JS 结合 CSS3 的 transition 实现动画</h4><blockquote><p>我们希望利用 JS 与 CSS3 来实现以下动画效果，我们来看下<br><strong>实现的思路</strong></p><ul><li>整个运动过程中，方块的位置、宽、高、透明度都发生了变化</li><li>我们可以给方块添加 <code>transition</code> 过渡属性，让其支持过渡动画</li><li>然后在点击开始动画按扭时，动态添加相应的样式，那方块就会按下面效果动起来。</li></ul></blockquote><ol><li><p>基础版</p><blockquote><pre><code>&lt;style&gt;  .box &#123; position: absolute; left: 50px; top: 50px; width: 100px; height: 100px; background-color: skyblue; opacity: 1; transition: all 1s ease;  &#125;  .active &#123; left: 300px; top: 300px; width: 200px; height: 200px; opacity: 0.3;  &#125;&lt;/style&gt;&lt;button class=&quot;button&quot;&gt;开始动画&lt;/button&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  var button = document.querySelector(&quot;.button&quot;);  var box = document.querySelector(&quot;.box&quot;);  var flag = false; //true表示样式还没加上去，还在原地  button.onclick = function () &#123; //如果flag=true,则移除样式 if (flag) &#123;   box.classList.remove(&quot;active&quot;);   flag = false; &#125; else &#123;   //如果flag=false,则添加样式   box.classList.add(&quot;active&quot;);   flag = true; &#125;  &#125;;&lt;/script&gt;</code></pre></blockquote></li><li><p>动画的优化</p><blockquote><ul><li>如果用户<strong>频繁的点击</strong>开始动画按扭，那方块就会在未达到终点状态之间来回切换</li><li>如果我们希望在动画没有到达终点状态之前，不管用户点击多少次，都不会执行再执行新的动画。</li><li>只有动画到达终点状态后，用户再次点击，才会再执行新的动画</li></ul></blockquote></li></ol><ul><li><p>解决方案一：节流函数</p><blockquote><ul><li>利用前面封装好的节流函数</li></ul><pre><code>function throttle(fn, delay = 50) &#123;var timer = null; //定时器不存在时，表示未锁上return function () &#123;  if (timer) return; //锁上时，不能进  //动画开始后，定时器启动，即上锁  var self = this;//将调用事件处理函数的this传过去  var args = arguments;//将事件对象e传过去  timer = setTimeout(function () &#123;    fn.apply(self, args); //只适合高频函数，调用函数，使其运动    timer = null; //动画结束后，开锁  &#125;, delay);&#125;;&#125; //点击事件，需要处理的代码 function move() &#123; //如果flag=true,则移除样式 if (flag) &#123;   box.classList.remove(&quot;active&quot;);   flag = false; &#125; else &#123;   //如果flag=false,则添加样式   box.classList.add(&quot;active&quot;);   flag = true; &#125; &#125;</code></pre></blockquote></li><li><p>解决方案二：过渡事件</p><blockquote><ul><li>给<code>box</code>加<code>transitionend</code>事件，在过渡动画完成后，才能打开锁</li></ul><pre><code>&lt;script&gt;var button = document.querySelector(&quot;.button&quot;);var box = document.querySelector(&quot;.box&quot;);var flag = false; //true表示样式还没加上去，还在原地var lock = false; //false表示未上锁button.onclick = function () &#123;  //如果上锁了就不能进  if (lock) return;  //进来之后上锁  lock = true;  //如果flag=true,则移除样式  if (flag) &#123;    box.classList.remove(&quot;active&quot;);    flag = false;  &#125; else &#123;    //如果flag=false,则添加样式    box.classList.add(&quot;active&quot;);    flag = true;  &#125;&#125;;box.addEventListener(  &quot;transitionend&quot;,  function () &#123;    lock = false;  &#125;,  false);&lt;/script&gt;</code></pre></blockquote></li></ul><h4 id="案例2：二级伸缩菜单——低频"><a href="#案例2：二级伸缩菜单——低频" class="headerlink" title="案例2：二级伸缩菜单——低频"></a>案例2：二级伸缩菜单——低频</h4><ol><li><p>思路</p><blockquote><ul><li>使用事件委托</li><li>点击标题，拿到它后面的<code>ul</code><ul><li><code>var nextSibling = target.nextElementSibling;</code></li></ul></li><li>展开、收缩菜单<ul><li>定义一个变量<code>flag</code>来更新状态</li><li>改变<code>ul</code>的高度</li></ul></li><li>动态获取每个ul的高度<ul><li>先拿到<code>ul</code>的子元素，得到子元素的<code>length</code></li><li>再拿到第一个子元素的高度</li><li>总高度&#x3D;个数*单个高度；</li></ul></li></ul></blockquote></li><li><p>为了防止用户重复点击，造成抖动，所以要进行优化</p></li></ol><ul><li><p>CSS代码</p><blockquote><pre><code>&lt;style&gt;body,html,ul,li &#123;  margin: 0;  padding: 0;&#125;li &#123;  list-style: none;&#125;a &#123;  color: #000;  text-decoration: none;&#125;.menu &#123;  width: 200px;  margin: 50px;&#125;.menu .title &#123;  width: 100%;  height: 30px;  font-size: 20px;  background-color: skyblue;  color: #fff;  cursor: pointer;  text-indent: 1em;  user-select: none;&#125;.menu ul &#123;  height: 0;  overflow: hidden;&#125;.menu ul li a &#123;  text-indent: 2em;  display: inline-block;  width: 100%;  height: 25px;  border-bottom: 1px solid #ddd;&#125;&lt;/style&gt;&lt;div class=&quot;menu&quot;&gt; &lt;div class=&quot;title&quot;&gt;菜单一&lt;/div&gt; &lt;ul&gt;   &lt;li&gt;&lt;a href=&quot;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;   &lt;li&gt;&lt;a href=&quot;&quot;&gt;免费公开课&lt;/a&gt;&lt;/li&gt;   &lt;li&gt;&lt;a href=&quot;&quot;&gt;web前端&lt;/a&gt;&lt;/li&gt;   &lt;li&gt;&lt;a href=&quot;&quot;&gt;JAVA&lt;/a&gt;&lt;/li&gt;   &lt;li&gt;&lt;a href=&quot;&quot;&gt;大数据&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;title&quot;&gt;菜单二&lt;/div&gt; &lt;ul&gt;   &lt;li&gt;&lt;a href=&quot;&quot;&gt;免费公开课&lt;/a&gt;&lt;/li&gt;   &lt;li&gt;&lt;a href=&quot;&quot;&gt;JAVA&lt;/a&gt;&lt;/li&gt;   &lt;li&gt;&lt;a href=&quot;&quot;&gt;大数据&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;title&quot;&gt;菜单三&lt;/div&gt; &lt;ul&gt;   &lt;li&gt;&lt;a href=&quot;&quot;&gt;免费公开课&lt;/a&gt;&lt;/li&gt;   &lt;li&gt;&lt;a href=&quot;&quot;&gt;web前端&lt;/a&gt;&lt;/li&gt;   &lt;li&gt;&lt;a href=&quot;&quot;&gt;大数据&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;</code></pre></blockquote></li><li><p>JS代码——优化方案1：节流函数</p><blockquote><pre><code>&lt;script src=&quot;./throttle2.js&quot;&gt;&lt;/script&gt;&lt;script&gt;//获取元素var menu = document.querySelector(&quot;.menu&quot;);//节流操作(把fn写在定时器后面)menu.onclick = throttle(fn, 300);//事件委托function fn(e) &#123;  var target = e.target;  var targetName = target.className;  if (targetName !== &quot;title&quot;) return;  //获取菜单的后一个HTML元素  var nextSibling = target.nextElementSibling;  //获取菜单的后一个HTML元素的子元素  var children = nextSibling.children;  //获取高度  var height = children.length * children[0].offsetHeight;  //动态改变ul的值  if (target.flag) &#123;    //如果flag=true,则收缩    nextSibling.style.height = &quot;0px&quot;;    target.flag = false; //更新状态  &#125; else &#123;    //如果flag=false,则展开    nextSibling.style.height = height + &quot;px&quot;;    target.flag = true; //更新状态  &#125;&#125;&lt;/script&gt;</code></pre></blockquote></li><li><p>JS代码——优化方案2：过渡事件</p><blockquote><ul><li>给<code>ul</code>的CSS代码加上<code>transition</code>动画</li><li>声明一个变量，作为过渡动画的锁，只有动画完成了才能再一次进入</li><li>利用for循环，给每个ul加上<code>transitionend</code>事件，当动画结束时，开锁</li></ul><pre><code>.menu ul &#123;height: 0;overflow: hidden;transition: height 1s ease;&#125;&lt;script&gt; //获取元素 var menu = document.querySelector(&quot;.menu&quot;); var oUL = document.querySelectorAll(&quot;.menu ul&quot;);</code></pre></blockquote><p> var lock &#x3D; false; &#x2F;&#x2F;false表示未上锁</p><blockquote></blockquote><p> menu.onclick &#x3D; fn;<br> &#x2F;&#x2F;事件委托<br> function fn(e) {<br> if (lock) return; &#x2F;&#x2F;上锁了就不能进<br> lock &#x3D; true;<br> var target &#x3D; e.target;<br> var targetName &#x3D; target.className;<br> if (targetName !&#x3D;&#x3D; “title”) return;<br> &#x2F;&#x2F;获取菜单的后一个HTML元素<br> var nextSibling &#x3D; target.nextElementSibling;<br> &#x2F;&#x2F;获取菜单的后一个HTML元素的子元素<br> var children &#x3D; nextSibling.children;<br> &#x2F;&#x2F;获取高度<br> var height &#x3D; children.length * children[0].offsetHeight;<br> &#x2F;&#x2F;动态改变ul的值<br> if (target.flag) {<br>   &#x2F;&#x2F;如果flag&#x3D;true,则收缩<br>   nextSibling.style.height &#x3D; “0px”;<br>   target.flag &#x3D; false; &#x2F;&#x2F;更新状态<br> } else {<br>   &#x2F;&#x2F;如果flag&#x3D;false,则展开<br>   nextSibling.style.height &#x3D; height + “px”;<br>   target.flag &#x3D; true; &#x2F;&#x2F;更新状态<br> }<br> }<br> &#x2F;&#x2F; 每个ul身上添加transitionend事件，当动画结束触发了transitionend事件时，开锁<br> for (var i &#x3D; 0; i &lt; oUL.length; i++) {<br> oUL[i].addEventListener(<br>   “transitionend”,<br>   function () {<br> lock &#x3D; false; &#x2F;&#x2F;开锁<br>   },<br>   false<br> );<br> }</p><blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul><h4 id="案例3：JS-结合-CSS3-实现转盘抽奖"><a href="#案例3：JS-结合-CSS3-实现转盘抽奖" class="headerlink" title="案例3：JS 结合 CSS3 实现转盘抽奖"></a>案例3：JS 结合 CSS3 实现转盘抽奖</h4><blockquote><p>涉及知识点</p><ul><li>抽奖盘布局</li><li>抽奖概率计算原理</li><li>transitionend 事件</li><li>css3 实现缓动动画</li><li>节流锁应用</li><li>其它：权重数组、数组 sort 方法排序、switch 用法、数组的 splice 方法</li></ul></blockquote><ol><li>CSS布局<blockquote><pre><code>&lt;style&gt;  /* 初始化 */  body,  html &#123; margin: 0; padding: 0; height: 100%;  &#125;  /* 使转盘在中间 */  body &#123; display: flex; align-items: center; justify-content: center;  &#125;  .luck-draw &#123; display: flex; align-items: center; justify-content: center; width: 300px; height: 300px; background-color: tomato; border-radius: 50%;  &#125;  /* 最终是使luck-panel转动 */  .luck-draw .luck-panel &#123; width: 280px; height: 280px; border-radius: 50%; overflow: hidden; transform: rotate(-67.5deg); transition: transform 1s cubic-bezier(0.15, 0.79, 0.64, 0.97);  &#125;  /* 左边转盘 */  .panel-left &#123; position: relative; float: left; width: 50%; height: 100%;  &#125;  .panel-left .prize-item &#123; position: absolute; top: 0; left: 0; transform-origin: right center;  &#125;  .panel-left .prize-item:nth-child(1) &#123; width: 100%; height: 100%; background-color: pink;  &#125;  .panel-left .prize-item:nth-child(2) &#123; width: 100%; height: 100%; background-color: rgb(155, 185, 215); transform: rotate(-45deg);  &#125;  .panel-left .prize-item:nth-child(3) &#123; width: 100%; height: 100%; background-color: rgb(181, 228, 179); transform: rotate(-90deg);  &#125;  .panel-left .prize-item:nth-child(4) &#123; width: 100%; height: 100%; background-color: rgb(197, 169, 228); transform: rotate(-135deg);  &#125;  /* 调整文字 */  .panel-left .prize-item span &#123; position: absolute; top: 20px; right: 10px; transform: rotate(-24deg); user-select: none;  &#125;  /* 右边转盘 */  .panel-right &#123; position: relative; float: left; width: 50%; height: 100%; overflow: hidden;  &#125;  .panel-right .prize-item &#123; position: absolute; top: 0; right: 0; transform-origin: left center;  &#125;  .panel-right .prize-item:nth-child(1) &#123; width: 100%; height: 100%; background-color: rgb(241, 233, 166);  &#125;  .panel-right .prize-item:nth-child(2) &#123; width: 100%; height: 100%; background-color: rgb(234, 148, 211); transform: rotate(-45deg);  &#125;  .panel-right .prize-item:nth-child(3) &#123; width: 100%; height: 100%; background-color: rgb(232, 119, 88); transform: rotate(-90deg);  &#125;  .panel-right .prize-item:nth-child(4) &#123; width: 100%; height: 100%; background-color: #fff; transform: rotate(-135deg);  &#125;  .panel-right .prize-item span &#123; position: absolute; bottom: 20px; left: 8px; transform: rotate(155deg); user-select: none;  &#125;  /* 抽奖按钮 */  .luck-draw .luck-button &#123; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 50px; height: 50px; color: #fff; line-height: 50px; border-radius: 50%; text-align: center; background-color: tomato; user-select: none; cursor: pointer;  &#125;  .luck-button:after &#123; content: &quot;&quot;; position: absolute; top: -18px; left: 50%; transform: translateX(-50%); display: block; border: 8px solid transparent; border-bottom: 15px solid tomato;  &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;luck-draw&quot;&gt;  &lt;div class=&quot;luck-panel&quot;&gt;    &lt;div class=&quot;panel-left&quot;&gt;      &lt;div class=&quot;prize-item&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;</code></pre></blockquote></li></ol><blockquote><pre><code>  &lt;div class=&quot;prize-item&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;  &lt;div class=&quot;prize-item&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;  &lt;div class=&quot;prize-item&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;panel-right&quot;&gt;  &lt;div class=&quot;prize-item&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;  &lt;div class=&quot;prize-item&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;  &lt;div class=&quot;prize-item&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;  &lt;div class=&quot;prize-item&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</code></pre>  </div>  <div class="luck-button">抽奖</div></div>```</blockquote><ol start="2"><li>JavaScript 实现思路</li></ol><ul><li><p>第一步</p><blockquote><ul><li>动态添加抽奖礼品数据到页面，抽奖礼品保存在以下数组中</li></ul><pre><code>var prizes = [&quot;手机一部&quot;,&quot;电饭煲一台&quot;,&quot;保温杯一个&quot;,&quot;免单50元&quot;,&quot;免单100元&quot;,&quot;10元红包&quot;,&quot;10个积分&quot;,&quot;未中奖喽!&quot;,];</code></pre></blockquote></li><li><p>第二步</p><blockquote><ul><li>随机抽奖，需要通过随机函数，生成 <code>0-1</code> 之间的随机数，<code>* 数组长度</code>，通过这个随机数来确定对应的中奖奖品的下标</li></ul><pre><code>var prizesLength = prizes.length;var _index = (Math.random() * prizesLength) &gt;&gt; 0;</code></pre></blockquote></li><li><p>第三步</p><blockquote><ul><li>根据抽中的奖项，来确定转盘旋转的角度，计算公式如下</li><li><code>var deg = _index * 45 + 22.5;</code></li><li>抽奖按钮的指针要正对奖项中间，就必须转<code>22.5deg</code></li><li>每个奖项占45°</li></ul></blockquote></li><li><p>第四步</p><blockquote><ul><li>我们希望每次抽奖，转盘能在现有角度上<strong>再旋转 5 圈</strong>，然后到达指定角度</li></ul><pre><code>var sum = 0; // 相当于累加器sum += 1800;deg = sum + deg;luckpanel.style.transform = &quot;rotate(&quot; + deg + &quot;deg)&quot;;</code></pre></blockquote></li><li><p>第五步</p><blockquote><p>控制抽奖概率</p><ul><li>设置权重数组，然后随机生成 0-99 之间的整数，把生成的数插入到权重数组中</li><li>然后将该数组按照升序排序：<code>.sort(function(a,b)&#123;return a-b&#125;)</code></li><li>查询随机数在权重数组中的下标<code>indexOf()</code>，根据对应的下标来决定中的是哪个奖项</li><li>最后把随机从权重数组中删除<code>.splice(_index,1)</code>，不能破坏了权重数组</li><li>删除前面设置的随机函数</li></ul><pre><code>// 权重数组var weight = [1, 3, 7, 12, 19, 30, 40, 100];// 随机生成 0-99 之间的整数。var random = (Math.random() * 100) &gt;&gt; 0;// 把生成的随机数添加到数组中weight.push(random);// 对数组进行升序排序weight.sort(function (a, b) &#123;return a - b;&#125;);// 找到随机生成的数，在数组中的下标var _index = weight.indexOf(random);// 删除随机生成的数，不能影到我的权重数组weight.splice(_index, 1);</code></pre></blockquote></li><li><p>第六步</p><blockquote><ul><li>防止用户频繁点击按扭。在上一次抽奖没有结束前，不能再次抽奖</li><li>声明一个变量<code>lock</code>作为锁</li><li>在动画结束后，利用过渡事件开锁</li></ul><pre><code>var lock = false; // 开锁 目前没有抽奖// 点击抽奖drawButton.onclick = function () &#123;if (lock) return;lock = true; // 关锁 正在抽奖</code></pre></blockquote><p>&#x2F;&#x2F; ….</p></li></ul><p>};</p><blockquote></blockquote><p>&#x2F;&#x2F; 动画结束后 开锁<br>luckpanel.addEventListener(<br>  “transitionend”,<br>  function () {<br>    lock &#x3D; false;<br>    &#x2F;&#x2F;   alert(“恭喜你中了” + drawText);<br>  },<br>  false<br>);</p><blockquote><pre><code></code></pre></blockquote><ul><li>JS完整代码<blockquote><pre><code>&lt;script&gt; var prizes = [ &quot;手机一部&quot;, &quot;电饭煲一台&quot;, &quot;保温杯一个&quot;, &quot;免单50元&quot;, &quot;免单100元&quot;, &quot;10元红包&quot;, &quot;10个积分&quot;, &quot;未中奖哦!&quot;, ]; var prizesLength = prizes.length; //动态添加抽奖礼品数据到页面 var spans = document.querySelectorAll(&quot;.luck-panel .prize-item span&quot;); var spansLength = spans.length; for (var i = 0; i &lt; spansLength; i++) &#123; spans[i].innerText = prizes[i]; &#125; //点击按钮，随机转动转盘 var luckPanel = document.querySelector(&quot;.luck-panel&quot;); var luckButton = document.querySelector(&quot;.luck-button&quot;); var sum = 0; var lock = false; //false表示未上锁 luckButton.onclick = function () &#123; if (lock) return; //如果lock=true,就不能进 lock = true; // 权重数组 var weight = [1, 3, 7, 12, 19, 30, 40, 100]; //生成随机数 // var _index = (Math.random() * prizesLength) &gt;&gt; 0; var random = (Math.random() * 100) &gt;&gt; 0; //将随机数插入权重数组 weight.push(random); //将权重数组按升序排列 weight.sort(function (a, b) &#123;   return a - b; &#125;); //获取该随机数的下标 var _index = weight.indexOf(random); // 删除随机生成的数，不能影到我的权重数组 weight.splice(_index, 1); sum += 1800; //获取对应的文字 var prizesText = prizes[_index]; //转动转盘 var deg = sum + _index * 45 + 22.5; luckPanel.style.transform = &quot;rotate(&quot; + deg + &quot;deg)&quot;; //开锁 luckPanel.addEventListener(   &quot;transitionend&quot;,   function () &#123;     lock = false;     // alert(prizesText);   &#125;,   false ); &#125;;&lt;/script&gt;</code></pre></blockquote></li></ul><h4 id="案例：红包雨效果"><a href="#案例：红包雨效果" class="headerlink" title="案例：红包雨效果"></a>案例：红包雨效果</h4><ol><li>CSS布局</li></ol><ul><li><p>实现思路</p><blockquote><ul><li>页面背景设置黑色，同时设置超出部分显示隐藏(为了不出现滚动条)</li><li>创建一个小红包（因为每个红包旋转角度不一样，则红包旋转的角度用 JS 来设置）</li><li>布局红包中奖后的显示效果，包括关闭按扭，红包金额</li><li>黑色半透明遮罩层 (刚开始是隐藏的)</li></ul></blockquote></li><li><p>代码实现</p><blockquote><pre><code>&lt;style&gt; html, body &#123; margin: 0; padding: 0; width: 100%; height: 100%; &#125; body &#123; background-color: #000; overflow: hidden; &#125; .red-packet &#123; position: absolute; /* top: -168px; 用JS控制，用户可指定*/ width: 120px; height: 168px; background-image: url(../src/红包雨图片素材/redPacket.png); background-size: cover; cursor: pointer; &#125; /* 匀速下落动画 */ .animation-drop &#123; /* 不同的红包效果不一样，为了方便用JS操作，分开写 */ animation-name: drop; /* 动画名字 */ /*animation-duration: 5s;  动画运动时间 用JS操作，每个红包不一样 */ animation-timing-function: ease; /* 运动的速度 */ animation-fill-mode: forwards; /* 运动结束后的状态 */ &#125; @keyframes drop &#123; 0% &#123;   opacity: 0; &#125; 50% &#123;   opacity: 1; &#125; 100% &#123;   opacity: 1;   top: 1000px; &#125; &#125; .show-prize &#123; position: fixed; top: 50%; left: 50%; width: 400px; height: 579px; background-image: url(../src/红包雨图片素材/redPacket2.png); background-size: cover; transform: translate(-50%, -50%); z-index: 3; display: none; &#125; /* 中奖金额 */ .show-prize .money &#123; position: absolute; bottom: 130px; left: 50%; transform: translate(-50%, -50%); color: #fff; font-size: 35px; user-select: none; &#125; /* 关闭按钮 */ .show-prize .close &#123; position: absolute; top: 15px; right: -15px; width: 30px; height: 30px; line-height: 30px; text-align: center; background-color: #fff; border-radius: 50%; cursor: pointer; &#125;/* 黑色遮罩层 */.mask &#123;  position: absolute;  width: 100%;  height: 100%;  background-color: rgba(0, 0, 0, 0.6);  display: none;&#125;&lt;/style&gt;&lt;div id=&quot;J_redPacket&quot;&gt;  &lt;div class=&quot;red-packet animation-drop&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;show-prize&quot;&gt;    &lt;div class=&quot;money&quot;&gt;2.88元&lt;/div&gt;</code></pre></blockquote></li></ul><blockquote><pre><code>&lt;div class=&quot;close&quot;&gt;X&lt;/div&gt;</code></pre>  </div>  <div class="mask"></div></div>```</blockquote><ol start="2"><li>JS代码实现思路</li></ol><ul><li>创建一个红包类这个红包类有以下属性和方法<table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>width</td><td>红包宽 ，如果不传，用默认值 120</td></tr><tr><td>height</td><td>红包高，如果不传，用默认值 168</td></tr><tr><td>x</td><td>水平方向坐标 （随机生成） （最大值不能大于浏览器宽 - 元素宽）</td></tr><tr><td>y</td><td>垂直方向坐标 (随机生成) （最开始元素在浏览器外面，即 top&#x3D;- 元素自身高）</td></tr><tr><td>money</td><td>红包金额大小（钱）</td></tr><tr><td>rotate</td><td>旋转的角度 （-45deg 到 45deg ）之间</td></tr><tr><td>duration</td><td>运动时间 3-7s 秒之间</td></tr><tr><td>dom</td><td>红包的 dom 结构</td></tr></tbody></table></li></ul><table><thead><tr><th>实例方法</th><th>说明</th></tr></thead><tbody><tr><td>init</td><td>用于在页面初始化一个红包</td></tr><tr><td>drop</td><td>让红包运动起来,从上往下掉落</td></tr></tbody></table><table><thead><tr><th>静态方法</th><th>说明</th></tr></thead><tbody><tr><td>showRedPacket</td><td>显示红包中奖状态</td></tr><tr><td>hideRedPacket</td><td>隐藏红包中奖状态</td></tr><tr><td>sendRedPacket</td><td>用来发放红包</td></tr></tbody></table><ul><li><p>红包类</p><blockquote><ul><li>红包的宽高、坐标、旋转角度、金额都可以由用户传入</li><li>金额、宽、高都不能小于0</li><li>如果没传：<ul><li>X坐标：左右都要空出一段距离，不能让红包落在屏幕以外：<code>[30, 浏览器的宽度 - 红包的宽度];</code></li><li>Y坐标：默认值为 <code>-元素高度</code></li><li>旋转角度：随机生成 <code>[-45 ,45] </code>之间整数</li><li>运动时间，随机生成 <code>[3，7]</code>之间随机整数</li></ul></li><li>随机生成<code>[a,b]</code>之间的整数<ul><li><code>Math.random() * (b + 1 - a) + a;</code></li></ul></li></ul></blockquote></li><li><p>给红包类添加<code>init</code>方法</p><blockquote><ul><li>将创建好的红包对象，添加到body里，在页面中呈现出来</li><li>先给构造函数添加<code>init</code>方法，要加到它的<code>prototype</code>里，只要调用这个方法，就能将新创建的对象添加到页面</li><li>创建<code>div</code>元素，这个元素就是<code>new</code>出来的新对象的<code>dom</code></li><li>将新对象的宽、高、金额、坐标赋给<code>div</code></li><li>给<code>div</code>添加样式：把之前定义好的CSS样式加上去<code>.className=&quot;&quot;</code></li><li>将<code>div</code>上树，添加到页面中<blockquote><p><code>this</code>是构造函数创建的对象，<code>this.dom</code>是根据对象的属性创建出来的节点元素</p></blockquote></li></ul></blockquote></li><li><p>给红包类添加<code>drop</code>方法</p><blockquote><ul><li>调用<code>drop</code>方法，红包就可以运动</li><li>先给构造函数添加<code>init</code>方法，要加到它的<code>prototype</code>里，只要调用这个方法，就能让新创建的dom元素运动起来</li><li>给<code>dom</code>加上”animation-drop”动画</li><li>添加运动时间</li><li>同时运动结束后，会将自己的 dom 元素从页面删除<ul><li>运动结束，也就是动画结束，给dom添加<strong>动画事件</strong></li><li>然后用<code>父节点.removedChild(子节点)</code>删除元素</li></ul></li></ul></blockquote></li><li><p>在页面中创建 100 个 0-5 之间的随机数，作为红包的金额</p><blockquote><ul><li>把所生成的100个随机数塞到数组里</li><li><code>var random = Number((Math.random() * 5).toFixed(2));</code></li><li><code>.toFixed(2)</code>表示保留后两位小数</li></ul></blockquote></li><li><p>给红包类定义一个静态方法，用来实现发红包效果</p><blockquote><ul><li>传入一个包含红包金额的数组</li><li>设置一个定时器，每过<code>100ms</code>就<code>new</code>一个对象，并调用<code>drop</code>运动；这个过程也就是发出红包</li><li>用<code>.pop()</code>把红包金额传入，既能传入金额，也可以马上删除该金额</li><li>当数组的长度为0时，红包就发完了，此时消除定时器</li></ul></blockquote></li><li><p>给红包类定义两个静态方法，用来显示和隐藏打开红包的效果</p><blockquote><ul><li>打开红包效果要把<strong>new出来的实例</strong>传进去，因为只有实例身上才有<code>.money</code>这个属性</li><li>显示和隐藏就是将改变遮罩层和红包的<code>display</code></li></ul></blockquote></li><li><p>添加事件委托，把红包的点击事件委托给他的父元素来操作</p><blockquote><ul><li>当红包被点击后，就调用显示红包的静态方法</li><li>要注意！显示红包的静态方法需要传入<strong>所点击的实例</strong>，所以，在初始化时，把<code>this</code>保存在<code>dom</code>身上</li><li>给父元素添加委托事件后，可以拿到被点击的子元素，也就是<code>dom</code>，是不能直接拿到实例对象的</li></ul></blockquote></li><li><p>给关闭按钮添加点击事件</p><blockquote><ul><li>当关闭按钮被点击后，调用隐藏红包的静态效果</li></ul></blockquote></li><li><p>注意：如果不想让事件委托放在全局里</p><blockquote><ul><li>可以放在红包类里面</li><li><strong>但是</strong>，放在红包类里面，之后每次new一个实例，都会执行一次</li><li>然而我们只需要给父元素和关闭按钮添加一次委托时间</li><li>因此，我们给红包类添加静态方法</li></ul></blockquote></li><li><p>为了使代码不发生冲突，把所有代码放入一个立即执行函数中</p><blockquote><pre><code>&lt;script&gt;(function () &#123; var redPacketParent = document.getElementById(&quot;J_redPacket&quot;); var domShowPrize = redPacketParent.querySelector(&quot;.show-prize&quot;); var domMoney = redPacketParent.querySelector(&quot;.money&quot;); var domClose = redPacketParent.querySelector(&quot;.close&quot;);/** * RedPacket 红包类 * width 红包宽 * height 红包高 * @param x 红包x坐标 * @param y 红包 y 坐标 * @param money 红包金额 */ function RedPacket(money = 0, x, y, rotate, width = 120, height = 168) &#123; // 构造函数的this指的是调用函数new创建出来的新对象 //金额、宽、高都不能小于0 this.money = money &lt;= 0 ? 0 : money; this.width = width &lt;= 0 ? 0 : width; this.height = height &lt;= 0 ? 0 : height;</code></pre></blockquote><p> &#x2F;&#x2F;立即执行函数的this指向的是window，所以需要把外面的this传进去<br> this.x &#x3D; (function (that) {<br>   if (x &#x3D;&#x3D;&#x3D; 0) return 0; &#x2F;&#x2F;如果传进来的x为0，则返回0<br>   if (x) return x; &#x2F;&#x2F;只有传进来的x不等于false(undefined等)，就返回x<br>   &#x2F;&#x2F;x默认值[30, 浏览器的宽度 - 红包的宽度];<br>   var MaxLeft &#x3D; document.documentElement.clientWidth - that.width;<br>   return (Math.random() * (MaxLeft - 30 + 1) + 30) &gt;&gt; 0;<br> })(this);</p><blockquote></blockquote><p> &#x2F;&#x2F;处理y：默认值为 -height<br> this.y &#x3D; (function (that) {<br>   if (y &#x3D;&#x3D;&#x3D; 0) return 0; &#x2F;&#x2F;如果传进来的x为0，则返回0<br>   if (y) return y; &#x2F;&#x2F;只有传进来的x不等于false(undefined等)，就返回x<br>   return -that.height;<br> })(this);<br> &#x2F;&#x2F;处理旋转角度：随机生成 <code>[-45 ,45] </code>之间整数<br> this.rotate &#x3D; (function (that) {<br>   if (rotate &#x3D;&#x3D;&#x3D; 0) return 0;<br>   if (rotate) return rotate;<br>   return (Math.random() * (90 + 1) - 45) &gt;&gt; 0;<br> })(this);</p><blockquote></blockquote><p> &#x2F;&#x2F;处理运动时间：随机生成 <code>[3，7]</code>之间随机整数<br> this.duration &#x3D; (Math.random() * (4 + 1) + 3) &gt;&gt; 0;<br> this.init(); &#x2F;&#x2F;初始化<br> if (!RedPacket.flag) {<br>   &#x2F;&#x2F;没有加上委托事件才能进来<br>   RedPacket.flag &#x3D; true;<br>   &#x2F;&#x2F;事件委托<br>   redPacketParent.onclick &#x3D; function (e) {<br> var target &#x3D; e.target;<br> var bool &#x3D; target.classList.contains(“red-packet”);<br> &#x2F;&#x2F;如果点的不是红包，就返回<br> if (!bool) return;<br> RedPacket.showRedPacket(target.that);<br>   };<br>   domClose.onclick &#x3D; function () {<br> RedPacket.closeRedPacket();<br>   };<br> }<br> }<br> RedPacket.flag &#x3D; false; &#x2F;&#x2F;false表示没有添加委托事件</p><blockquote></blockquote><p> &#x2F;&#x2F;初始化红包，创建元素节点<br> RedPacket.prototype.init &#x3D; function () {<br> &#x2F;&#x2F;这里的this是指调用init方法的新对象<br> this.dom &#x3D; document.createElement(“div”);<br> this.dom.className &#x3D; “red-packet”;<br> this.dom.style.width &#x3D; this.width + “px”;<br> this.dom.style.height &#x3D; this.height + “px”;<br> this.dom.style.left &#x3D; this.x + “px”;<br> this.dom.style.top &#x3D; this.y + “px”;<br> this.dom.style.transform &#x3D; “rotate(“ + this.rotate + “deg)”;<br> &#x2F;&#x2F;把this保存他对应dom的that属性上，供后面使用<br> this.dom.that &#x3D; this;<br> this.dom.parent &#x3D; redPacketParent; &#x2F;&#x2F; 可保存，可不保存，看后续需求<br> &#x2F;&#x2F;上树<br> this.dom.parent.appendChild(this.dom);<br> };</p><blockquote></blockquote><p> &#x2F;&#x2F;让红包动起来<br> RedPacket.prototype.drop &#x3D; function () {<br> this.dom.classList.add(“animation-drop”);<br> this.dom.style.animationDuration &#x3D; this.duration + “s”;<br> this.dom.addEventListener(<br>   “animationend”,<br>   function () {<br> &#x2F;&#x2F;这里的this指的是外面的this.dom<br> this.parentNode.removeChild(this);<br>   },<br>   false<br> );<br> };</p><blockquote></blockquote><p> &#x2F;&#x2F;定义一个静态方法，实现发红包效果<br> RedPacket.sendRedPacket &#x3D; function (date) {<br> &#x2F;&#x2F;如果传入的不是数组<br> if (!Array.isArray(date))<br>   throw new Error(“date不是一个数组,请输入一个数组”);<br> var timer &#x3D; setInterval(function () {<br>   var redPacket &#x3D; new RedPacket(moneyArr.pop());<br>   redPacket.drop();<br>   if (moneyArr.length &#x3D;&#x3D;&#x3D; 0) {<br> clearInterval(timer);<br>   }<br> }, 100);<br> };</p><blockquote></blockquote><p> &#x2F;&#x2F;定义两个静态方法，显示和隐藏打开红包的效果<br> RedPacket.showRedPacket &#x3D; function (that) {<br> domShowPrize.style.display &#x3D; “block”;<br> domClose.style.display &#x3D; “block”;<br> domMoney.innerText &#x3D; that.money;<br> };<br> RedPacket.closeRedPacket &#x3D; function () {<br> domShowPrize.style.display &#x3D; “none”;<br> domClose.style.display &#x3D; “none”;<br> };</p><blockquote></blockquote><p>&#x2F;&#x2F; 页面中创建100个 0-5之间的随机数，作为红包的金额<br>var moneyArr &#x3D; [];<br>for (var i &#x3D; 0; i &lt; 100; i++) {<br>  var random &#x3D; Number((Math.random() * 5).toFixed(2));<br>  moneyArr.push(random);<br>}<br>RedPacket.sendRedPacket(moneyArr); &#x2F;&#x2F;发放红包<br>})();</p><blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul><h3 id="六、JS-实现拖拽动画"><a href="#六、JS-实现拖拽动画" class="headerlink" title="六、JS 实现拖拽动画"></a>六、JS 实现拖拽动画</h3><h4 id="案例-1：拖拽动画"><a href="#案例-1：拖拽动画" class="headerlink" title="案例 1：拖拽动画"></a>案例 1：拖拽动画</h4><blockquote><ul><li>要求拖拽的小方块只能在父元素的区域内移动</li></ul></blockquote><ol><li><p>涉及知识点：</p><blockquote><ul><li>事件对象（鼠标位置、阻止默认行为）</li><li>鼠标事件：<code>onmousedown</code>、<code>onmousemove</code>、<code>onmouseup</code></li><li>鼠标位置：<ul><li><code>clientX</code>：鼠标指针相对于浏览器的水平坐标</li><li><code>clientY</code>：鼠标指针相对于浏览器的垂直坐标</li></ul></li><li><code>e.preventDefault()</code>方法用来阻止事件产生的 “默认动作”</li><li>获取元素尺寸：<ul><li><code>offsetLeft</code>：它返回当前元素(左边框)相对于其 <code>offsetParent</code>元素的左边框<strong>内壁</strong>的距离</li><li><code>offsetTop</code>：它返回当前元素(左边框)相对于其 <code>offsetParent</code>元素的左边框<strong>内壁</strong>的距离</li><li><code>offsetWidth</code>：返回一个元素的布局宽度；标准盒模型下，包括：<code>width</code>、<code>border</code>、<code>padding</code>、滚动条宽</li><li><code>offsetHeight</code>：返回一个元素的布局宽度；标准盒模型下，包括：<code>height</code>、<code>border</code>、<code>padding</code>、滚动条宽</li><li><code>offsetParent</code>：返回离当前元素最近的<strong>定位祖先元素</strong>或最近的 table,td,th,tody 元素</li></ul></li></ul></blockquote></li><li><p>拖拽动画实现原理</p><img src="拖拽动画.png"></li></ol><blockquote><ul><li>在<strong>鼠标按下</strong>时,即<code>onmousedown</code>事件<ul><li>记录鼠标按下时<strong>与浏览器可视区</strong>左边和上边距离，即<code>e.clientX</code>和<code>e.clientY</code></li><li>同时记录<strong>被拖拽元素与定义父元素</strong>左边和上边的距离，即<code>drag.offsetLeft</code>和<code>drag.offsetTop</code></li></ul></li><li>在鼠标<strong>移动</strong>时，即<code>onmousemove</code>事件<ul><li>记录鼠标此时<strong>与浏览器可视区</strong>左边和上边距离，即<code>e.clientX</code>和<code>e.clientY</code></li><li>用<strong>当前的</strong><code>e.clientX</code> - <strong>鼠标按下时</strong><code>e.clientX</code>，得到鼠标在<strong>水平移动的距离</strong>，然后用这个距离<strong>加上</strong>移动前元素的<code>offsetLeft</code>，就得到了此时被拖拽元素的 <code>left</code>值。同得理得 <code>top</code> 值</li></ul></li><li>还要添加<code>onmouseup</code>事件，在鼠标抬起时，要<strong>解绑</strong> <code>onmousemove</code>和<code>onmouseup</code>事件<blockquote><p>以上步骤实现了元素可以自由的被拖拽，但是并不能控制元素只能在定位父元素容器中移动</p></blockquote></li></ul></blockquote><ol><li>优化</li></ol><ul><li><p>控制被拖拽元素移动时<strong>不能超出父容器</strong>，</p><blockquote><ul><li>我们只需要控制被拖拽元素的 <code>left</code> 和 <code>top</code> 值的大小</li><li>如果 <code>left &lt; 0</code>，表示超出了父容器左边界，此时设置 <code>left=0</code>，强行拉回</li><li>如果 <code>left &gt; 父容器宽 - 元素宽</code> ，表示超出了父容器右边界，此时设置 <code>left = 父容器宽 - 元素</code>宽 ,强行拉回</li><li>如果 <code>top &lt; 0</code>，表示超出了父容器上边界，此时设置 <code>top = 0</code>，强行拉回</li><li>如果 <code>top &gt; 父容器高 - 元素高</code> ，表示超出了父容器下边界，此时设置 <code>top = 父容器宽 - 元素宽</code> ,强行拉回<blockquote><p>以上步骤，实现了控制元素只能在父容器中移动</p></blockquote></li></ul></blockquote></li><li><p>兼容性处理：如果被拖拽的元素是一个图片，或元素中有文字，被拖拽时就会出现卡顿</p><blockquote><ul><li>处理办法，就是禁止掉鼠标按下时,图片和被选中的文字默认的拖拽行为。</li></ul></blockquote></li></ul><blockquote><blockquote><p>注意：</p></blockquote><ul><li>被拖拽的元素一定是定位元素</li><li>如果定位父元素是<code>body</code>，那么要给<code>body</code>设置高度</li><li><code>onmousedown</code>事件处理函数绑定的是拖拽的元素；但里面的<code>onmousemove</code>和<code>onmouseup</code>绑定的是<code>document</code></li></ul></blockquote><ul><li>完整代码<blockquote><pre><code>&lt;style&gt;html,body &#123;  margin: 0;  padding: 0;&#125;.container &#123;  position: relative;  width: 500px;  height: 500px;  background-color: #ddd;  border: 10px solid #000;  margin: 50px;&#125;.drag &#123;  position: absolute;  left: 100px;  top: 100px;  width: 50px;  height: 50px;  background-color: tomato;  cursor: move;  user-select: none;&#125;&lt;/style&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;drag&quot;&gt;我是一段文字&lt;/div&gt;&lt;/div&gt;&lt;script&gt; var container = document.querySelector(&quot;.container&quot;); var drag = document.querySelector(&quot;.drag&quot;);</code></pre></blockquote> drag.onmousedown &#x3D; function (e) {<br> e.preventDefault(); &#x2F;&#x2F;取消事件的默认行为<br> &#x2F;&#x2F;获取鼠标按下时，与浏览器左边的距离<br> var beforeClientX &#x3D; e.clientX;<br> var beforeClientY &#x3D; e.clientY;<br> &#x2F;&#x2F;获取初始位置的offsetleft和offsetTop<br> var beforeLeft &#x3D; drag.offsetLeft;<br> var beforeTop &#x3D; drag.offsetTop;<blockquote></blockquote> &#x2F;&#x2F;获取元素的宽高<br> var dragWidth &#x3D; this.offsetWidth;<br> var dragHeight &#x3D; this.offsetHeight;<blockquote></blockquote> &#x2F;&#x2F;获取定位父容器的宽高<br> var parentWidth &#x3D; this.offsetParent.clientWidth;<br> var parentHeight &#x3D; this.offsetParent.clientHeight;<blockquote></blockquote> &#x2F;&#x2F;计算元素能移动的最大范围<br> var maxLeft &#x3D; parentWidth - dragWidth;<br> var maxTop &#x3D; parentHeight - dragHeight;<blockquote></blockquote> &#x2F;&#x2F;当鼠标按下后移动时<br> document.onmousemove &#x3D; function (e) {<br>&#x2F;&#x2F;获取鼠标移动后 与浏览器的距离<br>var afterClientX &#x3D; e.clientX;<br>var afterClientY &#x3D; e.clientY;<blockquote></blockquote>&#x2F;&#x2F;获取移动的距离<br>var distanceX &#x3D; afterClientX - beforeClientX;<br>var distanceY &#x3D; afterClientY - beforeClientY;<blockquote></blockquote>&#x2F;&#x2F;获取移动后的left、top值<br>var _left &#x3D; distanceX + beforeLeft;<br>var _top &#x3D; distanceY + beforeTop;<blockquote></blockquote>&#x2F;&#x2F;限制元素移动的范围<br>_left &#x3D; _left &lt; 0 ? 0 : _left;<br>_left &#x3D; _left &gt; maxLeft ? maxLeft : _left;<br>_top &#x3D; _top &lt; 0 ? 0 : _top;<br>_top &#x3D; _top &gt; maxTop ? maxTop : _top;<blockquote></blockquote>&#x2F;&#x2F;改变drag的位置<br>drag.style.left &#x3D; _left + “px”;<br>drag.style.top &#x3D; _top + “px”;<br> };<br>&#x2F;&#x2F;鼠标松开时，移除事件监听<br> document.onmouseup &#x3D; function () {<br> document.onmousemove &#x3D; null;<br> document.onmouseup &#x3D; null;<br>};<br>};<blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul><ol start="4"><li>封装——方法1<blockquote><ul><li>功能：需要拖拽那个元素，那个元素就调用 drag 方法<ul><li>打点调用，就是在原型上添加方法</li><li>所有元素都是<code>HTMLElement</code>这个类构造出来的，所以把方法写在它的原型上</li></ul></li><li><code>drag</code>方法中有两个参数 <code>dragmove</code> 和 <code>dragend</code>，分别为两个<strong>回调函数</strong></li><li><code>dragmove</code>：<strong>拖拽过程中</strong>需要处理的事情写在 <code>dragmove</code> 函数</li><li><code>dragend</code>：<strong>拖拽结束后</strong>，需要处理的事情写在 <code>dragend</code> 函数中</li></ul></blockquote></li></ol><blockquote><blockquote><p><strong>注意：</strong></p></blockquote><ul><li>元素调用这个方法时，<code>this</code>指的就是该元素</li><li>但是，在该方法里的<code>mousemove</code>事件处理函数，绑定的是document，因此它的<code>this</code>是<code>document</code></li><li><code>mousemove</code>事件处理函数，要调整元素的位置,所以要把它的<code>this</code>替换为拖拽的元素</li><li>因此在事件处理函数外面用 <code>var that = this</code> 保存被拖拽元素，然后传进去。</li><li>要在方法代码后面调用</li></ul></blockquote><blockquote><pre><code>/***drag 拖拽方法* @param dragmove：拖拽过程中需要处理的事情写在dragmove函数* @param dragend：拖拽结束后，需要处理的事情写在dragend函数中*/HTMLElement.prototype.drag = function (dragmove, dragend) &#123;  // 当鼠标在元素身上按下去时  this.onmousedown = function (e) &#123;    var e = e || window.event;    // 取消事件的默认行为    e.preventDefault();    // 鼠标按下时，与浏览器左边的距离和上面的距离    var _clientX = e.clientX;    var _clientY = e.clientY;</code></pre></blockquote><pre><code>// 获鼠标按下时，元素与定位父元素左边和上边的距离var _offsetTop = this.offsetTop;var _offsetLeft = this.offsetLeft;</code></pre><blockquote></blockquote><pre><code>// 获取父容器的宽,用来计算元素最大leftvar dragWidth = this.offsetWidth;var dragHeight = this.offsetHeight;</code></pre><blockquote></blockquote><pre><code>// 获取元素的定位父容器的宽var parentWidth = this.offsetParent.clientWidth;var parentHeight = this.offsetParent.clientHeight;</code></pre><blockquote></blockquote><pre><code>// 计算元素能移动的最大left值和最大top值var maxLeft = parentWidth - dragWidth;var maxTop = parentHeight - dragHeight;var that = this;// 当鼠标移动时document.onmousemove = throttle(fn);//节流函数function fn(e) &#123;  // 鼠标移动时，与浏览器可视区左边的距离  var _moveClientX = e.clientX;  var _moveClientY = e.clientY;</code></pre><blockquote></blockquote><pre><code>  // 计算鼠标移动的距离  var _x = _moveClientX - _clientX;  var _y = _moveClientY - _clientY;</code></pre><blockquote></blockquote><pre><code>  // 元素的left和top值  var left = _x + _offsetLeft;  var top = _y + _offsetTop;</code></pre><blockquote></blockquote><pre><code>  // 限定left只能在 0-maxLeft之间  left = left &lt; 0 ? 0 : left;  left = left &gt; maxLeft ? maxLeft : left;</code></pre><blockquote></blockquote><pre><code>  top = top &lt; 0 ? 0 : top;  top = top &gt; maxTop ? maxTop : top;</code></pre><blockquote></blockquote><pre><code>  // 计算元素当前的位置  that.style.left = left + &quot;px&quot;;  that.style.top = top + &quot;px&quot;;</code></pre><blockquote></blockquote><pre><code>  // 移动过程中要处理的事情，调用以下回调函数  dragmove instanceof Function ? dragmove() : dragmove;&#125;;</code></pre><blockquote></blockquote><pre><code>// 当鼠标弹起来时，要对事件解绑document.onmouseup = function () &#123;  document.onmousemove = null;  // 拖拽动画结束后，调用以下回调函数  dragend instanceof Function ? dragend() : dragend;  document.onmouseup = null;&#125;;</code></pre><p>  };<br>};</p><blockquote><pre><code></code></pre></blockquote><ul><li>使用：<blockquote><pre><code>&lt;style&gt;body,html &#123;  margin: 0;  padding: 0;  height: 100%;&#125;.box &#123;  position: absolute;  width: 100px;  height: 100px;  background-color: khaki;  cursor: move;&#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;1111&lt;/div&gt;&lt;script&gt;var box = document.querySelector(&quot;.box&quot;);box.drag(  function () &#123;    console.log(&quot;我在动&quot;);  &#125;,  function () &#123;    console.log(&quot;我运动完了&quot;);  &#125;);&lt;/script&gt;&lt;script src=&quot;./throttle2.js&quot;&gt;&lt;/script&gt;</code></pre></blockquote></li></ul><ol start="5"><li>封装 drag 方法2<blockquote><ul><li>功能：被按下的元素和被拖拽的元素<strong>不是同一个元素</strong>，当在 A 元素上按下时，可拖拖拽 B 元素</li><li>给<code>HTMLElement.prototype</code>添加方法，打点调用</li><li><code>drag</code> 方法中有 3 个参数 <code>dragElement</code>,<code>dragmove</code> 和 <code>dragend</code></li><li><code>dragElement</code>：表示要拖拽的元素</li><li><code>dragmove</code>：拖拽过程中需要处理的事情写在 dragmove 函数</li><li><code>dragend</code>：拖拽结束后，需要处理的事情写在 dragend 函数中</li><li>注意：AB元素都要为定位元素</li></ul></blockquote></li></ol><blockquote><pre><code>/*** 调用drag方法的元素，为鼠标按下的元素* @param dragElement 为被拖拽的元素* @param dragmove：拖拽过程中需要处理的事情写在dragmove函数* @param dragend：拖拽结束后，需要处理的事情写在dragend函数*/ HTMLElement.prototype.drag = function (dragElement, dragmove, dragend) &#123;   // 当鼠标在元素身上按下去时   this.onmousedown = function (e) &#123;     e.preventDefault(); //取消事件的默认行为     //获取鼠标按下时，与浏览器左边的距离     var beforeClientX = e.clientX;     var beforeClientY = e.clientY;     //获取初始位置的offsetleft和offsetTop     var beforeLeft = dragElement.offsetLeft;     var beforeTop = dragElement.offsetTop;</code></pre></blockquote><pre><code> //获取元素的宽高 var dragWidth = dragElement.offsetWidth; var dragHeight = dragElement.offsetHeight;</code></pre><blockquote></blockquote><pre><code> //获取定位父容器的宽高 var parentWidth = dragElement.offsetParent.clientWidth; var parentHeight = dragElement.offsetParent.clientHeight;</code></pre><blockquote></blockquote><pre><code> //计算元素能移动的最大范围 var maxLeft = parentWidth - dragWidth; var maxTop = parentHeight - dragHeight;</code></pre><blockquote></blockquote><pre><code> //当鼠标按下后移动时 //给onmousemove做节流 document.onmousemove = throttle(fn); function fn(e) &#123;   //获取鼠标移动后 与浏览器的距离   var afterClientX = e.clientX;   var afterClientY = e.clientY;</code></pre><blockquote></blockquote><pre><code> //获取移动的距离 var distanceX = afterClientX - beforeClientX; var distanceY = afterClientY - beforeClientY;</code></pre><blockquote></blockquote><pre><code> //获取移动后的left、top值 var _left = distanceX + beforeLeft; var _top = distanceY + beforeTop;</code></pre><blockquote></blockquote><pre><code> //限制元素移动的范围 _left = _left &lt; 0 ? 0 : _left; _left = _left &gt; maxLeft ? maxLeft : _left;</code></pre><blockquote></blockquote><pre><code> _top = _top &lt; 0 ? 0 : _top; _top = _top &gt; maxTop ? maxTop : _top;</code></pre><blockquote></blockquote><pre><code> //改变drag的位置 dragElement.style.left = _left + &quot;px&quot;; dragElement.style.top = _top + &quot;px&quot;;</code></pre><blockquote></blockquote><pre><code> dragmove instanceof Function ? dragmove() : dragmove; &#125; document.onmouseup = function () &#123;        document.onmousemove = null;</code></pre><blockquote></blockquote><pre><code> dragend instanceof Function ? dragend() : dragend; document.onmouseup = null;</code></pre><p>   };<br>  };<br>};</p><blockquote><pre><code></code></pre></blockquote><ul><li>使用<blockquote><pre><code>&lt;style&gt;html,body &#123;  margin: 0;  padding: 0;&#125;.container &#123;  position: relative;  width: 500px;  height: 500px;  background-color: #ddd;  border: 10px solid #000;  margin: 50px;&#125;.drag &#123;  position: absolute;  left: 100px;  top: 100px;  width: 100px;  height: 100px;  background-color: tomato;  cursor: move;  user-select: none;&#125;.drag .title &#123;  width: 100%;  height: 30px;  background-color: khaki;&#125;&lt;/style&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;drag&quot;&gt;   &lt;div class=&quot;title&quot;&gt;登录&lt;/div&gt;   我是一段文字 &lt;/div&gt;&lt;/div&gt;&lt;script&gt;var container = document.querySelector(&quot;.container&quot;);var drag = document.querySelector(&quot;.drag&quot;);var title = document.querySelector(&quot;.title&quot;);title.drag(  drag,  function () &#123;    console.log(&quot;我在动哦&quot;);  &#125;,  function () &#123;    console.log(&quot;我停下来了&quot;);  &#125;);&lt;/script&gt;&lt;script src=&quot;./throttle2.js&quot;&gt;&lt;/script&gt;</code></pre><blockquote><p>优化：</p></blockquote><ul><li>还可以给<code>onmousemove</code>做节流，这两个封装方法都可以</li><li>可以把事件监听的方式<code>on</code>换成<code>addEventListener</code></li></ul></blockquote></li></ul><h4 id="案例-2：拖拽交换两元素位置"><a href="#案例-2：拖拽交换两元素位置" class="headerlink" title="案例 2：拖拽交换两元素位置"></a>案例 2：拖拽交换两元素位置</h4><blockquote><p>涉及知识点</p><ul><li>利用 JS 实现布局转换</li><li><code>onmousedown</code>、<code>onmousemove</code>、<code>onmouseup</code>事件</li><li>事件对象</li><li>自定义属性的使用</li><li>布局转换：浮动布局转定位</li><li>拖拽动画实现原理、如何检测两个元素<strong>碰撞</strong>，如果找到多个碰撞元素中离自己<strong>最近</strong>的一个</li><li>如何<strong>交换</strong>两个元素的位置</li></ul></blockquote><ol><li>先利用纯CSS来实现两行4列的布局<blockquote><pre><code>&lt;style&gt; html, body &#123;margin: 0;padding: 0;width: 100%;height: 100%;overflow: hidden; &#125; ul, li &#123;margin: 0;padding: 0;list-style: none; &#125; .container &#123;position: relative; /*li是相对于ul定位的*/width: 880px;height: 240px;margin: 20px; &#125; .container li &#123;float: left;width: 200px;height: 100px;line-height: 100px;font-size: 30px;text-align: center;margin: 10px;background-color: skyblue;user-select: none; &#125;&lt;/style&gt;&lt;ul class=&quot;container&quot;&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt; &lt;li&gt;6&lt;/li&gt; &lt;li&gt;7&lt;/li&gt; &lt;li&gt;8&lt;/li&gt;&lt;/ul&gt;</code></pre></blockquote></li></ol><blockquote><blockquote><p>注意</p></blockquote><ul><li><code>body</code>的宽高一定要设置为100%</li><li>父容器<code>container</code>要设置相对定位，因为li的是相对于ul进行绝对定位的;</li></ul></blockquote><ol start="2"><li>布局转换<blockquote><p>元素需要拖动，那肯定要设置为绝对定位元素，我们可以利用 JS 来实现布局转换。同时将每个版块的颜色设置为不同</p></blockquote></li></ol><blockquote><ul><li>通过 JS 获取页面中 li 元素，利用for循环把每个元素相对其定位的父元素left值和top值保存到一个对象中，然后添加进数组</li><li><code>offsetLeft</code>和<code>offsetTop</code>的值是相对于离他最近的定位祖先元素的</li><li>遍历所有 li 元素，把每个元素的都转换为<strong>定位元素</strong>，同时把之前保存到数组中的对应的 left 值和 top 值添加到对应元素身上</li><li>再准备一个 bgColor 数组，用来保存每个 li 元素的背景颜色，同时把每个元素的背景颜色更改为对应颜色</li></ul></blockquote><blockquote><blockquote><p>注意</p></blockquote><ul><li>第一次for循环保存的left值和top值是包含li的<code>margin</code>值的</li><li>因此，我们要在第二次for循环时，把li的<code>margin</code>值设置为<code>0</code></li></ul></blockquote><blockquote><pre><code>&lt;script&gt; var oUL = document.querySelector(&quot;.container&quot;); var liList = document.querySelectorAll(&quot;.container li&quot;); var len = liList.length; var coordinate = []; //用来保存li的定位值 //用for循环得到li的left、top值 for (var i = 0; i &lt; len; i++) &#123;   var obj = &#123;&#125;;   obj.left = liList[i].offsetLeft;   obj.top = liList[i].offsetTop;   coordinate.push(obj); &#125; //颜色数组 var bgColor = [   &quot;pink&quot;,   &quot;skyblue&quot;,   &quot;turquoise&quot;,   &quot;khaki&quot;,   &quot;salmon&quot;,   &quot;thistle&quot;,   &quot;orange&quot;,   &quot;red&quot;, ]; //布局转换、更改颜色及其他样式 for (var j = 0; j &lt; len; j++) &#123;   liList[j].style.position = &quot;absolute&quot;;   liList[j].style.left = coordinate[j].left + &quot;px&quot;;   liList[j].style.top = coordinate[j].top + &quot;px&quot;;   liList[j].style.margin = &quot;0px&quot;;   liList[j].style.backgroundColor = bgColor[j];   //把li的left和top值保存在它身上，不用重复获取   liList[j].left = coordinate[j].left;   liList[j].top = coordinate[j].top;   liList[j].style.zIndex = 4; //给所有li设置统一的z-index值 &#125; &lt;/script&gt;</code></pre></blockquote><ol start="3"><li>JS 实现：拖拽效果<blockquote><p>利用<strong>事件委托</strong>来处理，所以 li 子元素的 <code>mousedown</code>事件需要处理的事情，全交由父元素来处理</p><ul><li>在<code>li</code>上按下，可以拖拽<code>li</code></li><li>同时在元素没有发生碰撞时，松开鼠标，元素回到原位置<ul><li>在第二个for循环里，把<code>li</code>的<code>left</code>、<code>top</code>值保存在它身上</li></ul></li><li>被按下拖拽的元素，会在所有元素的最上面，所以他的 <code>z-index</code>要最大<ul><li>在第二个for循环里，给<code>li</code>设置统一的<code>z-index</code>值</li></ul></li></ul></blockquote></li></ol><blockquote><pre><code>oUL.onmousedown = function (e) &#123;  var target = e.target;  var tagName = target.tagName.toLowerCase();  if (tagName !== &quot;li&quot;) return;</code></pre></blockquote><p>  &#x2F;&#x2F;获取鼠标与浏览器的距离<br>  var _clientX &#x3D; e.clientX;<br>  var _clientY &#x3D; e.clientY;<br>  &#x2F;&#x2F;获取li的offsetLeft<br>  var _left &#x3D; target.left;<br>  var _top &#x3D; target.top;</p><blockquote></blockquote><p>  &#x2F;&#x2F;当元素运动时<br>  document.onmousemove &#x3D; function (e) {<br>    var clientX &#x3D; e.clientX;<br>    var clientY &#x3D; e.clientY;</p><blockquote></blockquote><p>  &#x2F;&#x2F;获取移动距离<br>  var distanceX &#x3D; clientX - _clientX + _left;<br>  var distanceY &#x3D; clientY - _clientY + _top;<br>  &#x2F;&#x2F;修改li的位置<br>  target.style.left &#x3D; distanceX + “px”;<br>  target.style.top &#x3D; distanceY + “px”;<br>  target.style.zIndex &#x3D; 20; &#x2F;&#x2F;提高层级<br>};</p><blockquote></blockquote><p>  &#x2F;&#x2F;当鼠标松开时，li回到原位,时间解绑<br>  document.onmouseup &#x3D; function () {<br>    &#x2F;&#x2F;如果没有和其他元素碰撞，就回到原位<br>    target.style.left &#x3D; target.left + “px”;<br>    target.style.top &#x3D; target.top + “px”;<br>    target.style.zIndex &#x3D; 4;&#x2F;&#x2F;鼠标松开后，层级恢复<br>    document.onmousemove &#x3D; null;<br>    document.onmouseup &#x3D; null;<br>  };<br>};</p><blockquote><pre><code></code></pre></blockquote><ol start="4"><li><p>JS 实现：碰撞检测，同时找出碰撞元素中离自己最近的元素</p><blockquote><ul><li>判断当前拖拽的元素与其它兄弟碰上是否碰上<ul><li>写一个for循环&#x2F;forEach将每个元素与当前拖拽的元素比较 </li><li>使用之前写过的函数<code>isBump(obj1, obj2)</code>，撞上了就返回true</li></ul></li><li>如果碰上，就把碰上的元素添加到数组中去</li><li>比较数组中，哪个元素离自己最近<ul><li>使用之前写过的函数<code>findNearest(obj)</code>，返回的是离自己最近的元素</li></ul></li><li>给离自己最近的元素加上外轮廓，并提高他的层级</li></ul><pre><code>var prevBumpElement = null; // 记录前一个与自己碰撞的元素var nearElement = null; // 当前碰上的元素</code></pre></blockquote><p>document.onmousemove &#x3D; function (e) {<br>  &#x2F;&#x2F; 前面代码略<br>  &#x2F;&#x2F;  …..<br>  &#x2F;&#x2F; 如何判断两个元素是否碰上<br>  var bumpElement &#x3D; []; &#x2F;&#x2F;保存离自己最近的元素<br>  &#x2F;&#x2F;将其他每个元素与当前元素比较距离<br>  for (var i &#x3D; 0; i &lt; len; i++) {<br> if (liList[i] !&#x3D;&#x3D; target) {<br>   if (isBump(target, liList[i])) {<br> bumpElement.push(liList[i]);<br>   }<br> }<br>  }</p><blockquote></blockquote><p>  &#x2F;&#x2F;找出数组中离自己最近的元素<br>  nearElement &#x3D; findNearest(target, bumpElement);<br>  &#x2F;&#x2F; 如果前一个碰上的元素存在，就把样式消掉<br>  if (prevnearElement) {<br> prevnearElement.style.outline &#x3D; “none”;<br> prevnearElement.style.zIndex &#x3D; 4; &#x2F;&#x2F;提高最近元素的层级<br>  }<br>  &#x2F;&#x2F; 如果有碰上的元素，就把碰上的最近的那个元素添加如下样式<br>  if (nearElement) {<br> nearElement.style.outline &#x3D; “10px solid pink”;<br> nearElement.style.zIndex &#x3D; 10; &#x2F;&#x2F;提高最近元素的层级<br> prevnearElement &#x3D; nearElement;<br>  }<br>};</p><blockquote><pre><code></code></pre></blockquote></li><li><p>JS 实现：在碰上时，松开鼠标，交换两元素位置</p><blockquote><p>如何判断当前鼠标是在碰撞元素上松开的呢 ？<br>如果<strong>鼠标松开</strong>时，<strong>存在</strong>离自己最近的碰上元素，那就是就是碰上时松开鼠标的</p><ul><li>碰上时，交换两元素位置，同时交换位置时，实现动画效果</li><li>交换位置时，要把碰上元素的<code>outline</code>去掉，同时<code>nearElement = null</code></li></ul><pre><code> //当鼠标松开时，li回到原位,事件解绑，层级降低 document.onmouseup = function () &#123;if (nearElement) &#123;  //碰上了就要交换两个元素的位置  //交换left、top值  var left = target.left;  var top = target.top;  target.left = nearElement.left;  target.top = nearElement.top;  nearElement.left = left;  nearElement.top = top;  //交换位置  target.style.left = target.left + &quot;px&quot;;  target.style.top = target.top + &quot;px&quot;;  nearElement.style.left = nearElement.left + &quot;px&quot;;  nearElement.style.top = nearElement.top + &quot;px&quot;;  nearElement.style.outline = &quot;none&quot;;&#125; else &#123;  //如果没有和其他元素碰撞，就回到原位  target.style.left = target.left + &quot;px&quot;;  target.style.top = target.top + &quot;px&quot;;  target.style.zIndex = 4; //松开后层级恢复&#125;document.onmousemove = null;document.onmouseup = null; &#125;;</code></pre></blockquote></li><li><p>给交换的两个元素添加动画</p><blockquote><ul><li>交换位置的时候加上动画</li><li>交换后，清除掉<code>nearElement</code>的值</li><li>动画结束后，去掉动画样式<ul><li>给每个li添加<code>transitionend</code></li></ul></li></ul><pre><code> .move &#123; transition: all 0.5s ease;  &#125;</code></pre></blockquote><p>{<br>  &#x2F;&#x2F;交换位置<br>  target.classList.add(“move”);<br>  nearElement.classList.add(“move”);</p><blockquote></blockquote><p>  target.style.left &#x3D; target.left + “px”;<br>  target.style.top &#x3D; target.top + “px”;<br>  nearElement.style.left &#x3D; nearElement.left + “px”;<br>  nearElement.style.top &#x3D; nearElement.top + “px”;<br>  nearElement.style.outline &#x3D; “none”;<br>  nearElement &#x3D; null; &#x2F;&#x2F;清除<br>}</p><blockquote></blockquote><p>  &#x2F;&#x2F;给所有li添加transitionend<br>  for (var k &#x3D; 0; k &lt; len; k++) {<br> liList[k].addEventListener(<br>   “transitionend”,<br>   function () {<br> this.classList.remove(“move”);<br> target.style.zIndex &#x3D; 4; &#x2F;&#x2F;交换后后层级恢复<br>   },<br>   false<br> );<br>  }</p><blockquote><pre><code></code></pre></blockquote></li></ol><h3 id="七、综合应用实践案例"><a href="#七、综合应用实践案例" class="headerlink" title="七、综合应用实践案例"></a>七、综合应用实践案例</h3><h4 id="案例-3：键盘控制元素运动"><a href="#案例-3：键盘控制元素运动" class="headerlink" title="案例 3：键盘控制元素运动"></a>案例 3：键盘控制元素运动</h4><blockquote><p>涉及知识点</p><ul><li>定时器 <code>setInterval()</code></li><li><code>onkeydown</code>、<code>onkeyup</code> 事件</li><li>事件对象：<ul><li><code>e.altkey</code>：表示事件触发时<code>alt</code>键是否按下，返回的是布尔值</li><li><code>key</code>：返回用户按下的物理按键的值。</li></ul></li></ul></blockquote><ul><li>动画执行原理<blockquote><ul><li>页面中有一个元素，当我按键盘上的不同方向键时，他可以<strong>向不同的方向移动</strong></li><li>如果同时按下<code>Alt</code>键和方向键，则会<strong>加速</strong>向某个方向移动</li><li>因为 <code>keydown</code> 有卡顿现象：<strong>第一次</strong>事件处理函数的调用时间与<strong>第二次</strong>的事件处理函数调用的时间间隔相对来说比较长</li><li>所以<code>keydown</code>事件主要用来判断元素的<strong>运动方向</strong>，元素的<strong>运动行为</strong>通过&#x3D;&#x3D;定时器&#x3D;&#x3D;来实现。</li></ul></blockquote></li></ul><blockquote><blockquote><p>注意</p></blockquote><ul><li>按下键盘后，调用定时器使元素运动；按住键盘时会不断调用定时器，因此要上锁，每按下一次，只能调用一次定时器；并在松开键盘后清除定时器、开锁</li><li>加速运动时，我们要使用两个键盘值，一个控制速度，一个控制方向；但定时器只能调用一次</li><li>所以把<code>keyName</code>声明在全局对象里，onkeydown<code>事件调用</code>keyMove&#96;事件时，不传入key值，让定时器去全局对象里找</li></ul></blockquote><ul><li>代码实现<blockquote><pre><code>&lt;style&gt;html,body &#123;  margin: 0;  padding: 0;&#125;.box &#123;  position: absolute;  top: 50px;  left: 100px;  width: 100px;  height: 100px;  background-color: pink;&#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;var box = document.querySelector(&quot;.box&quot;);var keyName; //因为switch要访问到，必须是全局变量var speed;var timer = null;var lock = false; //锁// 当键盘按下时，需要做的事情document.onkeydown = function (e) &#123;  keyName = e.key;  var altKey = e.altKey;  speed = altKey ? 50 : 5;  //每按下一个键，就会不断触发定时器，所以给他上锁  if (!lock) &#123;    //进来后就上锁    lock = true;    keyMove(); //不能传入key值，因为只能调用一次，第二个值传不进去  &#125;&#125;;// 根据方向，来移动元素function keyMove() &#123;timer = setInterval(function () &#123;  switch (keyName) &#123;    case &quot;ArrowLeft&quot;:      box.style.left = box.offsetLeft - speed + &quot;px&quot;;      break;    case &quot;ArrowRight&quot;:      box.style.left = box.offsetLeft + speed + &quot;px&quot;;      break;    case &quot;ArrowUp&quot;:      box.style.top = box.offsetTop - speed + &quot;px&quot;;      break;    case &quot;ArrowDown&quot;:      box.style.top = box.offsetTop + speed + &quot;px&quot;;      break;  &#125;&#125;, 50);&#125;//键盘抬起后，就开锁,并清理定时器document.onkeyup = function () &#123;  lock = false;  clearInterval(timer);&#125;;&lt;/script&gt;</code></pre></blockquote></li></ul><h4 id="案例-4：表单全选和取消"><a href="#案例-4：表单全选和取消" class="headerlink" title="案例 4：表单全选和取消"></a>案例 4：表单全选和取消</h4><blockquote><p>涉及知识点</p><ul><li><code>display:table</code>布局</li><li>自定义属性灵活使用</li><li>事件委拖</li><li>判断元素身上是否包含某个 class 类</li></ul></blockquote><ol><li><code>display:table</code>布局<blockquote><p><code>display: table;</code>系列几乎是和<code>table</code>系的元素相对应的，请看下表：</p></blockquote></li></ol><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>table</td><td>（类似 <table>）此元素会作为块级表格来显示，表格前后带有换行符。</td></tr><tr><td>table-row</td><td>（类似 <tr>）此元素会作为一个表格行显示。</td></tr><tr><td>table-cell</td><td>（类似 <td> 和 <th>）此元素会作为一个表格单元格显示。</td></tr><tr><td>inline-table</td><td>（类似 <table>）此元素会作为内联表格来显示，表格前后没有换行符。</td></tr><tr><td>table-row-group</td><td>（类似 <tbody>）此元素会作为一个或多个行的分组来显示。</td></tr><tr><td>table-header-group</td><td>（类似 <thead>）此元素会作为一个或多个行的分组来显示。</td></tr><tr><td>table-footer-group</td><td>（类似 <tfoot>）此元素会作为一个或多个行的分组来显示。</td></tr><tr><td>table-column-group</td><td>（类似 <colgroup>）此元素会作为一个或多个列的分组来显示。</td></tr><tr><td>table-column</td><td>（类似 <col>）此元素会作为一个单元格列显示。</td></tr><tr><td>table-caption</td><td>（类似 <caption>）此元素会作为一个表格标题显示。</td></tr></tbody></table><ol start="2"><li><p>CSS布局实现</p><blockquote><pre><code>&lt;style&gt; .table &#123;display: table;width: 500px;border: 1px solid #666;border-collapse: collapse; /* 合并单元格边框线 */ &#125; .tr &#123;display: table-row; &#125; .tr .th, .tr .td &#123;display: table-cell;height: 35px;border: 1px solid #666;text-align: center;vertical-align: middle; &#125; .tr .th &#123;background-color: #ddd;font-weight: bolder; &#125; .check &#123;width: 22px;height: 22px;outline: 1px solid #333;margin: 0 auto; &#125; /* 被选中状态 */ .selected &#123;width: 22px;height: 22px;background: url(../src/表单全选和登录验证提示素材/seleted.png) no-repeat;background-size: cover;outline: none; &#125;&lt;/style&gt;&lt;div class=&quot;table&quot; id=&quot;J_table&quot;&gt; &lt;div class=&quot;tr&quot;&gt;   &lt;div class=&quot;th&quot;&gt;&lt;div class=&quot;check&quot; id=&quot;J_selected&quot;&gt;&lt;/div&gt;&lt;/div&gt;   &lt;div class=&quot;th&quot;&gt;序号&lt;/div&gt;   &lt;div class=&quot;th&quot;&gt;编号&lt;/div&gt;   &lt;div class=&quot;th&quot;&gt;班级名称&lt;/div&gt;   &lt;div class=&quot;th&quot;&gt;班主任&lt;/div&gt;   &lt;div class=&quot;th&quot;&gt;操作&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;tr&quot;&gt;   &lt;div class=&quot;td&quot;&gt;&lt;div class=&quot;check check-item&quot;&gt;&lt;/div&gt;&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;001&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;202201001&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;初一（103班）&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;王老师&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;&lt;button class=&quot;del&quot;&gt;删除&lt;/button&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;tr&quot;&gt;   &lt;div class=&quot;td&quot;&gt;&lt;div class=&quot;check check-item&quot;&gt;&lt;/div&gt;&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;002&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;202201002&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;初一（104班）&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;贺老师&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;&lt;button class=&quot;del&quot;&gt;删除&lt;/button&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;tr&quot;&gt;   &lt;div class=&quot;td&quot;&gt;&lt;div class=&quot;check check-item&quot;&gt;&lt;/div&gt;&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;003&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;202201001&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;初二（105班）&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;雷老师&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;&lt;button class=&quot;del&quot;&gt;删除&lt;/button&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;tr&quot;&gt;   &lt;div class=&quot;td&quot;&gt;&lt;div class=&quot;check check-item&quot;&gt;&lt;/div&gt;&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;004&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;202201001&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;初二（106班）&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;张老师&lt;/div&gt;   &lt;div class=&quot;td&quot;&gt;&lt;button class=&quot;del&quot;&gt;删除&lt;/button&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;</code></pre></blockquote></li><li><p>JS实现思路</p></li></ol><blockquote><p><strong>第一步：处理全选按扭点击后要实现的功能</strong></p><ul><li>点击全选按钮，为所有复选框做相应的全选或取消操作</li><li>通过<code>classList.toggle</code>方法，来实现元素点击时，在选中和未选中状态之间来回切换</li><li>如果<code>classList.toggle</code>方法的返回值为<code>true</code>，表示当前是全选状态，为<code>false</code>表示未全选状态。</li><li>利用for循环给复选框增加或删除样式</li></ul><pre><code> var selectAllButton = document.getElementById(&quot;J_selected&quot;); var selectButtons = document.querySelectorAll(&quot;.table .tr .check-item&quot;); var len = selectButtons.length; selectAllButton.onclick = function () &#123;   var bool1 = this.classList.toggle(&quot;selected&quot;);   //如果bool1=true，则所有复选框都要被选中   if (bool1) &#123;     for (var i = 0; i &lt; len; i++) &#123;       selectButtons[i].classList.add(&quot;selected&quot;);     &#125;   &#125; else &#123;     for (var i = 0; i &lt; len; i++) &#123;       selectButtons[i].classList.remove(&quot;selected&quot;);     &#125;   &#125; &#125;;</code></pre></blockquote><blockquote><p>第二步：利用事件委托，处理每个子元素点击要实现的功能</p><ul><li>同样通过<code>classList.toggle</code>来实现子元素在选中和未选中状态之间切换。</li><li>然后根据<code>toggle</code>方法的返回值，来决定当前全选按扭的状态。</li><li>用for循环来判断是否所有复选框都被选中</li></ul><pre><code>var table = document.getElementById(&quot;J_table&quot;);var flag = true; //假设是全选状态//利用事件委托，处理子元素table.onclick = function (e) &#123;  var target = e.target;  var bool2 = target.classList.contains(&quot;check-item&quot;);  if (!bool2) return;  //如果点击的是复选框，就处理以下事情  var bool3 = target.classList.toggle(&quot;selected&quot;);  //如果是true，判断是否所有复选框都被选中  if (bool3) &#123;    for (var j = 0; j &lt; len; j++) &#123;      //判断所有复选框是不是都选中了      flag = selectButtons[j].classList.contains(&quot;selected&quot;);      if (!flag) &#123;        //只要有一个未选中，则全选框无样式，退出循环        selectAllButton.classList.remove(&quot;selected&quot;);        break;      &#125;    &#125;    if (flag) &#123;      //flag=true,表示全选      selectAllButton.classList.add(&quot;selected&quot;);    &#125;  &#125; else &#123;    //只要有一个为false,全选框就不会有样式    selectAllButton.classList.remove(&quot;selected&quot;);  &#125;&#125;;</code></pre></blockquote><ul><li><p>完整代码</p><blockquote><pre><code></code></pre></blockquote></li><li><p>优化</p><blockquote><ul><li>记录被选中复选框的个数，如果个数与复选框数量相等，则全选框要被选中(用这个方法，替代for循环)</li></ul><pre><code>&lt;script&gt;var table = document.getElementById(&quot;J_table&quot;);var selectAllButton = document.getElementById(&quot;J_selected&quot;);var selectButtons = document.querySelectorAll(&quot;.table .tr .check-item&quot;);var len = selectButtons.length;selectAllButton.selectedNum = 0; //记录被选中的复选框个数//处理全选按钮selectAllButton.onclick = function () &#123;  var bool1 = this.classList.toggle(&quot;selected&quot;);  //如果bool1=true，则所有复选框都要被选中  if (bool1) &#123;    for (var i = 0; i &lt; len; i++) &#123;      selectButtons[i].classList.add(&quot;selected&quot;);      this.selectedNum = len; // 保存当前选中的子元素个数    &#125;  &#125; else &#123;    for (var i = 0; i &lt; len; i++) &#123;      selectButtons[i].classList.remove(&quot;selected&quot;);      this.selectedNum = 0; // 保存当前选中的子元素个数    &#125;  &#125;&#125;;</code></pre></blockquote><p>&#x2F;&#x2F;利用事件委托，处理子元素<br>table.onclick &#x3D; function (e) {<br>  var target &#x3D; e.target;<br>  var bool2 &#x3D; target.classList.contains(“check-item”);<br>  if (!bool2) return;<br>  &#x2F;&#x2F;如果点击的是复选框，就处理以下事情<br>  var bool3 &#x3D; target.classList.toggle(“selected”);<br>  if (bool3) {<br>&#x2F;&#x2F;如果复选框被选中，个数+1<br>selectAllButton.selectedNum++;<br>&#x2F;&#x2F;如果全部选中，全选框加样式<br>if (selectAllButton.selectedNum &#x3D;&#x3D;&#x3D; len) {<br>  selectAllButton.classList.add(“selected”);<br>}<br>  } else {<br>&#x2F;&#x2F;只要有一个复选框没被选中，全选框就无样式<br>selectAllButton.selectedNum–;<br>selectAllButton.classList.remove(“selected”);<br>  }<br>};</p><blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul><h4 id="案例-5：表单验证提示效果"><a href="#案例-5：表单验证提示效果" class="headerlink" title="案例 5：表单验证提示效果"></a>案例 5：表单验证提示效果</h4><ol><li><p>CSS布局</p><blockquote><pre><code>&lt;style&gt; html, body &#123;padding: 0;margin: 0;height: 100%; &#125; body &#123;display: flex;align-items: center;justify-content: center;background-color: #000; &#125; .login &#123;width: 300px;padding: 40px;background-color: #fff;border-radius: 10px; &#125; .login .login-row &#123;position: relative;margin: 20px 0; &#125; /* 去掉input的外轮廓效果 */ input &#123;outline: none; &#125; .login-row input, .login-row button &#123;box-sizing: border-box;width: 100%;height: 50px;background-color: #f9f9f9;border: none;padding-left: 20px; &#125; button.submit &#123;font-size: 20px;background-color: tomato;color: #fff; &#125; /* JS 操作获取焦点后的样式 */ .login-row input.focus1 &#123;background-color: #fcf2f3; &#125; .login-row input.focus2 &#123;border: 1px solid tomato; &#125;       /* 输入框文字 */ .login-row .lable-tip &#123;position: absolute;top: 0;left: 20px;line-height: 50px;color: rgba(0, 0, 0, 0.4); &#125; /* 动态添加的缩放效果 */ .login-row .lable-min &#123;line-height: 30px;font-size: 13px; &#125; /* 输入提示 */ .login-row .input-tip &#123;color: tomato;font-size: 14px; &#125; /* 聚焦后提示变化 */ .hide &#123;display: none; &#125; /* 密码隐藏与显示 */ .icon-eye &#123;position: absolute;top: 15px;right: 20px;width: 30px;height: 20px;background: url(../src/表单全选和登录验证提示素材/eye-close.png)  no-repeat center;cursor: pointer; &#125; .login-row .icon-show &#123;background-image: url(../src/表单全选和登录验证提示素材/eye.png); &#125;&lt;/style&gt;&lt;div class=&quot;login&quot; id=&quot;J_login&quot;&gt; &lt;div class=&quot;login-row&quot;&gt;   &lt;input type=&quot;text&quot; class=&quot;user-name&quot; id=&quot;user-name&quot; /&gt;   &lt;label for=&quot;user-name&quot; class=&quot;lable-tip&quot;&gt;邮箱/手机号码&lt;/label&gt;   &lt;div class=&quot;input-tip&quot;&gt;请输入账户名&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;login-row&quot;&gt;   &lt;input type=&quot;password&quot; class=&quot;user-pwd&quot; id=&quot;user-pwd&quot; /&gt;   &lt;label for=&quot;user-pwd&quot; class=&quot;lable-tip&quot;&gt;密码&lt;/label&gt;   &lt;div class=&quot;input-tip&quot;&gt;请输入登录密码&lt;/div&gt;   &lt;div class=&quot;icon-eye&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;login-row&quot;&gt;   &lt;button type=&quot;submit&quot; class=&quot;submit&quot;&gt;登录&lt;/button&gt; &lt;/div&gt;&lt;/div&gt;</code></pre></blockquote></li><li><p>JS 实现思路</p><blockquote><p>第一步：处理文本框获取到焦点&#x2F;失去焦点时要实现的功能<br><strong>获取焦点时</strong></p><ul><li>不管输入框中有无内容，文字是缩小的，有红色边框线</li><li>如果有内容，无错误提示(需隐藏),无粉色背景(需去掉)</li><li>如果没有内容，有输入提示(需加上)，有粉色背景(需加上)</li></ul></blockquote></li></ol><blockquote><p><strong>失去焦点时</strong></p><ul><li>不管输入框中有无内容，无红色边框线(需去掉)</li><li>如果有内容，缩小文字(获取焦点时已加)，无输入提示(获取焦点时已设置)，无粉色背景(获取焦点时已去掉)</li><li>如果没有内容，文字正常大小(需恢复)，有粉色背景(获取焦点时已加)，有提示文字(获取焦点时已加)</li></ul></blockquote><blockquote><blockquote><p>在输入时，有可能输入内容后又删除了，但<code>onfocus</code>只会在获取焦点时触发一次</p></blockquote><ul><li>所以要开一个计时器来<strong>定期检查输入内容是否为空</strong>，这里采用 <code>requestAnimationFrame</code> 来处理。</li><li>当失去焦点时，就不再调用 <code>requestAnimationFrame</code>，所以我们可以定义一把锁，当获取焦点时开锁，可以一直重复调用 <code>requestAnimationFrame</code>，失去焦点时关锁，不再调用<blockquote><p>注意回调函数<code>requestAnimationFrame(fn)</code>，是在下次刷新前执行；获取焦点的时候，不断调用，失去焦点后，在下一次刷新前，还会调用一次</p></blockquote></li></ul></blockquote><blockquote><ul><li>获取输入框中的值：<code>.value</code></li><li>处理输入框中的空格：<code>.trim()</code></li></ul></blockquote><blockquote><p>第二步：处理点击密码框中的小眼睛，闭上与打开要实现的功能</p><ul><li>如果小眼睛关闭状态，点击后打开，然后设置密码输入框<code>type = &#39;text&#39;</code></li><li>如果小眼睛打开状态，点击后关闭，然后设置密码输入框<code>type = &#39;password&#39;</code></li></ul></blockquote><blockquote><pre><code>&lt;script&gt; var inputs = document.querySelectorAll(&quot;#J_login .login-row input&quot;); var eye = document.querySelector(&quot;.icon-eye&quot;); var pwd = document.querySelector(&quot;.user-pwd&quot;); var lock = false; // false表示锁是开的 //由于onfocus和blur都不支持事件冒泡，所以不能用事件委托 for (var i = 0; i &lt; inputs.length; i++) &#123;   inputs[i].addEventListener(&quot;focus&quot;, focusFn, false);   inputs[i].addEventListener(&quot;blur&quot;, blurFn, false); &#125;</code></pre></blockquote><p> &#x2F;&#x2F;获取焦点时<br> function focusFn() {<br>   window.requestAnimationFrame(fn);<br>   lock &#x3D; false; &#x2F;&#x2F;一旦获取焦点就开锁，启动定时器<br>   &#x2F;&#x2F;开启定时器<br>   var that &#x3D; this; &#x2F;&#x2F;this是调用focus的输入框<br>   var nextEle &#x3D; this.nextElementSibling;<br>   &#x2F;&#x2F;无论是否有内容：<br>   &#x2F;&#x2F;1. 文字缩小<br>   nextEle.classList.add(“lable-min”);<br>   &#x2F;&#x2F;2. 加边框<br>   this.classList.add(“focus2”);<br>   function fn() {<br>     var value &#x3D; that.value.trim();<br>     if (value) {<br>       &#x2F;&#x2F;如果有内容<br>       &#x2F;&#x2F;同时隐藏输入提示<br>       nextEle.nextElementSibling.classList.add(“hide”);<br>       that.classList.remove(“focus1”);<br>     } else {<br>       &#x2F;&#x2F;如果没有内容：显示输入提示<br>       nextEle.nextElementSibling.classList.remove(“hide”);<br>       that.classList.add(“focus1”);<br>     }<br>     if (!lock) {<br>       &#x2F;&#x2F;如果锁是开着的，就不断调用定时器<br>       window.requestAnimationFrame(fn);<br>     }<br>   }<br> }</p><blockquote></blockquote><p> &#x2F;&#x2F;失去焦点时<br> function blurFn() {<br>   lock &#x3D; true; &#x2F;&#x2F;失去焦点就关锁，清除定时器<br>   var nextEle &#x3D; this.nextElementSibling;<br>   &#x2F;&#x2F;无论是否有内容，去掉红色边框线<br>   this.classList.remove(“focus2”);<br>   var value &#x3D; this.value.trim();<br>   if (!value) {<br>     &#x2F;&#x2F;如果没有内容<br>     &#x2F;&#x2F;1.文字正常<br>     nextEle.classList.remove(“lable-min”);<br>     &#x2F;&#x2F;2.粉色背景<br>     &#x2F;&#x2F; this.classList.add(“focus1”);<br>   }<br> }</p><blockquote></blockquote><p> &#x2F;&#x2F;密码眼睛<br> eye.onclick &#x3D; function () {<br>   var bool &#x3D; eye.classList.toggle(“icon-show”);<br>   if (bool) {<br>     pwd.type &#x3D; “text”;<br>   } else {<br>     pwd.type &#x3D; “password”;<br>   }<br> };</p><blockquote><p></script></p><pre><code></code></pre></blockquote><h4 id="案例-6：放大镜效果"><a href="#案例-6：放大镜效果" class="headerlink" title="案例 6：放大镜效果"></a>案例 6：放大镜效果</h4><blockquote><p>涉及知识点</p><ul><li>选项卡效果、事件代理</li><li>onmouseover、onmousemove 事件</li><li>事件对象：e.pageX、e.pageY</li><li>元素偏移尺寸：offsetLeft、offsetTop</li><li>操作图片的 src 属性，完成图片替换</li><li>元素的显示与隐藏、事件冒泡机制</li></ul></blockquote><ol><li>CSS布局<blockquote><pre><code>&lt;style&gt; /* 初始化 */ body, html, ul, li &#123;margin: 0;padding: 0; &#125; li &#123;list-style: none; &#125; .magnify &#123;position: relative;width: 350px;padding: 20px;border: 1px solid #ddd;margin: 50px; &#125;</code></pre></blockquote> &#x2F;* 大图 *&#x2F;<br> .magnify .main {<br>position: relative;<br>width: 100%;<br>height: 350px;<br> }<br> .magnify .main img {<br>width: 350px;<br>height: 350px;<br> }<br> .magnify .mask {<br>position: absolute;<br>top: 0;<br>left: 0;<br>width: 150px;<br>height: 150px;<br>background-color: rgba(232, 216, 94, 0.5);<br>cursor: move;<br> }<blockquote></blockquote> &#x2F;* 小图 *&#x2F;<br> .magnify .small-img {<br>width: 100%;<br>height: 85px;<br>display: flex;<br>align-items: flex-end;<br>justify-content: space-between;<br> }<br> .magnify .small-img li {<br>width: 75px;<br>height: 75px;<br> }<br> .magnify .small-img li img {<br>width: 100%;<br>height: 100%;<br>cursor: pointer;<br> }<br> .active {<br>outline: 3px solid red;<br>  }<blockquote></blockquote> &#x2F;* 大图预览 <em>&#x2F;<br> .magnify .big-img {<br>position: absolute;<br>top: 0;<br>left: 400px;<br>width: 450px;<br>height: 475px;<br>overflow: hidden;<br>&#x2F;</em> display: none; *&#x2F;<br> }<br> .magnify .big-img img {<br>position: absolute;<br>top: 0;<br>left: 0;<br> }<blockquote><p></style></p><div class="magnify"> <!-- 主图 --> <div class="main" id="J_main-img-wrap">   <img src="../src/放大镜图片素材/big1.jpg" alt="" />   <div class="mask"></div> </div> <!-- 小图 --> <ul class="small-img" id="J_small-img-wrap">   <li>     <img</blockquote></li></ol><blockquote><pre><code>   src=&quot;../src/放大镜图片素材/small1.jpg&quot;   data-src=&quot;../src/放大镜图片素材/big1.jpg&quot; /&gt;</code></pre>   </li>   <li>     <img       src="../src/放大镜图片素材/small2.jpg"       data-src="../src/放大镜图片素材/big2.jpg"     />   </li>   <li>     <img       src="../src/放大镜图片素材/small3.jpg"       data-src="../src/放大镜图片素材/big3.jpg"     />   </li>   <li>     <img       src="../src/放大镜图片素材/small4.jpg"       data-src="../src/放大镜图片素材/big4.jpg"     />   </li> </ul> <!-- 大图预览 --> <div class="big-img" id="J_big-img-wrap">   <img src="../src/放大镜图片素材/big1.jpg" alt="" id="J_big-img" /> </div></div>```</blockquote><ol start="2"><li>JS 实现思路</li></ol><ul><li>第一步：处理点击小图要实现的效果<blockquote><ul><li>利用事件委托，点击小图后要处理的事情委托给他的们的祖先元素 ul 来处理。</li><li>给小图加边框</li><li>更换主图和预览大图<ul><li>小图设置自定义属性，绑定相应大图的地址</li></ul></li></ul></blockquote></li></ul><blockquote><pre><code> //事件委托：点击小图，切换大图 smallImgWrap.onclick = function (e) &#123;   var target = e.target;   var tagName = target.tagName.toLowerCase();</code></pre></blockquote><p>   if (tagName !&#x3D;&#x3D; “img”) return;<br>   &#x2F;&#x2F;清除前一个选择元素样式<br>   prevSmallImg.classList.remove(“active”);<br>   &#x2F;&#x2F;给当前点击的图片添加边框;<br>   target.classList.add(“active”);<br>   &#x2F;&#x2F;把当前点击的图片更换为前一个激活的图片<br>   prevSmallImg &#x3D; target;<br>   &#x2F;&#x2F;更换主图<br>   mainImg.src &#x3D; target.dataset.src;<br>   &#x2F;&#x2F;更换大图<br>   bigImg.src &#x3D; target.dataset.src;<br> };</p><blockquote><pre><code></code></pre></blockquote><ul><li><p>第二步：当鼠标滑动到主图容器和离开主图容器要实现的效果</p><blockquote><ul><li>鼠标滑动到主图容器，要显示透明滑块，同时显示大图容器</li><li>鼠标离开主图容器，要隐藏透明滑块，同时隐藏大图容器</li></ul><pre><code> //当鼠标滑动到主图容器 mainImgWrap.onmouseover = function () &#123; mask.style.display = &quot;block&quot;; bigImgWrap.style.display = &quot;block&quot;; &#125;; //当鼠标离开主图容器 mainImgWrap.onmouseout = function () &#123; mask.style.display = &quot;none&quot;; bigImgWrap.style.display = &quot;none&quot;; &#125;;</code></pre></blockquote></li><li><p>第三步：实现滑块跟随之鼠标移动，并且块的中心位置为鼠标当前所在位置</p><blockquote><ul><li>设置滑块相对主图容器的 left 和 top 值</li><li><code>left 值 = 鼠标与浏览器左边距离 - 主图与浏览器左边距离 - 滑块宽度的一半</code></li><li><code>top 值 = 鼠标与浏览器上边距离 - 主图与浏览器上边距离 - 滑块高度的一半</code><ul><li>与浏览器的距离考虑滚动条的存在，使用<code>.pageX</code></li><li>主图与浏览器的距离：由于<code>main-wrap</code>与·浏览器还隔着父容器<code>magnify</code>,所以不能直接用<code>offsetLeft</code>；需要调用之前写过的函数</li><li>滑块宽高用<code>.offsetWidth</code>来获取<blockquote><p>减去宽&#x2F;高的一半，就可以使滑块的中心位置为鼠标当前所在位置</p></blockquote></li></ul></li></ul></blockquote></li><li><p>第四步：限止滑块的滑块区域</p><blockquote><ul><li>滑块能滑动的最小水平距离 &#x3D; 0 ，最大水平距离 &#x3D; 主图容器宽 - 滑块宽</li><li>滑块能滑动的最小垂直距离 &#x3D; 0 ，最大垂距离 &#x3D; 主图容器高 - 滑块高</li></ul></blockquote></li></ul><blockquote><pre><code> //实现滑块跟随着鼠标移动 mainImgWrap.onmousemove = function (e) &#123;   //1. 获取鼠标与页面的距离   var pageX = e.pageX;   var pageY = e.pageY;   //2.获取主图容器与浏览器的距离   var mainLeft = getPosition(this).left;   var mainTop = getPosition(this).top;   //3.获取滑块宽高   var maskWidth = mask.offsetWidth;   var maskHeight = mask.offsetHeight;</code></pre></blockquote><p>   &#x2F;&#x2F;4. 计算滑块的left 和 top值 (鼠标在滑块中心)<br>   var left &#x3D; pageX - mainLeft - maskWidth &#x2F; 2;<br>   var top &#x3D; pageY - mainTop - maskHeight &#x2F; 2;</p><blockquote></blockquote><p>   &#x2F;&#x2F;5. 限制滑块距离<br>   var maxLeft &#x3D; this.clientWidth - maskWidth;<br>   var maxTop &#x3D; this.clientHeight - maskHeight;</p><blockquote></blockquote><p>   left &#x3D; left &lt; 0 ? 0 : left; &#x2F;&#x2F;当left&lt;0<br>   left &#x3D; left &gt; maxLeft ? maxLeft : left;<br>   top &#x3D; top &lt; 0 ? 0 : top; &#x2F;&#x2F;当top&lt;0<br>   top &#x3D; top &gt; maxTop ? maxTop : top;</p><blockquote></blockquote><p>   &#x2F;&#x2F; 设置滑块的left和top值。<br>   mask.style.left &#x3D; left + “px”;<br>   mask.style.top &#x3D; top + “px”;<br> };</p><blockquote></blockquote><p> &#x2F;&#x2F; 获取当前元素与浏览器的left和top值<br> function getPosition(el) {<br>   &#x2F;&#x2F; 获取当前元素左偏移量<br>   var left &#x3D; el.offsetLeft;<br>   var top &#x3D; el.offsetTop;<br>   &#x2F;&#x2F; 获了当前元素的offsetParent<br>   var parent &#x3D; el.offsetParent;<br>   &#x2F;&#x2F; 如果 offsetParent 存在，则一直获取,计算他的offsetLeft值，如果不存在，则终止<br>   while (parent) {<br>     left +&#x3D; parent.offsetLeft; &#x2F;&#x2F; 与每一轮元素的父元素与其定位父元素左边距离累加<br>     top +&#x3D; parent.offsetTop;<br>     &#x2F;&#x2F; 计算父元素左边框大小<br>     style &#x3D; getComputedStyle(parent, null);<br>     borderLeft &#x3D; parseInt(style.borderLeftWidth); &#x2F;&#x2F; 过滤单位部分，只取数字部分<br>     borderTop &#x3D; parseInt(style.borderTopWidth);<br>     &#x2F;&#x2F; 把左边框累加进去<br>     left +&#x3D; borderLeft;<br>     top +&#x3D; borderTop;<br>     parent &#x3D; parent.offsetParent;<br>   }<br>   &#x2F;&#x2F; 最终返回获取的left值<br>   return { left: left, top: top };<br> }</p><blockquote><pre><code></code></pre></blockquote><ul><li>第五步：处理大图预览的对应移动的位置<blockquote><ul><li>通过以下公式，来求大图对应移动的 left 和 top 值</li><li>滑块滑动的距离 &#x2F; 滑块能滑动的最大距 &#x3D; 大图移动的距离 &#x2F; 大图能移动的最大距离</li><li>大图移动的距离&#x3D;（滑块滑动的距离 &#x2F; 滑块能移动的最大距离） * 大图能移动的最大距离</li></ul><pre><code> //处理大图预览的对应移动的位置 // 1.大图最大滑动水平距离 即 left最大值 var bigMaxLeft = bigImg.clientWidth - bigImgWrap.clientWidth; // 大图最大滑动垂直距离，即top最大值 var bigMaxTop = bigImg.clientHeight - bigImgWrap.clientHeight; //2. 计算大图的位置 var bigLeft = (left / maxLeft) * bigMaxLeft; var bigTop = (top / maxTop) * bigMaxTop;</code></pre></blockquote> &#x2F;&#x2F; 设置大图的left和top值(负数)<br> bigImg.style.left &#x3D; -bigLeft + “px”;<br> bigImg.style.top &#x3D; -bigTop + “px”;<blockquote><pre><code></code></pre></blockquote></li></ul><ol start="3"><li><p>性能优化</p><blockquote><ul><li><code>onmousemove</code>做节流操作；引用节流函数</li><li>将<code>onmousemove</code>里面能一次性获取的放在外面，提前获取到；减少重排重绘，节省性能</li></ul></blockquote></li><li><p>完整代码</p><blockquote><pre><code>&lt;script&gt; var mainImgWrap = document.getElementById(&quot;J_main-img-wrap&quot;); var smallImgWrap = document.getElementById(&quot;J_small-img-wrap&quot;); var bigImgWrap = document.getElementById(&quot;J_big-img-wrap&quot;);</code></pre></blockquote><p> var smallImgs &#x3D; document.querySelectorAll(“#J_small-img-wrap img”);<br> var mainImg &#x3D; document.querySelector(“#J_main-img-wrap img”);<br> var bigImg &#x3D; document.querySelector(“#J_big-img-wrap img”);</p><blockquote></blockquote><p> var mask &#x3D; document.querySelector(“#J_main-img-wrap .mask”);<br> var prevSmallImg &#x3D; smallImgs[0];</p><blockquote></blockquote><p> &#x2F;&#x2F;事件委托：点击小图，切换大图<br> smallImgWrap.onclick &#x3D; function (e) {<br>var target &#x3D; e.target;<br>var tagName &#x3D; target.tagName.toLowerCase();</p><blockquote></blockquote><p>if (tagName !&#x3D;&#x3D; “img”) return;<br>&#x2F;&#x2F;清除前一个选择元素样式<br>prevSmallImg.classList.remove(“active”);<br>&#x2F;&#x2F;给当前点击的图片添加边框;<br>target.classList.add(“active”);<br>&#x2F;&#x2F;把当前点击的图片更换为前一个激活的图片<br>prevSmallImg &#x3D; target;<br>&#x2F;&#x2F;更换主图<br>mainImg.src &#x3D; target.dataset.src;<br>&#x2F;&#x2F;更换大图<br>bigImg.src &#x3D; target.dataset.src;<br> };<br> var maskWidth;<br> var maskHeight;<br> var bigMaxLeft;<br> var bigMaxTop;</p><blockquote></blockquote><p> &#x2F;&#x2F;当鼠标滑动到主图容器<br> mainImgWrap.onmouseover &#x3D; function () {<br>mask.style.display &#x3D; “block”;<br>bigImgWrap.style.display &#x3D; “block”;</p><blockquote></blockquote><p>&#x2F;&#x2F;3.获取滑块宽高<br>maskWidth &#x3D; mask.offsetWidth;<br>maskHeight &#x3D; mask.offsetHeight;</p><blockquote></blockquote><p>&#x2F;&#x2F; 1.大图最大滑动水平距离 即 left最大值<br>bigMaxLeft &#x3D; bigImg.clientWidth - bigImgWrap.clientWidth;<br>&#x2F;&#x2F; 大图最大滑动垂直距离，即top最大值<br>bigMaxTop &#x3D; bigImg.clientHeight - bigImgWrap.clientHeight;<br>};<br> &#x2F;&#x2F;当鼠标离开主图容器<br> mainImgWrap.onmouseout &#x3D; function () {<br>mask.style.display &#x3D; “none”;<br>bigImgWrap.style.display &#x3D; “none”;<br> };</p><blockquote></blockquote><p> &#x2F;&#x2F;2.获取主图容器与浏览器的距离<br> var mainLeft &#x3D; getPosition(mainImgWrap).left;<br> var mainTop &#x3D; getPosition(mainImgWrap).top;</p><blockquote></blockquote><p> &#x2F;&#x2F;获取主图容器的宽高<br> var mainImgWrapWidth &#x3D; mainImgWrap.clientWidth;<br> var mainImgWrapHeight &#x3D; mainImgWrap.clientHeight;</p><blockquote></blockquote><p> &#x2F;&#x2F;实现滑块跟随着鼠标移动<br> mainImgWrap.onmousemove &#x3D; throttle(fn, 100);<br> function fn(e) {<br>&#x2F;&#x2F;1. 获取鼠标与页面的距离<br>var pageX &#x3D; e.pageX;<br>var pageY &#x3D; e.pageY;</p><blockquote></blockquote><p>&#x2F;&#x2F;4. 计算滑块的left 和 top值 (鼠标在滑块中心)<br>var left &#x3D; pageX - mainLeft - maskWidth &#x2F; 2;<br>var top &#x3D; pageY - mainTop - maskHeight &#x2F; 2;</p><blockquote></blockquote><p>&#x2F;&#x2F;5. 限制滑块距离<br>var maxLeft &#x3D; mainImgWrapWidth - maskWidth;<br>var maxTop &#x3D; mainImgWrapHeight - maskHeight;</p><blockquote></blockquote><p>left &#x3D; left &lt; 0 ? 0 : left; &#x2F;&#x2F;当left&lt;0<br>left &#x3D; left &gt; maxLeft ? maxLeft : left;<br>top &#x3D; top &lt; 0 ? 0 : top; &#x2F;&#x2F;当top&lt;0<br>top &#x3D; top &gt; maxTop ? maxTop : top;</p><blockquote></blockquote><p>&#x2F;&#x2F; 设置滑块的left和top值。<br>mask.style.left &#x3D; left + “px”;<br>mask.style.top &#x3D; top + “px”;</p><blockquote></blockquote><p>&#x2F;&#x2F;处理大图预览的对应移动的位置<br>&#x2F;&#x2F;2. 计算大图的位置<br>var bigLeft &#x3D; (left &#x2F; maxLeft) * bigMaxLeft;<br>var bigTop &#x3D; (top &#x2F; maxTop) * bigMaxTop;</p><blockquote></blockquote><p>&#x2F;&#x2F; 设置大图的left和top值(负数)<br>bigImg.style.left &#x3D; -bigLeft + “px”;<br>bigImg.style.top &#x3D; -bigTop + “px”;<br> }</p><blockquote></blockquote><p> &#x2F;&#x2F; 获取当前元素与浏览器的left和top值<br> function getPosition(el) {<br>&#x2F;&#x2F; 获取当前元素左偏移量<br>var left &#x3D; el.offsetLeft;<br>var top &#x3D; el.offsetTop;<br>&#x2F;&#x2F; 获了当前元素的offsetParent<br>var parent &#x3D; el.offsetParent;<br>&#x2F;&#x2F; 如果 offsetParent 存在，则一直获取,计算他的offsetLeft值，如果不存在，则终止<br>while (parent) {<br>  left +&#x3D; parent.offsetLeft; &#x2F;&#x2F; 与每一轮元素的父元素与其定位父元素左边距离累加<br>  top +&#x3D; parent.offsetTop;<br>  &#x2F;&#x2F; 计算父元素左边框大小<br>  style &#x3D; getComputedStyle(parent, null);<br>  borderLeft &#x3D; parseInt(style.borderLeftWidth); &#x2F;&#x2F; 过滤单位部分，只取数字部分<br>  borderTop &#x3D; parseInt(style.borderTopWidth);<br>  &#x2F;&#x2F; 把左边框累加进去<br>  left +&#x3D; borderLeft;<br>  top +&#x3D; borderTop;<br>  parent &#x3D; parent.offsetParent;<br>}<br>  &#x2F;&#x2F; 最终返回获取的left值<br>  return { left: left, top: top };<br>}</p><blockquote></blockquote><p> &#x2F;&#x2F; 节流操作<br> function throttle(fn, delay &#x3D; 20) {<br>var timer &#x3D; null; &#x2F;&#x2F; null表示当前锁是打开的，没有锁，可以执行事件处理函数中的代码<br>return function () {<br>  if (timer) return;<br>  var self &#x3D; this; &#x2F;&#x2F; 保存this 绑定事件的对象<br>  var args &#x3D; arguments; &#x2F;&#x2F; 保存arguments 主要用来获取事件对象 e<br>  &#x2F;&#x2F; 定时器计时，用来开锁<br>  timer &#x3D; setTimeout(function () {<br>fn.apply(self, args); &#x2F;&#x2F; 事件处理函数<br>timer &#x3D; null; &#x2F;&#x2F; 开锁<br>  }, delay);<br>};<br> }</p><blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ol><h3 id="八、手写防抖函数（经典面试题）"><a href="#八、手写防抖函数（经典面试题）" class="headerlink" title="八、手写防抖函数（经典面试题）"></a>八、手写防抖函数（经典面试题）</h3><ol><li>什么是防抖 ？<blockquote><ul><li>是指只有在间隔时间达到规定时间后才会执行一次真正的事件处理函数</li><li>如果在规定时间内再次触发事件，则会重新计时。<br>接下来我们通过一个经典的<strong>防抖案例：搜索查询</strong>来作为切入点展开讲解。</li></ul></blockquote></li></ol><blockquote><p>搜索查询 - <strong>功能需求</strong></p><ul><li>当我们在表单中输入内容时，希望在抬起键盘间隔<code>500ms</code>毫秒之后，获取输入框中输入的内容，然后再在事件处理函数中向后台发送请求，请求查询。</li></ul></blockquote><ol start="2"><li>搜索查询 - 未实现防抖前效果<blockquote><ul><li>我们想要在键盘抬起后，获取输入框中的内容，然后再发送请求，请求查询</li><li>我们可以通过 <code>keyup</code> 事件来处理，但是当我们抬起键盘的那一刻就会触发 <code>keup</code> 事件</li><li>也就意味着我<strong>每次</strong>输一个字，就会触发一次 <code>keyup</code> 事件</li></ul></blockquote></li></ol><blockquote><pre><code>&lt;body&gt;搜索查询：&lt;input type=&quot;text&quot; /&gt;&lt;script&gt;   var search = document.querySelector(&quot;input&quot;);   search.onkeyup = function () &#123;     console.log(this.value);     // 获取输入框内容，向后台发请求查询     // ....发送请求代码省略   &#125;;&lt;/script&gt;&lt;/body&gt;</code></pre></blockquote><blockquote><p>以上写法存在问题</p><ul><li>以上效果肯定不是我们想要的，因为事件处理函数的<strong>执行频率太高了</strong>。<br><strong>期望效果</strong></li><li>我们希望的是在我们抬起键盘<code>500ms</code>后，才真正的执行一次事件处理函数中的代码。</li><li>如果在<code>500ms</code>以内，再次输入内容，则会<strong>重新计时</strong>，不会执行事件处理函数中的代码。</li></ul></blockquote><ol start="3"><li>搜索查询 - 实现防抖后效果<br><strong>实现逻辑</strong><blockquote><ul><li>我们可以通过一个<strong>定时器</strong>来计时， 然后在定时器到达指定时间后，就执行事件处理函数中代码，向后台发送请求，请求查询</li><li>如果在定时器没有达到指定时间内，再次触发keyup事件，就把<strong>上一次的定时器清除掉</strong>，重新再开一个定时器<strong>重新计时</strong></li></ul></blockquote></li></ol><ul><li><p>版本1：</p><blockquote><pre><code>搜索查询：&lt;input type=&quot;text&quot; /&gt;&lt;script&gt;var search = document.querySelector(&quot;input&quot;);var timer = null;search.onkeyup = function () &#123;  clearTimeout(timer);  self = this; //this=search传给定时器  timer = setTimeout(function () &#123;    //定时器里的this是window    console.log(self.value);    // 获取输入框内容，向后台发请求查询    // ....发送请求代码省略  &#125;, 2000);&#125;;&lt;/script&gt;</code></pre></blockquote></li><li><p>版本二</p><blockquote><pre><code>搜索查询：&lt;input type=&quot;text&quot; /&gt;&lt;script&gt;var search = document.querySelector(&quot;input&quot;);var timer = null;search.onkeyup = function () &#123;  if (timer) clearTimeout(timer);  self = this; //this=search传给定时器  timer = setTimeout(function () &#123;    //定时器里的this是window    console.log(self.value);    // 获取输入框内容，向后台发请求查询    // ....发送请求代码省略    timer = null; // 这里很多人有争议，要不要置空  &#125;, 2000);&#125;;&lt;/script&gt;</code></pre></blockquote></li></ul><ol start="4"><li>抽离防抖相关代码，封装成防抖函数<blockquote><ul><li>将事件触发真正要执行的代码抽离出来放在函数<code>eventFn</code>中</li><li>封装防抖函数<code>debounce</code></li><li>事件处理函数<code>eventFn</code>不能写死，要让用户自己定义，所以通过参数传进去</li><li>定时器的延迟时间也不能写死，通过参数传入</li></ul><pre><code>&lt;script&gt;  var search = document.querySelector(&quot;input&quot;);  search.onkeyup = debounce(eventFn, 1000)    function debounce(fn, delay = 500) &#123; var timer = null; return function () &#123;   if (timer) clearTimeout(timer);   var self = this;    timer = setTimeout(function () &#123;     fn();     // 获取输入框内容，向后台发请求查询     // ....发送请求代码省略     timer = null; // 这里很多人有争议，要不要置空   &#125;, delay); &#125;;  &#125;  function eventFn() &#123; console.log(self.value);  &#125;&lt;/script&gt;</code></pre></blockquote></li></ol><ul><li>进一步优化<blockquote><ul><li><code>denounce</code> 函数内调用的 <code>fn</code> 事件处理函数中的 <code>this</code> 和 事件对象 <code>e</code> 是有问题的</li><li><code>fn()</code>直接调用，内部 <code>this</code> 肯定指向的是 window，同时事件对象 e 被丢失了</li><li>所以我们要修改<code>fn()</code>时，内部的 <code>this </code>指向，同时把事件对象 <code>e</code> 传递进去。</li></ul></blockquote></li></ul><ol start="5"><li><p>ES5 版本 - 防抖函数</p><blockquote><pre><code>搜索查询：&lt;input type=&quot;text&quot; /&gt;&lt;script&gt;var search = document.querySelector(&quot;input&quot;);search.onkeyup = debounce(eventFn, 1000);</code></pre></blockquote><p> function debounce(fn, delay &#x3D; 500) {<br>var timer &#x3D; null;<br>return function () {<br>  if (timer) clearTimeout(timer);<br>  var self &#x3D; this;<br>  var args &#x3D; arguments;<br>  timer &#x3D; setTimeout(function () {<br>fn.apply(self, args); &#x2F;&#x2F;fn()直接调用，内部 this 肯定指向的是 window<br>&#x2F;&#x2F; 获取输入框内容，向后台发请求查询<br>&#x2F;&#x2F; ….发送请求代码省略<br>timer &#x3D; null; &#x2F;&#x2F; 这里很多人有争议，要不要置空<br>  }, delay);<br>};<br> }<br> function eventFn() {<br>console.log(this.value);<br> }</p><blockquote><p></script></p><pre><code></code></pre></blockquote></li><li><p>ES6 版本 - 防抖函数</p><blockquote><pre><code>/*** debounce 防抖函数* @param fn 事件处理函数* @param delay 延迟时间*/function debounce(fn, delay = 200) &#123;  var timer = null;  // 以下是每次需要执行的代码  return function () &#123; if (timer) clearTimeout(timer); // 开启定时器 timer = setTimeout(() =&gt; &#123;   fn.apply(this, arguments);   timer = null; // 这里很多人有争议，要不要置空 &#125;, delay);  &#125;;&#125;</code></pre></blockquote></li><li><p>区分防抖与节流</p><blockquote><p><strong>不同点</strong></p><ul><li>节流：不管事件触发有多频繁，都会保证在规定时间内执行一次真正的事件处理函数</li><li>防抖：只有在间隔时间达到规定时间后才会执行一次真正的事件处理函数，如果在规定时间内再次触发事件，则会重新计时。<br><strong>相同点</strong></li><li>都可以通过使用 <code>setTimeout</code> 来实现</li><li>都是降低真正的事件处理函数的执行频率，达到节省计算资 源，减少性能的消耗<br><strong>节流应用场景</strong></li><li>搜索框输入查询、手机号、邮箱验证输入检测。</li><li><code>resize</code>事件，只需在窗口调整完后，计算窗口大小，防止重复渲染<br><strong>防抖应用场景</strong></li><li><code>scroll</code>滚动事件，判断是否滚动到页面底部，自动加载更多内容</li><li><code>mousemove</code>事件，当拖拽页面元素，或鼠标跟随效果</li><li>防止高频点击提交，防止表单重复提交</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（十）</title>
      <link href="/2023/12/05/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%8D%81%EF%BC%89/"/>
      <url>/2023/12/05/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%8D%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、DOM-事件的基本介绍"><a href="#一、DOM-事件的基本介绍" class="headerlink" title="一、DOM 事件的基本介绍"></a>一、DOM 事件的基本介绍</h3><ol><li><p>什么是 DOM 事件 ？</p><blockquote><p>事件可以理解为：用户与网页发生的<strong>交互动作</strong>，比如：</p><ul><li>当鼠标移动到元素上面，会触发<code>mouseover</code>事件</li><li>当鼠标标点击中某个页面元素 ，会触发<code>click</code>事件</li><li>当用户进入或离开页面时，会触发 load 和 unload 事件</li><li>…. DOM 中的事件非常多，我们后面慢慢来学习<blockquote><p>当我们触发了上面这些事件时，计算机是如何知道用户与浏览器（网页）发生了这些交互呢 ？这就涉及到事件监听。</p></blockquote></li></ul></blockquote></li><li><p>什么是事件监听 ？</p><blockquote><ul><li>事件监听：就是计算机对事件进行监听，知道什么时候发生了这个事件，从而执行一些程序员预先编写好的程序。</li></ul></blockquote></li><li><p>设置事件监听的方法</p><blockquote><p>设置事件监听的方法有 2 种</p><ul><li>以 on 方式注册事件（绑定事件）</li><li>以 addEventListener() 方式监听注册事件</li></ul></blockquote></li></ol><ul><li><p>on 方式注册事件</p><blockquote><p>基本用法：</p><ul><li>语法<br><code>eventTarget.on事件类型 = fn;</code></li><li><code>eventTarget</code> 触发事件的<strong>目标对象</strong>，称为<strong>事件源</strong></li><li>on后面是<strong>事件类型</strong>，事件类型有很多如 click、mouseover、keydown、focus 等</li><li>fn是一个函数，事件触发时调用的函数，被称为<strong>事件处理函数</strong></li><li>一个完整的 DOM 事件，需要具备以上三部分：事件源、事件类型、事件处理函数</li></ul><pre><code>&lt;button id=&quot;btn&quot;&gt;点我&lt;/button&gt;&lt;script&gt;// 获取dom元素var btn = document.getElementById(&quot;btn&quot;);</code></pre></blockquote><p>&#x2F;&#x2F; btn 为事件源 click 为事件类型名，这里的函数为事件处理函数<br>btn.onclick &#x3D; function () {<br>  alert(“我被点击了1”);<br>};<br>btn.onclick &#x3D; function () {<br>  alert(“我被点击了2”);<br>};</p><blockquote><p></script></p><pre><code>&gt;on 方式注册事件，同一元素的同一事件，**只能有一个**事件处理函数，同时以写在**后面的为主**</code></pre></blockquote></li><li><p>以 addEventListener 方式监听注册事件</p><blockquote><p>基本用法</p><ul><li>语法<br><code>eventTarget.addEventListener(type, fn, useCapture);</code></li><li><code>eventTarget</code>为事件源, 触发事件的目标对象</li><li><code>type</code>监听事件的类型，type要加引号</li><li><code>fn</code>事件处理函数</li><li><code>useCapture</code>设置事件触发是捕获阶段还是冒泡阶段，其值只能是 false 和 true<ul><li>true 表示在捕获阶段触发</li><li>false 默认值，表示在冒泡阶段触发</li></ul></li><li>addEventListener方式，可以给元素的同一个事件添加<strong>多个</strong>事件监听（即绑定多个事件处理函数）</li></ul></blockquote></li></ul><blockquote><p>应用场景</p><ul><li>同一个页面要实现<strong>吸顶盒效果、楼梯式导航、滚动到底部加载更多</strong>等效果，这些效果都会用到<code>window.srcoll事件</code></li><li>所以我们需要为 window 的 scroll 事件，添加三个事件处理函数来分别处理以上三种效果。</li></ul><pre><code>&lt;button id=&quot;btn&quot;&gt;点我&lt;/button&gt;&lt;script&gt;  // 获取dom元素  var btn = document.getElementById(&quot;btn&quot;);  // btn 为事件源 click 为事件类型名，fn为事件处理函数  false表示在冒泡阶段触发  btn.addEventListener(&quot;click&quot;, fn1, false);  btn.addEventListener(&quot;click&quot;, fn2, false);  function fn1() &#123;    alert(&quot;我被点击了fn1&quot;);  &#125;  function fn2() &#123;    alert(&quot;我被点击了fn2&quot;);  &#125;&lt;/script&gt;</code></pre></blockquote><ol start="4"><li>移除事件监听</li></ol><ul><li><p>移除<code>on</code>方式绑定（注册）的事件</p><blockquote><p><code>eventTarget.on事件类型 = null; // 移除事件处理程序</code></p><pre><code>&lt;button id=&quot;btn&quot;&gt;点我&lt;/button&gt;&lt;script&gt;// 获取dom元素var btn = document.getElementById(&quot;btn&quot;);btn.onclick = function () &#123;  console.log(&quot;点击后要执行的内容&quot;);&#125;;btn.onclick = null; // 移除 click事件&lt;/script&gt;</code></pre></blockquote></li><li><p>移除<code>addEventListener</code>方式的事件监听，需要通过 <code>removeEventListener</code>方法来实现</p><blockquote><pre><code>removeEventListener(事件名，事件处理函数，布尔值); // 用来移除具体的某一个事件监听// 移除时的，事件名，事件处理函数，布尔值 要与addEventListener添加时的参数完全相同</code></pre></blockquote></li></ul><blockquote><ul><li>因为<code>addEventListener</code>可以为同一元素的的同一事件绑定多个事件处理函数</li><li>所以，用<code>removeEventListener</code>方法来移除对应事件监听时，要<strong>保证移除的事件名，事件处理函数，布尔值</strong>要与 <code>addEventListener</code><strong>添加时的参数完全相同</strong>。才能移除具体的某个事件监听</li></ul><pre><code>&lt;button id=&quot;btn&quot;&gt;点我&lt;/button&gt;&lt;script&gt;  // 获取dom元素  var btn = document.getElementById(&quot;btn&quot;);  btn.addEventListener(&quot;click&quot;, fn1, false);  // 不能移除，因为没有相对应的事件监听  // btn.removeEventListener(&quot;click&quot;, fn1, true);  // 移除第一次添加的事件监听  btn.removeEventListener(&quot;click&quot;, fn1, false);  function fn1() &#123;    console.log(&quot;执行了fn1&quot;);  &#125;&lt;/script&gt;</code></pre></blockquote><blockquote><blockquote><p>注意：</p></blockquote><ul><li>如果注册事件时，fn写的是整个函数，而不是函数名，则无法移除</li><li>以下写法，不能移除事件</li></ul><pre><code>//注册事件 btn.addEventListener(   &quot;click&quot;,   function fn1() &#123;     alert(&quot;你被点击了&quot;);   &#125;,   false ); //   移除事件 btn.removeEventListener(   &quot;click&quot;,   function fn1() &#123;     alert(&quot;你被点击了&quot;);   &#125;,   false );</code></pre></blockquote><h3 id="二、常见鼠标事件"><a href="#二、常见鼠标事件" class="headerlink" title="二、常见鼠标事件"></a>二、常见鼠标事件</h3><blockquote><ul><li>用<code>addEventListener</code>时，去掉<code>on</code><table><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td>onclick</td><td>当鼠标单击某个对象</td></tr><tr><td>ondbclick</td><td>当鼠标双击某个对象</td></tr><tr><td>onmouseover</td><td>当鼠标进入某个对象</td></tr><tr><td>onmouseout</td><td>当鼠标离开某个对象</td></tr><tr><td>onmouseenter</td><td>当鼠标进入某个对象（相似事件 onmouseover）不能向上冒泡</td></tr><tr><td>onmouseleave</td><td>当鼠标离开某个对象（相似事件 onmouseout）不能向上冒泡</td></tr><tr><td>onmousedown</td><td>当某个鼠标按键在某个对象上被按下</td></tr><tr><td>onmouseup</td><td>当某个鼠标按键在某个对象上被松开</td></tr><tr><td>onmousemove</td><td>当某个鼠标按键在某个对象上被移动</td></tr></tbody></table></li></ul></blockquote><h4 id="onclick-与-ondblclick-事件"><a href="#onclick-与-ondblclick-事件" class="headerlink" title="onclick 与 ondblclick 事件"></a>onclick 与 ondblclick 事件</h4><table><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击事件，当鼠标单击某个对象时触发</td></tr><tr><td>ondblclick</td><td>鼠标双击事件，当鼠标双击某个对象时触发</td></tr></tbody></table><blockquote><pre><code>&lt;style&gt; .box &#123;   width: 200px;   height: 200px;   background-color: skyblue; &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  // 单击事件  box.onclick = function () &#123;    console.log(&quot;我是 onclick&quot;);  &#125;;  // 双击事件  box.ondblclick = function () &#123;    alert(&quot;我是 ondblclick&quot;);  &#125;;&lt;/script&gt;</code></pre></blockquote><h4 id="事件处理函数中的-this-指向"><a href="#事件处理函数中的-this-指向" class="headerlink" title="事件处理函数中的 this 指向"></a>事件处理函数中的 this 指向</h4><blockquote><ul><li>事件处理函数中的 this 指向<strong>绑定事件的那个对象</strong></li></ul><pre><code>&lt;div class=&quot;box&quot;&gt;点我&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  // on开头绑定事件  box.onclick = function () &#123;    console.log(this); // &lt;div class=&quot;box&quot;&gt;点我&lt;/div&gt;  &#125;;</code></pre></blockquote><p>  &#x2F;&#x2F; addEventListener 绑定事件<br>  box.addEventListener(“click”, fn, false);<br>  function fn() {<br>    console.log(this); &#x2F;&#x2F; <div class="box">点我</div><br>  }</p><blockquote><p></script></p><pre><code></code></pre></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ol><li><p>案例1：当用户点击页面上的 div 后，更改 div 的背景色</p><blockquote><pre><code>&lt;style&gt; .box &#123;   width: 200px;   height: 200px;   background-color: skyblue; &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  // 获取class名为box的div  var box = document.querySelector(&quot;.box&quot;);  // on开头的方式给box元素添加click点击事件  // 当box元素被点击后，就会触发click事件，从而执行后面函数中的代码  box.onclick = function () &#123; this.style.backgroundColor = &quot;khaki&quot;; // 更改div的背景颜色  &#125;;</code></pre></blockquote><p>  &#x2F;&#x2F; 以addEventListener（）方法给 box元素添加click事件<br>  &#x2F;&#x2F; 当box元素被点击后，就会触发click事件，从而执行bgColor函数<br>  box.addEventListener(“click”, bgColor, false);<br>  function bgColor() {<br> this.style.backgroundColor &#x3D; “blue”;<br>  }</p><blockquote><p></script></p><pre><code></code></pre></blockquote></li><li><p>案例2：点击显示和隐藏</p><blockquote><ul><li>默认状态为隐藏，点击按钮切换状态</li></ul></blockquote></li></ol><ul><li>方法1：<blockquote><ul><li>操作样式（控制元素显示与隐藏），改变<code>display</code></li><li>开关锁：定义一个变量来标记当前状态<blockquote><p>注意：这里不能用<code>this</code>，因为事件源是<code>button</code>，而做出改变的是<code>box</code></p></blockquote></li></ul></blockquote></li></ul><blockquote><pre><code>&lt;style&gt;  .box &#123;    width: 200px;    height: 200px;    background-color: green;    display: none;  &#125;&lt;/style&gt;&lt;button&gt;点击&lt;/button&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  btn = document.querySelector(&quot;button&quot;);  box = document.querySelector(&quot;.box&quot;);  var flag = false; //默认情况下不显示  btn.onclick = function () &#123;    // 如果flag是true，则点击后隐藏  if (flag) &#123;    box.style.display = &quot;none&quot;;    flag = false;  &#125; else &#123;    // 如果flag是false，则点击后显示出来    box.style.display = &quot;block&quot;;    flag = true;  &#125;&#125;;&lt;/script&gt;</code></pre></blockquote><ul><li>方法2<blockquote><ul><li>利用<code>classList.toggle()</code>方法，实现两种样式之间相互转换</li><li><code>toggle()</code>：如果有这个类名,则删除这个类名，返回 <code>false</code>，如果没有，则添加该类名，返回 <code>true</code></li></ul><pre><code>&lt;style&gt;.box &#123;  width: 200px;  height: 200px;  background-color: green;  display: none;&#125;.hide &#123;display: none;&#125;&lt;/style&gt;&lt;button&gt;点击&lt;/button&gt;&lt;div class=&quot;box hide&quot;&gt;&lt;/div&gt;&lt;script&gt;btn = document.querySelector(&quot;button&quot;);box = document.querySelector(&quot;.box&quot;);// 方法2：btn.onclick = function () &#123;  box.classList.toggle(&quot;hide&quot;);&#125;;&lt;/script&gt;</code></pre></blockquote></li></ul><ol start="3"><li>案例 3：变色小球<blockquote><ul><li>让小球在红（red)，绿(green)，黄(yellow)，蓝(blue) 4 个颜色之间切换</li><li>小球初始颜色为红色（red），第一次点击后，变为绿色（green），第二次点击，变为黄色（yellow），第三次点击变为蓝色（blue），第四点击后变为红色（red）</li><li>后面点击依次按上面步骤来切换不同颜色</li></ul></blockquote></li></ol><ul><li>解题思路：<blockquote><ul><li>我们可以定义一个变量<code>bgColor</code>，用来保存元素的当前的颜色状态</li><li>刚开始小球颜色为红色，即<code>bgColor = &#39;red&#39;;</code></li><li>然后每次点击后，判断下当前的颜色，</li><li>如果为<code>red</code>，则把小球背景色变为<code>green</code>，同时<code>bgColor = &#39;green&#39;</code>,更改为当前球的背景色</li><li>如果为<code>green</code>，则把小球背景色变为<code>yellow</code>，同时<code>bgColor = &#39;yellow&#39;</code>,更改为当前球的背景色</li><li>如果为<code>yellow</code>，则把小球背景色变为<code>blue</code>，同时<code>bgColor = &#39;blue&#39;</code>,更改为当前球的背景色</li><li>如果为<code>blue</code>，则把小球背景色变为<code>red</code>，同时<code>bgColor = &#39;red&#39;</code>,更改为当前球的背景色</li></ul></blockquote></li></ul><blockquote><pre><code>&lt;style&gt;  .ball &#123;    width: 100px;    height: 100px;    border-radius: 50%;    background-color: red;  &#125;&lt;/style&gt;&lt;div class=&quot;ball&quot;&gt;&lt;/div&gt;&lt;script&gt;  var ball = document.querySelector(&quot;.ball&quot;);  var bgColor = &quot;red&quot;;  ball.onclick = function () &#123;    if (bgColor === &quot;red&quot;) &#123;      this.style.backgroundColor = &quot;green&quot;;      bgColor = &quot;green&quot;;    &#125; else if (bgColor === &quot;green&quot;) &#123;      this.style.backgroundColor = &quot;yellow&quot;;      bgColor = &quot;yellow&quot;;    &#125; else if (bgColor === &quot;yellow&quot;) &#123;      this.style.backgroundColor = &quot;blue&quot;;      bgColor = &quot;blue&quot;;    &#125; else if (bgColor === &quot;blue&quot;) &#123;      this.style.backgroundColor = &quot;red&quot;;      bgColor = &quot;red&quot;;    &#125;  &#125;;&lt;/script&gt;</code></pre></blockquote><ul><li><strong>优化版</strong><blockquote><ul><li>元素在多个状态之间切换，可以把 <code>if</code> 这种方式，改成用 <code>switch 语句</code>来实现，条理更清淅</li><li>把 <code>bgColor</code> 这个变量，更改为<strong>对象自身的一个属性</strong>，更好，这样就可以<strong>消除全局变量</strong>，同时如果页面有多个相似的对象，那这些对象之间互不干扰</li><li>把这个改变元素背景颜色的<strong>函数封装</strong>成一个大家共用的方法</li></ul><pre><code>&lt;style&gt;.ball1 &#123;  width: 100px;  height: 100px;  border-radius: 50%;  background-color: red;&#125;.ball2 &#123;  width: 100px;  height: 100px;  border-radius: 50%;  background-color: green;&#125;&lt;/style&gt;&lt;div class=&quot;ball1&quot;&gt;&lt;/div&gt;&lt;div class=&quot;ball2&quot;&gt;&lt;/div&gt;&lt;script&gt;var ball1 = document.querySelector(&quot;.ball1&quot;);var ball2 = document.querySelector(&quot;.ball2&quot;);ball1.bgColor = &quot;red&quot;; // bgColor为对象的一个属性ball1.onclick = changeBgColor;ball2.bgColor = &quot;green&quot;; // bgColor为对象的一个属性ball2.onclick = changeBgColor;</code></pre></blockquote>&#x2F;&#x2F; 把切换背景的功能，抽离成一个公共方法<br>function changeBgColor() {<br>  switch (this.bgColor) {<br>case “red”:<br>  this.style.backgroundColor &#x3D; “green”;<br>  this.bgColor &#x3D; “green”;<br>  break;<br>case “green”:<br>  this.style.backgroundColor &#x3D; “yellow”;<br>  this.bgColor &#x3D; “yellow”;<br>  break;<br>case “yellow”:<br>  this.style.backgroundColor &#x3D; “blue”;<br>  this.bgColor &#x3D; “blue”;<br>  break;<br>case “blue”:<br>  this.style.backgroundColor &#x3D; “red”;<br>  this.bgColor &#x3D; “red”;<br>  break;<br>  }<br>}<blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul><blockquote><blockquote><p>总结：</p><ul><li>如果一个元素在<strong>多个状态</strong>之间相互切换，我们可以在元素身上<strong>定义一个属性</strong>，这个属性用来保存当前元素的当前状态。</li><li>然后在每次切换状态前，判断下当前的状态，再根据不同的状态来实现不同效果。</li></ul></blockquote></blockquote><ol start="4"><li>案例 4：点击弹出对应 li 的序号<blockquote><p>涉及知识点</p><ul><li>对象自定义属性的应用</li><li>闭包的应用<blockquote><p>如下：当点击第一个 1，弹出 0，第二个弹出 1，第三个弹出 2，第 4 个弹出 3</p></blockquote></li></ul></blockquote></li></ol><blockquote><pre><code>&lt;body&gt;&lt;ul class=&quot;list&quot;&gt;    &lt;li&gt;1&lt;/li&gt;    &lt;li&gt;2&lt;/li&gt;    &lt;li&gt;3&lt;/li&gt;    &lt;li&gt;4&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;    var liList = document.querySelectorAll(&quot;.list li&quot;);    // 常见错误写法    for (var i = 0; i &lt; liList.length; i++) &#123;      liList[i].onclick = function () &#123;        alert(i);      &#125;;    &#125;</code></pre></blockquote><pre><code>// 正确写法一：自定义属性for (var i = 0; i &lt; liList.length; i++) &#123;  liList[i].index = i; // 给每个对象添加自定义属性，来保存对应下标  liList[i].onclick = function () &#123;    alert(this.index);  &#125;;&#125;</code></pre><blockquote></blockquote><pre><code>// 正确写法二：利用闭包for (var i = 0; i &lt; liList.length; i++) &#123;  (function (i) &#123;    liList[i].onclick = function () &#123;      alert(i);    &#125;;  &#125;)(i);&#125;</code></pre><blockquote><p> </script></p></body>```</blockquote><blockquote><p><strong>错误写法解读</strong></p><ul><li><code>liList[0].onclick = function () &#123; alert(i); &#125;</code></li><li><code>alert(i);</code>在函数里，所以他并不会马上执行，只有当函数被调用，也就是被点击的时候才会执行</li><li>而执行时，i是全局变量，在for循环结束后，i已经变成了4，所以每个li被点击时，都会得到4；</li></ul></blockquote><blockquote><p><strong>解决办法1解读</strong></p><ul><li>通过for循环，给每个li添加自定义属性，里面保存i的值作为li的下标，点击事件发生时，就调用该属性</li><li>每次循环都会保存不同的值，而且互不影响</li></ul></blockquote><blockquote><p><strong>解决办法2解读</strong></p><ul><li>使用立即执行函数，每次for循环开始，就马上执行该函数</li><li>由于点击事件里面的函数，在点击时才会执行，所以立即执行函数会产生一个闭包，里面保存当前for循环的i值</li></ul></blockquote><ol start="5"><li>案例 5：点击随机生成 6 位符号验证码<blockquote><p>涉及知识</p><ul><li>创建 DOM 元素，同时添加样式，事件等</li><li>随机函数：随机数字及颜色，随机背景图片<br><strong>思路：</strong></li><li>效果：用元素调用函数，就直接能在该函数里生成随机验证码</li><li>因此，该效果里的html元素都要在函数内用JS生成，不能写死</li><li>验证码里的数字、字母、背景干扰图片也是自动生成的，可以各写成两个独立函数，在主函数内调用</li><li>设置点击事件，每点击一次，更新验证码背景图片<blockquote><p>注意：更新数字和字母前，一定要把之前的内容清空</p></blockquote></li></ul></blockquote></li></ol><blockquote><pre><code>&lt;style&gt;  /* .yzm &#123;    position: relative;    width: 150px;    height: 50px;  &#125; */  /* .yzm .yzm-code &#123;    background-color: #ddd;    height: 100%;    font-size: 0;    text-align: center;    line-height: 50px;  &#125; */  /* .yzm .yzm-code span &#123;    font-weight: bold;    font-size: 30px;    margin: 2px;    user-select: none;  &#125; */  /* .yzm-bg &#123;    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;    background: url(../src/yzm/line1.png) no-repeat center;    background-size: cover;    cursor: pointer;  &#125; */&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;  &lt;!-- &lt;div class=&quot;yzm&quot;&gt;    &lt;div class=&quot;yzm-code&quot;&gt;      &lt;span&gt;1&lt;/span&gt;      &lt;span&gt;d&lt;/span&gt;      &lt;span&gt;b&lt;/span&gt;      &lt;span&gt;a&lt;/span&gt;      &lt;span&gt;9&lt;/span&gt;      &lt;span&gt;5&lt;/span&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;div class=&quot;yzm-bg&quot;&gt;&lt;/div&gt; --&gt;&lt;/div&gt;&lt;script&gt;  // 用js写出html元素  function getYzm(el) &#123;    // 首先创建yzm的html结构    var yzm = document.createElement(&quot;div&quot;);    // 给yzm添加样式    yzm.style.cssText = &quot;position: relative;width: 150px;height: 50px;&quot;;    // 创建数字结构    var yzmCode = document.createElement(&quot;div&quot;);    // 给yzmCode添加样式    yzmCode.style.cssText =      &quot;background-color: #ddd;height: 100%;font-size: 0;text-align: center;line-height: 50px;&quot;;    // 创建背景结构    var yzmBg = document.createElement(&quot;div&quot;);    // 给背景添加样式    yzmBg.style.cssText =      &quot;position: absolute;top: 0;left: 0;width: 100%;height: 100%;background: url(../src/yzm/line1.png) no-repeat center;background-size: cover;cursor: pointer;&quot;;    // 把yzmCode添加到yam上    yzm.appendChild(yzmCode);    // 将背景添加到yzm上    yzm.appendChild(yzmBg);    // 将yzm添加到容器元素上    el.appendChild(yzm);    // 调用随机数字函数    updateCode(yzmCode);      // 添加点击事件      yzm.addEventListener(&quot;click&quot;, updateYzm, false);      function updateYzm() &#123;        updateCode(yzmCode);        // 调用随机背景函数        updateBg(yzmBg);      &#125;    &#125;</code></pre></blockquote><p>  &#x2F;&#x2F; 生成随机数字、颜色<br>  function updateCode(el) {<br>    &#x2F;&#x2F; 在赋值前，先把之前内容全部清空<br>    el.innerHTML &#x3D; “”;<br>    &#x2F;&#x2F; 声明数字组成的数组<br>    var codeArr &#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9, “a”, “f”, “r”, “l”, “i”, “o”];<br>    var colorArr &#x3D; [“#000”, “blue”, “green”, “tomato”, “red”, “purple”];<br>    for (var i &#x3D; 0; i &lt; 6; i++) {<br>      var span &#x3D; document.createElement(“span”);<br>      &#x2F;&#x2F;   添加样式<br>      span.style.cssText &#x3D;<br>        “font-weight: bold;font-size: 30px;margin: 2px; user-select: none;”;<br>      &#x2F;&#x2F; 生成随机数字<br>      var codeIndex &#x3D; (Math.random() * codeArr.length) &gt;&gt; 0;<br>      span.innerText &#x3D; codeArr[codeIndex];<br>      &#x2F;&#x2F; 生成随机颜色<br>      var colorIndex &#x3D; (Math.random() * colorArr.length) &gt;&gt; 0;<br>      span.style.color &#x3D; colorArr[colorIndex];<br>      &#x2F;&#x2F; 添加到yzmCode中<br>      el.appendChild(span);<br>    }<br>  }</p><blockquote></blockquote><p>  &#x2F;&#x2F; 生成随机背景<br>  function updateBg(el) {<br>    var bgArr &#x3D; [<br>      “..&#x2F;src&#x2F;yzm&#x2F;line1.png”,<br>      “..&#x2F;src&#x2F;yzm&#x2F;line2.png”,<br>      “..&#x2F;src&#x2F;yzm&#x2F;line3.png”,<br>      “..&#x2F;src&#x2F;yzm&#x2F;line4.png”,<br>    ];<br>    var bgIndex &#x3D; (Math.random() * bgArr.length) &gt;&gt; 0;<br>    &#x2F;&#x2F; 把背景添加到el样式中<br>    el.style.backgroundImage &#x3D; “url(“ + bgArr[bgIndex] + “)”;<br>  }<br>  var box &#x3D; document.querySelector(“.box”);<br>  getYzm(box);</p><blockquote><p></script></p></body>```</blockquote><blockquote><ul><li><code>user-select: none;</code>不能选中文字</li></ul></blockquote><ol start="6"><li>案例 6：点击换肤效果<img src="换肤效果.gif"></li></ol><p><strong>涉及知识点</strong></p><blockquote><ul><li>背景图片撑满整个屏幕(body不设置宽高时)<ul><li><code>html,body&#123;width:100%;height:100%&#125;</code></li><li><code>body&#123;background-size:cover&#125;</code></li></ul></li><li>选择皮肤时的边框<ul><li>为了不影响图片的位置和效果，不能设置成<code>border</code>，而是要设置成<code>outline</code></li><li><code>outline</code>不占据空间，绘制于元素内容周围的轮廓 ，不参于盒子模型的占位计算，不会因为添加这个属性，而造成盒子占位空间变化。</li><li>边框只能出现在一个皮肤上，两个解决办法：<strong>排他思想</strong>、<strong>标记前一个并删除边框</strong>，后一个性能更高</li></ul></li><li>点击小图更换皮肤<ul><li>设置<strong>自定义属性</strong>，使大图与小图相对应</li><li>设置方式：直接在标签上书写，命名规则：以<code>data-</code>开头</li><li>获取方式：直接通过<code>对象.dataset.属性名</code>（属性名书写格式：属性去掉 data-之后的单词，以驼峰命名）</li></ul></li><li>点击叉叉关闭遮罩层和皮肤选择框<blockquote><p>重难点：利用自定义属性保存每个元素标签不同的数据；</p></blockquote></li></ul></blockquote><blockquote><pre><code>&lt;style&gt;  ul,  li &#123;    list-style: none;    margin: 0;    padding: 0;  &#125;  /* 清除浮动 */  .clearfix::after &#123;    display: block;    clear: both;    content: &quot;&quot;;  &#125;  /* 皮肤撑满屏幕 */  html,  body &#123;    width: 100%;    height: 100%;  &#125;  body &#123;    margin: 0;    background: url(../src/skin/big1.jpg) no-repeat;    background-size: cover;  &#125;  /* 换肤按钮 */  .update-skin &#123;    color: #fff;    position: absolute;    top: 20px;    right: 20px;    cursor: pointer;    user-select: none;  &#125;  /* 皮肤容器 */  .container-skin &#123;    display: none;    position: fixed;    top: 50%;    left: 50%;    z-index: 3;    transform: translate(-50%, -50%);    width: 540px;    background-color: #fff;    border-radius: 10px;    padding: 5px;  &#125;  /* 皮肤框 */  .select-skin li img &#123;    width: 260px;    height: 163px;    float: left;    margin: 5px;    cursor: pointer;  &#125;  /* 关闭框 */  .container-skin .close &#123;    position: absolute;    top: -15px;    right: -15px;    width: 30px;    height: 30px;    color: #fff;    font-size: 20px;    background-color: #000;    text-align: center;    line-height: 30px;    border-radius: 50%;    cursor: pointer;  &#125;  .mask &#123;    /* display: none; */    width: 100%;    height: 100%;    background-color: #000;    opacity: 0.5;  &#125;  .hide &#123;    display: none;  &#125;&lt;/style&gt;&lt;body&gt;&lt;div class=&quot;update-skin&quot;&gt;更换皮肤&lt;/div&gt;&lt;div class=&quot;container-skin&quot;&gt;  &lt;!-- 皮肤 --&gt;  &lt;ul class=&quot;select-skin clearfix&quot;&gt;    &lt;li&gt;      &lt;img        src=&quot;../src/skin/min1.jpg&quot;        alt=&quot;&quot;        data-skin=&quot;../src/skin/big1.jpg&quot;      /&gt;    &lt;/li&gt;    &lt;li&gt;      &lt;img        src=&quot;../src/skin/min2.jpg&quot;        alt=&quot;&quot;        data-skin=&quot;../src/skin/big2.jpg&quot;      /&gt;    &lt;/li&gt;    &lt;li&gt;      &lt;img        src=&quot;../src/skin/min3.jpg&quot;        alt=&quot;&quot;        data-skin=&quot;../src/skin/big3.jpg&quot;      /&gt;    &lt;/li&gt;    &lt;li&gt;      &lt;img        src=&quot;../src/skin/min4.jpg&quot;        alt=&quot;&quot;        data-skin=&quot;../src/skin/big4.jpg&quot;      /&gt;    &lt;/li&gt;  &lt;/ul&gt;  &lt;!-- 关闭按钮 --&gt;  &lt;div class=&quot;close&quot;&gt;X&lt;/div&gt;&lt;/div&gt;&lt;!-- 遮罩层 --&gt;&lt;div class=&quot;mask hide&quot;&gt;&lt;/div&gt;&lt;script&gt; // 点击换肤按钮，跳出选择框、遮罩层  var btnSkin = document.querySelector(&quot;.update-skin&quot;);  var container = document.querySelector(&quot;.container-skin&quot;);  var mask = document.querySelector(&quot;.mask&quot;);  btnSkin.onclick = function () &#123;    container.style.display = &quot;block&quot;;    mask.classList.toggle(&quot;hide&quot;);    // mask.style.display = &quot;block&quot;;  &#125;;  // 点击关闭按钮，关闭皮肤框  var btnClose = document.querySelector(&quot;.container-skin .close&quot;);  btnClose.onclick = function () &#123;    container.style.display = &quot;none&quot;;    mask.classList.toggle(&quot;hide&quot;);    // mask.style.display = &quot;none&quot;;  &#125;;  //自定义属性，点击换肤；设置边框  var imgList = document.querySelectorAll(&quot;.select-skin li img&quot;);  var len = imgList.length;  var selectImg = imgList[0]; //用来标记前一个被选中的图片  selectImg.style.outline = &quot;1px solid red&quot;; //默认选中第一个  for (var i = 0; i &lt; len; i++) &#123;    //给每个imgList添加点击事件    imgList[i].onclick = function () &#123;      //   排他法：每次点击后，先清楚所有图片的外轮廓      //   for (var j = 0; j &lt; len; j++) &#123;      //     imgList[j].style.outline = &quot;&quot;;      //   &#125;      //   this.style.outline = &quot;1px solid red&quot;;      //清除前一个法      selectImg.style.outline = &quot;&quot;; //清除前一个被选中图片样式      this.style.outline = &quot;1px solid #000&quot;; //给当前选中元素加样式      selectImg = this; //标记当前选中      // 换肤      var url = this.dataset.skin;      document.body.style.backgroundImage = &quot;url(&quot; + url + &quot;)&quot;;    &#125;;  &#125;&lt;/script&gt;&lt;/body&gt;</code></pre></blockquote><h4 id="onmouseover-和-onmouseout-事件"><a href="#onmouseover-和-onmouseout-事件" class="headerlink" title="onmouseover 和 onmouseout 事件"></a>onmouseover 和 onmouseout 事件</h4><table><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td>onmouseover</td><td>当鼠标进入某个对象</td></tr><tr><td>onmouseout</td><td>当鼠标离开某个对象</td></tr></tbody></table><blockquote><ul><li>如果是能用<code>:hover</code>就能实现的功能，尽量用<code>:hover</code>，更加方便简捷</li></ul></blockquote><ol><li><p>案例1：鼠标滑动，表格隔行变色</p><blockquote><pre><code>&lt;style&gt;  ul,  li &#123; padding: 0; margin: 0; list-style: none;  &#125;  ul li &#123; width: 400px; height: 50px;  &#125;  li:nth-child(even) &#123; background-color: #ddd;  &#125;  li:nth-child(odd) &#123; background-color: #8b7f7f;  &#125;  li.color &#123; background-color: plum;  &#125;  /* li:hover &#123; background-color: palegreen;  &#125; */&lt;/style&gt;&lt;body&gt;&lt;ul&gt;  &lt;li&gt;&lt;/li&gt;  &lt;li&gt;&lt;/li&gt;  &lt;li&gt;&lt;/li&gt;  &lt;li&gt;&lt;/li&gt;  &lt;li&gt;&lt;/li&gt;  &lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;  var liList = document.querySelectorAll(&quot;ul li&quot;);  var len = liList.length;  // 方法1  //   for (var i = 0; i &lt; len; i++) &#123;  //     liList[i].onmouseover = function () &#123;  //       this.style.backgroundColor = &quot;purple&quot;;  //     &#125;;  //     liList[i].onmouseout = function () &#123;  //       this.style.backgroundColor = &quot;&quot;;  //     &#125;;  //   &#125;  // 方法2  for (var i = 0; i &lt; len; i++) &#123; liList[i].onmouseover = function () &#123;   this.classList.add(&quot;color&quot;); &#125;; liList[i].onmouseout = function () &#123;   this.classList.remove(&quot;color&quot;); &#125;;  &#125;  //方法3`:hover`&lt;/script&gt;&lt;/body&gt;</code></pre></blockquote></li><li><p>案例 2：扫图游戏</p><blockquote><ul><li>当图形中的花全部被扫出来，整个游戏就结束了<img src="扫图游戏.gif"></li></ul></blockquote></li></ol><p><strong>思路</strong></p><blockquote><ul><li>用一层小方块盖住图片，每个小方块都有对应的下标</li><li>当花对应小方块全部被扫掉，游戏结束</li></ul></blockquote><blockquote><p><strong>花朵部分</strong></p><ul><li>方法1：<ul><li>我们用一个数组保存花朵对应的小方块的下标</li><li>每扫掉一块，先查询该下标是否在数组中，如果是，再从数组中删除对应的下标</li><li>当数组长度为0时，游戏结束</li></ul></li></ul><pre><code>li.onmouseover = function () &#123;  //鼠标划到小方块时，变透明  this.style.opacity = 0;  if (data.length === 0) &#123;    // 游戏结束    mask.style.display = &quot;block&quot;;  &#125;  // 查询其下标，删除  var k = data.indexOf(this.index);  // 如果它存在于结果数组中，则返回所查元素的下标  if (k !== -1) &#123;    //根据所返回的下标，删掉该元素    data.splice(k, 1);  &#125;  // 被扫过的元素，把身上的onmouseover事件取消  this.onmouseover = null;&#125;;</code></pre></blockquote><blockquote><ul><li>方法2：<ul><li>我们用一个数组保存花朵对应的小方块的下标</li><li>再声明一个变量，作为累加器</li><li>每扫掉一块，先查询该下标是否在数组中，如果是，则累加器+1，当累加器等于结果数组长度时，游戏结束</li></ul></li></ul></blockquote><blockquote><pre><code>var item = 0; //记录结果数组中已经变透明的方块数li.onmouseover = function () &#123;  //鼠标划到小方块时，变透明  this.style.opacity = 0;  if (item === data.length) &#123;    // 游戏结束    mask.style.display = &quot;block&quot;;  &#125;  // 查询其下标，删除  var k = data.indexOf(this.index);  // 如果它存在于结果数组中，则item+1  if (k !== -1) &#123;    item++;  &#125;  // 被扫过的元素，把身上的onmouseover事件取消  this.onmouseover = null;&#125;;</code></pre></blockquote><blockquote><blockquote><p>两种方法各有优劣，视具体情况而定</p></blockquote></blockquote><blockquote><p><strong>构建方块</strong></p><ul><li>方法1：<ul><li>设置一个for循环，每循环一次，创建一个li元素</li><li>自定义一个属性保存当前li元素的下标，属性值等于for循环的变量值</li><li>给li元素设置浮动</li><li>扫掉方块时，<strong>只能</strong>将该块设置为透明；否则将会影响其他方块的位置</li></ul></li></ul><pre><code>for (var i = 0; i &lt; 12 * 16; i++) &#123;  var li = document.createElement(&quot;li&quot;);  li.index = i;  li.innerText = i;  ul.appendChild(li);&#125;</code></pre></blockquote><blockquote><ul><li>方法2：<ul><li>设置两层for循环，第一层是行，第二层是列，只需要在第二层创建li元素</li><li>必须在外面定义一个累加器，每次循环<code>+1</code>；<blockquote><p>但这与九九乘法表(li&gt;span)不一样！！</p></blockquote></li><li>给每个li设置<strong>绝对定位</strong>(重点)</li><li>扫掉方块时，可以删除该方块，也可以将它设置为透明</li></ul></li></ul><pre><code>var sum = 0;for (var i = 0; i &lt; 12; i++) &#123;  // 行  for (var j = 0; j &lt; 16; j++) &#123;    // 列    var li = document.createElement(&quot;li&quot;);    li.index = sum;    //   li.innerText = sum;    sum++;    ul.appendChild(li);  &#125;&#125;</code></pre></blockquote><p><strong>扫方块后，变透明</strong></p><blockquote><ul><li>给每个li添加<code>onmouseover</code>事件，扫过之后，该方块的透明度为0；同时根据上面的思路，会对该下标进行一系列操作</li><li>注意：移出鼠标后要马上删掉该li身上的<code>onmouseover</code>事件</li><li>因为我们只是把它变透明，下次滑到，仍然会进行该事件，会影响对下标的操作</li></ul><pre><code>li.onmouseover = function () &#123;  //鼠标划到小方块时，变透明  this.style.opacity = 0;  //游戏结束条件  // 下标操作  // 被扫过的元素，把身上的onmouseover事件取消  this.onmouseover = null;&#125;;</code></pre></blockquote><ul><li>最终代码<blockquote><pre><code>&lt;style&gt; body &#123; margin: 0; &#125; .container &#123; width: 800px; margin: 50px auto; border: 1px solid #000; &#125; .container h1 &#123; text-align: center; &#125; .container .game &#123; width: 800px; height: 600px; background: url(../src/games/flower.png) no-repeat; &#125; ul, li &#123; padding: 0; margin: 0; list-style: none; &#125; ul li &#123; float: left; width: 50px; height: 50px; background-color: #ddd; &#125; /* 游戏结束 */ .mask &#123; display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); &#125; .mask p &#123; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: red; font-size: 50px; margin: 0; &#125;&lt;/style&gt;&lt;div class=&quot;container&quot;&gt; &lt;h1&gt;扫图游戏&lt;/h1&gt; &lt;div class=&quot;game&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;mask&quot;&gt;&lt;p&gt;游戏结束！&lt;/p&gt;&lt;/div&gt;&lt;script&gt;var game = document.querySelector(&quot;.game&quot;);var ul = document.createElement(&quot;ul&quot;);var mask = document.querySelector(&quot;.mask&quot;);var data = [  23, 24, 25, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 67, 68,  69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 91, 92,  93, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 118,  119, 120, 121, 122, 123, 124, 130, 131, 132, 133, 134, 135, 136, 137,  138, 139, 147, 148, 149, 150, 151, 152, 153, 166, 167, 168, 169,]; //结果数组</code></pre></blockquote>&#x2F;&#x2F; 构建小方块，方法1：一层for循环+浮动<br>&#x2F;&#x2F; 在图上构建li，并标记数字<br>&#x2F;&#x2F;   for (var i &#x3D; 0; i &lt; 12 * 16; i++) {<br>&#x2F;&#x2F;     var li &#x3D; document.createElement(“li”);<br>&#x2F;&#x2F;     li.index &#x3D; i;<br>&#x2F;&#x2F;     li.innerText &#x3D; i;<br>&#x2F;&#x2F;     ul.appendChild(li);<br>&#x2F;&#x2F;     onmouseover事件<br>&#x2F;&#x2F;   }<blockquote></blockquote>&#x2F;&#x2F; 构建小方块，方法2：两层for循环+绝对定位<br>var item &#x3D; 0; &#x2F;&#x2F;记录结果数组中已经变透明的方块数<br>var sum &#x3D; 0;  &#x2F;&#x2F;记录下标<br>for (var i &#x3D; 0; i &lt; 12; i++) {<br>  &#x2F;&#x2F; 行<br>  for (var j &#x3D; 0; j &lt; 16; j++) {<br>&#x2F;&#x2F; 列<br>var li &#x3D; document.createElement(“li”);<br>li.index &#x3D; sum;<br>&#x2F;&#x2F;   li.innerText &#x3D; sum;<br>sum++;<br>ul.appendChild(li);&#x2F;&#x2F;将每个li添加到ul上</li></ul><blockquote></blockquote><pre><code>  //查询删除结果数组的下标,方法1：  // 给每一个li添加一个onmouseover事件  //   li.onmouseover = function () &#123;  //     //鼠标划到小方块时，变透明  //     this.style.opacity = 0;  //     if (data.length === 0) &#123;  //       // 游戏结束  //       mask.style.display = &quot;block&quot;;  //     &#125;  //     // 查询其下标，删除  //     var k = data.indexOf(this.index);  //     // 如果它存在于结果数组中，则返回所查元素的下标  //     if (k !== -1) &#123;  //       //根据所返回的下标，删掉该元素  //       data.splice(k, 1);  //     &#125;  //     // 被扫过的元素，把身上的onmouseover事件取消  //     this.onmouseover = null;  //   &#125;;</code></pre><blockquote></blockquote><pre><code>//方法2：用item记录变透明的结果数组的个数  li.onmouseover = function () &#123;    //鼠标划到小方块时，变透明    this.style.opacity = 0;    if (item === data.length) &#123;      // 游戏结束      mask.style.display = &quot;block&quot;;    &#125;    // 查询其下标，删除    var k = data.indexOf(this.index);    // 如果它存在于结果数组中，则item+1    if (k !== -1) &#123;      item++;    &#125;    // 被扫过的元素，把身上的onmouseover事件取消    this.onmouseover = null;  &#125;;&#125;</code></pre><p>  }<br>&#x2F;&#x2F;将ul添加到game上<br>  game.appendChild(ul);</p><blockquote><p></script></p><pre><code>&gt;还有一个综合案例：放大镜效果，放在后面的综合案例应用中讲解</code></pre></blockquote><h4 id="onmousedown、onmouseup-和-onmousemove"><a href="#onmousedown、onmouseup-和-onmousemove" class="headerlink" title="onmousedown、onmouseup 和 onmousemove"></a>onmousedown、onmouseup 和 onmousemove</h4><table><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td>onmousedown</td><td>当某个鼠标按键在某个对象上被按下时触发</td></tr><tr><td>onmouseup</td><td>当某个鼠标按键在某个对象上被松开时触发</td></tr><tr><td>onmousemove</td><td>当某个鼠标按键在某个对象上被移动时触发</td></tr></tbody></table><blockquote><pre><code>&lt;style&gt;      .box &#123;        width: 300px;        height: 300px;        background-color: lightblue;      &#125;&lt;/style&gt;&lt;/head&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  box.onmousedown = function () &#123;    box.style.width = &quot;500px&quot;;  &#125;;  box.onmouseup = function () &#123;    box.style.width = &quot;300px&quot;;  &#125;;  box.onmousemove = function () &#123;    box.style.backgroundColor = &quot;pink&quot;;    console.log(&quot;鼠标在我上面移动&quot;);//触发频率特别高  &#125;;&lt;/script&gt;</code></pre></blockquote><p><strong>代码解读</strong></p><blockquote><ul><li><code>onmousedown</code>只会在鼠标按键被按下时触发一次</li><li><code>onmouseup</code>只会在鼠标标按键松开时触发一次</li><li><code>onmousemove</code>的触发频率特别高，只要稍会移动下，就会触发好多次<br>相关案例：参考本章综合案例应用中以下两个案例</li><li>案例 1：拖拽动画</li><li>案例 2：拖拽交换两元素位置</li></ul></blockquote><h3 id="三、常见键盘事件（keypress、keydown-和-keyup-事件）"><a href="#三、常见键盘事件（keypress、keydown-和-keyup-事件）" class="headerlink" title="三、常见键盘事件（keypress、keydown 和 keyup 事件）"></a>三、常见键盘事件（keypress、keydown 和 keyup 事件）</h3><blockquote><p>以下是常见的键盘事件</p><table><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td>onkeypress</td><td><strong>被弃用</strong>（他会后于 onkeydown 触发）</td></tr><tr><td>onkeydown</td><td>当某个键盘的键被按下（系统按钮可以识别）</td></tr><tr><td>onkeyup</td><td>当某个键盘的键被松开</td></tr></tbody></table><blockquote><p>注：</p></blockquote><ul><li>一般使用键盘事件都是 <code>document</code> 和 <code>input</code></li><li>如果需要在一个 <code>div</code> 中使用时，需要在<code>div</code>标签中增加<code>contenteditable=&quot;true&quot;</code>，div就会变成一个输入框</li><li>在<code>input</code>输入框<strong>长按</strong>键盘时，第一个字输入后<strong>间隔一段时间</strong>，才会<strong>不停歇地</strong>输入后面的内容</li><li>可以通过 <code>keyup</code> 事件，来获取每次键盘抬起时，文本输入框中的内容</li></ul></blockquote><blockquote><pre><code>&lt;style&gt;  .box &#123;    width: 100px;    height: 50px;    background-color: aqua;    margin: 10px;  &#125;&lt;/style&gt;&lt;input type=&quot;text&quot; /&gt;&lt;div class=&quot;box&quot; contenteditable=&quot;true&quot; ;&gt;&lt;/div&gt;&lt;script&gt;  var user = document.querySelector(&quot;input&quot;);  var box = document.querySelector(&quot;.box&quot;);  document.onkeydown = function () &#123;    // console.log(&quot;按下键盘了&quot;);  &#125;;  user.onkeydown = function () &#123;    // console.log(&quot;在输入内容了哦&quot;);  &#125;;  //div使用键盘事件  box.onkeydown = function () &#123;    console.log(&quot;div也能用&quot;);  &#125;;  user.onkeyup = function () &#123;    // console.log(&quot;键盘松开了&quot;);  &#125;;  //通过 keyup 事件，来获取每次键盘抬起时，文本输入框中的内容  user.onkeyup = function () &#123;    console.log(this.value);  &#125;;&lt;/script&gt;</code></pre></blockquote><h3 id="四、常见表单事件"><a href="#四、常见表单事件" class="headerlink" title="四、常见表单事件"></a>四、常见表单事件</h3><blockquote><p>常见的表单事件如下</p><table><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td>focus</td><td>当某元素获得焦点（比如 tab 键或鼠标点击）</td></tr><tr><td>blur</td><td>当某元素失去焦点</td></tr><tr><td>change</td><td>当用户改变域的内容</td></tr></tbody></table></blockquote><p>1、focus 和 blur 事件</p><blockquote><pre><code>&lt;input type=&quot;text&quot; /&gt;&lt;script&gt;  var text = document.querySelector(&quot;input&quot;);  text.onfocus = function () &#123;    //输入框获取焦点时，改变外轮廓    this.style.outline = &quot;2px solid red&quot;; //不能是border  &#125;;  //失去焦点时，取消外轮廓  text.addEventListener(&quot;blur&quot;, fn, false);  function fn() &#123;    this.style.outline = &quot;&quot;;  &#125;&lt;/script&gt;</code></pre></blockquote><ol start="2"><li>change 事件<blockquote><ul><li>change 事件，只会在内容发生改变时才触发，如果重复选择，内容不变，不会触发</li></ul></blockquote></li></ol><ul><li>案例：当选中下拉列表中的某个元素，把对应选中的内容显示在控制台<blockquote><pre><code>你最喜欢的水果&lt;select id=&quot;friut&quot;&gt; &lt;option value=&quot;apple&quot;&gt;苹果&lt;/option&gt; &lt;option value=&quot;banana&quot;&gt;香蕉&lt;/option&gt; &lt;option value=&quot;pear&quot;&gt;梨子&lt;/option&gt; &lt;option value=&quot;watermelon&quot;&gt;西瓜&lt;/option&gt;&lt;/select&gt;&lt;script&gt;var friut = document.getElementById(&quot;friut&quot;);friut.addEventListener(&quot;change&quot;, fn, false);function fn() &#123;  var _index = this.selectedIndex; // 被选中元素的下标  var value = this.options[_index].value; // 被选中元素的value值,如 pear  var text = this.options[_index].text; // 被选中元素的文本 如 梨子  console.log(value, text);&#125;&lt;/script&gt;</code></pre></blockquote></li></ul><blockquote><ul><li><code>_index =this.selectedIndex;</code>：被选中元素的下标</li><li><code>this.options[_index].value;</code>：被选中元素的value值</li><li><code>this.options[_index].text;</code>：被选中元素的文本<blockquote><ul><li><code>.selectedIndex</code>是<code>select</code>自带的属性</li><li>先获取下标，再根据下表获取值和文本</li></ul></blockquote></li></ul></blockquote><ol start="3"><li>二级联动下拉</li></ol><ul><li><p>思路</p><blockquote><ul><li>将省份信息、城市信息添加进下拉菜单</li><li>选择后展示不同省份所对应的城市</li></ul></blockquote></li><li><p>结构搭建</p><blockquote><ul><li>在body里设置省份、城市这两个下拉框<code>select</code>，不写任何值</li><li>用数组保存省份和城市的数据，以对象的形式一一对应</li></ul><pre><code>&lt;select name=&quot;&quot; id=&quot;province&quot;&gt;&lt;/select&gt;</code></pre></blockquote><!-- <option data-city="长沙市,株洲市,湘潭市,常德市"></option> --><blockquote><p><select name="" id="city"></select><br>&#x2F;&#x2F;script<br>var data &#x3D; [<br>{<br>  province: “湖南”,<br>  city: [“长沙市”, “株洲市”, “湘潭市”, “常德市”],<br>},<br>{<br>  province: “陕西”,<br>  city: [“西安市”, “铜川市”, “咸阳市”, “安康市”, “宝鸡市”],<br>},<br>{<br>  province: “四川”,<br>  city: [“成都市”, “广元市”, “德阳市”, “眉山市”],<br>},<br>];</p><pre><code></code></pre></blockquote></li><li><p>初始化：填充省份数据和默认的城市数据</p><blockquote><ul><li>由于每个部分都是用的是函数，所以定义一个初始化函数，统一调用其他函数</li></ul><pre><code>function init(data) &#123;//添加省份数据addProvince(province, data);//添加默认城市数据addCityDate(city, data[0].city); // addCitydate(city元素，城市数据)&#125;init(data);</code></pre><blockquote><p>注意：要设置一个默认显示的城市信息，在’change’事件发生之前显示</p></blockquote></blockquote></li><li><p>添加省份信息</p><blockquote><ul><li>构建函数</li><li>用for循环遍历数组，有多少省份，就有多少个对象</li><li>每循环到一个对象，就创建一个<code>option</code>元素</li><li>每循环到一个对象，就打点调用它的省份属性，将属性值赋给所创建的<code>option</code>元素，作为它的<code>text</code>值</li><li>每循环一次将<code>option</code>元素传入储存省份信息的下拉菜单中</li><li>为了提升性能，可以创建一个虚拟仓库<code>.createDocumentFragment()</code>来储存每一次创建的<code>option</code></li><li>在循环结束后，用仓库一次性将所有option添加进对应的<code>select</code></li></ul><pre><code>//添加省份信息 function addProvince(el, data) &#123; // 用for循环，将省份添加进去 var frag = document.createDocumentFragment(); for (var i = 0; i &lt; data.length; i++) &#123;   var option = document.createElement(&quot;option&quot;);   option.text = data[i].province;   //先存储到仓库里，再添加到province，提升性能   // 将城市信息以自定义属性的方式绑定到省份上   //option.dataset.city = data[i].city;   frag.appendChild(option); &#125; el.appendChild(frag); &#125;</code></pre></blockquote></li><li><p>添加城市信息</p><blockquote><ul><li>构建函数</li><li>用for循环遍历包含了<strong>对应城市信息的数组</strong>，这个数组需要另外的函数来得到</li><li>每循环到一个城市，就创建一个<code>option</code>元素</li><li>每循环到一个城市，就将城市名赋给所创建的<code>option</code>元素，作为它的<code>text</code>值</li><li>每循环一次将<code>option</code>元素传入储存城市信息的下拉菜单中</li><li>为了提升性能，可以创建一个虚拟仓库<code>.createDocumentFragment()</code>来储存每一次创建的<code>option</code></li><li>在循环结束后，用仓库一次性将所有option添加进对应的<code>select</code></li></ul><pre><code>//要先获得城市数据，el是city元素 function addCityDate(el, citydate) &#123; el.innerHTML = &quot;&quot;; var frag = document.createDocumentFragment(); for (var i = 0; i &lt; citydate.length; i++) &#123;   var option = document.createElement(&quot;option&quot;);   option.text = citydate[i];   frag.appendChild(option); &#125; el.appendChild(frag); &#125;</code></pre></blockquote></li><li><p>怎么拿到对应城市信息的<strong>数组</strong></p><blockquote><ul><li>定义一个函数，通过省份名字，返回对应省份的市信息</li><li>使用<code>change</code>事件</li></ul></blockquote></li></ul><blockquote><p><strong>方法1：</strong></p><ul><li>拿到当前选中的省份名<ul><li>用<code>.selectedIndex</code>拿到当前选项的下标</li><li>用<code>.options[_index].text</code>拿到省份名</li></ul></li><li>再获取对应的城市信息，用这个数据来调用添加城市的函数<ul><li>设置一个<code>filter</code>函数来获得当前选中省份的城市信息</li><li>设置一个for循环，循环原始数组</li><li>打点调用出省份属性，当它的值等于上一步得到的<code>text</code>时</li><li>就打点调用出该省份对应的城市数据</li></ul></li><li>拿到城市数据后，调用添加城市信息的函数<blockquote><p>原始数组中城市信息都保存在一个数组中，所以以带点调用来拿到城市数据的方式可以直接获得包含城市信息的数组</p></blockquote></li></ul><pre><code>//通过省份名，返回对应的城市信息 province.addEventListener(&quot;change&quot;, connect, false); function connect() &#123;   // 获取当前显示的省份下标   var _index = this.selectedIndex;   //获取它的文本   var text = this.options[_index].text;   //筛选省份，获得对应的城市数据   var citydate = filter(text, data);   //将城市数据添加进city元素   addCityDate(city, citydate); &#125; //筛选省份，获得对应的城市数据 function filter(text, data) &#123;   for (var i = 0; i &lt; data.length; i++) &#123;     if (data[i].province === text) &#123;       return data[i].city;     &#125;   &#125; &#125;</code></pre></blockquote><blockquote><ul><li><strong>方法2：</strong></li><li>在填充省份信息时，将对应的市数据绑定到每个省份<code>option</code>元素的自定义属性上<br><code>option.dataset.city = data[i].city;</code></li><li>先拿到当前选中的省份名<ul><li>用<code>.selectedIndex</code>拿到当前选项的下标</li><li>调用该省份元素的自定义属性，获取城市信息</li></ul></li><li>根据下标调用自定义属性<blockquote><p>注意：</p></blockquote></li><li>自定义属性的值是用双引号包裹的字符串，不是数组<br><code>&lt;option data-city=&quot;长沙市,株洲市,湘潭市,常德市&quot;&gt;&lt;/option&gt;</code></li><li>赋值时，系统自动把数组转换成了字符串</li><li>所以此时获得的是字符串</li><li>用<code>split</code>方法转换成数组，以<code>,</code>分隔</li><li>拿到数组形式的城市数据后，调用添加城市信息的函数<blockquote><p>方法2只适合数据量较少的情况</p></blockquote></li></ul><pre><code>//通过省份名，返回对应的城市信息 province.addEventListener(&quot;change&quot;, connect, false); function connect() &#123;   // 获取当前显示的省份下标   var _index = this.selectedIndex;   //获取它的文本   var text = this.options[_index].text;   //调用自定义属性获得对应的城市数据   var citydate = this.options[_index].dataset.city;   //此时得到的citydate是字符串形式：&quot;西安市,铜川市,咸阳市,安康市,宝鸡市&quot;   //用split转成数组，以，分隔   citydate = citydate.split(&quot;,&quot;);   //将城市数据添加进city元素   addCityDate(city, citydate); &#125;</code></pre></blockquote><blockquote><blockquote><p>代码实现见html文件</p></blockquote></blockquote><ol start="4"><li>省市区三级联动<br><strong>思路</strong>：</li></ol><ul><li><p>定义一个html元素，作为容器</p><blockquote><pre><code>&lt;div id=&quot;area&quot;&gt;&lt;/div&gt;</code></pre></blockquote></li><li><p>填充数据</p><blockquote><ul><li>每个省市区都有对应的id名和<code>fullname</code></li><li>在构建<code>option</code>时，要将id作为<code>option</code>的<code>value</code></li><li>将<code>fullname</code>作为<code>option</code>的<code>text</code>值</li></ul></blockquote></li><li><p>省市县三个下拉菜单都通过js创建</p></li><li><p>初始化：填充省份数据、第一个省的市区数据——一个可递归的填充函数</p><blockquote><ul><li>利用递归执行三次函数，分别创建三个下拉菜单</li><li>利用for循环构建<code>option</code>，并将省份数据和第一个省的市、区数据分别填充进去</li><li>将<code>option</code>添加进<code>select</code></li><li>将<code>select</code>添加进容器<blockquote><p>此时不需要用虚拟仓库</p></blockquote></li></ul></blockquote></li></ul><blockquote><pre><code>//初始化：填充省份数据和默认的市区数据 init(area, data); function init(el, data) &#123;   // 创建下拉菜单   var select = document.createElement(&quot;select&quot;);   selectArr.push(select);//添加到数组   for (var i = 0; i &lt; data.length; i++) &#123;     var option = document.createElement(&quot;option&quot;);     option.value = data[i].pid || data[i].cid || data[i].aid;     option.text = data[i].fullname;     select.appendChild(option);   &#125;   el.appendChild(select);   //初始化默认数据，市、区   if (data[0].children) &#123;     //如果有第一个children就执行     init(el, data[0].children);     //省的第一个children是市，     //市的第一个children是区，区没有children就停止   &#125; &#125;</code></pre></blockquote><ul><li><p>利用<code>change</code>事件，拿到当前省、市id,并调用查找函数和填充函数</p><blockquote><ul><li>选择省份时，才能拿到省id并填充市数据</li><li>同样的选择市区时，才能拿到市id并填充区数据</li><li>因此，在为了在选择省份后能显示出默认的区数据</li><li>所以在填充市数据后，要把第一个市的<strong>区数据</strong>填充进去，作为默认值</li></ul><pre><code>//利用change事件，拿到当前点击的省份id selectArr[0].onchange = function () &#123; var _index = this.selectedIndex; var id = this.options[_index].value; //省份编码 //找市数据 var children = find(id, data); //拿到市数据后，将其填充到下拉菜单 addDate(selectArr[1], children); // 驱动 默认的 区数据的变化 addDate(selectArr[2], children[0].children); &#125;;</code></pre></blockquote><p> &#x2F;&#x2F;利用change事件，拿到当前点击的市id<br> selectArr[1].onchange &#x3D; function () {<br> var _index &#x3D; this.selectedIndex;<br> var id &#x3D; this.options[_index].value; &#x2F;&#x2F;省份编码<br>  &#x2F;&#x2F;找区数据<br> var children &#x3D; find(id, data);<br> &#x2F;&#x2F;拿到区数据后，将其填充到下拉菜单<br> addDate(selectArr[2], children);<br> };</p><blockquote><pre><code></code></pre></blockquote></li><li><p>将查到的<code>children</code>数据填充进下拉菜单</p><blockquote><pre><code>// 填充市区数据,el:selectArr[];date:市/区数据 function addDate(el, date) &#123; el.innerHTML = &quot;&quot;; var frag = document.createDocumentFragment(); for (var i = 0; i &lt; date.length; i++) &#123;   var option = document.createElement(&quot;option&quot;);   option.value = date[i].pid || date[i].cid || date[i].aid;   option.text = date[i].fullname;   frag.appendChild(option); &#125; el.appendChild(frag); &#125;</code></pre></blockquote></li></ul><blockquote><blockquote><p>注意</p></blockquote><ul><li>下拉菜单是在函数内构建的，并不是全局变量，所以在全局变量内定义一个数组，构建<code>&lt;select&gt;</code>后，将它<code>push</code>到数组里，以便其他函数对其元素的调用</li><li>递归的函数，要适用于多种情况，在涉及到<code>pid</code>、<code>cid</code>、<code>aid</code>时，用<code>||</code></li></ul></blockquote><ul><li>取得id后，查找该id的<code>children</code>数据——一个可递归的函数<br><strong>方法1：先深度再广度，全盘搜索</strong><blockquote><p><strong>基础版</strong></p><pre><code> //用id,找市、区数据 var result = &quot;&quot;; function find(id, data) &#123; //先深度再广度，每一个for循环查一个省，在这个for循环里，先查省，再查它的children市区 //如果拿到的是市id，那每个省市区都找一遍 for (var i = 0; i &lt; data.length; i++) &#123;   if (data[i].pid === id || data[i].cid === id || data[i].aid === id) &#123;     result = data[i].children;     return result;   //第一轮查的是省pid,查不到，如果它有children就下一轮   //第二轮到市，第三轮到区，区没有children就停止 &#125; else &#123;     if (data[i].children) &#123;       find(id, data[i].children);     &#125;   &#125; &#125; return result; &#125;</code></pre></blockquote></li></ul><blockquote><p><strong>优化版</strong></p><pre><code>/*** find 根据pid 或 cid 或aid来查找对应省或市或区的下一级* id为对应pid或 cid或aid* data为省市区数据* n表示递归的深度*/function find(id, data, n) &#123;  var result;  var flag = false; // 用来标记，退出整个for循环  n = n || 100;//设n的默认值为100  return search(id, data, n);  function search(id, data, n) &#123;    // 递归深度达到 或 数据不存在，则退出    if (n === -1 || !data) return;</code></pre></blockquote><p>  &#x2F;&#x2F; 数据遍历<br>    for (var i &#x3D; 0; i &lt; data.length; i++) {<br>      if (flag) break; &#x2F;&#x2F; 退出整个for循环<br>      if (data[i].pid &#x3D;&#x3D;&#x3D; id || data[i].cid &#x3D;&#x3D;&#x3D; id || data[i].aid &#x3D;&#x3D;&#x3D; id) {<br>        result &#x3D; data[i].children;<br>        flag &#x3D; true; &#x2F;&#x2F; 找到了标记为true,用来退出后面所有for循环<br>        break; &#x2F;&#x2F; 或 return result;<br>      } else {<br>        n–; &#x2F;&#x2F; 调用递归就开始减<br>        search(id, data[i].children, n); &#x2F;&#x2F; 值<br>        n++;&#x2F;&#x2F;下一次for循环的递归层数不能变<br>      }<br>    }<br>    return result;<br>  }<br>}</p><blockquote><pre><code></code></pre></blockquote><p><strong>方法2：逐级查询</strong></p><blockquote><ul><li>据对应省 pid 查询对应省下面市信息</li><li>根据对应省 pid 和市 cid 查询对应省-市下面的区信息</li><li>根据省 pid 和市 cid 及 aid，查询对应省-市-区下面街道信息。因数据中没有提供区的下一级，即返回 <code>null</code></li><li>我们定义一个对象<code>ids</code>，用来保存要查询的 id，然后当前参数传到 find 函数中</li></ul></blockquote><blockquote><ul><li>查省对应市 var ids &#x3D; {pid: “130000”};</li><li>查省-市对应区var ids &#x3D; {pid: “130000”,cid: “130100”};</li><li>查省-市-区对应街道 var ids &#x3D; {pid: “130000”,cid: “130100”,aid: “130102”};</li></ul><pre><code>/*** find 根据传递id集合，找到对应市、区、街道信息* ids查询id集合   &#123; pid: &quot;130000&quot;, cid: &quot;130100&quot; &#125;* data 查询的数据*/</code></pre></blockquote><p>&#x2F;&#x2F;   var a &#x3D; 0;  查看查询的次数<br>function find(ids, data) {<br>  &#x2F;&#x2F; 遍历对象<br>  for (var key in ids) {<br>    for (var i &#x3D; 0; i &lt; data.length; i++) {<br>      &#x2F;&#x2F; a++;<br>      if (<br>        (data[i].pid &amp;&amp; data[i].pid &#x3D;&#x3D;&#x3D; ids[key]) ||<br>        (data[i].cid &amp;&amp; data[i].cid &#x3D;&#x3D;&#x3D; ids[key]) ||<br>        (data[i].aid &amp;&amp; data[i].aid &#x3D;&#x3D;&#x3D; ids[key])<br>      ) {<br>        data &#x3D; data[i].children; &#x2F;&#x2F; 每一轮查找下一轮要查询的数据<br>        break; &#x2F;&#x2F; 找到了就退出，不找了，只退出第一层for循环<br>      }<br>    }<br>  }<br>  &#x2F;&#x2F; console.log(a);<br>  return data || null;<br>}</p><blockquote><pre><code></code></pre></blockquote><ul><li>如何记录每个下拉列表当前被选中项的 pid或cid或aid的值呢 ？<blockquote><ul><li>在当前对象上添加一个属性，用来记录</li></ul></blockquote></li></ul><blockquote><ul><li><code>init()</code>函数初始化时，给对象添加对应属性保存对应值</li></ul><pre><code>data[0].pid &amp;&amp; (select.pid = data[0].pid);data[0].cid &amp;&amp; (select.cid = data[0].cid);data[0].aid &amp;&amp; (select.aid = data[0].aid);</code></pre></blockquote><blockquote><ul><li>对应的 change 事件中</li></ul><pre><code>this.pid = this.options[_index].value;// 或this.cid = this.options[_index].value;// 或this.aid = this.options[_index].value;</code></pre></blockquote><blockquote><ul><li>addDate 函数中</li></ul><pre><code>el.pid &amp;&amp; (el.pid = data[0].pid);el.cid &amp;&amp; (el.cid = data[0].cid);el.aid &amp;&amp; (el.aid = data[0].aid);</code></pre></blockquote><blockquote><ul><li>完整实现</li></ul><pre><code>&lt;div id=&quot;area&quot;&gt;&lt;/div&gt;&lt;script&gt;  // 我们需要利用JS来动态创建三个下拉列表，同时把对应的数据填充好，然后再一次性插入到页面中来  var area = document.getElementById(&quot;area&quot;);  var selectArr = []; // 用来保存初始的三个下拉列表  init(area, data);  // 初始化函数  function init(el, data) &#123;    // 创建下拉列表    var select = document.createElement(&quot;select&quot;); // 创建一个下拉列表    selectArr.push(select);    // select.addEventListener(&#39;change&#39;,fn,false);    for (var i = 0; i &lt; data.length; i++) &#123;      // 创建option      var option = document.createElement(&quot;option&quot;);      // 这里是重点，这个对应的id等下要用来找数据      option.value = data[i].pid || data[i].cid || data[i].aid;      option.text = data[i].fullname;      select.appendChild(option);    &#125;    el.appendChild(select);</code></pre></blockquote><pre><code>// 保存对应pid或cid 或 aid到对象身上data[0].pid &amp;&amp; (select.pid = data[0].pid);data[0].cid &amp;&amp; (select.cid = data[0].cid);data[0].aid &amp;&amp; (select.aid = data[0].aid);</code></pre><blockquote></blockquote><pre><code>// 递归调用 初始化市 区数据if (data[0].children) &#123;  init(el, data[0].children);&#125;</code></pre><p>  }</p><blockquote></blockquote><p>  &#x2F;&#x2F; 开始级省份下拉列表添加change事件<br>  selectArr[0].onchange &#x3D; function () {<br>    &#x2F;&#x2F; 查找省份对应的id，然后用他来查找省份对应的市数据<br>    var _index &#x3D; this.selectedIndex;<br>    var pid &#x3D; this.options[_index].value;<br>    this.pid &#x3D; pid; &#x2F;&#x2F; 保存pid<br>    &#x2F;&#x2F; 找到对应省份的市数据 ，首先找到对应省份，然后找到对应的市数据，然后再填充<br>    &#x2F;&#x2F; 直接拿着对应的省份，去所有数据中找，然后把对应市数据拿到<br>    var children &#x3D; find({ pid: pid }, data);<br>    &#x2F;&#x2F; 拿省份对应的市数据，那就开始填充数据<br>    addDate(selectArr[1], children);<br>    &#x2F;&#x2F; 驱动区数据的变化<br>    addDate(selectArr[2], children[0].children);<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F; 开始市级下拉列表添加change事件<br>  selectArr[1].onchange &#x3D; function () {<br>    var _index &#x3D; this.selectedIndex;<br>    var cid &#x3D; this.options[_index].value;<br>    this.cid &#x3D; cid; &#x2F;&#x2F; 保存id<br>    &#x2F;&#x2F; 拿市 id要去找对应的区数据</p><blockquote></blockquote><pre><code>var children = find(&#123; pid: selectArr[0].pid, cid: cid &#125;, data);// 填充数据addDate(selectArr[2], children);</code></pre><p>  };</p><blockquote></blockquote><p>  selectArr[2].onchange &#x3D; function () {<br>    var _index &#x3D; this.selectedIndex;<br>    var id &#x3D; this.options[_index].value;<br>    this.aid &#x3D; id; &#x2F;&#x2F; 保存aid<br>  };</p><blockquote></blockquote><p>  &#x2F;&#x2F; 填充数据，el谁里面填数据 data用来填充的数据<br>  function addDate(el, data) {<br>    el.innerHTML &#x3D; “”; &#x2F;&#x2F; 往el中填数据前，要清空之前数据<br>    el.pid &amp;&amp; (el.pid &#x3D; data[0].pid);<br>    el.cid &amp;&amp; (el.cid &#x3D; data[0].cid);<br>    el.aid &amp;&amp; (el.aid &#x3D; data[0].aid);<br>    var frag &#x3D; document.createDocumentFragment();<br>    for (var i &#x3D; 0; i &lt; data.length; i++) {<br>      var option &#x3D; document.createElement(“option”);<br>      option.value &#x3D; data[i].pid || data[i].cid || data[i].aid;<br>      option.text &#x3D; data[i].fullname;<br>      frag.appendChild(option);<br>    }<br>    el.appendChild(frag);<br>  }</p><blockquote></blockquote><p>  function find(ids, data) {<br>    &#x2F;&#x2F; 遍历对象<br>    for (var key in ids) {<br>      for (var i &#x3D; 0; i &lt; data.length; i++) {<br>        &#x2F;&#x2F; a++;<br>        if (<br>          (data[i].pid &amp;&amp; data[i].pid &#x3D;&#x3D;&#x3D; ids[key]) ||<br>          (data[i].cid &amp;&amp; data[i].cid &#x3D;&#x3D;&#x3D; ids[key]) ||<br>          (data[i].aid &amp;&amp; data[i].aid &#x3D;&#x3D;&#x3D; ids[key])<br>        ) {<br>          data &#x3D; data[i].children; &#x2F;&#x2F; 每一轮查找下一轮要查询的数据<br>          break; &#x2F;&#x2F; 找到了就退出，不找了，只退出第一层for循环<br>        }<br>      }<br>    }<br>    &#x2F;&#x2F; console.log(a);<br>    return data || null;<br>  }</p><blockquote></blockquote><p>  &#x2F;&#x2F; 无关函数，用来询对象身上的pid或cid 或 aid属性<br>  function show() {<br>    for (var i &#x3D; 0; i &lt; selectArr.length; i++) {<br>      console.log(selectArr[i].pid || selectArr[i].cid || selectArr[i].aid);<br>    }<br>  }</p><blockquote><p></script></p><pre><code></code></pre></blockquote><h3 id="五、DOM-事件流"><a href="#五、DOM-事件流" class="headerlink" title="五、DOM 事件流"></a>五、DOM 事件流</h3><ol><li>事件流<blockquote><p>在了解什么是事件流之前，我们先来回答下面这个问题。</p><ul><li>以下图中的四个圆<code>A、B、C、D</code>共用一个圆心，这个圆心称为同心圆。如果用手指点击中心，那我们按住了哪个圆？</li><li>实际上我们<strong>按住了所有的圆</strong><img src="同心圆.png"></li></ul></blockquote></li></ol><blockquote><blockquote><p>网页事件监听也是类似的,如果多个元素发生嵌套，当我们点击最里面的元素，本质上相当于点击了所有元素。</p></blockquote></blockquote><p><strong>假设</strong></p><blockquote><p>以上图中的<code>A、B、C、D</code>为嵌套的 4 个 div 元素，当我在中心点点击后，则相当于四个 div 元素都触发了click点击事件。那事件触发的顺序是以下那种情况？</p><ul><li>第一种情况： A —&gt; B —&gt; C —&gt; D</li><li>第二种情况： D —&gt; C —&gt; B —&gt; A<br>以上两种情况<strong>都有可能</strong>，但在具体的应用中，到底是情况一，还是情况二呢？<br>这就需要我们了解事件流</li><li>事件流描述了页面接收事件的顺序</li><li>事件流分为 3 个阶段：<strong>事件捕获</strong>、<strong>到达目标</strong>、<strong>事件冒泡</strong><blockquote><p>事件的传播本质是：先从外到内，到达实际的目标元素，然后再从内到外</p></blockquote></li><li><strong>从外到内</strong>的阶段称为：事件捕获阶段</li><li><strong>从内到外</strong>的阶段称为：事件冒泡阶段<img src="事件流.png"></li></ul></blockquote><blockquote><blockquote><p>注：</p><ul><li>事件冒泡： 最先由<code>IE公司</code>提出，事件定义为从最具体的元素开始触发，然后向上传播至文档</li><li>事件捕获： 最先由<code>网景公司</code>提出，事件定义为从最外层（最不具体的节点）开骀先收到（触发）事件，然后再传到具体的节点。</li><li>最后规范中规定事件流分为 3 个阶段：事件捕获、到达目标、事件冒泡</li></ul></blockquote></blockquote><ol start="2"><li>如何监听事件捕获与冒泡<blockquote><p><strong>监听事件有两种方式：</strong></p><ul><li>on 开头方式</li><li>addEventListener 方式<blockquote><p>那这两种方式在事件监听上有何不同 ？</p></blockquote></li></ul></blockquote></li></ol><ul><li><p>on开头方式，只能监听到事件冒泡阶段，不支持监听事件捕获阶段</p><blockquote><ul><li>书写顺序不影响冒泡顺序，只会从内往外触发</li></ul><pre><code>&lt;div class=&quot;box1&quot;&gt; &lt;div class=&quot;box2&quot;&gt;   &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt;var box1 = document.querySelector(&quot;.box1&quot;);var box2 = document.querySelector(&quot;.box2&quot;);var box3 = document.querySelector(&quot;.box3&quot;); box2.onclick = function () &#123;  console.log(&quot;冒泡2&quot;);&#125;; box1.onclick = function () &#123;  console.log(&quot;冒泡1&quot;);&#125;; box3.onclick = function () &#123;  console.log(&quot;冒泡3&quot;);&#125;;//冒泡3-&gt;冒泡2-&gt;冒泡1&lt;/script&gt;</code></pre></blockquote></li><li><p>addEventListener 方式监听事件</p><blockquote><p>由它的第三个参数决定，是监听捕获还是冒泡阶段</p><ul><li>如果第三个参数是true ， 表示监听捕获阶段</li><li>如果第三个参数是false ，表示监听冒泡阶段</li><li>同一个事件的不同阶段，先执行捕获阶段，再执行冒泡阶段</li><li>不同事件的同一阶段，如果是”true”则由外向内执行，如果是”false”则由内向外执行，书写顺序不影响执行顺序</li></ul><pre><code>// 监听捕获阶段element.addEventListener(&quot;click&quot;, function () &#123;&#125;, true);</code></pre></blockquote><p>&#x2F;&#x2F; 监听冒泡阶段<br>element.addEventListener(“click”, function () {}, false);</p><blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><pre><code>&lt;div class=&quot;box1&quot;&gt; &lt;div class=&quot;box2&quot;&gt;   &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt;  var box1 = document.querySelector(&quot;.box1&quot;);  var box2 = document.querySelector(&quot;.box2&quot;);  var box3 = document.querySelector(&quot;.box3&quot;);  box1.addEventListener(    &quot;click&quot;,    function () &#123;      console.log(&quot;冒泡1&quot;);    &#125;,    false  );  box2.addEventListener(    &quot;click&quot;,    function () &#123;      console.log(&quot;捕获2&quot;);    &#125;,    true  );  box2.addEventListener(    &quot;click&quot;,    function () &#123;      console.log(&quot;冒泡2&quot;);    &#125;,    false  );  box3.addEventListener(    &quot;click&quot;,    function () &#123;      console.log(&quot;冒泡3&quot;);    &#125;,    false  );  //捕获2-&gt;冒泡3-&gt;冒泡2-&gt;冒泡1&lt;/script&gt;</code></pre></blockquote><ol start="3"><li>mouseenter 和 mouseleave 事件不支持冒泡<table><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td>mouseenter</td><td>当鼠标进入某个对象（相似事件 onmouseover）不能向上冒泡</td></tr><tr><td>mouseleave</td><td>当鼠标离开某个对象（相似事件 onmouseout）不能向上冒泡</td></tr></tbody></table></li></ol><blockquote><pre><code>&lt;div class=&quot;box1&quot;&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;  var box1 = document.querySelector(&quot;.box1&quot;);  var box2 = document.querySelector(&quot;.box2&quot;);  //   mouseenter不会冒泡  box1.addEventListener(    &quot;mouseenter&quot;,    function () &#123;      console.log(&quot;冒泡移入1&quot;);    &#125;,    false  );  box2.addEventListener(    &quot;mouseenter&quot;,    function () &#123;      console.log(&quot;冒泡移入2&quot;);    &#125;,    false  );</code></pre></blockquote><p>  &#x2F;&#x2F;mouseover会冒泡<br>  box1.addEventListener(<br>    “mouseover”,<br>    function () {<br>      console.log(“冒泡移入1”);<br>    },<br>    false<br>  );<br>  box2.addEventListener(<br>    “mouseover”,<br>    function () {<br>      console.log(“冒泡移入2”);<br>    },<br>    false<br>  );</p><blockquote><p></script></p><pre><code>&gt;当鼠标从外往内移入时&gt;- mouseenter：冒泡移入1-&gt;冒泡移入2&gt;- mouseover：冒泡移入1-&gt;冒泡移入2-&gt;冒泡移入1，也就是当鼠标放在里面的div时，会同时触发两个冒泡事件</code></pre></blockquote><ol start="4"><li><p>on 与 addEventListener 两者监听事件的区别</p><table><thead><tr><th>区别</th><th>on 方式监听</th><th>addEventListener 方式监听</th></tr></thead><tbody><tr><td>事件捕获与冒泡</td><td>只能监听到冒泡阶段</td><td>第三个参数是 true，监听捕获阶段</td></tr><tr><td>事件处理函数</td><td>同一事件，只能有一个</td><td>同一事件，任意个都行</td></tr><tr><td>事件处理函数执行顺序</td><td>写在后面的覆盖前面的，以最后的一个为主</td><td>先执行捕获阶段，再执行冒泡阶段，在这两个阶段，以代码书写时的顺序为主，从上往下执行每个事件处理函数</td></tr></tbody></table></li><li><p>经典面试题</p><blockquote><p>面试真题</p><ul><li>给一个 DOM 同时绑定两个点击事件，一个用捕获，一个用冒泡，说下会执行几次事件，然后会先执行冒泡还是捕获（知乎）</li></ul></blockquote></li></ol><blockquote><ul><li>会执行两次事件，先执行捕获事件，再执行冒泡事件，不管两个事件绑定的先后顺序如何，结果都不会变。</li></ul></blockquote><h3 id="六、event-事件对象"><a href="#六、event-事件对象" class="headerlink" title="六、event 事件对象"></a>六、event 事件对象</h3><blockquote><ul><li>事件处理函数提供了一个形参，它是一个对象，封装了本次<strong>事件的所有细节</strong></li><li>这个参数通常用单词<code>event</code>或<code>e</code>、<code>ev</code>表示</li></ul><pre><code>box.onmousemove = function (e) &#123;  // 对象e就是这次事件的 “事件对象”&#125;;</code></pre></blockquote><ol><li>鼠标位置<blockquote><p>事件对象 event 上提供了鼠标位置相关的属性，具体如下表</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>clientX</td><td>鼠标指针相对于<strong>浏览器</strong>的水平坐标</td></tr><tr><td>clientY</td><td>鼠标指针相对于<strong>浏览器</strong>的垂直坐标</td></tr><tr><td>pageX</td><td>鼠标指针相对于<strong>整张网页</strong>的水平坐标</td></tr><tr><td>pageY</td><td>鼠标指针相对于<strong>整张网页</strong>的垂直坐标</td></tr><tr><td>offsetX</td><td>鼠标指针相对于<strong>事件源元素</strong>的水平坐标</td></tr><tr><td>offsetY</td><td>鼠标指针相对于<strong>事件源元素</strong>的垂直坐标</td></tr></tbody></table></blockquote></li></ol><blockquote><pre><code>&lt;style&gt;  body &#123;    margin: 0;    height: 3000px;  &#125;  .box &#123;    width: 200px;    height: 200px;    border: 50px solid skyblue;    background-color: khaki;    margin: 100px;  &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  box.onclick = function (e) &#123;    console.log(&quot;clientX:&quot; + e.clientX);    console.log(&quot;clientY:&quot; + e.clientY);    console.log(&quot;pageX:&quot; + e.pageX);    console.log(&quot;pageY:&quot; + e.pageY);    console.log(&quot;offsetX:&quot; + e.offsetX);    console.log(&quot;offsetY:&quot; + e.offsetY);  &#125;;&lt;/script&gt;</code></pre></blockquote><ul><li><p>滚动条到顶时</p><blockquote><ul><li>此时<code>client</code>与<code>page</code>得到的数值一样</li><li><code>offset</code>：相对于<strong>事件源元素</strong>的坐标，如果点击的位置在边框里，则会得到负值；事件源元素不包括边框<img src="鼠标位置-滚动条到顶.png"></li></ul></blockquote></li><li><p>拉动滚动条时</p><blockquote><ul><li>移动滚动条时，<code>pageY</code>会受到影响，与<code>clientY</code>数值不一样<img src="鼠标位置—移动滚动条.png"></li></ul></blockquote></li></ul><ol start="2"><li>e.key 和 e.code<blockquote><p>事件对象上提供了获取<strong>键盘键码</strong>相关的属性，主要与<code>onkeydown</code>、<code>onkeyup</code>事件结合使用。</p><table><thead><tr><th>属性名</th><th>用处</th></tr></thead><tbody><tr><td>key</td><td>返回用户按下的物理按键的值。按下的键如果是可打印内容，返回的就是对应按扭的值；如果是一个控制键或特殊字符，返回一个事先定义好的值，参考以下表</td></tr><tr><td>code</td><td>表示键盘上的物理键</td></tr><tr><td>charCode</td><td>被弃用</td></tr><tr><td>keyCode</td><td>被弃用</td></tr></tbody></table></blockquote></li></ol><blockquote><ul><li>控制键或特殊字符<table><thead><tr><th>按键</th><th>键值</th></tr></thead><tbody><tr><td>四个方键← ↑ → ↓</td><td><code>ArrowLeft</code>、<code>ArrowUp</code>、<code>ArrowRight</code>、<code>ArrowDown</code></td></tr><tr><td>回车键</td><td>Enter</td></tr><tr><td>空格键</td><td>“”</td></tr><tr><td>删除键</td><td>Backspace</td></tr></tbody></table></li></ul><pre><code>document.onkeydown = function (e) &#123;  console.log(&quot;key:&quot; + e.key);  console.log(&quot;code:&quot; + e.code);&#125;;</code></pre></blockquote><ol start="3"><li><p>e.altKey、e.ctrlKey、e.shiftKey</p><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>ctrlKey</td><td>表示事件触发时<code>ctrl键</code>是否按下；如果按下，则<code>e.ctrlKey</code>返回值为<code>true</code>，否则为<code>false</code></td></tr><tr><td>altKey</td><td>表示事件触发时<code>alt键</code>是否按下；如果按下，则<code>e.altKey</code>返回值为<code>true</code>，否则为<code>false</code></td></tr><tr><td>shiftKey</td><td>表示事件触发时<code>shift键</code>是否按下；如果按下，则 <code>e.shiftKey</code>返回值为<code>true</code>，否则为<code>false</code></td></tr></tbody></table><blockquote><pre><code>document.onkeydown = function (e) &#123;  console.log(&quot;altkey:&quot; + e.altKey);  console.log(&quot;ctrlkey:&quot; + e.ctrlKey);  console.log(&quot;shift:&quot; + e.shiftKey);&#125;;</code></pre></blockquote></li><li><p>e.preventDefault() 方法</p><blockquote><ul><li><code>e.preventDefault()</code>方法用来阻止事件产生的**”默认动作”**</li><li>常见图片默认的拖拽行为、超链接的默认点击跳转行为</li></ul><pre><code>&lt;img src=&quot;../src/games/flower.png&quot; alt=&quot;&quot; width=&quot;300px&quot; /&gt;&lt;a href=&quot;www.baidu.com&quot;&gt;百度&lt;/a&gt;&lt;script&gt;  var img = document.querySelector(&quot;img&quot;);  var a = document.querySelector(&quot;a&quot;);  img.onmousedown = function (e) &#123; e.preventDefault();  &#125;;  a.onclick = function (e) &#123; e.preventDefault();  &#125;;&lt;/script&gt;</code></pre></blockquote></li><li><p>e.stopPropagation() 方法</p><blockquote><ul><li><code>e.stopPropagation()</code>方法<strong>用来阻止事件冒泡</strong></li><li>在一些场合，非常有必要切断事件继续传播，否则会造成页面特效显示出bug</li></ul><pre><code>&lt;div class=&quot;box1&quot;&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;  var box1 = document.querySelector(&quot;.box1&quot;);  var box2 = document.querySelector(&quot;.box2&quot;);  box1.onclick = function (e) &#123; console.log(&quot;冒泡box1&quot;);  &#125;;  box2.onclick = function (e) &#123; console.log(&quot;冒泡box2&quot;); e.stopPropagation();//加了之后，阻止冒泡  &#125;;&lt;/script&gt;</code></pre></blockquote></li><li><p>案例</p><blockquote><ul><li><code>ctrl+a</code>改变网页背景颜色</li></ul><pre><code>&lt;script&gt;  document.onkeydown = function (e) &#123; console.log(e.key); console.log(e.ctrlKey); if (e.key === &quot;a&quot; &amp;&amp; e.ctrlKey) &#123;   document.body.style.backgroundColor = &quot;red&quot;; &#125;  &#125;;&lt;/script&gt;</code></pre></blockquote></li></ol><h3 id="七、事件委托"><a href="#七、事件委托" class="headerlink" title="七、事件委托"></a>七、事件委托</h3><h4 id="什么是事件委托"><a href="#什么是事件委托" class="headerlink" title="什么是事件委托"></a>什么是事件委托</h4><blockquote><ul><li>事件委托可以理解为，本来是 A 要处理的事情，现在委托给了 B 来处理，事件委托也称为<strong>事件代理</strong>。</li><li>事件委托是通过<strong>事件冒泡机制</strong>来实现，本来由各个子节点处理的事情，现在全部委托给其<strong>父节点</strong>来处理。<blockquote><p>接下来我们通过下面这个案例来演示，对比常规方法和事件委托处理之间的优缺点。</p></blockquote></li></ul></blockquote><ol><li>案例1：批量给子元素添加事件<blockquote><ul><li>页面上有一个无序列表<ul>，它内部共有10个<li>元素，请批量给它们添加点击事件监听</li><li>实现效果：点击哪个<li>元素，哪个<li>元素的文字颜色就变红</li></ul><pre><code>&lt;ul&gt; &lt;li&gt;我是第1个li&lt;/li&gt; &lt;li&gt;我是第2个li&lt;/li&gt; &lt;li&gt;我是第3个li&lt;/li&gt; &lt;li&gt;我是第4个li&lt;/li&gt; &lt;li&gt;我是第5个li&lt;/li&gt; &lt;li&gt;我是第6个li&lt;/li&gt; &lt;li&gt;我是第7个li&lt;/li&gt; &lt;li&gt;我是第8个li&lt;/li&gt; &lt;li&gt;我是第9个li&lt;/li&gt; &lt;li&gt;我是第10个li&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;  //点击哪个&lt;li&gt;元素，哪个&lt;li&gt;元素的文字颜色就变红  var ul = document.getElementsByTagName(&quot;ul&quot;)[0];  var liList = document.getElementsByTagName(&quot;li&quot;);</code></pre></blockquote>  &#x2F;&#x2F; 常规思路：for循环给每个li添加点击事件<br>  for (var i &#x3D; 0; i &lt; liList.length; i++) {<br> liList[i].onclick &#x3D; function () {<br>   this.style.color &#x3D; “red”;<br> };<br>  }<blockquote></blockquote>  &#x2F;&#x2F;事件委托 基础版：<br>  ul.onclick &#x3D; function (e) {<br> console.log(e.target); &#x2F;&#x2F; <li>….</li>;<br> console.log(e.currentTarget); &#x2F;&#x2F; <ul>…</ul>;<br> e.target.style.color &#x3D; “red”; &#x2F;&#x2F;这时，如果点击ul的区域，那所有li都会变色<br>  };<blockquote><p>  &#x2F;&#x2F;事件委托 优化版：<br>  ul.onclick &#x3D; function (e) {<br> var tag &#x3D; e.target.tagName; &#x2F;&#x2F;获取元素的标签名，大写形式<br> if (tag.toLowerCase() &#x3D;&#x3D;&#x3D; “li”) {<br>   e.target.style.color &#x3D; “red”;<br> }<br>  };<br></script></p><pre><code>&gt;- `.toLowerCase()`大写转小写</code></pre></blockquote></li></ol><ul><li><p>常规思路：for循环批量给li添加点击事件</p><blockquote><p>批量添加事件监听的<strong>性能问题</strong></p><ul><li>每一个事件监听注册都会消耗一定的系统内存，而批量添加事件会导致监听数量太多，内存消耗会非常大</li><li>再加上，每个 li 的事件处理函数都是不同的函数，这些函数本身也会占用内存</li></ul></blockquote></li><li><p>事件委托方式处理</p><blockquote><ul><li>我们把所有子节点 li 的 click 事件全部委托给到他们对共同的父节点 ul 来处理</li><li>给 ul 添加 click 事件，当点击每个 li 时，其 li 上的 click 事件会通过冒泡的机制，来触发父节点上的 click 事件<blockquote><p>事件委托通常需要结合事件对象身上的<code>target</code>和 <code>currentTarget</code>属性来处理</p></blockquote></li></ul></blockquote></li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>target</td><td>触发此事件的最早元素，即 “事件源元素”</td></tr><tr><td>currentTarget</td><td>绑定事件的那个元素</td></tr></tbody></table><blockquote><p>事件委托的<strong>优点</strong></p><ul><li>减少了事件监听的个数，同时绑定的函数个数也大大减少了。这些减少，本质就是减少内存的消耗，从而提高性能。</li></ul></blockquote><ol start="2"><li>案例 2：给新增元素动态绑定事件<blockquote><ul><li>页面上有一个无序列表<code>&lt;ul&gt;</code>，它内部没有<code>&lt;li&gt;</code> 元素，请制作一个按钮，点击这个按钮就能<strong>增加</strong>一个 li 元素</li><li>并且要求每个 li 上有一个<strong>删除</strong>按扭，点击后删除当前这个 li 元素</li></ul></blockquote></li></ol><ul><li><p>常规方法</p><blockquote><ul><li><code>span</code>的删除操作在新增按钮的点击事件里，因为在外面获取不到<code>span</code></li></ul><pre><code>&lt;button id=&quot;J_add&quot;&gt;新增&lt;/button&gt;&lt;ul id=&quot;J_list&quot;&gt; &lt;!-- &lt;li&gt;第1个li元素&lt;span&gt;删除&lt;/span&gt;&lt;/li&gt; &lt;li&gt;第2个li元素&lt;span&gt;删除&lt;/span&gt;&lt;/li&gt; &lt;li&gt;第3个li元素&lt;span&gt;删除&lt;/span&gt;&lt;/li&gt; &lt;li&gt;第4个li元素&lt;span&gt;删除&lt;/span&gt;&lt;/li&gt; --&gt;&lt;/ul&gt;&lt;script&gt;var addButton = document.getElementById(&quot;J_add&quot;);var ul = document.getElementById(&quot;J_list&quot;);var span = document.querySelector(&quot;span&quot;);var sum = 0;</code></pre></blockquote><p>addButton.onclick &#x3D; function () {<br>  &#x2F;&#x2F;新增li元素<br>  var li &#x3D; document.createElement(“li”);<br>  sum++;<br>  li.innerText &#x3D; “第” + sum + “个li元素”;<br>  ul.appendChild(li);<br>  &#x2F;&#x2F;新增span元素<br>  var span &#x3D; document.createElement(“span”);<br>  span.innerText &#x3D; “删除”;<br>  li.appendChild(span);<br>  ul.appendChild(li);</p><blockquote></blockquote><p>  &#x2F;&#x2F;删除操作——常规版 parent.removeChild(child)<br>  span.onclick &#x3D; function () {<br>var li &#x3D; this.parentNode;<br>li.parentNode.removeChild(li);<br>  };<br>};</p><blockquote><p></script></p><pre><code></code></pre></blockquote></li><li><p>事件委托版</p><blockquote><pre><code>&lt;button id=&quot;J_add&quot;&gt;新增&lt;/button&gt;&lt;ul id=&quot;J_list&quot;&gt; &lt;!-- &lt;li&gt;第1个li元素&lt;span&gt;删除&lt;/span&gt;&lt;/li&gt; &lt;li&gt;第2个li元素&lt;span&gt;删除&lt;/span&gt;&lt;/li&gt; &lt;li&gt;第3个li元素&lt;span&gt;删除&lt;/span&gt;&lt;/li&gt; &lt;li&gt;第4个li元素&lt;span&gt;删除&lt;/span&gt;&lt;/li&gt; --&gt;&lt;/ul&gt;&lt;script&gt;var addButton = document.getElementById(&quot;J_add&quot;);var ul = document.getElementById(&quot;J_list&quot;);var span = document.querySelector(&quot;span&quot;);var sum = 0;</code></pre></blockquote><p>addButton.onclick &#x3D; function () {<br>  &#x2F;&#x2F;新增li元素<br>  var li &#x3D; document.createElement(“li”);<br>  sum++;<br>  li.innerText &#x3D; “第” + sum + “个li元素”;<br>  ul.appendChild(li);<br>  &#x2F;&#x2F;新增span元素<br>  var span &#x3D; document.createElement(“span”);<br>  span.innerText &#x3D; “删除”;<br>  li.appendChild(span);<br>  ul.appendChild(li);<br>};</p><blockquote></blockquote><p>&#x2F;&#x2F;事件委托版<br>oul.onclick &#x3D; function (e) {<br>  var tag &#x3D; e.target;<br>  if (tag.tagName.toLowerCase() !&#x3D;&#x3D; “span”) return;<br>  this.removeChild(tag.parentNode); &#x2F;&#x2F;this是ul<br>};</p><blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul><blockquote><blockquote><p>注意：</p><ul><li>如果写成这样是报错的，因为此时的<code>tag</code>只是保存着字符串<code>&quot;span&quot;</code>的变量，找不到它的父元素</li></ul></blockquote><pre><code>tag = e.target.tagName.toLowerCase()if (tag !== &quot;span&quot;) return;    this.removeChild(tag.parentNode); </code></pre></blockquote><ol start="3"><li>案例 3：选项卡效果<blockquote><p>涉及知识点</p><ul><li>事件委托</li><li>自定属性操作 dataset</li><li>节点操作 firstElementChild</li></ul></blockquote></li></ol><ul><li><p>方式一：用相同的下标</p><blockquote><pre><code>&lt;style&gt;ul,li &#123;  margin: 0;  padding: 0;  list-style: none;&#125;.box &#123;  width: 400px;  height: 250px;  margin: 50px;  border: 1px solid #000;&#125;.box-tab &#123;  width: 100%;  height: 50px;  line-height: 50px;  text-align: center;&#125;.box-tab li &#123;  float: left;  width: 80px;  cursor: pointer;&#125;.box-tab li.current &#123;  color: red;&#125;.box-show .item &#123;  width: 100%;  height: 200px;  background-color: #ddd;  display: none;  font-size: 30px;  text-align: center;&#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt; &lt;ul class=&quot;box-tab&quot; id=&quot;J_tab&quot;&gt;   &lt;li class=&quot;current&quot;&gt;最新&lt;/li&gt;   &lt;li&gt;内地&lt;/li&gt;   &lt;li&gt;港台&lt;/li&gt;   &lt;li&gt;欧美&lt;/li&gt;   &lt;li&gt;韩国&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;box-show&quot;&gt;   &lt;div class=&quot;item&quot; style=&quot;display: block&quot;&gt;最新&lt;/div&gt;   &lt;div class=&quot;item&quot;&gt;内地&lt;/div&gt;   &lt;div class=&quot;item&quot;&gt;港台&lt;/div&gt;   &lt;div class=&quot;item&quot;&gt;欧美&lt;/div&gt;   &lt;div class=&quot;item&quot;&gt;韩国&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt;var oUL = document.getElementById(&quot;J_tab&quot;);var liList = document.querySelectorAll(&quot;.box-tab li&quot;);var items = document.querySelectorAll(&quot;.box-show .item&quot;);</code></pre></blockquote><p>var currentLi &#x3D; oUL.firstElementChild; &#x2F;&#x2F;默认第一个<br>var currentItem &#x3D; items[0]; &#x2F;&#x2F;默认第一个<br> &#x2F;&#x2F;给每一个li添加下标<br>for (var i &#x3D; 0; i &lt; liList.length; i++) {<br>  liList[i].index &#x3D; i;<br>}<br>oUL.onclick &#x3D; function (e) {<br>  var tag &#x3D; e.target; &#x2F;&#x2F;获取事件源元素<br>  var tagName &#x3D; tag.tagName.toLowerCase();<br>  &#x2F;&#x2F;如果事件源是li<br>  if (tagName !&#x3D;&#x3D; “li”) return;<br>  &#x2F;&#x2F;移除上一个点击元素的类名<br>  currentLi.classList.remove(“current”);<br>  &#x2F;&#x2F;给每个被点击的li添加current<br>  tag.classList.add(“current”);<br>  currentLi &#x3D; tag;<br>   &#x2F;&#x2F;切换下方菜单<br>  var num &#x3D; tag.index; &#x2F;&#x2F;获得当前点击元素的下标<br>  currentItem.style &#x3D; “display:none”; &#x2F;&#x2F;将上一个点击的元素隐藏<br>  items[num].style &#x3D; “display:block”;<br>  currentItem &#x3D; items[num];<br>};</p><blockquote><p></script></p><pre><code></code></pre></blockquote></li><li><p>方式二：用相同的属性</p><blockquote><ul><li>使用属性选择器获得与<code>li</code>的id相同的展示页</li><li>属性选择器<code>标签名/类名[属性=&quot;&quot;]</code></li></ul><pre><code>&lt;div class=&quot;box&quot;&gt; &lt;ul class=&quot;box-tab&quot; id=&quot;J_tab&quot;&gt;   &lt;li class=&quot;current&quot; data-id=&quot;a&quot;&gt;最新&lt;/li&gt;   &lt;li data-id=&quot;b&quot;&gt;内地&lt;/li&gt;   &lt;li data-id=&quot;c&quot;&gt;港台&lt;/li&gt;   &lt;li data-id=&quot;d&quot;&gt;欧美&lt;/li&gt;   &lt;li data-id=&quot;e&quot;&gt;韩国&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;box-show&quot;&gt;   &lt;div class=&quot;item&quot; data-id=&quot;a&quot; style=&quot;display: block&quot;&gt;最新&lt;/div&gt;   &lt;div class=&quot;item&quot; data-id=&quot;b&quot;&gt;内地&lt;/div&gt;   &lt;div class=&quot;item&quot; data-id=&quot;c&quot;&gt;港台&lt;/div&gt;   &lt;div class=&quot;item&quot; data-id=&quot;d&quot;&gt;欧美&lt;/div&gt;   &lt;div class=&quot;item&quot; data-id=&quot;e&quot;&gt;韩国&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt;var oUL = document.getElementById(&quot;J_tab&quot;);var items = document.querySelectorAll(&quot;.box-show .item&quot;); var currentLi = oUL.firstElementChild; //默认第一个var currentItem = items[0]; //默认第一个 oUL.onclick = function (e) &#123;  var tag = e.target; //获取事件源元素  var tagName = tag.tagName.toLowerCase();  //如果事件源是li  if (tagName !== &quot;li&quot;) return;  //移除上一个点击元素的类名  currentLi.classList.remove(&quot;current&quot;);  //给每个被点击的li添加current  tag.classList.add(&quot;current&quot;);  currentLi = tag;</code></pre></blockquote><p>&#x2F;&#x2F;切换下方菜单<br>var id &#x3D; tag.dataset.id; &#x2F;&#x2F;获得当前点击元素的id<br>&#x2F;&#x2F;选择属性与id相同的item，使用属性选择器img[alt&#x3D;””]<br>var item &#x3D; document.querySelector(<br>  “.box-show .item[data-id&#x3D;” + id + “]”<br>);<br>currentItem.style.display &#x3D; “none”; &#x2F;&#x2F;将上一个点击的元素隐藏<br>item.style.display &#x3D; “block”;<br>currentItem &#x3D; item;<br>};</p><blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul><ol start="4"><li>事件委托的使用场景和注意事项和优点</li></ol><ul><li><p>注意事项：<strong>不能</strong>委托不冒泡的事件给祖先元素</p><blockquote><ul><li>通过上面的学习，我知道事件委托本质就是利用了事件的冒泡机制来实现</li><li>所以对于不支持事件冒泡的事件是没有办法使用事件委托<blockquote><p>如：onmouseenter 、 onmouseleave 、onload、onblur、onfocus，是不支持事件冒泡的</p></blockquote></li></ul></blockquote></li><li><p>使用场景：</p><blockquote><ul><li>当有大量类似元素需要批量添加相同的事件，处理相同的事情时，可以使用事件委托，把事件委托给这些元素的父级或祖先元素来处理。</li><li>当我们需要动态添加某节点时，我们可以把这些动态节点需要处理的事件委托给到父元素或祖先元素来处理。</li></ul></blockquote></li><li><p>优点：</p><blockquote><ul><li>可以减少事件的监听，减少内存的消耗，提升性能。</li></ul></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（九）</title>
      <link href="/2023/12/05/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B9%9D%EF%BC%89/"/>
      <url>/2023/12/05/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>首先我们来回顾下，JS 这门课程需要学习的内容。<br><img src="JS课程内容.png"></p></blockquote><blockquote><ul><li>前面我们学习了 ECMAScript 标准中规定的基本语法中的一部分，还有 JS 高级部分+ES6+Ajax+本地存储等内容，等学完 DOM 和 BOM 后再学。</li><li>从今天开始，我们开始学习 DOM 和 BOM 相关的内容。</li></ul></blockquote><h3 id="一、API-与-Web-API"><a href="#一、API-与-Web-API" class="headerlink" title="一、API 与 Web API"></a>一、API 与 Web API</h3><ol><li>API 应用程序接口<blockquote><p>API即：<code>Application Programming Interface</code> ，<strong>应用程序接口</strong>。在编程中可以理解为一些<strong>预先定义好的函数</strong>，目的是提供应用程序与开发人员基于某软件或硬件得一访问一组<strong>例程</strong>的能力，而无须考虑其底层的源代码为何、或理解其内部工作机制的细节。</p><ul><li>例程： 是某个系统对外提供的功能接口或服务的集合</li><li>接口： 站在现实角度，可以理解为两个物体的口子相连接，而无需关心内部实现</li></ul></blockquote></li></ol><blockquote><blockquote><p>简单理解：</p><ul><li>API 是一个被封装好具有一定功能的函数，程序需要使用某种功能时，只需要调用这个函数，就能轻松实现想要完成的功能。</li></ul></blockquote></blockquote><ol start="2"><li>Web API Web 应用程序接口<blockquote><p>Web API：<code>Web Application Programming Interface</code> 在前端可以理解为是浏览器提供的一套操作<strong>浏览器功能和页面元素</strong>的API，其中包括 DOM 和 BOM。</p><ul><li><code>DOM：Document Object Model</code>文档对象模型， 是 JavaScript <strong>操作网页</strong>的接口。它定义了访问<strong>HTML文档对象</strong>的一套属性、方法和事件。</li><li><code>BOM：Browser Object</code>浏览器对象模型， 是 JavaScript <strong>操作浏览器</strong>的接口，提供一系列与浏览器相关的信息<ul><li>DOM 与 BOM 是 W3C 国际组织定义的一套 Web 标准接口。</li><li>W3C（万维网联盟）创建于 1994 年，是 Web 技术领域最具权威和影响力的国际中立性技术标准机构。<blockquote><p>因为 Web API 很多，所以我们称其为 Web APIs。</p></blockquote></li></ul></li></ul></blockquote></li></ol><h3 id="二、DOM-概况与获取元素"><a href="#二、DOM-概况与获取元素" class="headerlink" title="二、DOM 概况与获取元素"></a>二、DOM 概况与获取元素</h3><h4 id="什么是-DOM"><a href="#什么是-DOM" class="headerlink" title="什么是 DOM"></a>什么是 DOM</h4><blockquote><p>DOM全称<code>Document Object Model</code>文档对象模型。</p><ul><li><code>Document</code>文档，表示的就是整个 <code>HTML</code> 网页文档</li><li><code>Object</code>对象 ，表示将网页中的<strong>每一个部分</strong>都转换为一个<strong>对象</strong></li><li><code>Model</code>模型，表示对象之间的关系，这样方便我们获取对象。</li></ul></blockquote><blockquote><ul><li><strong>DOM 是 JavaScript 操作网页的接口，那 JS 具体是如何操作 DOM 的呢 ？</strong></li><li>DOM 最大的特点，就是将整个HTML文档抽象成一个<strong>DOM 树</strong>，JS 可以通过操作DOM树来实现<strong>对HTML文档的添加、删除 、修改等操作</strong></li></ul></blockquote><ul><li>我们来下面这段简单的 HTML 代码<blockquote><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt;   &lt;meta charset=&quot;UTF-8&quot; /&gt;   &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;   &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;   &lt;title&gt;DOM文档结构树&lt;/title&gt; &lt;/head&gt; &lt;body&gt;   &lt;div&gt;     &lt;div&gt;我是文本节点&lt;/div&gt;</code></pre></blockquote></li></ul><blockquote><pre><code> &lt;img src=&quot;&quot; alt=&quot;&quot; /&gt; &lt;h3&gt;&lt;/h3&gt;</code></pre>   </div>   <p></p> </body></html>```<img src="DOM树.png"></blockquote><blockquote><blockquote><p>注</p></blockquote><ul><li>DOM 的<strong>最小组成单位</strong>叫做节点（node）</li><li>根据 W3C 的<code>HTML DOM 标准</code>，HTML 文档中的<strong>所有内容</strong>都是节点。</li><li>DOM 树就是由各种不同类型的节点组成。</li></ul></blockquote><h4 id="节点（node）"><a href="#节点（node）" class="headerlink" title="节点（node）"></a>节点（node）</h4><blockquote><ul><li>DOM 中的节点的类型有如下七种：</li></ul></blockquote><table><thead><tr><th>节点分类</th><th>描述</th></tr></thead><tbody><tr><td>Document 文档节点</td><td>整个 DOM 树的顶层节点</td></tr><tr><td>DocumentType 文档类型节点</td><td>如 doctype 标签(<code>&lt;!DOCTYPE html&gt;</code>)</td></tr><tr><td>Element 元素节点</td><td>网页的各种 HTML 标，如：<code>&lt;p&gt;</code>、<code>&lt;div&gt;</code></td></tr><tr><td>Attr 属性节点</td><td>元素的各种属性，如：title&#x3D;’标题’、class&#x3D;’box’</td></tr><tr><td>Text 文本节点</td><td>标签之间或标签包含的文本</td></tr><tr><td>Comment 注释节点</td><td>网页中的注释</td></tr><tr><td>DocumentFragment 文档片段</td><td>文档片段，不存于 DOM 树上，是一种游离态，通常作为仓库来使用</td></tr></tbody></table><h4 id="document-文档对象"><a href="#document-文档对象" class="headerlink" title="document 文档对象"></a>document 文档对象</h4><blockquote><ul><li>document 文档对象是<code>HTMLDocument</code>的<strong>实例</strong>，表示整个 HTML 页面（HTMLDocument 继承 Document）</li><li>document 是 window 对象的属性，因此是一个<strong>全局对象</strong></li><li>控制台 console 可以输入下面两行代码，就可以获得当前网页的文档对象</li></ul><pre><code>window.document; // 获取 文档节点对象document; // 获取 文档节点对象// 注意区分大小写， document 与 Document是两个不同的东西// HTMLDocument 继承 Document</code></pre></blockquote><blockquote><blockquote><ul><li>document 对象是 DOM 中最重要的东西，几乎所有DOM 的功能都封装在了 document 对象中</li><li>我们可以通过 document 对象，来访问元素节点。</li></ul></blockquote></blockquote><h4 id="访问元素节点的常用方法"><a href="#访问元素节点的常用方法" class="headerlink" title="访问元素节点的常用方法"></a>访问元素节点的常用方法</h4><blockquote><ul><li>所谓 “访问” 元素节点，就是指 “得到”、”获取” 页面上的元素节点</li><li>对节点进行操作，第一步就是要得到它<table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>getElementById()</td><td>通过元素 id 名获取到元素</td></tr><tr><td>getElementsByTagName()</td><td>通过标签名获取元素，返回的是一个数组</td></tr><tr><td>getElementsByClassName()</td><td>通过 class 名获取元素，返回的是一个数组</td></tr><tr><td>querySelector()</td><td>通过选择器得到元素,只能得到第一个被找到的元素</td></tr><tr><td>querySelectorAll()</td><td>通过选择器得到元素，返回的是一个数组</td></tr></tbody></table></li></ul></blockquote><ol><li><p>getElementById()</p><blockquote><ul><li><code>document.getElementById()</code>的功能是，通过元素的<strong>id名</strong>来得到元素节点</li><li>不管元素藏的位置有多深，都能通过 id 把它找到<blockquote><p>如果页面上有相同 id 的元素，则只能得到<strong>第一个</strong> ，id 是唯一的。</p></blockquote></li></ul><pre><code>&lt;div id=&quot;box&quot;&gt;我是一个盒子&lt;/div&gt;&lt;div id=&quot;box&quot;&gt;我是2&lt;/div&gt;&lt;p id=&quot;title&quot;&gt;我是一个段落&lt;/p&gt;&lt;script&gt;  var box = document.getElementById(&quot;box&quot;);  var title = document.getElementById(&quot;title&quot;);  console.log(box); // &lt;div id=&quot;box&quot;&gt;我是一个盒子&lt;/div&gt;  console.log(title); // &lt;p id=&quot;title&quot;&gt;我是一个段落&lt;/p&gt;  console.log(typeof box); // object&lt;/script&gt;</code></pre></blockquote></li><li><p>getElementsByTagName()</p><blockquote><ul><li><code>getElementsByTagName()</code>方法的功能是通过<strong>标签名</strong>得到节点元素组成的<strong>数组</strong>,而且得到的是一个类数组，没有数组身上的方法</li><li>所以我们可以通过遍历数组，批量操控每一元素节点</li></ul><pre><code>&lt;div id=&quot;box1&quot;&gt; &lt;p&gt;我是p段落标签&lt;/p&gt;&lt;/div&gt;&lt;div id=&quot;box2&quot;&gt; &lt;p&gt;我是p段落标签&lt;/p&gt; &lt;p&gt;我是p段落标签&lt;/p&gt; &lt;h3&gt;我是h3标签&lt;/h3&gt;&lt;/div&gt;&lt;script&gt; var pList = document.getElementsByTagName(&quot;p&quot;); console.log(pList); // HTMLCollection(3) [p, p, p]&lt;/script&gt;</code></pre><blockquote><p>HTMLCollection 对象，是一个类数组对象，他没有数组身上的方法。</p></blockquote></blockquote></li></ol><blockquote><ul><li>即使页面上<strong>只有一个</strong>指定标签名的节点，也将得到长度为 1 的数组</li><li>如果<strong>没有</strong>找到指定标签名的节点，则返回一个空数组</li><li>任何一个节点元素也可以调用 <code>getElementsByTagName()</code>方法，从而得到其内部的某种类的元素节点</li></ul></blockquote><ol start="3"><li><p>getElementsByClassName()</p><blockquote><ul><li><code>getElementsByClassName()</code>方法的功能是通过<strong>class 类名</strong>得到节点数组</li><li>如果只能获取一个元素，返回长度为 1 的数组，如果没有找到，则返回空数组</li><li>document和节点元素都可以调用 <code>getElementsByClassName()</code>方法，从而得到其内部的某类名的元素节点</li></ul><pre><code>&lt;div class=&quot;box box1&quot;&gt;box1&lt;/div&gt;&lt;div class=&quot;box box2&quot;&gt;box2&lt;/div&gt;&lt;div id=&quot;content&quot;&gt; &lt;div class=&quot;box box3&quot;&gt;box3&lt;/div&gt;&lt;/div&gt;&lt;script&gt;  // 获取所有class名中包含 box的元素  var box = document.getElementsByClassName(&quot;box&quot;);  console.log(box);  // 获取id content的元素  var content = document.getElementById(&quot;content&quot;);  // 获取content中class名为box的元素  var conBox = content.getElementsByClassName(&quot;box&quot;);  console.log(conBox);&lt;/script&gt;</code></pre></blockquote></li><li><p>querySelector()</p><blockquote><ul><li>通过<strong>CSS 选择器</strong>得到页面当中的元素，不过只能得到<strong>第一个</strong>被找到的元素</li></ul><pre><code>&lt;div class=&quot;box&quot;&gt;  &lt;p&gt;我是p1&lt;/p&gt;  &lt;p&gt;我是p2&lt;/p&gt;&lt;/div&gt;&lt;script&gt;  var p = document.querySelector(&quot;.box p&quot;);  console.log(p); // &lt;p&gt;我是p1&lt;/p&gt;&lt;/script&gt;</code></pre></blockquote></li><li><p>querySelectorAll()</p><blockquote><ul><li>通过<strong>CSS选择器</strong>得到页面当中的元素，返回被找到元素组成的<strong>数组</strong></li><li>如果只有一个符合要求的，也将得到长度为 1 的数组</li><li>如果没有符合要求的，则返回一个空数组</li></ul><pre><code>&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;title&quot;&gt;   &lt;p&gt;我是p&lt;/p&gt;   &lt;p&gt;我是p&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;title&quot;&gt; &lt;p&gt;我是p&lt;/p&gt; &lt;p&gt;我是p&lt;/p&gt;&lt;/div&gt;&lt;script&gt; var pList = document.querySelectorAll(&quot;.title p&quot;); console.log(pList); // NodeList(4) [p, p, p, p]&lt;/script&gt;</code></pre></blockquote></li><li><p>querySelectorAll 、getElementsByClassName()、getElementsByTagName() 的区别</p><blockquote><ul><li><code>getElementsByClassName()</code>和 <code>getElementsByTagName()</code>方法是可以<strong>动态获取元素</strong>，也就是当页面上增加或删除元素时，获取的元素个数可以改变</li><li>而<code>querySelectorAll()</code>是做不到的</li></ul></blockquote></li><li><p>获取 body 与 HTML 元素</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>document.body</td><td>获取 body 元素</td></tr><tr><td>document.documentElement</td><td>获取 html 元素</td></tr></tbody></table></li><li><p>获取页面中所有元素</p><blockquote><ul><li><code>document.all</code> 获取页面当中所有元素</li><li><code>document.getElementsByTagName(“*”) </code>获取页面当中所有元素<blockquote><p>以上方式几乎不用，只是当做了解即可</p></blockquote></li></ul></blockquote></li><li><p>onload 方法</p><blockquote><ul><li>浏览器在加载一个页面时，是按照<strong>自上而下</strong>的顺序加载的。</li><li>如果 JS 写在了 body 前面，那 JS 在获取页面元素时，页面上的元素标签还没有被加载出来，就会造成读取不到内容。<blockquote><p>通常 JS 代码一定要写到<code>&lt;/body&gt;</code>节点的前面，否则 JS 无法找到相应 HTML 节点</p></blockquote></li></ul><pre><code>&lt;script&gt; var box1 = document.getElementById(&quot;box1&quot;); console.log(box1); // null  没有获取到元素&lt;/script&gt;&lt;div id=&quot;box1&quot;&gt;box&lt;/div&gt;</code></pre></blockquote></li></ol><blockquote><ul><li>如果 JS 代码写在 body 前面，也能正常执行，可以使用<code>window.onload = function()&#123;&#125;</code>事件，使页面加载完毕后，再执行指定的代码</li></ul><pre><code>&lt;script&gt;  // 给window对象添加onload事件监听，onload表示页面都加载完毕了  window.onload = function () &#123;    var box1 = document.getElementById(&quot;box1&quot;);    console.log(box1);  &#125;;&lt;/script&gt;&lt;body&gt; &lt;div id=&quot;box1&quot;&gt;box&lt;/div&gt;&lt;/body&gt;</code></pre></blockquote><h3 id="三、操作元素属性"><a href="#三、操作元素属性" class="headerlink" title="三、操作元素属性"></a>三、操作元素属性</h3><h4 id="符合标准的-w3c-属性"><a href="#符合标准的-w3c-属性" class="headerlink" title="符合标准的 w3c 属性"></a>符合标准的 w3c 属性</h4><blockquote><p>常见的符合标准的 w3c 属性有</p><ul><li>id、alt、title</li><li>class、style 更改元素样式属性 比较特殊，我们放在后面单独来讲</li><li>src 、 href 修改图片地址和 a 标签链接地址</li><li>type、value、checked、selected、disabled 表单元素属性<blockquote><p>符合标准的 w3c 属性，我们可以直接用<code>对象.属性名</code>的方式来访问</p></blockquote></li></ul></blockquote><ol><li><p>id、alt 、title</p><blockquote><ul><li>id 这个属性在实际中，我们肯定不会去更改他的值</li><li>alt 图片描述属性</li><li>title 提示属性，主要用在 a 标签上</li><li>获取元素后，打点调用来修改或者新增属性</li></ul><pre><code>&lt;img src=&quot;../src/3.avif&quot; id=&quot;img&quot; /&gt;&lt;a href=&quot;http://www.baidu.com&quot; id=&quot;link&quot;&gt;百度&lt;/a&gt;&lt;script&gt; var img2 = document.getElementById(&quot;img&quot;); var a2 = document.getElementById(&quot;link&quot;); img2.id = &quot;img1&quot;; img2.alt = &quot;美女图片&quot;; a2.title = &quot;去百度走一趟&quot;;&lt;/script&gt;</code></pre></blockquote></li><li><p>src 和 href</p><blockquote><ul><li>src 属性，用来修改图片的地址</li><li>href 属性，用来修改超链接的地址</li><li>获取元素后，打点调用来修改或者新增属性<blockquote><p>a标签对里的文字用<code>.innerText</code>调用</p></blockquote></li></ul><pre><code>&lt;img src=&quot;images/img1.png&quot; alt=&quot;&quot; id=&quot;img&quot; /&gt;&lt;a href=&quot;http://www.baidu.com&quot; title=&quot;百度&quot; id=&quot;link&quot;&gt;百度&lt;/a&gt;&lt;script&gt;  var img = document.getElementById(&quot;img&quot;);  var a = document.getElementById(&quot;link&quot;);</code></pre></blockquote><p>  img.src &#x3D; “images&#x2F;logo.png”;<br>  a.href &#x3D; “<a href="http://www.icodingedu.com/">http://www.icodingedu.com</a>“;<br>  a.innerText &#x3D; “艾编程”;<br>  a.title &#x3D; “艾编程”;</p><blockquote><p></script></p><pre><code></code></pre></blockquote></li><li><p>表单属性</p></li></ol><ul><li><p>value 表单值</p><blockquote><ul><li>获取元素后，调用value值可以获取<code>value的初始值</code>或<code>输入框中的内容</code></li></ul><pre><code>用户名：&lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;userName&quot; value=&quot;123&quot; /&gt;&lt;br /&gt;&lt;script&gt;// 获取用户名var userName = document.getElementById(&quot;userName&quot;);console.log(userName.value);//123//在输入框输入aabb后console.log(userName.value);//aabb&lt;/script&gt;</code></pre></blockquote></li><li><p>type 表单类型</p><blockquote><ul><li>把<code>text</code>改成<code>password</code>隐藏密码，也可反向操作</li></ul><pre><code>密码：&lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;iphone&quot; value=&quot;&quot; /&gt;&lt;script&gt;// 获取电话号码输入框var iphone = document.getElementById(&quot;iphone&quot;);// 写入密码，将电话号码隐藏iphone.value = &quot;1223333&quot;;iphone.type = &quot;password&quot;;&lt;/script&gt;</code></pre></blockquote></li><li><p>checked 单选和复选框选中状态</p><blockquote><ul><li>单选框是互斥的</li><li>默认选中：<ul><li>在对应标签中写上<code>checked</code>或<code>checked=&quot;true&quot;</code></li><li>打点调用该元素的<code>checked</code>值修改为<code>true</code>或<code>checked</code></li></ul></li><li>单选</li></ul><pre><code>&lt;h3&gt;姓别&lt;/h3&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;&quot; value=&quot;男&quot; /&gt;男&lt;input type=&quot;radio&quot; name=&quot;sex&quot; checked=&quot;true&quot; id=&quot;&quot; value=&quot;女&quot; /&gt;女&lt;script&gt; // 获取单选框var sex = document.getElementsByName(&quot;sex&quot;);// 选中第一个男//sex[0].checked = true;//sex[1].checked = &quot;checked&quot;;&lt;/script&gt;</code></pre></blockquote></li></ul><blockquote><ul><li>复选</li></ul><pre><code>&lt;h3&gt;喜欢的水果&lt;/h3&gt;&lt;input type=&quot;checkbox&quot; name=&quot;fruit&quot; id=&quot;&quot; /&gt; 苹果&lt;input type=&quot;checkbox&quot; name=&quot;fruit&quot; id=&quot;&quot; /&gt;梨子&lt;input type=&quot;checkbox&quot; name=&quot;fruit&quot; id=&quot;&quot; /&gt;葡萄&lt;script&gt;  // 获取复选框  var fruit = document.getElementsByName(&quot;fruit&quot;);  //选中第一个  fruit[0].checked=true;//或者&quot;checked&quot;  //取消选中  fruit[0].checked=false;&lt;/script&gt;</code></pre></blockquote><blockquote><blockquote><p><code>getElementsByName</code>：通过表单的<code>name</code>属性获取元素，得到的是一个类数组元素</p></blockquote></blockquote><ul><li><p>selected 下拉列表元素选中状态</p><blockquote><ul><li>修改默认选中元素：<ul><li>方式1：<code>.selected = true</code></li><li>方式2：下拉菜单有一个属性：<code>.selectedIndex</code>可以获取&#x2F;修改选中元素</li></ul></li></ul><pre><code>&lt;h3&gt;选择所在城市&lt;/h3&gt;&lt;select name=&quot;&quot; id=&quot;city&quot;&gt; &lt;option value=&quot;湖南&quot;&gt;湖南&lt;/option&gt; &lt;option value=&quot;深圳&quot;&gt;深圳&lt;/option&gt; &lt;option value=&quot;上海&quot;&gt;上海&lt;/option&gt;&lt;/select&gt;&lt;script&gt; // 获取下拉列表 var city = document.getElementById(&quot;city&quot;); var ops = city.getElementsByTagName(&quot;option&quot;); //修改被选中元素——方式1 ops[2].selected = true; console.log(city.selectedIndex); //2 //修改被选中元素——方式2 city.selectedIndex = 0; console.log(city.selectedIndex); //0</code></pre></blockquote></li><li><p>disabled 元素是否被禁用</p><blockquote><ul><li><code>.disabled = true</code></li><li><code>.disabled = &quot;disabled&quot;</code></li></ul><pre><code>&lt;input type=&quot;submit&quot; id=&quot;submit&quot; value=&quot;提交&quot; /&gt;&lt;script&gt;// 提交按扭var submit = document.getElementById(&quot;submit&quot;);submit.disabled = true; // 禁用// submit.disabled = &quot;disabled&quot;;&lt;/script&gt;</code></pre></blockquote></li></ul><h4 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h4><blockquote><ul><li>自定义属性：由我们自己定义在元素身上的属性</li><li>自定义属性的目的：用来保存元素标签后期要用到的一些<strong>数据内容</strong>，一些简单数据存在自定义属性中，后期操作方便。</li><li>修改自定义属性，可以通过下面方法来操作(旧方法)<table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getAttribute(key)</td><td>获取属性，key 表示要获取的属性名</td></tr><tr><td>setAttribute(key,value)</td><td>添加或修改属性值，key 表示属性名，value 表示属性值</td></tr></tbody></table></li></ul></blockquote><blockquote><pre><code>&lt;div id=&quot;box&quot; abs=&quot;值&quot; title=&quot;我是提示&quot;&gt;&lt;/div&gt;&lt;script&gt;  var box = document.getElementById(&quot;box&quot;);  console.log(box.abs); // undefined  console.log(box.getAttribute(&quot;abs&quot;)); // 值  console.log(box.getAttribute(&quot;title&quot;)); // 我是提示  box.setAttribute(&quot;mycustom&quot;, &quot;自定义属性值&quot;);//添加属性  box.setAttribute(&quot;id&quot;, &quot;box2&quot;); //id=&quot;box2&quot;  console.log(box.getAttribute(&quot;id&quot;));//box2&lt;/script&gt;</code></pre><blockquote><p><code>setAttribute(key,value)</code>与<code>getAttribute(key)</code>也是可以操作标准属性</p></blockquote></blockquote><h4 id="Html5-中自定义属性规范"><a href="#Html5-中自定义属性规范" class="headerlink" title="Html5 中自定义属性规范"></a>Html5 中自定义属性规范</h4><blockquote><ul><li>Html5 中规定自定义属性名以<code>data-</code>开头</li><li>使用<code>data-</code>前缀自定义属性，可以解决属性混乱无管理的现状，区分自定义属性与标准属性</li></ul></blockquote><ol><li>设置自定义属性的 2 种方式</li></ol><ul><li><p>方式一： 可以直接在 HTML 标签上面书写</p><blockquote><pre><code>&lt;h2 data-weather=&quot;sunny&quot;&gt;今天是晴天&lt;/h2&gt;</code></pre></blockquote><!--  data-weather 自定义属性名  sunny 自定义属性值--><!-- 多个单词组合 --><blockquote><h2 data-birth-date="20230501">今天是我的生日</h2>```>如果设置的自定义属性是多个单词组合的形式，需要用中横线-连接</blockquote></li><li><p>方式二： 通过 JS 的<code>dataset</code>属性来设置</p><blockquote><ul><li><code>.dataset.属性名=&quot;属性值&quot;</code></li><li>属性名中的大写，会自动用<code>-</code>分隔(驼峰命名法)</li></ul></blockquote></li></ul><blockquote><pre><code>&lt;h2&gt;今天是我的生日&lt;/h2&gt;&lt;script&gt; var h2 = document.querySelector(&quot;h2&quot;); h2.dataset.birthDate = &quot;20230501&quot;;   //data-birth-date=&quot;20230501&quot;&lt;/script&gt;</code></pre></blockquote><ol start="2"><li>获取自定义属性<blockquote><ul><li>直接通过<code>对象.dataset.属性名</code>（属性名书写格式：属性去掉 <code>data-</code>之后的单词，<strong>以驼峰命名</strong>）</li><li>如 属性名为<code>data-ab-cd-fg</code>则访问方式：<code>对象.dataset.abCdFg</code></li></ul><pre><code>&lt;img src=&quot;images/dog.png&quot; data-animal-type=&quot;animal&quot; /&gt;&lt;script&gt;  var img = document.getElementsByTagName(&quot;img&quot;);  //获取自定义属性  var animalType = img[0].dataset.animalType;  console.log(animalType);&lt;/script&gt;</code></pre></blockquote></li></ol><h3 id="四、操作元素样式"><a href="#四、操作元素样式" class="headerlink" title="四、操作元素样式"></a>四、操作元素样式</h3><blockquote><ul><li>操作元素样式的属性有style 、cssText、 className</li><li>同时 HTML5 提供了classList对象，classList对象身上的方法，用来操作元素的 class 属性，简直完美。</li></ul></blockquote><ol><li>style 属性<blockquote><ul><li>style 属性用来操作元素的<strong>行内样式</strong>，他只对行内样式有效</li><li><strong>获取</strong>行内样式的写法：<br><code>对象.style.属性名; // 属性名要采用驼峰形式书写</code></li><li><strong>修改或添加</strong>行内样式的写法<br><code>对象.style.属性名 = 属性值; // 属性名要采用驼峰形式书写</code></li></ul><pre><code>&lt;style&gt; .box &#123;     width: 100px;     height: 200px;     background-color: hotpink;     color: red; &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  var box = document.getElementsByClassName(&quot;box&quot;);  box[0].style.width = &quot;200px&quot;;  box[0].style.backgroundColor = &quot;red&quot;;  box[0].style.borderTop = &quot;15px solid blue&quot;;</code></pre></blockquote>  &#x2F;&#x2F; 获取样式<br>  console.log(box[0].style.color); &#x2F;&#x2F; 获取不到,color写在class内<br>  console.log(box[0].style.borderTop); &#x2F;&#x2F;15px solid blue<blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ol><p><strong>注意事项：</strong></p><blockquote><ul><li>操作元素的 style 上的样式，这里的样式<strong>权重最高</strong>，可以覆盖外部和内嵌样式</li><li>如果样式写在了class类中，没写在 style 属性中，则通过<code>对象.style.属性名</code>的方式，是<strong>获取不到的</strong></li><li>如果元素要改变的<strong>样式量特别多</strong>，这种方式就比较麻烦。</li></ul></blockquote><ol start="2"><li>cssText 属性<blockquote><ul><li><code>cssText</code>的本质就是设置 HTML 元素的 <code>style</code> 属性值</li><li>所以每设置一次 cssText 值，就会把之前的 style 属性中的样式<strong>全部覆盖</strong>掉</li></ul></blockquote></li></ol><blockquote><pre><code>&lt;div  class=&quot;box&quot;  style=&quot;width: 100px; height: 200px; background-color: red&quot;&lt;/div&gt;&lt;script&gt;  var box = document.getElementsByClassName(&quot;box&quot;)[0];  box.style.cssText = &quot;color:blue&quot;; // 覆盖了之前的style样式中的值&lt;/script&gt;</code></pre><blockquote><p>cssText 主要用来合并多次对 CSS 样式的修改，改为一次性处理</p></blockquote></blockquote><ol start="3"><li>className 属性<blockquote><ul><li>我们在操作元素的<code>class</code>样式属性时，<strong>不能</strong>用<code>对象.属性</code> 的方法操作，因为 class 是关键字</li><li>我们可以通过<code>对象.className</code>的方式来操作</li><li>注意事项：<code>className</code>修改样式，如果是多个样式，样式之间要用<strong>空隔</strong>隔开</li></ul><pre><code>&lt;style&gt;  .box &#123; width: 100px; height: 100px; background-color: skyblue;  &#125;  .box1 &#123; border: 5px dashed tomato;  &#125;&lt;/style&gt;&lt;body&gt;  &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;  &lt;script&gt; var box = document.getElementsByClassName(&quot;box&quot;); box[0].className = &quot;box box1&quot;; // box与box1之间要有空格  &lt;/script&gt;&lt;/body&gt;</code></pre></blockquote></li></ol><blockquote><ul><li>className 操作 CSS 样式有一个很大的<strong>缺点</strong>，就是我每次更新 class 类名时，都要把<strong>所有的类名带上</strong>。</li><li>如果我只想在元素原有的基础上继续添加新的类名、或删除某个类名，能不能不动原有的类名，就能实现。答案肯定是可以的</li></ul></blockquote><ol start="4"><li>操作 CSS 样式的优先方案<blockquote><p>style、cssText、className 三种方式操作 CSS 样式时，性能消耗由低到高的排序分别如下：</p><ul><li>className &gt; cssText &gt; style</li></ul></blockquote></li></ol><p><strong>原因</strong></p><blockquote><ul><li>通过 <code>style</code> 属性来操作 CSS 样式，会<strong>频繁的触发页面的重排和重绘（DOM 重新渲染）</strong></li><li>通过 style 身上的 <code>cssText</code> 属性来操作 CSS 样式，是把多次对 DOM 的操作合并为<strong>一次性处理</strong>，减少了触发重排和重绘（DOM 的重新渲染）次数</li><li>通过 <code>className</code> 属性，本质也是一样的，减少了对 DOM 的操作，<strong>多次操作合并为一次性处理</strong>，同时 className 中的样式，<strong>一开始就准备好了</strong>。</li></ul></blockquote><ol start="5"><li>classList 对象<blockquote><ul><li><code>html5</code>为每一个元素新增了一个**<code>classList</code>对象<strong>，<code>classList</code>对象保存着</strong>控制当前元素类名**的各个方法和属性。<br><strong>classList 对象身上相关的属性和方法如下表：</strong><table><thead><tr><th>属性或方法</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>返回类名的<strong>个数</strong></td></tr><tr><td>add()</td><td>在原有的类名基础上<strong>添加</strong>一个类名，如果这些类已经存在于元素的属性中，那么它们将被忽略。</td></tr><tr><td>remove()</td><td>在原有的类名基础上,<strong>移出</strong>某一个类名，即使删除不存在的类值也不会导致抛出异常</td></tr><tr><td>toggle()</td><td>如果<strong>有</strong>这个类名，则删除这个类名，返回 <code>false</code>，如果<strong>没有</strong>则添加上去，返回<code>true</code></td></tr><tr><td>item()</td><td>根据索引 获取类名</td></tr><tr><td>contains()</td><td>判断元素是否包含某一个类名</td></tr><tr><td>replace(oldClass, newClass)</td><td>用一个<strong>新类值替换</strong>已有的类值，替换成功返回 true,替换失败，返回 false</td></tr></tbody></table></li></ul></blockquote></li></ol><blockquote><pre><code> var box = document.getElementsByClassName(&quot;box&quot;)[0]; console.log(box.classList.length); // 3 类名个数 box.classList.add(&quot;box3&quot;); // 追加一个类名box3 box.classList.remove(&quot;box2&quot;); // 移除一个类名box2 bool1 = box.classList.toggle(&quot;box1&quot;); // 有就移除box1 console.log(bool1); //删除则返回false bool2 = box.classList.toggle(&quot;box1&quot;); // 没有就添加box1 console.log(bool2); //添加则返回true console.log(box.classList.item(1)); // 索引为0的类名 box console.log(box.classList.contains(&quot;box&quot;)); // true console.log(box.classList.replace(&quot;box&quot;, &quot;mybox&quot;)); // 用mybox 替换box</code></pre></blockquote><blockquote><blockquote><p>注</p></blockquote><ul><li>假设现在浏览器版本过低，<strong>不支持</strong> <code>classList</code> 对象，那就需要我们<strong>手写</strong>相关方法来实现对 class 属性的操作。</li><li>这里我们尝试手写：<code>add</code>、<code>remove</code>、<code>toggle</code>三个方法。</li><li>我们期望 html 元素可以直接调用这些方法，实现对 class 类名的操作。</li><li>那就需要确认，我们手写的这些方法要加在<strong>哪个构造函数（类）的原型上</strong>。因此我们了解 DOM 中各个类的关系。</li></ul></blockquote><ol start="6"><li>DOM 中各类的继承关系图<img src="DOM继承关系图.png"></li></ol><ul><li>方法：<blockquote><ul><li>查看实例的构造函数(类)：<code>实例.__proto__</code></li><li>查看继承关系：<ul><li>方法1：在控制台，一层层查看对应的<code>[[prototype]]</code></li><li>方法2：输入以下代码：</li></ul></li></ul><pre><code>//元素节点只有构造函数不同，后续都一样var box = document.getElementsByClassName(&quot;box&quot;)[0];//得到它的构造函数：HTMLDivElementconsole.log(box.__proto__);//通过一层层翻找`[[prototype]]`可知继承关系//HTMLDivElement-&gt;HTMLElement-&gt;Element-&gt;Node-&gt;EventTarget-&gt;Object;</code></pre></blockquote>var attr &#x3D; document.createAttribute(“id”);<br>&#x2F;&#x2F;属性节点：attr.<strong>proto</strong>;&#x2F;&#x2F;实例-&gt;Attr(继承)-&gt;Node-&gt;EventTarget-&gt;Object<br>var text &#x3D; document.createTextNode(“文本”);<br>&#x2F;&#x2F;文本节点：text.<strong>proto</strong>;&#x2F;&#x2F;实例-&gt;Text(继承)-&gt;CharacterData-&gt;Node-&gt;EventTarget-&gt;Object<br>var frag &#x3D; document.createDocumentFragment();<br>&#x2F;&#x2F;文档片段：frag.<strong>proto</strong>;&#x2F;&#x2F;实例-&gt;DocumentFragment(继承)-&gt;Node-&gt;EventTarget-&gt;Object<br>var comment &#x3D; document.createComment(“我是一段注释”);<br>&#x2F;&#x2F;注释节点：comment.<strong>proto</strong>;&#x2F;&#x2F;实例-&gt;Comment(继承)-&gt;CharacterData-&gt;Node-&gt;EventTarget-&gt;Object<blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><blockquote><p>结论：</p></blockquote><ul><li>我们希望 HTML 元素可以直接打点调用 <code>addClass</code> 等方法，实现对 class 属性的操作</li><li>所以这些方法要写在 <code>HTMLElement</code> 的原型上。</li></ul></blockquote><ol start="7"><li><p>手写 addClass 方法</p><blockquote><p>该方法实现对元素添加对应的 class 类名，如果元素上没有对应 class 类名添加，有的话就不加</p><ul><li>className 属性：<ul><li><code>.className</code>，获取元素的class类名，得到的是字符串</li><li><code>.className=&quot;&quot;</code>修改类名，样式之间要用空隔隔开</li></ul></li><li><code>split()</code>方法可以使字符串以某种分隔符进行分隔，分隔后的字符串组成一个<strong>数组返回</strong></li><li><code>includes()</code>方法用来判断一个数组<strong>是否包含</strong>一个指定的值</li><li><code>join()</code>方法将一个数组的所有元素以<strong>特定的某种字符</strong>连接成一个字符串，并返回这个<strong>字符串</strong></li></ul><pre><code>&lt;div class=&quot;box box1 box2 box2&quot;&gt;&lt;/div&gt;&lt;script&gt;  /**</code></pre></blockquote><ul><li>addClass 方法实现对元素添加对应的class类名，如果元素上没有对应class类名就添加，有就不加</li><li>@param name  class类名字符串<br>*&#x2F;<br>HTMLElement.prototype.addClass &#x3D; function (name) {<br> if (typeof name !&#x3D;&#x3D; “string”) return;<br> &#x2F;&#x2F; 获取当前对象上的class类名<br> var className &#x3D; this.className;<br> &#x2F;&#x2F; 以空格分隔成一个数组<br> var classArr &#x3D; className.split(“ “);<br> &#x2F;&#x2F; 判断传过来的类名在不在当前数组中，如果不存在，就添加<br> if (!classArr.includes(name)) {<br> classArr.push(name); &#x2F;&#x2F; 将类名添加到数组中<br> }<br> var newClassName &#x3D; classArr.join(“ “); &#x2F;&#x2F; 将数组元素以空格拼接成字符串<br> this.className &#x3D; newClassName;&#x2F;&#x2F;修改类名<br>};<br>var box &#x3D; document.querySelector(“.box”);<br>box.addClass(“box4”);&#x2F;&#x2F;谁调用this就是谁<blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul></li><li><p>手写 removeClass 方法</p><blockquote><ul><li>该方法实现移除元素上对应的 Class 类名，如果有就移除，如果没有不做处理</li></ul><pre><code>&lt;div class=&quot;box box1 box2 box2&quot;&gt;&lt;/div&gt;&lt;script&gt;  /**</code></pre></blockquote><ul><li>addClass 方法实现对元素添加对应的class类名，如果元素上没有对应class类名就添加，有就不加</li><li>@param name  class类名字符串<br>*&#x2F;<br>HTMLElement.prototype.removeClass &#x3D; function (name) {<br> if (typeof name !&#x3D;&#x3D; “string”) return;<br> &#x2F;&#x2F; 获取当前对象上的class类名<br> var className &#x3D; this.className;<br> &#x2F;&#x2F; 以空格分隔成一个数组<br> var classArr &#x3D; className.split(“ “);<br> &#x2F;&#x2F; 获取所查找类名的下标<br> var index &#x3D; classArr.indexOf(name);<br> &#x2F;&#x2F;如果找不到，则退出<br> if (index &#x3D;&#x3D;&#x3D; -1) return;<br> &#x2F;&#x2F;while循环删除所有 给定类名<br> while (index !&#x3D;&#x3D; -1) {<br> classArr.splice(index, 1);<br> &#x2F;&#x2F; 要考虑傻逼模式，就是他本来就出现了两个相同的类名<br> index &#x3D; classArr.indexOf(name, index); &#x2F;&#x2F;从刚删除的下标开始查找该元素<br> }<br> var newClassName &#x3D; classArr.join(“ “); &#x2F;&#x2F; 将数组元素以空格拼接成字符串<br> this.className &#x3D; newClassName;&#x2F;&#x2F;修改类名<br>};<br>var box &#x3D; document.querySelector(“.box”);<br>box.removeClass(“box4”);&#x2F;&#x2F;谁调用this就是谁<blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul></li><li><p>手写 toggleClass 方法</p><blockquote><ul><li>该方法实现自动判断是给元素添加还是删除对应的 Class 类名，如果元素存在对应 Class 类名就删除，否则就添加</li></ul><pre><code>&lt;div class=&quot;box box1 box2 box2&quot;&gt;&lt;/div&gt;&lt;script&gt;  /**</code></pre></blockquote><ul><li>toggleClass 该该方法实现自动判断是给元素添加还是删除对应的Class类名，如果元素存在对应Class类名就删除，否则就添加</li><li>@param name  class类名字符串<br>*&#x2F;<br>HTMLElement.prototype.toggleClass &#x3D; function (name) {<br> &#x2F;&#x2F; 获取当前对象上的class类名<br> var className &#x3D; this.className;<br> &#x2F;&#x2F; 以空格分隔成一个数组<br> var classArr &#x3D; className.split(“ “);<br> &#x2F;&#x2F; 判断传过来的类名在不在当前数组中，如果不在，就添加，存在，找到对应下标然后删掉<br> var index &#x3D; classArr.indexOf(name);<br> if (index &#x3D;&#x3D;&#x3D; -1) {<br> &#x2F;&#x2F; 没有就添加<br> classArr.push(name);<br> } else {<br> &#x2F;&#x2F; 存在，就删除<br> &#x2F;&#x2F; 要考虑傻逼模式，就是他本来就出现了两个相同的类名<br> var _index &#x3D; index;<br> while (_index !&#x3D;&#x3D; -1) {<br>   classArr.splice(_index, 1);<br>   _index &#x3D; classArr.indexOf(name, _index);<br> }<br> }<br> var newClassName &#x3D; classArr.join(“ “); &#x2F;&#x2F; 将数组元素以空格拼接成字符串<br> this.className &#x3D; newClassName;<blockquote></blockquote> &#x2F;&#x2F; 处理返回值<br> if (index &#x3D;&#x3D;&#x3D; -1) return true;<br> return false;<br>};<blockquote></blockquote>var box &#x3D; document.querySelector(“.box”);<br>box.toggleClass(“box2”);<br>box.toggleClass(“box1”);<br>box.toggleClass(“box3”);<blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul></li></ol><blockquote><blockquote><p>注：</p><ul><li>以上所有方法，都没有办法获取 <strong>class 类名</strong>或 <strong>id 中定义的 css 样式</strong>。</li></ul></blockquote></blockquote><ol start="10"><li>getComputedStyle 方法<blockquote><ul><li><code>getComputedStyle()</code>方法，<strong>获取</strong>元素的计算样式，<strong>但不能</strong>修改样式。</li><li>语法：<br><code>var style = window.getComputedStyle(element, [pseudoElt]);</code></li><li><code>element</code>用于获取计算样式的元素</li><li><code>pseudoElt</code>指定一个要匹配的<strong>伪元素的字符串</strong>。对普通元素省略（或null）</li><li>返回的style是一个<strong>实时</strong>的<code>CSSStyleDeclaration</code> （css 样式声明）对象（它是一个 CSS 声明块，CSS 属性键值对的集合），当元素的样式更改时，它会自动更新本身。</li></ul></blockquote></li></ol><blockquote><pre><code>&lt;style&gt;  .box &#123;    width: 200px;    height: 200px;    background-color: red;  &#125;  .box1 &#123;    font-size: 20px;    color: yellow;    line-height: 100px;  &#125;&lt;/style&gt;&lt;/head&gt;&lt;div class=&quot;box box1&quot; id=&quot;mybox&quot;&gt;我是css盒子&lt;/div&gt;&lt;script&gt; var mybox = document.getElementById(&quot;mybox&quot;); var style = getComputedStyle(mybox, null); //得到CSS访问声明 console.log(style); for (var i = 0; i &lt; style.length; i++) &#123;   key = style[i];   //CSS样式及值   console.log(key + &quot;=&quot; + style.getPropertyValue(key)); &#125;&lt;/script&gt;</code></pre></blockquote><ol start="11"><li>访问 CSS 属性值 3 种方式<blockquote><pre><code>// 访问方式一// propName 属性名，正常书写window.getComputedStyle(element, [pseudoElt]).getgetPropertyValue(propName);</code></pre></blockquote>&#x2F;&#x2F; 访问方式二<br>&#x2F;&#x2F; propName 属性名 要采用驼峰命名方式<br>window.getComputedStyle(element, [pseudoElt]).propName;<blockquote></blockquote>&#x2F;&#x2F; 访问方式三<br>&#x2F;&#x2F; propName 属性名，正常书写<br>window.getComputedStyle(element, [pseudoElt])[propName];<blockquote><pre><code></code></pre></blockquote></li></ol><blockquote><pre><code>&lt;style&gt;  .box &#123;    width: 200px;    height: 200px;    background-color: red;  &#125;  .box1 &#123;    font-size: 20px;    color: yellow;    line-height: 100px;  &#125;&lt;/style&gt;&lt;div class=&quot;box box1&quot; id=&quot;mybox&quot;&gt;我是css盒子&lt;/div&gt;&lt;script&gt;  var mybox = document.getElementById(&quot;mybox&quot;);  var style = getComputedStyle(mybox, null);  console.log(style.height);  console.log(style.backgroundColor);  console.log(style.lineHeight);</code></pre></blockquote><p>  console.log(style.getPropertyValue(“height”));<br>  console.log(style[“background-color”]);<br>  console.log(style.getPropertyValue(“line-height”));</p><blockquote><p></script></p><pre><code></code></pre></blockquote><ol start="12"><li>获取伪元素样式<blockquote><ul><li>语法：<br><code>var style = window.getComputedStyle(element, 伪元素字符串);</code></li></ul></blockquote></li></ol><blockquote><pre><code>&lt;style&gt;  #mybox &#123;    width: 200px;    height: 200px;    background-color: red;  &#125;  #mybox::after &#123;    content: &quot;我是伪元素内容&quot;;    color: yellow;  &#125;&lt;/style&gt;&lt;div id=&quot;mybox&quot;&gt;&lt;/div&gt;&lt;script&gt;  var mybox = document.getElementById(&quot;mybox&quot;);  var style = getComputedStyle(mybox, &quot;::after&quot;);  console.log(style.color);  console.log(style.content);&lt;/script&gt;</code></pre></blockquote><h3 id="五、获取元素尺寸"><a href="#五、获取元素尺寸" class="headerlink" title="五、获取元素尺寸"></a>五、获取元素尺寸</h3><h4 id="偏移尺寸"><a href="#偏移尺寸" class="headerlink" title="偏移尺寸"></a>偏移尺寸</h4><blockquote><ul><li>以下 5 个属性，都与元素的偏移尺寸有关 ,并且都是<strong>只读</strong>的</li><li>offsetWidth</li><li>offsetHeight</li><li>offsetParent</li><li>offsetLeft</li><li>offsetTop</li></ul></blockquote><ol><li>offsetWidth 与 offsetHeight<blockquote><ul><li>以下属性为<strong>只读</strong>的，<strong>每次访问都会重新计算</strong><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>offsetWidth</td><td>返回一个元素的布局宽度；标准盒模型下，包括：width、border、padding、滚动条宽；怪异盒模型下为：width</td></tr><tr><td>offsetHeight</td><td>返回一个元素的布局高度；标准盒模型下，包括：height、border、padding、滚动条宽；怪异盒模型下为：height</td></tr></tbody></table></li></ul></blockquote></li></ol><blockquote><pre><code>&lt;style&gt;</code></pre></blockquote><ul><li>{<br>margin: 0;<br>padding: 0;<br>  }<br>  .box {<br>width: 200px;<br>height: 200px;<br>padding: 30px;<br>border: 10px solid red;<br>margin: 20px;<br>  }<br>  .box1 {<br>width: 100px;<br>height: 100px;<br>padding: 30px;<br>border: 10px solid blue;<br>margin: 20px;<br>&#x2F;* box-sizing: border-box; *&#x2F;<br>  }<blockquote><p></style></p><div class="box"> <div class="box1"></div></div><script>  var box1 = document.querySelector(".box1");  var _width = box1.offsetWidth;  var _height = box1.offsetHeight;  console.log(_width); // width+padding+border=100+60+20=180  console.log(_height); //  height+padding+border=100+60+20=180</blockquote>  &#x2F;&#x2F; 如果box1更改为border-box，则最后输出结果为100 100<blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul><ol start="2"><li><p>offsetParent</p><blockquote><ul><li>此属性为<strong>只读</strong>属性，每次访问都会<strong>重新计算</strong></li><li><strong>返回</strong>离当前元素<strong>最近的定位祖先元素</strong>或最近的 <code>table,td,th,tbody</code> 元素</li><li>在 Webkit 中，<ul><li>如果当前元素为隐藏的（该元素或其祖先元素的<code>style.display</code>为”none”），该属性返回 null。</li><li>或者该元素的<code>style.position</code>被设为”fixed”，则该属性返回 null。</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">></span>  <span class="token punctuation">.</span>box <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span>box1 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* display: none; */</span> position<span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span>box3 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* position: fixed; */</span> display<span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>绝对定位<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>相对定位<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box1"</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>未定位<span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box2"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box3"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">// 获取box3元素</span>  <span class="token keyword">var</span> box3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".box3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取离box3最近的定位祖先元素</span>  <span class="token keyword">var</span> parent <span class="token operator">=</span> box3<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// null</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote></li><li><p>offsetLeft 和 offsetTop</p><blockquote><ul><li>以下两属性为<strong>只读</strong>属性，每次访问都会<strong>重新计算</strong></li><li>本质上可以简单理解为定位元素的top&#x2F;left值，但也会受到margin的影响<table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>offsetLeft</td><td>它返回当前元素(左边框)相对于其offsetParent元素的<strong>左边框内壁</strong>的距离</td></tr><tr><td>offsetTop</td><td>它返回当前元素(上边框)相对于其offsetParent元素的<strong>上边框内壁</strong>的距离</td></tr></tbody></table></li></ul><pre><code>&lt;style&gt;</code></pre></blockquote></li></ol><ul><li>{<br>margin: 0;<br>padding: 0;<br>  }<br>  body {<br>padding: 100px;<br>  }<br>  .box1 {<br>margin: 50px;<br>padding: 20px;<br>border: 5px solid blue;<br>width: 200px;<br>height: 200px;<br>position: relative;<br>  }<br>  .box2 {<br>border: 2px solid red;<br>height: 150px;<br>  }<br>  .box3 {<br>width: 100px;<br>height: 100px;<br>position: absolute;<br>border: 10px solid skyblue;<br>margin-top: 50px;<br>margin-left: 30px;<br>left: 20px;<br>top: 50px;<br>  }<blockquote><p></style></p><div class="box1">  <div class="box2"></blockquote><div class="box3"></div>  </div>></div>>><script>  // 获取box3元素  var box3 = document.querySelector(".box3");  // 与离他最近的定位祖先元素左内边距的距离  var _left = box3.offsetLeft; // left + margin-left = 20 + 30 = 50  // 与离他最近的定位祖先元素上内边距的距离  var _top = box3.offsetTop; //  top + margin-top = 50 + 50 = 100  console.log(_left, _top);></script>>```</li></ul><ol start="4"><li>计算元素与页面偏移量<blockquote><ul><li>如果要计算一个元素与页面的左偏移量,则需要把</li><li>当前元素与他<code>offsetParent</code>的<code>offsetLeft</code></li><li><code>offsetParent</code>的左边框宽度</li><li><code>offsetParent</code>的<code>offsetParent</code>元素的<code>offsetLeft</code></li><li><code>offsetParent</code>的<code>offsetParent</code>元素的做边框宽度</li><li>一层层相加，直到根元素(body)，body的<code>offsetParent</code>是<code>null</code><blockquote><p>一个元素与页面的上偏移量同理可得</p></blockquote></li></ul></blockquote></li></ol><ul><li><p>while 循环版</p><blockquote><pre><code>function getElementLeft(el) &#123;// 获取当前元素左偏移量var left = el.offsetLeft;// 获了当前元素的offsetParentvar parent = el.offsetParent;// 如果 offsetParent 存在，则一直获取,计算他的offsetLeft值，如果不存在，则终止while (parent) &#123;  left += parent.offsetLeft; // 与每一轮元素的父元素与其定位父元素左边距离累加  // 计算父元素左边框大小  style = getComputedStyle(parent, null);  border = parseInt(style.borderLeftWidth); // 过滤单位部分，只取数字部分  // 把左边框累加进去  left += border;  parent = parent.offsetParent;&#125;// 最终返回获取的left值return left;&#125;var box1 = document.querySelector(&quot;.box1&quot;);console.log(getLeft(box1));</code></pre></blockquote></li><li><p>递归版</p><blockquote><pre><code>function getElementLeft(el) &#123;// 获取当前元素左边距var left = el.offsetLeft;// 获了当前元素的offsetParentvar parent = el.offsetParent;// 如果 offsetParent 存在，则一直获取,计算他的offsetLeft值，如果不存在，则终止if (parent) &#123;  // 计算父元素左边框大小  style = getComputedStyle(parent, null);  border = parseInt(style.borderLeftWidth); // 过滤单位部分，只取数字部分  // 把左边框累加进去  left += border;  left += getElementLeft(parent);&#125;return left;&#125;var box1 = document.querySelector(&quot;.box1&quot;);console.log(getLeft(box1));</code></pre></blockquote></li></ul><ol start="5"><li>总结<blockquote><ul><li>以下 5 个属性都与元素的<strong>偏移尺寸</strong>相关<img src="元素的偏移尺寸.png"></li></ul></blockquote></li></ol><blockquote><blockquote><p>重点强调</p><ul><li>以上偏移尺寸属性都是只读的，每次访问都会重新计算。因此，应该尽量减少查询它们的次数。</li><li>我们可以把查询的值保存在变量中，供后面使用，这样就可以避免影响性能。</li></ul></blockquote></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ol><li>案例 1：求两元素中心点之间的距离<blockquote><ul><li>两个元素相对于同一个父元素定位，现在我们要求这两个元素中心点之间的距离。<img src="两元素中心点间的距离.png"></li></ul></blockquote></li></ol><blockquote><pre><code>// 求两点之间的距离// obj1与obj2分别表示上图中 box1与box2function getDistance(obj1, obj2) &#123;  var a =    obj1.offsetLeft +    obj1.offsetWidth / 2 -    (obj2.offsetLeft + obj2.offsetWidth / 2);  var b =    obj1.offsetTop +    obj1.offsetHeight / 2 -    (obj2.offsetTop + obj2.offsetHeight / 2);  return Math.sqrt(a * a + b * b);&#125;</code></pre><blockquote><ul><li>开平方：<code>Math.sqrt()</code></li></ul></blockquote></blockquote><ol start="2"><li>案例 2：找出与当前元素最近的一个元素<blockquote><ul><li>我们需要找到所有元素与当前元素的距离，然后再从中找出<strong>距离最小</strong>的那个元素(案例1)</li><li>我们可以新建一个数组，用来保存每个元素及每个元素与当前元素中心点的距离</li></ul></blockquote></li></ol><ul><li><p>数组结构如下</p><blockquote><pre><code>var elementArr = [&#123;  element: li1, // html元素  distance: 30, // 与当前元素的最近距离&#125;,&#123;  element: li2,  distance: 50,&#125;,];</code></pre></blockquote></li><li><p>最后找出数组中 distance 值最小的那一个对象中的 element 元素</p><blockquote><pre><code>// for循环遍历elementArr数组，找出数组中距离最小的那个元素，然后返回 var minElement = elementArr[0]; for (var j = 0; j &lt; elementArr.length; j++) &#123; if (elementArr[j].distance &lt; minElement.distance) &#123;   minElement = elementArr[j]; &#125; &#125; return minElement.element; // 返回最小的距离的那个对象</code></pre></blockquote></li><li><p>代码实现：</p><blockquote><pre><code>&lt;body&gt; &lt;div class=&quot;container&quot;&gt;   &lt;div class=&quot;box box1&quot;&gt;box1&lt;/div&gt;   &lt;div class=&quot;box box2&quot;&gt;box2&lt;/div&gt;   &lt;div class=&quot;box box3&quot;&gt;box3&lt;/div&gt;   &lt;div class=&quot;box box4&quot;&gt;box4&lt;/div&gt; &lt;/div&gt;&lt;script&gt;//通过数组下标查询var conatiner = document.querySelector(&quot;.container&quot;);var box = document.querySelectorAll(&quot;.container .box&quot;);</code></pre></blockquote><p>&#x2F;&#x2F; 找出与obj元素距离最近的元素<br>function findNearest(obj) {<br>  var elementArr &#x3D; [];<br>  var len &#x3D; box.length;<br>  &#x2F;&#x2F; 遍历每个元素，计算每个元素于obj的中心位置，然后保存到数组中<br>  for (var i &#x3D; 0; i &lt; len; i++) {<br>&#x2F;&#x2F; 当前被用来比较的obj，不用存到数组中，要排除<br>if (box[i] !&#x3D;&#x3D; obj) {<br>  &#x2F;&#x2F; 计算两中心点距离<br>  var centerDistance &#x3D; getDistance(box[i], obj);<br>  &#x2F;&#x2F; 把这个元素和对应中心点距离保存到数组中<br>  var el &#x3D; {};<br>  el.element &#x3D; box[i];<br>  el.distance &#x3D; centerDistance;<br>  elementArr.push(el);<br>}<br>  }</p><blockquote></blockquote><p>&#x2F;&#x2F; for循环遍历elementArr数组，找出数组中距离最小的那个元素，然后返回<br>var minElement &#x3D; elementArr[0];<br>for (var j &#x3D; 0; j &lt; elementArr.length; j++) {<br>  if (elementArr[j].distance &lt; minElement.distance) {<br>minElement &#x3D; elementArr[j];<br>  }<br>}<br>return minElement.element; &#x2F;&#x2F; 返回最小的距离的那个对象<br>}</p><blockquote></blockquote><p>console.log(findNearest(box[2]));</p><blockquote></blockquote><p>&#x2F;&#x2F; 计算两个元素中心点位置<br>function getDistance(obj1, obj2) {<br>  var x &#x3D;<br>obj1.offsetLeft +<br>obj1.offsetWidth &#x2F; 2 -<br>(obj2.offsetLeft + obj2.offsetWidth &#x2F; 2);</p></li></ul><blockquote></blockquote><p>  var y &#x3D;<br>    obj1.offsetTop +<br>    obj1.offsetHeight &#x2F; 2 -<br>    (obj2.offsetTop + obj2.offsetHeight &#x2F; 2);</p><blockquote></blockquote><p>  return Math.sqrt(x * x + y * y);<br>}</p><blockquote><p></script></p></body>```</blockquote><blockquote><ul><li>方法2：通过类名查询——见HTML文档</li></ul><pre><code>// 获取与目标元素同级的兄弟元素var children = obj.parentNode.children;</code></pre></blockquote><h4 id="客户端尺寸"><a href="#客户端尺寸" class="headerlink" title="客户端尺寸"></a>客户端尺寸</h4><blockquote><ul><li>以下两个属性为元素的客户端尺寸，属性为<strong>只读的</strong>，每次访问都会<strong>重新计算</strong><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>clientWidth</td><td>表示元素的<strong>内容区宽</strong>，在标准盒模型下，包括 <code>width + padding</code>，不包括 <code>border + margin + 滚动条</code></td></tr><tr><td>clientHeight</td><td>表示元素的<strong>内容区高</strong>，在标准盒模型下，包括 <code>height + padding</code>，不包括 <code>border + margin + 滚动条</code></td></tr></tbody></table></li></ul><pre><code>&lt;style&gt;</code></pre></blockquote><ul><li>{<br>margin: 0;<br>padding: 0;<br>  }<br>  .box {<br>width: 200px;<br>height: 200px;<br>padding: 30px;<br>border: 10px solid red;<br>margin: 20px;<br>  }<blockquote><p></style></p><div class="box"> <div class="box1"></div></div><script>  var box = document.querySelector(".box");  var w = box.clientWidth; // width + padding = 200 + 60 = 260  var h = box.clientHeight; // height + padding = 200 + 60 = 260  console.log(w, h);</script><pre><code></code></pre></blockquote></li></ul><h4 id="滚动尺寸"><a href="#滚动尺寸" class="headerlink" title="滚动尺寸"></a>滚动尺寸</h4><blockquote><p>滚动尺寸，提供了元素内容滚动相关的信息。有以下四个属性</p><ul><li>scrollWidth</li><li>scrollHeight</li><li>scrollLeft</li><li>scrollTop</li></ul></blockquote><ol><li>scrollWidth 与 scrollHeight<blockquote><ul><li>若子元素宽度大于父盒子，那<code>scrollWidth</code>就是：子元素宽度+父盒子padding</li><li>若子元素宽度小于父盒子，那<code>scrollWidth</code>就是父元素<code>clientWidth</code>(width+padding-滚动条宽度)</li></ul></blockquote></li></ol><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>scrollWidth</td><td>元素内容宽度的一种度量，包括由于<code>overflow</code>溢出而在屏幕上不可见的内容；如果没有水平滚动条，其它大小与 <code>clientWidth</code>相同</td></tr><tr><td>scrollHeight</td><td>元素内容高度的度量，包括由于<code>overflow</code>溢出导致的视图中不可见内容；如果没有垂直滚动条，其它大小与 <code>clientHeight</code>相同</td></tr></tbody></table><blockquote><pre><code>&lt;style&gt;  .box &#123;    width: 200px;    height: 100px;    border: 2px solid red;    padding: 50px;    overflow: scroll;  &#125;  .box1 &#123;    width: 800px;    height: 800px;    &lt;!-- width: 100px;  --&gt;    &lt;!-- height: 500px;  --&gt;  background-color: skyblue;  &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;box1&quot;&gt;    滚动的内容滚动的内容滚动的内容滚动的内容滚动的内容滚动的内容滚动的内容滚动的内容 &lt;/div&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  var _w = box.scrollWidth;  var _h = box.scrollHeight;  console.log(_w, _h); // 900 900  &lt;!-- console.log(_w, _h); // 279 600 --&gt;&lt;/script&gt;</code></pre></blockquote><ol start="2"><li>scrollLeft 和 scrollTop<blockquote><ul><li><code>scrollLeft</code>和<code>scrollTop</code>为 <strong>可读可写</strong> 属性<table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>scrollLeft</td><td>获取或设置一个元素的内容水平滚动的距离；如果元素没有产生水平方向滚动条，那 scrollLeft &#x3D; 0；设置scrollLeft的值小于 0，scrollLeft 被设为0；如果设置了超出这个容器可滚动的值，scrollLeft 会被设为最大值</td></tr><tr><td>scrollTop</td><td>获取或设置一个元素的内容垂直滚动的距离；如果元素没有产生垂直方向滚动条，那 scrollTop &#x3D; 0；如果scrollTop的值小于 0，scrollTop 会被设为0；如果设置了超出这个容器可滚动的值，scrollTop 会被设为最大值</td></tr></tbody></table></li></ul></blockquote></li></ol><img src="scrollTop和scrollLeft.png"><blockquote><pre><code>&lt;style&gt;  .box &#123;    width: 200px;    height: 100px;    border: 2px solid red;    padding: 50px;    overflow: scroll;    border: 50px solid khaki;  &#125;  .box1 &#123;    width: 800px;    height: 800px;    background-color: skyblue;  &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;box1&quot;&gt;    滚动的内容滚动的内容滚动的内容滚动的内容滚动的内容滚动的内容滚动的内容滚动的内容 &lt;/div&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  box.onscroll = function () &#123;    console.log(box.scrollTop); // 打印滚动条滚动的高度    console.log(box.scrollLeft); // 打印滚动条滚动的宽度  &#125;;//修改滚动距离(根据scrollWidth/height得到滚动条宽高)  // 滚动条，滚动到底部  box.scrollTop = 721; // 800-100+21=721 要注意，不要多减了滚动条的高度  // 滚动条，滚动到最右边  box.scrollLeft = 621; // 800-200+21=621 要注意，不要多减了滚动条的宽度&lt;/script&gt;</code></pre></blockquote><h4 id="确定元素尺寸"><a href="#确定元素尺寸" class="headerlink" title="确定元素尺寸"></a>确定元素尺寸</h4><blockquote><ul><li>浏览器在每个元素上都暴露了<code>getBoundingClientRect()</code>方法，返回一个 <code>DOMRect 对象</code></li><li>该对象提供了元素的大小及其相对于<strong>视口（可视区）</strong>的位置<blockquote><p>相关属性如下：</p></blockquote></li></ul></blockquote><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>left、x</td><td>元素左边框相对于可视区左边的距离</td></tr><tr><td>top、y</td><td>元素上边框框相对于可视区顶部的距离</td></tr><tr><td>right</td><td>元素右边框相对于可视区左边的距离</td></tr><tr><td>bottom</td><td>元素底边框相对于可视区顶部的距离</td></tr><tr><td>height</td><td>元素的高，包括 height + padding + border</td></tr><tr><td>width</td><td>元素的宽，包括 width + padding + border</td></tr></tbody></table><img src="确定元素尺寸.png"><blockquote><pre><code>&lt;style&gt;   body &#123;    margin:0;    height: 3000px;  &#125;  .box &#123;    width: 100px;    height: 100px;    border: 2px solid red;    padding: 20px;    border: 20px solid khaki;  &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  var domRect = box.getBoundingClientRect();  console.log(domRect); // 打印 DOMRect对象  // 遍历对象  for (key in domRect) &#123;    if (typeof domRect[key] !== &quot;function&quot;) &#123;      // 过滤掉方法，只留下属性      console.log(key + &quot;:&quot; + domRect[key]);    &#125;  &#125;</code></pre></blockquote><p>  &#x2F;&#x2F; 滚动浏览器窗口<br>  window.onscroll &#x3D; function () {<br>    var domRect &#x3D; box.getBoundingClientRect();<br>    console.log(domRect);<br>  };</p><blockquote><p></script></p><pre><code></code></pre></blockquote><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><ol><li>如何判断两个元素发生了碰撞（经典面试题）<img src="碰撞检测.png"></li></ol><blockquote><ul><li>相对于浏览器的位置或相对于同一父元素</li></ul></blockquote><ul><li><p>用<code>getBoundingClientRect()</code>方法</p><blockquote><pre><code>&lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;   &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;script&gt;function isBump(obj1, obj2) &#123;  var domRect1 = box1.getBoundingClientRect();  var T1 = domRect1.top;  var B1 = domRect1.bottom;  var L1 = domRect1.left;  var R1 = domRect1.right;  var domRect2 = box2.getBoundingClientRect();  var T2 = domRect2.top;  var B2 = domRect2.bottom;  var L2 = domRect2.left;  var R2 = domRect2.right;  if (L2 &gt; R1 || T1 &gt; B2 || L1 &gt; R2 || T2 &gt; B1) return false;  return true;&#125;var box1 = document.querySelector(&quot;.box1&quot;);var box2 = document.querySelector(&quot;.box2&quot;);isBump(box1, box2);&lt;/script&gt;</code></pre></blockquote></li><li><p>用偏移尺寸</p><blockquote><pre><code>function isBump(obj1, obj2) &#123;var L1 = obj1.offsetLeft;var R1 = L1 + obj1.offsetWidth;var T1 = obj1.offsetTop;var B1 = T1 + obj1.offsetHeight;var L2 = obj2.offsetLeft;var R2 = L2 + obj2.offsetWidth;var T2 = obj2.offsetTop;var B2 = T2 + obj2.offsetHeight;if (L2 &gt; R1 || L1 &gt; R2 || T2 &gt; B1 || T1 &gt; B2) &#123;  return false; // 未碰撞，返回false&#125; else &#123;  return true; // 碰撞，返回true&#125;&#125;</code></pre></blockquote></li></ul><ol start="2"><li>判断元素是否在可视区（经典面试题）<blockquote><ul><li>判断一个元素是不是在可视区，只有元素<strong>全在可视区</strong>，才算是在可视区内<img src="元素是否在可视区内.png"></li></ul></blockquote></li></ol><ul><li><p>在浏览器可视区内</p><blockquote><pre><code>// 判断元素是否是在可视区内，只有当元素全部在可视区内才算是在可视区内function isElementInViewport(el) &#123;var rect = el.getBoundingClientRect();var T1 = rect.top;var B1 = rect.bottom;var L1 = rect.left;var R1 = rect.right;return (  T1 &gt;= 0 &amp;&amp;  B1 &lt;= document.documentElement.clientHeight &amp;&amp;  L1 &gt;= 0 &amp;&amp;  R1 &lt;= document.documentElement.clientWidth);&#125;// 测试，自行在页面加一个.box的divvar box = document.querySelector(&quot;.box&quot;);window.onscroll = function () &#123;  console.log(isElementInViewport(box));&#125;;</code></pre></blockquote></li><li><p>在父级盒子可视区内</p><blockquote><pre><code>function isInViewport(el) &#123;var T1 = el.offsetTop;var B1 = T1 + el.offsetHeight;var L1 = el.offsetLeft;var R1 = L1 + el.offsetWidth;var PH = el.offsetParent.clientHeight;var PW = el.offsetParent.clientWidth;return T1 &gt;= 0 &amp;&amp; L1 &gt;= 0 &amp;&amp; B1 &lt;= PH &amp;&amp; R1 &lt;= PW;&#125;var box1 = document.querySelector(&quot;.box1&quot;);console.log(isInViewport(box1));</code></pre></blockquote></li></ul><h3 id="六、节点操作"><a href="#六、节点操作" class="headerlink" title="六、节点操作"></a>六、节点操作</h3><blockquote><p>接下来我们来学习与节点相关的操作，在开始学习 DOM 的时候，我们提到过 DOM 的节点类型有以下 7 种</p></blockquote><h4 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h4><table><thead><tr><th>节点分类</th><th>描述</th></tr></thead><tbody><tr><td>Document 文档节点</td><td>整个 DOM 树的顶层节点</td></tr><tr><td>DocumentType 文档类型节点</td><td>如 doctype 标签(<code>&lt;!DOCTYPE html&gt;)</code></td></tr><tr><td>Element 元素节点</td><td>网页的各种 HTML 标，如：<code>&lt;p&gt;</code>、<code>&lt;div&gt;</code></td></tr><tr><td>Attr 属性节点</td><td>元素的各种属性，如：<code>title=&#39;标题&#39;</code>、<code>class=&#39;box&#39;</code></td></tr><tr><td>Text 文本节点</td><td>标签之间或标签包含的文本</td></tr><tr><td>Comment 注释节点</td><td>网页中的注释</td></tr><tr><td>DocumentFragment 文档片段</td><td>文档片段，不存于 DOM 树上，是一种游离态，通常作为仓库来使用</td></tr></tbody></table><blockquote><p>如何检测节点的类型呢 ？其实每一个节点对象都有以下三个属性：</p><ul><li>nodeName 节点名</li><li>nodeType 节点类型</li><li>nodeValue 节点值<table><thead><tr><th>节点类型</th><th>nodeName</th><th>nodeType</th><th>nodeValue</th></tr></thead><tbody><tr><td>文档节点</td><td>#document</td><td>9</td><td>null</td></tr><tr><td>元素节点</td><td>标签名</td><td>1</td><td>null</td></tr><tr><td>属性节点</td><td>属性名</td><td>2</td><td>属性值</td></tr><tr><td>文本节点</td><td>#text</td><td>3</td><td>文本内容</td></tr></tbody></table></li></ul></blockquote><h4 id="节点关系"><a href="#节点关系" class="headerlink" title="节点关系"></a>节点关系</h4><ol><li>考虑所有节点<blockquote><ul><li>文本节点<code>#text</code>（即实是空白的文本）也属于节点。标签与标签之间有文本节点<br>页面节点之间存在以下关系<table><thead><tr><th>关系</th><th>考虑所有节点</th></tr></thead><tbody><tr><td>子节点</td><td>childNodes</td></tr><tr><td>父节点</td><td>parentNode</td></tr><tr><td>第一个子节点</td><td>firstChild</td></tr><tr><td>最后一个子节点</td><td>lastChild</td></tr><tr><td>前一个兄弟节点</td><td>previousSibling</td></tr><tr><td>后一个兄弟节点</td><td>nextSibling</td></tr></tbody></table></li></ul></blockquote></li></ol><blockquote><pre><code>&lt;div class=&quot;box&quot;&gt; &lt;h3 class=&quot;title&quot;&gt;我是h3标签&lt;/h3&gt; &lt;p class=&quot;p1&quot;&gt;我是p标签&lt;/p&gt; &lt;div class=&quot;item&quot;&gt;我是item&lt;/div&gt;&lt;/div&gt;&lt;script&gt; var box = document.querySelector(&quot;.box&quot;); console.log(box.childNodes); console.log(box.parentNode); //body console.log(box.firstChild); //#text console.log(box.lastChild); //#text var p1 = document.querySelector(&quot;.p1&quot;); console.log(p1.previousSibling); //#text console.log(p1.nextSibling); //#text&lt;/script&gt;</code></pre></blockquote><blockquote><blockquote><p>注意点：文本节点也属于节点</p></blockquote><ul><li>而我们实际开发中，我们常常希望获取的是元素类型的节点，所以文本类型的节点给我们带来了很大的干扰。</li></ul></blockquote><ol start="2"><li>只考虑元素节点<blockquote><ul><li>实际上在 DOM 中还提供了一些<strong>只考虑元素节点</strong>的属性，如下表</li><li>我们把考虑所有节点的属性与只考虑元素节点的属性作如下<strong>对比</strong><table><thead><tr><th>关系</th><th>考虑所有节点</th><th>只考虑元素节点</th></tr></thead><tbody><tr><td>子节点</td><td>childNodes</td><td>children</td></tr><tr><td>父节点</td><td>parentNode</td><td>parentNode</td></tr><tr><td>第一个子节点</td><td>firstChild</td><td>fristElementChild</td></tr><tr><td>最后一个子节点</td><td>lastChild</td><td>lastElementChild</td></tr><tr><td>前一个兄弟节点</td><td>previousSibling</td><td>previousElementSibling</td></tr><tr><td>后一个兄弟节点</td><td>nextSibling</td><td>nextElementSibling</td></tr></tbody></table></li></ul></blockquote></li></ol><blockquote><pre><code>&lt;div class=&quot;box&quot;&gt; &lt;h3 class=&quot;title&quot;&gt;我是h3标签&lt;/h3&gt; &lt;p class=&quot;p1&quot;&gt;我是p标签&lt;/p&gt; &lt;div class=&quot;item&quot;&gt;我是item&lt;/div&gt;&lt;/div&gt;&lt;script&gt; var box = document.querySelector(&quot;.box&quot;); var p1 = document.querySelector(&quot;.p1&quot;);//只考虑元素节点  console.log(box.children);  console.log(box.firstElementChild); //h3  console.log(box.lastElementChild); //item  console.log(p1.previousElementSibling); //h3  console.log(p1.nextElementSibling); //item&lt;/script&gt;</code></pre></blockquote><ol start="3"><li>手写 children 方法<blockquote><p>实现思路</p><ul><li>用<code>当前节点.childNodes</code>获取所有子节点，然后遍历所有子节点，判断节点的类型<code>nodeType 是否为 1</code></li><li>如果为 1，则把这个节点添加到<strong>数组</strong>中</li><li>最后遍历完，把数组作为返回值返回。</li></ul></blockquote></li></ol><blockquote><pre><code>HTMLElement.prototype._children = function () &#123;  // this 指向，谁调用_children 那this就是谁  var nodes = this.childNodes;  var elementArr = [];  // 过滤节点类型，只留下元素类型节点  for (var i = 0; i &lt; nodes.length; i++) &#123;    if (nodes[i].nodeType === 1) &#123;      // 是元素类型节点，保存      elementArr.push(nodes[i]);    &#125;  &#125;  return elementArr;&#125;;var box = document.querySelector(&quot;.box&quot;);console.log(box._children());</code></pre><ol start="4"><li>手写 prevElementSibling 方法<br>实现思路</li></ol><ul><li><code>当前节点.previousSibling</code></li><li>如果返回值为<code>null</code>，说明<strong>没有</strong>上一个元素兄弟节点，直接将返回值<code>null</code>返回</li><li>如果返回值不为 <code>null</code>，要<strong>判断</strong>节点类型是否为元素节点，即判断<code>返回节点.nodeType === 1</code>是否成立</li><li>如果不成立，则继续用<code>返回的节点.previousSibling</code>，一直重复上面过程，直到<code>返回节点.nodeType === 1</code>成立或返回值为 <code>null</code>，就不再继续查找了。</li></ul></blockquote><blockquote><pre><code>HTMLElement.prototype._prevElementSibling = function () &#123;  // this，谁打点调用这个方法，this是谁  var prevElement = this.previousSibling; // 找上一个兄弟节点  // if(!prevElement) return null;  // 如果返回的兄弟节点不为null 且节点类型不等于1，说明当前兄弟节点不是元素类型节点，需要继续向上查找。  //顺序不能调换，因为如果prevElement是null，调用nodeType会报错  while (prevElement &amp;&amp; prevElement.nodeType !== 1) &#123;    prevElement = prevElement.previousSibling;    // if (!prevElement) return null;  &#125;  return prevElement; // 如果上面为null，直接返回null,如果不是，返回对应元素节点&#125;;</code></pre></blockquote><h4 id="修改节点内容"><a href="#修改节点内容" class="headerlink" title="修改节点内容"></a>修改节点内容</h4><blockquote><ul><li>改变元素节点中的内容可以使用两个相关属性：</li><li>innerHTML：更改元素的内容，更改的内容能以<strong>HTML语法</strong>的形式显示</li><li>innerText：更改的内容，更改的内容只能以<strong>纯文本</strong>的形式显示</li></ul><pre><code>&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  var box = document.getElementsByClassName(&quot;box&quot;);  box[0].innerHTML = &quot;&lt;h3&gt;我是h3标签&lt;/h3&gt;&quot;;  box[1].innerText = &quot;&lt;h3&gt;我是h3标签&lt;/h3&gt;&quot;;&lt;/script&gt;</code></pre></blockquote><h4 id="节点创建与移动"><a href="#节点创建与移动" class="headerlink" title="节点创建与移动"></a>节点创建与移动</h4><blockquote><ul><li>DOM 中提供了以下方法，用来创建节点，并将创建好的节点插入到页面当中</li></ul></blockquote><table><thead><tr><th>操作节点方法</th><th>作用</th></tr></thead><tbody><tr><td>document.createElement(‘标签名’)</td><td>用来创建一个指定的<strong>元素节点</strong>对象，并将创建好的对象作为返回值</td></tr><tr><td>document.createTextNode(‘文本内容’)</td><td>用来创建一个<strong>文本节点</strong>对象，并将创建好的对象作为返回值。</td></tr><tr><td>父节点.appendChild(‘子节点对象’)</td><td>用来向父节点的<strong>最后面</strong>添加一个新的子节点。</td></tr><tr><td>父节点.insertBefore(‘新节点’,’旧节点’)</td><td>将新创建的”孤儿节点”插入到页面原有的节点的<strong>前面</strong></td></tr></tbody></table><ol><li><p>document.createElement()</p><blockquote><ul><li><code>document.createElement()</code>方法用于创建一个指定 <code>tagName</code>的HTML元素</li><li>在创建元素之前，会将传入的tagName转化为<strong>小写</strong>，即生成的标签名是小写名</li><li>创建出来的节点是一个<strong>“孤儿节点”</strong>，他并不在 DOM 树上，而是<strong>独立存在</strong>的。</li><li>所以我们必须使用<code>appendChild()</code>或<code>insertBefore()</code>方法将孤儿节点<strong>插入到 DOM 树上</strong></li><li><code>var myDiv = document.createElement(&quot;div&quot;); //  创建一个标签名为div的元素节点</code></li></ul></blockquote></li><li><p>document.createTextNode()</p><blockquote><ul><li>用来创建一个文本节点对象，并将创建好的对象作为返回值</li><li><code>var text = document.createTextNode(data);</code><ul><li>text 是一个文本节点。</li><li>data 是一个字符串，包含了要放入文本节点的内容</li></ul></li></ul></blockquote></li><li><p>appendChild()</p><blockquote><ul><li>该方法将一个节点附加到指定父节点的子节点列表的末尾处</li><li>如果某个节点已经拥有父节点，在被传递给此方法后，它首先会被<strong>移除</strong>，再被插入到新的位置</li><li>这意味着，一个节点<strong>不可能</strong>同时出现在文档的不同位置<blockquote><p>返回值：<code>appendChild()</code>返回的是被附加的子元素</p></blockquote></li></ul><pre><code>element.appendChild(child);</code></pre></blockquote><p>&#x2F;&#x2F; element  将节点追节到的那个父节点<br>&#x2F;&#x2F; child 要追加给父节点的节点（通通是一个元素节点）</p><blockquote><pre><code></code></pre></blockquote></li></ol><blockquote><ul><li>代码演示：</li></ul><pre><code>//获取页面元素var ul = document.querySelector(&quot;ul&quot;);//将div插入到ul的最后面var div = document.createElement(&quot;div&quot;);ul.appendChild(div);</code></pre></blockquote><p>&#x2F;&#x2F;将文本节点插入到ul的最后面<br>var pt &#x3D; document.createTextNode(“我是一个文本节点”);<br>ul.appendChild(pt);</p><blockquote></blockquote><p>&#x2F;&#x2F;将文本节点插入到li中<br>var li &#x3D; document.createElement(“li”);<br>ul.appendChild(li);<br>li.appendChild(pt);</p><blockquote><pre><code></code></pre></blockquote><ol start="4"><li>insertBefore()<blockquote><ul><li>方法在参考节点之前插入一个拥有指定父节点的子节点</li><li>如果被插入节点已经有父节点，则会从当前位置移动到新插入位置<blockquote><p>返回值：返回被插入的子节点</p></blockquote></li><li><code>parentNode.insertBefore(newNode, referenceNode);</code><ul><li><code>parentNode</code>是<strong>参考节点</strong>的父节点<blockquote><p>如果<code>referenceNode</code> 为 <code>null</code> 则 <code>newNode</code> 将被插入到子节点的末尾</p></blockquote></li></ul></li></ul></blockquote></li></ol><blockquote><ul><li>功能一：创建新元素，插入到指定元素前</li></ul><pre><code>&lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;  //获取ul  var oul = document.querySelector(&quot;ul&quot;);  //创建li元素  var li1 = document.createElement(&quot;li&quot;);  // 创建文本元素  var liText = document.createTextNode(&quot;我是新创建的li文本&quot;);  //   将文本元素插入到li1中  li1.appendChild(liText);  //   将li1插入到第二个li前面  oul.insertBefore(li1, oul.children[1]);&lt;/script&gt;</code></pre></blockquote><blockquote><ul><li>功能二：移动元素</li></ul><pre><code>&lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;  //获取ul  var oul = document.querySelector(&quot;ul&quot;);  //获取li元素  var li = document.getElementsByTagName(&quot;li&quot;);  //将最后一个li移动到最前面  oul.insertBefore(li[3], li[0]);  //如果第二个参数为null，新节点将移动到父节点的最后面  oul.insertBefore(li[1], null);&lt;/script&gt;</code></pre></blockquote><ol start="5"><li>综合代码<blockquote><pre><code>&lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;  // 获取元素  var ul = document.querySelector(&quot;ul&quot;);  var li = document.getElementsByTagName(&quot;li&quot;);  //创建节点  var div = document.createElement(&quot;div&quot;);  // 修改/新建节点内容  div.innerHTML = &quot;&lt;h3&gt;我是idv中的h3标签&lt;/h3&gt;&quot;;  // 插入到页面中,appendChild是移到父元素最后面  ul.appendChild(div);  //  移动节点：将新建元素插到li[1]前面  ul.insertBefore(div, li[1]);&lt;/script&gt;</code></pre></blockquote></li></ol><h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><ol><li>请动态创建出一个 15 行 10 列的表格<blockquote><ul><li>方式1：创建table,tr,td标签</li></ul><pre><code>&lt;div class=&quot;table1&quot;&gt;&lt;/div&gt;&lt;script&gt;// 获取元素function creatTable1(rows, columns, el) &#123;  var table = document.createElement(&quot;table&quot;);  for (var i = 1; i &lt;= rows; i++) &#123; // 创建行 var tr = document.createElement(&quot;tr&quot;); for (var j = 1; j &lt;= columns; j++) &#123;   // 创建列   var td = document.createElement(&quot;td&quot;);   // 将列插入行中   tr.appendChild(td); &#125; // 将行插入表格中 table.appendChild(tr);  &#125;  // 将表格插入到页面中  el.appendChild(table);&#125;var table1 = document.querySelector(&quot;.table1&quot;);creatTable1(15, 10, table1);&lt;/script&gt;</code></pre></blockquote></li></ol><blockquote><ul><li>方式2：创建ul,li,span标签</li></ul><pre><code>&lt;div class=&quot;table2&quot;&gt;&lt;/div&gt;&lt;script&gt;// 获取元素 function creatTable2(rows, columns, el) &#123;   var ul = document.createElement(&quot;ul&quot;);   for (var i = 1; i &lt;= rows; i++) &#123;     // 创建行     var li = document.createElement(&quot;li&quot;);     for (var j = 1; j &lt;= columns; j++) &#123;       // 创建列       var span = document.createElement(&quot;span&quot;);       // 将列插入行中       li.appendChild(span);     &#125;     // 将行插入ul中     ul.appendChild(li);   &#125;   // 将表格插入到页面中   el.appendChild(ul); &#125; var table2 = document.querySelector(&quot;.table2&quot;); creatTable2(5, 5, table2);&lt;/script&gt;</code></pre></blockquote><blockquote><blockquote><p><code>span</code>要转换为行内元素</p></blockquote></blockquote><ol start="2"><li><p>案例 2：请制作九九乘法表</p><blockquote><ul><li>列数与行数一致</li><li>表格内插入文字：<code>innerText</code></li></ul><pre><code>&lt;div class=&quot;mytable&quot;&gt;&lt;/div&gt;&lt;script&gt;  // 创建表格  var table = document.createElement(&quot;table&quot;);  for (var i = 1; i &lt;= 9; i++) &#123; // 创建行 var tr = document.createElement(&quot;tr&quot;); for (var j = 1; j &lt;= i; j++) &#123;   // 创建列，输入文字   var td = document.createElement(&quot;td&quot;);   td.innerText = i + &quot;*&quot; + j + &quot;=&quot; + i * j;   //   将td插入行中   tr.appendChild(td); &#125; // 将行插入表格 table.appendChild(tr);  &#125;  var mytable = document.querySelector(&quot;.mytable&quot;);  // 将表格插入页面  mytable.appendChild(table);&lt;/script&gt;</code></pre></blockquote></li><li><p>案例 3：创建电影座位号</p><blockquote><ul><li>根据需求，创建几行几列的电影座位号<br>关键点：</li><li>座位号：用累加器</li><li>顺序是从下往上，所以用<code>insertBefore</code></li></ul><pre><code>&lt;div class=&quot;table&quot;&gt;&lt;/div&gt;&lt;script&gt;  function getSeats(rows, columns, el) &#123; var ul = document.createElement(&quot;ul&quot;); var sum = 0; for (var i = 1; i &lt;= rows; i++) &#123;   // 创建行   var li = document.createElement(&quot;li&quot;);   for (var j = 1; j &lt;= columns; j++) &#123;     // 创建列     var div = document.createElement(&quot;div&quot;);     sum++;     div.innerText = sum;     li.appendChild(div);   &#125;   ul.insertBefore(li, ul.children[0]); &#125; el.appendChild(ul);  &#125;  var table = document.querySelector(&quot;.table&quot;);  getSeats(5, 5, table);&lt;/script&gt;</code></pre></blockquote></li></ol><h4 id="innerHTML-与-createElement-的效率问题"><a href="#innerHTML-与-createElement-的效率问题" class="headerlink" title="innerHTML 与 createElement 的效率问题"></a>innerHTML 与 createElement 的效率问题</h4><blockquote><ul><li><code>innerHTML</code>更改元素的内容，更改的内容能以 HTML 语法的形式显示</li><li><code>createElement</code>用于动态创建 HTML 元素，然后结合 <code>appendChild</code>将元素插入到页面中<blockquote><p>这两种方式都可以动态创建 HTML 元素，那一种效率更高呢 ？我们通过一个案例来分析</p></blockquote></li></ul></blockquote><ol><li>在页面动态创建 1000 个 li，插入到页面中<blockquote><pre><code>&lt;ul class=&quot;list&quot;&gt;&lt;/ul&gt;&lt;script&gt;  var oUl = document.querySelector(&quot;.list&quot;);</code></pre></blockquote>  &#x2F;&#x2F;innerHTML实现<br>  console.time(“innerHTML”);<br>  for (var i &#x3D; 1; i &lt;&#x3D; 1000; i++) {<br> oUl.innerHTML +&#x3D; “<li>这是第” + i + “条新闻</li>“;<br>  }<br>  console.timeEnd(“innerHTML”); &#x2F;&#x2F; 238.225830078125 ms<blockquote></blockquote>  &#x2F;&#x2F; createElement实现<br>  console.time(“createElement”);<br>  for (var j &#x3D; 1; j &lt;&#x3D; 1000; j++) {<br> var oLi &#x3D; document.createElement(“li”);<br> oLi.innerText &#x3D; “这是第” + j + “条新闻”;<br> oUl.appendChild(oLi);<br>  }<br>  console.timeEnd(“createElement”); &#x2F;&#x2F;3.586669921875 ms<blockquote></blockquote>  &#x2F;&#x2F;innerHTML优化版<br>  var oUl &#x3D; document.querySelector(“.list”);<br>  console.time(“innerHTML”);<br>  var str &#x3D; “”;<br>  for (var i &#x3D; 1; i &lt;&#x3D; 1000; i++) {<br> str +&#x3D; “<li>这是第” + i + “条新闻</li>“;<br>  }<br>  oUl.innerHTML +&#x3D; str;<br>  console.timeEnd(“innerHTML”); &#x2F;&#x2F; 0.52294921875 ms<blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ol><blockquote><blockquote><p>分析：以上代码中</p></blockquote><ul><li><code>innerHTML</code>的执行效率明显比<code>createElement</code>的方式要<strong>低很多</strong>，原因在于<ul><li>每次迭代都要设置一次 <code>innerHTML</code>，在设置 <code>innerHTML</code> 前还要先读取 <code>innerHTML</code>。而且每次读取和插入都是把之前的所有节点读取出来。</li><li>而 <code>createElement</code> 每次迭代，只是把新创建的元素插入到之前元素的后面。</li></ul></li><li>所以我们最后的优化版是通过一个字符串来拼接所有内容，然后再一次性的插入到页面中。</li></ul></blockquote><ol start="2"><li><p>innerHTML、createElement 总结</p><table><thead><tr><th></th><th>说明</th></tr></thead><tbody><tr><td>innerHTML</td><td>在操作时相对结构复杂，可读性不强，如果内容较<strong>少</strong>，可以使用，不过要注意把内容拼接成<strong>字符串</strong>，一次性插入到页面；同时，如果内容为用户输入时，要考虑<strong>安全问题</strong></td></tr><tr><td>createElement</td><td>创建元素相对复杂些，但可读性强，如果内容较<strong>多</strong>，建议使用这种方式</td></tr></tbody></table></li><li><p>innerHTML 安全问题</p><blockquote><ul><li>如果页面中需要提供<strong>用户输入的信息</strong>，那建议不要使用 <code>innerHTML</code>。因为有可能会造成<code>XSS攻击</code>。</li><li>所谓XSS攻击全称是<code>&#39;Cross Site Scripting&#39;</code>跨站脚本。</li><li>是指黑客往 HTML 文件中或者 DOM 中注入恶意脚本，从而在用户浏览页面时利用注入的恶意脚本对用户实施攻击的一种手段。<blockquote><p>2015 年喜马拉雅就被爆出了对应的<code>XSS 漏洞</code>，是因为用户在设置专辑名称时，服务器对关键字过滤不严格，可以将专辑名设置为一段 <code>Javascript</code>。</p></blockquote></li></ul></blockquote></li></ol><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><blockquote><p>DOM 中删除一个子节点，<strong>返回</strong>删除的节点。</p><ul><li><code>var oldChild = node.removeChild(child);</code><ul><li><code>child</code> 是要移除的那个子节点。</li><li><code>node</code> 是<code>child</code>的父节点。</li><li><code>oldChild</code>保存对删除的子节点的引用。<code>oldChild === child</code><blockquote><p>注意：节点不能主动删除自己，必须由父节点删除它</p></blockquote></li></ul></li></ul></blockquote><blockquote><pre><code>&lt;div class=&quot;box&quot;&gt; &lt;h3 class=&quot;title&quot;&gt;我是标题&lt;/h3&gt;&lt;/div&gt;&lt;script&gt;  var box = document.querySelector(&quot;.box&quot;);  var h3 = document.querySelector(&quot;.title&quot;);</code></pre></blockquote><p>  &#x2F;&#x2F; 删除h3标签，方法一:先找到父节点，然后删除其子节点<br>  &#x2F;&#x2F; var _h3 &#x3D; box.removeChild(h3);<br>  &#x2F;&#x2F; console.log(_h3);</p><blockquote></blockquote><p>  &#x2F;&#x2F; 删除h3标签，方法二：通过自身调用parentNode，将自身删除<br>  h3.parentNode.removeChild(h3);</p><blockquote><p></script></p><pre><code>&gt;更推荐使用`.parentNode`的方式找到父节点</code></pre></blockquote><blockquote><ul><li>删除一个元素的所有子节点</li></ul><pre><code>&lt;ul class=&quot;list&quot;&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt; &lt;li&gt;6&lt;/li&gt; &lt;li&gt;7&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;//方法1：var oUl = document.querySelector(&quot;.list&quot;);// 如果有第一个子元素，就将他给删除// while (oUl.firstChild) &#123;//   oUl.removeChild(oUl.firstChild);// &#125;</code></pre></blockquote><p>&#x2F;&#x2F; 最简单的方法<br>oUl.innerHTML &#x3D; “”;</p><blockquote><p></script></p><pre><code></code></pre></blockquote><h4 id="节点的替换（修改）"><a href="#节点的替换（修改）" class="headerlink" title="节点的替换（修改）"></a>节点的替换（修改）</h4><blockquote><ul><li><code>replaceChild</code>方法用指定的节点替换当前节点的一个子节点，并返回被替换掉的节点</li><li><code>parentNode.replaceChild(newChild, oldChild);</code></li><li><code>newChild</code>：用来替换<code>oldChild</code>的新节点。如果该节点已经存在于 DOM 树中，则它首先会<strong>被从原始位置删除</strong>。</li><li><code>oldChild</code>： 被替换掉的原始节点。</li><li><code>parentNode</code>是<code>oldChild</code>的父节点</li></ul><pre><code>&lt;ul&gt; &lt;li&gt;第一个li&lt;/li&gt; &lt;li&gt;第二个li&lt;/li&gt; &lt;li&gt;第三个li&lt;/li&gt; &lt;li&gt;第四个li&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;  // 获取页面元素  var oul = document.getElementsByTagName(&quot;ul&quot;)[0];  //用最后一个元素替换新的元素  var firstli = oul.children[0];  var lastli = oul.children[3];  oul.replaceChild(lastli, firstli);</code></pre></blockquote><p>  &#x2F;&#x2F; 创建新的元素来替换<br>  var oli &#x3D; document.createElement(“li”);<br>  oli.innerHTML &#x3D; “<p>我是新创建的</p>“;<br>  oli.title &#x3D; “我是新创建的”;<br>  oul.replaceChild(oli, oul.children[1]);</p><blockquote><p></script></p><pre><code></code></pre></blockquote><ol start="2"><li>案例：交换两个元素在节点中的位置（阿里面试题）</li></ol><ul><li>实现思路<blockquote><ul><li>假设要交换第 1 个 li和第 4 个 li</li><li>我们可以先创建一个新的节点 <code>newNode</code>，插入到第 1 个 li 前面，用来<strong>占位</strong>（记录第 1 个 li 的位置）</li><li>然后用第一个 li来<strong>替换</strong>第 4 个 li，在替换前，要先把第 4 个 li <strong>保存</strong>起来，供后面使用</li><li>最后用第 4 个 li来<strong>替换</strong>之前新创建的节点<code>newNode</code></li><li>如果传过来的节点中，有一个<strong>不存在</strong>，则返回<code>false</code> ，如果替换成功，则返回<code>true</code><blockquote><p>注意：<code>insertBefore</code> 和<code>replaceChild</code>的父级元素是被替换的元素</p></blockquote></li></ul><pre><code>&lt;div class=&quot;box&quot;&gt;box&lt;/div&gt;&lt;ul class=&quot;list&quot;&gt; &lt;li&gt;第一个li&lt;/li&gt; &lt;li&gt;第二个li&lt;/li&gt; &lt;li&gt;第三个li&lt;/li&gt; &lt;li&gt;第四个li&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;function changeOfPosition(obj1, obj2) &#123;  // 如果传过来的节点，有一个不存在，就不做任何操作  if (!obj1 || !obj2) return false;  // 首先创建一个新节点  var newNode = document.createElement(&quot;div&quot;);  // 把新创建的节点插入到 obj1的前面  obj1.parentNode.insertBefore(newNode, obj1);  // 用obj1替换obj2,返回obj2  obj2.parentNode.replaceChild(obj1, obj2);  // 用obj2替换newNode,为什么不用obj1的父级，而要用newNode  // 在上面用obj1替换obj2了，所以obj1的父级此时变成了obj2的父级  newNode.parentNode.replaceChild(obj2, newNode);  return true;&#125;</code></pre></blockquote>var liList &#x3D; document.querySelectorAll(“.list li”);<br>var box &#x3D; document.querySelector(“.box”);<br>&#x2F;&#x2F; 交换第1个和第3个元素位置<br>changeOfPosition(box, liList[3]);<blockquote><p></script><br>&#96;&#96;&#96;</p></blockquote></li></ul><h4 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h4><blockquote><ul><li><code>cloneNode</code>方法返回调用该方法的节点的一个<strong>副本</strong>。</li><li>也就是克隆节点，克隆出来的节点是 <strong>“孤儿节点”</strong>,只是存在内存中，没有插入页面</li><li><code>var dupNode = node.cloneNode(deep);</code></li><li><code>node</code>将要被克隆的节点</li><li><code>dupNode</code>克隆生成的副本节点</li><li><code>deep</code>是否采用深度克隆，可选参数<ul><li>如果为 true，则该节点里的所有后代节点也都会被克隆</li><li>如果为 false，则只克隆该节点本身(壳子)<blockquote><p>在早期规范中，<code>deep</code> 的默认值是 <code>true</code>，现在的新规范里，把默认值变成了 <code>false</code><br>所以考虑兼容问题，最好在克隆时把这个参数带上。</p></blockquote></li></ul></li></ul></blockquote><blockquote><pre><code>&lt;div class=&quot;box&quot;&gt; &lt;ul&gt;    &lt;li&gt;第一个li&lt;/li&gt;    &lt;li&gt;第二个li&lt;/li&gt;    &lt;li&gt;第三个li&lt;/li&gt;    &lt;li&gt;第四个li&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;script&gt;  // 获取页面元素  var box = document.getElementsByClassName(&quot;box&quot;);  // var box2 = box[0].cloneNode(); // 浅克隆  var box2 = box[0].cloneNode(false); // 浅克隆  console.log(box2);  var box3 = box[0].cloneNode(true); // 深克隆  console.log(box3);  document.body.appendChild(box2);  document.body.appendChild(box3);&lt;/script&gt;</code></pre></blockquote><blockquote><blockquote><p>温馨提示：</p><ul><li>如果克隆的节点，设置了<code>id名</code>，则克隆后要修改 id 的名字，确保 id 的<strong>唯一性</strong></li><li>克隆一个元素节点会拷贝它<strong>所有的属性以及属性值</strong>，当然也就包括了属性上绑定的事件（比如onclick&#x3D;”alert(1)”），但<strong>不会拷贝</strong>那些使用<code>addEventListener()</code>方法或者<code>node.onclick = fn</code>这种用<code>JavaScript</code>动态绑定的事件。</li></ul></blockquote></blockquote><h4 id="DocumentFragment"><a href="#DocumentFragment" class="headerlink" title="DocumentFragment"></a>DocumentFragment</h4><blockquote><ul><li><code>DocumentFragment</code>文档片段接口，表示一个<strong>没有父对象</strong>的最小文档对象。</li><li>它被作为一个<strong>轻量版</strong>的 <code>Document</code> 使用，就像标准的 <code>document</code> 一样，存储由<strong>节点（nodes）组成</strong>的文档结构。与 <code>document</code> 相比，<strong>最大的区别</strong>是它不是真实 DOM 树的一部分，它的变化<strong>不会触发</strong> DOM 树的重新渲染，且不会对<strong>性能</strong>产生影响。</li></ul></blockquote><blockquote><ul><li>他具有真实 DOM 的一切方法和属性，所以我们可以像操作真实 DOM 一样来操作他</li><li>你可以把他理解成<strong>虚拟节点对象</strong>，他的作用是充当其它要被添加到真实文档节点的<strong>仓库</strong>。而他自己永远不会被添加到真实的文档对中</li></ul></blockquote><blockquote><pre><code>&lt;ul id=&quot;list&quot;&gt;&lt;/ul&gt;&lt;script&gt;  var oUl = document.getElementById(&quot;list&quot;);  // 创建一个文档片段，此时还没有插入到真实DOM树中，其存在内存中  var fragment = document.createDocumentFragment();</code></pre></blockquote><p>  &#x2F;&#x2F; for循环创建5个li，然后插入到ul中<br>  for (var i &#x3D; 0; i &lt; 4; i++) {<br>    var oLi &#x3D; document.createElement(“li”);<br>    oLi.innerText &#x3D; “第” + i + “个li”;<br>    &#x2F;&#x2F; 将创建的DOM先放在文档片段中，这样就不会造成频繁的操作真实DOM<br>    fragment.appendChild(oLi);<br>  }<br>  &#x2F;&#x2F; 一次性将创建的5个oLi插入到真实的DOM树中<br>  oUl.appendChild(fragment);</p><blockquote><p></script></p><pre><code></code></pre></blockquote><blockquote><blockquote><p>DocumentFragment 文档片段的主要功能：</p><ul><li>可以将频繁的 DOM 操作理改为<strong>一次性 DOM 操作</strong>，从而减少了页面的重排和重绘（减少 DOM 渲染的次数）</li></ul></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（八）</title>
      <link href="/2023/12/05/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%85%AB%EF%BC%89/"/>
      <url>/2023/12/05/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%85%AB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、对象的基本概念"><a href="#一、对象的基本概念" class="headerlink" title="一、对象的基本概念"></a>一、对象的基本概念</h3><ol><li><p>现实生活角度-理解对象</p><blockquote><ul><li>在现实生活中，万物皆对象，对象是一个具体的，看得见摸得着的实实在在存在的实物。</li><li>如：一个苹果，一本书，一个杯子，一个人等，这些实实在在存在颜的实物，就是一个对象。</li><li>一个对象有两个重要的组成部分：<strong>属性、功能</strong><table><thead><tr><th>属性</th><th>功能</th></tr></thead><tbody><tr><td>可以简单理解为一个对象的特征和外观等，如：形状、颜色、气味、大小、重量、味道</td><td>可以简单的理解为一个对象功能和行为等，他能用来做什么</td></tr></tbody></table></li></ul></blockquote></li><li><p>JavaScript 语言角度-理解对象</p><blockquote><ul><li>在 JavaScript 中,对象是由一组<strong>无序的</strong>相关属性和方法的集合。</li><li>JS 中的对象，本质就是用代码来模拟现实生活中的对象，他由<strong>属性和方法</strong>两个部分组成。<ul><li>对象属性与现实生活中对象的属性是对应</li><li>对象方法与现实生活中对象的功能是对应</li></ul></li></ul></blockquote></li></ol><blockquote><p>比如，我们要在 JS 中定义一个手机对象，我们可以写成如下：</p><pre><code>// 定义了一个手机对象var phone = &#123;  brand: &quot;苹果&quot;, // 品牌名  size: &quot;5.8英寸&quot;, // 手机尺寸  color: &quot;黑色&quot;, // 颜色  weight: &quot;100g&quot;, // 重量  quality: &quot;铝合金&quot;, // 材质  ringUp: function () &#123;    console.log(&quot;打电话&quot;); // 方法：打电话  &#125;,  playMovie: function () &#123;    console.log(&quot;播放电影&quot;); // 方法： 播放电影  &#125;,  // 更多方法省略......&#125;;</code></pre></blockquote><ol start="3"><li>为什么需要对象<blockquote><ul><li>前面我们学过变量和数组，如果要保存一个基本数据类型的值，我们可以用变量来保存; 如果要保存一且具有相关性的值和数据，我们可以用数组;</li><li>但如果要保存一个完整的对象（比如人）的信息？变量和数组呢都不能做到</li><li>而对象的形式保存数据，非常直观和清淅，很明确的知道每一项保存的是什么信息。</li></ul><pre><code>var person = &#123;  name: &quot;小明&quot;,  sex: &quot;女&quot;,  age: 45,  weight: 45,  height: 128,&#125;;</code></pre></blockquote></li></ol><h3 id="二、对象的创建"><a href="#二、对象的创建" class="headerlink" title="二、对象的创建"></a>二、对象的创建</h3><blockquote><p>在 JS 中创建一个对象有以下三种方式：</p><ul><li>利用<strong>字面量</strong>方式，创建一个对象</li><li>利用 <code>new Object()</code> 方式，创建对象</li><li>利用<strong>构造函数</strong>方式，创建一个对象</li></ul></blockquote><ol><li>字面量方式创建对象<blockquote><pre><code>// 对象的抽象写法var obj = &#123; key:value, key:value,  ....&#125;</code></pre></blockquote>&#x2F;&#x2F; 创建一个对象<br>var obj &#x3D; {<br> name:’小明’, &#x2F;&#x2F; 属性<br> age:23,  &#x2F;&#x2F; 属性<br> sing:function(){  &#x2F;&#x2F; 方法<br> console.log(‘我在唱歌’)<br> }<br>}<blockquote></blockquote>&#x2F;&#x2F; 创建一个空对象 对象中没有任何属性和方法<br>var obj &#x3D; {};<blockquote><pre><code></code></pre></blockquote></li></ol><p><strong>语法解读</strong></p><blockquote><ul><li>{}表示的就是一个对象，我们把这个对象赋值给到一个变量，我们通过变量来访问这个对象。</li><li>{}括号里面表达了对象的属性和方法，对象的属性和方法，是以<strong>键值对</strong>的形式来书写的<ul><li><code>key: value;</code>键值对形式， key表示属性名，value表示属性值，即： name: ‘小明’</li><li>name、age 就是对象的<strong>属性</strong></li><li>sing 是对象的方法，其实他<strong>也是对象属性</strong>，不过一个属性的值如果是一个<strong>函数</strong>，我们把这个属性称为对象的<strong>方法</strong></li></ul></li><li>属性的值，可以是<strong>任意的</strong>数据类型</li><li>每个属性之间用<code>,</code>逗号隔开</li><li>最后一个属性,逗号不写</li></ul></blockquote><ol start="2"><li>对象中属性名规范<blockquote><ul><li>如果对象的属性名<strong>符合</strong>JS 标识符命名规范，则属性名<strong>不需要</strong>加双引号</li><li>否则就需要用 <code>“”</code> 双引号 或<code>&#39;&#39;</code>单引号包裹起来</li><li>标识符命名规范：只能以<strong>字母，数字，_下划线，$<strong>组成，但</strong>不能以数字开头</strong></li><li>对象中的属性名，如果是一个<strong>变量</strong>，则必需用<code>[]</code>的方式来书写</li></ul><pre><code>var name = &quot;abc&quot;;var person = &#123;  [name]: &quot;清心&quot;, //abc=&quot;清心“  [&quot;age&quot;]: 18, // 注意这里，age是一个字符串，不是一个变量  hobby: [&quot;游泳&quot;, &quot;健身&quot;, &quot;阅读&quot;],  &quot;to-sleep&quot;: function () &#123; // to-sleep命名不符合标识符命名规范，则用&#39;&#39;包裹 console.log(&quot;我要睡觉了&quot;);  &#125;,&#125;;</code></pre></blockquote></li></ol><h3 id="三、对象属性的操作"><a href="#三、对象属性的操作" class="headerlink" title="三、对象属性的操作"></a>三、对象属性的操作</h3><ol><li>访问对象中的属性<blockquote><ul><li>我们可用对象打点的方式来访问对象中的属性，即：对象.属性名</li><li>如果属性名<strong>不符合</strong> JS 标识符命名规范，则必须用<strong>方括号</strong>的写法来访问，即： 对象[“属性名”]</li><li>[]方括中的属性名，必需用’’单引号或””双引号包裹</li><li>如果属性名以变量的形式存储，则可以使用方括号的形式访问，即 ：对象[变量名]</li><li>如果访问对象中，不存在的属性，不会报错，其值为 undefined</li></ul><pre><code>// 创建了一个对象var user = &#123;  name: &quot;清心&quot;,  age: 18,  sex: &quot;女&quot;,  &quot;my-hobbies&quot;: [&quot;篮球&quot;, &quot;画画&quot;, &quot;阅读&quot;, &quot;编程&quot;],&#125;;</code></pre></blockquote>&#x2F;&#x2F; 对象打点访问对象中的属性值<br>console.log(user.name); &#x2F;&#x2F; 清心<br>console.log(user.age); &#x2F;&#x2F; 18<br>console.log(user.sex); &#x2F;&#x2F; 女<br>&#x2F;&#x2F;如果属性名不符合 JS 标识符命名规范<br>console.log(user[“my-hobbies”]); &#x2F;&#x2F; [“篮球”, “画画”, “阅读”, “编程”]<br>&#x2F;&#x2F;如果属性名以变量的形式存储<br>var key &#x3D; “name”;<br>console.log(user[key]); &#x2F;&#x2F; 清心<br>&#x2F;&#x2F;如果访问对象中，不存在的属性<br>console.log(user.weight); &#x2F;&#x2F; undefined<blockquote><pre><code></code></pre></blockquote></li></ol><blockquote><blockquote><p>注意</p><ul><li>对象中的属性名，如果是一个变量 和 属性名以变量的形式存储是不一样的</li></ul></blockquote><pre><code> var name = &quot;abc&quot;; //属性名以变量的形式存储 var key = &quot;height&quot;;</code></pre></blockquote><p> var person &#x3D; {<br>&#x2F;&#x2F;对象中的属性名，如果是一个变量,则必需用[]的方式来书写<br>   [name]: “hermia”,<br>   height: 188,<br> };<br> console.log(person);<br> &#x2F;&#x2F;{abc:”hermia”, height:188}</p><blockquote></blockquote><p>&#x2F;&#x2F;如果属性名以变量的形式存储,则以使用方括号的形式访问<br> console.log(person[key]);<br> &#x2F;&#x2F;188</p><blockquote><pre><code></code></pre></blockquote><ol start="2"><li><p>添加或修改对象属性值</p><blockquote><ul><li>我们通过 <code>对象.属性名 = 属性值</code> 或 <code>对象[属性名] = 属性值</code>的方式来添加或修改对象的属性值</li><li>如果属性名<strong>不存在</strong>，则为对象<strong>添加属性</strong></li><li>如果属性名<strong>存在</strong>，则相当于<strong>修改</strong>属性的值。</li></ul><pre><code>// 定义一个对象 dogvar dog = &#123;  name: &quot;小黑&quot;,  &quot;skin-color&quot;: &quot;黑色&quot;,&#125;;</code></pre></blockquote><p>dog.name &#x3D; “小红”; &#x2F;&#x2F; 修改属性值<br>dog[“skin-color”] &#x3D; “红色”; &#x2F;&#x2F; 修改属性值</p><blockquote><pre><code></code></pre></blockquote></li><li><p>删除对象属性</p><blockquote><ul><li>如果要删除某个属性，则使用<code>delete obj.属性</code></li></ul><pre><code>// 创建一个对象var dog = &#123;  name: &quot;小黑&quot;,  &quot;skin-color&quot;: &quot;黑色&quot;,  age: 18,&#125;;delete dog.name; // 删除属性delete dog[&quot;skin-color&quot;]; // 删除属性console.log(dog); // &#123;age: 18&#125;</code></pre></blockquote></li></ol><h3 id="四、对象方法的操作"><a href="#四、对象方法的操作" class="headerlink" title="四、对象方法的操作"></a>四、对象方法的操作</h3><blockquote><ul><li>如果对象的某个属性值是一个函数，则我们把他称为对象的方法</li><li>我们采用 <code>对象.属性名()</code> 或 <code>对象[属性名]()</code> 的方式来调用对象的方法</li></ul></blockquote><blockquote><pre><code>  var user = &#123;  name: &quot;清心  age: 18,  sayHello: function () &#123;    console.log(&quot;大家好，我是清心，永远18岁 ！&quot;);  &#125;,  &quot;to-sleep&quot;: function () &#123;    console.log(&quot;我正在睡觉&quot;);  &#125;,&#125;;user.sayHello(); // 大家好，我是清心，永远18岁 ！user[&quot;to-sleep&quot;](); // 我正在睡觉console.log(user.sayHello);//f()&#123;  console.log(&quot;大家好，我是清心，永远18岁 ！&quot;);  &#125;</code></pre></blockquote><blockquote><ul><li>属性名后加<code>()</code>是调用方法，不加括号是打印该方法</li><li>对象方法的修改，新增、删除和属性的操作方法是一样，不过我们一般不会对一个对象的方法去做这些操作。</li></ul></blockquote><ol start="2"><li>方法和函数的关系<blockquote><ul><li>方法也是函数，只不过方法是对象的 “属性” ，它需要用对象打点调用等方式调用</li><li>我们之前讲的 Math.random()随机函数，本质上 random 就是 Math 对象上的一个方法</li></ul></blockquote></li></ol><h3 id="五、对象的遍历"><a href="#五、对象的遍历" class="headerlink" title="五、对象的遍历"></a>五、对象的遍历</h3><blockquote><ul><li>我们使用<code>for....in ....</code>循环来遍历<strong>对象</strong></li><li>使用<code>for...in...</code>循环可以遍历对象的每个键</li><li><code>for...in...</code>只能遍历对象的<strong>非符号键属性</strong></li></ul></blockquote><ul><li>for…in…循环语句语法<blockquote><pre><code>// obj 要遍历的对象// key 循环变量，它会依次成为对象的每一个键// key 可以换成任何标识符，只是在长期的习惯中，大家习惯用key来表示对象的键，用来遍历for (var key in obj) &#123;console.log(&quot;对象obj的属性&quot; + key + &quot;的值是：&quot; + obj[key]);&#125;</code></pre></blockquote></li></ul><blockquote><ul><li>key是变量，它会依次成为对象的每一个键；</li><li>对象的属性名以变量的形式存储，则可以使用方括号的形式访问</li></ul></blockquote><ul><li><p>for…in…只能遍历对象的非符号键属性</p><blockquote><pre><code>var s = Symbol(&quot;符号属性&quot;);var obj = &#123;a: 1,b: 2,c: 3,[s]: &quot;我用for-in无法遍历&quot;, // 符号属性&#125;;for (var key in obj) &#123;console.log(key + &quot;:&quot; + obj[key]);&#125;</code></pre></blockquote></li><li><p>数组也是一个对象，他的<strong>属性名就是对应的索引下标</strong> 0,1,2…. 他也可以用 for…in 遍历</p><blockquote><pre><code>var arr = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;];for (var key in arr) &#123;console.log(key); // 0 1 2 3console.log(arr[key]); // A B C D&#125;//相当于：arr=&#123;  0:A  1:B  2:C  3:D&#125;</code></pre></blockquote></li></ul><h3 id="六、对象的深克隆与浅克隆"><a href="#六、对象的深克隆与浅克隆" class="headerlink" title="六、对象的深克隆与浅克隆"></a>六、对象的深克隆与浅克隆</h3><ol><li>复习<table><thead><tr><th>数据类型</th><th>举例</th><th>变量中存储内容</th><th>赋值</th><th><code>==</code>和<code>===</code>比较时</th></tr></thead><tbody><tr><td>基本数据类型</td><td>数字型、字符串型、布尔型、null 空类型、undefined类型</td><td>变量中存的是值</td><td>把值复制一份，来赋值</td><td><code>==</code> 比较值是否相等;<code>===</code> 比较值和类型</td></tr><tr><td>引用数据类型</td><td>对象、数组、函数</td><td>变量中存的是地址</td><td>把地址复制一份，来赋值</td><td>&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 比较的都是<strong>地址</strong></td></tr></tbody></table></li></ol><blockquote><p>如果要判断一个值是否为<code>null</code>或<code>undefined</code></p><ul><li>由于<code>null==undefined</code>，所以：</li></ul><pre><code>if(num==null || num==undefined) return;if(num==null) return;第一句可以写成第二句，意思相同</code></pre><blockquote><p>但是不能写成全等</p></blockquote></blockquote><ul><li><p>基本数据类型，赋值 和 &#x3D;&#x3D; 、&#x3D;&#x3D;&#x3D; 比较</p><blockquote><ul><li>基本数据类型在使用<code>==</code>来比较时，会自动进行隐式转换</li></ul><pre><code>// 基本数据类型var a = 10;var b = a;a = 20;console.log(a, b); // 20 ,10</code></pre></blockquote><p>&#x2F;&#x2F; &#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D;比较<br>console.log(“5” &#x3D;&#x3D; 5);<br>console.log(“5” &#x3D;&#x3D;&#x3D; 5);</p><blockquote><pre><code></code></pre></blockquote></li><li><p>引用数据类型，赋值 和 &#x3D;&#x3D; 、&#x3D;&#x3D;&#x3D; 比较</p><blockquote><ul><li>引用数据类型是进行地址的比较</li></ul><pre><code>var arr1 = [1, 2, 3];var arr2 = arr1;//arr1和arr2指向的是同一个地址arr1[0] = &quot;A&quot;;console.log(arr1); // [&#39;A&#39;, 2, 3]console.log(arr2); // [&#39;A&#39;, 2, 3]</code></pre></blockquote><p>&#x2F;&#x2F; &#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 比较<br>console.log(arr1 &#x3D;&#x3D; arr2); &#x2F;&#x2F; true<br>console.log(arr1 &#x3D;&#x3D;&#x3D; arr2); &#x2F;&#x2F; true<br>console.log([1, 2] &#x3D;&#x3D; [1, 2]); &#x2F;&#x2F; false<br>console.log([1, 2] &#x3D;&#x3D;&#x3D; [1, 2]); &#x2F;&#x2F; false</p><blockquote><pre><code></code></pre></blockquote></li></ul><ol start="2"><li>对象是引用类型<blockquote><p>对象是引用类型值，这意味着：</p><ul><li>不能使用<code>var obj2 = obj1</code>这样的语法克隆一个对象</li><li>使用<code>==</code> 或 <code>===</code> 进行对象的比较时，比较的也是两个对象是否指向堆内存中的<strong>同一个地址</strong></li></ul></blockquote></li></ol><ul><li><p>对象 &#x3D;&#x3D; 或 &#x3D;&#x3D;&#x3D;比较时</p><blockquote><pre><code>// 案例一var obj1 = &#123;a: 1,b: 2,c: 3,&#125;;var obj2 = &#123;a: 1,b: 2,c: 3,&#125;;</code></pre></blockquote><p>console.log(obj1 &#x3D;&#x3D; obj2); &#x2F;&#x2F; false<br>console.log(obj1 &#x3D;&#x3D;&#x3D; obj2); &#x2F;&#x2F; false</p><blockquote></blockquote><p>console.log({} &#x3D;&#x3D; {}); &#x2F;&#x2F; false<br>console.log({} &#x3D;&#x3D;&#x3D; {}); &#x2F;&#x2F; false</p><blockquote><pre><code></code></pre></blockquote></li><li><p>对象赋值</p><blockquote><ul><li>对象赋值，本质也是把对象存在栈内存中的地址赋值给另一个变量</li></ul><pre><code>var obj1 = &#123;a: 1,b: 2,&#125;;var obj2 = obj1;obj2.a = &quot;A&quot;;console.log(obj1); // &#123;a: &#39;A&#39;, b: 2&#125;console.log(obj2); // &#123;a: &#39;A&#39;, b: 2&#125;</code></pre></blockquote></li></ul><ol start="3"><li>对象的浅克隆<blockquote><ul><li>对象的浅克隆，本质也就是只能克隆对象的<strong>第一层</strong></li><li>我们创建一个新的空对象 <code>obj1</code>，然后<strong>遍历</strong>现在的对象 obj，把对象的属性全部遍历出来，添加 <code>obj</code> 中</li><li>基本数据类型，复制的是值，不会受原数组影响</li><li>数组和对象，复制的是地址，与原数组会相互影响</li></ul></blockquote></li></ol><blockquote><pre><code>// 用来克隆的对象var obj = &#123;  a: 1,  b: 2,  c: [&quot;你&quot;, &quot;我&quot;, &quot;他&quot;],&#125;;</code></pre></blockquote><p>&#x2F;&#x2F; 被克隆后的对象<br>var obj1 &#x3D; {};<br>&#x2F;&#x2F; 浅克隆对象<br>for (var key in obj) {<br>  obj1[key] &#x3D; obj[key]; &#x2F;&#x2F; 赋值<br>}</p><blockquote></blockquote><p>obj1.a &#x3D; “A”;<br>console.log(obj);<br>&#x2F;&#x2F;{a: 1, b: 2 , c: [“你”, “我”, “他”]}<br>console.log(obj1);<br>&#x2F;&#x2F;{a: “A”, b: 2 , c: [“你”, “我”, “他”]}</p><blockquote></blockquote><p>console.log(obj1.c &#x3D;&#x3D; obj.c); &#x2F;&#x2F; true<br>obj1[“c”].push(“哈哈”);&#x2F;&#x2F;改变了它的数据类型</p><blockquote></blockquote><p>console.log(obj);<br>&#x2F;&#x2F;{a: 1, b: 2 , c: [“你”, “我”, “他”]}<br>console.log(obj1);<br>&#x2F;&#x2F;{a: “A”, b: 2 , c: [“你”, “我”, “他”,”哈哈”]}</p><blockquote><pre><code></code></pre></blockquote><ol start="4"><li>对象的深克隆<blockquote><ul><li>深克隆：就是克隆对象的所有，不论对象的属性值是否是引用类型，都能将它们实现克隆</li><li>深克隆后原对象与克隆后的对象，克隆出来后长的一样，但本质两者都互相独立，互不干扰。<blockquote><p>以下对象克隆，只考对象{} 、数组[]、函数、基本数据类型，其它 es6 相关的类型暂时不考虑</p></blockquote></li></ul></blockquote></li></ol><p><strong>递归实现深克隆</strong></p><blockquote><ul><li>判断传过来的数据类是数组，还是对象，还是其它数据类型</li></ul><pre><code> function depClone(obj) &#123;  var result;  //判断第一层  if (Array.isArray(obj)) &#123;    //传过来的是数组    result = [];    for (var i = 0; i &lt; obj.length; i++) &#123;      result.push(depClone(obj[i]));    &#125;  &#125; else if (Object.prototype.toString.call(obj) == &quot;[object Object]&quot;) &#123;    //传过来的是对象    result = &#123;&#125;;    for (var key in obj) &#123;      result[key] = depClone(obj[key]);    &#125;  &#125; else &#123;    //传过来的是基本数据类型    return obj;  &#125;  return result;&#125;</code></pre></blockquote><h3 id="七、this-关键字"><a href="#七、this-关键字" class="headerlink" title="七、this 关键字"></a>七、this 关键字</h3><blockquote><blockquote><p>最好不要在全局作用域下声明一个叫<code>name</code>的变量，因为它在window里已经存在，是预留变量</p></blockquote></blockquote><ol><li>this 是什么 <blockquote><p>在函数中，其内部<code>this</code>指向把函数当成方法调用的<strong>上下文对象</strong></p></blockquote></li></ol><ul><li>什么是上下文 ？<blockquote><ul><li>垃圾分类，这是非常好的习惯，值得表扬。</li><li>随手关灯，这是非常好的习惯，值得表扬。</li></ul></blockquote></li></ul><blockquote><ul><li>这里的 “这” 字，就是这个语句的上下文。</li><li>就是说 “这” 这个代词的意思是需要通过这条中文语句的前言后语来判断</li><li><code>this</code>指向把<strong>函数当成方法</strong>调用的上下文对象，即<strong>谁来调用这个函数或方法，当前函数或方法体内的<code>this</code>就指向谁</strong>。</li><li>所以 this 的指向在定义时是不确定的，只有在调用的时候才能被确定</li><li>接下来，我们来看下面几个不同场景下，函数内部的 this 指向<ul><li>函数作为普通函数直接调用</li><li>函数作为对象的方法被调用</li><li>函数.call() 与 函数.apply()方式调用</li><li>函数作为构造器被调用</li></ul></li></ul></blockquote><ol start="2"><li>函数作为普通函数直接调用<blockquote><ul><li><code>函数名()</code> 的方式调用函数，其本质是<code>window.函数名()</code> 的方式在调用函数</li><li>所以这种方式调用函数，函数内部的 <code>this</code> 指向<code>window</code> 。 谁调用函数，this 就是谁<blockquote><p>所有<strong>全局作用域下</strong>声明的变量和函数，都是 window 对象的属性</p></blockquote></li></ul><pre><code>var a = 10;var b = 20;function sum() &#123;  return this.a + this.b;&#125;console.log(sum());</code></pre></blockquote></li></ol><ul><li>IIFE 立即执行函数<blockquote><ul><li>立即执行函数，本质也是 window 对象调用的，所以其内部 this 指向 window</li></ul><pre><code>(function()&#123;&#125;)()//表示立即执行该函数，执行完即刻销毁</code></pre></blockquote></li></ul><ol start="3"><li>函数作为对象的方法被调用<blockquote><ul><li>函数作为对象的方法被调用，this 指向这个对象，谁调用函数，this 就是谁</li></ul><pre><code>// 定义一个对象var dog = &#123;  name: &quot;小黑&quot;,  &quot;skin-color&quot;: &quot;黑色&quot;,  say: function () &#123; console.log(&quot;我叫&quot; + this.name + &quot;，因为我的毛是&quot; + this[&quot;skin-color&quot;]); console.log(this);  &#125;,&#125;;dog.say(); //  this 是 dog对象var say2 = dog.say;say2(); // this 是 window对象</code></pre></blockquote></li></ol><blockquote><ul><li>当代码执行到 <code>var say2 = dog.say</code> 时，本质是把函数当做<strong>值赋</strong>给了变量 <code>say2</code>，即</li></ul><pre><code>var say2 = function () &#123;  console.log(&quot;我叫&quot; + this.name + &quot;，因为我的毛是&quot; + this[&quot;skin-color&quot;]);  console.log(this);&#125;;</code></pre><ul><li>所以往后执行 say2() 时，本质是 window 对象调用了这个函数。</li></ul></blockquote><ol start="4"><li><p>数组<a href="">下标</a></p><blockquote><ul><li>数组（类数组对象）枚举出函数进行调用，this 指向的是这个<strong>数组（类数组对象）</strong></li><li>谁调用函数，this 就是谁</li></ul><pre><code>var arr = [  &quot;A&quot;,  2,  3,  function () &#123; console.log(this[0]);  &#125;,];arr[3](); // A 这里 函数是数组身上的一个属性console.log(arr); //打印出数组arrvar fn = arr[3];fn(); // undefined  这里的this是window</code></pre></blockquote></li><li><p>测试题</p></li></ol><ul><li><p>题1：</p><blockquote><pre><code>var obj1 = &#123;a: 1,b: 2,sum: function () &#123;  return this.a + this.b;&#125;,&#125;;var obj2 = &#123;a: 3,b: 4,sum: obj1.sum, // 这里只是完成简单的赋值操作&#125;;console.log(obj2.sum()); // 7// 相当于：var obj2 = &#123;a: 3,b: 4,sum: function () &#123;  return this.a + this.b;&#125;,&#125;console.log(obj2.sum());//obj2调用了函数，this是obj2</code></pre></blockquote></li><li><p>题2：</p><blockquote><pre><code>function add() &#123;var a = 1,  b = 2;return &#123;  // 将对作为返回值，返回  a: 10,  b: 20,  sum: function () &#123;    return this.a + this.b;  &#125;,&#125;;&#125;console.log(add().sum()); // 30//先执行add(),得到返回值：&#123; a: 10, b: 20, sum: function () &#123; return this.a + this.b; &#125;&#125;//返回的函数调用sum(),this指的就是该函数</code></pre></blockquote></li><li><p>题3：</p><blockquote><pre><code>var a = 1;var b = 2;function add() &#123;return this.a + this.b;&#125;var obj = &#123;a: 10,b: add(), // 该函数执行后才赋值给b，this是window  得出结果是 3sum: add,&#125;;var result = obj.sum();console.log(result); //13//也就是：var obj = &#123;a: 10,b: 3,sum: function add() &#123;return this.a + this.b;//obj调用的sum函数&#125;,&#125;;console.log(obj.sum());</code></pre></blockquote></li><li><p>题四：</p><blockquote><pre><code>var a = 1;var obj = &#123;a: 2,add: (function () &#123;  var a = this.a; // 立即执行函数的this是window，则this.a得到1  return function () &#123;    console.log(a + this.a);  &#125;;&#125;)(),&#125;;obj.add(); // 3//obj.add()首先得到返回函数return function () &#123;    console.log(a + this.a);</code></pre></blockquote></li></ul><p>&#x2F;&#x2F;第一个a根据作用域可知，等于上面的1；<br>&#x2F;&#x2F;是obj调用的add函数,所以this指obj,a&#x3D;2<br>    };</p><blockquote><pre><code></code></pre></blockquote><ol start="6"><li>call 与 apply 更改 this 指向<blockquote><ul><li>函数调用<code>call()</code>和 <code>apply()</code>方法，可以<strong>更改</strong> <code>this</code> 的指向，同时<strong>立即执行</strong></li><li><code>call()</code> 和 <code>apply()</code>方法中的<strong>第一个参数</strong>是一个<strong>对象</strong>，这个对象指向函数内部的 this</li><li>apply中的参数必须用方括号包裹</li></ul><pre><code>// obj 是一个对象，此时，函数内部的this指向了obj// 这种方式，类似于把函数当成了obj的方法来使用函数.call(obj, arg1, arg2, arg3);函数.apply(obj, [arg1, arg2, arg3]);</code></pre></blockquote></li></ol><blockquote><ul><li>我们来看一个案例，定义一个方法，用来统计数组中所有数字之和</li></ul><pre><code>var arr1 = [1, 2, 3, 4, 5];var arr2 = [5, 6, 7, 4, 3];</code></pre></blockquote><p>&#x2F;&#x2F; 函数 sum用来统计数组中所有元素之后<br>function sum() {<br>  var result &#x3D; 0;<br>  for (var i &#x3D; 0; i &lt; this.length; i++) {<br>    result +&#x3D; this[i];<br>  }<br>  return result;<br>}</p><blockquote></blockquote><p>console.log(sum.call(arr1));<br>console.log(sum.call(arr2));<br>console.log(sum.apply(arr1));<br>console.log(sum.apply(arr2));</p><blockquote><pre><code></code></pre></blockquote><ul><li>重点<blockquote><ul><li>某个函数或方法调用 call 时，等同于把方法或函数作为 call 的<strong>第一个参数的方法</strong>在调用。即：</li><li>函数.call(obj) 和 函数.apply(obj) 的方式，类似于把函数转换成了对象obj身上的方法来使用</li><li><code>fn.call(obj,arg1,arg2)   等同于 obj.fn(arg1,arg2)</code></li><li>但obj身上不会真的添加fn方法，只是类似于把fn当成obj的方法一样使用</li></ul></blockquote></li></ul><blockquote><pre><code>var obj = &#123;  a: 1,  b: 2,&#125;;function fn() &#123;  console.log(this.a + this.b); &#125;fn.call(obj);//fn.call(obj)相当于：var obj = &#123;  a: 1,  b: 2,  fn:function fn() &#123;  console.log(this.a + this.b); &#125;，&#125;;</code></pre></blockquote><ul><li>call 和 apply 的注意事项<blockquote><ul><li>如果 call 和 apply 的第一个参数<code>obj</code></li><li>当obj 是一个 <code>null</code> 或 <code>undefined</code> 时，其函数会自动将 this 替换为指向<strong>全局对象</strong></li><li>如果 obj 是一个<strong>原始值</strong>(基本数据类型)会被包装成一个对象</li></ul><pre><code>function fn() &#123;console.log(this);&#125;fn.call(null); //window &#123;&#125;fn.apply(undefined);//window &#123;&#125;fn.call(1);// Number &#123;1&#125;fn.call(&quot;abc&quot;);// String &#123;&quot;abc&quot;&#125;fn.call(true);// Boolean &#123;true&#125;</code></pre></blockquote></li></ul><ol start="7"><li>bind 函数<blockquote><ul><li>bind方法创建一个新的函数（简单理解为<strong>原函数的拷贝</strong>）</li><li>bind在使用时是返回一个新函数，需要接收后再调用</li><li>在bind被调时，这个<strong>新函数</strong>的this被指定为bind()的<strong>第一个参数</strong>。</li><li>其余参数将作为<strong>新函数的参数</strong>，供调用时使用。</li><li><code>var fn2 = fn.bind(thisArg, arg1, arg2, arg3);</code></li></ul></blockquote></li></ol><ul><li><p>bind 用法一： 改变 this 指向</p><blockquote><pre><code>var obj = &#123;a: 1,b: 2,c: 3,&#125;;function sum(a, b, c) &#123;console.log(this.a, this.b, c);&#125;// 这里的fn接收sum的拷贝函数，此时fn函数内部的this变成了objvar fn = sum.bind(obj, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;);//调用新函数fn();</code></pre><ul><li>不改变this时,thisArg可以填null或undefined</li></ul></blockquote></li><li><p>bind 用法二：创建一个拥有预设参数列表</p><blockquote><blockquote><p>也就是我们在第一次调用 bind 方法时，除了第一个参数外，后面还可以传递 <code>&gt;= 0</code> 个参数</p></blockquote><pre><code>var obj = &#123;a: 1,b: 2,c: 3,&#125;;var c = 5;function sum(a, b, c) &#123;console.log(a, this.b, c);&#125;// 创建一个函数，它拥有预设的第一个参数var fn = sum.bind(obj, &quot;A&quot;);fn(&quot;B&quot;, &quot;C&quot;);//补充参数，相当于(obj, &quot;A&quot;,&quot;B&quot;,&quot;C&quot;)</code></pre></blockquote></li><li><p>bind 返回的新函数，作为构造函数使用</p><blockquote><ul><li>如果 bind 返回的新函数作为<strong>构造函数</strong>，则会<strong>忽略</strong> thisArg 这个参数</li><li>也就是<strong>不更改</strong>原函数中 this，其作为构造函数使用，内部的 this 是 new 出来的实例对象</li></ul><pre><code>// 构造函数function Point(x, y) &#123;this.x = x;this.y = y;&#125;Point.prototype.getPosition = function () &#123;console.log(&quot;指向位置&quot; + this.x, this.y);&#125;;</code></pre></blockquote><p>var Fn &#x3D; Point.bind([], 1);</p><blockquote></blockquote><p>&#x2F;&#x2F; bind返回的新函数和调用的函数是两个函数，只是长得一样<br>console.log(Fn);<br>console.log(Fn &#x3D;&#x3D;&#x3D; Point); &#x2F;&#x2F; false<br>console.log(Fn.prototype &#x3D;&#x3D;&#x3D; Point.prototype); &#x2F;&#x2F; false</p><blockquote></blockquote><p>&#x2F;&#x2F; point1是Point的实例, 并不是Fn的实例,也不是[]的实例<br>var point1 &#x3D; new Fn(2);<br>console.log(point1); &#x2F;&#x2F; Point {x: 1, y: 2}<br>console.log(point1 instanceof Point); &#x2F;&#x2F; true<br>console.log(point1.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Point.prototype); &#x2F;&#x2F; true</p><blockquote></blockquote><p>&#x2F;&#x2F; point1是Point实例，所以point1能访问Point.prototype上的属性<br>point1.getPosition();</p><blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><blockquote><p>特别注意</p></blockquote><ul><li>我们返回的新函数，每一个函数，都有自己的 prototype</li><li>如何让新函数的 prototype 指向原函数的 prototype，两者相互独立呢？</li></ul></blockquote><ul><li><p>bind 注意事项</p><blockquote><p>如果 bind 的第一个参数 <code>thisArg</code> </p><ul><li>是一个 <code>null</code> 或 <code>undefined</code> 时，其函数会自动将this替换为指向<strong>全局对象</strong></li><li>是一个<strong>原始值</strong>会被包装成一个对象</li></ul><pre><code>var obj = &#123;a: 1,b: 2,c: 3,&#125;;function sum(a, b, c) &#123;console.log(this);&#125;var fn1 = sum.bind();var fn2 = sum.bind(null);var fn3 = sum.bind(1);fn1(3, 4);//windowfn2(3, 4);//windowfn3(3, 4);//Number&#123;1&#125;</code></pre></blockquote></li><li><p>bind总结</p><blockquote><ul><li><code>var fn2 = fn.bind(thisArg, arg1, arg2);</code></li><li>fn 调用 bind 方法，相当于 fn 被当成了 thisArg 对象身上的方法，即 thisArg.fn();</li><li>但是，函数调用 bind 方法，并不会立即执行 fn 函数，而是返回一个新的函数 fn2</li><li>当调用 fn2 时，相当于内部执行了 <code>thisArg.fn()</code>;</li></ul></blockquote></li></ul><ol start="8"><li>call、apply、bind 的区别和使用场景<blockquote><ul><li>call,apply和bind方法就是Function原型中的方法，所以所有的函数都可以使用这三个方法</li></ul></blockquote></li></ol><table><thead><tr><th></th><th>作用相同</th><th>传参方式不同</th><th>返回值不同</th></tr></thead><tbody><tr><td>call</td><td>用来改变 this 指向</td><td>第一参数是 thisArg，后续参数是一个参数列表</td><td>立即执行函数，返回值为原函数返回值</td></tr><tr><td>apply</td><td>用来改变 this 指向</td><td>第一参数是 thisArg,后续参数是包含一个或多个参数的数组</td><td>立即执行函数，返回值为原函数返回值</td></tr><tr><td>bind</td><td>用来改变 this 指向</td><td>第一参数是 thisArg，后续参数是一个参数列表</td><td>返回一个新函数，相当于原函数拷贝</td></tr></tbody></table><blockquote><blockquote><p>改变 this 指向，本质就是把某个函数当成对象的方法来使用。</p></blockquote></blockquote><ol start="9"><li>this 指向总结<table><thead><tr><th>函数的调用方式</th><th>this 指向</th></tr></thead><tbody><tr><td>对象.函数()</td><td>对象</td></tr><tr><td>函数名()</td><td>window</td></tr><tr><td>IIFE 立即执行函数</td><td>window</td></tr><tr><td>数组<a href="">下标</a></td><td>数组</td></tr><tr><td>call(对象,arg1,arg2)</td><td>对象</td></tr><tr><td>apply(对象,arry)</td><td>对象</td></tr><tr><td>bind(对象,arg1,arg2)</td><td>对象</td></tr><tr><td>定时器中的回调函数</td><td>window</td></tr><tr><td>DOM 事件处理函数</td><td>添加事件监听的元素</td></tr><tr><td>new 函数()</td><td>对象的实例</td></tr></tbody></table></li></ol><blockquote><blockquote><p><code>数组[下标]()</code>这种方式，数组就是一个对象，下标就是他的属性，所以<code>数组[下标]()</code>就是调用数组身上的方法</p></blockquote></blockquote><h3 id="八、构造函数与类"><a href="#八、构造函数与类" class="headerlink" title="八、构造函数与类"></a>八、构造函数与类</h3><blockquote><p>在学习构造函数之前，我们来思考一个问题，我们如何批量创建一批相似的对象（结构相似）？</p><ul><li>比如说，我们现在要批量创建下面这样一批对象，这些对象有相同的属性和方法，我们会如何创建<table><thead><tr><th>相似对象（人）</th><th>属性</th><th>方法</th></tr></thead><tbody><tr><td>小明</td><td>姓名：小明，年龄：22 岁，性别：男</td><td>自我介绍：大家好，我是小明，性别男，今年 22</td></tr><tr><td>小红</td><td>姓名：小红，年龄：32 岁，性别：女</td><td>自我介绍：大家好，我是小红，性别女，今年 32</td></tr><tr><td>小丽</td><td>姓名：小丽，年龄：43 岁，性别：女</td><td>自我介绍：大家好，我是小丽，性别女，今年 43</td></tr></tbody></table></li></ul></blockquote><blockquote><ul><li>根据之前学过的知识，可以一个一个来单独创建</li></ul><pre><code>// 创建对象小明var obj1 = &#123;  name: &quot;小明&quot;,  age: 22,  sex: &quot;男&quot;,  sayHello: function () &#123;    console.log(&quot;大家好，我叫&quot; + this.name + &quot;,&quot; + this.sex + &quot;今年&quot; + obj.age);  &#125;,&#125;;</code></pre><blockquote><p>显然是不合理的，如果我们要创建 100 个这样的相似对象，难道我们要写 100 次吗 ？</p></blockquote></blockquote><ol><li><p>工厂方法 - 批量创建对象</p><blockquote><ul><li>利用<strong>函数的封装特性</strong>来创建对象，只要调用下函数，就能产生一个类似的对象，我们把这种方式称为<strong>工厂模式</strong>。</li><li>因为他有点类似于工厂批量生产物品，把材料放到机器中，修改下参数，就能出来一个类似的物品。</li></ul><pre><code>function Person(name, age, sex) &#123;  var obj = &#123;&#125;;  obj.name = name;  obj.age = age;  obj.sex = sex;  obj.sayHello = function () &#123; console.log(   &quot;大家好，我叫&quot; + this.name + &quot;,&quot; + this.sex + &quot;,&quot; + &quot;今年&quot; + obj.age );  &#125;;  return obj;&#125;// 创建对象小明var obj1 = Person(&quot;小明&quot;, 22, &quot;男&quot;);console.log(obj1); //&#123;name: &#39;小明&#39;, age: 22,sex:&#39;男&#39;，sayHello:f&#125;obj1.sayHello(); //大家好，我叫小明，男，今年22</code></pre></blockquote><p>&#x2F;&#x2F; 用来创建狗对象的 函数<br>function Dog(name, age) {<br>  var obj &#x3D; {};<br>  obj.name &#x3D; name;<br>  obj.age &#x3D; age;<br>  return obj;<br>}<br>var dog &#x3D; Dog(“小黑”, 7);<br>console.log(dog); &#x2F;&#x2F;{name: ‘小黑’, age: 7}</p><blockquote><p>&#x2F;&#x2F;检测类型<br>console.log(typeof obj1); &#x2F;&#x2F; object<br>console.log(typeof dog); &#x2F;&#x2F; object</p><pre><code>&gt;工厂方式创建对象，看似完美，其实他还有一个很大的问题 !&gt;- 我们用 `typeof` 来检测两个对象的类型时，得到的都是 `Object`，也就是我们用这种方法创建出来的对象，我们是没有办法区分他们的具体类型。&gt;- 如果我们希望在类型检测时得到的是 Person 和 Dog 类型，那要如何办呢？这就需要用到我们接下来讲到的构建函数的方式创建对象</code></pre></blockquote></li><li><p>构造函数 - 创建对象</p><blockquote><ul><li>用<code>new</code>调用一个函数，这个函数就被称为构造函数，任何函数都可以是构造函数，只需要用new调用它。</li><li>构造函数：主要用来<strong>在创建对象时初始化对象</strong>， 即为对象成员变量赋初始值</li><li>构造函数的<strong>首字母需要大写</strong>，这是开发者约定的规范，并非说首字不大写就是错</li><li>声明一个变量接收不同参数的new函数<br><code>var p1 = new Person(&quot;小明&quot;, 22, &quot;男&quot;);</code></li></ul></blockquote></li><li><p>new 调用函数四步曲</p><blockquote><ul><li>第一步：会在函数体内<strong>自动</strong>创建一个新的空对象{} 即：<code>var obj = &#123;&#125;</code></li><li>第二步：函数体内的 this 被赋值为这个新对象, 即 <code>this = obj</code></li><li>第三步：从上往下，执行函数体内的代码，相当于给新创建的空对象 obj <strong>添加属性</strong></li><li>第四步：函数体内代码执行完，会<strong>自动返回</strong>创建的新对象 obj（所以构造函数体内不需要 return）<blockquote><p>提示：在第一步和第二步中间，其实还省略了一步：将新对象 obj 的__proto__指向构造函数的prototype属性</p></blockquote></li></ul></blockquote></li></ol><blockquote><pre><code> // 用来创建人对象的 函数 function Person(name, age, sex) &#123;   // 第一步：创建一个新对象 var obj=&#123; &#125;   // 第二步：把函数体内的this指向新对象 this=obj;   this.name = name;   this.age = age;   this.sex = sex;   // 第三步：从上往下执行代码，相当于给obj对象添加属性   // obj.name=name,obj.age=age,obj.sex=sex   // 第四步：代码执行完，自动返回obj这个对象，相当于return obj; &#125;</code></pre></blockquote><p> &#x2F;&#x2F; new调用函数<br> var p1 &#x3D; new Person(“小明”, 22, “男”);<br> console.log(p1); &#x2F;&#x2F;Person{name:’小明’，age:22,sex:’男’}<br> var p2 &#x3D; new Person(“小红”, 32, “女”);<br> console.log(p2); &#x2F;&#x2F;Person{name:’小红’，age:32,sex:’女’}</p><blockquote><pre><code>&gt;其实最后`p1 = this = obj`，也就是 p1 和 this 都指向 new 调用函数 内部新创建的对象 obj。</code></pre></blockquote><ol start="4"><li><p>构造函数中的 this 指向</p><blockquote><ul><li>构造函数中的 this，指向的是 new 调用函数 创建出来的新对象</li></ul></blockquote></li><li><p>构造函数注意事项</p><blockquote><ul><li>一定要记住：<strong>一个函数是不是构造函数，要看它是否用 new 调用</strong>，而至于名称首字母大写，完全是开发者的习惯约定</li><li>如果一个函数名首字母大写，但调用是没有用 new，而是<strong>直接调用</strong>，其不是构造函数，内部 this 指向 window</li></ul><pre><code>function People(name, age, sex) &#123;  this.name = name;  this.age = age;  this.sex = sex;  console.log(this);&#125;//直接调用，this指向windowPeople(&quot;arry老师&quot;, 18, &quot;男&quot;);//new调用,this指向新创建的对象var p1=new People(&quot;arry老师&quot;, 18, &quot;男&quot;);</code></pre></blockquote></li><li><p>构造函数的问题</p><blockquote><ul><li>构造函数虽然很有用，但也有他的问题存在。他的主要问题在于，其定义的方法会在<strong>每个实例</strong>上都创建一遍。</li><li>如果我们用这个构造函数创建出来 10 个实例，那这 10 个实例上都有相同的方法，这些相同的方法在创建实都会单独占用一定的内存空间，所以<strong>增大了内存的开销</strong>。</li><li>但是这些方法本质上是做的相同的事情，所以没必要定义那么多同名函数。</li></ul></blockquote></li></ol><ul><li>当然，我们可以把这些方法写在外面，然后在构造函数中引用他们，如下：<blockquote><pre><code>function Person(name, age, sex) &#123;this.name = name;this.age = age;this.sex = sex;this.sayHello = sayHello;&#125;</code></pre></blockquote>function sayHello() {<br>console.log(“大家好，我叫” + this.name + “,” + this.sex + “今年” + this.age);<br>}<blockquote></blockquote>var p &#x3D; new Person(“小明”, 32, “男”);<br>p.sayHello();<blockquote><pre><code>&gt;- 但这种做法，会**造成全局作用域的污染**。因为这些(函数)方法只是供这些对象来调用的。&gt;- 在 JS 中为每个函数提供了**原型**这个属性，后面我们可以通过原型的方实来解决。后面接下来就会学到。</code></pre></blockquote></li></ul><h3 id="九、类和实例（对象）"><a href="#九、类和实例（对象）" class="headerlink" title="九、类和实例（对象）"></a>九、类和实例（对象）</h3><ol><li>现实生活角度理解类和实例<blockquote><p><strong>什么是类</strong></p><ul><li>我们常说分门别类，其实就是根据事物的特点、性质将其分成各种<strong>门类</strong>。</li><li>这里的类<strong>并不指具体的东西</strong>，而是一类具有相同特点事物抽象的一个分类。</li><li>类好比一类物体的抽象出来的一个画像或模型。<br><strong>什么是实例</strong></li><li>实例可以理解为我们之前说的对象，他是一个实实在在，能摸得着，看得见的<strong>实物</strong>。</li><li>类可以理解为<strong>模型</strong>，那实例就是<strong>由模型制作出来的</strong>具体的一件东西。</li></ul></blockquote></li></ol><ul><li>区分类与实例<table><thead><tr><th>类</th><th>实例</th></tr></thead><tbody><tr><td>苹果、书包、人、动物、小猫、狗</td><td>这个苹果、小明的书包、清心、这条黑狗</td></tr></tbody></table></li></ul><ol start="2"><li><p>JS 角度来理解类和实例</p><blockquote><p><strong>什么是类</strong></p><ul><li>在 JS 中，类是用来<strong>描述</strong>对象会拥有那些属性和方法，但是并不具体指明属性的值。</li><li>JS 中的<strong>构造函数</strong>就好比是一个类，他只描述了这个类有那些属性和方法，但并不具体指明属性的值。<br><strong>什么是实例</strong></li><li>在 JS 中，实例就可以理解为 JS 中的对象，他有自己的属性和方法，同时有自己的<strong>属性值</strong></li><li>我们用 new 调用函数，本质就是创建了一个对象（实例化一个对象），我们称为对象实例化</li><li><strong>对象实例化</strong>： 是指将一个类实例化成对象,即用类创建对象的过程<blockquote><p>构造函数描述出属性和方法，new调用函数、赋值来创建不同实例</p></blockquote></li></ul></blockquote></li><li><p>创建一个球类和球对象</p><blockquote><ul><li>要求将创建好的球对象，添加到 body 中，在页面呈现出来。<table><thead><tr><th>类</th><th>属性</th><th>方法</th></tr></thead><tbody><tr><td>球</td><td>半径、颜色、透明度、坐标、DOM 元素</td><td>初始化，变色，运动</td></tr></tbody></table></li></ul><pre><code> // 构建函数,描述出对象和方法 // 对象：半径、颜色、透明度、坐标、DOM属性 // 方法：init()初始化将DOM插入到网页中、运动、改变颜色 function Ball(r, color, opacity, x, y) &#123;this.r = r;this.color = color;this.opacity = opacity;this.x = x;this.y = y;// 初始化小球，把球插入到页面中this.init = function () &#123;  // 创建一个真实的DOM球放在页面中展示  this.dom = document.createElement(&quot;div&quot;);  this.dom.style.width = this.r + &quot;px&quot;;  this.dom.style.height = this.r + &quot;px&quot;;  this.dom.style.borderRadius = this.r + &quot;px&quot;;  this.dom.style.backgroundColor = this.color;  this.dom.style.opacity = this.opacity;  //一个球要动起来，必须是个定位元素  this.dom.style.position = &quot;absolute&quot;;  this.dom.style.left = this.x + &quot;px&quot;;  this.dom.style.top = this.y + &quot;px&quot;;  // 将小球添加到body上  document.body.appendChild(this.dom); &#125;;  // 当我调用这个方法，就让小球动起来  this.move = function () &#123; this.dom.style.left = this.x + 250 + &quot;px&quot;; this.dom.style.top = this.y + 250 + &quot;px&quot;;  &#125;;  // 当我调用这个方法，就让小球变色  this.changeColor = function () &#123; this.dom.style.backgroundColor = &quot;skyblue&quot;;  &#125;;&#125;//new一个对象实例var ball = new Ball(100, &quot;pink&quot;, 0.5, 100, 100);ball.init(); // 初始化ball.changeColor(); // 变色ball.move(); // 移动</code></pre></blockquote></li></ol><blockquote><blockquote><ul><li>Javascript是<strong>基于对象</strong>（object-based）的语言，他<strong>并不是完全面向对象</strong>（object-oriented）语言。</li><li>java 、c++等是 “面向对象（object-oriented）” 语言</li></ul></blockquote></blockquote><h3 id="十、Object-构造函数"><a href="#十、Object-构造函数" class="headerlink" title="十、Object() 构造函数"></a>十、Object() 构造函数</h3><blockquote><p>Object 构造函数将给定的值包装为一个<strong>新对象</strong>。</p><ul><li>如果给定的值是<code>null</code>或<code>undefined</code>, 它会<strong>创建并返回</strong>一个<strong>空对象</strong>。</li><li>否则，它将返回一个和给定的值<strong>相对应</strong>的类型的对象。</li><li>如果给定值是一个<strong>已经存在</strong>的对象，则会返回这个已经存在的值（相同地址）。</li><li>语法：</li></ul><pre><code>new Object();new Object(value);</code></pre></blockquote><ul><li>创建一个新对象<blockquote><pre><code>var obj = new Object();console.log(obj); // &#123;&#125;obj.a = 1;obj.b = 2;console.log(obj); // &#123;a: 1, b: 2&#125;</code></pre></blockquote>&#x2F;&#x2F; 如果给定的值是<code>null</code>或 <code>undefined</code>, 它会创建并返回一个空对象<br>var obj1 &#x3D; new Object(null);<br>var obj2 &#x3D; new Object(undefined);<br>console.log(obj1); &#x2F;&#x2F; {}<br>console.log(obj2); &#x2F;&#x2F; {}<blockquote></blockquote>&#x2F;&#x2F; 给定值是基本数据类型  数字、字符串、boolean值<br>var strObject &#x3D; new Object(“字符串包装成一个对象”);<br>console.log(strObject); &#x2F;&#x2F;  String {‘字符串包装成一个对象’}<blockquote></blockquote>var numberObject &#x3D; new Object(11);<br>console.log(strObject); &#x2F;&#x2F; Number {11}<blockquote></blockquote>var booleanObject &#x3D; new Object(true);<br>console.log(strObject); &#x2F;&#x2F; Boolean {true}<blockquote></blockquote>&#x2F;&#x2F; 给定值本身就是一个对象，返回这个对象<br>var arr &#x3D; [1, 2, 3];<br>arrObject &#x3D; new Object(arr);<br>console.log(arr); &#x2F;&#x2F; [1, 2, 3]<blockquote><pre><code></code></pre></blockquote></li></ul><h3 id="十一、原型（prototype）和原型链"><a href="#十一、原型（prototype）和原型链" class="headerlink" title="十一、原型（prototype）和原型链"></a>十一、原型（prototype）和原型链</h3><ol><li><p>什么是原型（prototype）</p><blockquote><ul><li>任何函数都有一个<code>prototype</code>属性，<code>pr</code>ototype的翻译成英语，就是“原型”的意思</li><li><code>prototype</code>属性值是一个<strong>对象</strong>，这个对象中拥有一个<code>constructor</code>属性，这个属性指向<strong>这个函数本身</strong>。</li></ul><pre><code>function sum(a, b) &#123;  return a + b;&#125;</code></pre></blockquote><p>console.log(sum.prototype); &#x2F;&#x2F; {constructor: ƒ}<br>console.log(typeof sum.prototype); &#x2F;&#x2F; object<br>console.log(sum.prototype.constructor &#x3D;&#x3D;&#x3D; sum); &#x2F;&#x2F; true</p><blockquote><pre><code>&gt;对于普通函数， prototype属性没有任何用处，而 构造函数的 prototype 属性非常有用</code></pre></blockquote></li><li><p>构造函数的 prototype 属性</p><blockquote><ul><li>构造函数的prototype属性是它的<strong>实例的原型</strong></li><li>在构造函数的实例中有一个<strong>隐含</strong>的属性<code>__proto__</code>，指向该构造函数的原型<code>prototype</code><br><code>实例.__proto__===构造函数.prototype</code><img src="prototype属性.png"></li></ul></blockquote></li></ol><blockquote><blockquote><p>实例的__proto__属性，指向构造函数的原型 prototype，到底有什么用 ？</p><ul><li>答案就是：原型链查找</li></ul></blockquote></blockquote><ol><li>什么是原型链查找<blockquote><ul><li>构造函数的原型 <code>prototype</code> 对象，相当于一个<strong>公共的区域</strong>，所有<strong>同一个类的实例</strong>都可以访问到这个原型对象</li><li>所以我们可以将对象中<strong>共有的内容</strong>，统一设置到原型对象中。</li><li>当我们通过对象访问属性时，会按照属性的名称开始查找，他<strong>最先</strong>开始在对象<strong>实例本身</strong>来查找，如果在实例身上找到了，则返回该属性对应的值。</li><li>如果没有找到，会去<strong>原型对象</strong>中寻找，如果原型对象中有，则使用</li><li>如原型对象中没有，则继续去<strong>原型的原型</strong>中寻找，直到找到 <code>Object</code>对象的原型</li><li>Object 对象的原型没有原型，如果在 Object 对象的原型中依然没有，则返回 <code>undefined</code><blockquote><p>对象访问属性时，会沿着原型去查找，好比原型形成了一个链条，一层一层向上找，我们把这种现象称为 原型链查找 。</p></blockquote></li></ul><pre><code>function People(name, age, sex) &#123;  this.name = name;  this.age = age;  this.sex = sex;&#125;</code></pre></blockquote>&#x2F;&#x2F; 在构造函数的prototype上添加nationality属性<br>People.prototype.nationality &#x3D; “中国”;<blockquote></blockquote>&#x2F;&#x2F; 实例化<br>var cuihua &#x3D; new People(“翠花”, 18, “男”);<blockquote></blockquote>console.log(cuihua.nationality); &#x2F;&#x2F; 输出：中国，这个就叫做原型链查找<br>console.log(cuihua); &#x2F;&#x2F; {name: ‘翠花’, age: 18, sex: ‘男’}<blockquote></blockquote>&#x2F;&#x2F; 总结：当一个对象打点调用一个属性时，这个对象的身上并没有这个属性的时候，系统并不会直接报错，它会寻找这个对象的原型上有没有这个属性，如果能找到这个属性，则证明打点调用是可以的<blockquote><pre><code>&lt;img src=&quot;原型链查找.png&quot;&gt;</code></pre></blockquote></li></ol><blockquote><blockquote><p>JS 规定：一个对象（或一个实例）是可以<strong>打点调用</strong>原型上的属性的；因此：cuihua 是可以打点调用 nationality 属性的</p></blockquote></blockquote><ol start="4"><li><p>原型链的遮蔽效应</p><blockquote><ul><li>我们说当访问对象中的属性时，会<strong>先在自身</strong>找，如果找到就用自身的。</li><li>也就是说，如果自身有一个与原型对象上同名的属性，那自然在查找时，<strong>会以自身的为主</strong></li><li>这就相当于<strong>原型上的同名属性被遮蔽</strong>了，我们把这种现象称为原型链的遮蔽效应</li></ul><pre><code>function People(name, age, sex) &#123;  this.name = name;  this.age = age;  this.sex = sex;&#125;// 在构造函数的prototype(原型)上添加nationality属性People.prototype.nationality = &quot;中国&quot;;// 实例化var cuihua = new People(&quot;翠花&quot;, 18, &quot;男&quot;);// 再实例化一个mini对象var mini = new People(&quot;mini&quot;, 19, &quot;女&quot;);// 给mini本身添加nationality属性mini.nationality = &quot;美国&quot;;</code></pre></blockquote><p>console.log(cuihua.nationality); &#x2F;&#x2F; 输出：中国<br>console.log(cuihua); &#x2F;&#x2F; {name: ‘翠花’, age: 18, sex: ‘男’}</p><blockquote></blockquote><p>console.log(mini.nationality); &#x2F;&#x2F; 输出：美国，这就是原型链的遮蔽效应</p><blockquote><pre><code></code></pre></blockquote></li><li><p>hasOwnProperty</p><blockquote><ul><li><code>hasOwnProperty</code>方法可以检查对象是否真正 “<strong>自己拥有</strong>” 某属性或者方法</li><li>也就是这个属性或方法，是<strong>在实例本身</strong>身上，并不是在原型上。</li><li>如果是真正自身属性，返回 true，否则返回 false</li></ul><pre><code>function People(name, age, sex) &#123;  this.name = name;  this.age = age;  this.sex = sex;&#125;// 在构造函数的prototype(原型)上添加nationality属性People.prototype.nationality = &quot;中国&quot;;//new一个实例var cuihua = new People(&quot;翠花&quot;, 18, &quot;男&quot;);</code></pre></blockquote><p>console.log(cuihua.hasOwnProperty(“name”)); &#x2F;&#x2F; true<br>console.log(cuihua.hasOwnProperty(“age”)); &#x2F;&#x2F; true<br>console.log(cuihua.hasOwnProperty(“sex”)); &#x2F;&#x2F; true<br>console.log(cuihua.hasOwnProperty(“nationality”)); &#x2F;&#x2F; false</p><blockquote><pre><code></code></pre></blockquote></li><li><p>in</p><blockquote><ul><li>in 运算符<strong>只能</strong>检查某个属性或方法是否可以被对象访问，<strong>不能</strong>检查<strong>是否是自己的</strong>属性或方法</li><li>也就是不管这个属性是对象自身还是原型上的，都返回 true,找不到，则返回 false</li></ul><pre><code>function People(name, age, sex) &#123;  this.name = name;  this.age = age;  this.sex = sex;&#125;// 在构造函数的prototype(原型)上添加nationality属性People.prototype.nationality = &quot;中国&quot;;var cuihua = new People(&quot;翠花&quot;, 18, &quot;男&quot;);console.log(&quot;name&quot; in cuihua); // trueconsole.log(&quot;age&quot; in cuihua); // trueconsole.log(&quot;sex&quot; in cuihua); // trueconsole.log(&quot;nationality&quot; in cuihua); // true</code></pre></blockquote></li><li><p>在 prototype 添加方法</p><blockquote><ul><li>在之前的课程中，我们把方法都是直接写到了构造函数身上，这种方式会造成<strong>内存的浪费</strong>，因为每创建一个实例，就需要单独为同一个方法分配一块内存空间。</li><li>如果将方法写在构造函数的原型 prototype 上，就不会了，因为并不会创建一个实例，就为方法分配一块内存，所有实例都是共用原型上的同一个方法。</li></ul></blockquote></li></ol><ul><li><p>写在构造函数身上</p><blockquote><pre><code>function Count(a, b) &#123;this.a = a;this.b = b;// 方法写在构造函数中this.add = function () &#123;  return this.a + this.b;&#125;;&#125;</code></pre></blockquote><p>var c1 &#x3D; new Count(2, 3);<br>var c2 &#x3D; new Count(2, 3);<br>var c3 &#x3D; new Count(2, 3);<br>&#x2F;&#x2F; 指向内存中的不同地址，每个对象身上的方法都分配了一块内存<br>console.log(c1.add &#x3D;&#x3D;&#x3D; c2.add); &#x2F;&#x2F;  false<br>console.log(c2.add &#x3D;&#x3D;&#x3D; c3.add); &#x2F;&#x2F; false</p><blockquote><pre><code></code></pre></blockquote></li><li><p>写在构造函数的原型上</p><blockquote><pre><code>function Count(a, b) &#123;this.a = a;this.b = b;&#125;// 将方法，加在构造函数的原型上Count.prototype.add = function () &#123;return this.a + this.b;&#125;;</code></pre></blockquote><p>var c1 &#x3D; new Count(2, 3);<br>var c2 &#x3D; new Count(3, 3);<br>var c3 &#x3D; new Count(6, 3);<br>console.log(c1.add &#x3D;&#x3D;&#x3D; c2.add); &#x2F;&#x2F; true<br>console.log(c2.add &#x3D;&#x3D;&#x3D; c3.add); &#x2F;&#x2F; true;<br>console.log(c1.add(), c2.add(), c3.add()); &#x2F;&#x2F; 5 6 9</p><blockquote><pre><code></code></pre></blockquote></li></ul><ol start="8"><li><p>原型链的终点</p><blockquote><ul><li>原型对象也是对象，所以原型也有原型，最终所有的对象都会继承 Object 的原型</li><li>Object 原型的的原型是 <code>null</code>，即原型链的<strong>终点</strong></li></ul><pre><code>function People(name, age) &#123;  this.name = name;  this.age = age;&#125;</code></pre></blockquote><p>var p1 &#x3D; new People(“小丽”, 32);<br>console.log(People.prototype &#x3D;&#x3D;&#x3D; p1.<strong>proto</strong>);<br>console.log(People.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Object.prototype);<br>console.log(Object.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; null);</p><blockquote><pre><code>&lt;img src=&quot;原型链的终点.png&quot;&gt;</code></pre></blockquote></li><li><p>原型链</p></li></ol><ul><li><p>数组是<code>Array</code>类（构造函数）构造出来的，Array的原型指向 <code>Object</code>的原型</p><blockquote><pre><code>var arr = [123, 55, 33, 66, 88];</code></pre></blockquote><p>console.log(arr.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Array.prototype); &#x2F;&#x2F; true<br>console.log(Array.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Object.prototype);<br>console.log(arr.<strong>proto</strong>.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Object.prototype); &#x2F;&#x2F; true</p><blockquote><pre><code>&lt;img src=&quot;数组的原型链.png&quot;&gt;</code></pre></blockquote></li><li><p>验证 hasOwnProperty() 和 toString() 方法</p><blockquote><pre><code>function People(name, age, sex) &#123;this.name = name;this.age = age;&#125;</code></pre></blockquote><p>var cuihua &#x3D; new People();<br>console.log(cuihua.<strong>proto</strong>.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Object.prototype); &#x2F;&#x2F; true,说明cuihua的原型的原型是 Object.prototype<br>console.log(Object.prototype.<strong>proto</strong>); &#x2F;&#x2F; null，说明Object.prototype没有自己的原型了，即 它就是原型链的终点</p><blockquote></blockquote><p>console.log(Object.prototype.hasOwnProperty(“hasOwnProperty”)); &#x2F;&#x2F; true，说明hasOwnProperty方法是定义在Object.prototype<br>console.log(Object.prototype.hasOwnProperty(“toString”)); &#x2F;&#x2F; true，同理</p><blockquote><pre><code>&gt;每个对象，比如数组、字符串、数字等**都重写**了`toString()`方法</code></pre></blockquote></li></ul><ol start="10"><li>函数的原型链<blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote>console.log(fn.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Function.prototype); &#x2F;&#x2F; true<br>console.log(Function.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Object.prototype); &#x2F;&#x2F; true<br>&#x2F;&#x2F; 所有对象，本质都是构造函数构造出来的<br>console.log(Object.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Function.prototype); &#x2F;&#x2F; true<br>console.log(Object.<strong>proto</strong>); &#x2F;&#x2F; ƒ () { [native code] }<blockquote><pre><code></code></pre></blockquote></li></ol><blockquote><ul><li>Object也是一个函数，所有的函数都是Function构造出来的；所以Object是Function的一个实例，因此<code>Object.__proto__ === Function.prototype</code><img src="函数的原型链.png"></li></ul></blockquote><ol start="11"><li><p>instanceof</p><blockquote><ul><li>检查一个对象是否是一个类的<strong>实例</strong>。</li><li>底层机理:就是检查<strong>构造函数.prototype 属性</strong>是否在实例的<strong>原型链</strong>上（多少层都行）</li><li>所有对象都是 <code>Object</code> 的后代，所以任何对象与 Object 做 instanceof 检查时都会返回 true</li></ul><pre><code>function People(name, age) &#123;  this.name = name;  this.age = age;&#125;function Dog(name, age) &#123;  this.name = name;  this.age = age;&#125;</code></pre></blockquote><p>var p1 &#x3D; new People(“小丽”, 32);<br>var dog &#x3D; new Dog(“小黑”, 3);<br>console.log(p1 instanceof People); &#x2F;&#x2F;true<br>console.log(dog instanceof People); &#x2F;&#x2F;false<br>console.log(dog instanceof Dog); &#x2F;&#x2F;true<br>console.log(dog instanceof Object); &#x2F;&#x2F;true<br>console.log(p1 instanceof Object); &#x2F;&#x2F;true</p><blockquote></blockquote><p>console.log(p1.<strong>proto</strong>.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Object.prototype); &#x2F;&#x2F; true<br>console.log(dog.<strong>proto</strong>.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Object.prototype); &#x2F;&#x2F; true<br>console.log(People.prototype.<strong>proto</strong> &#x3D;&#x3D; Object.prototype); &#x2F;&#x2F; true<br>console.log(Dog.prototype.<strong>proto</strong> &#x3D;&#x3D; Object.prototype); &#x2F;&#x2F; true<br>console.log(Object.prototype.<strong>proto</strong>); &#x2F;&#x2F; null</p><blockquote><pre><code>&lt;img src=&quot;instanceof.png&quot;&gt;</code></pre></blockquote></li><li><p>类数组转换数组</p><blockquote><blockquote><p>常用来将类数组转换为数组的方法有</p></blockquote><ul><li><code>Array.prototype.slice.call(arguments);</code> &#x2F;&#x2F; 把slice当成arguments的一个方法<ul><li><code>Array.prototype.slice()</code>是返回一个包含所有元素的新数组</li><li><code>.call(arguments)</code>改变this指向；组合起来就是把arguments的所有元素塞到一个新数组里</li><li>如果arguments后有参数，表示start和end</li></ul></li><li><h2 id="Array-prototype-concat-apply-arguments-concat-是返回一个合并所有元素后的新数组-合并arguments和-apply-arguments-改变this指向"><a href="#Array-prototype-concat-apply-arguments-concat-是返回一个合并所有元素后的新数组-合并arguments和-apply-arguments-改变this指向" class="headerlink" title="Array.prototype.concat.apply([], arguments);- .concat([])是返回一个合并所有元素后的新数组,合并arguments和[]- .apply(arguments)改变this指向"></a><code>Array.prototype.concat.apply([], arguments);</code><br>- <code>.concat([])</code>是返回一个合并所有元素后的新数组,合并arguments和[]<br>- <code>.apply(arguments)</code>改变this指向</h2></li></ul></blockquote></li></ol><blockquote><pre><code>function sum(a, b, c) &#123;  var arr1 = Array.prototype.slice.call(arguments);  var arr2 = Array.prototype.concat.apply([], arguments);  console.log(arr1);  console.log(arr2);&#125;sum(1, 2, 3);//[1,2,3]//[1,2,3]</code></pre></blockquote><ol start="13"><li>手写 JS 的 slice 方法<blockquote><pre><code> /**</code></pre></blockquote></li></ol><ul><li>slice(start,end)方法的功能，返回值，注意事项</li><li>1、功能：从指定start下标开始复制数组中元素，添加到新数组中，到下标end结束，不包括end</li><li>2、返回值：查询到的元素组成的新数组</li><li>3、注意事项</li><li><ul><li>如果start和end为null 、undefind，和非数字类型，则start&#x3D;0</li></ul></li><li><ul><li>如果end 为null或其它类型，end&#x3D;0,如果end为undefined则表示数组长度</li></ul></li><li><ul><li>如果start或end为负值时，要确定好查询的起始于结束的位置</li></ul></li><li><ul><li>本质就是要把对应的负数转成正数对应下标 （难点，很多同学想不到）<br>*&#x2F;<br> Array.prototype._slice &#x3D; function (start, end) {<br> var result &#x3D; [];<br> &#x2F;&#x2F; null和数字类型转成 0或数字;其它都转为NaN，start赋值为0<br> start &#x3D; Number(start) !&#x3D;&#x3D; Number(start) ? 0 : Number(start);<br> &#x2F;&#x2F; 这里不用处理NaN的情况，因为结束是NaN时,本质上是什么也查不到，也就相当于0，不做任何查询<br> end &#x3D; end &#x3D;&#x3D;&#x3D; undefined ? arr.length : Number(end);<br> &#x2F;&#x2F; 如果start小于0，则确定start的查找位置<br> if (start &lt; 0) {<br> start &#x3D; -start &gt; this.length ? 0 : this.length + start;<br> }<br> &#x2F;&#x2F; 如果start小于0，则确定end的结束位置<br> if (end &lt; 0) {<br> end &#x3D; -end &gt; this.length ? 0 : this.length + end;<br> }<br> &#x2F;&#x2F; 循环遍历，从起始位置到结束位置，查找元素，添加到新数组中<br> &#x2F;&#x2F; 不用判断 start与end的大小关小，因为start如果大于end不会执行<br> for (var i &#x3D; start; i &lt; end; i++) {<br> result[result.length] &#x3D; this[i];<br> }<br> return result;<br> };<blockquote></blockquote> var arr &#x3D; [1, 9, 3, 4, 5];<br> arr2 &#x3D; arr._slice(NaN, “2”); &#x2F;&#x2F;[1,9]<br> arr3 &#x3D; arr.slice(true, NaN); &#x2F;&#x2F;[]<br> arr4 &#x3D; arr.slice(undefined, “4”); &#x2F;&#x2F;[1,9,3,4]<br> console.log(arr2);<br> console.log(arr3);<br> console.log(arr4);<blockquote><pre><code></code></pre></blockquote></li></ul></li></ul><ol start="14"><li><p>手写数组的 concat 方法</p><blockquote><pre><code>/*** concat(value,value2) 方法的功能，返回值，注意事项* 功能：将数组或值，被合并到一个新的数组中* 返回值：返回合并后组成的新数组* 注意事项：concat后的参数如果不是数组的情况，要考虑进去，不要漏掉*/Array.prototype._concat = function () &#123;  var newArr = [];  // 浅浅拷贝调用concat方法的数组  for (var i = 0; i &lt; this.length; i++) &#123;newArr.push(this[i]);  &#125;  for (var i = 0; i &lt; arguments.length; i++) &#123;if (!Array.isArray(arguments[i])) &#123;  newArr[newArr.length] = arguments[i];&#125; else &#123;  for (var j = 0; j &lt; arguments[i].length; j++) &#123;    newArr[newArr.length] = arguments[i][j];  &#125;&#125;  &#125;  return newArr;&#125;;</code></pre></blockquote><p>var arr &#x3D; [1, 2, 3];<br>&#x2F;&#x2F;   var arr2 &#x3D; arr._concat(1, [5, 6], [7], 9);<br>var arr2 &#x3D; [].concat(1, 2, 3);<br>console.log(arr2);</p><blockquote><pre><code></code></pre></blockquote></li><li><p>Object.prototype.toString()方法</p><blockquote><ul><li>该方法返回一个表示该对象的字符串。</li><li>返回值为”[object type]”，其中 type 是对象的类型</li></ul><pre><code>Object.prototype.toString([]); // &#39;[object Object]&#39;Object.prototype.toString(&#123;&#125;); // &#39;[object Object]&#39;Object.prototype.toString(function () &#123;&#125;); // &#39;[object Object]&#39;Object.prototype.toString(1); // &#39;[object Object]</code></pre></blockquote></li><li><p>经典应用：toString() 来获取每个对象的类型</p><blockquote><ul><li>通过<code>Object.prototype.toString.call(thisArg)</code>或</li><li><code>Object.prototype.toString.apply(thisArg)</code>来判断<code>thisArg</code>的类型</li><li>要检查的对象作为第一个参数，称为<code>thisArg</code></li></ul><pre><code> console.log(Object.prototype.toString.call([])); //&#39;[object Array]&#39; console.log(Object.prototype.toString.call(&#123;&#125;)); //&#39;[object object]&#39; console.log(Object.prototype.toString.call(function () &#123;&#125;)); //&#39;[object Function]&#39; console.log(Object.prototype.toString.call(null)); //&#39;[object Null]&#39; console.log(Object.prototype.toString.call(undefined)); //&#39;[object Undefined]&#39; console.log(Object.prototype.toString.call(true)); //&#39;[object Boolean]&#39; console.log(Object.prototype.toString.call(111)); //&#39;[object Number]&#39; console.log(Object.prototype.toString.call(&quot;aaa&quot;)); //&#39;[object string]&#39;</code></pre></blockquote></li></ol><blockquote><blockquote><p>温馨提示：</p></blockquote><ul><li>Array、String、Number、Boolean、RegExp、Date 等类型都重写了 toString()<ul><li>数组的toString()方法是将数组转成以<code>,</code>逗号分隔的字符串，同时返回该字符串</li></ul></li><li>所以实例本身调用 toString()方法，并不能达到检测类型的作用。</li><li>因为直接调用是调用自身的原型对象上已有 toString()方法,就不会调用到 Object 原型对象上的 toString()方法了</li></ul></blockquote><h3 id="十二、本章节经典面试题"><a href="#十二、本章节经典面试题" class="headerlink" title="十二、本章节经典面试题"></a>十二、本章节经典面试题</h3><ol><li><p>手写一个 getType 方法，可以判断出任意的<strong>数据类型</strong>（经典面试题）</p><blockquote><ul><li>getType 方法可以准确获取任意数据类型，如 number、string、boolean、null、undefined、object、array、function 、regexp</li><li>上面我们学习了<code>Object.prototype.toString()</code>方法，我们知道他可以判断出任意的类型，所以我们就用这个方法实现</li><li><code>indexOf()</code>方法,返回在数组中可以找到给定元素的第一个索引，如果不存在，则返回-1</li><li><code>slice()</code>提取原数组的一部分并返回一个新数组</li></ul><pre><code>function getType(x) &#123;  var originType = Object.prototype.toString.call(x); // &#39;[object type]&#39;  var spaceIndex = originType.indexOf(&quot; &quot;); // 查找空隙所在下标  var type = originType.slice(spaceIndex + 1, -1); // 从空格下标+1位位置查询字符串，查询到字符串最后一位  return type.toLowerCase(); // 将分格出来的类型，统一转成小写字&#125;var type = getType(2); //numbervar type1 = getType(&quot;ss&quot;); //stringvar type2 = getType(null); //nullvar type3 = getType(&#123;&#125;); //objectconsole.log(type, type1, type2, type3);</code></pre></blockquote></li><li><p>判断数据类型有那些方法，分别有什么区别 ？</p><table><thead><tr><th>判断数据类操作符或方法</th><th>功能</th><th>用法</th></tr></thead><tbody><tr><td>typeof</td><td>只能区分基本数据类型和引用数据类型;但不能区分 null、Object、array;typeof null得到object;typeof 检测函数得到 function</td><td>typeof a;</td></tr><tr><td>Array.isArray()</td><td>判断某个变量，是不是数组</td><td>Array.isArray(arr)</td></tr><tr><td>in</td><td>检查某个属性或方法<strong>是否可以被对象访问</strong>，不能检查是否是自己的属性或方法</td><td>‘name’ in obj</td></tr><tr><td>hasOwnProperty</td><td>检查对象是否真正 “自己拥有” 某属性或者方法</td><td>obj.hasOwnProperty(属性&#x2F;方法)</td></tr><tr><td>instanceof</td><td>检查一个对象是否是一个类的实例</td><td>实例 instanceof Object</td></tr><tr><td>constructor</td><td>判断实例对象是不是这个构造函数的实例</td><td>an1.constructor &#x3D;&#x3D; Anamil</td></tr><tr><td>Object.prototype.toString().call()</td><td>可以用来判断任意数据类型</td><td>Object.prototype.toString().call(X)</td></tr></tbody></table></li></ol><ul><li>constructor<blockquote><ul><li>构造函数的原型<code>prototype</code>上有一个属性 constructor，这个属性指向<strong>构造函数本身</strong></li><li>构造函数构造的<strong>实例</strong>可以直接访问<code>prototype</code>对象身上的属性和方法</li><li>即：<code>实例.constructor === 构造函数</code> 那就说明这个实例是这个构造函数的实例</li></ul></blockquote></li></ul><blockquote><blockquote><p>注意事项</p></blockquote><ul><li>constructor 是<strong>不稳定</strong>的，因为开发者可以重写 prototype，重写后，原有的 constructor 引用会<strong>丢失</strong>，需要我们<strong>重新指定</strong> constructor 的引用</li></ul></blockquote><blockquote><ul><li>未重写prototype时</li></ul><pre><code> function People(name, age) &#123;   this.name = name;   this.age = age; &#125; var p1 = new People(&quot;小明&quot;, 32); console.log(p1.__proto__ === People.prototype); console.log(People.__proto__ === Function.prototype); console.log(Function.prototype.__proto__ === Object.prototype); console.log(Object.prototype.__proto__ === null); console.log(Object.__proto__ === Function.prototype); console.log(People.prototype.constructor); //People console.log(p1.constructor); //People,说明这个p1是这个构造函数People的实例</code></pre><img src="未改写constructor.png"></blockquote><ul><li>重写prototype后<blockquote><pre><code> function F() &#123;&#125; F.prototype = &#123;&#125;; var p = new F(); console.log(p.constructor); //Object,改写后p1变成了Object的实例，因为&#123;&#125;所有对象都是Object构造出来的 console.log(p.__proto__.__proto__.constructor); //Object console.log(F.prototype.constructor); //Object console.log(F.prototype.__proto__.constructor); //Object</code></pre><img src="改写constructor.png"></blockquote></li></ul><blockquote><ul><li>当 <code>F.prototype = &#123;&#125;</code> 时， {} 是 new Object() 创建出来的实例</li><li>所以{}的proto指向<code>Object</code>构造函数的原型prototype,Object 的 prototype 对象上的属性 <code>constructor</code> 指 Object 构造函数</li></ul></blockquote><ol start="3"><li>ES6版本——手写 call 方法（经典面试题）<blockquote><ul><li>函数.call(obj),类似于把函数当成了obj 的方法来使用</li><li>我们就是要利用这个特点来实现 手写 call 函数</li></ul></blockquote></li></ol><ul><li><p>第一步：</p><blockquote><ul><li>call 方法，是函数身上的方法，所以肯定手写的 call 方法，是要绑定到函数的原型上。</li><li>因为构造函数的原型 prototype 对象，相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象<br><code>Function.prototype._call = function () &#123;&#125;;</code></li></ul></blockquote></li><li><p>第二步：搭建基础结构</p><blockquote><ul><li>call 方法的第一个参数是用来改变 this 指向（函数上下文），后面的参数相当于是传递给函数的参数,且个数不定，所以我们定义函数时，可以用写形参，最后用实参来接受传过来的参数</li></ul><pre><code>// context 表示传入的上下文对象Function.prototype._call = function (context) &#123;&#125;;&gt;```</code></pre></blockquote></li><li><p>第三步：把函数处理成 context 对象的方法</p><blockquote><ul><li>要主函数成为<code>context</code>的方法，我们需要为 context 对象添加一个属性 key，然后把这个属性指向这个函数</li><li><code>_call</code>方法内部的 this 就是调用_call方法的函数，即 <code>context[key]=this</code></li><li>当然要保证 context 对象新添加的属性 key 不能与对象原有的属性<strong>重名</strong>，如果重名就会对象原有的属性给覆盖了。</li><li>用 ES6 的 <code>Symbol</code> 来创建一个唯一的标识符。</li></ul><pre><code>Function.prototype._call = function (context) &#123;// 创建一个变量，用来做为context对象的属性// 防止属性名与context身上的属性重名，则我们需要用Symbol();方式来创建var key = Symbol();// 这里的this指向的是函数本身，把函数转换成context身上的方法context[key] = this;&#125;;</code></pre></blockquote></li><li><p>第四步：调用函数，并处理参数</p><blockquote><ul><li>调用_call方法的函数如果有对应的参数，我们需要在调用函数即<code>context[key]()</code>时，把对应的参数传递进去</li><li>我们不清楚调用 call 方法的函数，具体有多少个参数，（这里用 <code>arguments</code> 来处理相对麻烦，在 es5 版本中，我们来讲 arguments 的方式如何处理）所以我们用剩余参数<code>..args</code>来接受所有参数，接受过来的参数是以数组的形式组合在一起 ,即类传于<code>args=[1,2,3]</code></li><li>利用<code>ES6</code>的<strong>展开运算符</strong>，把args数组展开放在调用的函数后面，作为实参传递过去</li></ul><pre><code>// 调用函数，取得函数的返回结果var result = context[key](...args);// 返回函数执行后的返回值return result;</code></pre></blockquote></li><li><p>第五步：<strong>删除</strong>新创建的属性，保证 context 不被修改，恢复原貌</p><blockquote><pre><code>Function.prototype._call = function (context, ...args) &#123;// 创建一个变量，用来做为context对象的属性// 防止属性名与context身上的属性重名，则我们需要用Symbol();方式来创建var key = Symbol();// 这里的this指向的是函数本身，把函数转换成context身上的方法context[key] = this;// 调用函数，取得函数的返回结果var result = context[key](...args);// 这里要特别注意，我们不能修改context对象// 所以这里要把创建的属性，使用完，删除掉delete context[key];// 返回执行结果return result;&#125;;</code></pre></blockquote></li><li><p>第六步：考虑 context 的数据类型</p><blockquote><p>如果传递过来的第一个参数context，不是一个对象呢 ？</p><ul><li>如果传过的是<code>null、nudefined</code> ，此时 context 指向全局对象 <code>globalThis</code></li><li>如果是<strong>原始</strong>数据类型呢 ？context 要被转换成对应的<strong>包装对象</strong></li></ul><pre><code> // 如果传过来的是null 或undefind，则this指向window// null ==null 返回true  undefined==null也是true// globalThis 在浏览器中指向window ，在nodejs中指向globalif (context == null) context = globalThis;// 如果传过来的是基本数据类型（原始数据类型）// new Object(1) 转成 Number &#123;1&#125; ....if (typeof context !== &quot;object&quot;) context = new Object(context);</code></pre></blockquote></li><li><p>第七步：判断调用 call 方法的对象，是不是一个函数</p><blockquote><ul><li>按正常思维来思考，call 方法是在 <code>Function.prototype</code>上，只有函数才会调用到 call 方法。</li><li>在实际上，会有一些特殊的情况，一个对象也能访问到 call 方法。<br>比如：</li><li>如果一个对象是用 <code>Function.prototype</code> 构造出来的，那他这个对象就能调用 call 方法，但他不是一个函数</li><li>Object.create()方法用于创建一个新对象，使用现有的对象来作为新创建对象的原型（prototype）</li></ul><pre><code>var obj = Object.create(Function.prototype);// obj是一个对象，但他能调用call方法</code></pre></blockquote><p>console.log(obj.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Function.prototype); &#x2F;&#x2F; true</p><blockquote><pre><code>- 所以需要判断调用 call方法的对象，是不是一个函数</code></pre><p> &#x2F;&#x2F; 判断调用 call方法的对象，是不是一个函数<br>if (typeof this !&#x3D;&#x3D; “function”) {<br>  throw new TypeError(“Type Error !”);<br>}</p><pre><code></code></pre></blockquote></li><li><p>ES6版本——手写call方法</p><blockquote><pre><code>//实现：函数._call(obj,arg1,arg2,……)//context是指obj,参数通过...args传进去Function.prototype._call = function (context, ...args) &#123;// 判断调用 call方法的对象，是不是一个函数if (typeof this !== &quot;function&quot;) &#123;  throw new TypeError(&quot;Type Error !&quot;);&#125;</code></pre></blockquote><p>&#x2F;&#x2F; 如果传过来的是null 或undefind，则this指向window<br>&#x2F;&#x2F; null &#x3D;&#x3D;null 返回true  undefined&#x3D;&#x3D;null也是true<br>&#x2F;&#x2F; globalThis 在浏览器中指向window ，在nodejs中指向global<br>if (context &#x3D;&#x3D; null) context &#x3D; globalThis;<br>&#x2F;&#x2F; 如果传过来的是基本数据类型（原始数据类型）<br>&#x2F;&#x2F; new Object(1) 转成 Number {1} ….<br>if (typeof context !&#x3D;&#x3D; “object”) context &#x3D; new Object(context);</p><blockquote></blockquote><p>&#x2F;&#x2F; 创建一个变量，用来做为context对象的属性<br>&#x2F;&#x2F; 防止属性名与context身上的属性重名，则我们需要用Symbol();方式来创建<br>var key &#x3D; Symbol();<br>&#x2F;&#x2F; 这里的this指向的是函数本身，把函数转换成context身上的方法<br>context[key] &#x3D; this;<br>&#x2F;&#x2F; 调用函数，取得函数的返回结果<br>var result &#x3D; context<a href="...args">key</a>;<br>&#x2F;&#x2F; 这里要特别注意，我们不能修改context对象<br>&#x2F;&#x2F; 所以这里要把创建的属性，使用完，删除掉<br>delete context[key];<br>&#x2F;&#x2F; 返回执行结果<br>return result;<br>};<br>var a &#x3D; 0;<br>var obj &#x3D; {<br>  a: 1,<br>  b: 2,<br>  c: 3,<br>};<br>function sum(a, b, c) {<br>  console.log(this.a + b + c);<br>}<br>sum(5, 6, 7); &#x2F;&#x2F;13 this是window<br>sum._call(obj, 8, 9, 10); &#x2F;&#x2F;20 this是obj</p><blockquote><pre><code></code></pre></blockquote></li></ul><ol><li>ES5 版本-手写 Call 方法（经典面试题）<blockquote><p>在 ES5 中，是没有 Symbol 、 剩余参数 和 扩展运算符的，所以在 ES5 中，我们要如何处理下面两个问题 ？</p><ul><li>第一：如何创建出一个 context 对象身上没有的属性</li><li>第二：如何解决动态传参的问题</li></ul></blockquote></li></ol><ul><li><p>如何创建出一个 context 对象身上没有的属性名</p><blockquote><ul><li>随机生成属性名，</li><li>然后判断这个属性名是否在原来的上下文对象中存在,如果存在，重新生成，如果不存在就可以使用</li></ul><pre><code>// 随机生成一个属性名，保证context对象身上没有与之同名的属性var key=&quot;fn&quot;+Math.random()+new Date().getTime();while(context.hasOwnProperty(key))&#123;key=&quot;fn&quot;+Math.random()+new Date().getTime();&#125;</code></pre><blockquote><p><code>new Date().getTime()</code>用来获取当前时间的时间戳</p></blockquote></blockquote></li><li><p>Function 构造函数</p><blockquote><ul><li>ES5要解决动态传参的问题，就要利用<code>new Function()</code>动态创建函数来实现</li><li>语法：<code>var fn = new Function(arg1,arg2,arg3...,functionBody)</code></li><li>fn 为新创建出来的函数</li><li><code>arg1,arg2，arg3...</code> 都是一个字符串，为新创建出来的函数的<strong>形参</strong></li><li><code>functionBod</code>是Function()构造函数的<strong>最后一个参数</strong>，表示新创建出来的函数的<strong>函数体代码</strong>，如果<code>new Function()</code>中只一个参数，那这个函数就是函数体代码，这个新创建出来的函数没有参数。</li></ul><pre><code>// 以下代码相当于创建了匿名函数  sum= function anonymous(a,b)&#123;return a+b&#125;var sum = new Function(&quot;a&quot;, &quot;b&quot;, &quot;return a+b&quot;);sum(1, 2); // 3</code></pre></blockquote><p>&#x2F;&#x2F; 相当于创建了匿名函数<br>&#x2F;&#x2F; sayHello&#x3D;sayHell&#x3D;function anonymous(){console.log(“大家好，我是…”)}<br>var sayHello &#x3D; new Function(‘console.log(“大家好，我是…”)’);<br>sayHello(); &#x2F;&#x2F; 大家好，我是…</p><blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><ul><li><strong>实现动态传递参数</strong></li><li>fn 函数，除去第一个参数外，后面传过来多少个参数，就要把这些参数一一作为sum()的实参<br><strong>解决办法</strong></li><li>我们可以根据 argArr 的长度，结合 new Function 来动态创建如下函数</li></ul><pre><code>// 假设argArr的长度是2,则创建出如下函数function anonymous(argArr) &#123;  return sum(argArr[0], argArr[1]);&#125;</code></pre></blockquote><p>&#x2F;&#x2F; 假设argArr的长度为3，则创建出如下函数<br>function anonymous(argArr) {<br>  return sum(argArr[0], argArr[1], argArr[2]);<br>}</p><blockquote><pre><code></code></pre></blockquote><blockquote><ul><li>相当于，我在 fn 的函数体内，只要调用上面创建出来的函数，就可以达到动态传参，并执行 sum 函数。</li></ul><pre><code>function fn(context) &#123;  // 处理fn动态传过来的参数，除去第一个参数，你传几个，我这里就接受几个  // 处理办法，先把接受过来的实参，添加到一个数组中  var argArr = [];  for (var i = 1; i &lt; arguments.length; i++) &#123;    argArr.push(arguments[i]);  &#125;</code></pre></blockquote><p>  &#x2F;&#x2F; 假设 argArr长度为3 ，则下面代码<br>  &#x2F;&#x2F; 内部会执行  sum(argArr[0],argArr[1],argArr[2])<br>  return anonymous(argArr);<br>}</p><blockquote><pre><code></code></pre></blockquote><blockquote><ul><li>根据 argArr 长度，动态创建需要的函数<blockquote><ul><li>要构造的函数：</li></ul></blockquote></li></ul><pre><code>function fn(context,key,args)&#123;  return context[key](args[0],args[1],args[2]...)；//code拼接函数体&#125;</code></pre></blockquote><blockquote><blockquote><p>因为参数个数不定，所以用new function构造函数</p></blockquote><pre><code>function createFn(argArrLength) &#123;  var code = &quot;return sum(&quot;;  for (var i = 0; i &lt; argArrLength; i++) &#123;    if (i &gt; 0) &#123;      code += &quot;,&quot;;    &#125;    code += &quot;argArr[&quot; + i + &quot;]&quot;;  &#125;  code += &quot;)&quot;;</code></pre></blockquote><p>  return new Function(“argArr”, code);<br>}</p><blockquote><pre><code></code></pre></blockquote><blockquote><ul><li>最终我们只需要在 fn 函数内部调用 createFn 函数就可以实现了</li></ul><pre><code>function fn(context) &#123;  // 处理fn动态传过来的参数，除去第一个参数，你传几个，我这里就接受几个  // 处理办法，先把接受过来的实参，添加到一个数组中  var argArr = [];  for (var i = 1; i &lt; arguments.length; i++) &#123;    argArr.push(arguments[i]);  &#125;</code></pre></blockquote><p>  &#x2F;&#x2F; 假设 argArr长度为3 ，则下面代码<br>  &#x2F;&#x2F; 内部会执行  sum(argArr[0],argArr[1],argArr[2])<br>  return createFn(argArr.length)(argArr);&#x2F;&#x2F;立即执行函数<br>}</p><blockquote><pre><code></code></pre></blockquote><ul><li>实现动态传递参数 - 优化版<blockquote><pre><code>function createFn(argArrLength) &#123;var code = &quot;return sum(&quot;;for (var i = 0; i &lt; argArrLength; i++) &#123;  if (i &gt; 0) &#123;    code += &quot;,&quot;;  &#125;  code += &quot;argArr[&quot; + i + &quot;]&quot;;&#125;code += &quot;)&quot;;</code></pre></blockquote>return new Function(“argArr”, code);<br>}<blockquote><pre><code>以上方法还有很大的局限性- 如果 fn 内部调用的函数不是sum是add、min、max呢 ？- 那就得把最开始的`var code=&#39;return sum(&#39;` 修改成`var code=&#39;return add(&#39;`- 为了让所有代码都能通用，我们把上面函数再做简单修改，修改如下：</code></pre><p>function createFn(argArrLength) {<br>var code &#x3D; “return fnName(“;<br>for (var i &#x3D; 0; i &lt; argArrLength; i++) {<br>  if (i &gt; 0) {<br>    code +&#x3D; “,”;<br>  }<br>  code +&#x3D; “argArr[“ + i + “]”;<br>}<br>code +&#x3D; “)”;</p></blockquote>return new Function(“argArr”, “fnName”, code);<br>}<blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><ul><li>这样修改后，不管 fn 内部调用的函数名是什么，我们只需要在调用 createFn 函数时，把对应的函数名传进去就可以了。</li></ul><pre><code>return createFn(argArr.length)(argArr, add); // fn内调用add函数</code></pre></blockquote><p>return createFn(argArr.length)(argArr, min); &#x2F;&#x2F; fn内调用min函数</p><blockquote><pre><code></code></pre></blockquote><ul><li>总结：解决 call 方法内部动态传参问题<blockquote><ul><li>我们需要根据 argArr 的长度，来动态创建一个如下形式的函数</li></ul><pre><code>/*** 如果argArr长度为 3，则创建如下函数*  context 上下文对象，call中的第一个参数*  key 对象context的属性名*  argArrs参数数组*/function anonymous(context, key, argArr) &#123;return context[key](argArr[0], argArr[1], argArr[2]);&#125;</code></pre></blockquote>&#x2F;&#x2F; 如果argArr 长度为2，则创建如下函数<br>function anonymous(context, key, argArr) {<br>return context[key](argArr[0], argArr[1]);<br>}<blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><ul><li>创建上面函数的函数</li></ul><pre><code>/*** 此函数用来处理call内部动态传参问题，根据数组长度来创建函数* argsLength 传入的数组的长度*/function createFun(argsLength) &#123;  // 动态创建函数体执行代码  var code = &quot;return context[key](&quot;;  // 拼接参数  for (var i = 0; i &lt; argsLength; i++) &#123;    // 第二个开始加逗号    if (i &gt; 0) &#123;      code += &quot;,&quot;;    &#125;    code += &quot;argArr[&quot; + i + &quot;]&quot;;  &#125;  code += &quot;)&quot;;</code></pre></blockquote><p>  &#x2F;&#x2F;  return context<a href="args%5B0%5D,args%5B1%5D,args%5B2%5D....">key</a><br>  &#x2F;&#x2F; 函数前三个参数分别代表： 执行上下文   属性名    参数   context<a href="args">key</a><br>  &#x2F;&#x2F; 但args是数组，所以需要动态的来拼接，不能直接用<br>  return new Function(“context”, “key”, “argArr”, code);<br>}</p><blockquote><pre><code></code></pre></blockquote><blockquote><ul><li>完整版代码<br><code>函数.call(thisArg,arg1,arg2,arg3,...);</code></li></ul><pre><code>Function.prototype._call = function (context) &#123;  // context 表示传入的上下文对象，用实参来接受传过来的参数</code></pre></blockquote><p>  &#x2F;&#x2F; 判断调用 call方法的对象，是不是一个函数<br>  if (typeof this !&#x3D;&#x3D; “function”) {<br>    throw new TypeError(“Type Error !”);<br>  }<br>  if (context &#x3D;&#x3D; null) context &#x3D; globalThis;<br>  if (typeof context !&#x3D;&#x3D; “object”) context &#x3D; new Object(context);</p><blockquote></blockquote><p>  &#x2F;&#x2F; 随机生成一个属性名，保证context对象身上没有与之同名的属性<br>  var key &#x3D; “fn_” + Math.random() * new Date().getTime();<br>  while (context.hasOwnProperty(key)) {<br>    key &#x3D; “fn_” + Math.random() * new Date().getTime();<br>  }</p><blockquote></blockquote><p>&#x2F;&#x2F;把调用call的函数改成obj的方法，所以为context对象添加一个属性key<br>  context[key] &#x3D; this;</p><blockquote></blockquote><p>  &#x2F;&#x2F; 解决动态传参问题：<br>  &#x2F;&#x2F;1.获取参数组成的数组和参数个数<br>  var argArr &#x3D; [];<br>  var len &#x3D; arguments.length;<br>  &#x2F;&#x2F;索引为0的是this&#x2F;obj对象<br>  for (var i &#x3D; 1; i &lt; len; i++) {<br>    argArr[i - 1] &#x3D; arguments[i];<br>  }<br>  &#x2F;&#x2F; 2. 传参给createFun函数来解决<br>  var result &#x3D; createFun(len - 1)(context, key, argArr);<br>  &#x2F;&#x2F;立即执行createFun(len - 1)函数<br>  &#x2F;&#x2F;并把(context, key, argArr)传参给new Function函数，执行code代码</p><blockquote></blockquote><p>  delete context[key];<br>  return result;<br>};</p><blockquote></blockquote><p>&#x2F;&#x2F;传入实参len-1<br>function createFun(argsLength) {<br>  &#x2F;&#x2F; 动态创建函数体执行代码<br>  var code &#x3D; “return context[key](“;<br>  &#x2F;&#x2F; 拼接参数，第二个起是参数<br>  for (var i &#x3D; 0; i &lt; argsLength; i++) {<br>    if (i &gt; 0) {<br>      code +&#x3D; “,”;<br>    }<br>    code +&#x3D; “argArr[“ + i + “]”;<br>  }<br>  code +&#x3D; “)”;<br>  &#x2F;&#x2F;传入(context, key, argArr)参数，执行code函数体<br>  return new Function(“context”, “key”, “argArr”, code);<br>}</p><blockquote></blockquote><p>var obj &#x3D; {<br>  a: 1,<br>  b: 2,<br>};<br>&#x2F;&#x2F;函数名随意，可以不是sum<br>function sum(a, b, c) {<br>  console.log(this.a, b, c);<br>}<br>sum._call(obj, 7, 8, 9);&#x2F;&#x2F;1 8 9</p><blockquote><pre><code></code></pre></blockquote><ol><li>手写 apply 方法（经典面试题）<blockquote><ul><li>apply 和 call 方法一样，唯一的区别就在于，<strong>其后的参数是数组</strong></li><li>所以要判断下，传过来的值是不是数组类型，如果不是，则赋值一个空数组</li></ul></blockquote></li></ol><ul><li><p>ES6方法</p><blockquote><pre><code>Function.prototype._apply = function (context, args = []) &#123;// 判断传过来的是不是一个数组,不是就赋值一个空数组args = Array.isArray(args) ? args : [];// 如果传过来的是null 或undefind，则this指向window// null ==null 返回true  undefined==null也是true// globalThis 在浏览器中指向window ，在nodejs中指向globalif (context == null) context = globalThis;// 如果传过来的是基本数据类型（原始数据类型）// new Object(1) 转成 Number &#123;1&#125; ....if (typeof context !== &quot;object&quot;) context = new Object(context);</code></pre></blockquote><p>&#x2F;&#x2F; 创建一个变量，用来做为context对象的属性<br>&#x2F;&#x2F; 防止属性名与context身上的属性重名，则我们需要用Symbol();方式来创建<br>var key &#x3D; Symbol();<br>&#x2F;&#x2F; 这里的this指向的是函数本身，把函数转换成context身上的方法<br>context[key] &#x3D; this;<br>&#x2F;&#x2F; 调用函数，取得函数的返回结果<br>var result &#x3D; context<a href="...args">key</a>;<br>&#x2F;&#x2F; 这里要特别注意，我们并没有真正的在context对象上，创建了属性<br>&#x2F;&#x2F; 所以这里要把创建的属性，使用完，删除掉<br>delete context[key];<br>&#x2F;&#x2F; 返回执行结果<br>return result;<br>};</p><blockquote><pre><code></code></pre></blockquote></li><li><p>ES5方法</p><blockquote><pre><code>Function.prototype._call = function (context,args = []) &#123;// context 表示传入的上下文对象，用实参来接受传过来的参数</code></pre></blockquote><p>&#x2F;&#x2F; 判断传过来的是不是一个数组,不是就赋值一个空数组<br>args &#x3D; Array.isArray(args) ? args : [];</p><blockquote><p>&#x2F;&#x2F; 判断调用 call方法的对象，是不是一个函数<br>if (typeof this !&#x3D;&#x3D; “function”) {<br>throw new TypeError(“Type Error !”);<br>}<br>if (context &#x3D;&#x3D; null) context &#x3D; globalThis;<br>if (typeof context !&#x3D;&#x3D; “object”) context &#x3D; new Object(context);</p></blockquote><p>&#x2F;&#x2F; 随机生成一个属性名，保证context对象身上没有与之同名的属性<br>var key &#x3D; “fn_” + Math.random() * new Date().getTime();<br>while (context.hasOwnProperty(key)) {<br>key &#x3D; “fn_” + Math.random() * new Date().getTime();<br>}</p><blockquote></blockquote><p>&#x2F;&#x2F;把调用call的函数改成obj的方法，所以为context 对象添加一个属性key<br>context[key] &#x3D; this;</p><blockquote></blockquote><p>&#x2F;&#x2F; 解决动态传参问题：<br>&#x2F;&#x2F;1.获取参数组成的数组和参数个数<br>var argArr &#x3D; args;<br>var len &#x3D; arguments.length;</p><blockquote></blockquote><p>&#x2F;&#x2F; 2. 传参给createFun函数来解决<br>var result &#x3D; createFun(len - 1)(context, key, argArr);<br>&#x2F;&#x2F;立即执行createFun(len - 1)函数<br>&#x2F;&#x2F;并把(context, key, argArr)传参给new Function函数，执行code代码</p><blockquote></blockquote><p>delete context[key];<br>return result;<br>};</p><blockquote></blockquote><p>&#x2F;&#x2F;传入实参len-1<br>function createFun(argsLength) {<br>&#x2F;&#x2F; 动态创建函数体执行代码<br>var code &#x3D; “return context[key](“;<br>&#x2F;&#x2F; 拼接参数，第二个起是参数<br>for (var i &#x3D; 0; i &lt; argsLength; i++) {<br>if (i &gt; 0) {<br>  code +&#x3D; “,”;<br>}<br>code +&#x3D; “argArr[“ + i + “]”;<br>}<br>code +&#x3D; “)”;<br>&#x2F;&#x2F;传入(context, key, argArr)参数，执行code函数体<br>return new Function(“context”, “key”, “argArr”, code);<br>}</p><blockquote><pre><code></code></pre></blockquote></li></ul><ol start="6"><li>手写 bind 方法</li></ol><ul><li><p>核心功能</p><blockquote><ul><li>改变函数的this指向</li><li>返回一个新函数</li><li>可以提前预设参数</li></ul></blockquote></li><li><p>思路</p><blockquote><ul><li>bind 的方法在 Function 的原型上</li></ul><pre><code>Function.prototype._bind = function () &#123;&#125;;</code></pre><ul><li>bind 的第一个参数是更改原函数中的 this 指向，后面参数个数不限</li><li>改变原函数中 this，可以用原函数.apply(context)方法</li><li>预设参数：用 concat 来拼接两次调用函数传来参数</li><li>bind 函数的返回值，又是一个函数</li></ul><pre><code>Function.prototype._bind = function (context) &#123;return function () &#123;&#125;;&#125;;</code></pre></blockquote></li></ul><blockquote><ul><li>考虑 bind 返回的新函数作为构造函数的情况<ul><li>bind 的新函数作为构造函数，其内部 this 指向的还是原函数 new 出来的实例对象</li><li>同时内部相当于直接调用了<code>new 原函数()</code></li></ul></li></ul></blockquote><blockquote><ul><li>考虑调用 bind 的对象不是一个函数</li><li>如果 bind 的第一个参数 thisArg 是<ul><li>一个 null 或 undefined 时，其函数会自动将 this 替换为指向全局对象</li><li>如果 thisArg 是一个原始值会被包装成一个对象</li></ul></li></ul></blockquote><ul><li>完整代码<blockquote><pre><code>Function.prototype._bind = function (context) &#123;// null ==null 返回true  undefined==null也是true// globalThis 在浏览器中指向window ，在nodejs中指向globalif (context == null) context = globalThis;// 如果传过来的是基本数据类型（原始数据类型）// new Object(1) 转成 Number &#123;1&#125; ....if (typeof context !== &quot;object&quot;) context = new Object(context);</code></pre></blockquote>var self &#x3D; this; &#x2F;&#x2F; 保存原函数<br>&#x2F;&#x2F; 第一次传入的参数<br>var arg1 &#x3D; Array.prototype.slice.call(arguments, 1);<br>function fn() {<br>  &#x2F;&#x2F; 第二次传入的参数<br>  var arg2 &#x3D; Array.prototype.slice.call(arguments);<br>  &#x2F;&#x2F; 合并两次传入的参数<br>  var arg &#x3D; arg1.concat(arg2);<br>  &#x2F;&#x2F; 如果this指向的是fn的实例,则说明外部是以构造函数形式调用的<br>  if (this instanceof fn) {<br>return new self(…arg1, …arg2);<br>  } else {<br>return self.apply(context, arg);<br>  }<br>}<br>return fn;<br>};<blockquote></blockquote>function Point(x, y) {<br>this.x &#x3D; x;<br>this.y &#x3D; y;<br>&#x2F;&#x2F; console.log(this.x, this.y);<br>}<br>Point.prototype.toString &#x3D; function () {<br>return this.x + “,” + this.y;<br>};<blockquote></blockquote>var point &#x3D; Point._bind([], 0);<br>var p &#x3D; new point(5, 9);<br>console.log(p.toString());<blockquote></blockquote>&#x2F;&#x2F; 测试样例<br>var obj &#x3D; {<br>a: 1,<br>b: 2,<br>c: 3,<br>};<br>function sum(a, b, c) {<br>console.log(this.a, this.b, c);<br>}<br>var fn &#x3D; sum.bind(obj, 6);<br>fn(3, 4);<blockquote><pre><code></code></pre></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（七）</title>
      <link href="/2023/12/05/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%83%EF%BC%89/"/>
      <url>/2023/12/05/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、手写-flat-方法，指定深度，实现数组的扁平化"><a href="#一、手写-flat-方法，指定深度，实现数组的扁平化" class="headerlink" title="一、手写 flat 方法，指定深度，实现数组的扁平化"></a>一、手写 flat 方法，指定深度，实现数组的扁平化</h3><blockquote><ul><li><code>flat()</code>方法会按照一个<strong>可指定的深度</strong>递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</li></ul></blockquote><ul><li><p>我们首先来看下 JS 中数组的 flat 方法</p><blockquote><ul><li><code>arr.flat(层数)</code></li></ul><pre><code>var arr = [0, 1, 2, [3, [4, 5], 6], 7, 8, 9];var arr1 = arr.flat(); // 默认将数组展平1层console.log(arr1); //  [0, 1, 2, 3, [4, 5], 6, 7, 8, 9]</code></pre></blockquote><p>var arr2 &#x3D; arr.flat(2); &#x2F;&#x2F; 将数组展平2层<br>console.log(arr2); &#x2F;&#x2F; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</p><blockquote><pre><code></code></pre></blockquote></li><li><p>手写<code>flat</code>方法源码</p><blockquote><ul><li>可以用for循环，也可以用forEach</li><li>由于嵌套了两个函数，所以在第一层一定要<strong>自己调用</strong>第二层的函数</li><li>注意为什么要n–、n++</li></ul></blockquote></li></ul><blockquote><pre><code>function flat(arr, n) &#123;var newArr = [];//for循环遍历function fn(arr, n) &#123;  //for循环遍历数组的每一个元素  for (var i = 0; i &lt; arr.length; i++) &#123;    //如果是数组，则再次进入函数    if (Array.isArray(arr[i])) &#123;      //用n控制层数，一层代表进入一次本if语句      if (n &lt;= 0) &#123;        //层数用完,直接把该数组塞进新数组        newArr.push(arr[i]);      &#125; else &#123;        //有次数，每进来一次就展开一层，进一次减一次        n--; //n-1后会直接成为后面fn的实参        fn(arr[i], n);        n++; //为了不影响同一层级数组的展开次数      &#125;    &#125; else &#123;      //如果不是数组，则加入新数组      newArr.push(arr[i]);    &#125;  &#125;&#125;</code></pre></blockquote><p>&#x2F;&#x2F;forEach方法<br>function fn(arr) {<br>  &#x2F;&#x2F;for循环遍历数组的每一个元素<br>  arr.forEach(function (el) {<br>    if (Array.isArray(el)) {<br>      &#x2F;&#x2F;用n控制层数，一层代表进入一次本if语句<br>      if (n &lt;&#x3D; 0) {<br>        &#x2F;&#x2F;层数用完,直接把该数组塞进新数组<br>        newArr.push(el);<br>      } else {<br>        &#x2F;&#x2F;有次数，每进来一次就展开一层，进一次减一次<br>        n–; &#x2F;&#x2F;n-1后会直接成为后面fn的实参<br>        fn(el, n);<br>        n++; &#x2F;&#x2F;为了不影响同一层级数组的展开次数<br>      }<br>    } else {<br>      &#x2F;&#x2F;如果不是数组，则加入新数组<br>      newArr.push(el);<br>    }<br>  });<br>}<br>&#x2F;&#x2F;自己调用fn函数<br>fn(arr, n);<br>return newArr;<br>}<br>var arr &#x3D; [0, 1, 2, [3, [4, 5], 6], 7, [8, [ [9], 10]]] ;<br>console.log(flat(arr, 1));</p><blockquote><pre><code></code></pre></blockquote><h3 id="二、将一个数组旋转-k-步"><a href="#二、将一个数组旋转-k-步" class="headerlink" title="二、将一个数组旋转 k 步"></a>二、将一个数组旋转 k 步</h3><blockquote><ul><li>将数组<code>[1, 3, 5, 7, 9, 11, 13]</code>旋转 K 步</li></ul></blockquote><ol><li><p>审题：理解题目的意思</p><blockquote><p>假设 k&#x3D;4 ，即旋转 4 步</p><ul><li>第一步，得到数组 <code>[ 13, 1, 3, 5, 7, 9, 11 ]</code></li><li>第二步，得到数组 <code>[ 11, 13, 1, 3, 5, 7, 9 ]</code></li><li>第三步，得到数组 <code>[ 9 , 11, 13, 1, 3, 5, 7]</code></li><li>第四步，得到数组 <code>[ 7, 9, 11, 13，1, 3, 5]</code><br>即数组旋转 4 步后，得到数组[ 7, 9, 11, 13，1, 3, 5]</li></ul></blockquote></li><li><p>解题思路</p></li></ol><ul><li><p>方法1：去尾插头</p><blockquote><ul><li>每旋转一步，就把最后一个元素<strong>删除</strong>并<strong>调到最前面</strong></li><li>删除最后一个元素：<code>.pop</code></li><li>把元素填充到最前面<code>.unshift</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">rotate1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//检验输入值</span><span class="token comment" spellcheck="true">//arr是否为数组</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i &lt; k 有隐式转换，所以不用检测k是否为数字</span><span class="token comment" spellcheck="true">//判断如果数组长度为0，或k不存在，则直接返回原数组</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//考虑k为负数、小数、k的长度大于数组长度的情况</span>k <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>k <span class="token operator">%</span> arr<span class="token punctuation">.</span>length <span class="token operator">></span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//for循环</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> item <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">rotate1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li><li><p>方法2：拆分数组，然后拼接</p><blockquote><ul><li>要旋转k步，就把倒数k个元素组成数组，调到最前面</li><li>把最后k个元素组成数组：<code>.slice</code></li><li>把剩余元素组成一个数组：<code>.slice</code></li><li>数组拼接：<code>.concat</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">rotate1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//检验输入值</span><span class="token comment" spellcheck="true">//arr是否为数组</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i &lt; k 有隐式转换，所以不用检测k是否为数字</span><span class="token comment" spellcheck="true">//判断如果数组长度为0，或k不存在，则直接返回原数组</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//考虑k为负数、小数、k的长度大于数组长度的情况</span>k <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>k <span class="token operator">%</span> arr<span class="token punctuation">.</span>length <span class="token operator">></span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取出倒数k个元素</span><span class="token keyword">var</span> item1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取出剩余元素</span><span class="token keyword">var</span> item2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//组成新数组</span><span class="token keyword">return</span> item1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>item2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">rotate1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li></ul><ol start="3"><li>复杂度分析<blockquote><ul><li>方法1：时间复杂度是 O(n<sup>2</sup>) 、空间复杂度 O(1)， 为什么呢？<ul><li>因为<code>unshift</code>相当于一个for循环，每新增一个元素，其他所有元素的索引都会变化</li><li>而所定义的变量都是基本数据类型，输出单值；与输入量无关</li></ul></li></ul></blockquote></li></ol><blockquote><ul><li>方法2：时间复杂度是 O(1)、空间复杂度是 O(n)<ul><li>没有用到for循环，执行次数是可数的</li><li>定义两个数组，并且所需要的内存空间与输入量成正比</li></ul></li></ul></blockquote><ol start="4"><li>性能测试</li></ol><ul><li><p>测试得出结果的时长</p><blockquote><pre><code>// 输入量要比较大var arr = [];for (var i = 0; i &lt; 100 * 1000; i++) &#123;arr.push(i);&#125;</code></pre></blockquote><p>console.time(“rotate”);<br>rotateArr(arr, 4000);<br>console.timeEnd(“rotate”);</p><blockquote><pre><code></code></pre></blockquote></li><li><p>对比结果</p><blockquote><ul><li>随着数据规模量变大和旋转次数的增多，方法2的耗时变化不大，但方法1的耗时巨增。</li><li>在前端领域是重时间轻空间的，所以我们肯定首先思路 1</li></ul></blockquote></li></ul><h3 id="三、字符串中括号匹配是否正常"><a href="#三、字符串中括号匹配是否正常" class="headerlink" title="三、字符串中括号匹配是否正常"></a>三、字符串中括号匹配是否正常</h3><blockquote><p>判断一个字符串中的括号{} [] ()是否匹配正常，这是一个非常经典的面试题。</p></blockquote><ol><li><p>审题：理解题目的意思</p><blockquote><ul><li>字符串1：<code>a&#123;(b&#123;c[1,2,3]&#125;)&#125;</code>的匹配是正常的</li><li>字符串2：<code>a&#123;(b&#123;c[1,2,(3)&#125;]</code>的匹配是错的</li></ul></blockquote></li><li><p>栈</p><blockquote><p>这个问题本质是在考查什么呢 ？</p><ul><li>他是在考你理不理解<strong>栈</strong>这种数据结构，如果你会，那这个题就很容易做了。</li><li>所以我们先来了解下，栈这种数据结构，然后再回过头来看，这道题如何解。</li></ul></blockquote></li></ol><ul><li><strong>什么是栈</strong><blockquote><ul><li>栈是一种<strong>先进后出</strong>的数据结构，要弄明白什么是栈，我们先举一个生活中的例子来帮助大家理解</li><li>假如你现在有一个长长的圆筒，圆筒的一端是封闭的，另一端是开口，现在往圆筒底部放气球，那先放的是不是在圆筒的底部，后放的是不是在靠近圆筒的位置，如下图：<img src="栈.jpg"></li></ul></blockquote></li></ul><blockquote><ul><li>我们现在要从圆筒中取出气球，那我们是不是得<strong>先取离圆筒出口最近的</strong>一个，即取球时的顺序正好和放的时候的顺序是<strong>反</strong>的。</li><li>我们把圆筒比喻从栈，那<strong>放气球</strong>的过程叫入栈(压栈)，<strong>拿气球</strong>的过程叫<strong>出栈</strong>；</li><li>圆筒的底部称为<strong>栈底</strong>，圆筒出口的第一个气球位置叫<strong>栈顶。</strong></li></ul></blockquote><blockquote><p>总结：</p><ul><li>栈是什么：栈是一种<strong>先进后出</strong>的数据结构（逻辑层面）</li><li><strong>入栈</strong>：进栈时，先进去的在底部，后进去的在栈顶</li><li><strong>出栈</strong>：出栈时，先进去的后出，后进去的先出</li></ul></blockquote><ul><li><p>数组演示入栈和出栈</p><blockquote><ul><li>如果我们把<strong>数组想象成一个栈结构</strong>，最左边是栈底，最先放入元素，最右边是栈顶</li><li>入栈：相当于 <code>push</code> 元素时，从左往右放入元素</li><li>出栈：相当于 <code>pop</code> 删除数据，从最右边的第一个元素开始删</li></ul><pre><code>// 声明一个空数组，用来当成栈var arr = [];</code></pre></blockquote><p>&#x2F;&#x2F; 向数组中添加元素<br>for (var i &#x3D; 0; i &lt; 6; i++) {<br>arr.push(i); &#x2F;&#x2F; 入栈<br>console.log(arr);<br>}</p><blockquote></blockquote><p>&#x2F;&#x2F; 取出数组中的元素<br>for (var i &#x3D; 0; i &lt; 6; i++) {<br>arr.pop(); &#x2F;&#x2F; 出栈<br>console.log(arr);<br>}</p><blockquote><pre><code></code></pre></blockquote></li><li><p><strong>栈和数组的关系</strong></p><blockquote><ul><li><strong>本质上</strong>栈和数组完全不是一个层面上的东西，是不能拿 来做比较的</li><li>栈：是一种<strong>逻辑结构</strong>，是一种<strong>理论模型</strong>，他是抽象出来的一种结构。</li><li>数组：数组是一种<strong>物理结构</strong>，是实实在在<strong>存在的</strong>，可能用来操作的和存储数据的，同时还提供了相关的 API，让我们来操作数组。<blockquote><p>我们有很多种方式来实现栈这种结构来存储和取数据等，其中数组就可以实现栈这种结构来存储和操作数据。</p></blockquote></li></ul></blockquote></li></ul><ol start="3"><li>利用栈结构思想来解题<blockquote><ul><li>我们可以用 <code>for</code> 循环来遍历字符串中的每一个字符串</li><li>声明一个空数组</li><li>遇到左括号 <code>&#123; ( [</code>就压栈，存入数组中</li><li>遇到右括号<code>] ) &#125;</code> ，就判断栈顶是否与当前括号匹配，匹配就<strong>出栈</strong>，删除该括号，接着查看下一个符号<blockquote><p>因为右括号只能与离自己最近的左括号匹配，不会间隔其他括号，所以只需逐个排除</p></blockquote></li><li>最后判断栈中数据的 <code>length</code> 长度是否为 0，如果不为 <code>0</code>，则不匹配，为 0 就匹配成功<blockquote><p>一旦有一个括号不匹配，整个数组就是不匹配的</p></blockquote></li></ul></blockquote></li></ol><blockquote><img src="符号匹配.jpg"></blockquote><ol start="4"><li>代码实现</li></ol><ul><li><p>粗糙版</p><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">matchStr</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先转为字符串</span>str <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果长度为0，则直接返回true</span><span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义新数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//for循环,遍历字符串的每个元素</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//遇到左括号就存入/压栈</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>    str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"&amp;#123;"</span> <span class="token operator">||</span>     str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"["</span> <span class="token operator">||</span>     str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"("</span><span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>    str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"&amp;#125;"</span> <span class="token operator">||</span>     str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"]"</span> <span class="token operator">||</span>     str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">")"</span><span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> arrTop <span class="token operator">=</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span>arrTop <span class="token operator">==</span> <span class="token string">"&amp;#123;"</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"&amp;#125;"</span><span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token punctuation">(</span>arrTop <span class="token operator">==</span> <span class="token string">"["</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"]"</span><span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token punctuation">(</span>arrTop <span class="token operator">==</span> <span class="token string">"("</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">")"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果不匹配，直接返回false，也就意示着整个字符串括号不匹配</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">return</span> arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p> var str &#x3D; “a{(b{c[1,2,3]})}”;<br> var str1 &#x3D; “a{(b{c[1,2,(3)}]”;<br> console.log(matchStr(str)); &#x2F;&#x2F;true<br> console.log(matchStr(str1)); &#x2F;&#x2F;false</p><blockquote><pre><code></code></pre></blockquote></li><li><p>完善版</p><blockquote><pre><code>function matchStr1(str) &#123;//先转为字符串str = str + &quot;&quot;;// 如果长度为0，则直接返回trueif (str.length === 0) return true;//定义新数组var arr = [];// 定义一个变量用来放左括号的字符串var leftSymbols = &quot;&#123;[(&quot;;// 定义一个变量用来放右括号的字符串var rightSymbols = &quot;)]&#125;&quot;;//for循环,遍历字符串的每个元素for (var i = 0; i &lt; str.length; i++) &#123;//遇到左括号就存入/压栈if (leftSymbols.includes(str[i])) &#123;  arr.push(str[i]);&#125; else if (rightSymbols.includes(str[i])) &#123;  var arrTop = arr[arr.length - 1];  if (isMatch(arrTop, str[i])) &#123;    arr.pop();  &#125; else &#123;    return false;  &#125;&#125; &#125;// 如果arr长度为0，说明全部匹配成功，返回true，不匹配就返回falsereturn arr.length === 0;&#125;// 检测栈顶元素与当前右括号元素是否匹配function isMatch(left, right) &#123;if (left === &quot;&#123;&quot; &amp;&amp; right === &quot;&#125;&quot;) return true;if (left === &quot;[&quot; &amp;&amp; right === &quot;]&quot;) return true;if (left === &quot;(&quot; &amp;&amp; right === &quot;)&quot;) return true;return false;&#125;</code></pre></blockquote><p>var str &#x3D; “{[]}”;<br>console.log(matchStr1(str)); &#x2F;&#x2F;true<br>var str1 &#x3D; “a{(b{c[1,2,(3)}]”;<br>console.log(matchStr1(str1)); &#x2F;&#x2F;false</p><blockquote><pre><code></code></pre></blockquote></li></ul><ol start="5"><li>算法复杂度分析<blockquote><ul><li>时间复杂度 O(n)</li><li>整个过程就一次 <code>for</code> 循环，其内部的 <code>includes</code> 判断，其遍历次数不受输入量的影响，一直是 3 次</li></ul></blockquote></li></ol><blockquote><ul><li>空间复杂度 O(n)</li><li>主要是要用一个变量 <code>arr</code> 来存储<strong>入栈</strong>的数据，其大小<strong>不会完全</strong>受输入量的影响，但是输入量大，也是有一定影响的，所以定为 O(n)</li></ul></blockquote><h3 id="四、找出一个数组中和为-n-的两个数"><a href="#四、找出一个数组中和为-n-的两个数" class="headerlink" title="四、找出一个数组中和为 n 的两个数"></a>四、找出一个数组中和为 n 的两个数</h3><blockquote><p>给出一个有序的递增数组，找出数组中和为 n 的两个数的所有情况</p></blockquote><ol><li><p>审题</p><blockquote><p>如：</p><ul><li>找出数组<code>[1,3,5,7,10,13,15,20,22,25]</code>中和为 20 的两个数的所有情况</li><li>满足条件的有两组：5 和 15 是一组，7 和 13 是一组</li></ul></blockquote></li><li><p>解题思路</p><blockquote><ul><li>方法一：<strong>嵌套循环</strong>，找到一个数，然后和数组中的其它数都加一遍，如果和为 20，则就保存这两个数</li><li>方法二：利用<strong>单层 for 循环+双指针</strong>来实现。</li></ul></blockquote></li><li><p>方法一：两层 for 循环嵌套</p><blockquote><ul><li>最基础思想：每一个数与数组的每个元素相加遍历一遍</li><li>优化：<ul><li>每一次循环不用从第一个数开始加，而是从<code>i+1</code>开始；第一，按照题目要求不能和自己加；第二，在前一轮循环中外层的数已经和本次循环的数加过了</li><li>每一次内层循环的终点是上一次符合要求的下标</li></ul></li></ul></blockquote></li></ol><blockquote><pre><code>function findNumber(arr, n) &#123;  var result = []; // 用来存入符合要求的元素  //检查数组  if (!Array.isArray(arr)) return result;  //检查数组  if (isNaN(n)) return result;  var len = arr.length - 1;  var maxLen = arr.length; // 记录上一次找到的元素的下标，确定下次查找的范围  for (var i = 0; i &lt; arr.length; i++) &#123;    for (var j = i + 1; j &lt; maxLen; j++) &#123;      var sum = arr[i] + arr[j];      if (sum == 20) &#123;        var obj = &#123;&#125;;        obj.a = arr[i];        obj.b = arr[j];        result.push(obj);        maxLen = j; // 因为是升序，所以下次查找的范围，肯定要小于第一次找到的元素下标        break; // 找到就退出      &#125;    &#125;  &#125;  return result;&#125;var arr = [1, 3, 5, 7, 10, 13, 15, 20, 22, 25];console.log(findNumber(arr, 20));</code></pre></blockquote><ol start="4"><li>方法二：双指针</li></ol><ul><li><p>指针：</p><blockquote><ul><li>在汉语里，指钟表、仪器上面指示时间和度数的针</li><li>在程序中，指针就是一个<strong>变量</strong>，相当于保持了对某一数据的引用</li><li>比如，你定义了两个变量，分别保存数组中的两个不同的元素，就相当于定义了两个指针，分别用来指向数组中的不同元素。</li></ul></blockquote></li><li><p>双指针解题思路</p><blockquote><ul><li>我们以查找数组 arr &#x3D; <code>[1,3,5,7,10,13,15,20,22,25]</code>中和为 <code>20</code> 的两个数的所有情况为例来讲解</li><li>这是一个递增的数组 arr，我们定义两个变量<code>i=0</code> ;<code>j=数组长度-1</code>，从数组的头尾开始<ul><li>如果<code>arr[i] + arr[j] &gt; 20</code> 则 <code>j--</code></li><li>如果<code>arr[i] + arr[j] &lt; 20</code> 则<code>i++</code></li><li>如果<code>arr[i] + arr[j] = 20</code>则找到了一组满足要求的数，保存<code>arr[i]</code>和<code>arr[j]</code>，同时<code>i++</code>,<code>j--</code>，继续查找</li></ul></li><li>当 <code>i = j</code> 时，两者重合，就没有查找的必要，所以当<code>i &lt; j</code>时，一直查找</li></ul><pre><code>function findNumber(arr, n) &#123;var result = []; // 用来存入符合要求的元素//检查数组if (!Array.isArray(arr)) return result;//检查数组if (isNaN(n)) return result;len = arr.length - 1;var i = 0;var j = len;while (i &lt; j) &#123;  if (arr[i] + arr[j] &gt; n) &#123;    j--;  &#125; else if (arr[i] + arr[j] &lt; n) &#123;    i++;  &#125; else &#123;    var obj = &#123;&#125;;    obj.a = arr[i];    obj.b = arr[j];    result.push(obj);    i++;    j--;  &#125;&#125;return result;&#125;var arr = [1, 3, 5, 7, 10, 13, 15, 20, 22, 25];console.log(findNumber(arr, 20));</code></pre></blockquote></li></ul><ol start="5"><li>算法复杂度分析</li></ol><ul><li>时间复杂度<blockquote><p>第一种方式：</p><ul><li>时间复杂度介于 O(n) 与 O(n<sup>2</sup>) 之间，如果查找的两数之后比较大，则每次要遍历到数且的最后面才能找到对应的数，如果查找的两数之后较小，则时间复杂度就低，因为很快就找到，并且后面的查找范围也会相应索小<br>第二种方式：</li><li>时间复杂度为 O(n)</li></ul></blockquote></li><li>空间复杂度<blockquote><ul><li>两者的空间复杂度都为 O(1) ，其内存占用，并不因为 arr 增大而成倍成大。</li></ul></blockquote></li></ul><h3 id="五、二分法找查数组的的某个元素"><a href="#五、二分法找查数组的的某个元素" class="headerlink" title="五、二分法找查数组的的某个元素"></a>五、二分法找查数组的的某个元素</h3><blockquote><p>我们要查找<strong>有序</strong>数组<code>[1,3,4,5,7,8,9,12,15,18,30,32,45]</code>中元素值为 15 的元素的下标。</p></blockquote><ol><li><p>审题：理解题目的意思</p><blockquote><ul><li>比如，要找到数组中元素为 5 的下标，则 5 的下标是 3</li><li>比如，要找到数组中元素为 9 的下标，则 9 的下标是 6</li></ul></blockquote></li><li><p>解题思路</p></li></ol><ul><li><p>思路一：for 循环遍历查找<br>最简单的方式，就是通过一次 for 循环的遍历，拿当前值与数组中的每个值一个一个做比较，如果全等，则就返回当前数组中元素的下标</p></li><li><p>思路二：二分查找</p><blockquote><ul><li>每一次都从剩下元素的中间位置开始查找。</li></ul></blockquote></li></ul><ol start="3"><li>二分查找思路和规律<blockquote><ul><li>我们每一次都要从<strong>中间位置</strong>查找，所以我们需要有办法得到中间位置元素</li><li>我们定义三个变量 <code>startIndex</code>、<code>endIndex</code>、<code>midIndex</code> 分别来记录当前的起始、结束、中间下标</li><li>刚开始 <code>startIndex</code> 和 <code>endIndex</code> 的值是知道的，<code>startIndex = 0</code>, <code>endIndex = arr.length - 1</code></li><li>通过公式 <code>midIndex = Math.floor((starIndex+endIndex/2))</code> ，得到<strong>中间元素下标</strong>，获取中间元素</li></ul></blockquote></li></ol><blockquote><ul><li>如果，<strong>当前值 &gt; 中间值</strong> ，则下一轮在中间值<strong>右边</strong>部分的中间查找，这时<ul><li>startIndex &#x3D; midIndex + 1;</li><li>endIndex值不变</li><li>midIndex &#x3D; Math.floor((startIndex+midIndex)&#x2F;2)</li></ul></li></ul></blockquote><blockquote><ul><li>如果，<strong>当前值 &lt; 中间值</strong> ，则下一轮在中间值的左边部分中间查找，这时<ul><li>startIndex 不变</li><li>endIndex &#x3D; midIndex - 1;</li><li>midIndex &#x3D; Math.floor((startIndex+midIndex)&#x2F;2)</li></ul></li></ul></blockquote><blockquote><ul><li>如果，<strong>当前值 &#x3D;&#x3D;&#x3D; 中间值</strong> ，则找到，返回midIndex ，即元素下标</li></ul></blockquote><blockquote><ul><li>如果，一轮找下来 ，当midIndex &#x3D;&#x3D;&#x3D; endIndex时还找不到元素，则说明当前值不在数组中。</li></ul></blockquote><ol start="4"><li><p>二分法 + while 循环代码实现</p><blockquote><ul><li>上面要重复循环做相同的事，但是我们<strong>并不能确定具体的循环次数</strong>，所以这里我们不用 for 循环，选用<strong>while 循环</strong>，只要<code>startIndex &lt;= endIndex</code>，就可以一直循环下</li></ul><pre><code>//如果没找到就返回-1function findIndex(arr, num) &#123;  //检测数组  if (!Array.isArray(arr)) return -1;  //检测数字  if (isNaN(num)) return -1;  var len = arr.length;  var startIndex = 0;  var endIndex = len - 1;  while (startIndex &lt;= endIndex) &#123; var midIndex = ((startIndex + endIndex) / 2) &gt;&gt; 0; var midvalue = arr[midIndex]; if (num &gt; midvalue) &#123;   startIndex = midIndex + 1; &#125; else if (num &lt; midvalue) &#123;   endIndex = midIndex - 1; &#125; else &#123;   return midIndex; &#125;  &#125;  return -1;&#125;var arr = [1, 3, 4, 5, 7, 8, 9, 12, 15, 18, 30, 32, 45];console.log(findIndex(arr, 15));</code></pre></blockquote></li><li><p>二分 + 递归实现</p><blockquote><blockquote><p>这里还要考虑传过来的参数 <code>startIndex</code>和<code>endIndex</code>的类型处理，参考手写的slice方法来处理，（在面向对象原型和原型链那里），两者代码实现上一模一样</p></blockquote><pre><code>function findIndex(arr, num, startIndex, endIndex) &#123; //检测数组 if (!Array.isArray(arr)) return -1; //检测数字 if (isNaN(num)) return -1; //假如没有传入startIndex和endIndex if (startIndex == null) startIndex = 0; if (endIndex == null) endIndex = arr.length - 1; if (startIndex &gt; endIndex) return -1; var midIndex = ((startIndex + endIndex) / 2) &gt;&gt; 0; var midValue = arr[midIndex]; if (num &gt; midValue) &#123;return findIndex(arr, num, midIndex + 1, endIndex); &#125; else if (num &lt; midValue) &#123; return findIndex(arr, num, startIndex, midIndex - 1);  &#125; else &#123; return midIndex;  &#125;&#125;var arr = [1, 3, 4, 5, 7, 8, 9, 12, 15, 18, 30, 32, 45];var result = findIndex(arr, 9, 0, 15);console.log(result);</code></pre></blockquote></li><li><p>算法复杂度分析</p><blockquote><ul><li>二分法+while 和 二分+递归 的时间复杂度都是<code>O(logn)</code>，空间复杂度都是<code>O(1)</code>级别</li><li>但循环要比递归在<strong>性能上</strong>更好，因为递归在内部会一直调用函数，所以会更消耗性能。</li><li>递归代码逻辑更清晰</li></ul></blockquote></li></ol><blockquote><blockquote><ul><li>只要是有序查找(有序数组)，则必定考虑必二分法 ！</li><li>只要是二分查找，时间复杂度必包含 <code>O(logn)</code></li></ul></blockquote></blockquote><h3 id="六、求字符串中连续最多的字符，以及次数"><a href="#六、求字符串中连续最多的字符，以及次数" class="headerlink" title="六、求字符串中连续最多的字符，以及次数"></a>六、求字符串中连续最多的字符，以及次数</h3><blockquote><ul><li>求以字符串<code>aaabbccddaaaaaffffdddd</code>中，连续出现最多的字符及字数 （以<strong>最先出现</strong>的为主）</li></ul></blockquote><ol><li><p>解题思路</p><blockquote><ul><li>方法一：for 循环嵌套 + 跳步思想来解决</li><li>方法二：for 循环 + 双指针</li></ul></blockquote></li><li><p>方法一： for 循环嵌套+跳步</p><blockquote><ul><li>count 用来<strong>临时存储</strong>连续相同字符出现的次数</li><li>定义变量 var obj &#x3D; {char:’’,len&#x3D;0} 用来保存连续出现最多的字符及次数</li></ul></blockquote></li></ol><blockquote><ul><li>用两层 for 循环来遍历元素，取出每一个元素，与原字符串做比较<ul><li>如果相等，则统计次数加 1，即 <code>count++</code></li><li>如果不相等，则把当前统计的次数与<code>obj.len</code>作比较</li><li>如果<code>obj.len &gt; count</code> ，则更新 <code>count</code> 的值，同时更新 <code>i 和 j</code> 的值，开始下一个字符的比较</li></ul></li></ul></blockquote><blockquote><blockquote><p>要特别注意</p></blockquote><ul><li>最后一次比较，如果<strong>最后的字符</strong>是多个连续相同字符，那比较结果相等时，也是要<strong>更新数据</strong>的</li><li>如果字符串中只有一个字符时，其第一次比较也就是最后一次比较，两都也是相等，也要更新数据</li></ul><pre><code>function findContinuousChar(str) &#123;  // 不管传入的是啥，统一转成字符串  str = str + &quot;&quot;;  // obj用来存储连续出现字符最多的字符和次数  var obj = &#123;    char: &quot;&quot;,    len: 0,  &#125;;  // 如果字符串长度为0  if (str.length === 0) return obj;  // 临时记录当前连续字符的长度,最少出现1次  var count = 0;  for (var i = 0; i &lt; str.length; i++) &#123;    // 每一次循环，重置count的值为0    count = 0;    for (var j = i; j &lt; str.length; j++) &#123;      if (str[i] === str[j]) &#123;        count++;      &#125;      // 如果比较到数组的最后一个元素是相等的，也要更新数据      if (str[i] !== str[j] || j === str.length - 1) &#123;        if (obj.len &lt; count) &#123;          obj.char = str[i];          obj.len = count;        &#125;        // 写在外面，否则会进入死循环        if (j &lt; str.length - 1) &#123;          i = j - 1;        &#125;        break; // 不相等或最后一个元素，退出for循环      &#125;    &#125;  &#125;  return obj;&#125;</code></pre></blockquote><p>var str &#x3D; “aaabbccddaaaaaffffdddd”;<br>var obj &#x3D; findContinuousChar(str);<br>console.log(obj);</p><blockquote><pre><code></code></pre></blockquote><ol start="3"><li>方法二：for 循环 + 双指针<blockquote><ul><li>我们可以利用 for 循环来遍历字符串，把每个字符串取出来</li><li>定义变量 count 统计临时出现的次数</li><li>定义变量 obj &#x3D; {char:’’,len&#x3D;0} 来记录连续出现次数最多的字符及次数</li><li>我们定义两个变量，i 和 j，相当两个指针，最开始两个字符串指向同一个元素</li></ul><pre><code>function findContinuousChar(str) &#123;  // 用来存储出现连续次数最多的字符及次数  var obj = &#123; char: &quot;&quot;, len: 0,  &#125;;  str = str + &quot;&quot;; // 不管输入的是否是字符串，统一转成字符串  var len = str.length; // 字符串长度  if (len === 0) return obj;</code></pre></blockquote></li></ol><p>  &#x2F;&#x2F; 定义两个变量，用来做为两个指针，指定元素</p><p>  var i &#x3D; 0;<br>  var j &#x3D; 0;<br>  var count &#x3D; 0; &#x2F;&#x2F; 临时记录当前连续字符出现的次数<br>  for (; i &lt; len; i++) {<br>    if (str[i] &#x3D;&#x3D;&#x3D; str[j]) {<br>      count++;<br>    }<br>    &#x2F;&#x2F; 这里移动的是i，所以要拿i来做判断<br>    if (str[i] !&#x3D;&#x3D; str[j] || i &#x3D;&#x3D;&#x3D; len - 1) {<br>      &#x2F;&#x2F; 等于的情况没有处理，则不会进到这里面来<br>      if (obj.len &lt; count) {<br>        obj.len &#x3D; count;<br>        obj.char &#x3D; str[j]; &#x2F;&#x2F; 这里是str[j],不要写成str[i]了<br>      }<br>      count &#x3D; 0; &#x2F;&#x2F; 重置count的值<br>      j &#x3D; i; &#x2F;&#x2F; 更新j的值，开始下一个字符统计</p><pre><code>  if (i &lt; len - 1) &#123;    i--; // 这里的i--不能放在上面的if中，否则某种情况下会死循环  &#125;&#125;</code></pre><p>  }<br>  return obj;<br>}<br>var str &#x3D; “12345566”;<br>var obj &#x3D; findContinuousChar(str);<br>console.log(obj);</p><blockquote><pre><code>&gt;双指针常用于解决嵌套循环</code></pre></blockquote><ol start="4"><li>算法复杂度分析<blockquote><ul><li>方法一 和 方法二的时间复杂度都为 <code>O(n)</code>，空间复杂度也是 <code>O(1)</code></li></ul></blockquote></li></ol><h3 id="七、快速排序"><a href="#七、快速排序" class="headerlink" title="七、快速排序"></a>七、快速排序</h3><blockquote><p>采用快速排序的算法，将以下数组<code>[1,33,43,5,76,8,9,12,15,18,30,32,45]</code>按<strong>升序</strong>来进行排序</p></blockquote><ol><li><p>什么是快速排序？</p><blockquote><ul><li>快速排序是在每一轮排序时，会将数组的<strong>中间元素</strong>作为基准元素</li><li>并让其他比基准元素大的元素移到基准元素的一边</li><li>比基准元素小的元素移到基准元素的另一边</li></ul></blockquote></li><li><p>利用二分思想</p><blockquote><ul><li>首先找到中间元素</li><li>遍历数组中的每个元素，每个元素都与中间元素作比较<ul><li>所有小于中间元素的，放一个数组leftArr</li><li>所有除中间元素外等于中间元素的，放一个数组midArr</li><li>所以大于中间元素的，放一个数组rightArr</li></ul></li><li>然后将这几个数组从左到右拼接到一起</li><li>当 leftArr 和 rightArrr 长度为 1 时，不用再查找和判了<blockquote><p>如果找到midValue值为当前数组中的最大值或最小值时，本次排序相当于只排了一个元素，效率也是会很低。</p></blockquote></li></ul></blockquote></li><li><p>解题思路</p><blockquote><p>我们有三种方式来实现</p><ul><li>方法一：利用递归 + slice()方法，这种情况不会动原数组，返回的是一个新数组</li><li>方法二：利用递归 + splice() 方法，这种情况会动原数组，返回的是一个新数组</li><li>方法三：利用递归 + 双指针，这种情况不会动原数组，返回的也是原数组</li></ul></blockquote></li><li><p>方法一：利用递归 + slice()法</p><blockquote><ul><li>slice(start,end)查找元素，返回的是包含所查元素的新数组</li></ul><pre><code> function quickArr(arr) &#123;//检查数组if (!Array.isArray(arr)) return;if (arr.length &lt;= 1) return arr;//检查长度var len = arr.length;var midIndex = (len / 2) &gt;&gt; 0;// var midValue=arr[midIndex];var midValue = arr.slice(midIndex, midIndex + 1)[0]; //slice返回的是一个包含查询元素的数组var leftArr = [];var midArr = [];var rightArr = [];if (leftArr.length == 1) return leftArr;if (rightArr.length == 1) return rightArr;for (var i = 0; i &lt; len; i++) &#123;  if (i == midIndex) continue;  if (arr[i] &lt; midValue) &#123;    leftArr.push(arr[i]);  &#125;  if (arr[i] === midValue) &#123;    midArr.push(arr[i]);  &#125;  if (arr[i] &gt; midValue) &#123;    rightArr.push(arr[i]);  &#125;&#125;return quickArr(leftArr).concat(midArr, midValue, quickArr(rightArr)); &#125; var arr = [1, 33, 43, 5, 76, 8, 9, 12, 15, 18, 30, 32, 45]; var result = quickArr(arr); console.log(result);</code></pre></blockquote></li><li><p>方法二：利用递归 + splice()法</p><blockquote><ul><li>splice(index, deleteCount);删除元素，被删除的元素组成一个数组，被返回</li></ul><pre><code> function quickArr(arr) &#123;//检查数组if (!Array.isArray(arr)) return;if (arr.length &lt;= 1) return arr;//检查长度var len = arr.length;var midIndex = (len / 2) &gt;&gt; 0;// var midValue=arr[midIndex];var midValue = arr.splice(midIndex, 1)[0]; //slice返回的是一个包含查询元素的数组var leftArr = [];var midArr = [];var rightArr = [];if (leftArr.length == 1) return leftArr;if (rightArr.length == 1) return rightArr;for (var i = 0; i &lt; len; i++) &#123;  if (arr[i] &lt; midValue) &#123;    leftArr.push(arr[i]);  &#125;  if (arr[i] === midValue) &#123;    midArr.push(arr[i]);  &#125;  if (arr[i] &gt; midValue) &#123;    rightArr.push(arr[i]);  &#125;&#125;return quickArr(leftArr).concat(midArr, midValue, quickArr(rightArr)); &#125; var arr = [1, 33, 43, 5, 76, 8, 9, 12, 15, 18, 30, 32, 45]; var result = quickArr(arr); console.log(result);</code></pre></blockquote></li></ol><blockquote><blockquote><p>方法1和方法2的区别：</p><ul><li>语法不一样</li><li>splice每次都会删除中间元素，所以在进行for循环时，不需要再像slice一样，循环到中间元素就跳过</li><li>splice会改变原数组，slice不会</li></ul></blockquote></blockquote><ol start="6"><li>方法三：利用递归+双指针<blockquote><ul><li>选定当前组组中的<strong>第一个元素</strong>作为基准元素（pivot）</li><li>定义两个变量 <code>left</code> 和 <code>right</code>，分别指向数组的第一个元素和最后一个元素</li><li>接下来进行第一次循环<ul><li><code>right</code> 指针开始(一定要先进行right)，让指针所指向的元素与基准元素比较。如果<strong>大于或等于 pivot</strong>，则指针向左移动;如果小于 pivot，则 right 指针停止移动，切换到 left 指针</li><li>left 指针开始，让指针所指向的元素与基准元素做比较，如果<strong>小于等于 pivot</strong>，则指针向右移动;如果大于 pivot，则 left 指针停止移动。</li></ul></li><li>当 left 与 right 指针<strong>都停止</strong>后，让 left 指针和 right 指针所指向的元素进行<strong>交换</strong>。</li><li>循环条件：left !&#x3D;&#x3D; right 时才循环，即 left &gt;&#x3D; right，则停止循环</li></ul></blockquote></li></ol><blockquote><p>接下来重第一次循环的动作，开始第二次循环。</p><ul><li>一直到 left 与 right 指针<strong>重合时</strong>（相等时），则让 <code>left</code> 指针指向的元素与 <code>pivot</code> 中元素交换。</li><li>接下来 left 左边的元素再循环一遍，left &#x3D; stratIndex,right &#x3D; left-1;</li><li>left 右边元素再循环一遍,left &#x3D; left+1 right &#x3D; endIndex</li><li>递归出口：startIndex&gt;&#x3D;endIndex</li></ul></blockquote><blockquote><pre><code>function quickArr(arr, startIndex, endIndex) &#123; if (startIndex == null) startIndex = 0; if (endIndex == null) endIndex = arr.length - 1; //递归的出口 if (startIndex &gt;= endIndex) return; var left = startIndex; var right = endIndex; var pivot = arr[startIndex]; //不相等时 while (left !== right) &#123;   while (arr[right] &gt;= pivot &amp;&amp; left &lt; right) &#123;     right--;     &#125;     while (arr[left] &lt;= pivot &amp;&amp; left &lt; right) &#123;       left++;     &#125;     //left和right都不动时     if (left &lt; right) &#123;       var tempt = arr[left];       arr[left] = arr[right];       arr[right] = tempt;     &#125;   &#125;   //相等时   arr[startIndex] = arr[left];   arr[left] = pivot;   //左边元素排序   quickArr(arr, startIndex, left - 1);   //右边元素排序   quickArr(arr, left + 1, endIndex); &#125; var arr = [1, 33, 5, 43, 5, 76, 76, 8, 9, 12, 15, 18, 30, 32, 45]; quickArr(arr); console.log(arr);</code></pre></blockquote><blockquote><ul><li>另一种写法：</li></ul><pre><code>function quickSort(arr, startIndex, endIndex) &#123;  if (startIndex &gt;= endIndex) &#123;    return;  &#125;</code></pre></blockquote><p>  &#x2F;&#x2F; 第一轮排序，得到基准元素<br>  var pivotIndex &#x3D; partition(arr, startIndex, endIndex);<br>  &#x2F;&#x2F; 根据基准元素，排序左边<br>  quickSort(arr, startIndex, pivotIndex - 1);<br>  &#x2F;&#x2F; 根据基准元素，排序右边<br>  quickSort(arr, pivotIndex + 1, endIndex);<br>}</p><blockquote></blockquote><p>  function partition(arr, startIndex, endIndex) {<br>  &#x2F;&#x2F; 获取基准元素<br>  var pivot &#x3D; arr[startIndex];<br>  var left &#x3D; startIndex;<br>  var right &#x3D; endIndex;</p><blockquote></blockquote><p>  &#x2F;&#x2F; 不相等时<br>  while (left !&#x3D; right) {<br>    &#x2F;&#x2F; 右指针向左移动<br>    while (left &lt; right &amp;&amp; arr[right] &gt; pivot) {<br>      right–;<br>    }<br>    &#x2F;&#x2F; 左指针向右移<br>    while (left &lt; right &amp;&amp; arr[left] &lt;&#x3D; pivot) {<br>      left++;<br>    }<br>    &#x2F;&#x2F; 交换两者的位置<br>    if (left &lt; right) {<br>      var temp &#x3D; arr[left];<br>      arr[left] &#x3D; arr[right];<br>      arr[right] &#x3D; temp;<br>    }<br>  }</p><blockquote></blockquote><p>  &#x2F;&#x2F; 相等时<br>  arr[startIndex] &#x3D; arr[left];<br>  arr[left] &#x3D; pivot;</p><blockquote></blockquote><p>  return left;<br>}</p><blockquote></blockquote><p>var arr &#x3D; [10, 33, 43, 5, 76, 8, 9, 12, 15, 18, 30, 32, 45];<br>quickSort(arr, 0, 12);</p><blockquote><pre><code></code></pre></blockquote><ol start="7"><li>算法复杂度分析<blockquote><ul><li>方法一和方法二的时间复杂度是 <code>O(nlogn)</code> ，外层 for 循环是 <code>O(n)</code> ，for 循环里面是二分 <code>O(logn)</code></li><li>方法一和方法二的空间复杂度是 <code>O(n)</code>，它所定义的变量是可数的</li><li>方法三的时间复杂度是 <code>O(nlogn)</code>，但比方法一二所用时间更短，因为<code>concat</code>比较消耗性能，空间复杂度是 <code>O(n)</code>，但它所定义的变量是不可数的，因为它不断要进行递归</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（六）</title>
      <link href="/2023/12/04/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2023/12/04/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>本章节我们来学习数组相关的方法，操作数组的方法非常多，我们先学习 <code>ES5</code> 中的一些方法，等学习到 <code>ES6</code> 之后，再学习 ES6 中新增的相关方法。</p></blockquote><h3 id="一、数组的头尾操作"><a href="#一、数组的头尾操作" class="headerlink" title="一、数组的头尾操作"></a>一、数组的头尾操作</h3><blockquote><ul><li>首先我们来学习，如何在数组的头部或尾部添加元素或删除元素的操作<table><thead><tr><th>实例方法</th><th>描述</th><th>是否更改原数组</th></tr></thead><tbody><tr><td>push()</td><td>将一个或多个元素添加到数组的末尾，并返回该数组的新长度</td><td>是</td></tr><tr><td>pop()</td><td>从数组中删除最后一个元素，并返回被删除元素的值</td><td>是</td></tr><tr><td>unshift()</td><td>将一个或多个元素添加到数组的头部，并返回该数组的新长度</td><td>是</td></tr><tr><td>shift()</td><td>从数组中删除第一个元素，并返回该元素的值</td><td>是</td></tr></tbody></table></li></ul></blockquote><ol><li><p>push()方法</p><blockquote><ul><li>向数组的末尾添加<strong>一个或多个</strong>元素，每个元素之间用<code>,</code>逗号隔开</li><li>并<strong>返回</strong>数组的<strong>新长度</strong></li><li>括号内是要新增的元素</li></ul><pre><code>var arr = [1, 2, 3];</code></pre></blockquote><p>&#x2F;&#x2F; 向数组的尾部添加元素4<br>arr.push(4);<br>&#x2F;&#x2F; 向数组的尾部添加5，’我’ ,同时用变量len接受数据的新长度<br>var len &#x3D; arr.push(5, “我”);</p><blockquote></blockquote><p>console.log(arr);<br>console.log(“数组的长度：” + len); &#x2F;&#x2F; 数组的长度：6</p><blockquote><pre><code>&gt;push 方法根据 length 属性来决定从哪里开始插入给定的值</code></pre></blockquote></li><li><p>pop() 方法</p><blockquote><ul><li>从数组中<strong>删除最后一个</strong>元素，并<strong>返回</strong>该元素（被删除元素）的<strong>值</strong></li><li>当数组为<strong>空</strong>时，返回值为<code>undefined</code></li></ul><pre><code>var arr = [12, 23, 56, 11];var item = arr.pop();</code></pre></blockquote><p>console.log(arr); &#x2F;&#x2F; 输出删除最后一项后的值 [12, 23, 56]<br>console.log(item); &#x2F;&#x2F; 返回被删除元素的值 11</p><blockquote><pre><code>&gt;pop 方法根据 length 属性来确定最后一个元素的位置</code></pre></blockquote></li><li><p>unshift() 方法</p><blockquote><ul><li>一个或多个元素<strong>添加</strong>到数组的<strong>开头</strong>，每个元素之间用<code>,</code>逗号隔开</li><li>并<strong>返回</strong>该数组的<strong>新长度</strong></li></ul><pre><code>var arr = [12, 23, 56, 11];arr.unshift(66);var len = arr.unshift(0);console.log(len); // 6console.log(arr); // [0, 66, 12, 23, 56, 11]</code></pre></blockquote></li><li><p>shift() 方法</p><blockquote><ul><li>从数组中<strong>删除第一个</strong>元素，并返回该元素的值</li><li>当数组为<strong>空</strong>时，返回值为<code>undefined</code></li></ul><pre><code>var arr = [12, 23, 56, 11];var item = arr.shift(); // 删除数组中下标为0的项</code></pre></blockquote><p>console.log(item); &#x2F;&#x2F; 返回被删除的项 12<br>console.log(arr); &#x2F;&#x2F; [23, 56, 11]</p><blockquote><pre><code></code></pre></blockquote></li><li><p>案例：筛选数组中所有大于等于 10 的元素</p><blockquote><pre><code>var arr = [1, 3, 68, 33, 5, 9, 34, 55];function filter(arr) &#123;  var arr2 = [];  for (var i = 0; i &lt;= arr.length; i++) &#123; if (arr[i] &gt;= 10) &#123;   arr2.push(arr[i]); &#125;  &#125;  return arr2;&#125;console.log(filter(arr));</code></pre></blockquote></li></ol><h3 id="二、数组中元素的（增、删、改、查）"><a href="#二、数组中元素的（增、删、改、查）" class="headerlink" title="二、数组中元素的（增、删、改、查）"></a>二、数组中元素的（增、删、改、查）</h3><blockquote><p>如果我们要对数组中非头尾的元素，做相关的增、删、改、查操作，就需要用到下面的这些方法</p><table><thead><tr><th>实例方法</th><th>描述</th><th>是否更改原数组</th></tr></thead><tbody><tr><td>slice()</td><td>（查询）：提取原数组的一部分并返回一个新数组</td><td>否</td></tr><tr><td>splice()</td><td>（新增）：在指定位置插入一项或多项新元素;（删除）：在指定位置删除指定项;（更新）：在指定位置删除指定项，同时在此处添加一项或多项</td><td>是</td></tr></tbody></table></blockquote><ol><li>slice()方法<blockquote><ul><li>查询原数组中的一部分元素，然后将查询到的元素<strong>复制</strong>到一个新数组，并将新数组返回</li><li>slice() 方法<strong>不会更改</strong>原数组</li><li>slice() 中返回的元素是从原数组中<strong>浅拷贝</strong>过来的。</li></ul></blockquote></li></ol><p><strong>浅拷贝：</strong></p><blockquote><ul><li>数组中的值如果是<strong>基本类型</strong>，直接把值拷贝一份过来，修改拷贝后的数组<strong>不会影响</strong>原数组</li><li>如果是<strong>引用类型</strong>，拷贝的是引用类型的<strong>地址</strong>，当修改 slice()返回数组中的引用类型值时，<strong>原数组也会变</strong></li></ul></blockquote><p><strong>语法：</strong></p><blockquote><p><code>slice(start, end);</code></p><ul><li><code>start</code>和<code>end</code>表示查找的起始与结束索引，其值<strong>可正可负</strong>，<strong>正索引</strong>是从左往右数，下标从 <code>0</code> 开始，<strong>负索引</strong>是从右往左数，下标从<code>-1</code> 开始</li><li>不论正负索引，元素查找方向，都是从起始索引<strong>从左往右</strong>查找，从右到左只能得到空数组<code>[]</code></li><li>查找的元素，不包含结束索引的值</li><li>如果只有一个参数，表示起始位置，从这个位置提取往后<strong>所有元素</strong>。</li><li><code>start</code> 的默认值可以理解为 <code>0</code>，<code>end</code> 的默认值可以理解为<strong>数组长度-1(索引的最大值)</strong></li><li><code>arr.slice()</code> 相当于把整个数组浅拷贝一份</li><li>特殊情况：当起始索引和结束索引为同一值时，结果为<code>[]</code></li></ul></blockquote><blockquote><pre><code>var arr = [1, 2, 3, 4, 5, 6];// 两个参数都是正数console.log(arr.slice(1, 3)); //2,3console.log(arr.slice(3, 2)); //[]</code></pre></blockquote><p>&#x2F;&#x2F; 两个参数都是负数<br>console.log(arr.slice(-1, -3)); &#x2F;&#x2F;[]<br>console.log(arr.slice(-3, -1)); &#x2F;&#x2F;4,5</p><blockquote></blockquote><p>&#x2F;&#x2F; 参数一正一负<br>console.log(arr.slice(1, -2)); &#x2F;&#x2F;2,3,4<br>console.log(arr.slice(-2, 4)); &#x2F;&#x2F;[]</p><blockquote></blockquote><p>&#x2F;&#x2F; 只有一个参数<br>console.log(arr.slice(1)); &#x2F;&#x2F;2,3,4,5,6<br>console.log(arr.slice(-4)); &#x2F;&#x2F;3,4,5,6</p><blockquote></blockquote><p>&#x2F;&#x2F; 注意：<br>console.log(arr.slice(3, -1)); &#x2F;&#x2F;4,5<br>console.log(arr.slice(-2, 4)); &#x2F;&#x2F;[]<br>console.log(arr.slice(3, -3)); &#x2F;&#x2F;[]</p><blockquote><pre><code></code></pre></blockquote><ol start="2"><li>splice()方法<blockquote><ul><li><code>splice()</code>方法，可以实现对数组中元素的 删除，添加，更新（删除并替换）操作</li><li>被删除的元素组成一个数组，被返回，如果没有删除元素，则返回空数组</li><li>语法：<code>splice(index, deleteCount, item1, item2, itemN);</code></li><li><code>splice</code> 删除元素，包含 index 索引位置元素</li><li><code>index</code> 表索引，索引<strong>可正可负</strong>，<strong>正</strong>表示从左往右数，下标从 <code>0</code> 开始，<strong>负</strong>表示从右往左数，下标从<code>-1</code> 开始<ul><li>如果<strong>超过</strong>数组长度，表示从数组尾部开始添加内容</li><li>如果是<strong>负值</strong>，表示数组尾部开始的第几位（尾部第一位表示<code>-1</code>）</li></ul></li><li><code>deleteCount</code> 表示删除长度，<strong>0 和负数</strong>不删除，如果<strong>不写</strong>，表示 index 处删除往后<strong>所有元素</strong>（包括 index 处元素）</li><li><code>item1,item2...</code>可选，表示要添加进数组的元素，从 <code>index</code>位置开始</li></ul></blockquote></li></ol><ul><li><p>添加元素</p><blockquote><ul><li><code>deleteCount=0</code></li></ul><pre><code>var arr = [1, 2, 3, 4, 5];// 从下标1位置前面插入两个数var arr1 = arr.splice(1, 0, &quot;A&quot;, &quot;B&quot;);console.log(arr); // [1, &#39;A&#39;, &#39;B&#39;, 2, 3, 4, 5]console.log(arr1); // []</code></pre></blockquote></li><li><p>删除元素</p><blockquote><ul><li>没有新增元素</li></ul><pre><code>var arr = [1, 2, 3, 4, 5];var arr1 = arr.splice(1, 2);console.log(arr); // [1, 4, 5]console.log(arr1); // [2, 3]</code></pre></blockquote><p>var arr &#x3D; [1, 2, 3, 4, 5];<br>var arr1 &#x3D; arr.splice(2); &#x2F;&#x2F; 删除索引2后所有元素，包括索引2位置上元素<br>console.log(arr); &#x2F;&#x2F; [1, 2]<br>console.log(arr1); &#x2F;&#x2F; [3, 4, 5]</p><blockquote><pre><code></code></pre></blockquote></li><li><p>更新（删除并替换）元素</p><blockquote><pre><code>var arr = [1, 2, 3, 4, 5];// 从下标1的位置，删除2个元素（包括下标1的元素），然后再加两个元素var arr1 = arr.splice(1, 2, &quot;A&quot;, &quot;B&quot;);console.log(arr); // [1, &#39;A&#39;, &#39;B&#39;, 4, 5]console.log(arr1); // [2, 3]</code></pre></blockquote></li><li><p>index 下标为<strong>负数</strong>时</p><blockquote><ul><li>index 为负数，表示从后往前找元素的位置，从后往前，元素下标从<code>-1</code>开始</li></ul><pre><code>var arr = [1, 2, 3, 4, 5];// 从倒数第三个元素开始，删除 2个元素（包括倒数第三个）var arr1 = arr.splice(-3, 2);console.log(arr); // [1, 2, 5]console.log(arr1); // [3,4]</code></pre></blockquote></li></ul><h3 id="三、数组与字符串相互转换"><a href="#三、数组与字符串相互转换" class="headerlink" title="三、数组与字符串相互转换"></a>三、数组与字符串相互转换</h3><table><thead><tr><th>实例方法</th><th>描述</th><th>是否更改原数组</th></tr></thead><tbody><tr><td>join()</td><td>将一个数组的所有元素以特定的某种字符连接成一个字符串，并返回这个字符串</td><td>不会</td></tr><tr><td>toString()</td><td>将数组转换为字符串，然后返回该 字符串</td><td>不会</td></tr></tbody></table><blockquote><ul><li>以下方法为字符串的实例方法</li></ul></blockquote><table><thead><tr><th>实例方法</th><th>描述</th></tr></thead><tbody><tr><td>split()</td><td>根据指定的分隔符将一个<strong>字符串</strong>分割成一个字符串<strong>数组</strong></td></tr><tr><td>charAt()</td><td>从一个字符串中返回指定的字符<code>str.charAt(index)</code></td></tr></tbody></table><ol><li><p>join()方法</p><blockquote><ul><li>将一个<strong>数组</strong>的所有元素以<strong>特定</strong>的<strong>某种字符</strong>连接成一个字符串，并<strong>返回</strong>这个字符串</li><li>如果<strong>不指定</strong>连接字符，则默认以<code>,</code>逗号来分隔连接</li><li>这个方法<strong>不会改变</strong>原数组，会生成一个新的字符串</li></ul><pre><code>var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;];var str = arr.join();console.log(str); // a,b,c,dconsole.log(arr); // [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]</code></pre></blockquote><p>var str2 &#x3D; arr.join(“”);<br>console.log(str2); &#x2F;&#x2F; abcd<br>var str3 &#x3D; arr.join(“<strong>“);<br>console.log(str3); &#x2F;&#x2F;  a</strong>b<strong>c</strong>d</p><blockquote><pre><code></code></pre></blockquote></li><li><p>toString()方法</p><blockquote><ul><li>将数组转成以<code>,</code>逗号分隔的字符串，同时返回该字符串</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1,2,3</span></code></pre></blockquote></li></ol><blockquote><ul><li><code>toString</code>方法在内部调用<code>join()</code>方法拼接数组中的元素并返回一个字符串，其中包含用逗号分隔的每个数组元素</li></ul><pre><code>var arr = [1, 2, 3, 4];  var str = arr.toString();console.log(str);</code></pre></blockquote><p>&#x2F;&#x2F; 修改原型上join方法<br>Array.prototype.join &#x3D; function () {<br>var str &#x3D; “”;<br>for (var i &#x3D; 0; i &lt; this.length; i++) {<br>  str +&#x3D; this[i] + “<em>“;<br>}<br>return str;<br>};<br>&#x2F;&#x2F; 也可以只修改当前实例的join方法 arr.join&#x3D;function(){  }<br>console.log(arr.toString());<br>&#x2F;&#x2F;1</em>2<em>3</em>4*</p><blockquote><pre><code></code></pre></blockquote><ol start="3"><li>split()方法 字符串操作方法<blockquote><ul><li>数组的<code>join()</code>方法可以使数组转为字符串</li><li>字符串的<code>split()</code>方法可以使字符串转为数组<img src="./src/字符串和数组相互转换.png"></li></ul></blockquote></li></ol><blockquote><ul><li><code>split()</code>可以使字符串以某种分隔符进行分隔，分隔后的字符串组成一个数组返回</li><li>分隔符为<strong>空字符串</strong>，则将原字符串中每个字符的数组形式返回</li></ul><pre><code>var str = &quot;a*b*c*d&quot;;var arr1 = str.split(&quot;&quot;);var arr2 = str.split(&quot;*&quot;);console.log(arr1); // [&#39;a&#39;, &#39;*&#39;, &#39;b&#39;, &#39;*&#39;, &#39;c&#39;, &#39;*&#39;, &#39;d&#39;]console.log(arr2); // [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</code></pre></blockquote><p>“a-b-c-d-e-f-g-h”.split(“”); &#x2F;&#x2F; [‘a’, ‘-‘, ‘b’, ‘-‘, ‘c’, ‘-‘, ‘d’, ‘-‘, ‘e’, ‘-‘, ‘f’, ‘-‘, ‘g’, ‘-‘, ‘h’]<br>“a-b-c-d-e-f-g-h”.split(“-“); &#x2F;&#x2F; [‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’, ‘g’, ‘h’]</p><blockquote><pre><code></code></pre></blockquote><blockquote><ul><li>回顾之前讲的<code>rgb(2,33,55)</code>颜色的分隔</li></ul><pre><code>var rgb = &quot;rgb(2,33,55)&quot;;//只要不是[0-9]之间的单个或多个数字，其它字符都可以做为分隔符来分隔字符串var rgbArr = rgb.split(/[^\d]+/);console.log(rgbArr);</code></pre><ul><li><code>\d</code> 表示 0-9之间的任意数字 </li><li><code>[^\d]</code> 排除0-9之间的任意数字  </li><li><code>+</code>表示前面的字符可以出现<strong>任意次</strong></li></ul><pre><code>var url =  &quot;https://www.icodingedu.com/goods/show/42?targetId=71&amp;preview=0&quot;;var obj = &#123;&#125;;var str = url.split(&quot;?&quot;)[1].split(&quot;&amp;&quot;);//url.split(&quot;?&quot;)[1] = targetId=71&amp;preview=0//url.split(&quot;?&quot;)[1].split(&quot;&amp;&quot;) = [&#39;targetId=71&#39;, &#39;preview=0&#39;]console.log(str); //  [&#39;targetId=71&#39;, &#39;preview=0&#39;]for (let i = 0; i &lt; str.length; i++) &#123;  var param = str[i].split(&quot;=&quot;);  obj[param[0]] = param[1];&#125;//i=0时,param=str[0].split(&quot;=&quot;)//即：param=targetId=71.split(&quot;=&quot;) =[&#39;targetId&#39;,&#39;71&#39;]//obj[targetId]=71console.log(obj); // &#123;targetId: &#39;71&#39;, preview: &#39;0&#39;&#125;</code></pre></blockquote><ol start="5"><li><p>charAt()方法 字符串操作方法</p><blockquote><p><code>str.charAt(index);</code></p><ul><li><code>charAt()</code> 方法从一个字符串中返回指定的字符</li><li>一个介于 0 和字符串长度减 1 之间的整数</li><li>如果没有提供索引，charAt() 将使用 0</li><li>字符串中的字符从左向右索引，第一个字符的索引值为 <code>0</code>，最后一个字符（假设该字符位于字符串 str 中）的索引值为 <code>str.length - 1</code></li></ul><pre><code>var str = &quot;我爱你!&quot;;console.log(str.charAt(0)); // 我console.log(str.charAt(1)); // 爱console.log(str.charAt(2)); // 你</code></pre></blockquote></li><li><p>字符串与数组相似点</p><blockquote><ul><li>字符串也可以像数组一样，使用下标进行访问</li><li>也可以用 charAt()方法来访问，charAt()</li><li>字符串可以像数组一样，利用 for 循环来遍历</li><li>没有负索引</li></ul><pre><code>var str = &quot;我爱你!&quot;;console.log(str[0]);// 我console.log(str[1]);// 爱console.log(str[2]);// 你console.log(str[-1]); //undefinedconsole.log(str[4]);//undefinedvar str = &quot;我爱你!&quot;;for (var i = 0; i &lt; str.length; i++) &#123;  console.log(str[i]);&#125;</code></pre></blockquote></li></ol><blockquote><blockquote><p>但字符串并不是类数组</p><ul><li>尽管它具有length属性、能通过下标访问，但它的数据类型不是对象，它是基本数据类型</li></ul></blockquote></blockquote><h3 id="四、判断数组中元素方法"><a href="#四、判断数组中元素方法" class="headerlink" title="四、判断数组中元素方法"></a>四、判断数组中元素方法</h3><table><thead><tr><th>实例方法</th><th>描述</th><th>是否更改原数组</th></tr></thead><tbody><tr><td>indexOf()</td><td>返回在数组中可以找到给定元素的第一个索引，如果不存在，则返回 -1</td><td>否</td></tr><tr><td>lastIndexOf()</td><td>返回指定元素在数组中的最后一个的索引，如果不存在则返回-1;从指定位置开始<strong>逆向</strong>查找（即从后往前找）</td><td>否</td></tr><tr><td>includes()</td><td>用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false</td><td>否</td></tr></tbody></table><blockquote><p>三者共同点：</p><ul><li>都是全等，不适合引用数据类型</li><li>都包含起始位置</li></ul></blockquote><ol><li><p>indexOf() 方法</p><blockquote><ul><li>返回在数组中可以找到给定元素的<strong>第一个索引</strong>，如果不存在，则返回 <code>-1</code>。</li><li>查找时，使用的是（<strong>全等运算</strong><code>===</code>)，所以不适合引用数据类型</li><li>语法：<code>indexOf(searchElement, fromIndex);</code><ul><li>searchElement 要查找的元素</li><li>fromIndex 开始查找的位置（索引）</li></ul></li><li><code>fromindex</code>可正可负，正从0开始，负从-1开始；并且包含起始位置元素</li><li>如果<code>fromindex</code>不写，则默认从下标为0的元素开始查找</li><li>查找方向只能是<strong>从左往右</strong>，而且不会回头</li><li><code>fromindex</code>为负时，返回的索引为正索引</li></ul><pre><code>var arr = [2, 9, 1, 1, 5, 2, 4, 9];//不写index，默认从0开始console.log(arr.indexOf(2)); //0//index可以为正，并包含起始元素console.log(arr.indexOf(9, 1)); //1//index可以为负console.log(arr.indexOf(9, -arr.length)); //1//找不到的时候，返回-1console.log(arr.indexOf(&quot;a&quot;)); //-1//只能从左往右，不会回头console.log(arr.indexOf(1, 4)); //-1console.log(arr.indexOf(1, -3)); //-1</code></pre><blockquote><p>特别注意，用负索引时，一定记得查找方向是从左往右，易出错</p></blockquote></blockquote></li><li><p>lastIndexOf()</p><blockquote><ul><li>返回指定元素在数组中的<strong>最后一个</strong>的索引，如果不存在则返回 -1</li><li>内容判断使用的 <strong>全等(&#x3D;&#x3D;&#x3D;)</strong></li><li>从指定位置开始<strong>逆向查找</strong>（即从后往前找）</li><li>语法：<code>lastIndexOf(searchElement, fromIndex);</code></li><li><code>fromIndex</code>查找的的开始下标，默认值为 <code>arr.length-1</code>,（即从后向前查找整个数组）</li><li>如果 <code>fromIndex</code> 为负值，从指定位置向前查找</li><li>如果 <code>fromIndex</code> <strong>负值的绝对值</strong>大于数组长度，则数组不会被查找，返回-1</li><li>如果 <code>fromIndex</code> <strong>正数的绝对值</strong>大于数组长度，则整个数组都会被查找</li><li><code>fromindex</code>为负时，返回的索引为正索引<blockquote><p>注意：方向是<strong>从右往左</strong>查找，但找的是数组<strong>从左往右</strong>数该元素最后一个的索引，也就是从右往左遇到的第一个</p></blockquote></li></ul><pre><code>var arr = [1, 3, 4, 5, 3, 8, 1];//index不写console.log(arr.lastIndexOf(3)); //4//index为正值console.log(arr.lastIndexOf(1, 1)); //0//index为负值console.log(arr.lastIndexOf(1, -2)); //0//index超过数组长度console.log(arr.lastIndexOf(1, 8)); //6console.log(arr.lastIndexOf(1, -8)); //-1</code></pre></blockquote></li><li><p>includes() 方法</p><blockquote><ul><li>用来判断一个数组<strong>是否包含</strong>一个指定的值</li><li>根据情况，如果包含则返回 <code>true</code>，否则返回 <code>false</code></li><li>查找时，使用的是(<strong>全等</strong>运算&#x3D;&#x3D;&#x3D;)</li><li>语法：<code>includes(searchElement, fromIndex);</code></li><li>查找方向：从左往右</li><li>如果fromIndex超过<code>&gt;=</code>数组长度，直接返回 false</li><li>如果<code>fromindex</code>不写，则默认从下标为<code>0</code>的元素开始查找</li><li>包含起始位置的元素</li></ul><pre><code>var arr = [1, 3, 4, 5, 3, 8, 1];console.log(arr.includes(1)); //trueconsole.log(arr.includes(1, 3)); //trueconsole.log(arr.includes(1, 8)); //falseconsole.log(arr.includes(6)); //falseconsole.log(arr.includes(3, -1)); //falseconsole.log(arr.includes(4, -5)); //true</code></pre></blockquote></li><li><p>应用案例：数组去重</p><blockquote><ul><li>创建一个空数组，如果数组内的元素和新数组的元素不一样，则把该元素放入新数组</li></ul></blockquote></li></ol><blockquote><pre><code>function unique(arr) &#123;  // 如果传入的类型不是数组，啥也不做  if (!Array.isArray(arr)) &#123;    return;  &#125;  var result = [];  for (var i = 0; i &lt; arr.length; i++) &#123;    // if(!~result.indexOf(arr[i]))    if (!result.includes(arr[i])) &#123;      result.push(arr[i]);    &#125;  &#125;  return result;&#125;var arr = [1,1, 2,2,&quot;true&quot;,&quot;true&quot;,true,true,undefined,undefined,null,null,[]，[],NaN,NaN,&quot;NaN&quot;,&#123;&#125;,&#123;&#125;,function () &#123;&#125;,function () &#123;&#125;];  console.log(unique(arr));//这种方式，是没有办法过滤 引用类型的,但针对基本数据类型没有问题</code></pre></blockquote><pre><code>5. 案例：查找元素在数组中所有索引（下标）&gt;- 利用 `indexOf` 方法，返回查找到的元素索引&gt;- 如果返回索引不为`-1`，把索引添加到新数组，&gt;- 则继续从当前索引的**下一个索引位置**开始查找，找到就返回索引继续查找，找不到则停止查找。&gt;```function findIndexs(arr, element) &#123;  var indexArr = [];  var _index = arr.indexOf(element);  // 返回索引不是-1，则继续查找 _index!=-1  //while (~_index)  while (_index!==-1) &#123;    indexArr.push(_index);    _index = arr.indexOf(element, _index + 1);  &#125;  return indexArr;&#125;var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;b&quot;, &quot;b&quot;, &quot;f&quot;, &quot;b&quot;];console.log(findIndexs(arr, &quot;b&quot;));&gt;```### 五、数组拼接与反转|实例方法|描述|是否更改原数组||---|---|---||concat()|方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组|否||reverse()|方法将数组中元素的位置颠倒，并返回该数组;该方法会改变原数组。|是|1. concat()方法&gt;- 用于合并两个或多个数组&gt;- 此方法不会更改现有数组，而是返回一个**新数组**&gt;- concat 返回的新数组是元素的**浅拷贝**&gt;- 也可以像`.push`一样合并基本数据类型&gt;```var arr1 = [1, 2, 3, 4];var arr2 = [5, 6, 7, 8];var arr3 = [9, 10, 11, 12];//合并数组arr1,arr2,arr3var newArr = arr2.concat(arr1, arr3);//在数组最后添加基本数据类型var newArr = arr1.concat(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);//还可以混用var newArr = arr2.concat(&quot;a&quot;, &quot;b&quot;, arr3);console.log(newArr);&gt;```2. reverse()方法&gt;- `reverse()`方法可以将一个数组中的全部项**顺序反过来**显示。&gt;- 它会改变原数组。&gt;```var arr = [1, 2, 3, 4, 5];arr.reverse();console.log(arr); // [5,4,3,2,1]&gt;```&gt;- 与其他方法结合，将字符串进行倒序显示 &gt;```var str = &quot;清晨我上马&quot;;var arr = str.split(&quot;&quot;);arr.reverse();var str2 = arr.join(&quot;&quot;);console.log(str2); // 马上我晨清&gt;```### 六、筛选数组元素|方法|描述|是否更改原数组||---|---|---||filter()|返回所有通过函数测试成功的元素;其返回值为测试成功的元素组成的新数组|不会||find()|返回数组中满足提供的测试函数的第一个元素的值;否则返回`undefined` |不会|&gt;&gt;判断条件都写在return后面，结果为true时才会通过&gt;&gt;- 回调函数`function (element, index, array)`这块相当于一个for循环遍历,`filter\find\forEach`都是如此&gt;``` var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]; arr.filter(function (element, index, array) &#123;   console.log(element + &quot;-&quot; + index + &quot;-&quot; + arr); &#125;); arr.find(function (element, index, array) &#123;   console.log(element + &quot;-&quot; + index + &quot;-&quot; + arr); &#125;); arr.forEach(function (element, index, array) &#123;   console.log(element + &quot;-&quot; + index + &quot;-&quot; + arr); &#125;); //结果都是： //a-0-a,b,c,d,e //b-1-a,b,c,d,e //c-2-a,b,c,d,e //d-3-a,b,c,d,e //e-4-a,b,c,d,e&gt;```1. filter()方法&gt;- 返回所有通过函数测试成功的元素，其返回值为测试成功的元素组成的**新数组**&gt;- 语法：&gt;```// 回调函数filter(callbackFn);filter(callbackFn, thisArg);&gt;// 内联回调函数filter(function (element) &#123;  /* … */&#125;);filter(function (element, index) &#123;  /* … */&#125;);filter(function (element, index, array) &#123;  /* … */&#125;);//完整版filter(function (element, index, array) &#123;  /* … */&#125;, thisArg);&gt;```- **详细解读**&gt;- callbackFn 用来测试数组中每个元素的函数，返回 `true`表示该元素通过测试，保留该元素，`false`则不保留&gt;- callbackFn 函数，接受以下三个参数&gt;   - element 数组中当前正在处理的元素&gt;   - index 正在处理的元素在数组中的索引&gt;   - array 调用了 filter()的数组本身&gt;- thisArg 可选，执行 callbackFn 时，用于 this 的值- 案例：找出数组中所有小于 10 的元素&gt;```// 筛选出所有小于10的元素var arr = [1, 22, 5, 12, 45, 9, 10, 33, 8];var arr2 = arr.filter(function (value) &#123;  return value &lt; 10;&#125;);console.log(arr2); //  [1, 5, 9, 8]&gt;```- 灵活运用判断条件&gt;- 只要结果是true就能通过&gt;- 可以是`return el&gt;10`&gt;- 也可以是布尔类型的：&gt;```var arr = [&quot;bc&quot;, &quot;cad&quot;, &quot;aff&quot;, &quot;scs&quot;];var result = arr.filter(function (el) &#123;  //将数组转换成字符串  var arr = el.split(&quot;&quot;);  console.log(arr);  //查找包含&quot;a&quot;的元素  var boole = arr.includes(&quot;a&quot;);  //返回包含&quot;a&quot;的元素的数组  return boole;&#125;);console.log(result);&gt;```- 自已封装简单版 filter 方法&gt;```// 大于等于10var arr = [1, 3, 68, 33, 5, 9, 34, 55];function filter(arr) &#123;  var arr2 = [];  for (var i = 0; i &lt;= arr.length; i++) &#123;    if (arr[i] &gt;= 10) &#123;      arr2.push(arr[i]);    &#125;  &#125;  return arr2;&#125;console.log(filter(arr));&gt;&gt;/**&gt; * 找到数组中所有满足测试函数条件的元素&gt; * @param arr 查找的数组&gt; * @param fn 测试函数&gt; */function filter(arr, fn) &#123;  var arr2 = [];  for (var i = 0; i &lt;= arr.length; i++) &#123;    // 为真，就添加    if (fn(arr[i])) &#123;      arr2.push(arr[i]);    &#125;  &#125;  return arr2;&#125;// 定义数组var arr = [1, 3, 68, 33, 5, 9, 34, 55];// 筛选出大于等于10的元素var arr2 = filter(arr, function (value) &#123;  return value &gt;= 10;&#125;);console.log(arr2);// 筛选出小于等于10的元素var arr3 = filter(arr, function (value) &#123;  return value &lt; 10;&#125;);console.log(arr3);&gt;```2. find() 方法&gt;- 返回数组中满足提供的测试函数的**第一个元素的值**。否则返回 `undefined`&gt;```// 回调函数find(callbackFn);find(callbackFn, thisArg);// 内联回调函数find(function (element) &#123;  /* … */&#125;);find(function (element, index) &#123;  /* … */&#125;);find(function (element, index, array) &#123;  /* … */&#125;);//完整版find(function (element, index, array) &#123;  /* … */&#125;, thisArg);&gt;```- 详细解读&gt;- callbackFn 用来测试数组中每个元素的函数&gt;- callbackFn 有三个参数&gt;   - element 当前数组中正在遍历到的元素&gt;   - index 当前数组中正在遍历到的索引&gt;   - array 当前调用 find 方法的数组&gt;- 执行回调时用作 this 的对象。- 筛选出小于10的第一个元素&gt;```var arr = [1, 22, 5, 12, 45, 9, 10, 33, 8];var arr2 = arr.find(function (value) &#123;  return value &lt; 10;&#125;);console.log(arr2); //  [1]&gt;```&gt;- 也可以像filter一样，与其他方法结合使用### 七、数组排序|方法|描述|是否更改变原数组||---|---|----||sort()|用于对数组的元素进行排序|是|- 语法&gt;```// 无函数sort();// 内联比较函数  函数可以是匿名的sort(function compareFn(a, b) &#123;  /* … */&#125;);&gt;```1. sort()未指定函数参数&gt;- 当 `sort` 中没有给定参数时，数组中的元素会先被转换为**字符串**，然后比较的时候是按 `Unicode` 编码来进行排序&gt;- 英文字母对应的 Unicode 编码&gt;   - `A~Z` 对应 `65~ 90` 也就是A的Unicode编码是65 、 Z 的Unicode编码是 90&gt;   - `a~z` 对应 `97~122`&gt;   - `0~9` 对应 `48~57`&gt;```var arr = [&quot;A&quot;, &quot;Z&quot;, &quot;b&quot;, 1, 80, 9, 100, 70, &quot;a&quot;];arr.sort();console.log(arr); // [1, 100, 70, 80, 9, &#39;A&#39;, &#39;Z&#39;, &#39;a&#39;, &#39;b&#39;]&gt;```&gt;&gt;在没有函数做为参数时，这种比较本质上是没有办法做数字数组的排序2. sort()指定函数参数&gt;- sort中的函数，可以自拟函数名，也可以是匿名函数&gt;- `a，b `是用于比较的两个元素&gt;- 函数返回值为`a-b`，则数组按**升序**排序，即从小到大&gt;- 函数返回值为`b-a`,则数组按**降序**排序，即从大到小&gt;```sort(function compareFn(a, b) &#123;  return a - b;&#125;);&gt;// sort中的函数，也可以是匿名函数sort(function (a, b) &#123;  return b - a;&#125;);&gt;```- 如何理解：a-b 即升序，b-a 即降序&gt;在之前的数组中我们学过冒泡排序，冒泡排序的原则就是如果相邻的两个数(a,b)比较时&gt;- 如果 a-b 大于 0，交换两者位置，即大的数 a 的放后面，小的 b 放前面，升序&gt;- 如果 b-a 大于 0 ，交换两者位置，即大的数 b 放在前面，小的数 a 放在后面，降序&gt;&gt;所以你可以把这里的 a 和 b 当成数组成**相邻的**两个比较元素&gt;- 如果`compareFn(a, b)`**大于** 0 ，b会被排列到 a 之前。&gt;- 如果`compareFn(a, b)`**小于** 0 ，那么 a会被排列到 b 之前；&gt;- 如果`compareFn(a, b)`**等于** 0 ，a和b的相对位置不变。3. 冒泡排序法封装成函数&gt;```// 封装冒泡排序function bubbleSort(arr, fn) &#123;  // 数组长度  var len = arr.length;  // 当前是否是有序的  var isSorted;  var flag = 0;  // 有序的边界  var sortBorder = len - 1;  // 外层for控制交换轮数  for (var i = 0; i &lt; len - 1; i++) &#123;    // 内层for控制每一轮，元素交换次数处理    isSorted = true; // 有序标记，每轮开始默认为有序，如果一旦发生交换，就会变成flag=false,无序&gt;    for (var j = 0; j &lt; sortBorder; j++) &#123;      if (fn(arr[j], arr[j + 1]) &gt; 0) &#123;        // 交换两元素位置        var tmp; // 用来交换两个变量的中间变量        tmp = arr[j];        arr[j] = arr[j + 1];        arr[j + 1] = tmp;        isSorted = false;        // 把无序列表的边界，更新为最后一次交换元素的位置        flag = j;      &#125;    &#125;    if (!isSorted) &#123;      sortBorder = flag;    &#125;    // 这一轮多次交换下来，flag没有变为false,说明没有发生元素交换，此时数组已是有序的    if (isSorted) &#123;      break; // 退出最外层for循环    &#125;  &#125;&#125;&gt;// 排序数组var arr = [2, 3, 4, 1, 5, 6, 7, 8, 9, 35, 76];bubbleSort(arr, function (a, b) &#123;  return a - b; // 升序&#125;);console.log(arr); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 35, 76]&gt;bubbleSort(arr, function (a, b) &#123;  return b - a; // 降序&#125;);console.log(arr); // [76, 35, 9, 8, 7, 6, 5, 4, 3, 2, 1]&gt;```### 八、forEach数组遍历&gt;- `forEach()`方法对数组的每个元素执行一次给定的函数&gt;- 返回值为`undefined`&gt;- 会更改原数组&gt;```// 回调函数forEach(callbackFn, thisArg);forEach(function (element, index, array) &#123;/* … */&#125;, thisArg);&gt;```&gt;- callbackFn 为数组中每个元素执行的函数，函数带有以下三个参数：&gt;   - element 当前数组中正在遍历到的元素&gt;   - index 当前数组中正在遍历到的索引&gt;   - array `forEach()`方法正在操作的数组&gt;- thisArg可选参数，当执行回调函数`callbackFn`时，用作`this`的值，如果此参数不写，其`callbackFn`函数中this指向全局对象- forEach底层逻辑&gt;```//用forEach方法实现var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;];arr.forEach(function (el, index, arr) &#123;  if (el == &quot;c&quot;) &#123;    arr.splice(index, 1);  &#125;&#125;);console.log(arr);&gt;//底层逻辑就是用for循环遍历function forEach(arr, fn) &#123;  for (var i = 0; i &lt; arr.length; i++) &#123;    //for循环把每个元素拿出来后，要做的操作    fn(arr[i], i, arr);  &#125;&#125;forEach(arr, function (el, index, arr) &#123;  //想做的操作&#125;);&gt;```&gt;- 从性能方面来说，`forEach`比单独用`for循环`来实现是要差的，但差别不大，主要原因是`forEach`没执行一次都要调用一次回调函数&gt;- 但在实际开发中，倾向于用`forEach`，因为性能差别不大，而`forEach`可读性更强### 九、数组相关方法总结|实例方法|描述|是否改变原数组|返回结果||---|----|---|---||push()|将一个或多个元素添加到数组的末尾，并返回该数组的新长度|会|原数组的新长度||pop()|从数组中删除最后一个元素，并返回该元素的值|会|返回被删除元素||unshift()|将一个或多个元素添加到数组的头部，并返回该数组的新长度|会|原数组的新长度||shift()|从数组中删除第一个元素，并返回该元素的值|会|被删除元素||slice()|（查询）：提取原数组的一部分并返回一个新数组|不会|将查询到元素组成的新数组返回||splice()|（新增）：在指定位置插入一项或多项新元素；（删除）：在指定位置删除指定项；（更新）：在指定位置删除指定项，同时在此处添加一项或多项|会|返回被删除元素组成的数组||join()|将一个数组的所有元素以特定的某种字符连接成一个字符串|不会|并返回连接后的字符串||toString()|将数组转换为字符串|不会|返回该字符串||indexOf()|返回在数组中可以找到给定元素的第一个索引，如果不存在，则返回 -1。|不会|返回元素索引或-1||lastIndexOf()|返回指定元素在数组中的最后一个的索引，如果不存在则返回 -1;从指定位置开始逆向查找（即从后往前找）|否|返回指定元素在数组中的最后一个的索引||includes()|用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false|不会|返回值为 true 或 false||concat()|方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组|不会|将合并成的新数组返回||reverse()|方法将数组中元素的位置颠倒，并返回该数组|会|返回置返后的原数组||sort()|对数组中的元素进行排序（降序或升序）|会|返回排序后的原数组||filter|返回所有通过函数测试成功的元素；其返回值为测试成功的元素组成的新数组|不会|返回符合要求的所有元素||find|返回数组中满足提供的测试函数的第一个元素的值；否则返回 undefined (opens new window)|不会|返回符合要求的第一个元素||forEach|forEach()方法对数组的每个元素执行一次给定的函数|会|返回值为undefined|### 十、综合应用案例1. 求数组中每一项的总和、平均数&gt;- `forEach()`方法对数组的每个元素执行一次给定的函数&gt;``` function sum(arr) &#123; var sum = 0; socreArr.forEach(function (el) &#123;   sum += el; &#125;); return sum; &#125; var socreArr = [99, 96, 95, 89, 86, 88, 67, 53, 69, 36]; var result = sum(socreArr); console.log(result); console.log(result / socreArr.length);&gt;```2. 随机样本：请随机从原来数组中取 3 项&gt;- 取随机下标：`Math.random()`&gt;- 过滤数组和数字&gt;   - `Array.isArray()`确定输入的是数组&gt;   - Number转数字，`NaN`永远不等于它自身- 取样后，把原数组中的元素给删除了&gt;- 删除数组中的元素：`splice`&gt;```  function randomArr(arr, k) &#123;  var randomArr = [];  //过滤数组  if (!Array.isArray(arr)) return;  //若转数字后是NaN,则返回0  Number(k) !== Number(k) ? 0 : Number(k);  //如果k大于数组长度，则k等于数组长度  if (k &gt; arr.length) &#123;    k = arr.length;  &#125;  for (var i = 0; i &lt; k; i++) &#123;    //遍历k次，生成k个随机下标,n是每次的随机下标    var n = (Math.random() * arr.length) &gt;&gt; 0;    //将随机下标添加到新数组中    randomArr.push(arr[n]);    //删除已生成的下标,splice包括起始元素    arr.splice(n, 1);  &#125;  return randomArr;&#125;var arr = [2, 1, 5, 8, 6, 9, 4, 3, 7];console.log(randomArr(arr, &quot;5&quot;));&gt;```- 取样后，不动原数组&gt;- 不删除已出现元素，但不能重复出现,用`includes`&gt;```  function randomArr(arr, k) &#123;  var randomArr = [];  //过滤数组  if (!Array.isArray(arr)) return;  //若转数字后是NaN,则返回0  Number(k) !== Number(k) ? 0 : Number(k);  //如果k大于数组长度，则k等于数组长度  if (k &gt; arr.length) &#123;    k = arr.length;  &#125;  for (var i = 0; i &lt; k; i++) &#123;    //遍历k次，生成k个随机下标,n是每次的随机下标    var n = (Math.random() * arr.length) &gt;&gt; 0;    //如果新数组中不包括该随机数，则将该元素加进新数组    if (!randomArr.includes(arr[n])) &#123;      //将随机下标添加到新数组中      randomArr.push(arr[n]);    &#125; else &#123;      i--;    &#125;  &#125;  return randomArr;&#125;var arr = [2, 1, 5, 8, 6, 9, 4, 3, 7];console.log(randomArr(arr, 4));&gt;```2. 手写 Flatten 方法，实现数组的扁平化 (面试题)- 方法1：递归&gt;```var arr = [1, 2, 3, [4, [5], [6]], 7, 8];function flatten(arr) &#123;  var newArr = [];  for (var i = 0; i &lt; arr.length; i++) &#123;    if (Array.isArray(arr[i])) &#123;      // 是数组,递归调用；这一步很关键！      newArr = newArr.concat(flatten(arr[i])); // concat返回新的拼接好的数组    &#125; else &#123;      newArr.push(arr[i]);    &#125;  &#125;  return newArr;&#125;console.log(flatten(arr));&gt;```- 方法2：forEach+递归&gt;```var arr = [1, 2, 3, [4, [5], [6]], 7, 8];function flatten(arr) &#123;  var newArr = [];  arr.forEach(function (el) &#123;    if (Array.isArray(el)) &#123;      // 是数组,递归调用      newArr = newArr.concat(flatten(el)); // concat返回新的拼接好的数组    &#125; else &#123;      newArr.push(el);    &#125;  &#125;);  return newArr;&#125;console.log(flatten(arr));&gt;```</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（五）</title>
      <link href="/2023/12/04/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2023/12/04/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、函数的理解"><a href="#一、函数的理解" class="headerlink" title="一、函数的理解"></a>一、函数的理解</h3><blockquote><ul><li>函数就是语句的<strong>封装</strong>，可以让封装后的代码很方便的被反复使用</li><li>函数具有<strong>一次定义，多次调用</strong>‘的优点</li><li>使用函数，可以<strong>简化代码</strong>，让代码更具有可读性</li></ul></blockquote><p><strong>计算任意两个数之间所有数之和</strong></p><blockquote><ul><li>比如1-10，10-20，20-30 等</li><li>按照之前的学习，我们只能根据初始值和范围写for循环，而且每计算一次，就要写一次 for 循环</li></ul><pre><code>var sum = 0;for (var i = 1; i &lt;= 10; i++) &#123;  sum += i;&#125;console.log(sum); // 55</code></pre></blockquote><p>var sum &#x3D; 0;<br>for (var i &#x3D; 10; i &lt;&#x3D; 20; i++) {<br>  sum +&#x3D; i;<br>}<br>console.log(sum); &#x2F;&#x2F; 165</p><blockquote><pre><code></code></pre></blockquote><blockquote><blockquote><p>有了函数之后，我们就可以实现输入起始的两个数，自动就出来我们想要的结果</p></blockquote></blockquote><h3 id="二、函数的声明和调用"><a href="#二、函数的声明和调用" class="headerlink" title="二、函数的声明和调用"></a>二、函数的声明和调用</h3><blockquote><ul><li>和变量一样，函数必须<strong>先定义</strong>（声明）然后才能使用</li><li>定义一个函数，有两种方式</li></ul></blockquote><ol><li><p>方式1：以<strong>函数声明</strong>的方式-创建一个函数</p><blockquote><ul><li>使用<code>function</code>关键字声明函数，必需全部<strong>小写</strong>，function是 “功能” 的意思</li><li>函数名必须符合<strong>JS标识符命名规则</strong></li><li>( ) 圆括号中是<strong>形参列表</strong>，即使没有形参，也必须书写圆括号</li><li>{ } 大括号里是<strong>函数体语句</strong></li></ul><pre><code>// 声明函数function 函数名() &#123;  // 函数体语句&#125;</code></pre></blockquote><p>function hello() {<br>  console.log(“大家好！”);<br>}</p><blockquote><pre><code></code></pre></blockquote></li><li><p>方式2：以函数<strong>表达式</strong>的方式创建一个函数</p><blockquote><ul><li><code>function()&#123; &#125;</code>是一个<strong>匿名函数</strong>，即<strong>没有函数名</strong>的函数。</li><li>但是我们最后要使用这个函数，所以我们把这个匿名函数赋值给了一个<strong>变量</strong></li><li>后面我们通过这个变量来调用这个函数</li><li>匿名函数，经常以<strong>回调函数</strong>的形式出现</li></ul><pre><code>var 变量 = function () &#123;  // 函数体语句&#125;;</code></pre></blockquote><p>var hello &#x3D; function () {<br>  console.log(“大家好！”);<br>};</p><blockquote><pre><code></code></pre></blockquote></li><li><p>函数的调用</p><blockquote><ul><li>调用函数非常简单，只需在<strong>函数名字&#x2F;变量名后书写圆括号对</strong>即可</li><li>所谓函数的调用，就是执行函数体内的所有语句。<blockquote><p>函数被声明后，是不会自动执行的，只有被调用才会被执行</p></blockquote></li></ul></blockquote></li></ol><blockquote><ul><li>通过方式1声明的函数：</li></ul><pre><code>function hello() &#123;  console.log(&quot;大家好！&quot;);&#125;hello();// 函数定义一次，可以多次调用hello();hello();</code></pre><ul><li>通过方式2声明的函数：</li></ul><pre><code>var hello = function () &#123;  console.log(&quot;大家好！&quot;);&#125;;hello();// 函数定义一次，可以多次调用hello();</code></pre></blockquote><ol start="4"><li>函数类型判断<blockquote><ul><li>利用 typeof 来检测函数类型，得到 function</li></ul><pre><code>function fn() &#123;&#125;typeof fn;console.log(typeof fn); // &#39;function&#39;console.log(typeof fn === &quot;function&quot;);//true</code></pre></blockquote></li></ol><h3 id="三、函数的参数"><a href="#三、函数的参数" class="headerlink" title="三、函数的参数"></a>三、函数的参数</h3><ol><li>函数参数分类<table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>形参</td><td>在<strong>声明函数</strong>时，我们可以在函数名后面的小括号（）中添加一些参数，这些参数被称为形参</td></tr><tr><td>实参</td><td>在<strong>调用函数</strong>时，我们可以在函数名后面的小括号（）中，添加的参数，这些参数被称为实参</td></tr></tbody></table></li></ol><blockquote><ul><li>在函数的()中可以指定<code>&gt;=0</code>个参数，参数可以是<strong>任意类型</strong></li><li>多个参数之间用<code>,逗号</code>隔开</li></ul><pre><code>// 函数声明，这里的a,b被称为形参function sum(a, b) &#123;  console.log(a + b);&#125;</code></pre></blockquote><p>&#x2F;&#x2F; 调用函数<br>sum(1, 2); &#x2F;&#x2F; 这里的 1，2 被称为 实参<br>sum(2, 3); &#x2F;&#x2F; 这里的 2，3 被称为 实参</p><blockquote><pre><code></code></pre></blockquote><ol start="2"><li>形参与实参的关系<blockquote><ul><li>在函数调用时，<strong>实参</strong>会将其值，<strong>赋值</strong>给到函数声明时对应的<strong>形参</strong>。</li><li>实参与形参在赋值时，是<strong>一一对应</strong>的顺序，所以顺序不要弄错<br><strong>我们以下面这个代码的执行过程来作为讲解</strong></li></ul><pre><code>// 函数声明，这里的a,b被称为 形参function sum(a, b) &#123;  console.log(a + b);&#125;// 调用函数，sum(1, 2); // 这里的 1，2被称为 实参</code></pre></blockquote></li></ol><blockquote><ul><li>代码从上往下执行</li><li>遇到<code>sum(1,2)</code>被调用，相当于就要<strong>开始执行</strong>sum函数。</li><li>在执行代码前，还有一个<strong>预解析</strong>的过程，这个时候，会根据形参个数，来创建对应的变量，<strong>接收</strong>传过来的实参的值。相当于如下代码：</li></ul><pre><code>function sum() &#123;  var a = 1;  var b = 2;  console.log(a + b);//3&#125;</code></pre></blockquote><ol start="3"><li>实参与形参个数不同时<br><strong>情况1：当实参个数 &gt; 形参个数时</strong><blockquote><ul><li>对函数本身的功能<strong>并没有任何的影响</strong></li><li>实参和形参一一对应，多余的实参没有对应的形参接应它，但也不会有什么影响</li></ul></blockquote></li></ol><p><strong>情况2：当实参个数 &lt; 形参个数时</strong></p><blockquote><ul><li>会引发报错，最终得不到想要的结果</li><li>因为如果对应的形参没有接受到对应实参的值，则默认值是<code>undefined</code></li></ul><pre><code>// a,b,c 是形参function sum(a, b, c) &#123;  // 这里的c没有接受任何值，则默认值是undefined，undefined 进行任何运算结果都是 NaN  var sum = a + b + c;  console.log(sum);&#125;</code></pre></blockquote><p>&#x2F;&#x2F; 2,5 是实参<br>sum(2, 5); &#x2F;&#x2F; NaN</p><blockquote><pre><code>&gt;在实际开发中，实参和形参尽量相同，否则会引发报错或 NaN</code></pre></blockquote><p><strong>总结：形参和实参</strong></p><table><thead><tr><th>参数个数</th><th>输出结果</th></tr></thead><tbody><tr><td>实参 &#x3D; 形参</td><td>正常输出结果</td></tr><tr><td>实参 &gt; 形参</td><td>正常输出结果</td></tr><tr><td>实参 &lt; 形参</td><td>形参默认值为undefined，多出的形参没有对应实参，则最后得不到想要的结果</td></tr></tbody></table><ol start="4"><li>参数默认值<blockquote><ul><li>如果实参的个数小于形成，那函数在调用后，则会报错，或得不到想要的结果。那有没有办法可以规避这种问题呢 ？有，就是我们接下来要讲到的参数的默认值。</li></ul></blockquote></li></ol><blockquote><ul><li>在函数<strong>声明时</strong>，我们可以给<strong>形参赋值</strong>，这个值我们称为参数的默认值</li><li>如果在函数调用时，<strong>没有</strong>传入对应的实参，则参数值就以默认值代替</li><li>如果<strong>传入了</strong>对应的实参，参数值就以实参传过来的值为准。</li></ul></blockquote><p><strong>方式1：</strong></p><blockquote><pre><code>function sum(a=0,b) &#123;    console.log(a + b);&#125;sum(); // NaN  没有对应实参，则 采用默认值 a=0,b=undefined ,即a+b=NaNsum(1); // NaN 只传了第1个实参，则a=1,b=undefined，即a+b=NaNsum(1, 2); // 3 传入2个实参，则a=1,b=2,即a+b=3sum(,2); // 报错</code></pre><blockquote><ul><li>注意形参与实参在接受值时，是一一对应关系</li><li>绝对不要这样写：<code>sum(,2);</code></li></ul></blockquote></blockquote><p><strong>方式2：</strong></p><blockquote><pre><code>// 形参a，b同时赋初始值function sum(a, b) &#123;  // a,b 如果没有值，则默认为undefined，undefined转boolean是false  a = a || 0; // a有值，则用a的值，没值用0代替  b = b || 0; // b有值，则用b的值，没值用0代替  console.log(a + b);&#125;</code></pre><blockquote><p>形参，在函数内部<strong>不需要</strong>用 <code>var</code> 声明，直接使用就可以</p><ul><li>注意场景：当a等于布尔值为<code>false</code>的值时，不适合用该方法，例如：null、undefined、””</li></ul></blockquote></blockquote><ol start="5"><li>案例1：计算任意两个数之间所有数之和<blockquote><ul><li>首先要<strong>判断</strong>输入的<strong>是否是数字</strong>，如果不是数字，则把参数默认值设为 0</li><li>然后要<strong>判断两个数的大小</strong>，<strong>for 循环</strong>遍历两个数之间的所有数，用<strong>累加器</strong>累加</li><li>最后输出累加器的值。</li></ul></blockquote></li></ol><p><strong>知识点1：</strong></p><blockquote><p><code>条件表达式 ? 表达式1 : 表达式2;</code><br><strong>执行流程：</strong></p><ul><li>首先对条件表达式进行求值</li><li>如果条件表达式的值为 true，则执行语句 1，并返回执行结果</li><li>如果条件表达式的值为 false，则执行语句 2，并返回执行结果</li></ul></blockquote><p><strong>知识点2：</strong></p><blockquote><p>判断是否为数字</p><ul><li><code>typeof</code>的值为<code>number</code></li><li><code>NaN</code>为不是数字的数字类型，所以typeof筛不掉它</li><li><code>isNaN</code>：判断这个参数是否“不是数值”<blockquote><p>所以数字同时满足<code>typeof a === &quot;number&quot;</code>和<code>!isNaN()</code>为true;</p></blockquote></li></ul></blockquote><blockquote><pre><code>function sum(a, b) &#123;  // 如果a是数字，则返回a，否则返回0  a = typeof a === &quot;number&quot; &amp;&amp; !isNaN(a) ? a : 0;  // 如果b是数字，则返回b，否则返回0  b = typeof b === &quot;number&quot; &amp;&amp; !isNaN(b) ? b : 0;  var sum = 0;  if (a &gt;= b) &#123;    for (var i = b; i &lt;= a; i++) &#123;      sum += i;    &#125;  &#125; else &#123;    for (var i = a; i &lt;= b; i++) &#123;      sum += i;    &#125;  &#125;  console.log(sum);&#125;sum(-1, -2); // -3sum(1, 2); // 3sum(-1, 5); // 14sum(); // 0sum(&quot;-1&quot;, 0); // 0</code></pre></blockquote><p><strong>总结：判断是否为纯数字</strong></p><blockquote><p>方法1：</p><ul><li>先用<code>Number</code>或者<code>+</code>转换成数字类型<ul><li>缺陷：<code>&quot;&quot;</code>会被转成0</li></ul></li><li>用<code>isNaN</code>判断是不是数字，<code>NaN</code>为不是数字的数字类型，可以过滤<code>NaN</code></li></ul></blockquote><blockquote><p>方法2：</p><ul><li>同时满足”数字类型”和数字</li><li>typeof() &#x3D;&#x3D;&#x3D; “Number”，typeof 返回值的类型都是字符串类型，所以要加<strong>双引号</strong></li><li>isNaN()为<code>false</code></li></ul></blockquote><ol start="6"><li><p>案例2:写一个函数，该函数对用户输入的用户名进行验证</p><blockquote><ul><li>当用户输入的用户名&lt;4 位数时，弹出提示“用户名不能小于 4 位数”</li><li>当用户输入的用户名&gt;&#x3D;4 位并且&lt;&#x3D;8 位时，弹出提示”用户名格式正确”</li><li>当用户输入的用户名&gt;8 位数时，弹出提示“用户名不能大于 8 位数”</li></ul><pre><code>function userMatch(username) &#123;  if (username.length &lt; 4) &#123; alert(&quot;用户名不能小于4位&quot;);  &#125; else if (username.length &lt;= 8) &#123; alert(&quot;用户名格式正确&quot;);  &#125; else &#123; alert(&quot;用户名不能大于8位&quot;);  &#125;&#125;var username = prompt(&quot;请输入用户名&quot;);userMatch(username);</code></pre></blockquote></li><li><p><code>arguments</code> 实参列表</p><blockquote><p>如果我们在函数声明时，<strong>不确定</strong>我们到底要几个<strong>形参数</strong>，而希望在函数调用时，传递几个实参，就接受几个实参。这个时候 <code>arguments</code> 就派上用场了。</p><ul><li>arguments实际上是当前函数的一个<strong>内置对象</strong>，函数调用时创建</li><li>函数内arguments表示它接收到的实参列表</li></ul></blockquote></li></ol><blockquote><p>arguments 是一个<strong>类数组对象</strong>，所谓的类数组对象，具有以下特点：</p><ul><li>具有 <code>length</code> 属性</li><li>可以用<code>[]</code>方括号书写，用下标方式访问对象中属性值，下标从 <code>0</code> 开始</li><li><strong>不具备</strong>数组的所有方法，如<code>push,pop,unshift,shift</code>等方法，arguments 都没有</li></ul></blockquote><blockquote><blockquote><p>不管用户传入多少个实际参数，永远能够计算他们的和</p></blockquote><pre><code>function sum() &#123;  var sum = 0;  for (var i = 0; i &lt; arguments.length; i++) &#123;    sum += arguments[i];  &#125;  console.log(&quot;所有参数的和是：&quot; + sum);&#125;</code></pre></blockquote><p>sum(11, 22, 33, 44, 55); &#x2F;&#x2F; 165<br>sum(66); &#x2F;&#x2F; 66<br>sum(-3, 9); &#x2F;&#x2F; 6</p><blockquote><pre><code></code></pre></blockquote><ol start="8"><li>arguments 的注意事项<blockquote><ul><li>函数内<code>arguments</code>表示它接收到的<strong>实参</strong>列表</li><li><code>arguments</code>对象的值<strong>不反映</strong>参数的<strong>默认值</strong></li></ul><pre><code>function sum(a = 1, b = 2) &#123;  console.log(arguments);//[3,5, callee:(...) ,Symbol(Symbol.iterator): ƒ]  console.log(arguments[0]);//3  console.log(arguments[1]);//5&#125;sum(3, 5);sum();</code></pre></blockquote></li></ol><p><strong>参数的作用</strong></p><blockquote><ul><li>如果函数体内的某些值不能固定，我们可以在调用函数时，通过实参的形式传递不同值进去。</li><li>如上面代码中，求两个数的和，这两个数 a,b 的值是不固定的，就可以通过传参来解决</li></ul></blockquote><p><strong>函数的封装</strong></p><blockquote><ul><li>所谓函数的封装，就是把具有一定功能的代码，通过<strong>函数的形式</strong>封装起来</li><li>当我们需要使用的时候，只需要调用下这个函数就可以。</li></ul></blockquote><ol start="9"><li>类数组转换为数组<blockquote><p>arguments 是一个<strong>类数组</strong>对象，所谓的类数组对象，具有以下特点</p><ul><li>肯定是一个<strong>对象</strong>，同时具有 <code>length</code> 属性</li><li>可以用<code>[]</code>方括号，书写下标方式访问对象中属性值，下标从 <code>0</code> 开始</li><li>它<strong>并不拥有全部</strong>的 Array 对象的操作方法，如push,pop,unshift,shift等方法，arguments 都没有<blockquote><p>类数组是一个对象，他是 <code>Object</code> 的实例，而数组是 <code>Array</code> 的实例，所以类数组并不具有 Array 对象的方法<br>但类数组和数组，他们的<strong>原型终点</strong>都指向 <code>Object</code> 的原型，所以他们都具有 <code>Object</code> 对象上的方法</p></blockquote></li></ul><pre><code>function fn() &#123;  var isArr = Array.isArray(arguments);  console.log(isArr); // false  不是数组  console.log(typeof arguments); // object  是一个对象  console.log(arguments instanceof Object); // true 是Object的实例&#125;fn();</code></pre></blockquote></li></ol><p><strong>类数组转换为数组的几种方法：</strong></p><blockquote><blockquote><p>我们想要类数组拥有数组的相关方法，则可以把类数组转换为数组再操作。</p></blockquote><ul><li>for 循环遍历</li></ul><pre><code>// for循环遍历function fn() &#123;  var arr = [];  // 将arguments中元素取出，放到一个新数组中，后面操作的都是这个新数组  for (var i = 0; i &lt; arguments.length; i++) &#123;    arr[i] = arguments[i];  &#125;  // 接下来操作arr这个数组就好  arr.push(&quot;A&quot;);  console.log(arr); // [1, 2, 3, &#39;A&#39;]&#125;fn(1, 2, 3);</code></pre><blockquote><p>注意，并不是直接把类数组转换成数组，而是定义一个新数组，将类数组的元素取出来放入新数组中，操作新数组</p></blockquote></blockquote><blockquote><ul><li>使用数组的 <code>slice() </code>和 <code>concat() </code>方法</li></ul><pre><code>function fn() &#123;  // 本质是把arguments中元素遍历后放到一个新数组中，换成后将新数组返回。  var arr = Array.prototype.slice.call(arguments);  // var arr = Array.prototype.concat.apply([], arguments);  arr.push(&quot;A&quot;);  console.log(arr);  console.log(arguments); // arguments并没有做任何改变&#125;fn(1, 2, 3);</code></pre></blockquote><blockquote><ul><li>Array.from：该静态方法从可迭代或类数组对象创建一个新的浅拷贝的数组实例。</li><li>Array.apply</li></ul><pre><code>// 创建一个类数组对象var obj = &#123;  length: 2,  0: 1,  1: 2,&#125;;// var arr = Array.from(obj);var arr = Array.apply(null, obj);arr.push(&quot;A&quot;);console.log(arr);</code></pre></blockquote><p><strong>常见的类数组有</strong></p><blockquote><ul><li>arguments、NodeList，HTMLCollection 、DOMTokenList 等<blockquote><p><strong>特别注意</strong></p><ul><li>字符串，有 <code>length</code> 属性，也可以<code>[]</code>括号的方式访问元素，但是他<strong>不是一个对象</strong>，所以他不是类数组。</li></ul></blockquote></li></ul></blockquote><ol start="10"><li>案例：编写一个函数，根据输入的参数，在页面输出所有参数相加的公式<blockquote><ul><li><code>fn(1)</code> 得到 <code>0+1=1</code></li><li><code>fn(1,2)</code> 得到 <code>1+2=3</code></li><li><code>fn(1,2,3)</code> 得到 <code>1+2+3=6</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拼接字符串</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>sum <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//累加器</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  str <span class="token operator">=</span> <span class="token string">"0+"</span> <span class="token operator">+</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//只有一个数时</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  str <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//非末尾数时</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  str <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//最后一位数，不需要带+号</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0+1=1</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1+2=3</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1+2+4=7</span></code></pre></blockquote></li></ol><h3 id="四、函数返回值"><a href="#四、函数返回值" class="headerlink" title="四、函数返回值"></a>四、函数返回值</h3><blockquote><ul><li>函数体内可以使用<code>return</code>关键字来返回<strong>函数的返回值</strong></li><li><code>return</code>可以返回<strong>任意类型的值</strong>，即函数返回值可以是任意类型，但只能返回一个值</li><li><code>return</code>后面的值，就是函数调用执行后的返回值</li></ul><pre><code>function sum(a, b) &#123;  return a + b;&#125;var result = sum(1, 3);console.log(result); // 4</code></pre></blockquote><blockquote><ul><li>return 后面只能返回 1 个值，如果多个值，则以最后一个为准</li></ul><pre><code>function fn() &#123;  return 1, &quot;A&quot;, [1, 2, 3];&#125;console.log(fn()); // [1, 2, 3]</code></pre></blockquote><blockquote><ul><li>函数里没有<code>return</code> 或 <code>return ;</code> ，则函数的返回值是<code>undefined</code>;</li></ul><pre><code>function fn() &#123;  console.log(&quot;没有返回值&quot;);&#125;console.log(fn());//没有返回值//undefined</code></pre></blockquote><blockquote><ul><li>函数的返回值，可以被一个变量接收，这个变量可以参与后续的使用<blockquote><p>return 只能出现在函数中，出现在其它地方会报错</p></blockquote></li></ul></blockquote><ol><li>遇见 <code>return</code> 即<strong>退出</strong>函数<blockquote><ul><li>函数中<code>return</code>语句<strong>之后</strong>的内容，是不会被执行的</li><li><code>return</code>相当于<strong>立即退出</strong>函数</li><li><code>return</code>只能出现在<strong>函数体</strong>中</li></ul></blockquote></li></ol><blockquote><blockquote><p>只有第一个<code>console.log(result);</code>会被执行</p></blockquote><pre><code>function sum(a, b) &#123;    console.log(&quot;return前内容&quot;);    return a + b;    console.log(result);   &#125;  var result = sum(1, 3);  console.log(result);   //return前内容  //4</code></pre></blockquote><blockquote><blockquote><p>遇到return 立即退出函数体</p></blockquote><pre><code>function max(a, b) &#123;  if (a &gt; b) return a;  return b;&#125;console.log(max(12, 5)); // 12console.log(max(5, 6)); // 6</code></pre></blockquote><ol start="2"><li><p>return 与 if 的结合</p><blockquote><ul><li>结合if语句的时候，如果if语句体中<strong>只有一条</strong>语句，不需要写<code>&#123; &#125;</code><br><strong>题目：请编写一个函数，判断一个数字是否是偶数</strong></li></ul><pre><code>function checkEven(n) &#123;  // if(n % 2 == 0)&#123;  //   return true;  // &#125;  // return false;</code></pre></blockquote><p>  &#x2F;&#x2F; 单行语句，也可以省略{} ,在实际工作中类似写法很常见<br>  if (n % 2 &#x3D;&#x3D; 0) return true;<br>  return false;<br>}</p><blockquote></blockquote><p>var result &#x3D; checkEven(5);<br>console.log(result); &#x2F;&#x2F; false</p><blockquote><pre><code></code></pre></blockquote></li><li><p>return 与循环语句结合</p><blockquote><ul><li>return 可以在函数体中与 <code>if</code> 语句，<code>循环语句</code>结合使用<br><strong>题目：</strong></li><li>找出数组<code>[200,500,900,1200,1500]</code>中比600大的第一个值出现的位置，并将其返回。</li></ul><pre><code>var arr = [200, 500, 900, 1200, 1500];  function firstIndex(n) &#123;   for (var i = 0; i &lt; arr.length; i++) &#123;     if (arr[i] &gt;= n) return i;   &#125; &#125;  var _index = firstIndex(600);  console.log(_index);</code></pre></blockquote></li><li><p>return、break、continue 三者区别</p><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>break</td><td>在循环语句中使用，结束当前循环体（如 for 循环，while 循环）</td></tr><tr><td>continue</td><td>在循环语句中使用，跳出本次循环，继续执行下一次循环（如：for 循环，while 循环）</td></tr><tr><td>return</td><td>return 关键 字，只能出现在函数体中，不仅能退出循环，退出函数体，还能将 return 语句中的值返回，其返回值为函数返回值</td></tr></tbody></table></li></ol><blockquote><ul><li>break 退出当前 for 循环</li></ul><pre><code>function fn() &#123;  for (var i = 0; i &lt; 10; i++) &#123;    if (i == 3) &#123;      break;    &#125;    console.log(i);  &#125;  console.log(&quot;break,continue退出时，我会出来&quot;);&#125;fn();//0//1//2//break,continue退出时，我会出来</code></pre></blockquote><blockquote><ul><li>continue 跳出本次循环，继续执行下一次循环</li></ul><pre><code>function fn() &#123;  for (var i = 0; i &lt; 10; i++) &#123;    if (i == 3) &#123;      continue;    &#125;    console.log(i);  &#125;  console.log(&quot;break,continue退出时，我会出来&quot;);&#125;fn();//0 1 2 4 5 6 7 8 9//break,continue退出时，我会出来</code></pre></blockquote><blockquote><ul><li>return 不仅能退出循环，<strong>退出函数体</strong></li></ul><pre><code>function fn() &#123;  for (var i = 0; i &lt; 10; i++) &#123;    if (i == 3) &#123;      return;    &#125;    console.log(i);  &#125;  console.log(&quot;break,continue退出时，我会出来&quot;);&#125;fn();//0 1 2</code></pre></blockquote><h3 id="五、函数作为参数"><a href="#五、函数作为参数" class="headerlink" title="五、函数作为参数"></a>五、函数作为参数</h3><ol><li>函数做为参数的应用<blockquote><ul><li>函数作为函数的参数，在实际的开发中经常用到，特别是我们常用的各种API（那些封装好的函数就叫做API），其参数经常是一个函数。</li><li>所以理解函数做为函数的参数，在内部是如何处理的，对我们学习API方法是非常用帮助的。</li></ul></blockquote></li></ol><ul><li><p>函数fn2作为函数fn的参数，函数fn2不带参数时</p><blockquote><pre><code>// 声明一个函数，其参数a也是一个参数function fn(a) &#123;a(); // 内部执行函数a&#125;// 声明一个函数function fn2() &#123;console.log(&quot;我是在fn的内部被调用&quot;);&#125;// 调用fn函数，把函数fn2作为fn函数的参数fn(fn2);</code></pre></blockquote></li><li><p>函数fn2 作为函数fn的参数，函数fn2带参数时（非常重要，一定要掌握）</p><blockquote><pre><code>// 声明一个函数，其参数a是一个函数function fn(a) &#123;a(2, 4); // 调用函数&#125;// 声明一个函数function fn2(a, b) &#123;console.log(a + b);&#125;// 调用fn函数，把函数fn2作为fn函数的参数fn(fn2); // 6</code></pre></blockquote><p>&#x2F;&#x2F; fn(fn2(2,4));   错误的用法</p><blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><blockquote><p>初学常见错误</p></blockquote><ul><li>函数带参数时，常会引发这种错误的使用<code>fn(fn2(2,4))</code></li><li>这里的<code>fn2(2,4)</code>被调用，返回值为<code>undefined</code>，相当于传过去的实参是<code>undefined</code>(因为没有return)</li><li><strong>切记：</strong> 函数做为参数，是没有办法把实参传过去，实参只能在函数调用的时候传递</li></ul></blockquote><ol start="2"><li>手写一个函数，返回数组中最大值或最小值</li></ol><ul><li><p>写一个函数，返回数组中最大值</p><blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//声明函数find(arr)</span> <span class="token keyword">function</span> <span class="token function">find1</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">var</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//max &lt; arr[i]</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">return</span> max<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//遍历之后返回最大值</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//声明数组</span> <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用函数</span> <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">find1</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li><li><p>写一个函数，返回数组中最小值</p><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">find2</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">var</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// min > arr[i]</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     min <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">return</span> min<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">find2</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li></ul><blockquote><blockquote><p>我们对比以上两个函数会发现：</p></blockquote><ul><li>他们的实现除了<code>if (max &lt; arr[i])</code>和<code>if (min &gt; arr[i])</code>不一样，其它全一样</li><li>那我们是不是可以写一个函数，把<code>max</code>和<code>arr[i]</code>作为函数的参数，让用户来决定输出最大值还是最小值</li></ul></blockquote><ul><li>根据函数参数，来决定返回数组中最大值，还是数组中最小值<blockquote><ul><li>用不同函数作为参数</li></ul><pre><code>function minmax(arr, fn) &#123; var value = arr[0]; for (var i = 1; i &lt; arr.length; i++) &#123;   // fn1:max-arr[i] &lt; 0,a-b&lt;0   // fn2:arr[i]-min &lt; 0,b-a&lt;0   if (fn(value, arr[i]) &lt; 0) &#123;     value = arr[i];   &#125; &#125; return value; &#125; var arr = [1, 4, 5, 6, 2, 40, 39, 58]; function fn1(a, b) &#123; return a - b; &#125; function fn2(a, b) &#123; return b - a; &#125; var max = minmax(arr, fn1); var min = minmax(arr, fn2); console.log(max, min);</code></pre></blockquote></li></ul><ol start="3"><li>手写一个 filter 函数<blockquote><ul><li>函数功能： 实现返回数组中所有大于&#x2F;小于 n 的元素，返回值为所有满足条件的元素组成的数组</li></ul></blockquote></li></ol><blockquote><blockquote><p>返回<strong>大于10</strong>的元素</p></blockquote><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">filter1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// arr[i]-value>0</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       arr2<span class="token punctuation">[</span>arr2<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> arr2<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">filter1</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><blockquote><blockquote><p>返回<strong>小于10</strong>的值</p></blockquote><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">filter2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// value-arr[i]>0</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       arr2<span class="token punctuation">[</span>arr2<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> arr2<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">filter2</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><blockquote><blockquote><p>封装成方法：</p></blockquote><pre><code>function filter(arr, fn) &#123;   var arr2 = [];   var len = arr.length;   for (var i = 0; i &lt; len; i++) &#123;     // value-arr[i]&gt;0     if (fn(arr[i], value) &gt; 0) &#123;       arr2[arr2.length] = arr[i];     &#125;   &#125;   return arr2; &#125; function fn1(a, b) &#123;   // a=arr[i],b=value   return a - b; &#125; function fn2(a, b) &#123;   // a=arr[i],b=value   return b - a; &#125; //测试：改变value、arr，选择范围 //   比10更大的 var arr1 = [1, 15, 6, 10, 12, 13, 9]; var value = 10; var moreMax = filter(arr1, fn1); console.log(moreMax); //   比8更小的 var value = 8; var moreMin = filter(arr1, fn2); console.log(moreMin);</code></pre></blockquote><ol start="4"><li>函数作为参数的常见 API<blockquote><ul><li>在后期的学习中，我们经常会碰到方法的参数是一个函数，所以这个点一定要理解透。<blockquote><p>学好一个 API，本质就是掌握以下三点：</p><ul><li>这个 <code>API</code> 方法的<strong>主要功能</strong>是什么。</li><li>作为<strong>函数参数的函数</strong>，他的功能是什么，他的参数是什么，有什么用。</li><li>了解 API 方法，<strong>内部</strong>大概是如何实现的。</li></ul></blockquote></li></ul></blockquote></li></ol><blockquote><ul><li>以下是数组中常见的方法，其参数是一个函数</li></ul><pre><code>// 排序函数sort(function(a,b)&#123;    return a-b;&#125;)</code></pre></blockquote><p>&#x2F;&#x2F; 返回数组中满足条件的元素组成一个新数组（过滤数组中不满足条件的）<br>filter(function(element, index, array) {<br>    return element &gt;10;<br>}</p><blockquote></blockquote><p>&#x2F;&#x2F; 返回满足条件的 第一个元素<br>find(function(element) {<br>    return element &gt;10;<br>})</p><blockquote><pre><code></code></pre></blockquote><blockquote><pre><code>// 定义数组var arr = [1, 3, 34, 5, 20, 68, 56];</code></pre></blockquote><p>&#x2F;&#x2F; 返回数组中所有大于10的元素组成的新数组<br>var result &#x3D; arr.filter(function (value) {<br>  return value &gt; 10;<br>});<br>console.log(result); &#x2F;&#x2F; [34, 20, 68, 56]</p><blockquote></blockquote><p>&#x2F;&#x2F; 返回数组中第一个大于10的元素<br>var result2 &#x3D; arr.find(function (value) {<br>  return value &gt; 10;<br>});<br>console.log(result2); &#x2F;&#x2F; 34</p><blockquote></blockquote><p>&#x2F;&#x2F; 数组升序排序<br>arr.sort(function (a, b) {<br>  return a - b; &#x2F;&#x2F; a-b 升序  b-a 降序<br>});<br>console.log(arr); &#x2F;&#x2F;  [1, 3, 5, 20, 34, 56, 68]</p><blockquote><pre><code></code></pre></blockquote><p><strong>强烈建议</strong></p><blockquote><ul><li>在学习相关 API 时，如果 API 中的参数是一个函数，可以尝试自己去实现这个方法。</li><li>只有这样，你未来在应用这个 API 时，才能保持最大的灵活性，把优势发挥到最大。</li></ul></blockquote><h3 id="六、作用域和作用域链"><a href="#六、作用域和作用域链" class="headerlink" title="六、作用域和作用域链"></a>六、作用域和作用域链</h3><blockquote><p>以下关于作用域和作用域链，我们并不涉及底层执行原理，底层执行原理在对象讲完后再讲。<br><strong>作用域：</strong></p><ul><li>可以理解为一套规则，这套规则规定了变量的作用范围。在 <code>JS</code> 中我们就是根据这套规则来查找变量的。</li></ul></blockquote><ol><li>作用域的分类<blockquote><p>JS 中有 3 种类型作用域：全局作用域、函数作用域、块级作用域（ES6 中新增）<br><strong>全局作用域：</strong></p><ul><li>直接编写在<code>&lt;script&gt;</code>标签中的<code>JS</code>代码<strong>或</strong>单独的<code>JS</code> 文件中代码，都是在全局作用域</li><li>声明在全局作用域中的变量为<strong>全局变量</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ul><li>a是全局变量，fn和fn2是全局变量也称全局函数</li></ul></blockquote></li></ol><p><strong>函数作用域：</strong></p><blockquote><ul><li>函数作用域，也称为局部作用域，所有写在<strong>函数内部</strong>的代码，就是在函数作用域中。</li><li>声明在函数作用域中的变量为<strong>局部变量</strong></li></ul><pre><code>var a = 2;  function fn() &#123;&#125;  function fn2() &#123;    var b = 3;    function fn3() &#123;      console.log(&quot;fn3中&quot;);    &#125;  &#125;</code></pre><ul><li>fn2函数体中的变量 b，函数fn3 都是在函数作用域中</li></ul></blockquote><p><strong>块级作用域</strong>： </p><blockquote><ul><li>使用 let 或 const 关键字声明的变量，会形成块级作用域，暂不做介绍，等学到 ES6 时再讲</li></ul></blockquote><ol start="2"><li>作用域中变量访问权限<blockquote><ul><li>在<strong>全局</strong>作用域中，是<strong>没有办法</strong>访问到<strong>函数</strong>作用域中的变量（局部变量）（除闭包外）</li></ul><pre><code>var a = 2; // 全局作用域中function fn() &#123;  var b = 3; // 函数作用域中&#125;// 全局作用域是不能访问函数作用域中变量console.log(b); // Uncaught ReferenceError: b is not defined</code></pre></blockquote></li></ol><blockquote><ul><li>在<strong>函数</strong>作用域中，是<strong>可以</strong>访问全局作用域中的变量（全局变量）</li></ul><pre><code>var a = 2; // 全局作用域function fn() &#123;  var b = 3; // 函数作用域  console.log(a); // 2  函数作用域，是可以访问全局作用域中的变量&#125;fn();</code></pre></blockquote><ol start="3"><li>作用域链<blockquote><ul><li>当在一个函数内部嵌套一个函数时，就会发生作用域的嵌套。其<strong>内部函数</strong>可以访问到<strong>外层函数</strong>和<strong>全局作用域</strong>中的变量，其就是沿着作用域链<strong>一层一层</strong>来查找的。</li><li>你可以把作用域理解为，当函数发生嵌套时，内层函数会沿着嵌套的作用域一层层往外查找变量，这种查找方式就好比作用域形成了一个链条，故称为作用域链查找。</li></ul></blockquote></li></ol><ul><li><p><strong>作用域链查找规则</strong></p><blockquote><ul><li>在函数作用域中，操作一个变量时，会由当前函数作用域向外层作用域寻找变量</li><li>如果在<strong>当前作用域</strong>中能找到，就直接使用</li><li>如果找不到就向<strong>上一层</strong>作用域中寻找，找到就直接使用</li><li>如果一直找到<strong>全局作用域</strong>中依然找不到，则会报错。</li></ul><pre><code>var a = 1;function fn() &#123;var b = 2;console.log(a); // 1function fn2() &#123;  var c = 3;  console.log(b); // 2  console.log(c); // 3&#125;fn2();&#125;fn();</code></pre></blockquote><p>&#x2F;&#x2F; 代码从上往下执行，当fn()被执行后，就会执行fn函数体中的代码，当执行到console.log(a)时，在当前函数作用域中，没有变量a，其就会往fn函数的外层作用域，即全局作用域中去查找，找到a&#x3D;1,然后在控制台打印1<br>&#x2F;&#x2F; 接着执行fn2(),当执行到console.log(b)，他会先在当前作用域中找，找不到，则往外层作用域中找，最后在fn函数作用域中找到，b&#x3D;2,直接使用值，在控制台输出2<br>&#x2F;&#x2F; 接着执行console.log(c),首先在当前作用域找，找到了c&#x3D;3，则直接在控制台输出3</p><blockquote><pre><code></code></pre></blockquote></li><li><p><strong>遮蔽效应</strong></p><blockquote><ul><li>所谓的遮蔽效应是指，如果函数中定义了和全局同名的变量，则<strong>函数内</strong>的变量会将全局的变量“遮蔽”</li></ul><pre><code>var a = 2;function fn() &#123;var a = 3;console.log(a); // 3&#125;fn();</code></pre></blockquote></li><li><p><strong>形参也是局部变量</strong></p><blockquote><pre><code>var a = 12;function fn(a) &#123;  //形参相当于 var a;  console.log(a); // 8&#125;fn(8);console.log(a); // 12</code></pre></blockquote></li><li><p><strong>特殊的全局变量</strong></p><blockquote><ul><li><strong>非严格模式</strong>下,在函数里没有用 <code>var</code> 关键字声明的变量，是<strong>全局变量</strong> (但严格模式下会报错)</li></ul><pre><code>function fn() &#123;a = 4;&#125;fn(); // 函数调用后，a全局变量会被创建console.log(a, window.a); // 4 4</code></pre></blockquote></li></ul><blockquote><pre><code>function fn() &#123;  &quot;use strict&quot;;  a = 4;&#125;fn(); console.log(a, window.a); // ncaught ReferenceError: a is not defined</code></pre></blockquote><ol start="4"><li>严格模式<blockquote><p>在 ES5 中增加了严格模式概念，在严格模式下，之前的一些不规范的写法在这种模式下会被处理掉，甚至会直接抛出错误。<br><strong>为什么使用严格模式 ？</strong></p><ul><li>严格模式消除了 JavaScript 语法的一些不合理、不严谨之处，减少一些怪异行为</li><li>消除代码运行一些不安全之处，保证代码运行的安全</li><li>提高代码编译效率，增加运行速度</li><li>为未来新版本的 JavaScript 做好铺垫</li></ul></blockquote></li></ol><ul><li><p>对<strong>整个</strong> JS 代码开启严格模式:</p><blockquote><ul><li>在所有 JS 代码的<strong>最前面</strong>加上”use strict”</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">// 'use strict ' 是一个预处理执令，告诉JS引擎启用严格模式</span><span class="token string">"use strict"</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在严格模式下，定义变量必需用var关键词</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught ReferenceError: a is not defined</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote></li><li><p><strong>单独指定</strong>一个函数在严格模式下执行</p><blockquote><ul><li>只需要把”use strict”放在函数体的最前面。函数体中的代码就需要遵顺严格模式</li></ul><pre><code>c = 4;console.log(c); // 4</code></pre></blockquote><p>function b() {<br>“use strict”; &#x2F;&#x2F; 严格模式只能函数体内有效<br>a &#x3D; 4;<br>console.log(a); &#x2F;&#x2F; Uncaught ReferenceError: a is not defined<br>}<br>b();</p><blockquote><pre><code></code></pre></blockquote></li></ul><ol start="5"><li><p>在严格模式下：</p><blockquote><ul><li>变量必须<strong>先声明，再使用</strong>（声明变量用 var、const、let）</li><li>在严格模式中，全局作用域中的函数内部 <code>this</code> 默认指向 <code>undefined</code><ul><li>而在非严格模式中，全局作用域中的函数内部 this 默认指向 <code>window</code></li></ul></li><li>函数参数不能重名<ul><li>非严格模式下，允许重复变量命名</li></ul></li><li>禁止使用 <code>with</code></li></ul></blockquote></li><li><p>静态作用域和动态作用域</p><blockquote><ul><li>静态作用域：又称词法作用域，是指作用域在词法阶段就被确定了<strong>（函数定义的位置就决定了函数的作用域）</strong>，以后是不会改变。</li><li>动态作用域：函数的作用域在函数调用时才决定的。<blockquote><p>特别注意：Javascript采用的是词法作用域 ( 静态作用域 )</p></blockquote></li></ul><pre><code> var a = 3; var b = 4; function fn(a) &#123;function fn2(b) &#123;  fn3(b); //fn3(4)=4  fn3(); //undefined&#125;function fn3(b) &#123;  console.log(b); //4&#125;fn2(b); //b=4 &#125; fn(a); //a=3</code></pre></blockquote></li><li><p>测试题</p><blockquote><pre><code> var a = 3; var b = 4; function fn(a) &#123;function fn2(b) &#123;  var b = 2;  console.log(a); //3  fn3(b); //b=2  fn3(); //undefined  fn4();&#125;function fn3(b) &#123;  console.log(b); //2&#125;function fn4() &#123;  console.log(b); //4&#125;fn2(b); //b=4 &#125; fn(a); //a=3</code></pre></blockquote></li></ol><blockquote><pre><code> var a = 1; var b = 3; var c = 2; function fn(a) &#123;   var b = 3;   console.log(a, b);//1,3   function fn2(b) &#123;     //b=c=2     var c = 4;     console.log(a);//1     console.log(b);//2     console.log(c);//4   &#125;   fn2(c);//c=2 &#125; fn(a);//a=1</code></pre></blockquote><h3 id="七、变量提升与函数声明提升"><a href="#七、变量提升与函数声明提升" class="headerlink" title="七、变量提升与函数声明提升"></a>七、变量提升与函数声明提升</h3><blockquote><p>以下关于变量和函数提升，我们并不涉及底层执行原理，底层执行原理在对象讲完后再讲。</p></blockquote><ul><li>在讲解变量提升与函数声明提升前，我们先来看下面这一段代码<blockquote><pre><code>console.log(a); // undefinedfn(); // undefinedvar a = 2;console.log(a); // 2function fn() &#123;console.log(a);&#125;fn(); // 2console.log(c);//报错</code></pre></blockquote></li></ul><p><strong>我们都知道</strong></p><blockquote><ul><li><code>Javascript</code> 代码是按顺序从上往下执行的，若按这个逻辑来理解的话<ul><li>当执行到第 1 行时，由于a这个变量还没有被声明，那肯定是要报错的，但这里没有报错，而是输出了<code>undefined</code></li><li>同理，当执行到第 2 行时，fn 这个函数还没有声明，那肯定也会报错，但同样没有报错，输出了<code>undefined</code></li></ul></li><li>但是当我们使用全程<strong>没有声明</strong>的c时，则直接报错</li></ul></blockquote><p><strong>由此我们可以得出如下三个结论：</strong></p><blockquote><ul><li>JS 在执行过程中，若使用了<strong>未声明</strong>的变量，那 JS 执行就会<strong>报错</strong></li><li>如果在一个变量<strong>声明之前使用他</strong>，不会报错，但输出值为 <code>undefined</code></li><li>如果在一个函数<strong>声明前</strong>使用它，不会出错，<strong>可以正常执行</strong></li></ul></blockquote><ol><li>变量提升和函数提升<blockquote><ul><li>js是边编译，边执行的，所以他在执行js代码前，有一个预编译的过程</li></ul></blockquote></li></ol><ul><li>变量提升<blockquote><ul><li>是指使用 var 关键字声明的变量会被提升到当前作用域的最顶部</li><li>变量提升，提升的是变量，变量提升后，变量的默认值是undefined</li></ul></blockquote></li><li>函数提升<blockquote><ul><li>是指使用函数声明创建的函数，其也会被提升到当前作用域的最前面</li><li>这里要区分函数声明和函数表达式</li></ul></blockquote></li></ul><blockquote><pre><code>console.log(a);b();var a = 2;function b() &#123;  console.log(&quot;要注意我喽！&quot;);&#125;</code></pre></blockquote><p>&#x2F;&#x2F; 上面代码，会先把带var声明的变量和用function声明的函数，提升到当前作用域的最前面<br>&#x2F;&#x2F; 提升后代码其形式如下：<br>var a;<br>function b() {<br>  console.log(“要注意我喽！”);<br>}<br>console.log(a);<br>b();<br>a &#x3D; 2;</p><blockquote></blockquote><p>&#x2F;&#x2F; 提升后，其代码执行流程如下：<br>&#x2F;&#x2F; - 代码从上往下执行<br>&#x2F;&#x2F; - 执行到第1行，a的默认值是undefined<br>&#x2F;&#x2F; - 执行到第2行，是函数声明，啥也不做，往下继续执行<br>&#x2F;&#x2F; - 执行到第5行，打印a,，结果是undefined<br>&#x2F;&#x2F; - 执行到第6行，调用函数，函数体中打印  <strong>”要注意我喽！“</strong></p><blockquote><pre><code></code></pre></blockquote><ol start="2"><li>函数提升，区分函数声明与函数表达式<blockquote><ul><li>函数声明：<code>function b()&#123;&#125;;</code></li><li>函数表达式：<code>var a=function b()&#123;&#125;;</code></li></ul></blockquote></li></ol><blockquote><pre><code>console.log(a);console.log(b);b();a();var a = function () &#123;  console.log(&quot;我在a函数中&quot;);&#125;;function b() &#123;  console.log(&quot;我在b函数中&quot;);&#125;</code></pre></blockquote><p>&#x2F;&#x2F; 首先把var和function声明的函数，提升到当前作用域最前面，提升后代码如下：<br>var a;<br>function b() {<br>  console.log(“我在b函数中”);<br>}<br>console.log(a);<br>console.log(b);<br>b();<br>a();<br>a &#x3D; function () {<br>  console.log(“我在a函数中”);<br>};</p><blockquote></blockquote><p>&#x2F;&#x2F; 提升后代码，代码从上往下执行<br>&#x2F;&#x2F; 执行到console.log(a); 在控制台输出 undefined,因为此时a声明了，但没有赋值,默认值为undefined<br>&#x2F;&#x2F; 执行到console.log(b); 在控制台输出整个 b的函数声明<br>&#x2F;&#x2F; 执行到 b() ，调用函数,在控制台输出  “我在b函数中”<br>&#x2F;&#x2F; 执行到a()，因为些时a还是undefined，所以没有办法调用，即报错</p><blockquote><pre><code></code></pre></blockquote><ol start="3"><li>函数提升优先级<strong>高于</strong>变量提升<blockquote><p><strong>在同一作用域下</strong></p><ul><li>如果出现<strong>同名的</strong>函数和变量，则在变量和函数提升时，会以<strong>函数</strong>为主</li><li>同名的函数在函数声明提升时，写在后面的会<strong>覆盖</strong>前面的</li></ul></blockquote></li></ol><p><strong>同名的函数</strong></p><blockquote><pre><code>a(); // 2function a() &#123;  console.log(&quot;1&quot;);&#125;function a() &#123;  console.log(&quot;2&quot;);&#125;a(); // 2//预编译之后：//后面的覆盖前面的function a() &#123;  console.log(&quot;2&quot;);&#125;a();a();</code></pre></blockquote><p><strong>同名的变量和函数</strong></p><blockquote><pre><code>console.log(a);a();function a() &#123;  console.log(&quot;a中&quot;);&#125;var a = 3;console.log(a);a = 4;console.log(a);</code></pre></blockquote><p>&#x2F;&#x2F; 上面代码在执行前，变量和函数声明提升后代码如下：<br>function a() {<br>  console.log(“a中”);<br>}<br>console.log(a);<br>a();<br>a &#x3D; 3;<br>console.log(a);<br>a &#x3D; 4;<br>console.log(a);<br>&#x2F;&#x2F; - 代码从上往下执行<br>&#x2F;&#x2F; - 执行到console.log(a)时，打印函数a<br>&#x2F;&#x2F; - 执行到a()时，调用函数，执行函数体中代码，输出 ‘a中’<br>&#x2F;&#x2F; - a&#x3D;3，给a重赋值，console.log(a)  打印出 3<br>&#x2F;&#x2F; - a&#x3D;4,给a重新赋值，console.log(a),打印出4</p><blockquote><pre><code>&gt;注意第一个`console.log(a);`打印出的是函数</code></pre></blockquote><ol start="4"><li><p>测试题1</p><blockquote><pre><code>console.log(a);a();function a() &#123;  console.log(&quot;a1&quot;);&#125;var a = 2;function a() &#123;  console.log(&quot;a2&quot;);&#125;var b = a;console.log(b);</code></pre></blockquote><p>&#x2F;&#x2F;预编译后：<br>function a() {<br>  console.log(“a2”);<br>}<br>var b;<br>console.log(a);&#x2F;&#x2F;函数a<br>a();&#x2F;&#x2F;“a2”<br>var a &#x3D; 2;<br>b &#x3D; a;<br>console.log(b);&#x2F;&#x2F;b&#x3D;a&#x3D;2</p><blockquote><pre><code>&gt;注意`var a=2;`由于优先级低，所以不会被预编译(并不代表他不会被执行)，但是，当执行到它时，会覆盖前面的a，此时a就由函数变成了基本数据类型。</code></pre></blockquote></li><li><p>测试题2</p><blockquote><pre><code>console.log(a);a();function a() &#123;  console.log(&quot;a1&quot;);&#125;var a = 2;function a() &#123;  console.log(&quot;a2&quot;);&#125;console.log(a);var a = function () &#123;  console.log(&quot;a3&quot;);&#125;;console.log(a);预编译后：function a() &#123;  console.log(&quot;a2&quot;);&#125;console.log(a);//函数aa();//&quot;a2&quot;var a = 2;//覆盖aconsole.log(a);//2var a = function () &#123;  console.log(&quot;a3&quot;);&#125;;//覆盖aconsole.log(a);//函数a</code></pre></blockquote></li></ol><h3 id="八、算法的核心理论"><a href="#八、算法的核心理论" class="headerlink" title="八、算法的核心理论"></a>八、算法的核心理论</h3><blockquote><p>算法有好有坏，判断算法好的重要标准就是算法的复杂度。</p></blockquote><ol><li>算法复杂度<blockquote><ul><li>算法复杂度： 是指程序执行时需要的<strong>计算量</strong>（计算时长）和<strong>内存空间</strong> （和代码是否简洁无关）</li><li>计算量： 是指<strong>时间复杂度</strong>，也就是计算一个算法运行得到结果所花的时间</li><li>内存空间： 是指<strong>空间复杂度</strong>，也就是计算一个算法运行得到结果所占用的内存空间的大小<blockquote><p>时间复杂度和空间复杂度 是衡量算法好环的两个非常重要的标准</p></blockquote></li></ul></blockquote></li></ol><ul><li><p>复杂度的概念</p><blockquote><ul><li>不管是空间复杂度，还是时间复杂度，这个复杂度，他指的是一个<strong>数量级</strong>（方便 记忆和推广）</li><li>他不是具体的数字，因为没办法计算。因为一个算法，他到底耗时多少，占用多少内存空间，多少次 CPU 的计算，我们没法精准的计算。</li><li>我们说，如果不能精准的去算，但是可以粗略的去计算和判断。这个粗略的方式就是我们提到的数量级的概念。</li></ul></blockquote></li><li><p>数量级概念</p><blockquote><ul><li>所谓的数量级，指数量的尺度或大小的级别，他是一个数的<strong>区间范围</strong>。</li></ul></blockquote></li></ul><ol start="2"><li>时间复杂度<blockquote><ul><li>如果代码还没有运行，我怎么能预知代码运行所花的时间呢？而且受<strong>运行环境</strong>和<strong>输入规模</strong>的影响，代码的绝对执行时间是无法预估的，但是我们可以预估代码的<strong>基本操作</strong>执行次数</li><li>我们根据代码的<strong>执行次数</strong>，来判断算法的时间复杂度，他分为以下几个等级：<img src="数量级.png"></li></ul></blockquote></li></ol><table><thead><tr><th>时间复杂度</th><th>说明</th></tr></thead><tbody><tr><td>O(1)</td><td>表示执行次数是可数的，同时和输入量<strong>无关</strong>。无论执行次数是 1、1000，10000，只要是可数的，同时和输入量无关，都不影响它的级别</td></tr><tr><td>O(logn)</td><td>执行次数是输入量（输入数据量）的<strong>对数</strong>。比如输入量是 100，计算量是 10，因为 10<sup>2</sup>是 100；当输入量是 1 亿时，计算量是 1 万 因为 10000<sup>2</sup>是 1 亿</td></tr><tr><td>O(n)</td><td>执行次数和输入量（输入数据量）是<strong>“一样”</strong>的，这里的一样，并不是说完全相等，是指同等级别增加。比如输入量是 n，计算量是 1n,2n,100n，那都属于这个等级。</td></tr><tr><td>O(n<code>*</code>logn)</td><td>执行次数&#x3D;数据量<code>*</code>数据量的对数 &#x3D; n<code>*</code>logn</td></tr><tr><td>O(n<sup>2</sup>)</td><td>执行次数&#x3D;输入量的平方，输入 10，执行 100 次，输入 100，执行 10000 次</td></tr></tbody></table><ul><li><p><strong>O(1)级别-时间复杂度</strong></p><blockquote><ul><li>只要是我们<strong>能够识别</strong>出来的一个计算量，同时和输入量<strong>无关</strong>，那他复杂度就是<code>O(1)</code></li><li>比如，不管输入量是多少，执行次数都是<strong>固定的</strong> 1 次或 1000 次或 10000 万，都属于<code>O(1)</code>级别</li></ul><pre><code>var arr = [1, 2, 3, 4]; // arr可以是 arr=[1,2,3,4,5,6,7,8,.....1000] 等function fn(arr) &#123;console.log(arr[0]);&#125;// 时间复杂度 O(1)级别// 不管arr 数组长度是多少，我的计算量都是1次，是可数的，不受输入量影响</code></pre></blockquote></li><li><p><strong>O(logn) 级别-时间复杂度</strong></p><blockquote><ul><li>执行次数是输入量（数据量）的<strong>对数</strong>(折半)</li><li>比如输入量是 100，计算量是 10，因为 10<sup>2</sup>是 100，</li><li>当输入量是 1 亿时，计算量是 1 万 因为 10000<sup>2</sup>是 1 亿<br><strong>常见的二分法：</strong> 其时间复杂度就是这个级别，每一次执行次数都为原来的 1&#x2F;2</li></ul></blockquote></li><li><p><strong>二分查找-数组中的某个元素</strong></p><blockquote><p>在升序的数组<code>[1,2,4,5,7,12,15,18,30,32,45]</code>中，查找值为 15 的元素<br><strong>如果用二分查找，我们会如何查找</strong></p><ul><li>我们首先会找到数组中的中间一个元素 12</li><li>然后拿 15 与 12 对比，如果小于 12，则在 12 左边元素中查找，如果大于 12，则在 12 的右边元素中查找</li><li>如果没找到，按上面查找方式，继续查找<img src="二分法.png"></li></ul></blockquote></li></ul><blockquote><p><strong>二分查找：</strong></p><ul><li>每次查找，查找范围都会缩小为上一次查找范围的<code>1/2</code>，其执行执数是输入量的对数</li><li>这个级别的时间复杂度，随着数据量的暴增，其时间消耗越来越<strong>趋向平缓</strong>。</li></ul></blockquote><ul><li><p>O(n)级别-时间复杂度</p><blockquote><ul><li>执行次数和输入量（数据量）是 <strong>“一样”</strong> 的，这里的一样，并不是说完全相等，是指同等级别增加</li><li>比如：输入量是 n，计算量是 1n,2n,100n，那都属于这个等级</li></ul><pre><code>// 时间复杂度 O(n)级别function fn(arr) &#123;for (var i = 0; i &lt; arr.length; i++) &#123;  console.log(arr[i]);  console.log(arr[i] + 10);&#125;&#125;// 执行次数受 输入量的影响，同时是同等级别增加// 如果arr数组长度为10，执行20次，长度为100，执行200次，长度为10000，执行20000次</code></pre></blockquote></li><li><p>O(n*logn)级别-时间复杂度</p><blockquote><ul><li>执行次数 &#x3D; 数据量 * 数据量的对数 &#x3D; n * logn</li><li>这种级别的时间复杂度，通常<ul><li>外层是一个 for 循环，时间复杂度为O(n)；</li><li>for 循环里面，来一个二分查找，二分查找复杂度是 O(logn), 两者一组合，时间复杂度就是 O(n*logn)</li></ul></li><li>我们后面算法中讲到的快速排序，其时间复杂度就是<code>O(n*logn)</code>级别，因为代码过于复杂，目前不做演示，后面学到再说</li></ul><pre><code>// 以下代码没有任何实际的意义，只是用来简单理解O(n*logn)的时间复杂度var arr = [1, 2, 3, 4, 5, 6, 7, 8];for (var i = 0; i &lt; arr.length; i++) &#123;for (j = i; j &gt; 1; j /= 2) &#123;  console.log(&quot;二分&quot;);&#125;&#125;</code></pre><blockquote><p>算法的时间复杂度，达到 <code>O(n*logn)</code>这个级别，只能算 ok，能接受，但肯定不是最优的</p></blockquote></blockquote></li><li><p>O(n<sup>2</sup>)级别-时间复杂度</p><blockquote><ul><li>执行次数（计算量）是输入量的平方</li><li>输入量是 10，执行 100 次，输入 100，执行 10000 次</li><li>常见的双层嵌套 for 循环，就是这个级别的时间复杂度</li></ul><pre><code>// 时间复杂度 O(n^2)级别  n^2表示n的平方// 执行次数是输入量的平方// 如果n=10，则执行100次，如果n=100，则执行10000次function fn(n) &#123;for (var i = 0; i &lt; n; i++) &#123;  for (var j = 0; j &lt; n; j++) &#123;    console.log(i + &quot;-&quot; + j);  &#125;&#125;&#125;fn(10);</code></pre><blockquote><p>算法时间复杂度，达到 O(n<sup>2</sup>)级别，几乎是没有办法用的，因为输入量越大，计算量暴增</p></blockquote></blockquote></li><li><p>总结</p><blockquote><ul><li>当 n 的取值足够大时，其算法耗时时间从小到大依次为：<ul><li>O(1) &lt; O(logn) &lt; O(n) &lt; O(n*logn) &lt; O(n<sup>2</sup>)</li></ul></li><li>当然，在编程世界中，各种各样的算法，除了上面提到的，还有许多不同形式的时间复杂度，如下<ul><li>O(n<sup>3</sup>)、O(mn)、O(2n)、O(n!)</li></ul></li></ul></blockquote></li></ul><ol><li>空间复杂度<blockquote><ul><li><strong>空间复杂度：</strong> 是指计算一个算法运行得到结果所占用的内存空间的大小</li><li>这个比时间复杂度相对要容易些，因为在<strong>前端领域</strong>，我们相对来说是<strong>重时间，轻空间</strong>的。</li><li>因为前端需要的更多的是<strong>运行的速度更快</strong>，比如我们常说的性能优化，本质就是在追求在尽可能最短的时间内来完成页面的渲染到呈现等。</li><li>因为前端是运行在浏览器中，相对来说内存空间是完全足够用的。只有那些做嵌入式开发的，内存相对比较少，需要节约着来用，对空间复杂度的要求会更高<img src="数量级.png"></li></ul></blockquote></li></ol><table><thead><tr><th>等级</th><th>说明</th></tr></thead><tbody><tr><td>O(1)</td><td>输入量增大，并不会影响需要的空间;当然，输入量增大，本身输入量占的空间肯定是会变大的</td></tr><tr><td>O(logn)</td><td>所需内存空间为输入量内存空间的的对数;输入量占内存空间为 100k，则对应增加内存空间为 10k</td></tr><tr><td>O(n)</td><td>输入量增大，所需要的内存空间与输入量成正比;比如输入量所需空间为 n，则相应的内存空间也会增到 1n，2n，3n 等，都属于 O(n)级别</td></tr><tr><td>O(n*logn)</td><td>所需内存空间 &#x3D; 输入量空间 * 输入量空间的对数</td></tr><tr><td>O(n<sup>2</sup>)</td><td>输入量增大，其所需要的内存空间为原来的平方；如：输入量所占内存空间为 n，则其内存空间会增加到 n<sup>2</sup></td></tr></tbody></table><ul><li><p>O(1)级别-空间复杂度</p><blockquote><ul><li>输入量增大，并不会影响<strong>需要的</strong>空间</li></ul><pre><code>// 空间复杂度为 O(1)// 输入量增大，并不会影响所需要的空间，不管arr多大，则变量a,b对应空间相对稳定function fn(arr) &#123;var a = arr[1];var b = arr[2];&#125;</code></pre><ul><li>并不是说<code>arr</code>长度的增加，所需要的内存不会增加</li><li>而是说函数体里声明的a、b变量所需要的空间不会随输入量的增大而增加</li></ul></blockquote></li><li><p>O(n)级别- 空间复杂度</p><blockquote><ul><li>输入量增大，所需要的内存空间与输入量成正比</li><li>比如：常见的数组拷贝(深克隆)，输入的数组变大，那拷贝到对应的数组也就会变大</li></ul><pre><code>// 空间复杂度为O(n)// 数组arr的输入量变大，其对应 arr2占用的内存也就相应变大, 这里假设arr中存的都是基本数据类型function deepClone(arr) &#123;// ......var arr2 = []; //  占用的内存空间for (var i = 0; i &lt; arr.length; i++) &#123;  arr2.push(arr[i]);&#125;&#125;</code></pre></blockquote></li><li><p>O(n<sup>2</sup>)级别- 空间复杂度</p><blockquote><ul><li>输入量增大，其所需要的内存空间为原来的平方</li><li>比如：常见的二维数组生成</li></ul><pre><code>// 空间复杂度 O(n2)// 当输入n为2时，所需要的空间为原来的4倍，当输入为7时，所需空间为原来的49倍function fn(n) &#123;var arr = [];for (var i = 0; i &lt; n; i++) &#123;  var arr2 = [];  for (var j = 0; j &lt; n; j++) &#123;    arr2[j] = j;    arr[i] = arr2;  &#125;&#125;console.log(arr);&#125;fn(7);</code></pre></blockquote></li></ul><ol start="4"><li>空间与时间的取舍<blockquote><ul><li>在前端这个领域，我们更注重时间复度，所以我们很多时候会牺牲一部分空间来换取时间。</li><li>如果实现同一个效果，有两种方法：<ul><li>方法一的时间复杂度 &lt; 方法二的空间复杂度</li><li>方法一的空间复杂度 &gt; 方法二的空间复杂度<br> 这个时候，我们会可能会选取方法一，因为前端更看重时间。当然在某些情况下，也有可能选择方法二，因为更看重空间内存的占用。具体情况以实际业务需求为主。<br><strong>重要提示：</strong></li></ul></li><li>程序员是必须掌握算法复杂度</li><li>如果你没有复杂度的概念和敏感度，写程序是非常危险的</li><li>代码功能测试正常，但数量大了，程序就会崩溃</li></ul></blockquote></li></ol><h3 id="九、递归与深克隆"><a href="#九、递归与深克隆" class="headerlink" title="九、递归与深克隆"></a>九、递归与深克隆</h3><ol><li>递归的定义和理解<blockquote><ul><li>所谓的递归 可以简单理解为一个函数的内部语句<strong>调用这个函数自身</strong>，一次一次的重复调用自身，直到函数执行到某一次时，因<strong>达到某种条件</strong>而终止了对自己的调用，然后返回最终结果。</li><li>递归是一种较为 高级的编程技巧，通常把一个大型复杂的问题层层转化为一个与原问题<strong>相似的规模较小的</strong>问题来求解 。</li></ul></blockquote></li></ol><ul><li>我们使用 5 的阶乘(factorial)来举例，了解什么是递归 ？<blockquote><ul><li>5！表示 5 的阶乘 5 的阶乘&#x3D;<code>5*4*3*2*1</code>; 4 的阶乘&#x3D;<code>4*3*2*1</code>; 3 的阶乘&#x3D;<code>3*2*1</code>;</li><li>转换思路： <code>5!=5*4!</code> <code>4!=4*3!</code> <code>3!=3*2!</code> <code>2!=2*1!</code> <code>1!=1</code><img src="递归-阶乘.png"></li></ul><pre><code>// 书写一个函数，这个函数内部自己会调用自己，从而形成递归// 函数的功能是计算n的阶乘，n的阶乘是 n*(n-1)的阶乘// n! = n * (n-1)!function factorial(n) &#123;// 递归的出口，当n=1时，返回1if (n == 1) return 1;// 如果询问的不是1的阶乘，就返回 n * (n-1)return n * factorial(n - 1);</code></pre></blockquote>&#x2F;&#x2F; 三目运算符<br>&#x2F;&#x2F; return n &#x3D;&#x3D; 1 ? 1 : n * factorial(n - 1);<br>}<blockquote></blockquote>var result &#x3D; factorial(5); &#x2F;&#x2F; 调用函数<br>console.log(result); &#x2F;&#x2F; 输出结果<blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><blockquote><p>使用递归需要满足两个条件：</p></blockquote><ul><li>边界条件：确定递归何时终止，找到递归的终止条件。也称之为递归出口</li><li>递归模式：大问题如何分解为小问题，子问题需与原问题同样的事，且规模更小 。也称为递归体<br><strong>递归的简单理解：</strong></li><li>就是函数内部调用函数自身，达到某个条件之后，停止调用</li></ul></blockquote><ol start="2"><li>斐波那契数列(fibonacci)<blockquote><ul><li>斐波那契数列是这样的数列：<code>1,1,2,3,5,8,13,21</code> 。求第 n 项的斐波那契<strong>数列</strong><br><strong>找规律：</strong></li><li>第 1 项&#x3D;1</li><li>第 2 项&#x3D;1</li><li>第 3 项是&#x3D;第 1 项+第 2 项</li><li>第 4 项&#x3D; 第 2 项+第 3 项</li><li>依次类推，后面每一项都等于前两项之和<br><strong>求出第 n 项的值，并列出第n项的数列</strong></li></ul></blockquote></li></ol><ul><li><strong>递归法：</strong><blockquote><ul><li>求出第 n 项的值：<ul><li>递归出口： n&#x3D;1 时和 n&#x3D;2 时分别返回 1 1</li><li>递归模式：f(n)&#x3D;f(n-1) +f(n-2)</li></ul></li><li>求出 n 项的斐波那契数列：<ul><li>利用 for 循环结合递归，把每一项的值计算得到，然后拼接成字符串</li></ul></li></ul><pre><code>// 这个函数的功能是返回斐波那契数列中下标为n的那项的值function fibonacci(n) &#123;// 数列的第1项和第2的项值是1if (n === 1 || n === 2) return 1;</code></pre></blockquote>&#x2F;&#x2F; 斐波那契数列的本质特征就是每一项，等于前面两项的和<br>return fibonacci(n - 1) + fibonacci(n - 2);<br>}<blockquote></blockquote>&#x2F;&#x2F;  求出n项的斐波那契数列<br>var result &#x3D; “”; &#x2F;&#x2F; 用来拼接每一项的值<br>for (var i &#x3D; 1; i &lt;&#x3D; 10; i++) {<br>result +&#x3D; fibonacci(i) + “,”;<br>}<br>console.log(result);<blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><ul><li>然而，这种做法的时间复杂度为2<sup>n</sup>，只要把值稍微改大点，电脑直接就崩溃了：<br><strong>递归版 - 时间复杂度</strong></li><li>我们假设，现在我们要找的是第 8 项的等差数列，那我们内部求出第 8 项的值，计算次数达到了2<sup>n</sup></li><li>再加上要求出整个数列，还要一次 for 循环，整个的级别已经远远超过 O(n<sup>2</sup>)了<img src="递归版斐波那契数列时间复杂度.png"></li></ul></blockquote><ul><li><strong>优化版——双指针法</strong><blockquote><ul><li>我们用两个变量分别来记录当前循环的<strong>前两项</strong></li><li>然后定义一个变量来计算当前项得结果，然后再更新下前两项的值，以便下一轮循环用到<blockquote><p>本次优化版本用到：双指针、字符串拼接</p></blockquote></li></ul><pre><code>// 1,1,2,3,5,8,13,21function fibnocci(n) &#123;var n1 = 1;var n2 = 1;var item; // 临时存储每一项值var str = &quot;&quot;; // 拼接字符串if (n == 1) str = &quot;1&quot;;if (n == 2) str = &quot;1,1&quot;;if (n &gt;= 3) str = &quot;1,1&quot;;</code></pre></blockquote>for (var i &#x3D; 3; i &lt;&#x3D; n; i++) {<br>  item &#x3D; n1 + n2; &#x2F;&#x2F; 计算得到当前项<br>  n1 &#x3D; n2; &#x2F;&#x2F; n1向右移<br>  n2 &#x3D; item; &#x2F;&#x2F; n2 向右移<br>  str +&#x3D; “,” + item; &#x2F;&#x2F; 拼接得到的 斐波那契数列<br>}<br>return str;<br>}<br>console.log(fibnocci(15)); &#x2F;&#x2F; 1,1,2,3,5,8,13,21,34,55,89,144,233,377,610<blockquote><pre><code></code></pre></blockquote></li></ul><blockquote><ul><li><strong>双指针版</strong></li><li>时间复杂度：整个过程下来，只有一层 for 循环，所以时间复杂度为 O(n)</li><li>空间复杂度为 O(n)，内存空间的占用，多了 <code>4</code> 个变量，其中 str 的空间占用受输入量 n 的影响最大，n 输入越大，str 的字符串越长。</li></ul></blockquote><ol start="4"><li>数组的深克隆<blockquote><ul><li>以下数组的克隆，只考虑<strong>数组中嵌套数组</strong>的情况，因为我们还没有学对象，等我们学完对象后，我们会再优化一个版本。<br><strong>深克隆函数功能</strong></li><li>用户希望在调用函数时，传入一个数组，然后就克隆一个和传入数组一模一样的数组出来。</li><li>这两个数组只是长得一样，但是两个完全独立的数组，互不干扰。即两个数组指向堆内存中的不同地址。</li></ul><pre><code>// 深克隆数组function deepClone(arr) &#123;  if (!Array.isArray(arr)) return;  var result = []; // 克隆成功后的结果数组  for (var i = 0; i &lt; arr.length; i++) &#123; // 判断，如果是基本数据类型，则直接push到数组中 // 不是数组就如何，是数组如何 if (Array.isArray(arr[i])) &#123;   // 如果是数组,返回的数组是不是要push到上一个数组中去   result.push(deepClone(arr[i])); &#125; else &#123;   result.push(arr[i]); &#125;  &#125;  return result;&#125;</code></pre></blockquote>var arr &#x3D; [1, 2, 3, [“A”, “B”, [“我”, “和”, “你”]]];<br>var arr2 &#x3D; deepClone(arr); &#x2F;&#x2F; 克隆数组<br>console.log(arr2 &#x3D;&#x3D;&#x3D; arr);<br>arr2[3][2][0] &#x3D; 1; &#x2F;&#x2F; 更改数组中元素<br>console.log(arr);<br>console.log(arr2);<blockquote><pre><code></code></pre></blockquote></li></ol><p><strong>数组克隆 - 递归算法复杂度</strong></p><blockquote><ul><li>时间复杂度为 <code>O(n)</code>，只有一层 for 循环，其输入量与执行次数成<strong>正比</strong></li><li>空间复杂度为 <code>O(n)</code>，返回结果数组会<strong>受输入量</strong>的影响，输入量越大，返回结果数组越大<br>同时在中间会产生一些临时的数组。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（四）</title>
      <link href="/2023/12/03/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2023/12/03/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>在数据类型那一章节，我们知道 JS 中数据类型分为：基本数据类型和引用数据类型</p><ul><li>基本数据类型有 7 种：Number、String、Boolean、null、undefined、Bigint、Symbol</li><li>引用数据类型（Object 对象类型）有：Array、Function、Date、Math、RegExp 等对象<br>本章节我们要学习的数组 Array 对象就是引用数据类型，接下来我们会从以下三个部分来展开讲解</li><li>数组的语法和基本用法</li><li>冒泡排序（基础版，中级版，最优版）</li><li>引用数据类型和基本数据类型</li></ul></blockquote><h3 id="一、数组的语法和基本用法"><a href="#一、数组的语法和基本用法" class="headerlink" title="一、数组的语法和基本用法"></a>一、数组的语法和基本用法</h3><blockquote><ul><li>编程过程中，我们经常会遇见处理 “一组数值” 的情况</li><li>按照之前的学习，我们只能定义 10 个变量来分别存储每个数值，但这样的方式显然是不合理的<ul><li>因为我们是没法看出这些值之间有什么相互关系和作用</li><li>其次我们在定义和使用这些数据时也特别麻烦</li></ul></li><li>所以我们需要有一种新的数据结构来存储这样一组具有相关性的数值，接下来要讲到的 <code>Array 数组</code>，就符合这一特点。</li></ul></blockquote><h4 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h4><blockquote><ul><li>数组（Array），简单理解为是指<strong>一组数据的集合</strong>，用来存储一组相关的数据；</li><li>数据可以是<strong>任意的数据类型</strong>；</li><li>每种高级编程语言中都有数组，它是非常重要的一种数据结构。</li></ul></blockquote><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><blockquote><p>在 <code>ES5</code> 标准下，创建数组有以下 2 种形式：</p><ul><li>数组字面量方式创建数组 和 new Array() 方式创建数组</li></ul></blockquote><ol><li><p>数组字面量方式创建数组</p><blockquote><ul><li>一个封闭在方括号对<code>[]</code>中的包含有<strong>零个或多个</strong>数据</li><li>数组中的每个数据被称作<strong>元素</strong>，元素可以是<strong>任意的</strong>数据类型。</li></ul><pre><code>// 使用数组字面量方式创建了一个空数组,arr是数组名var arr = [];</code></pre></blockquote><p>&#x2F;&#x2F; 使用数组字面量方式创一个带初始值的数组<br>&#x2F;&#x2F; A，B，C，D 称为数组元素（项），数组的长度为4<br>var arr &#x3D; [“A”, “B”, “C”, “D”];</p><blockquote></blockquote><p>&#x2F;&#x2F; 使用数组字面量方式创一个带初始值的数组，数组长度为6<br>&#x2F;&#x2F; 数组元素(项)可以是任意数据类型<br>var arr &#x3D; [1, “name”, null, undefined, {}, function () {}]; &#x2F;&#x2F; 一般不会这样用，仅当前了解</p><blockquote><pre><code>&gt;数据创建同时赋值，称为数组初始化**注意：**- `var arr=[1,2,3,,4];`长度是5- `var arr=[1,2,3,4,];`长度是4&gt;有空元素的数组，称为**稀疏数组**</code></pre></blockquote></li><li><p><code>new Array()</code> 方式创建数组</p><blockquote><ul><li>在实际开发中，这种方式用的少，大家只要了解即可</li><li>建议大家掌握了数组字面量创建方式，再来了解这种方式<blockquote><p>注意：</p></blockquote></li><li>不支持<code>var arr=new Array(1,2,,3);</code>的写法</li><li><code>var arr=new Array(1,2,);</code>，长度是2</li></ul></blockquote></li></ol><blockquote><blockquote><p>括号内只有一个数字时，创建的是数组长度</p></blockquote><pre><code>var arr = new Array(5);console.log(arr.length); // 5console.log(arr[0]); // undefined;//创建一个数组，数组长度为5 ，每一项为空，打印出来为undefined</code></pre></blockquote><blockquote><blockquote><p>括号内是一个字符串时，是创建一个数组</p></blockquote><pre><code>var arr = new Array(&quot;5&quot;);console.log(arr.length); // 1console.log(arr[0]); // 5// 创建一个数组，数组长度为1，同时赋初始值为‘5’</code></pre></blockquote><blockquote><blockquote><p>括号内为多个值时，创建的是数组</p></blockquote><pre><code>var arr = new Array(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;);console.log(arr.length); // 3console.log(arr[0]); // A// 创建一个数组，数组长度为3，同时赋初始值为 &#39;A&#39;、&#39;B&#39;、&#39;C&#39;&gt;```</code></pre></blockquote><h4 id="访问数组元素（项）"><a href="#访问数组元素（项）" class="headerlink" title="访问数组元素（项）"></a>访问数组元素（项）</h4><blockquote><ul><li>数组的每一项都有索引（下标），索引是从 0 开始的正整数，从左至右，从0开始</li><li>我们通过 数组名<code>[索引]</code>的方式来访问数组中元素，如下</li></ul><pre><code>var arr = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;];// 通过索引来访问数组中元素console.log(arr[0]); // Aconsole.log(arr[1]); // Bconsole.log(arr[2]); // Cconsole.log(arr[3]); // D</code></pre></blockquote><h4 id="数组的长度"><a href="#数组的长度" class="headerlink" title="数组的长度"></a>数组的长度</h4><blockquote><ul><li>数组的 <code>length</code> 属性，表示它的长度</li><li>用<code>.length</code>的方式访问数组长度</li></ul><pre><code>// 创建数组var arr = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;];// arr.lenght 访问数组长度console.log(arr.length); // 4</code></pre></blockquote><blockquote><ul><li>数组最后一项的下标&#x3D; 数组长度- 1</li></ul></blockquote><h4 id="修改数组项的值"><a href="#修改数组项的值" class="headerlink" title="修改数组项的值"></a>修改数组项的值</h4><blockquote><p><strong>方式一：</strong></p><ul><li>如果修改项的索引在0 到数组长度 -1 内，<strong>正常修改值</strong></li></ul><pre><code>var arr = [1, 2, 3, 4, 5];// 更改第二项值，也就是下标为1的项的值arr[1] = &quot;A&quot;;console.log(arr); // [1, &#39;A&#39;, 3, 4, 5]</code></pre></blockquote><blockquote><p><strong>方式二：</strong></p><ul><li>如果修改项的索引不在0 到数组长度 -1 内，相当于<strong>创建</strong>这一项</li><li>而且会<strong>修改</strong>数组的<strong>长度</strong>，同时在这个长度内<strong>没有值的项都是空</strong>，通过下标访问这些没有值的项时，结果是<code>undefined</code>;</li></ul><pre><code>var arr = [1, 2, 3, 4, 5];var arr[9]=&#39;B&#39;;console.log(arr); // [1, &#39;A&#39;, 3, 4, 5, empty × 4, &#39;B&#39;]console.log(arr.length); // 10 数据长度变为10console.log(arr[5]); // undefined 下标为5的这一项，访问值为undefined</code></pre></blockquote><blockquote><p><strong>方式三：</strong></p><ul><li>先创建一个空数组，然后再赋值</li><li>而且会根据索引修改数组长度，没有赋值的项都是空的，通过下标访问这些没有值的项时，结果是<code>undefined</code>;</li></ul><pre><code>var arr = [];arr[0] = 1;arr[2] = 2;arr[5] = 5;console.log(arr.length); // 6console.log(arr); // [1, empty, 2, empty × 2, 5]</code></pre></blockquote><h4 id="访问数组注意事项"><a href="#访问数组注意事项" class="headerlink" title="访问数组注意事项"></a>访问数组注意事项</h4><ol><li><p>访问数组中不存在的项，不会报错，回返回undefined</p><blockquote><pre><code>var arr = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;];console.log(arr[5]); // undefined</code></pre></blockquote></li><li><p>数组项对应的值为空时，在访问时，返回undefined</p><blockquote><pre><code>var arr = [&quot;A&quot;, , &quot;B&quot;, &quot;C&quot;];console.log(arr[1]); // undefined</code></pre></blockquote><p>&#x2F;&#x2F; 这两种情况，要注意区分<br>var arr &#x3D; [“A”, undefined, “B”, “C”];<br>console.log(arr[1]); &#x2F;&#x2F; undefined</p><blockquote><pre><code></code></pre></blockquote></li><li><p>经典面试题：</p><blockquote><p>将数组的length设置为 0，取第一个元素会返回什么 ？</p><pre><code>var arr = [1, 2, 3, 4, 5];arr.length = 0;console.log(arr);//arr=[],数组值清空console.log(arr[0]);//undefined</code></pre></blockquote></li></ol><h4 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h4><blockquote><ul><li>所谓数组遍历，就是把数组中的每一项都访问一遍。就好比篮子里有 10 个苹果，一个一个拿 出来。</li><li>至于拿出来做什么，这就要看实际的需求了。比如可以拿出来放在桌子上，什么都不做，也可以拿出来一个一个洗一下。</li><li>这里我们利用 <code>for</code> 循环，把数组中的<strong>每一项</strong>拿出来，在控制台打印输出。<ul><li>for循环中的i是从 0 开始的，是计数器，当<strong>索引</strong>使用</li><li><code>arr[i]</code>就是访问数组中下标为i的那一项</li></ul></li></ul><pre><code>var arr = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, , , , &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, ,];for (var i = 0; i &lt; arr.length; i++) &#123;  console.log(arr[i]);&#125;// 输出：A B C undefined undefined undefined G H I undefined</code></pre></blockquote><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><blockquote><ul><li>以<strong>数组</strong>作为<strong>数组元素</strong>的数组，即：”数组的数组”</li><li>二维数组，可以认为是数组中的元素也是一个数组</li></ul></blockquote><ol><li><p>创建二维数组</p><blockquote><pre><code>var arr = [  [2, 5, 8],  [11, 22, 33],  [55, 88, 66],  [23, 56, 89],];console.log(&quot;数组的长度：&quot; + arr.length); // 4</code></pre></blockquote></li><li><p>访问数组的长度与值：</p><blockquote><ul><li>外侧数组长度：<code>arr.length</code></li><li>内数组长度：<code>arr[i].length</code>,i是所访问数组的下标</li><li>访问内侧数组的值：<code>arr[i][j]</code></li></ul><pre><code>var arr = [     [2, 5, 8],     [11, 22, 33],     [55, 88, 66],     [23, 56, 89],   ];  console.log(arr.length); //4  console.log(arr[1].length); //3  console.log(arr[2][1]); //88</code></pre></blockquote></li><li><p>循环遍历二维数组中的每一项</p><blockquote><pre><code>var arr = [  [2, 5, 8],  [11, 22, 33],  [55, 88, 66],  [23, 56, 89],];// 循环输出二维数组中的每一个项for (var i = 0; i &lt; arr.length; i++) &#123;  for (var j = 0; j &lt; arr[i].length; j++) &#123; console.log(arr[i][j]);  &#125;&#125;// 最终输出结果 2 5 8 11 22 33 55 88 66 23 56 89</code></pre></blockquote></li></ol><h4 id="数组类型的检测"><a href="#数组类型的检测" class="headerlink" title="数组类型的检测"></a>数组类型的检测</h4><ol><li><p>用<code>typeof</code>检测数组和对象，得到的是<code>object</code></p><blockquote><pre><code>typeof [1, 2, 3]; // objecttypeof &#123; name: &quot;清心老师&quot;, age: 18 &#125;; // object</code></pre></blockquote></li><li><p>如果要区分数组和对象，我们可以用<code>Array.isArray()</code>来检测是否是<strong>数组类型</strong></p><blockquote><ul><li>如果Array.isArray()的返回值是true，就是数组类型，否则就不是</li></ul><pre><code>Array.isArray([1, 2, 3]); // trueArray.isArray(&#123; name: &quot;清心老师&quot;, age: 18 &#125;); // falseArray.isArray([]); // true</code></pre></blockquote></li></ol><h3 id="二、数组相关实践应用"><a href="#二、数组相关实践应用" class="headerlink" title="二、数组相关实践应用"></a>二、数组相关实践应用</h3><ol><li>数组相关实践应用<blockquote><p>将数组[1, 43, 23, 8, 4, 6, 8, 22, 9]翻转过来</p><pre><code>var arr = [1, 43, 23, 8, 4, 6, 8, 22, 9];  var arr1 = [];  for (var i = arr.length - 1; i &gt;= 0; i--) &#123; arr1[arr1.length] = arr[i];  &#125;  console.log(arr1);</code></pre></blockquote></li></ol><blockquote><blockquote><p>思考：</p></blockquote><ul><li>我们如何在不增加新数组的情况下，在原数组上对数组进行翻转 ？</li></ul></blockquote><ol start="2"><li>找出数组 [1, 43, 23, 8, 4, 6, 8, 22, 9] 中的最大值<blockquote><ul><li>声明一个变量 <code>max</code>，用来保存数组中的最大值</li><li>刚开始默认数组中的第一项为最大值，存入变量 max</li><li>然后拿 max 与数组中<strong>每一项</strong>（除第一项）去做比较</li><li>如果数组中值大于 max，就把这个数存到 max 变量中去，否则就继续往下比</li></ul></blockquote></li></ol><blockquote><pre><code>var arr = [1, 43, 23, 8, 4, 6, 8, 22, 9];var max = arr[0]; // max用来保存最大值，刚开始默认取数组中第一项为最大值for (var i = 0; i &lt; arr.length; i++) &#123;  if (max &lt; arr[i]) &#123;    max = arr[i];  &#125;&#125;console.log(&quot;数组中的最大值为:&quot; + max);</code></pre></blockquote><ol start="3"><li>删除数组中指定元素<blockquote><p>要求删除数组[1, 4, 12, 6, 33, 15, 30, 5, 8];中的所有大于 10 的数<br><img src="删除指定元素.png"></p></blockquote></li></ol><blockquote><p><strong>开启两层循环</strong></p><ul><li><strong>外层</strong>循环把数组中所有数遍历出来与 10 做比较，当判断当前项值<code>&gt; 10</code> 时</li><li>开启<strong>内层</strong>循环，用来<strong>删除当前项</strong>（从当前项开始，把后面的每一项，赋值给前一项，达到删除当前项效果）</li><li>每次有删除项时，其数组的长度就会减 1，数组长度减 1，可以<strong>把最后一项干掉</strong>。</li><li>删除当前项后，下次外层循环开始位置，又要从<strong>当前删除项</strong>的下标开始查找(删除后，该项后面的数就会往前移一位)</li></ul><pre><code>var arr = [1, 4, 12, 6, 33, 15, 30, 5, 8];// 外层循环，把数组中每个数拿出来与10做比较for (var i = 0; i &lt; arr.length; i++) &#123;  if (arr[i] &gt; 10) &#123;    // 把当前项后面的每一项，都赋值给前一项，达到删除当前项效果    for (var j = i; j &lt; arr.length; j++) &#123;      arr[j] = arr[j + 1];    &#125;    // 删除一项后，数组的总长度就要减1，这样就把数组中最后一项给干掉了    arr.length = arr.length - 1;    // 保证删除项后，下次遍历从当前删除项的序号开始遍历    i--;  &#125;&#125;console.log(arr);</code></pre></blockquote><blockquote><blockquote><p>重点学习：</p><ul><li>如何删除数组中元素</li><li>删除数组中元素后，对后续元素和数组带的影响</li><li>后面数组有提供相关删除数组中元素的方法，这里就是让大家学习这种思维方式。</li></ul></blockquote></blockquote><ol start="4"><li>随机生成指定范围内的颜色<br>基础：<blockquote><pre><code>var arr = [&quot;pink&quot;, &quot;khaki&quot;, &quot;skyblue&quot;, &quot;tomato&quot;, &quot;orange&quot;, &quot;orchid&quot;]; var len = arr.length; color = arr[(Math.random() * len) &gt;&gt; 0]; console.log(color);</code></pre></blockquote></li></ol><blockquote><p>当我们在做烟花效果时，我们需要随机为 100 个小圆或正方形产生（指定范围内的）不同颜色。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">></span>  <span class="token punctuation">.</span>ball <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    width<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    height<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token punctuation">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ball"</span> id<span class="token operator">=</span><span class="token string">"J_ball"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">// 获取id为ball的元素</span>  <span class="token keyword">var</span> ball <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"J_ball"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 定义一组颜色，存入到数组中</span>  <span class="token keyword">var</span> bgColor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"pink"</span><span class="token punctuation">,</span> <span class="token string">"khaki"</span><span class="token punctuation">,</span> <span class="token string">"skyblue"</span><span class="token punctuation">,</span> <span class="token string">"tomato"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"orchid"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 数组长度</span>  <span class="token keyword">var</span> len <span class="token operator">=</span> bgColor<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Math.random() * (len) 产生 0- len-1之间的随机数</span>  <span class="token comment" spellcheck="true">// Math.random() * (len) >> 0  去掉小数，只留下整数部分</span>  ball<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> bgColor<span class="token punctuation">[</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> len<span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></code></pre></blockquote><h3 id="三、引用数据类型和基本数据类型的区别"><a href="#三、引用数据类型和基本数据类型的区别" class="headerlink" title="三、引用数据类型和基本数据类型的区别"></a>三、引用数据类型和基本数据类型的区别</h3><blockquote><p>我们知道在 JS 中数据分为：<strong>基本数据类型</strong> 和 <strong>引用数据类型</strong>两大类</p><ul><li>基本类型：number、boolean、string、undefined、null</li><li>引用类型：array、object、function、regexp（正则表达式） …<blockquote><p>那这两类数据类型在内存中是<strong>如何存储</strong>的呢 ？这就是我们接下来要讨论的重点。</p></blockquote></li></ul></blockquote><p><strong>先来看下面两段代码：</strong></p><blockquote><pre><code>// 代码片段一var a = 10;var b = a;a = 20;console.log(a); // 20console.log(b); // 10</code></pre></blockquote><blockquote><pre><code>// 代码片段二var arr1 = [1, 2, 3, 4];var arr2 = arr1;arr1[0] = &quot;A&quot;;console.log(arr1[0]); // Aconsole.log(arr2[0]); // A</code></pre><p><strong>以上代码解读</strong></p><ul><li>通过代码片段一，我们发现，当 b&#x3D;a，赋值完成后，后续对 a 的操作并不会对 b 产生影响。</li><li>而代码代码片段二中的数组就不一样，当 arr2&#x3D;arr1 且，我们对 arr1 的操作，直接影响了 arr2，为什么会出现这个情况呢？</li><li>这就涉及到 Javascript 的基础数据类型和引用数据类型在内存中是如何存储的。</li></ul></blockquote><ol><li>基本数据类型在内存中的存储<blockquote><ul><li>基本数据类型存储在<strong>栈空间</strong>中</li></ul></blockquote></li></ol><p><strong>基本数据类型赋值过程</strong></p><blockquote><ul><li>变量a 是基本数据类型, 当代执行到 <code>var a = 10</code> 时，在<strong>栈内存</strong>中开辟一块空间，把值 <code>10</code> 存入进去</li><li>当执行到 <code>var b = a</code> 时，把 a 的值 10,<strong>复制</strong>一份保存在 b 对应的内存空间中</li><li>当执行 <code>a = 20</code> 时，其本质是修改了<code>a</code>对应内存中的值，并<strong>不会</strong>影响到 b<img src="基本数据类型的存储.png"></li></ul></blockquote><ol start="2"><li>引用数据类型在内存中的存储<blockquote><ul><li><strong>栈内存</strong>中存着引用数据类型的<strong>地址</strong>，<strong>堆内存</strong>中存着引用数据类型的<strong>最终数据内容</strong>。</li></ul></blockquote></li></ol><p><strong>引用数据类型赋值的整个过程：</strong></p><blockquote><ul><li>变量<code>arr1</code><strong>声明</strong>后，首先会在<strong>栈内存</strong>开辟一块内存空间，然后在<strong>赋值时</strong>，再在<strong>堆内存</strong>中开辟一块空间，堆内存存放引用数据类型的数据，然后在堆中就会有一个存放数据的<strong>地址</strong>，把这个地址存入变量对应的栈内存中。</li><li><strong>栈内存</strong>中存着指向堆内存中数据的<strong>地址</strong>。</li><li>当代码执行到<code>arr2=arr1</code>时，这里是把<code>arr1</code>存入栈中的<strong>地址</strong>复制给了<code>arr2</code>，所以本质上arr1和arr2<strong>指向</strong>的是堆内存中的<strong>同一个值</strong>（数据）</li><li>所以当我们操作<code>arr1[0]=&#39;A&#39;</code>时，<code>arr2[0]</code>的值也是’A’</li></ul></blockquote><p><strong>结论：</strong></p><blockquote><ul><li>当我们把一个引用数据类型当做值来赋值时，是把它存在栈中的<strong>地址复制一份</strong>来赋值。</li><li>当我们访问引用数据类型时，是通过栈中的<strong>引用地址</strong>来访问到堆中的数据。<img src="引用数据类型的存储.png"></li></ul></blockquote><ol start="3"><li><p>栈和堆的的介绍</p><blockquote><ul><li>到这里，你肯定会有一个疑问，为什么一定要分堆和 栈这两个存储空间呢？所有的数据都存放在栈中不就可以了吗？答案是不可以</li><li>因为 Javascript 引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间太大的话，所有数据都存放在栈空间里面，那么会影响到上下文切换的效率，进而又影响到整个程序的执行效率。<table><thead><tr><th>比较</th><th>栈</th><th>堆</th></tr></thead><tbody><tr><td>大小固定</td><td>创建时，<strong>确定大小</strong>（值大小固定），故可能会<strong>溢出</strong></td><td>大小<strong>不固定</strong>，可随时增加</td></tr><tr><td>存储类型</td><td>存储基本数据类型及引用类型数据的堆地址</td><td>存储引用类型数据</td></tr><tr><td>如何访问</td><td>按<strong>值</strong>(by value)访问</td><td>按<strong>引用</strong>(by reference)（堆内存地址）访问</td></tr><tr><td>特点</td><td>空间小，运行效率高</td><td>空间大，运行效率相对较低</td></tr><tr><td>存放规则</td><td>按顺序存放，先进后出</td><td>无序存储，可根据引用（地址）直接获取</td></tr></tbody></table></li></ul></blockquote></li><li><p>总结：基本数据类型和引用数据类型的区别</p><table><thead><tr><th>比较</th><th>基本数据类型</th><th>引用数据类型</th></tr></thead><tbody><tr><td>数据存放位置</td><td>基本数据类型存放在<strong>栈</strong>中，数据大小确定，内存空间大小可以分配</td><td>引用数据类型存放在<strong>堆</strong>中，每个空间大小不一样，要根据情况进行特定的配置</td></tr><tr><td>变量存储内容</td><td>变量中存储的是<strong>值本身</strong></td><td>变量存储的是<strong>地址</strong></td></tr><tr><td>变量用来赋值时</td><td>把变量的<strong>值复制</strong>一份去赋值</td><td>把变量的<strong>内存地址复制</strong>一份去赋值</td></tr><tr><td>存储内容大小</td><td>存储值<strong>较小</strong></td><td>存储值<strong>较大</strong></td></tr></tbody></table></li><li><p>数组的深克隆(拷贝)和浅克隆(拷贝)</p><blockquote><ul><li>引用类型在赋值的过程中，指向的是同一个地址，所以本质上两个变量指向的是同一个东西。</li><li>那我们如何把一个引用类型（这里以数组为例），完全拷贝一份给到另一个变量，并且两者之间是<strong>完全独立</strong>的，没有任何的关联呢？</li><li>这就涉及到我们这里说的克隆问题。</li></ul></blockquote></li></ol><blockquote><ul><li><strong>浅</strong>克隆： 只克隆了数组的<strong>第一层</strong>，如果数组是多维数组，或数组中的项是其它的引用类型值，则不克隆其他层。</li><li><strong>深</strong>克隆：克隆数组的<strong>所有层</strong>，要使用递归技术，在讲到递归的时候再介绍。</li></ul></blockquote><blockquote><pre><code>var arr = [1, 2, 3, [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]];  var arr2 = [];  for (var i = 0; i &lt; arr.length; i++) &#123;    arr2[arr2.length] = arr[i];  &#125;  console.log(arr, arr2);  // arr[3] = &quot;更改&quot;;  // console.log(arr, arr2);  arr[3][0] = 1;  console.log(arr, arr2);</code></pre><ul><li>更改arr的第一层值，不会影响arr2</li><li>但若是更改arr[3]这个引用数据类型里面的值(第二层)，就会同时影响arr2的值</li><li>因为第二层的是引用数据类型，存放的是<strong>地址</strong></li><li>arr[3]和arr2[3]指向的是同一地址<blockquote><p>关于深拷贝，讲完递归之后再来讲</p></blockquote></li></ul></blockquote><h3 id="四、冒泡排序-著名排序算法"><a href="#四、冒泡排序-著名排序算法" class="headerlink" title="四、冒泡排序 - 著名排序算法"></a>四、冒泡排序 - 著名排序算法</h3><blockquote><ul><li>冒泡排序的英文是bubble sort 的是一个著名的排序算法，也是在面试时，非常爱考察的算法</li><li>假设，我们现在要将这个无序数组[1,5,3,2,6]从小到大来排列<br><strong>按冒泡排序的思想：</strong></li><li>我们要把相邻的元素<strong>两两比较</strong>，当一个元素<strong>大于</strong>右侧相邻元素时，<strong>交换</strong>它们的位置；当一个元素<strong>小于或等于</strong>右侧相邻元素时，<strong>位置不变</strong>（啥也不做）</li></ul></blockquote><h4 id="基础版："><a href="#基础版：" class="headerlink" title="基础版："></a>基础版：</h4><ol><li>冒泡排序整个过程<blockquote><p>第一轮：交换过程<br><img src="冒泡排序第一轮.png"></p></blockquote></li></ol><blockquote><p>第二轮：交换过程<br><img src="冒泡排序第二轮.png"></p></blockquote><blockquote><p>第三轮：交换过程<br><img src="冒泡排序第三轮.png"></p></blockquote><blockquote><p>第四轮：交换过程<br><img src="冒泡排序第四轮.png"></p></blockquote><p><strong>我们来分析下面的过程</strong></p><blockquote><blockquote><p>我们来用表格来分析上面的执行过程，上面数组中有<code>5</code>个元素，数组长度为<code>5</code>，经过了<code>4</code>轮交换。具体如下：</p><table><thead><tr><th>轮数</th><th>对比次数</th><th>确认元素个数</th><th>有序区个数</th></tr></thead><tbody><tr><td>第1轮</td><td>4</td><td>1</td><td>1</td></tr><tr><td>第2轮</td><td>3</td><td>1</td><td>2</td></tr><tr><td>第3轮</td><td>2</td><td>1</td><td>3</td></tr><tr><td>第4轮</td><td>1</td><td>1</td><td>5</td></tr></tbody></table></blockquote></blockquote><p><strong>其实我们可以得出结论：</strong></p><blockquote><ul><li>元素交换轮数&#x3D;数组长度-1</li><li>每一轮交换次数&#x3D;数组长度-当前交换轮</li></ul></blockquote><p><strong>代码实现思路</strong></p><blockquote><ul><li>我们可以用<code>for</code>循环嵌套来实现，<strong>外部循环</strong>控制<strong>交换轮数</strong></li><li><strong>内部循环</strong>用来实现<strong>每一轮的交换处理</strong>。先进行元素比较，如果元素大于右侧相邻相元素，则两元素位置交换，如果不大于，则啥也不做</li><li>声明变量tmp用作<strong>交换变量</strong></li></ul><pre><code>// 排序数组var arr = [1, 5, 3, 2, 6];// 数组长度var len = arr.length;// 外层for控制交换轮数for (var i = 0; i &lt; len - 1; i++) &#123;  // 内层for控制每一轮，元素交换次数处理  for (var j = 0; j &lt; len - i - 1; j++) &#123;    if (arr[j] &gt; arr[j + 1]) &#123;      // 交换两元素位置      var tmp; // 用来交换两个变量的中间变量      tmp = arr[j];      arr[j] = arr[j + 1];      arr[j + 1] = tmp;    &#125;  &#125;&#125;console.log(arr); // [1, 2, 3, 5, 6]</code></pre></blockquote><h4 id="冒泡排序优化-1"><a href="#冒泡排序优化-1" class="headerlink" title="冒泡排序优化 1"></a>冒泡排序优化 1</h4><blockquote><blockquote><p>在每一轮开始时，默认打上 isSorted&#x3D;’有序’ 标记，数据一旦发生交换，就打上 isSorted&#x3D;’无序’，退出<strong>整个</strong> <code>for</code> 循环的执行。</p></blockquote></blockquote><ol><li>优化思路<blockquote><ul><li>让我们来回顾下刚才上面那个冒泡排序的细节，当我们第过第二轮排序后。<img src="冒泡排序第二轮.png"></li></ul></blockquote></li></ol><blockquote><ul><li>其实这个时候整个数组中的元素<strong>已经是有序的</strong>了，可是排序算法还是按部就班的执行第三，四轮的排序。</li><li>如果在第二轮完成后，我们就<strong>能判断出数列已经有序的，并做出标记</strong>，那么剩下的几轮排序就不必执行了，可以提前结束工作。这样是不是性能更高呢？</li><li>那如何判断出数列当前已经是有序的呢 ？<ul><li>在第二轮结束后，数列才是有序的了，所以第二轮中我们是找不到数组有序的标记</li></ul></li></ul></blockquote><ol start="2"><li>看第三轮：<img src="冒泡排序第三轮.png"></li></ol><p><strong>在第三轮中</strong></p><blockquote><ul><li>整个过程都没有发生数据交换，也就是说，如果在这一轮中，数据如果<strong>没有经过任何的交换</strong>，那就说明，在这一轮当中，数据<strong>已经是有序</strong>的了。</li><li>所以我们在<strong>每一轮开始时</strong>，默认<strong>打上 <code>isSorted=&#39;有序&#39;</code> 标记</strong>，如果在这一轮交换中，数据一旦发生交换，就打上 <code>isSorted=&#39;无序&#39;</code>，如果整轮交换中，都没有发生交换，那就表示数组是有序的了。我们就可以退出<strong>整个</strong> for 循环的执行。</li></ul><pre><code>// 排序数组var arr = [1, 2, 3, 5, 6];// 数组长度var len = arr.length;// 外层for控制交换轮数var isSorted;for (var i = 0; i &lt; len - 1; i++) &#123;  // 内层for控制每一轮，元素交换次数处理  isSorted = true; // 有序标记，每轮开始默认为有序，如果一旦发生交换，就会变成flag=false,无序  for (var j = 0; j &lt; len - i - 1; j++) &#123;    if (arr[j] &gt; arr[j + 1]) &#123;      // 交换两元素位置      var tmp; // 用来交换两个变量的中间变量      tmp = arr[j];      arr[j] = arr[j + 1];      arr[j + 1] = tmp;      isSorted = false;    &#125;  &#125;  // 这一轮多次交换下来，flag没有变为false,说明没有发生元素交换，此时数组已是有序的  if (isSorted) &#123;    break; // 退出最外层for循环  &#125;&#125;console.log(arr); // [1, 2, 3, 5, 6]</code></pre></blockquote><h4 id="进一步优化：冒泡排序优化-2"><a href="#进一步优化：冒泡排序优化-2" class="headerlink" title="进一步优化：冒泡排序优化 2"></a>进一步优化：冒泡排序优化 2</h4><blockquote><blockquote><p>记录每一轮最后一次交换元素的位置，该位置为无序列表的边界</p></blockquote></blockquote><ol><li><p>优化思路</p><blockquote><ul><li>为了让大家更好的理解最优的解决方案带来的好处，我们重新拿一个数组<code>[2,3,4,1,5,6,7,8]</code>来做为案例讲解。</li><li>我们先来观察上面的数列，这个数列有一个明显的特点，就是前半部分<code>2,3,4,1</code>是<strong>无序</strong>的，后半部分<code>5,6,7,8</code>是<strong>有序</strong>的,并且后半部分是<strong>升序排列</strong>的，其<strong>最小值</strong>也比前面部分的最大值要大。</li></ul></blockquote></li><li><p>交换过程</p><blockquote><ul><li>第一轮<img src="冒泡优化2-第一轮.png"></li></ul></blockquote></li></ol><blockquote><ul><li>第二轮<img src="冒泡优化2-第二轮.png"></li></ul></blockquote><ol start="3"><li>从上面的两轮交换中，大家有没有发现什么问题呢 ？<blockquote><ul><li>其实右边的许多元素已经是有序的了，但是每一轮还是规规矩矩的把所有数都比一轮，浪费了很多时间。</li><li>按正常的(系统的)冒泡排序逻辑，第一轮排序过后，有序区长度为 1，第二轮排序过后，有序区长度为 2，…..</li><li>但在实际的排序过程中，有序区的长度<strong>可能会大于</strong>系统的有序区长度。<ul><li>比如说，第一轮后，有序区的长度为 5，1 之后就是有序区了，但在计算机看来，有序区的长度是1</li></ul></li><li>有没有什么办法可以确定，<strong>有序区的长度呢</strong> ？<strong>每一轮比较时</strong>，比较到实际有序区的前一位就不再发生比较了呢 ？<ul><li>我们可以<strong>记录</strong>每一轮最后一次交换元素的<strong>位置</strong>，该位置为无序列表的边界，再往右就是有序区了</li><li>每一轮比较，<strong>比较到上一轮元素最后一次交换的位置</strong>就不再比较了。</li></ul></li></ul></blockquote></li></ol><blockquote><pre><code>// 排序数组var arr = [98, 2, 3, 45, 4, 1, 5, 78, 6, 7, 8, 20];// 数组长度var len = arr.length;// 当前是否是有序的var isSorted;// 有序的边界var sortBorder = len - 1;// 记录每一轮最后一次交换的值，确定下一次循有序边界var index;</code></pre></blockquote><p>&#x2F;&#x2F; 外层for控制交换轮数<br>for (var i &#x3D; 0; i &lt; len - 1; i++) {<br>    &#x2F;&#x2F; 内层for控制每一轮，元素交换次数处理<br>    isSorted &#x3D; true; &#x2F;&#x2F; 有序标记，每轮开始默认为有序，如果一旦发生交换，就会变成flag&#x3D;false,无序<br>    for (var j &#x3D; 0; j &lt; sortBorder; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            &#x2F;&#x2F; 交换两元素位置<br>            var tmp; &#x2F;&#x2F; 用来交换两个变量的中间变量<br>            tmp &#x3D; arr[j];<br>            arr[j] &#x3D; arr[j + 1];<br>            arr[j + 1] &#x3D; tmp;<br>            isSorted &#x3D; false;<br>            &#x2F;&#x2F; 把无序列表的边界，更新为最后一次交换元素的位置<br>            index &#x3D; j;<br>        }<br>    }<br>    &#x2F;&#x2F; 如果无序，记录上一次最后一次交换的元素下标<br>    if (!isSorted) {<br>        sortBorder &#x3D; index;<br>    }<br>    &#x2F;&#x2F; 这一轮多次交换下来，flag没有变为false,说明没有发生元素交换，此时数组已是有序的<br>    if (isSorted) {<br>        break; &#x2F;&#x2F; 退出最外层for循环<br>    }<br>}<br>console.log(arr);</p><blockquote><pre><code></code></pre></blockquote><h3 id="五、编码题"><a href="#五、编码题" class="headerlink" title="五、编码题"></a>五、编码题</h3><blockquote><p>题目如下：</p><ul><li>当用户进入页面时，<strong>不停的</strong>弹出输入框让用户输入班级学员的成绩，直到<strong>输出退出</strong>后，就不再弹出输入框，而是把全班同学的<strong>平均成绩</strong>以弹窗形式显示出来。</li></ul><pre><code>var item; // 接收每次输入的值      var arr = []; // 把接收过的成绩，保存到数组中      var sum = 0; //累加器      while (item != &quot;退出&quot;) &#123;        item = prompt(&quot;请输入学员成绩&quot;);        arr[arr.length] = item;      &#125;      // 把数组长度-1,目的是为了去掉最后一次存入数组中的&#39;退出&#39;      arr.length = arr.length - 1;      //计算总和      for (var i = 0; i &lt; arr.length; i++) &#123;        sum = sum + Number(arr[i]);      &#125;      //   计算平均数      alert(sum / arr.length);</code></pre><blockquote><p>注意：</p><ul><li>判断适合使用哪一个循环语句，只知道结果用<code>while</code></li><li>数组长度一定要<code>-1</code></li></ul></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（三）</title>
      <link href="/2023/12/03/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/12/03/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><ul><li>所谓的<strong>流程控制语句</strong>，就是指我们可以通过这些语句来控制代码按照什么样的顺序结构来执行。</li><li>在 JS 中流程控制主要有三种结构：顺序结构、分支结构、循环结构，这三种结构代表三种不同的代码执行顺序。<img src="流程控制结构.png"></li></ul></blockquote><blockquote><ul><li>顺序结构：代码默认执行结构就是按顺序结构，从上往下依次执行的。</li><li>分支结构语句：<ul><li>if 语句</li><li>switch 语句</li></ul></li><li>循环结构的语句：<ul><li>for 语句</li><li>while 语句</li><li>do while 语句</li></ul></li><li>其它语句<ul><li>break 退出当前循环</li><li>continue 跳过当前迭代，继续执行下一个迭代</li><li>label 给语句加标签，常和for嵌套循环一起使用</li></ul></li></ul></blockquote><h3 id="一、if语句"><a href="#一、if语句" class="headerlink" title="一、if语句"></a>一、if语句</h3><blockquote><p>if 语句是使用最频繁的语句之一，也是最简单的条件语句，也称为选择语句（条件判断语句）</p></blockquote><ol><li>最简单的if语句<blockquote><ul><li><code>if</code> 是如果的意思，如果<code>()</code>括号中的条件成立，则就执行<code>&#123; &#125;</code>大括号中的语句块。</li><li>如果不成立，则啥也不做</li></ul><pre><code>if (条件) &#123; // 当条件为真，则执行这里的代码 // 语句块.....&#125;// if语句后面的代码.....</code></pre><blockquote><p>注：</p></blockquote><ul><li>这里的语句块可能是一行代码，也可能是一个多行代码</li><li>()括号里的条件可以是任何值或任何表达式，并且求值结果<strong>不一定</strong>是布尔值。</li><li>但 JS 内部会<strong>自动调用</strong>Boolean()函数，将这个表达式的<strong>返回值</strong>转为 布尔值。</li><li>如果条件求值为true,则执行{}中的语句块，如果条件求值为false，则啥也不做。执行 if 语句后面的代码。</li></ul></blockquote></li></ol><p><strong>if 语句写法</strong></p><blockquote><pre><code>&lt;script&gt; // 3&gt;2 条件表达式，返回值为true if (3 &gt; 2) &#123;   console.log(3 &gt; 2); // true &#125;&lt;/script&gt;</code></pre></blockquote><p><strong>要注意区分那些是属于 if 语句体中的语句</strong></p><blockquote><ul><li>if语句体外的代码，不管if中的条件是满足，他都会执行</li></ul></blockquote><p><strong>if 语句的简写</strong></p><blockquote><ul><li>如果 if 语句体中<strong>只有一条</strong>语句，可以<strong>省略</strong>大括号和换行</li><li>如果<strong>超过一条</strong>语句，是万万不能简写的，简写会造成编译错误。</li></ul><pre><code>&lt;script&gt; if (2 &lt; 3) console.log(&quot;2&lt;3成立，在控制台输出&quot;); if (2 &gt; 3) console.log(&quot;2&gt;3不成立，不在控制台输出&quot;); console.log(&quot;我与if无关，我永远出来&quot;);&lt;/script&gt;</code></pre></blockquote><ol start="2"><li>if-else 语句<blockquote><ul><li>如果条件求值为 true，则执行语句块 1 中的内容，否则执行语句块 2 中的内容</li></ul><pre><code>if (条件) &#123; // 当条件为true，则执行这里代码 // 语句块1....&#125; else &#123; // 当条件为false，则执行这里代码 // 语句块2....&#125;</code></pre></blockquote></li></ol><p><strong>案例实践：判断用户输入的数是偶数还是奇数</strong></p><blockquote><ul><li>结合<code>%</code>来实现</li><li>如果一个数除以 2,能整除，也就是余数为 0，就是偶数，否则就是奇数</li></ul></blockquote><blockquote><pre><code>&lt;script&gt; // 弹出弹窗，让用户输入内容 var num = Number(prompt(&quot;请用户输入一个数字&quot;)); // 上面num接收过来的值，是字符串类型，不过num%2时num会自动做隐式类型转换，转换成数字 if (num % 2 == 0) &#123;   alert(num + &quot;他是一个偶数&quot;); &#125; else &#123;   alert(num + &quot;他是一个奇数&quot;); &#125;&lt;/script&gt;</code></pre><blockquote><p>但是如果用户啥也不输，以及<code>&#39;&#39;</code>和<code>&#39; &#39;</code>也会被转成 0，这里暂时不做讲解，下面案例中会完善</p></blockquote></blockquote><ol start="3"><li><code>if-else</code> if 多条件分支语句<blockquote><ul><li>如果条件 1 成立，则执行语句 1，后面的就不看了</li><li>如果条件 1 不成立，则看条件 2，如果条件 2 成立，则执行语句 2，如果不成立，则执行语句 3</li></ul><pre><code>if (条件1) &#123; // 条件2为真，执行这里的代码 // 语句 1....&#125; else if (条件2) &#123; // 条件1为假，条件2为真，执行这里代码 // 语句 2....&#125; else &#123; // 条件1和1都为假，执行这里代码 // 语句2....&#125;</code></pre></blockquote></li></ol><p><strong>案例实践 1：根据用户的输入的成绩，判断用户是在那个成绩档次</strong></p><table><thead><tr><th>分数</th><th>档次</th></tr></thead><tbody><tr><td>90-100</td><td>优秀</td></tr><tr><td>89-70</td><td>良好</td></tr><tr><td>69-60</td><td>一般</td></tr><tr><td>0-59</td><td>不及格</td></tr></tbody></table><blockquote><pre><code>&lt;script&gt; var score = prompt(&quot;请输入你的考试成绩！&quot;); if (score &gt;= 90) &#123;   alert(&quot;成绩优秀&quot;); &#125; else if (score &gt;= 70) &#123;   alert(&quot;成绩良好&quot;); &#125; else if (score &gt;= 60) &#123;   alert(&quot;成绩及一般&quot;); &#125; else &#123;   alert(&quot;成绩不及格&quot;); &#125;&lt;/script&gt;</code></pre></blockquote><p><strong>案例实践 2：判断用户输入的内容是否为数字</strong></p><blockquote><p>思路分析：</p><ul><li>用户<strong>输入</strong>的内容，都是字符串，我们要判断是否为数字，肯定是要把类型转换数字，看能不能转成功。</li><li>将字符串转成数字的方法有很多Number()、parseInt()、parseFloat()、+号，我们选那个呢？</li><li>Number()和+都可以，只要字符串不是纯数字，都会转成NaN，纯数字符串都会转成数字，但<code>&#39; &#39;</code>空格不行，会被转成<code>0</code></li><li>所以接下来，接下来<strong>先过滤</strong>不是纯数字字符串，再过滤<code>&#39; &#39;</code> 空格，剩下的就都是纯数字字符串了</li><li>要判断 Number()函数转换后的结果是不是 <code>NaN</code> 和数，有两种办法，<ul><li><code>isNaN</code> 用来判断一个数是不是数字，而 NaN 正好不是数字，</li><li>还可以用 NaN <strong>不自等</strong>的方法来判断。</li></ul></li><li>接下来要过滤<code>&#39; &#39;</code>，<code>&#39; &#39;</code>空格 和 数字，可以通过 <code>parseInt()</code>和 <code>isNaN</code> 结合</li><li>剩下的就都是 纯数字字符串了</li></ul><pre><code>&lt;script&gt; var num=prompt(&#39;请输入数字！&#39;); if(isNaN(Number(num)))&#123; // 如果条件成立，则num不是纯数字字符串，但不能过滤&#39;&#39; 空格     console.log(num+&#39;不是一个数字&#39;); &#125;else if (isNaN(parseInt(num)))&#123; // &#39;&#39;空格，会被转成NaN，NaN不是数字，为真，剩下的，就全都是纯数字了     console.log(num +&#39;不是一个数字&#39;); &#125;else&#123;     console.log(num+&#39;是一个纯数字&#39;); &#125;&lt;/script&gt;</code></pre></blockquote><p><strong>封装成方法使用：用来判断用户输入的是否是纯数字</strong></p><blockquote><pre><code>function isNumber(num) &#123; if (isNaN(+num)) &#123;   // 如果条件成立，则num不是纯数字字符串，但不能过滤&#39;&#39; 空格   return false; &#125; else if (isNaN(parseInt(num))) &#123;   // 识别空格或者没有输入任何值   return false; &#125; else &#123;   return true; &#125;&#125;</code></pre></blockquote><ol start="4"><li>if、if-else、if-else if 语句的嵌套<blockquote><pre><code>if()&#123;// 语句 1// 语句中可以嵌套 if()&#123;&#125;else&#123; &#125; 或if()else if()&#123;&#125;等if语句&#125;else&#123;// 语句 2// 语句2中可以嵌套 if()&#123;&#125;else&#123; &#125; 或if()else if()&#123;&#125;等if语句&#125;</code></pre></blockquote></li></ol><p><strong>案例实践 1：BMI 肥胖指数计算</strong></p><blockquote><ul><li>BMI 指数（Body Mass Index，身体质量指数）是用体重（以公斤为单位）除以身高（以米为单位）的<strong>平方</strong>得出的数字，是目前国际上常用的衡量人体胖瘦程度以及是否分赴康的标准。</li><li>BMI 指数 &#x3D; 体重 &#x2F; 身高 *身高<table><thead><tr><th>BMI值</th><th>分档</th></tr></thead><tbody><tr><td>低于 18.5</td><td>过瘦</td></tr><tr><td>18.5~24（不含）</td><td>正常</td></tr><tr><td>24~28（不含）</td><td>过胖</td></tr><tr><td>28~32（不含）</td><td>肥胖</td></tr><tr><td>大于等于 32</td><td>非常肥胖</td></tr></tbody></table></li></ul></blockquote><blockquote><pre><code>&lt;script&gt; // 要求用户输入身高,强制转换为数字 var height = parseFloat(prompt(&quot;请输入你的身高多少米&quot;)); // 要求用户输入体重 var weight = parseFloat(prompt(&quot;请输入你的体重&quot;)); // 判断输入是否合法 if (isNaN(height) || isNaN(weight)) &#123;   alert(&quot;你的输入有误！&quot;); &#125; else &#123;   // 计算得到BMI指数   var bmi = weight / (height * height);   // 分档判断   if (bmi &lt; 18.5) &#123;     alert(&quot;偏瘦&quot;);   &#125; else if (bmi &lt; 24) &#123;     alert(&quot;正常&quot;);   &#125; else if (bmi &lt; 28) &#123;     alert(&quot;过胖&quot;);   &#125; else if (bmi &lt; 32) &#123;     alert(&quot;肥胖&quot;);   &#125; else &#123;     alert(&quot;非常肥胖&quot;);   &#125; &#125;&lt;/script&gt;</code></pre><blockquote><ul><li>注意！<strong>不要写成</strong><code>bmi = (weight / height) * height</code>，结果不同，重量除的是身高的平方</li><li>规律：用<code>大于号</code>就从大到小进行匹配，用<code>小于号</code>就从小到大</li></ul></blockquote></blockquote><p><strong>案例实践 2：判断用户输入的数是偶数还是奇数</strong></p><blockquote><ul><li>利用前面封装好的：判断是否为纯数字</li></ul></blockquote><blockquote><pre><code>&lt;script&gt; var num = prompt(&quot;请用户输入一个数字&quot;); if (isNumber(num)) &#123;   if (num % 2 === 0) &#123;     alert(num + &quot;是一个偶数&quot;);   &#125; else &#123;     alert(num + &quot;是一个奇数&quot;);   &#125; &#125; else &#123;   alert(&quot;你的输入有误,请重新输入一次&quot;); &#125; // 封装好的，用来判断用户输入的是否是纯数字 function isNumber(num) &#123;   if (isNaN(+num)) &#123;     // 如果条件成立，则num不是纯数字字符串，但不能过滤&#39;&#39; 空格     return false;   &#125; else if (isNaN(parseInt(num))) &#123;     // 识别空格或者没有输入任何值     return false;   &#125; else &#123;     return true;   &#125; &#125;&lt;/script&gt;</code></pre></blockquote><p><strong>案例实践 3：游乐园门票计算</strong></p><blockquote><ul><li>某游乐园的门票价格如下表所示</li><li>请用户输入年龄和星期几，弹出对话框显示门票价格</li><li>星期日到星期一，分别用阿拉伯数字 0、1、2、3、4、5、6 表示</li></ul></blockquote><table><thead><tr><th></th><th>年龄大于 12 岁</th><th>年龄小于等于 12 岁</th></tr></thead><tbody><tr><td>平日</td><td>100</td><td>50</td></tr><tr><td>周末</td><td>200</td><td>150</td></tr></tbody></table><blockquote><p>两种实现思路：</p><ul><li>左图：先判断星期几，再判断年龄</li><li>右图：先判断年龄，再判断星期几</li></ul></blockquote><blockquote><pre><code>&lt;script&gt; // 自动获取当前日期 var date = new Date(); // 设置日期 var date = new Date(&quot;2022/9/912&quot;); // 获取当前星期，0-6分别表示星期日-星期六 var week = date.getDay(); // 让用户输入年龄 var age = Number(prompt(&quot;请输入你的年龄&quot;)); if (week == 0 || week == 6) &#123;   // 周末   if (age &gt; 12) &#123;     alert(&quot;周末门票价格&quot; + 200);   &#125; else &#123;     alert(&quot;周末门票价格&quot; + 150);   &#125; &#125; else &#123;   // 平日   if (age &gt;= 12) &#123;     alert(&quot;今天门票价格&quot; + 100);   &#125; else &#123;     alert(&quot;今天门票价格&quot; + 50);   &#125; &#125;&lt;/script&gt;</code></pre><blockquote><ul><li><code>new Date()</code>：获取当前日期</li><li><code>.getDay()</code>获取日期对应星期</li></ul></blockquote></blockquote><blockquote><blockquote><p>注：</p></blockquote><ul><li>在实际业务场景中，年龄也不会让用户自己输入，而是通过扫描身份证或输入身份证号来识别</li><li>身份证识别相关技术：<ul><li>百度 AI 实践案例，点击查看<a href="https://ai.baidu.com/tech/ocr_cards/idcard">https://ai.baidu.com/tech/ocr_cards/idcard</a></li><li>阿里云 AI 实践案例，点击查看<a href="https://ai.aliyun.com/ocr/card">https://ai.aliyun.com/ocr/card</a></li></ul></li></ul></blockquote><h3 id="二、switch语句"><a href="#二、switch语句" class="headerlink" title="二、switch语句"></a>二、switch语句</h3><blockquote><pre><code>switch (表达式或变量) &#123;  case 值1:    // 执行语句1....    break;  case 值2:    // 执行语句2....    break;  default:    // 执行语句3....    break;&#125;</code></pre></blockquote><ol><li>switch 语句基本用法<blockquote><p>swith 后面的表达式或变量会<strong>依次</strong>会与case 后面的值进行<strong>比较</strong>，比较时是<strong>全等比较</strong>，因此<strong>不会</strong>做数据类型转换</p><ul><li>如果比较结果为<code>true</code>，就会执行当前case下面的执行语句,执行到 <code>break</code> 关键字，就会跳出switch语句，<strong>退出</strong>执行。</li><li>如果比较结果为<code>false</code>，则继续<strong>往下</strong>比较，如果所有结果都为 false，则最后会执行 default 下面的语句。</li><li>当然 <code>default</code> 也可以省略不写</li></ul><pre><code>&lt;script&gt; var a = 1; // a的类型是数字，这里可以尝试把值换成 1,3看下结果 switch (a) &#123;   case &quot;1&quot;: // 1 与 &#39;1&#39; 在全等比较时，返回false 不成立，则继续与下一个case后面值比较     alert(&quot;这里是字符串1,匹配失败&quot;);</code></pre></blockquote></li></ol><blockquote><pre><code> break;</code></pre><p>   case 2: &#x2F;&#x2F; 1 与 2全等比较，false，继续往下比较<br>     alert(“这里是2,匹配失败”);<br>     break;<br>   case 1: &#x2F;&#x2F; 1 与 1 全等，则执行这个case后面的语句<br>     alert(“这里是1,匹配成功”); &#x2F;&#x2F; 在页面弹出弹窗<br>     break;<br>   default:<br>     alert(“找不到相匹配的内容”);<br>     break;<br> }<br>&#x2F;&#x2F;以上代码最后执行结果，最后在页面弹出弹窗，弹窗内容为 ‘这里是 1,匹配成功’<br></script></p><pre><code></code></pre></blockquote><blockquote><blockquote><ul><li>当switch()为表达式时，输出的结果是布尔值，用布尔值来与case值比较</li><li>在实际开发时，switch()括号中表达式的值，经常是以<strong>变量形式</strong>出现</li></ul></blockquote></blockquote><ol start="2"><li><p>break 不写会有什么影响</p><blockquote><ul><li>如果不写<code>break</code>，则会在匹配成功之后，后面所有case 都将被视为匹配，<strong>直到遇见break</strong>，才会退出。</li><li>所有在 switch 语句中，程序员必须主动调用break来跳出switch语句体</li></ul><pre><code>&lt;script&gt;  var a = 1;  switch (a) &#123; case 0: // 全等匹配失败   alert(&quot;这里是0,匹配成功&quot;); // 这里不会弹出来 case 1: // 全等匹配成功，下面代码会执行   alert(&quot;这里是1,匹配成功&quot;); // 这里会弹出来 // 但这个case中没有break，则会将后面所有case都被视为匹配，遇到break才退出 case 2:   alert(&quot;这里是字符串2,匹配成功&quot;); // 这里会弹出来   break; // 到这里退出 default:   alert(&quot;找不到相匹配的内容&quot;);   break;  &#125;&lt;/script&gt;</code></pre><blockquote><p>在上面的代码中，与第二个case匹配成功后，由于没有break会直接执行后续的case，直至遇到break跳出语句体</p></blockquote></blockquote></li><li><p>多条 case 共同一个语句体</p><blockquote><pre><code>var a = 1; switch (a) &#123;   case 1:   case 2:   case 3:     alert(&quot;现在是工作日，记得要早起喽！&quot;);</code></pre></blockquote></li></ol><blockquote><pre><code> break;</code></pre><p> }</p><pre><code>- 由于前两个case都没有语句和break，根据上一点可知，不管switch的值是1、2、3都会执行alert语句，再跳出语句体</code></pre></blockquote><p><strong>if语句形式</strong></p><blockquote><pre><code>&lt;script&gt; var week = 0; if (week == 1 || week == 2 || week == 3 || week == 4 || week == 5) &#123;   alert(&quot;现在是工作日，记得要早起喽！&quot;); &#125; else if (week == 0 || week == 6) &#123;   alert(&quot;今天是周末，尽情的享受吧&quot;); &#125;&lt;/script&gt;</code></pre></blockquote><p><strong>switch 语句</strong></p><blockquote><pre><code>&lt;script&gt; // week表时当前星期几 var week = 4; // var week=new Date().getDay();   自动获取当天是星期几的方法 switch (week) &#123;   case 1:   case 2:   case 3:   case 4:   case 5:     alert(&quot;现在是工作日，记得要早起喽！&quot;);     break;   case 6:   case 0:     alert(&quot;今天是周末，尽情的享受吧&quot;);     break; &#125;&lt;/script&gt;</code></pre></blockquote><ol start="4"><li>switch 表达式值为布尔值<blockquote><ul><li><code>case</code>的结果也要是布尔值或者为布尔值的表达式<br><strong>判断一个人是否是未成年人，如果满 18，就是成功，否则是未成年。</strong></li></ul><pre><code>&lt;script&gt; var a = Number(prompt(&quot;请输入你的年龄！&quot;)); switch (true) &#123;   case a &gt;= 18:     alert(&quot;成年人&quot;);</code></pre></blockquote></li></ol><blockquote><pre><code> break;</code></pre><p>   default:<br>     alert(“未成年”);<br>     break;<br> }<br></script></p><pre><code></code></pre></blockquote><ol start="5"><li>switch 的嵌套<blockquote><pre><code>switch()&#123;   case 值1:       // 执行语句</code></pre></blockquote></li></ol><blockquote><pre><code>   break;</code></pre><p>   case 值2:<br>       &#x2F;&#x2F; 执行语句<br>       switch(){<br>           case 值1:<br>               &#x2F;&#x2F; 执行语句<br>               break;<br>               &#x2F;&#x2F; …..<br>       }<br>       break;<br>       &#x2F;&#x2F; ……<br>}</p><pre><code></code></pre></blockquote><ol start="6"><li>switch 嵌套案例<br><strong>根据年份和对应的月份，判断月份天数</strong><blockquote><ul><li>1，3，5，7，8，10，12 月，每月 31 天</li><li>4，6，9，11 月，每月 30 天</li><li>当年为闰年 2 月 29 天，其它年份，2 月 28 天</li></ul><pre><code>&lt;script&gt; // var year=prompt(&#39;请输入当前年份&#39;) // var year=new Date().getFullYear(); 获取当前年份 var year = 2022; // 用户输入月份 var month = Number(prompt(&quot;请输出当前的月份&quot;)); // var month=new Date().getMonth()+1; 获取当前月份(new Date().getMonth()返回 0-11这间值,0代表1月) switch (month) &#123;   case 1:   case 3:   case 5:   case 7:   case 8:   case 10:   case 12:     alert(&quot;当月有31天&quot;);</code></pre></blockquote></li></ol><blockquote><pre><code> break;</code></pre><p>   case 4:<br>   case 6:<br>   case 9:<br>   case 11:<br>     alert(“当月有30天”);<br>     break;<br>   case 2:<br>     var isRunNian &#x3D;<br>       (year % 4 &#x3D;&#x3D; 0 &amp;&amp; year % 100 !&#x3D; 0) ||<br>       (year % 100 &#x3D;&#x3D; 0 &amp;&amp; year % 400 &#x3D;&#x3D; 0);<br>     switch (isRunNian) {<br>       case true:<br>         alert(“这个月有29天”);<br>         break;<br>       case false:<br>         alert(“这个月有28天”);<br>         break;<br>     }<br>     break;<br>   default:<br>     alert(“你输入的月份有误！”);<br> }<br></script></p><pre><code></code></pre></blockquote><ol start="7"><li>if 语句和 switch 语句应用场景总结<table><thead><tr><th>条件判断句</th><th>应用场景</th></tr></thead><tbody><tr><td>if 语句</td><td>根据条件做出判断，符合条件做什么，不符合条件做什么</td></tr><tr><td>switch</td><td>一个变量存在多个值的情况，根据不同的值来分别讨论时</td></tr></tbody></table></li></ol><h3 id="三、for循环"><a href="#三、for循环" class="headerlink" title="三、for循环"></a>三、for循环</h3><blockquote><p>如果我们想在页面中，重复执行某个操作时，我们就可以用到 for 循环语句。</p></blockquote><ol><li>for 语句的语法<blockquote><pre><code>// 在控制台输出从0-9的数字for (var i = 0; i &lt; 10; i++) &#123;  console.log(i);&#125;</code></pre></blockquote></li></ol><blockquote><p><strong>for 的圆括号中有三个表达式：</strong></p><ul><li>表达式<code>var i=0;</code>表示定义一个“循环变量”i，赋值为 0;</li><li>表达式<code>i &lt; 10;</code> 表示继续执行循环的条件，只要这个条件为真，则会一直执行；</li><li>表达式<code>i++</code>用来<strong>更新循环变量</strong>，使循环变量的值越来越趋向终点</li></ul></blockquote><ol start="2"><li><p>for 语句的执行机理</p><blockquote><p>我们先来看一个简单的 for 循环语句：<br><img src="for循环语句.png"></p><ul><li>首先会执行语句①</li><li>然后判断语句②是否满足，如果满足则<strong>进入循环体</strong>，执行语句 ③，如果不满足则退出循环</li><li>语句体中的语句执行完毕后，执行语句 ④</li><li>再次判断语句 ②是否满足，如果满足则进入循环体，执行语句 ③，如果不满足则退出循环</li><li>①–&gt;②–&gt;③–&gt;④–&gt;②–&gt;③–&gt;④–&gt;②–&gt;③–&gt;④…… 依次继续循环执行</li></ul></blockquote></li><li><p>准确遍历 for 循环</p></li></ol><p><strong>案例 1：</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3,6,9,12,15</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    当 i=3, 3&lt;=15, 满足条件，输出 3; 再执行i+=3更新循环变量，得到i=6    再次判断 i&lt;15这个条件， 即 6&lt;=15, 满足条件，输出 6;  再执行i+=3更新循环变量， 得到i=9    再次判断 i&lt;15这个条件，即 9&lt;=15, 满足条件，输出9; 再执行i+=3更新循环变量，得到 i=12    再次判断 i&lt;15这个条件，即 12&lt;=15, 满足条件，输出12; 再执行i+=3更新循环变量，得到 i=15    再次判断 i&lt;15这个条件，即 15&lt;=15, 满足条件，输出15; 再执行i+=3更新循环变量，得到 i=18    再次判断 i&lt;15这个条件，即 18&lt;=15, 不满足条件，退出for循环*/</span></code></pre></blockquote><p><strong>案例2：</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6,13</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*  当 i=2, i&lt;12, 满足条件，i+=4, 输出 6; 再执行i+=3 得到 i=9  当 i=9, i&lt;12, 满足条件，i+=4, 输出 13; 再执行 i+=3 得到 i=16  当 i=16, i&lt;12, 不满足条件，退出循环*/</span></code></pre></blockquote><p><strong>案例 4：无循环体语句</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不在循环体中，输出循环体结束时 i 的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span></code></pre></blockquote><p><strong>案例 5：死循环</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// i永远都会小于10 ，所以会进入死循环</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><strong>案例 6：</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没有任何输出，一开始就不满足条件</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在循环体外输出：i=10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><ol start="4"><li>for 循环案例<blockquote><blockquote><p>打断点：控制台–&gt;source–&gt;点击要选择的行–&gt;空白处右击重新加载–&gt;在watch里输入要监测的变量名–&gt;点击向下箭头就可以看到循环步骤<br><strong>求 1-10 之间所有数字之和</strong></p></blockquote><pre><code>// 这里一定要赋初始值为0，否则为undefined,在做+加法运算时，转换成NaN，NaN与任何数相加都得NaNvar sum = 0;for (var i = 1; i &lt;= 10; i++) &#123;  sum += i; // 等同于 sum=sum+i;&#125;console.log(sum); // 55</code></pre></blockquote></li></ol><p><strong>字符串的拼接（在页面输入 10 颗星星）</strong></p><blockquote><pre><code>// 一定要赋初值始，并且只能是&#39;&#39;字符符串。var str = &quot;&quot;;for (var i = 0; i &lt; 10; i++) &#123;  str += &quot;★&quot;;&#125;console.log(str); // ★★★★★★★★★★</code></pre></blockquote><ol start="5"><li><p>for 循环嵌套</p><blockquote><p>for 循环中可以嵌套 for 循环</p><pre><code>for (var i = 0; i &lt; 5; i++) &#123;  // ...循环体  for (var j = 0; j &lt; 5; j++) &#123; // ...循环体  &#125;&#125;</code></pre><p><strong>for 循环嵌套的执行原理</strong></p><ul><li>从<strong>最外层</strong> for 循环开始执行，执行到<strong>内部</strong> for 循环时，要把内部 for 循环<strong>执行完</strong></li><li>再<strong>更新最外层</strong>的循环变量，然后判条件是否成立，成立则执行循环体中代码，进入内部循环</li><li>内部循环全部执行完，再更新最外层循还变量……重复上面过程</li></ul></blockquote></li><li><p>for 循环嵌套案例</p></li></ol><p><strong>案例实践 1：打印五行七列的星星</strong></p><blockquote><pre><code>var str = &quot;&quot;;// 行for (var i = 0; i &lt; 5; i++) &#123;  // 列  for (var j = 0; j &lt; 7; j++) &#123;    str += &quot;★&quot;;  &#125;  str += &quot;\n&quot;;&#125;console.log(str);</code></pre><blockquote><p>换行用转义符<code>\n</code></p></blockquote></blockquote><p><strong>案例实践 2：打印 99 乘法表</strong><br><img src="99乘法表.png"></p><blockquote><pre><code>&lt;style&gt;  span &#123;    display: inline-block;    width: 100px;    line-height: 30px;    background-color: #ddd;    margin: 5px;    text-align: center;  &#125;&lt;/style&gt;&lt;script&gt;  // 最外层for循环打印对应行数  for (var i = 1; i &lt;= 9; i++) &#123;    // 内层for循环，打印对应列数    for (var j = 1; j &lt;= i; j++) &#123;      document.write(&quot;&lt;span&gt;&quot; + j + &quot;*&quot; + i + &quot;=&quot; + j * i + &quot;&lt;/span&gt;&quot;);    &#125;    document.write(&quot;&lt;br/&gt;&quot;);  &#125;&lt;/script&gt;</code></pre></blockquote><blockquote><ul><li><code>document.write();</code>：往body后面追加内容</li><li>用<code>span</code>标签包裹，<code>&lt;/br&gt;</code>换行</li></ul></blockquote><p><strong>总结规律：</strong></p><blockquote><ul><li>最<strong>外层</strong> for 循环对应的<strong>行数</strong></li><li>最<strong>内层</strong> for 循环对应每一行中的<strong>列</strong></li><li>在执行 for 嵌套时，首先要找的就是<strong>行和列的关系</strong>（当然最难的也就是找出列和行之间的关系）</li></ul></blockquote><p><strong>案例实践 3：打印下表中的 3 个图形</strong></p><blockquote><p><code>document.writeln</code>是向文档中写入一串文本，并紧跟着一个换行符（换行符会被编译成<strong>空格</strong>效果）<br><img src="图形打印.png"></p></blockquote><blockquote><p>原理：</p><ul><li>先打印空白，再打印方块</li></ul></blockquote><p><strong>等腰三角形</strong></p><blockquote><pre><code>&lt;script&gt;  // 行  for (var i = 0; i &lt;= 5; i++) &#123;    // 列左边空格    for (var j = 1; j &lt;= 5 - i; j++) &#123;      document.writeln(&quot;&amp;nbsp&quot;);    &#125;    // 列中口    for (var k = 0; k &lt; i + 1; k++) &#123;      document.writeln(&quot;口&quot;);    &#125;    document.writeln(&quot;&lt;/br&gt;&quot;);  &#125;&lt;/script&gt;</code></pre></blockquote><p><strong>v字型</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">// 图形行</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列前面空格</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列中第1个星星</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 每列两个星星中间的列空格</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> h <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">;</span> h<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列中第2个星星</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote><p><strong>X图形</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">// 打印 x的上半部分</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列前面空格</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列中第1个星星</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 每列两个星星中间的列空格</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> h <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">;</span> h<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列中第2个星星</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在v的底部，只要一个星，所以要去掉一个</span>        document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// x的下半部分</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列前面空格</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列中第1个星星</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 保证上v和下v中*的个数相同，则下v左边最后一个星要去掉</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 每列两个星星中间的列空格</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> h <span class="token operator">&lt;=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> h<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列中第2个星星</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote><blockquote><blockquote><p>总结：</p><ul><li>首先切分图形，<strong>空白处和图形处</strong>(一个for循环里的不同子for循环)；还可以分为<strong>上下</strong>两部分(X字型,写在两个for循环里，会自动拼接)</li><li>也可以组合空格和图形，例如等腰三角形的例子，方块之间有空格，所以把方块和空格组合起来</li><li>写下每行对应列数，更加容易摸清规律</li></ul></blockquote></blockquote><h3 id="四、for循环算法题"><a href="#四、for循环算法题" class="headerlink" title="四、for循环算法题"></a>四、for循环算法题</h3><blockquote><ul><li>关于什么是算法，我们先不讲，我们做两道算法题，来找找感觉，然后在本章的第九个版块，我们会再深入探讨算法。</li><li>在接下来的算法题中，我们会接触 2 个重要的概念：累加器、累乘器。</li></ul></blockquote><ol><li>计算 1+2+3+ …… +99+100 的和<blockquote><blockquote><p>求 1+2+3+…..+99+100 的和，本质就是等差数列求和<br><strong>什么是等差数列 ？</strong></p></blockquote><ul><li>等差数列：如果一个数列从第二项起，每一项与它的前一项的差等于同一个常数，这个数列就叫做等差数列</li><li>如：1，2，3，4，5，6….. 或 1，3，5，7，9，11，….</li><li>如果我们要计算等差数列的求和，在数学中是有计算公式的，也就是前面讲到的高斯算法：<ul><li>计算等差数列前 n 项和：Sn&#x3D;(n*(a1+an))&#x2F;2</li><li>a1代表首项，a2 代表第 2 项…..an 代表第 n 项</li></ul></li></ul></blockquote></li></ol><blockquote><ul><li>在计算机中，并没有等差数的求和公式，我们必须一项一项的加起来，就要用到 <strong>for</strong> 循环</li><li>在 JS 中，我们使用<strong>累加器</strong>来操作</li></ul></blockquote><blockquote><pre><code>// 创建累加器var sum=0;// 遍历1到100的每一个数字，每遍历一个数字就要把这个数字加到sum中去for(var i=1;i&lt;=100;i++)&#123;  sum+=i;  i++;&#125;console.log(sum);</code></pre></blockquote><blockquote><ul><li>累加器（变量 sum)必须定义在循环外面的前面，不能写在循环体语句里</li><li>累加器的初始值必须设置，而且必须设置为 <code>0</code>，不会影响累加结果</li><li>使用最终累加<strong>结果</strong>时，必须在 for 循环结束后的<strong>外面</strong></li><li>很多 JS 大神喜欢将 sum 这样的变量，书写在 for 循环的括号中</li></ul><pre><code>// 循环开始的时候定义sum，sum就是累加器，初始值是0// 遍历1到100的每一个数字，每遍历一个数字要把这个数字加到sum中去for (var i = 1, sum = 0; i &lt;= 100; i++) &#123;  sum += i;&#125;// 输出累加器的值console.log(sum);</code></pre></blockquote><ol start="2"><li>计算 10 的阶乘<blockquote><ul><li>一个<strong>正整数</strong>的阶乘（factorial）是所有小于及等于该数的正整数的积，并且 <strong>0 的阶乘为 1</strong>。</li><li>自然数 n 的阶乘写作 <code>n!</code></li><li>在 JS 中，我们使用<strong>累乘器</strong>来操作</li></ul><pre><code> // 累乘器,初始值必须是1 var n = 1; for (var i = 10; i &gt;= 1; i--)&#123;     // 将每一次的数据 i 要累乘到 n 中去     n *= i; &#125; // 循环结束后使用累乘结果 console.log(n); // 3628800</code></pre></blockquote></li></ol><blockquote><ul><li>累乘器必须<strong>定义</strong>在循环外部前面</li><li>累乘器的初始值必须是 <code>1</code>，因为 1 乘以任何数都等于本身</li><li>累乘器最终<strong>结果</strong>必须在 for 循环结束后的外面</li></ul></blockquote><h3 id="五、while-循环"><a href="#五、while-循环" class="headerlink" title="五、while 循环"></a>五、while 循环</h3><blockquote><ul><li>while 表示 “当” 的意思，是一种<strong>先测试语句</strong>，和 for 循环一样，先测试条件，根据测试条件再判断是否执行行环循体中代码</li><li>while括号里放的是：使循环继续的条件</li></ul></blockquote><blockquote><pre><code>while (测试条件) &#123;  // 执行语句，代码块&#125;</code></pre><img src="while循环.png"></blockquote><ol><li><p>while 循环注意事项</p><blockquote><ul><li>while 语句事先<strong>不指定</strong>循环开始、结束的范围，只要测试条件满足，就一直执行循环体</li><li>所以 while 循环体内的语句，必须使循环测试条件<strong>趋向不成立</strong>，否则会死循环</li><li>while 循环没有指定循环的变量，必须在循环外定义好循环的变量</li><li>while 循环体内要更新循环变量</li></ul></blockquote></li><li><p>更适合 while 的应用场景</p><blockquote><ul><li>while 循环更适合，没有定范围的循环，根据结果，找条件</li></ul></blockquote></li></ol><p><strong>应用实践 1：寻找 n^2大于 23450 的最小整数</strong></p><blockquote><pre><code>var n=0;while(n*n&lt;=23450)&#123;  n++;&#125;console.log(n);</code></pre></blockquote><p><strong>应用实践 2：</strong></p><blockquote><p>小兔子拔萝卜，第 1 天拔 1 个，第 2 天拔 2 个，第 3 天拔 3 个 …. 以此类推。请问小兔子多少天能把 500 个萝卜扒光 ？</p></blockquote><p><strong>题目解析：</strong></p><blockquote><ul><li>当等差数列 1,2,3,4….n-1,n 之和第一次&gt;500 时，这里的 n 就是我们要找的 n</li><li>所以我们需要有一个累加器来累加所有天数萝卜之和，当累加器的值&lt;500 时，就一直累加，加到&gt;500 时，就不加了。</li></ul></blockquote><blockquote><pre><code>var sum=0;var day=1;while(sum&lt;=500)&#123;  sum+=day;  day++;&#125;console.log(day-1);</code></pre><blockquote><p>注意：天数需要减1，因为当sum到500时，day++后才会到判断条件这步</p></blockquote></blockquote><h3 id="六、do-while-循环"><a href="#六、do-while-循环" class="headerlink" title="六、do while 循环"></a>六、do while 循环</h3><img src="do%20while.png"><blockquote><pre><code>do &#123;  // 循环体&#125; while (循环执行条件);</code></pre><blockquote><p>while()放的是：使循环继续的条件，当这个条件不满足时，就跳出循环</p></blockquote></blockquote><p><strong>详细解读</strong></p><blockquote><ul><li><code>do while</code>循环是一种 <strong>后测试</strong>循环语句，这一点和 while 和 for 都不一样。</li><li>for循环和while循环每次都是 “先测试条件是否满足，然后执行循环体”</li><li>do while 循环是 “先执行循环，然后测试条件是否满足”</li><li>循环体一定会至少执行一次，然后再检测循环执行条件是否为 true，决定是否继续执行循环体。</li><li>do while 循环将循环执行条件写到了循环体的后面</li><li>循环语句要更新循环变量</li></ul></blockquote><ol><li><p>随机数函数</p><blockquote><p>之前讲到过随机数函数：Math.random()方法，可以得到 0-1 之间的小数</p><ul><li><code>Math.random()方法，可以得到 0-1 之间的小数</code></li></ul></blockquote></li><li><p>更适合 do while 的应用场景</p><blockquote><ul><li>先运行一次代码，再进行条件判断</li></ul></blockquote></li></ol><p><strong>应用实践 1：</strong></p><blockquote><p>随机生成 2 个 1-10 之内的整数，但是这 2 个数之和要等于 10</p><pre><code> do &#123;    var a = (Math.random() * 10 + 1) &gt;&gt; 0;    var b = (Math.random() * 10 + 1) &gt;&gt; 0;    var sum = a + b;      &#125; while (sum != 10);      console.log(a, b, sum);</code></pre></blockquote><p><strong>应用实践 2：</strong></p><blockquote><p>随机移动元素的位置</p><ul><li>在做游戏开发和动画的时候，我们想随机生成两个数 a 和 b，作为元素在 x，y 轴方向上的移动距离</li><li>要求 a 和 b 的值均在[-10 , 10]区间随机整数</li><li>但 a 和 b，<strong>不能同时</strong>为 0</li></ul><pre><code>do &#123;    var a = (Math.random() * 21 - 10) &gt;&gt; 0;    var b = (Math.random() * 21 - 10) &gt;&gt; 0;   &#125; while (a == 0 &amp;&amp; b == 0);console.log(a, b);</code></pre></blockquote><h3 id="七、循环语句总结"><a href="#七、循环语句总结" class="headerlink" title="七、循环语句总结"></a>七、循环语句总结</h3><table><thead><tr><th>循环类型</th><th>语法</th><th>使用场景</th></tr></thead><tbody><tr><td>for 循环</td><td>for(语句 1; 语句 2; 语句 3){被执行的代码块;}</td><td>循环次数是固定的,知道明确的循环范围</td></tr><tr><td>while循环</td><td>while(条件){需要执行的代码;变量变化语句;}</td><td>循环次数不定,更适合根据结果，找条件</td></tr><tr><td>do … while 循环</td><td>do {需要执行的代码;}while(条件)</td><td>先运行一次代码，如果不符合条件再重做，符合就不做了。其不满足条件，是在事情做完后产生的。</td></tr></tbody></table><h3 id="八、break、continue、label-语句"><a href="#八、break、continue、label-语句" class="headerlink" title="八、break、continue、label 语句"></a>八、break、continue、label 语句</h3><blockquote><p>break 和 continue 语句为执行循环代码提供了更严格的控制手段</p></blockquote><ol><li>break 语句<br><strong>什么时候用 ？</strong><blockquote><ul><li>break 语句用于<strong>立即</strong>退出<strong>当前循环</strong>，他只能用在<strong>循环语句</strong>中，如 <code>for</code> 循环和 <code>while</code> 循环中都可以(if和switch不可以，他们是分支结构语句)</li></ul></blockquote></li></ol><blockquote><ul><li>break 在 for 嵌套中，他只会退出他<strong>所在的</strong>那个 for 循环语句，然后<strong>继续执行</strong>当前 for <strong>循环外</strong>的 for 循环体中语句</li></ul><pre><code>&lt;script&gt;  for (var i = 0; i &lt; 4; i++) &#123;    for (var j = 0; j &lt; 4; j++) &#123;      if (j == 3) &#123;        break; // 每次执行到j==3时，就会退出当前for循环，继续执行当前for外的for循环      &#125;      console.log(i + &quot;-&quot; + j);    &#125;    console.log(&quot;j&quot; + j); // break退出for时，会从这里开始执行下一次的外层for循环//i=0 j=0,0-0 j=1,0-1 j=2,0-2 j=3,&quot;j&quot;3//i=1,j=0,1-0 j=1,1-1 j=2,1-2 j=3,&quot;j&quot;3//……  &#125;&lt;/script&gt;</code></pre></blockquote><blockquote><ul><li>break 用在 while 语句中，通常和while(true){}搭配使用</li></ul><pre><code>// 寻找最小的满足 n^2 &gt; 23450 的整数n// 方法一var n = 1;while (n * n &lt;= 23450) &#123;  n++;&#125;console.log(n); //154</code></pre></blockquote><p>&#x2F;&#x2F; 方法二<br>var n &#x3D; 1;<br>while (true) {<br>  if (n * n &gt; 23450) {<br>    break;<br>  }<br>  n++;<br>}<br>&#x2F;&#x2F; 输出：154</p><blockquote><pre><code></code></pre></blockquote><ol start="2"><li><p>continue 语句</p><blockquote><ul><li>continue 用于跳过循环中的<strong>一个迭代</strong> ，并<strong>继续执行</strong>循环中的<strong>下一个</strong>迭代，for 循环更经常使用 continue</li><li>continue 在 <strong>for 嵌套</strong>中，也是跳过<strong>当前循环</strong>中的一个迭代，并继续执行循环中的下一个迭代</li></ul><pre><code>&lt;script&gt;  for (var i = 0; i &lt; 4; i++) &#123; for (var j = 0; j &lt; 4; j++) &#123;   if (j == 2) &#123;     continue;   &#125;   console.log(i + &quot;-&quot; + j); &#125;  &#125;//i=0 j=0,0-0 j=1,0-1 j=2(停止该次循环) j=3,0-3 //i=1 j=0,1-0 j=1,1-1 j=2(停止该次循环) j=3,0-3//…… &lt;/script&gt;</code></pre></blockquote></li><li><p>label 语句</p><blockquote><p>我们上面讲过，不管是 <code>continue</code> 还是 <code>break</code>，他最多能退出的也就是当前的 <code>for</code> 循环，如果我想退出<strong>最外层</strong>的 for 循环，那就可以借助这里的 <code>label</code></p><blockquote><p>在实际开发应用不多，了解即可</p></blockquote></blockquote></li></ol><blockquote><p><code>label: statement</code></p><ul><li>label 表示标签名，这个名字是可以<strong>自定义</strong>的标识符</li><li>statement 表示代码块</li><li>label 标签名和 statement 代码块之间使用英文状态下的<strong>冒号</strong>分隔</li><li>label 标签一般都是与 for 循环语句等<strong>循环语句</strong>配合使用,同时是由 break 和 continue 语句<strong>引用</strong>的。</li></ul></blockquote><p><strong>label 标签与 continue 语句结合</strong></p><blockquote><p>表示退出到 label 标记位置，继续从 label 标签标识的 for 循环开始执行下一次循环</p><pre><code>// outer就是label标签，用来标识第一个for循环语句，其名字outer可以自定义，不一定是outerouter: for (var i = 0; i &lt; 4; i++) &#123;  for (var j = 0; j &lt; 4; j++) &#123;    if (j == 2) &#123;      continue outer;    &#125;    console.log(i + &quot;-&quot; + j);  &#125;  console.log(&quot;j&quot; + j); // 永远不会执行&#125;//i=0 j=0,0-0 j=1,0-1 j=2 //i=1 j=0,1-0 j=1,1-1 j=2</code></pre></blockquote><p><strong>label 标签与 break 语句结合</strong></p><blockquote><p>表示立即退出到 label 标签标识后的 for 循环，<strong>不再执行</strong></p><pre><code>// outer就是label标签，其名字可以自定义，不一定是outerouter: for (var i = 0; i &lt; 4; i++) &#123;  for (var j = 0; j &lt; 4; j++) &#123;    if (j == 2) &#123;      break outer;    &#125;    console.log(i + &quot;-&quot; + j);  &#125;  console.log(&quot;j&quot; + j); // 永远不会执行//i=0 j=0,0-0 j=1,0-1 j=2(立即停止)&#125;</code></pre></blockquote><ol start="4"><li>关于break、continue、label语句总结<table><thead><tr><th>语句</th><th>描述</th></tr></thead><tbody><tr><td>break</td><td>break语句用于立即<strong>退出当前循环</strong>，他只能用在循环语句中，如for循环和while循环中都可以</td></tr><tr><td>continue</td><td>continue 用于跳过循环中的<strong>一个迭代</strong> ，并继续执行循环中的下一个迭代</td></tr><tr><td>label</td><td>与break配合：表示立即退出到label标签标识后的for循环，<strong>不再执行</strong>。与continue配合：表示退出到label标记位置，继续从label标签标识的for循环<strong>开始执行下一次循环</strong></td></tr></tbody></table></li></ol><blockquote><pre><code>var str = &quot;icoding123&quot;;var num = parseInt(str);if (num == NaN) &#123;    alert(NaN);&#125; else &#123;    alert(str);&#125;//alert(&quot;icoding123&quot;)</code></pre><blockquote><p>NaN永远不等于NaN</p></blockquote></blockquote><blockquote><pre><code>var a = 1;var b = 0;var str1 = &quot;&quot;;var str2 = false;if (a || b || str1) &#123;  //1 || &quot;&quot; --&gt;true    alert(a + b + str1);  //a+b做加法运算=1,1+&quot;&quot;做字符串拼接=1&#125;if (a &amp;&amp; b &amp;&amp; !str2) &#123;  //false &amp;&amp; true--&gt;false    alert(!str2);&#125;if (a &amp;&amp; !str1 &amp;&amp; !str2) &#123;  //true &amp;&amp; true    alert(!str1);  //alert(true);&#125;//alert(1);//alert(true);</code></pre><blockquote><p>当+号两边的数都是数值时，做加法运算，否则为”连字符”（字符串的拼接）<br>只有if括号里为true时才会执行</p></blockquote></blockquote><h3 id="九、算法"><a href="#九、算法" class="headerlink" title="九、算法"></a>九、算法</h3><h4 id="到底什么是算法-？"><a href="#到底什么是算法-？" class="headerlink" title="到底什么是算法 ？"></a>到底什么是算法 ？</h4><blockquote><ul><li>在<strong>数学领域</strong>中，算法是用来解决某一类问题的公式和思想。</li><li>而在<strong>计算机科学领域</strong>中，它本质是一系列<strong>程序指令</strong>，用来解决特定的运算和逻辑问题。</li><li>在计算机中，算法就是把一个问题，拆解为计算机能够一步一步执行的<strong>步骤</strong></li></ul></blockquote><ol><li><p><strong>衡量算法的好坏：</strong></p><blockquote><blockquote><p>算法有简单的也有复杂的，衡量算法的好环有以下几个指标</p></blockquote><ul><li>时间复杂度：代码运行得到结果所花的时间</li><li>空间复杂度： 代码运行是所占用的内存空间大小</li><li>正确性（经得起时间、规模、大范围应用也不会出错）</li><li>健壮性：是指一个计算机系统在执行过程中处理错误,以及算法在遭遇输入、运算等异常时继续正常运行的能力</li><li>可读性</li></ul></blockquote></li><li><p><strong>计算机的优势</strong></p><blockquote><ul><li>计算机最突出的能力就是<strong>计算</strong>，它<strong>没有</strong>归纳总结、逻辑推理的能力。</li><li>所以人们使用计算机解决问题的时候，要”扬长避短”</li><li>充分发挥计算机的计算优势，而<strong>不要</strong>让它进行逻辑推理</li></ul></blockquote></li></ol><blockquote><ul><li>但并不意味着，我们就可以完全不考虑计算机在计算一个算法时所需要<strong>耗费的时间</strong>和<strong>占用的内存</strong>。相同的结果，肯定是耗时越小，占用的内存空间越小越好了。</li><li>所以我们在写算法时，需要考虑<strong>算法的复杂度</strong>，那什么是算法的复杂度呢 ？我们暂时不学习，我们先做几道算法题，找找感觉，然后再下下节课，我们来重点学习算法的复杂度。</li></ul></blockquote><h4 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h4><blockquote><p>由用户输入数字 n，请计算下面算式的值:</p><ul><li>3&#x2F;2+4&#x2F;3+5&#x2F;4+……+(n+1&#x2F;n)<br><strong>首先我们来找规律：</strong></li><li>第一项是分母是从 <code>2</code> 开始的，每一项分子比分母大 1</li><li>所以在 for 循环，遍历时，只需要遍历分母就好，分母为 i ，分子为 i+1</li></ul><pre><code>// 由用户输入数字n,计算 3/2 + 4/3 + 5/4 + ... + (n+1)/n 的结果</code></pre></blockquote><p>&#x2F;&#x2F; 用户输入数字n<br>var n &#x3D; Number(prompt(“请输入数字n”));</p><blockquote></blockquote><p>&#x2F;&#x2F; 累加器<br>var sum &#x3D; 0;<br>&#x2F;&#x2F; 遍历分母就可以了，因为分子就是分母加1有关系<br>for (var i &#x3D; 2; i &lt;&#x3D; n; i++) {<br>  sum +&#x3D; (i + 1) &#x2F; i; &#x2F;&#x2F; 每一项值 i+1&#x2F;i<br>}<br>&#x2F;&#x2F; 输出累加结果<br>alert(sum.toFixed(2)); &#x2F;&#x2F; 这里要特别注意小数的处理</p><blockquote><pre><code></code></pre></blockquote><h4 id="累乘器"><a href="#累乘器" class="headerlink" title="累乘器"></a>累乘器</h4><blockquote><p>由用户输入数字 n，请计算 n 的阶乘</p></blockquote><h4 id="累加器与累乘器的结合"><a href="#累加器与累乘器的结合" class="headerlink" title="累加器与累乘器的结合"></a>累加器与累乘器的结合</h4><blockquote><p>大厂经典面试真题：计算圆周率 π</p><ul><li>π &#x3D; <code>2 * (1 + 1/3 + (1*2)/(3*5) + (1*2*3)/(3*5*7) + (1*2*3*4)/(3*5*7*9)) + (1*2* ... *n)/(3*5*...*(2n+1));</code></li><li>第一步：找规律 ，除去第 1 项，每一项都等于前一项 * n&#x2F;(n*2+1)</li><li>这里需要用到累乘器来计算出每一项的值</li><li>然后利用累加器，把每一项加起来</li></ul><pre><code>// 累加器，就是最后的答案var sum = 0;// 累乘器，用来制作每一项，制作出来的这个项，要往累加器中累加var item = 1;</code></pre></blockquote><p>&#x2F;&#x2F; 让用户输入n<br>var n &#x3D; Number(prompt(“请输入数字n”));</p><blockquote></blockquote><p>&#x2F;&#x2F; 遍历<br>for (var i &#x3D; 1; i &lt;&#x3D; n; i++) {<br>  &#x2F;&#x2F; 要先制作项目<br>  item *&#x3D; i &#x2F; (2 * i + 1);<br>  console.log(item);<br>  &#x2F;&#x2F; 把每一项往累加器中累加<br>  sum +&#x3D; item;<br>}</p><blockquote></blockquote><p>&#x2F;&#x2F; 显示结果<br>alert((1 + sum) * 2);</p><blockquote><pre><code>&gt;算法题最难的点在于找到背后的规律，和相关的一些通用处理算法的技巧。</code></pre></blockquote><h4 id="穷举法"><a href="#穷举法" class="headerlink" title="穷举法"></a>穷举法</h4><blockquote><p>穷举法的基本思想是根据题目的部分条件确定答案的<strong>大致范围</strong>，并在此范围内对所有的情况<strong>逐一验证</strong>，直到全部情况验证完毕。</p><ul><li>若某个情况验证符合题目的全部条件，则为本问题的一个解</li><li>若全部情况验证后都不符合题目的全部条件，则本题无解。</li><li>穷举法也称为枚举法。</li><li>穷举法是一种算法思想，把在条件范围内的所有情况都逐一验证一遍。</li></ul></blockquote><ol><li>穷举法应用1：寻找能被整除的数<blockquote><p>寻找 100 以内的既能被 3 整除，也能被 5 整除的数字<br><img src="穷举法1.png"></p></blockquote></li></ol><blockquote><blockquote><p>计算机不会找规律 和逻辑推理，他最大的优势就是强大的计算能力</p></blockquote><pre><code>// 寻找100以内的既能被3整除，也能被5整除的数字// 穷举法，从1开始实验for (var i = 1; i &lt;= 100; i++) &#123;  if (i % 3 == 0 &amp;&amp; i % 5 == 0) &#123;    console.log(i); // 15、30、45、60、75、90  &#125;&#125;</code></pre></blockquote><ol start="2"><li>穷举法应用：寻找约数<blockquote><p><strong>什么是约数</strong><br><code>48的约数 ： 1、2、3、4、6、8、12、16、24、48</code></p><ul><li>这些数字都是能够被48整除的</li><li>或者说 让48除以这些数字，余数都是0</li></ul><pre><code>// 用户输入数字 nvar n = prompt(&quot;请输入数字&quot;);// 穷举法 从1开始验证for (var i = 1; i &lt;= n; i++) &#123;  if (n % i == 0) &#123; console.log(i);  &#125;&#125;</code></pre></blockquote></li></ol><blockquote><blockquote><p>除去操作符两边的操作数都是字符串这种情况外，其它情况在在作<strong>比较</strong>时(<code>i&lt;=n</code>)，会先自动调用<code>Number()函数</code>，将非数字类型转换为数字 （<strong>隐式转换</strong>） ，然后再进行比较。 所以可以不用写成<code>n = Number(prompt(&quot;请输入数字&quot;))</code>;</p></blockquote></blockquote><ol start="3"><li><p>穷举法应用：寻找符合条件的数字</p><blockquote><p>请问 <code>1~100</code> 中哪个数字除以 3 余 1，除以 4 余 2，除以 5 余 3 ？</p><pre><code>// 使用穷举法for (var i = 1; i &lt;= 100; i++) &#123;  if (i % 3 == 1 &amp;&amp; i % 4 == 2 &amp;&amp; i % 5 == 3) &#123; console.log(i); // 58  &#125;&#125;</code></pre></blockquote></li><li><p>穷举法应用：求水仙花数</p><blockquote><p>请输入一个三位数，判断这个数是不是水仙花数<br><strong>什么是水仙花数 ？</strong></p><ul><li>如果一个数是水仙花数，那么这个数的个位 3 次方+十位数的 3 次方+百位数的 3 次方&#x3D;这个数本身</li><li>如 153 ,其中 13 + 53 + 33&#x3D;153 ，这里的 153 就是水仙花数</li><li>如 154，其中 13 + 53 + 43 &#x3D; 190，所以这里的 154 不是水仙花数<br><strong>关键点在于拆数</strong></li><li>方法1：<ul><li>百位：&#x2F;100取整(123&#x2F;100&#x3D;1.23)</li><li>十位：&#x2F;10取整–&gt;%10(123&#x2F;10&#x3D;12%10&#x3D;2)</li><li>个位：%10取整(123%10&#x3D;3)</li></ul></li><li>方法2：<code>str.charAt(index)</code><ul><li>str.charAt(index); str 要检索的字符串，index 查找的索引，字符串中第一个字符下标是 0，index 为正整数</li><li>从左至右分别是0位、1位、……</li></ul></li></ul></blockquote></li></ol><p><strong>方法1：</strong></p><blockquote><pre><code> var n = Number(prompt(&quot;请输入一个3位数的整数&quot;));  if (n &gt;= 100 &amp;&amp; n &lt;= 999 &amp;&amp; n.length == 3) &#123;    var a = parseInt(n / 100);    var b = parseInt(n / 10) % 10;    var c = n % 10;    if (a * a * a + b * b * b + c * c * c == n) &#123;      alert(n + &quot;是水仙花数&quot;);    &#125; else &#123;      alert(n + &quot;不是水仙花数&quot;);    &#125;  &#125; else &#123;    alert(&quot;你输入的数字不合法！&quot;);  &#125;</code></pre><blockquote><p>数字长度用n.length检验</p></blockquote></blockquote><p><strong>方法2：</strong></p><blockquote><pre><code> var n = prompt(&quot;请输入一个3位数的整数&quot;);  if (n &gt;= 100 &amp;&amp; n &lt;= 999 &amp;&amp; n.length == 3) &#123;    var a = n.charAt(0);    var b = n.charAt(1);    var c = n.charAt(2);    if (a * a * a + b * b * b + c * c * c == n) &#123;      alert(n + &quot;是水仙花数&quot;);    &#125; else &#123;      alert(n + &quot;不是水仙花数&quot;);    &#125;  &#125; else &#123;    alert(&quot;你输入的数字不合法！&quot;);  &#125;</code></pre></blockquote><ol start="5"><li><p>穷举法应用：寻找质数(反推)</p><blockquote><p>请寻找 1 ~ 100 的所有质数</p><ul><li>质数：只能被 1 和它本身整除的数字，<strong>最小的质数是 2</strong></li><li>比如：2、3、5、7、11、13、17、19、23、29 ……<blockquote><p>反推，能被除<strong>1和自身</strong>以外的数整除的就不是质数</p></blockquote></li></ul><pre><code>// 穷举法outer: for (var i = 2; i &lt;= 100; i++) &#123;  // 内层循环开始从2开始到小于这个数字的每一个数字都尝试除i,如果能够整除，说明它不是质数，就可以筛选下一个数字了  for (var j = 2; j &lt; i; j++) &#123; if (i % j == 0) &#123;   // 说明数字 i不是质数，因为它找到了除1和它自身之外的约数了   // continue表示放弃这个数字，开始迭代下个数字，continue它负责的是它所在的最内层的for循环   // 要给for循环加上label,然后在continue的后面加上这个label   // 这样就表示立即开始迭代外层for循环的下一个数字了，而不是内层for循环   continue outer; &#125;  &#125;  // 能够遇见这条语句的数字i,一定是质数，否则就被continue略过了  console.log(i);&#125;</code></pre></blockquote></li><li><p>穷举法应用：鸡兔同笼</p><blockquote><p>“今有雉兔同笼，上有三十五头，下有九十四足，问雉兔各几何 ？”<br><strong>数学方法解题思路：</strong></p><ul><li>鸡和兔子各有一个头：a + b &#x3D; 35</li><li>鸡有 2 只脚，兔子有 4 只脚：2a + 4b &#x3D; 94</li></ul><pre><code>// 鸡兔同笼</code></pre></blockquote><p>&#x2F;&#x2F; 方法1：<br>&#x2F;&#x2F; 假设小鸡有a只，兔子有b只<br>for (var a &#x3D; 0; a &lt;&#x3D; 35; a++) {<br>  for (var b &#x3D; 0; b &lt;&#x3D; 35; b++) {<br> if (a + b &#x3D;&#x3D; 35 &amp;&amp; 2 * a + 4 * b &#x3D;&#x3D; 94) {<br>   console.log(“小鸡有：” + a + “只，兔子有：” + b + “只。”); &#x2F;&#x2F; 小鸡有：23只，兔子有：12只。<br> }<br>  }<br>}</p><blockquote></blockquote><p>&#x2F;&#x2F; 方法2：优化算法（减少for循环的次数）<br>for (var a &#x3D; 0; a &lt;&#x3D; 35; a++) {<br>  var b &#x3D; 35 - a;<br>  if (2 * a + 4 * b &#x3D;&#x3D; 94) {<br> console.log(“小鸡有：” + a + “只，兔子有：” + b + “只。”); &#x2F;&#x2F; 小鸡有：23只，兔子有：12只。<br>  }<br>}</p><blockquote><pre><code></code></pre></blockquote></li></ol><h3 id="十、算法如何学习-？"><a href="#十、算法如何学习-？" class="headerlink" title="十、算法如何学习 ？"></a>十、算法如何学习 ？</h3><blockquote><p>在早期，我们学算法，学数据结构，最重要的是学基本功，只有把基本功学好了，算法的基本功就是算法的复杂度和数据结构。然后</p><ul><li>多敲、多练、多总结</li><li>经典的业务需求场景要熟记，多实践</li><li>多寻找算法题，进行练习</li><li>有了一定基础后，推荐在力扣上刷算法题：<a href="https://leetcode.cn/problemset/algorithms/">https://leetcode.cn/problemset/algorithms/</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（二）</title>
      <link href="/2023/12/02/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/12/02/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="JS表达式、操作符、位运算符"><a href="#JS表达式、操作符、位运算符" class="headerlink" title="JS表达式、操作符、位运算符"></a>JS表达式、操作符、位运算符</h2><blockquote><ul><li>操作符： 操作符，也称为运算符，是用于实现赋值、比较值、执行算术运算等功能的符号</li><li>表达式： 简单理解为是由<strong>数字、操作符、变量</strong>等组成的式子，并且这个式子<strong>能求得值</strong>。</li><li>返回值： 表达式最终都会有一个返回结果，这个结果我们称为返回值</li></ul></blockquote><blockquote><p><strong>表达式的分类</strong></p><ul><li>在 JS 中表达式的种类非常多，这里我们主要讲解以下 5 种表达式。</li><li>每种表达式就有与之相匹配的操作符。<img src="表达式的分类.png"></li></ul></blockquote><h3 id="一、算术运算符"><a href="#一、算术运算符" class="headerlink" title="一、算术运算符"></a>一、算术运算符</h3><blockquote><ul><li>说到算术表达式就离不开算术运算符。</li><li>算术运算符：用于执行两个变量或值的算术操作符。<table><thead><tr><th>算术运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>&#x2F;</td><td>除</td></tr><tr><td>%</td><td>取余（取模）</td></tr></tbody></table></li></ul></blockquote><ol><li><p>介绍</p><blockquote><ul><li>加减的符号和数学一致，乘法是 * 号，除法是 &#x2F; 号</li><li>%取余运算符：<ul><li>取余运算也叫作 “求模运算” ，用百分号”%”表示</li><li>a % b 表示，求 a 除以 b 的余数，它不关心整数部分，只关心余数<blockquote><p>任何数%模上大于他自身的数，结果是就是这个数本身</p></blockquote></li></ul></li></ul></blockquote></li><li><p>算术运算符优先级</p><blockquote><ul><li>默认情况下，<strong>乘除取模</strong>的优先级要高于加减</li><li>不过我们可以使用圆括号<code>()</code>来提升优先级，改变运算符的计算顺序。</li><li>这里提升优先级<strong>只能</strong>用<code>()</code>，没有<code>｛｝</code>这一说</li></ul></blockquote></li><li><p>+号的两种作用</p><blockquote><ul><li>加号有 “加法” 和 “连字符” 两种作用</li><li>当+号<strong>两边的数都是数值</strong>时，做加法运算，否则为”连字符”(字符串的拼接)</li></ul></blockquote></li><li><p>隐式类型转换</p><blockquote><ul><li>如果参与<code>数学运算</code>的某操作数不是数字类型，那么 JS 会<strong>自动</strong>将其转换为数字类型，然后再做计算。这一过程称为隐式转换</li><li>隐式转换的本质是内部自动调用了相关的函数来转换。比如我们做的是算术运算，他就会**自动调用Number()**函数，帮我们把操作数转换成数字后，再做算术计算。</li></ul></blockquote></li></ol><blockquote><p><strong>注意事项</strong></p><ul><li><strong>任何数</strong>与NaN做算述运算，结果都是NaN,除与字符串拼接外。</li><li><code>+</code>号参于字符串计算，他<strong>不会</strong>做隐式转换,把操作数转换为数字;而是会当成<strong>字符串拼接</strong>来处理。</li></ul><pre><code>&lt;script&gt; console.log(4 / &quot;2&quot;); // 2 console.log(5 % &quot;4&quot;); // 1 console.log(true + false); // 1 console.log(2 + null); // 2 // 任何类型与NaN做运算得到NaN,与字符串拼接除外 console.log(1 + undefined); // NaN console.log(1 + &quot;true&quot;); // &#39;1true&#39;  字符串拼接&lt;/script&gt;</code></pre></blockquote><ol start="5"><li><p>显示转换</p><blockquote><ul><li>我们之前讲过<strong>强制类型转换</strong>，其实就是<strong>显示类型</strong>转换。</li><li>也就是我们自己<strong>手动的</strong>调用相关函数或方法，比如前面讲过的Number()、parseInt()、parseFloat()来转换数据类型。<blockquote><p>数学运算时隐式转换自动调用的Number()函数将其它类型转换成数字，那 Number()实现不了的，就得手动调用其它方法来实现</p></blockquote></li></ul></blockquote></li><li><p><code>+</code>  <code> -</code> 的特殊用法</p><blockquote><ul><li>如果<code>Number</code>函数能把某个类型转换成数字，那+ 和-号也可以,且规则和number一样，能识别2 进制或 16 进制。</li><li>不过要<strong>特别注意</strong> <code>-true</code>和 <code>-false</code> <code>-null</code>这 3 个特殊情况，他们会将其转换成<strong>负数</strong></li></ul></blockquote></li><li><p>浮点数（小数）丢失精度</p><blockquote><p>在 Javascript 中，有些小数的<strong>数学运算</strong>不是很精准.所以不要直接判断两个浮点数是否相等</p><blockquote><ul><li>JavaScript 使用了 IEEE754 二进制浮点数算术标淮，这会使一些个别的小数产生”丢失精度”问题。</li><li>IEEE754 二进制浮点数算术标淮是计算机底层编译标准，了解即可。</li></ul></blockquote></blockquote></li></ol><p><strong>解决浮点数运算不精准办法</strong></p><blockquote><ul><li>小数运算时，运算后的结果,再调用<code>toFixed()</code>方法保留指定的小数位数；</li><li><code>toFixed()</code>方法的返回值类型，是<strong>字符串</strong>类型</li><li><code>toFixed()</code>在指小数位时，会采用<strong>4 舍 5 入</strong></li></ul></blockquote><h3 id="二、赋值表达式"><a href="#二、赋值表达式" class="headerlink" title="二、赋值表达式"></a>二、赋值表达式</h3><blockquote><p>赋值操作符：就是给变量赋值用的</p><table><thead><tr><th>赋值操作符</th><th>描述</th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td></tr><tr><td>+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;</td><td>快捷赋值</td></tr><tr><td>++</td><td>自增运算</td></tr><tr><td>–</td><td>自减运算</td></tr></tbody></table></blockquote><ol><li>赋值运算符<code>=</code><blockquote><ul><li>赋值运算符：会将等号右边的数值，赋值给等号左边的变量</li><li><code>var a=2;</code>：将&#x3D;等号右边的2赋值给左边的变量a</li><li>赋值运算符左边只能是变量，右边既可以是变量也可以是数值</li></ul></blockquote></li></ol><blockquote><ul><li>赋值运算也产生值,将等号后面的计算结果，作为“赋值运算的值”(因为每个表达式都有返回值)<blockquote><p>这就意味着，可以连续使用赋值运算符</p></blockquote></li></ul><pre><code>&lt;script&gt; var a, b, c; a = b = c = 12 + 2; console.log(a, b, c); // 14 14 14&lt;/script&gt;</code></pre></blockquote><ol start="2"><li><p>快捷赋值（+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;）</p><blockquote><ul><li>快捷赋值运算符：表示在原数值基础上进一步计算<blockquote><p>快捷赋值操作符仅仅是简写语法，使用它们并不会提升性能</p></blockquote></li></ul><pre><code>&lt;script&gt; var a = 1; a += 5; // 相当于 a = a + 5; console.log(a); // 6 var b = 4; b *= 2; // 相当于 b = b * 2 console.log(b); // 8 b /= 2; // 相当于 b = b / 2 console.log(b); // 4 b %= 2; // 相当于 b = b % 2; console.log(b); // 0&lt;/script&gt;</code></pre></blockquote></li><li><p>++ 自增 和 – 自减 运算符</p><blockquote><ul><li><code>++</code> 自增：表示在自己的基础上+1</li><li><code>--</code> 自减：表示在自己的基础上-1<blockquote><p>++ 和 – 只能和变量搭配使用</p></blockquote></li></ul><pre><code>&lt;script&gt; var a = 1; a++; // a++ 相当于 a = a + 1 console.log(a); // 2&lt;/script&gt;</code></pre></blockquote></li><li><p>++a 和 a++ 的区别</p><blockquote><ul><li>++a 是先自增再赋值</li><li>a++ 是先赋值再自增</li></ul><pre><code>&lt;script&gt; var b = 3; var c = ++b; // 先自增，再赋值，所以b先自增1，得到b=4,然后把4赋值给变量c，所以c的值也是 4 console.log(c); // 4 console.log(b); // 4 console.log(c++); // 4 先赋值，再自增，所以打印是4，c自增后是5 console.log(++c); // 6 先自增，再赋值，c上面已经是5，再自增就是6，自增后再赋值，所以打印是6&lt;/script&gt;</code></pre></blockquote></li><li><p>–a 和 a–的区别</p><blockquote><ul><li>与上面同理</li><li><code>--a</code> 是先自减再赋值</li><li><code>a--</code> 是先赋值再自减</li></ul></blockquote></li></ol><h3 id="三、关系表达式"><a href="#三、关系表达式" class="headerlink" title="三、关系表达式"></a>三、关系表达式</h3><blockquote><ul><li>说到关系表达式，肯定就离不开关系操作符。</li><li>关系操作符： 用来比较两个值之间的大小关系，如果关系成立它返回<code>true</code>，如果关系不成立则返回<code>false</code><table><thead><tr><th>关系操作符</th><th>描述</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;&#x3D;</td><td>大于或等于</td></tr><tr><td>&lt;&#x3D;</td><td>小于或等于</td></tr><tr><td>&#x3D;&#x3D;</td><td>等于</td></tr><tr><td>!&#x3D;</td><td>不等于</td></tr><tr><td>&#x3D;&#x3D;&#x3D;</td><td>全等于（值和类型都比较）</td></tr><tr><td>!&#x3D;&#x3D;</td><td>不全等于（其结果与&#x3D;&#x3D;&#x3D;比较的结果正好相反）</td></tr></tbody></table></li></ul></blockquote><h4 id="和-和"><a href="#和-和" class="headerlink" title="&gt;和&lt;以及&gt;=和&lt;="></a><code>&gt;</code>和<code>&lt;</code>以及<code>&gt;=</code>和<code>&lt;=</code></h4><blockquote><p>以上操作符主要是用来比较两个值的大小关系</p><ul><li>如果操作符两边的操作数，<strong>都是字符串</strong>，则不会将操作数转换成数字进行比较，而会分别比较字符串的<code>Unicode</code>编码</li><li><strong>除去</strong>操作符两边的操作数都是字符串这种情况外，其它情况在在作比较时，会先将**非数字类型转换为数字 **（隐式转换） ，然后再进行比较。 整个隐式转换过程是程序内部自动调用Number()函数来实现的<blockquote><p>以上规则，只针对基本数据类型而言</p></blockquote></li></ul></blockquote><ol><li><p>操作符两边的数，<strong>不都是</strong>字符串</p><blockquote><pre><code>//  数字与数字作比较，最简单1 &gt; 2; // false// 数字与非数字作比较1 &gt; true; // false  等价于 1&gt;1// 字符串与布尔值作比较&quot;&quot; &lt;= false; // true  等价于 0&lt;=0// null 和 undefined与数字作比较null &gt;= 0; // true 等价于 0&gt;=0undefined &lt;= 0; // false 等价于 NaN&lt;=0// 字符串与null 和undefined作比较&quot;&quot; &gt;= null; // true 等价于 0&gt;=0&quot;&quot; &lt;= undefined; // false 等价于 0&lt;=NaN// null与undefined作比较null &gt;= undefined; // false 等价于 0&gt;=NaN</code></pre></blockquote></li><li><p>字符串与字符串做比较</p><blockquote><ul><li>字符串与字符串作比较时，不会将其转换成数字进行比较，而会分别比较字符串的<code>Unicode</code>编码</li><li>比较字符编码时，是<strong>一位一位</strong>进行比较，如果两位一样，则比校下一位</li></ul></blockquote></li></ol><p><strong>英文字母对应的 Unicode 编码</strong></p><blockquote><ul><li><code>A~Z</code> 对应 <code>65~ 90</code> 也就是A的Unicode编码是65 、 Z 的Unicode编码是 90</li><li><code>a~z</code> 对应 <code>97~122</code></li><li><code>0~9</code> 对应 <code>48~57</code></li></ul><pre><code>// 先把两边的第一位拿出来作比较，即 &#39;a&#39; &lt; &#39;b&#39; ，比较时比较的是Unicode编码，则 97&lt;98，所以结果为 true&quot;abc&quot; &lt; &quot;b&quot;; // true;// 先把两边的第一位拿出来作比较，即 &#39;1&#39; &lt; &#39;5&#39; ，比较时比较的是Unicode编码，则49 &lt; 53 ,所以结果为 true&quot;11&quot; &lt; &quot;5&quot;; // true;// 先把两边的第一位拿出来作比较，如果两位一样，则比较下一位，所以拿第二位来比较，则&#39;b&#39;&lt;&#39;c&#39;，比较时比较的是Unicode编码，则 98 &lt; 99 ,所以结果为 true&quot;abc&quot; &lt; &quot;acd&quot;; // true</code></pre></blockquote><h4 id="JS-中没有连比"><a href="#JS-中没有连比" class="headerlink" title="JS 中没有连比"></a>JS 中没有连比</h4><blockquote><p>JS 中是没有连比的功能，我们来看下面的列子</p><pre><code>&lt;script&gt; console.log(1 &lt; 3 &lt; 2); // true 但是本质上是错的，3不可能小于 2 /*  *  1&lt;3&lt;2 为什么会得到 true ?  *  他是从左往右开始比较，1 &lt; 3 这个表达式返回值为true  *  再拿true与2作比较，那 true &lt; 2  *  数值与其它类型做比较时，会先将其转换成数字，再比较，true转数字转成 1  *  即 1 &lt; 2 吗 ？那肯定小于，所以返回结果就为 true  */&lt;/script&gt;</code></pre><blockquote><p>那如果要判断一个数是不是&gt; 1同时&lt; 4，我们可以用后面学到的&amp;&amp;与操作符和||或操作符来实现</p></blockquote></blockquote><h4 id="和"><a href="#和" class="headerlink" title="&#x3D;&#x3D; 和 !&#x3D;"></a>&#x3D;&#x3D; 和 !&#x3D;</h4><blockquote><ul><li>&#x3D;&#x3D;用来比较操作符两边值（隐式转换后）是否相等，在比较时，<strong>不会</strong>比较两边值的类型</li><li>如果值（隐式转换后）相等，返回true，不相等，则返回false</li><li>在比较时同样会做隐式类型转换，非数字类型会自动调用Number()函数，转成数字再比较</li><li>以上规则，只适用于基本数据类型</li></ul><pre><code>1 == true; // true0 == &quot;&quot;; // true// ‘’ 转成数字是 0   false转成数字是 0 所以0==0 是true&quot;&quot; == false; // true</code></pre></blockquote><blockquote><ul><li>!&#x3D;是用来比较两个值（隐式转换后）是否不相等，如果相等返回 false,如果不相等，返回 true<blockquote><p>**特殊情况!!**：</p></blockquote></li></ul><pre><code>null == undefined; //true&quot;&quot; ==null;//false0==null;//false</code></pre></blockquote><h4 id="和-1"><a href="#和-1" class="headerlink" title="===和 !=="></a><code>===</code>和<code> !==</code></h4><blockquote><ul><li><code>===</code>用来比较两边的值是否全等，如果全等则为true,不全等则为false。</li><li>全等：不仅在比较是会比较值大小，还会比较值的类型</li><li><code>===</code>只有操作符两边的数长的<strong>一模一样</strong>，才会是 true，否则就是 false</li><li>注意区分： 而前面讲的<code>==</code>只会比较两个值（隐式转换后）的大小，不会比较类型。</li></ul><pre><code>1 == &quot;1&quot;; // true 只比较值1 === &quot;1&quot;; // false  同时比较值和类型1 == true; // true 只比较值1 === true; // false 同时比较值和类型</code></pre></blockquote><blockquote><p><strong><code>!==</code> 不全等</strong></p><ul><li><code>!==</code> 用来比较两边值是否不全等，如果是则返回true,不是返回false</li><li><code>!==</code>的结果，正好是<code>===</code>结果的<strong>反面</strong>，如果<code>===</code>返回结果是true，那！<code>==</code>返回结果就是false</li></ul></blockquote><h4 id="特殊的比较"><a href="#特殊的比较" class="headerlink" title="特殊的比较"></a>特殊的比较</h4><blockquote><pre><code>undefined == null; // trueundefined === null; // falseNaN == NaN; // falseNaN === NaN; // falseNaN !== NaN; // trueNaN != NaN; // true</code></pre></blockquote><h4 id="区分-、-、-的区别"><a href="#区分-、-、-的区别" class="headerlink" title="区分 &#x3D; 、&#x3D;&#x3D; 、&#x3D;&#x3D;&#x3D; 的区别"></a>区分 &#x3D; 、&#x3D;&#x3D; 、&#x3D;&#x3D;&#x3D; 的区别</h4><blockquote><ul><li><code>=</code> 是赋值</li><li><code>==</code> 是比较 但只比较值</li><li><code>===</code> 是比较 同时比较值和类型</li></ul></blockquote><h3 id="四、逻辑表达式"><a href="#四、逻辑表达式" class="headerlink" title="四、逻辑表达式"></a>四、逻辑表达式</h3><table><thead><tr><th>逻辑运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>!</code></td><td>逻辑非 否定的意思</td></tr><tr><td><code>&amp;&amp;</code></td><td>逻辑与 并且的意思</td></tr><tr><td>&#96;</td><td></td></tr></tbody></table><h4 id="非运算符"><a href="#非运算符" class="headerlink" title="!非运算符"></a>!非运算符</h4><blockquote><ul><li>!非运算符也叫”<strong>取反</strong>运算符”</li><li>!非是一个<strong>单目运算符</strong>，所谓单目运算符，就是这个操作符<strong>只能有一个</strong>操作数</li><li>操作数可以是任何类型的</li><li>!运算时也会用到隐式转换，如果操作数为非布尔值，其内部会自动调用<strong>Boolean函数</strong>，将其隐式转换为布尔类型的值后，再<strong>取反</strong>操作，最后将<strong>值</strong>返回。</li><li>所以!非运算的结果一定是<strong>布尔值</strong><blockquote><p>因此！我们可以通过对一个值两次取反操作，将其变为一个 Boolean 类型的值</p></blockquote></li></ul><pre><code>!true; // false!3; // false!0; // true!undefined; // true</code></pre></blockquote><blockquote><blockquote><p>总结：将基本数据类型转换为布尔值的 2 种方法</p></blockquote><ul><li>方法一：调用Boolean()函数来实现</li><li>方法二：在一个数值或变量前加!!(两次取反)操作，也可以实现</li></ul><pre><code>!!3; // true;!!undefined; // false</code></pre></blockquote><h4 id="与操作符"><a href="#与操作符" class="headerlink" title="&amp;&amp;与操作符"></a>&amp;&amp;与操作符</h4><blockquote><ul><li><code>&amp;&amp;</code>与操作符，表示<strong>并且</strong>的意思，可以对<code>&amp;&amp;</code>符号两侧的值进行<strong>与运算</strong>并返回结果</li><li><code>&amp;&amp;</code>与操作符是一种<strong>短路</strong>操作符，他有一个非常重要计算规则，就是 &amp;&amp;与的短路计算<blockquote><p>注意：当返回第一个表达式的值时，就不会再看第二个表达式了。第二个表达式<strong>不会</strong>被运行！</p></blockquote></li></ul></blockquote><ol><li><p>&amp;&amp;与的短路计算规则</p><blockquote><ul><li>如果<strong>第一个</strong>操作数转为布尔值是<code>false</code>，则就<strong>不会</strong>看第二个操作数了。返回结果为<strong>第一个</strong>操作数的<strong>返回结果</strong></li><li>如果第一个操作数转为布尔值是<code>true</code>，则<strong>会看</strong>第二个操作数。返回结果为<strong>第二个</strong>操作数的返回结果</li><li>上面提到的”操作数”，可以是一个表达式、值、函数、对象等任何类型</li></ul><pre><code>false &amp;&amp; true; // false1 &amp;&amp; 2; // 2  1转换为布尔值是true，所以看第二个操作数，返回值为第二个操作数 20 &amp;&amp; 3; // 0  0转换为布尔值是false，所不看第二个操作数，返回值为第1个操作数 0true &amp;&amp; alert(&quot;我能出来喽&quot;); // 页面显示弹窗3 - 3 &amp;&amp; 1; // 0  3-3结果为0,转换为布尔值是false,则不看第二个操作数，返回值为第一个操作数，第1个操作数是表达式，所以返回值为第1个表达式的返回值0</code></pre></blockquote></li><li><p><strong>测试题</strong></p><blockquote><ul><li>以下代码的执行后的结果是多少？</li></ul><pre><code>&lt;script&gt; var a = 1,   b = 2,   c; c = a &lt; b &amp;&amp; a++;//a&lt;b:true，所以a++被运行,c=1,a=2 console.log(c, a);//c=1,a=2 c = a &gt; b &amp;&amp; --a;//a&gt;b:false=c,--a不会被运行 console.log(c, a);//c=false,a=2 a == b &amp;&amp; alert(&quot;a和b相等了&quot;);//a=b=2,true,运行alert&lt;/script&gt;</code></pre></blockquote></li><li><p>如何判断一个数的范围</p><blockquote><pre><code>var a = 10;console.log(a &gt; 5 &amp;&amp; a &lt; 12); // true   这个逻辑表达示的含 义是： a&gt;5 同时 a&lt;12 ？console.log(a &gt; 5 &amp;&amp; a &lt; 8); // false</code></pre><blockquote><p>表达式都会有一个返回值，所以我们可以用一个变量来接受表达式的返回值</p></blockquote><pre><code>&lt;script&gt; var a = 10; var b; b = a &gt; 5 &amp;&amp; a &lt; 12; console.log(b); // true b = a &gt; 5 &amp;&amp; a + 2; console.log(b); // 12&lt;/script&gt;</code></pre></blockquote></li><li><p>如何判断一个值是不是 NaN</p><blockquote><ul><li>方法1：利用 <strong>NaN是一个不是数字的，但是数字类型</strong>，这个特性来判断</li></ul><pre><code>var a = NaN;var _isNaN = isNaN(a) &amp;&amp; typeof a === &quot;number&quot;;consloe.log(_isNaN);</code></pre></blockquote></li></ol><blockquote><ul><li>方法2：利用 <strong>NaN自己不等于自已</strong> 这个特性来判断</li></ul><pre><code>&lt;script&gt; function _isNaN(n) &#123;   if (n !== n) &#123;     return true;   &#125; else &#123;     return false;   &#125; &#125; console.log(_isNaN(NaN)); // true&lt;/script&gt;</code></pre></blockquote><h4 id="或-操作符"><a href="#或-操作符" class="headerlink" title="|| 或 操作符"></a><code>||</code> 或 操作符</h4><blockquote><ul><li><code>||</code>或操作符，表示或者的意思，可以对<code>||</code>符号两侧的值进行或运算并返回结果</li><li><code>||</code>或操作符是一种短路操作符，他一个非常重要计算规则，就是<code>||</code>或的短路计算</li></ul></blockquote><ol><li><p>|| 或的短路计算规则：</p><blockquote><ul><li><strong>第一个</strong>操作数转换为布尔值是<code>true</code>,则就<strong>不会</strong>看第二个操作数。返回结果为<strong>第一个</strong>操作数的返回结果，第二个表达式不会被执行</li><li>第一个操作数转换为布尔值是<code>false</code>，则就<strong>会看第二个</strong>操作数。返回结果为<strong>第二个</strong>操作数的返回结果</li><li>上面提到的”操作数”，可以是一个表达式、值、函数、对象等任何类型</li></ul><pre><code>true || false; // true  第1个操作数是true，则不看第2个操作数，将第1个操作数作为结果返回 truefalse || true; // true  第1个操作数是false，则看第二个操作数，将第2个操作数作为结果返回 true0 || 3; // 3  第1个操作数转boolean值是false，则看第2个操作数，将第2个操作数作为结果返回 3&quot;&quot; || 1; // 1  第1个操作数转boolean值是false，则看第2个操作数，将第2个操作数作为结果返回 1undefined || NaN; // NaN  第1个操作数转boolean值是false，则看第2个操作数，将第2个操作数作为结果返回 NaN</code></pre></blockquote></li><li><p>测试题</p><blockquote><p>以下代码，输出的结果？</p><pre><code>&lt;script&gt; var a = 1,   b = 2,   c; c = a &lt; b || a++;//c=ture,a++不会被执行 console.log(c);  c = a &gt; b || a--;//c=1,a=0,先赋值后自减 console.log(a, c); &lt;/script&gt;</code></pre></blockquote></li></ol><h4 id="逻辑操作符优先级"><a href="#逻辑操作符优先级" class="headerlink" title="逻辑操作符优先级"></a>逻辑操作符优先级</h4><blockquote><p>逻辑操作符优先级是： <code>！非</code> &gt; <code>&amp;&amp; 与</code> &gt; <code>|| 或</code> </p><blockquote><p>自己写代码的时候，建议加括号增强可读性</p></blockquote><pre><code>(1 &amp;&amp; false) || (4 &amp;&amp; 5); //false||5--&gt;5(1 &amp;&amp; 2) || (4 &amp;&amp; 5); //2||5--&gt;2(1 &amp;&amp; true) || (!&quot;&quot; &amp;&amp; 2);//true||2--&gt;true</code></pre></blockquote><h3 id="五、综合表达式"><a href="#五、综合表达式" class="headerlink" title="五、综合表达式"></a>五、综合表达式</h3><blockquote><ul><li>综合表达式：就是 算术操作符、赋值操作符、关系操作符、逻辑操作符出现在同一个表达式中。</li><li>那这些操作符混在一起使用，他们的优先级就显得很重要。</li></ul></blockquote><ol><li><p>操作符的优先级，从上往下，优先级从高到低，如下：</p><blockquote><ul><li><code>++</code> 和 <code>--</code> 运算符</li><li>非运算符(!)</li><li>算术运算符( %、&#x2F;、* 、+、-,先乘除取模再加减)</li><li>关系运算符(&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;、&#x3D;&#x3D; 、!&#x3D;、<code>===</code>、<code>!==</code>)</li><li>逻辑运算符(<code>&amp;&amp;</code> &gt; <code>||</code>)</li><li>赋值运算符（&#x3D;、+&#x3D;、-&#x3D;、&#x2F;&#x3D;、%&#x3D;）<blockquote><ul><li>单目运算符优先级较高</li><li>当自增<code>++</code>、自减<code>--</code>运算符遇到逻辑运算符时，要注意：由于短路特性，它需要先看左边的结果</li></ul></blockquote></li></ul></blockquote></li><li><p>综合表达式的计算规则</p><blockquote><ul><li>如果操作符优先级一样，则从左往右算</li><li>可以用()来改变优先级,改变计算顺序</li><li>为了提高代码可读性，在实际开发中，我们都会添加()，这样能更直接的知道代码的执行顺序</li></ul></blockquote></li><li><p>测试题<br><strong>测试题1</strong></p><blockquote><pre><code>&lt;script&gt; var a = 0,   c; c = !3 + 4 / 2 &gt; 5 &amp;&amp; ++a;//!-&gt;/-&gt;+-&gt; &gt;,即：false+2&gt;5,**注意**此时false自动转换为0,2&gt;5为false,c=false &amp;&amp; ++a,由于左边是false，所以++a不会被执行,c=false,a=0 console.log(c, a); // false 0&lt;/script&gt;</code></pre></blockquote></li></ol><p><strong>测试题2</strong></p><blockquote><pre><code>&lt;script&gt; var a = 10; var b = a++ &amp;&amp; a &lt; 11 || a++;//a++先将10赋值给&amp;&amp;,然后自增a=11,即true&amp;&amp;false,--&gt;false||a++,此时a将11赋值给||,所以b=11,然后a自增,a=12 var c = a + 1 &amp;&amp; a + 2;//c=13&amp;&amp;14,c=14 console.log(b, c, a); // 11  14  12&lt;/script&gt;</code></pre><blockquote><p><code>var b = a++ &amp;&amp; a &lt; 11 || a++;</code>这步的顺序很重要，</p></blockquote></blockquote><ol start="4"><li>所有操作符优先级<blockquote><ul><li>关于每一个运算符的详细优先级，可以参考下面这张图</li><li>在下图中，越在最上面的，优先级越高，越优先计算。<img src="操作符优先级.png"></li></ul></blockquote></li></ol><h3 id="六、三元-条件-运算符"><a href="#六、三元-条件-运算符" class="headerlink" title="六、三元(条件)运算符"></a>六、三元(条件)运算符</h3><blockquote><ul><li>JavaScript 中提供了一种叫做 “三元运算” 的语法形式，让我们可以方便地实现选择</li><li>他更像是if..else语句的紧凑版<br><code>条件表达式 ? 表达式1 : 表达式2;</code></li></ul></blockquote><p><strong>执行流程</strong></p><blockquote><ul><li>首先对条件表达式进行求值</li><li>如果条件表达式的值为 true，则执行语句 1，并返回执行结果</li><li>如果条件表达式的值为 false，则执行语句 2，并返回执行结果</li></ul></blockquote><p><strong>注意事项</strong></p><blockquote><ul><li>三元运算符，虽然回有返回结果，但我们并不一定要用一个变量来接受，<strong>有些时候</strong>，我们并不关心他的返回值</li></ul><pre><code>var a = 2;// 这种情况下，我们更关心，满足条件要做什么事，不满足条件做什么事，并不关心返回结果a &gt; 1 ? alert(a + &quot;大于1&quot;) : alert(a + &quot;小于1&quot;);// 同时这种情况，不管 a&gt;1 是真是假，最终返回结果都是undefined,因为 alert() 方法返回值是undefinedvar b = a &gt; 1 ? alert(a + &quot;大于1&quot;) : alert(a + &quot;小于1&quot;);console.log(b); // undefined</code></pre></blockquote><p><strong>实战案例：补 0 操作</strong></p><blockquote><ul><li>当我们获取当前日期时，如果计算得到的日，月小于 10 的时候，都会以一位数的方式显示，如：2022年8月17日，而我们希望以两位的方式显示，如：2022年08月17日</li><li>这个时候就会涉及到补 0 的问题了。<blockquote><p>通过三元运算符判断，并执行加0操作</p></blockquote></li></ul><pre><code>// 完整的补0后效果// var date = new Date(&quot;2019/1/3&quot;);var date = new Date();var year = date.getFullYear(); // 获取完整的年份(4位)var month = date.getMonth() + 1; // date.getMonth()获取当前月份(0-11,0代表1月),所以要加1var day = date.getDate(); // 获取当前日(1-31)month = month &lt; 10 ? &quot;0&quot; + month : month; // 月份小于10，数字前补0day = day &lt; 10 ? &quot;0&quot; + day : day; // 日小于10，数字前补0var currentDate = year + &quot;年&quot; + month + &quot;月&quot; + day + &quot;日&quot;;console.log(currentDate); // 2022年08月17日</code></pre></blockquote><h3 id="七、综合案例"><a href="#七、综合案例" class="headerlink" title="七、综合案例"></a>七、综合案例</h3><p><strong>判断当前输入年份，是否是闰年 ?</strong></p><blockquote><p>需求分析：</p><ul><li>公历闰年的简单计算方法（符合以下条件之一即可）</li><li>能被 4 整除且不能被 100 整除</li><li>能被 100 整除也能被 400 整除</li><li>1950-2050 年之间的闰年有: 1952、1956、1960、1964、1968、1972、1976、1980、1984、1988、1992、1996、2000、2004、2008、2012、2016、2020、2024、2028、2032、2036</li></ul></blockquote><blockquote><p>代码实现思路：</p><ul><li>利用 prompt() 弹出输入框，让用户输入年份</li><li>定义变量 var year 来接受，用户输入的年份</li><li>对接收到的值做判断，判断条件就是需求中提到的，两个条件中有一个满足就可，所以选择||操作符</li><li>判断表达式： 左边条件 1 ||右边条件 2</li></ul><pre><code>var y = parseInt(prompt(&quot;请输入年份&quot;));var a = (y % 4 == 0 &amp;&amp; y % 100 != 0) || (y % 100 == 0 &amp;&amp; y % 400 == 0);a == true ? alert(&quot;是闰年&quot;) : alert(&quot;不是闰年&quot;);//   alert(y + &quot;是闰年吗？&quot; + a);</code></pre></blockquote><h3 id="八、小结"><a href="#八、小结" class="headerlink" title="八、小结"></a>八、小结</h3><ol><li><p>由于在进行&#x3D;&#x3D;数学运算&#x3D;&#x3D;时，会自动调用Number函数进行隐式转换，所以要注意一些特殊值的转换</p><blockquote><ul><li>Number(“”); &#x2F;&#x2F; 0</li><li>Number(“ “); &#x2F;&#x2F; 0</li><li>Number(true); &#x2F;&#x2F; 1</li><li>Number(false); &#x2F;&#x2F; 0</li><li>Number(null); &#x2F;&#x2F; 0</li><li>Number(undefined); &#x2F;&#x2F; NaN</li></ul></blockquote></li><li><p>使用<code>==</code>时<br><strong>根据上一条的转换，正常的情况：</strong></p><blockquote><ul><li>0 &#x3D;&#x3D; “”; &#x2F;&#x2F; true</li><li>“” &#x3D;&#x3D; false; &#x2F;&#x2F; true</li></ul></blockquote></li></ol><p><strong>特殊情况</strong></p><blockquote><ul><li>null &#x3D;&#x3D; undefined; 结果为true</li><li>“”&#x3D;&#x3D;null ; 结果为false</li><li>0&#x3D;&#x3D;null ; 结果为false</li></ul></blockquote><h3 id="九、位运算符（难点-大厂必考）"><a href="#九、位运算符（难点-大厂必考）" class="headerlink" title="九、位运算符（难点-大厂必考）"></a>九、位运算符（难点-大厂必考）</h3><blockquote><blockquote><p>位运算符都可以去掉小数</p></blockquote></blockquote><h4 id="前情提要：二进制知识点"><a href="#前情提要：二进制知识点" class="headerlink" title="前情提要：二进制知识点"></a>前情提要：二进制知识点</h4><ol><li><p>正十进制如何转二进制</p><blockquote><ul><li>10 进制转 2 进制，就是用当前数除 2 取余数的方式得到的</li><li>如求 5 的二进制<ul><li>5&#x2F;2&#x3D;2 余 1 得到右边第 1 位</li><li>2&#x2F;2&#x3D;1 余 0 得到 右边第 2 位</li><li>1&#x2F;2&#x3D;0 余 1 得到 右边 第 3 位<br> 最后商为 0 时， 把所有从上往下的<strong>余数</strong>&#x3D;&#x3D;从右往左&#x3D;&#x3D;写出来就是最后的二进制数 <code>101</code><blockquote><p>十进制转x进制，就把十进制的值除以x直至余数为0，将得到的余数从右往左排列<br>位运算符只有<code>32</code>位，从右到左位数递增，最左边的是第32位，是最高位</p></blockquote></li></ul></li></ul></blockquote></li><li><p>二进制如何转换成十进制</p><blockquote><p><strong>计算公式</strong></p><ul><li><code>b0</code>表示二进制右边第<code>1</code>位上的数字</li><li><code>b1</code>表示二进制右边第<code>2</code>位上的数字</li><li><code>b2</code>表示二进制右边第<code>3</code>位上的数字</li><li>……依次类推<img src="二进制计算公式.png"></li></ul></blockquote></li></ol><blockquote><p>举例：<code>00000000000000000000000000000101</code>转换为十进制<br><img src="5的进制转换.png"></p><blockquote><p>最低位的平方值是0！</p></blockquote></blockquote><ol start="3"><li><strong>负</strong>十进制数如何转换成二进制<blockquote><ul><li>负数和正数的存储方式不一样，负数是以一种<strong>二补数(或补码)<strong>的二进制编码</strong>存储</strong>。</li><li>我们来看下，负数是如何转成对应二进制数，然后存储的。这里以<code>-5</code>来为例<img src="负十进制的转换.png"></li></ul></blockquote></li></ol><p><strong><code>-5</code>的二进制计算过程：</strong></p><blockquote><ul><li>第一步：暂时去掉负号，先将正数的<code>5</code>转换为二进制，得到<code>00000000000000000000000000000101</code></li><li>第二步：反转每一位的二进制数，即 1 变成 0，0 变成 1,得到<code>11111111111111111111111111111010</code></li><li>第三步：把上面反转得到二进制<code>+1</code>，就得到了最后负数的二进制</li></ul></blockquote><p><strong>验证方法：</strong></p><blockquote><pre><code>var a = 0b11111111111111111111111111111011; // js中2进制数以0b开头console.log(a &gt;&gt; 0); // -5</code></pre></blockquote><ol start="4"><li><p>如何一眼区分二进制数是正数还是负数</p><blockquote><ul><li><strong>有符号整数</strong>使用 32 位的前 31 位表示整数值，第 32 位表示数值的符号，如果 32 位是 <code>0</code>，表示<strong>正数</strong>，如果是 <code>1</code> 表示是<strong>负数</strong>。</li><li>第 <code>32</code> 位称为<strong>符号位</strong>，他的值决定了数值其余部分的格式。</li><li><strong>正数</strong>以真正的二进制格式存储，而负数是以我们上面提到的补码的二进制编码存储的。</li></ul></blockquote></li><li><p>最终版，二进制如何转换成十进制</p><blockquote><ul><li>拿到一个二进制数，首先看<strong>第 32 位</strong>是 0 还是 1</li><li>如果是 <code>0</code>，就按<strong>正</strong>二进制转十进制方式转</li><li>如果是 <code>1</code>，则就按<strong>负</strong>十进数转二进制的方式，<strong>反转</strong>回去，步骤倒放</li></ul></blockquote></li></ol><table><thead><tr><th></th><th>十进制转二进制</th><th>二进制转十进制</th></tr></thead><tbody><tr><td>正数</td><td>除2取余,从右到左</td><td>公式法</td></tr><tr><td>负数</td><td>除2取余+ 反转+1法</td><td>-1反转法 + 公式法</td></tr></tbody></table><p><strong>正二进制转十进制</strong></p><blockquote><p><code>var num4 = 00000000000000000000000000011001;</code></p><ul><li>1、num4 的二进制，第 32 位是 0，则是一个正数，按正常的正二进制转十进制方式转 1</li><li>2、num4 对应 10 进制计算公式&#x3D; 1+0+0+1<em>23+1</em>24 &#x3D; 1+8+16 &#x3D; 25</li></ul></blockquote><p><strong>负二进制转十进制</strong></p><blockquote><p><code>var num1 = 11111111111111111111111111111101;</code></p><ul><li>1、num1 的二进制第 32 位是 1，则是一个负数，负数就要以补码的方式反转回去</li><li>2、先拿二进制 <code>11111111111111111111111111111101</code><strong>-1</strong> 得到 <code>11111111111111111111111111111100</code><blockquote><p>二进制如何做减法：</p></blockquote></li><li><code>-1</code>就是减1的二进制数</li><li>和数学一样，不够的话往前借，数学是十进制，借到的是<code>10</code>,二进制借到的是<code>2</code></li></ul></blockquote><blockquote><ul><li>3、再把上面得到的二进制<strong>反码</strong>回去，0 变 1，1 变 0，得到<code>00000000000000000000000000000011</code>，此时得到的是正数的二进制</li><li>4、所以可以用正数的公式法：<code>1*2+1*1=3</code>，因为是负数，所以最后结果为-3</li></ul></blockquote><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><ol><li><p>基础知识</p><blockquote><ul><li>位运算的操作数，都会被转成&#x3D;&#x3D;32位&#x3D;&#x3D;<code>bit</code>的整数（32 位的二进制数）,再做运算</li><li>速度是 <code>T0</code>（最高，速度最快）级别的，因为是在二进制下进行运算的。</li></ul></blockquote></li><li><p>按位与<code>&amp;</code> 操作符</p><blockquote><ul><li><code>&amp;</code>与位操作符会先把值转换为<strong>32位整数</strong>（二进制数），然后再进行位操作。</li><li>按位<code>&amp;</code>就是将两个操作数的每一位对齐，然后按下表中的规则，对每一位执行相应的操作<table><thead><tr><th>第一个数值的位</th><th>第二个数值的位</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><blockquote><p>按位与操作的两个位数都是1时返回1，只要两个中有一个是 0，则返回 0</p></blockquote></li></ul></blockquote></li></ol><p><strong>&amp; 运算过程</strong></p><blockquote><ul><li>我们来看下面这个与&amp;运算的运算过程</li></ul><pre><code>var result = 5 &amp; 3;console.log(result); // 1</code></pre><ul><li>先把 5 和 3 都转换为对应的 32 位<strong>二进制数</strong>，然后再 <strong>1 位 1 位的</strong>比较，最后结果为 1<img src="&运算过程.png"></li></ul></blockquote><p><strong>按位&amp;操作符判断奇偶数 （经典面试题）</strong></p><blockquote><ul><li>如果 (一个数 &amp; 1) &#x3D;&#x3D; 1 这个数是<strong>奇数</strong></li><li>如果 (一个数 &amp; 1 )&#x3D;&#x3D; 0 这个数是<strong>偶数</strong></li></ul></blockquote><blockquote><p><strong>其背后的逻辑</strong></p><ul><li>根据二进制转 10 进制的公式，除第 1 位之外的每一位上的值都是 2 的倍数</li><li>也就是第<code>1</code>位上如果是<code>0</code>就是偶数，如果是<code>1</code>就是奇数<table><thead><tr><th>10进制</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>二进制</td><td>11</td><td>100</td><td>101</td><td>110</td><td>111</td><td>1000</td><td>1001</td><td>1010</td></tr></tbody></table></li><li>如果一个数是奇数，他的第 1 位是 1，这个数 &amp; 1 永远得到 1<img src="判断奇偶数.png"></li></ul></blockquote><ol start="3"><li>按位或 <code>|</code> 操作符<blockquote><ul><li>按位或<code>|</code>操作符会先把值转换为 32 位整数（二进制数），然后再进行位操作</li><li>按位或<code>|</code>就是将两个操作数的每一位对齐，然后按下表中的规则，对每一位执行相应的操作<table><thead><tr><th>第一个数值的位</th><th>第二个数值的位</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><blockquote><p>按位或操作的两个位数，只要有一个是 1 就返回 1，两位都是 0 时返回 0</p></blockquote></li></ul></blockquote></li></ol><p><strong>| 或运算过程</strong></p><blockquote><pre><code>var result = 5 | 3;console.log(result); // 7</code></pre><ul><li>先把 5 和 3 都转换为对应的 32 位二进制数，然后再 1 位 1 位的比较<img src="或运算过程.png"></li></ul></blockquote><p><strong>应用：将一个数取整</strong></p><blockquote><pre><code>var num = 5.467;console.log(num | 0); // 5</code></pre><ul><li>一个数在<strong>按位或</strong>运算时，会先将其转换为 32 位的<strong>整数</strong>（二进制），这个过程就会把<strong>小数转换为整数</strong></li><li>然后这个整数 <code>| 0</code> 永远得到这个整数。因为 <code>0</code> 和 <code>1</code> 与 <code>0</code> 做<strong>或运算</strong>，都得到<strong>自身</strong>。<img src="取整运算.png">>任何数与 0 做或|运算，最后结果都为这个数的**整数部分**。</li></ul></blockquote><ol start="4"><li>按位非 <code>~</code> 操作符<blockquote><ul><li>按位非<code>~</code>操作符会先把值转换为<strong>32位整数</strong>（二进制数）,再运算</li><li>按位非<code>~</code>操作符，用来反转操作数对应的位数，所以要进行一次反转</li><li>根据反转的结果，使用对应的 <strong>正数&#x2F;负数</strong> 二进制转十进制的方法</li><li>其最终结果的呈现是将一个数<strong>取反并减 1</strong></li></ul></blockquote></li></ol><p><strong><code>~5</code>的计算过程</strong></p><blockquote><ul><li>先转换为二进制，<code>5</code>的二进制是 <code>00000000000000000000000000000101</code></li><li><strong>再进行反转</strong>是：<code>11111111111111111111111111111010</code></li><li>由于反转后是一个<strong>负数</strong>，因为第32位为<code>1</code>，此时使用&#x3D;&#x3D;负二进制转为十进制&#x3D;&#x3D;的方法：<code>-1反转+公式法</code><ul><li><strong>减 1</strong>，得到 <code>11111111111111111111111111111001</code></li><li>再<strong>反转</strong>，得到00000000000000000000000000000110</li><li>再用<strong>公式法</strong>将二进制转换为十进制</li></ul></li><li>最后结果就是 6，因为是负数，所以最后结果是<code>-6</code><blockquote><p><code>~5</code>的结果是<code>-6</code>，即：取反并减1</p></blockquote></li></ul></blockquote><p><strong><code>~-5</code>的计算过程</strong></p><blockquote><ul><li>先将<code>-5</code>转为二进制(<strong>负十进制转二进制</strong>，使用除2取余,+1反转法)，得到<code>11111111111111111111111111111011</code></li><li>反转：<code>00000000 00000000 00000000 00000100</code></li><li>由于得到的是<strong>正数</strong>，所以使用&#x3D;&#x3D;公式法&#x3D;&#x3D;将其转为十进制：<code>1*2*2=4</code></li></ul></blockquote><p><strong>按位非<code>~</code>应用</strong></p><blockquote><ul><li>将一个数（<strong>整数</strong>）,<strong>两次按位非</strong>运算，就能将这个数<strong>取反</strong><ul><li>推导过程如下：</li><li><code>~~ x = ~(-x-1)=-(-x-1)-1 = x+1-1 = x</code></li></ul></li><li>取得一个数的相反数<code>~x + 1</code><ul><li><code>~x+1 = -x-1+1 = -x</code></li></ul></li></ul></blockquote><ol start="5"><li>按位异或 <code>^</code><blockquote><ul><li>按位异或<code>^</code>操作符，会先把值转为32位整数（二进制数）,再运算</li><li>按位异或<code>^</code>在做运算时，就是将两个操作数的每一位对齐，然后按下表中的规则，对每一位执行相应的操作<table><thead><tr><th>第一个数的位</th><th>第二个数的位</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><blockquote><p>只有当两个数对应的位都是 1 或都是 0 时，返回 0，其它都返回 1</p></blockquote></li></ul></blockquote></li></ol><p><strong>运算过程</strong></p><blockquote><pre><code>var result = 5 ^ 3;console.log(result); // 6</code></pre><ul><li>先把 5 和 3 转换为二进制数，再一位一位来运算，如下<img src="异或运算过程.png"></li><li>再用公式转换成十进制&#x3D;6</li></ul></blockquote><p><strong>按位异或^（归零律）</strong></p><blockquote><ul><li>归零律: 一个数异或自已得到 0 ，即 <code>a ^ a=0</code> ，因为只有两个数上对应位数是<strong>一样</strong>时，才会得到 <code>0</code></li><li>用来判两个数<strong>是否相等</strong>，如果 <code>a^b=0</code>，则 <code>a=b</code></li></ul></blockquote><p><strong>按位异或^（恒等律）</strong></p><blockquote><ul><li>恒等律：<code>a ^ 0= a</code>（<strong>整数</strong>），自己异或 0，得到自己</li></ul></blockquote><p><strong>按位异或 ^（自反）</strong></p><blockquote><ul><li>自反：<code>a ^ a ^ a= 0 ^ a= a</code> ，一个（整数）异或自身 <strong>2</strong> 次，得到<strong>自身</strong>。</li><li>结合律 : <code>a ^ b ^c = c ^ b ^ a</code> ，计算结果一样，<strong>与先后顺序无关</strong></li></ul></blockquote><p><strong>应用：按位异或 ^ （用来交换两个数值变量的值）</strong></p><blockquote><p>经典面试题：变量为数字(整数)，在不增加临时变量时，交换两个变量的值,使用<code>^=</code></p><pre><code>var a = 5;var b = 10;a ^= b;b ^= a;a ^= b;console.log(a, b); // 10 5/** 整个推演过程如下：* 1、 a ^ = b 得到 a = a ^ b* 2、 b ^ = a 得到 b = b ^ a 在第1步得到a = a ^ b，则推倒出b = b ^ a ^ b=b ^ b ^ a =0 ^ a =a* 3、 a ^ = b 得到 a = a ^ b ,在第1步得到a = a^b,第2步得到b = a,则推倒出： a = a ^ b ^ a = b ^ b ^ a = 0 ^ b = b**/</code></pre></blockquote><h4 id="位移操作符-、"><a href="#位移操作符-、" class="headerlink" title="位移操作符(&gt;&gt;、&lt;&lt;、&gt;&gt;&gt;)"></a>位移操作符(<code>&gt;&gt;</code>、<code>&lt;&lt;</code>、<code>&gt;&gt;&gt;</code>)</h4><blockquote><blockquote><p>除了<code>&gt;&gt;&gt;</code>是无符号的，其他位移操作符都是有符号的</p></blockquote></blockquote><ol><li><code>&lt;&lt;</code>左操作符<blockquote><ul><li>左移操作符用两个小于号<code>&lt;&lt;</code>表示，会按<strong>指定的位数</strong>将数值的<strong>所有位</strong>向<strong>左</strong>移动。</li><li>左移后，<strong>左边</strong>移出去的<strong>指定位数</strong>去掉，<strong>右端</strong>空出的位数会以<code>0</code>来填充这些空位。</li></ul></blockquote></li></ol><p><strong><code>5&lt;&lt;5</code>运算过程如下</strong></p><blockquote><ul><li>先把<code>5</code>转换为二进制数</li><li>再左移5位，把左边超出部分去掉，右侧的空缺用0填充</li><li>使用公式法，转换为十进制数<img src="左位移.png"></li></ul></blockquote><p><strong><code>-5&lt;&lt;5</code>的运算过程</strong></p><blockquote><ul><li>先把<code>5</code>转换为二进制数(除2取余)<code>00000000000000000000000000000101</code></li><li>使用<code>反转+1法</code>，得到<code>-5</code>的二进制数<code>11111111111111111111111111111011</code></li><li><strong>保留第32位的符号</strong>，左移5位，把左边超出部分去掉，右侧的空缺用0填充<code>11111111111111111111111101100000</code></li><li>转十进制<code>-1反转法+公式法</code><ul><li><code>-1</code>得到：<code>1111 1111 1111 1111 1111 1111 0101 1111</code></li><li>反转得到：<code>0000 0000 0000 0000 0000 0000 1010 0000</code></li><li>公式法：得到<code>160</code>，由于是负数，所以最终结果为<code>-160</code></li></ul></li></ul></blockquote><blockquote><blockquote><p>注：<br>在有符号整数中，第 32 位中的第 32 位是 符号位</p></blockquote><ul><li>如果是 0 表示正数</li><li>如果是 1 表示负数，在左移时，会保留操作数的符号</li></ul></blockquote><ol start="2"><li><code>&gt;&gt;</code> <strong>有符号</strong> <strong>右移</strong>操作符<blockquote><ul><li>有符号右移由两个大于号<code>&gt;&gt;</code>表示,会将数值的<strong>所有 32 位</strong>都向右移。同时<strong>保留符号</strong>（正和负）</li><li>有符号右移，左边空出的位会在左侧，在<strong>符号位后</strong>用<strong>符号位的值</strong>来填充这些空位。</li></ul></blockquote></li></ol><p><strong><code>160 &gt;&gt; 5;//5</code>的运算过程</strong></p><blockquote><ul><li>先将<code>160</code>转换成二进制数</li><li>向右移动5位，用符号位的值来填充第32位后的空缺，右侧超出部分的值去掉不要</li><li>用<code>公式法</code>转换为十进制&#x3D;5<img src="有符号右移.png"></li></ul></blockquote><p><strong><code>-160 &gt;&gt; 5;//-5</code>的运算过程</strong></p><blockquote><ul><li><code>除2取余</code>得到<code>160</code>的二进制数：<code>0000 0000 0000 0000 0000 0000 1010 0000</code></li><li><code>反转+1法</code>，得到<code>-160</code>的二进制数<code>1111 1111 1111 1111 1111 1111 0110 0000</code></li><li>右移5位，用<code>1</code>填充空缺<br><code>11111111111111111111111111111011</code></li><li><code>-1反转+公式法</code>转成十进制：<ul><li><code>-1</code>得到<code>11111111111111111111111111111010</code></li><li><code>反转</code>得到<br><code>00000000000000000000000000000101</code></li><li>公式法，结果&#x3D;<code>-5</code></li></ul></li></ul></blockquote><ol start="3"><li><code>&gt;&gt;&gt;</code> 无符号右移操作符<blockquote><ul><li>无符号右移会将数值的<strong>所有32位</strong>都向右移，位移造成的左侧空位<strong>全补0</strong>.</li><li>所以对于<strong>正数</strong>，&gt;&gt;&gt;无符号右移 和 有符号右移&gt;&gt;的<strong>结果是相同的</strong>。因为正数的符号位是 0，所以两者都是补 0 的方式来填充右移造成的空位。</li><li>但是负数，就完全不一样了。</li></ul></blockquote></li></ol><p><strong>55 &gt;&gt;&gt; 5;运算过程</strong></p><blockquote><ul><li>55 的二进制是：<code>00000000000000000000000000110111</code></li><li><code>&gt;&gt;&gt;</code>无符号右移<code>5</code>，左侧造成的空位 0 来补，则得到<code>00000000000000000000000000000001</code></li><li>用公式法得到十进制结果：<code>5</code></li></ul></blockquote><p><strong>-55 &gt;&gt;&gt; 5;运算过程</strong></p><blockquote><ul><li>55 的二进制是：<code>00000000000000000000000000110111</code></li><li><code>反转+1</code>得到<code>-55</code>的二进制数<code>11111111111111111111111111001001</code></li><li>右移5位，用<code>0</code>填充空缺：<code>00000111111111111111111111111110</code></li><li>公式法得到十进制结果：<code>134217726</code><blockquote><p>负数，在无符号位移后（至少 1 位），会被转换成一个正数</p></blockquote></li></ul></blockquote><h4 id="位移操作符的应用"><a href="#位移操作符的应用" class="headerlink" title="位移操作符的应用"></a>位移操作符的应用</h4><ol><li>随机数函数<blockquote><ul><li>Math.random()方法，可以得到 0-1 之间的小数，随机生成</li><li>得到 [a , b] 区间的整数，方式如下:<ul><li>方法1：parseInt(Math.random() * (b - a + 1)) + a;</li><li>方法2：(Math.random() * (b - a + 1)&gt;&gt;0) + a;用任一位<strong>运算符</strong>都可以</li><li>方法3：Math.floor(Math.random() * (b - a + 1)) + a;</li><li>方法4：Math.round(Math.random() * b)+a;<blockquote><p>只有<code>Math.round</code>是向上取整，四舍五入，可以取到<code>1</code></p></blockquote></li></ul></li></ul></blockquote></li></ol><p><strong>推算过程：</strong></p><blockquote><p>要得到 [0 , 5] 区间的<strong>整数</strong></p><ul><li>Math.random()方法，可以得到 0-1 之间的小数</li><li>Math.random()*6，可以得到<code>0-6</code>之间的随机数</li><li>去掉小数，就可以得到[0 , 5] 区间的整数</li></ul></blockquote><blockquote><blockquote><p>要得到 [5 , 8] 区间的<strong>整数</strong></p></blockquote><ul><li>Math.random()方法，可以得到 0-1 之间的小数</li><li><code>Math.random()*4</code>，可以得到<code>0-4</code>之间的随机数</li><li>Math.random()*4+5,可以得到 5-9 之间的小数</li><li>去掉小数，就可以得到[5 , 8] 区间的整数</li></ul></blockquote><ol start="2"><li>如何随机生成随机色（经典面试题）<br><strong>生成rgb(r,g,b)原理：</strong><blockquote><blockquote><p>十进制转rgb</p></blockquote><ul><li>利用<code>Math.random()</code>生成随机数<ul><li>var r &#x3D; parseInt(Math.random() * 256);</li><li>var g&#x3D; parseInt(Math.random() * 256);</li><li>var b &#x3D; parseInt(Math.random() * 256);</li></ul></li><li>用+号拼接出<code>rgb()</code>的值<ul><li><code>var rgb=&quot;(&quot;+r+&quot;,&quot;+g+&quot;,&quot;+b+&quot;)&quot;;</code></li><li>括号和逗号用<strong>引号</strong>包裹、用<strong>加号</strong>拼接，变量不需要</li></ul></li></ul></blockquote></li></ol><p><strong>生成HEX十六进制颜色原理：</strong></p><blockquote><blockquote><p>十进制转十六进制</p></blockquote><ul><li>随机生成十进制的数字，范围是<code>0~255</code></li><li>使用向上取整的<code>Math.round</code><ul><li><code>Math.round(Math.random() * 0xffffff)</code></li></ul></li><li>转换为十六进制<ul><li><code>.toString(16)</code></li></ul></li><li>不一定是六位数，所以需要在前面自动补<code>0</code><ul><li><code>.padStart(6, &quot;0&quot;)</code></li></ul></li><li>加上<code>#</code>号，使用+拼接</li></ul></blockquote><blockquote><pre><code>// rgb颜色随机function rgb() &#123; var r = Math.floor(Math.random() * 256); var g = Math.floor(Math.random() * 256); var b = Math.floor(Math.random() * 256); var rgb = &quot;(&quot; + r + &quot;,&quot; + g + &quot;,&quot; + b + &quot;)&quot;; return rgb;&#125;// 十六进制颜色var randomHex = function () &#123; return (   &quot;#&quot; +   Math.round(Math.random() * 0xffffff)     .toString(16)     .padStart(6, &quot;0&quot;) );&#125;;console.log(randomHex());// 十六进制颜色const randomColor = function () &#123; return &quot;#&quot; + Math.random().toString(16).substr(2, 6);&#125;;console.log(randomColor());</code></pre></blockquote><ol start="3"><li>GRB 颜色 转 16 进制颜色</li></ol><p><strong>基础知识</strong></p><table><thead><tr><th>RGB</th><th>R 对应范围</th><th>G 对应范围</th><th>B 对应范围</th></tr></thead><tbody><tr><td>rgb(0,24,255)</td><td>0-255</td><td>0-255</td><td>0-255</td></tr></tbody></table><table><thead><tr><th>16 进制</th><th>前两位对应 R，取值范围</th><th>中间两位对应 G，取值范围</th><th>最后两位对应 B，取值范围</th></tr></thead><tbody><tr><td>#05f3df</td><td>00-ff</td><td>00-ff</td><td>00-ff</td></tr></tbody></table><blockquote><img src="rgb转十六进制.png"></blockquote><p><strong>底层原理</strong></p><blockquote><p>将 rgb 的值，转成 32 位的二进制，然后再将 32 位二进制转成对应的 16 进制<br><img src="rgb转十六进制原理.png"></p></blockquote><blockquote><p><strong>过程分析：</strong></p><blockquote><ul><li>分别将rgb的三个值转为二进制，根据十六进制对应位置进行位移，组成一个二进制数，然后将它转为十六进制</li><li>每一个rgb值对应八位数，因为最大值255转换成八位数是<code>ffffffff</code></li><li>三个值拼接成32位的二进制数，最左边八位补0</li></ul></blockquote><ul><li><code>r</code>的值对应十六进制的前两位，也就是从右往左，第三个八位数，所以要左移16位才能到达</li><li><code>g</code>的值对应十六进制的中间两位，也就是从右往左，第二个八位数，所以要左移8位才能到达</li><li><code>b</code>的值对应十六进制的最后两位，也就是从右往左，第一个八位数，不用位移</li><li>位移之后怎么拼接？使用按位或<code>|</code><ul><li>按位或操作的两个位数，<strong>只要有一个</strong>是 1 就返回 1，两位都是 0 时返回 0</li></ul></li></ul></blockquote><blockquote><pre><code>// rgb颜色转 16进制颜色function colorRGBToHex(rgb) &#123; // rgbArr=[&#39;&#39;,&#39;2&#39;,&#39;33&#39;,&#39;55&#39;] var rgbArr = rgb.split(/[^\d]+/); // r 移掉丢掉高位   g移掉高位  b 不变 var color = (rgbArr[1] &lt;&lt; 16) | (rgbArr[2] &lt;&lt; 8) | rgbArr[3]; // color.toString(16) 的值，有可能不足6位，则需要向前补0 var _color = color.toString(16); // 转换成16进制 // padStart(6,&#39;0&#39;); // 不足6位，前面补0 return &quot;#&quot; + _color.padStart(6, &quot;0&quot;);&#125;var hexColor = colorRGBToHex(&quot;rgb(2,33,55)&quot;);console.log(hexColor); // #022137</code></pre></blockquote><blockquote><p>**<code>.split(/[^\d]+/)</code>**，用非数字的值作为分隔符，将rgb值拆出来</p><pre><code>var hexColor =(&quot;rgb(2,33,55)&quot;);var rgbArr = rgb.split(/[^\d]+/);console.log(rgbArr);// rgbArr=[&#39;&#39;,&#39;2&#39;,&#39;33&#39;,&#39;55&#39;,&#39;&#39;]console.log(rgbArr[1]);//rgbArr[1]=2</code></pre></blockquote><blockquote><p><strong>toString 方法的三个作用</strong></p><ul><li>将其它类型转换为字符串类型</li><li>检测对象的类型</li></ul><pre><code>Object.prototype.toString.call(arr) === &quot;[object Array]&quot;;</code></pre><ul><li>返回该数字对应进制的字符串</li></ul><pre><code>(10).toString(2); // 10 专为2进制是 &#39;1010&#39;(10).toString(16); // 10 转为 16制进是 &#39;a&#39;</code></pre></blockquote><ol start="4"><li>16 进制转 RGB 颜色<blockquote><p><strong>原理：</strong>本质就是要把对应 16 进制的</p><ul><li>前 2 位转成 r 的值，</li><li>中间 2 位转成 g 的值，</li><li>后两位转成 b 的值</li></ul></blockquote></li></ol><blockquote><p><strong>思路</strong></p><ul><li>先去掉<code>#</code>，换成对应的<code>0x</code></li><li>把十六进制转换为32位的二进制数(只要做位移运算，就会<strong>自动</strong>把操作数转成 32 位二进制)</li><li>右移16位，得到<code>r</code>的二进制数，赋值时自动转成 10 进制</li><li>右移8位，同时<code>&amp; 0xff</code>，得到<code>g</code>的二进制数，赋值时自动转成 10 进制</li><li><code>&amp;0xff</code>，得到<code>b</code>的二进制数，赋值时自动转成 10 进制<img src="16进制转rgb.jpg"></li></ul><pre><code>// 16进制颜色，转rgbfunction colorHexToRGB(hex) &#123; var newHex = hex.replace(&quot;#&quot;, &quot;0x&quot;); var r = newHex &gt;&gt; 16; var g = (newHex &gt;&gt; 8) &amp; 0xff; var b = newHex &amp; 0xff; return &quot;rgb(&quot; + r + &quot;,&quot; + g + &quot;,&quot; + b + &quot;)&quot;;&#125;console.log(colorHexToRGB(&quot;#022137&quot;)); // rgb(2,33,55)</code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS核心知识点（一）</title>
      <link href="/2023/12/01/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/12/01/JS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="JS简介、核心语法、变量"><a href="#JS简介、核心语法、变量" class="headerlink" title="JS简介、核心语法、变量"></a>JS简介、核心语法、变量</h2><h3 id="一、js简介"><a href="#一、js简介" class="headerlink" title="一、js简介"></a>一、js简介</h3><ol><li>HTML、CSS、JavaScript 三者之间的关系<table><thead><tr><th>前端三层</th><th>语言</th><th>功能</th><th>类比1</th><th>类比 2</th></tr></thead><tbody><tr><td>结构层</td><td>HTML</td><td>搭建结合、放置部件、描述语义</td><td>房子的框架</td><td>人的骨架</td></tr><tr><td>样式层</td><td>CSS</td><td>美化页面、实现布局</td><td>对房子装修</td><td>给人打扮、化妆</td></tr><tr><td>行为层</td><td>JavaScript</td><td>实现交互效果、数据收发、表单验证等</td><td>房子通水、通电</td><td>人的各种行为</td></tr></tbody></table></li></ol><blockquote><ul><li>交互效果：比如网站看到的鼠标滑动显示的下拉菜单、轮播图、选项卡等网页特效</li><li>数据收发：网站页面的数据，都是能通过 ajax 向后台发送请求，然后后台把数据返回给到前端，我们再把数据渲染到页面中。</li><li>表单验证：当我们提交一个注册表单时，会验证我们输入的邮箱、手机、密码等格式是否符合要求，这些都是通过 JS 来验证的。</li></ul></blockquote><ol start="2"><li>JavaScript 发展史<blockquote><p>布兰登.艾奇 (Brendan Eich) JavaScript 创始人， 人称 JS 之父</p></blockquote></li></ol><blockquote><p><strong>JavaScript 创建背景</strong></p><ul><li>1995 年 34 岁的系统程序员 Brendan Eich，任职于网景公司（Netscape ，美国一家专注浏览器的公司）</li><li><code>JavaScript</code>当时开发的目的，处理用户在浏览器端的<strong>输入验证（常说的表单验证）</strong></li><li>布兰登.艾奇，仅用 10 天时间就把 JavaScript 设计出来了 😃</li><li><code>JavaScript</code> 的前身叫<code>LiveScript</code>，后面改名为<code>JavaScript</code></li></ul></blockquote><blockquote><p><strong>Java 与 JavaScript 的关系 ？</strong><br>本质上是没有任何关系，就好像老婆与老婆饼的关系，雷锋与雷峰塔的关系。</p></blockquote><blockquote><p><strong>JavaScript 的早期设计思路</strong></p><ul><li>借鉴 C 语言的基本语法</li><li>借鉴 Java 语言的数据类型和内存管理</li><li>借鉴 Scheme 语言，将函数提升到”第一等公民”(first class)的地位</li><li>借鉴 Self 语言，使用基于原型(prototype)的继承机制<blockquote><p>所以，JavaScript 语言实际上是两种语言风格的混合产物 -（简化的）函数式编程 +（简化的）面向对象编程</p></blockquote></li></ul></blockquote><blockquote><p><strong>JavaScript 的地位</strong></p><ul><li>JavaScript 垄断了浏览器端脚本语言，绝对唯一的霸主<blockquote><p>在这之前其实有三种脚本语言 VBScript 、JScrip、JavaScript 。随着时间的推移，有两种被淘汰了，只剩下 JavaScript</p></blockquote></li><li>任何做浏览器端开发的工程师都不可能绕开 JavaScript</li><li>js 现在能做什么？<ul><li>表单动态校验（密码强度检测）js 产生的最初目的</li><li>网页特效</li><li>服务端开发 Node.js (Node.js 是 JS 的一个运行平台)</li><li>桌面程序(Electron)</li><li>APP(Cordova)</li><li>游戏开发(cocos2d-js)</li></ul></li></ul></blockquote><ol start="4"><li>前端 与 后端<blockquote><p><strong>如何理解前端（客户端）</strong></p><ul><li>所谓前端（客户端），其本质就是直接面向用户的那一端。</li><li>前端主要是用来：处理界面，交互逻辑，用户能看见的东西，是我们前端开发要解决的问题</li><li>前端开发的主要编程语言：HTML、CSS、JavaScript<br><strong>如何理解后端（服务端）</strong></li><li>后端主要是用来：操作数据库，实现数据的增删改查，处理数据。</li><li>后端开发主要的编程语言：Java、Python、PHP、C&#x2F;C++、GO</li><li>前端和后端通过 HTTP 协议进行传输</li></ul></blockquote></li></ol><blockquote><p><strong>JavaScript 是一种前端开发语言，为什么他现在可以做服务端开发 ？</strong><br>在 2009 年，JavaScript 诞生了一个著名的平台 <code>NodeJS</code>。NodeJS 就是 JavaScript 的一个运行平台，NodeJS 的诞生，让 JS 的触角延伸到了服务器端。 也就是说随着 NodeJS 的诞生，JS 也可以操作数据库了，也就可以做服务端开发。</p></blockquote><ol start="5"><li>ECMAScript 与 JavaScript 的关系<blockquote><ul><li>1996 年 11 月，网景公司将 JavaScript 提交给欧洲计算机制造商协会（ECMA）进行标准化。</li><li>1997 年，欧洲计算机制造商协会（ECMA）设置了 JavaScript 的标准，命名为 ECMAScript</li></ul></blockquote></li></ol><blockquote><p><strong>JavaScript 有 ECMAScript 的关系</strong></p><ul><li>JavaScript 是语言，ECMAScript 是标准</li><li>JavaScript 实现了 ECMAScript 标准，而 ECMAScript 标准规范了 JavaScript</li></ul></blockquote><ol start="6"><li>JavaScript 知识体系<blockquote><ul><li>语言核心（ECMAScript5）</li><li>DOM （Document Object Model）文档对象模型</li><li>BOM （Browser Object Model）浏览器对象模型</li></ul></blockquote></li></ol><blockquote><p><strong>语言核心（ECMAScript5）</strong></p><ul><li>我们接下来要学习的 JS 语言核心，就是<strong>ECMAScript5</strong>中的标准，标准中规定了语言的</li><li>基本语法</li><li>类型</li><li>语句</li><li>关键字</li><li>保留字</li><li>操作符</li><li>全局对象<blockquote><p>学习完这个后，才会再学习后面的 ECMAScript6、7、8、9….13</p></blockquote></li><li>ES6 对应的是 ECMAScript2015( ES2015）改动最多，主要是让 JS 工程化，构建化，所以我们常把 ES6 之后的归到 ES6。</li><li>其它不同版本间的对应关系如下<ul><li>ES7（ES2016）、ES8（ES2017）、ES9（ES2018）、ES10（ES2019）、ES11（ES2020）、ES12（ES2021）、ES13（ES2022）</li></ul></li></ul></blockquote><blockquote><p><strong>DOM（Document Object Model）文档对象模型</strong><br>DOM 将整个页面抽象为一组分层节点（DOM 树），开发者可以通过操作 DOM 树来随心所欲的控制网页的内容和结构和样式。<br>我们常见的网页特效，就是通过 JS 来操作 DOM 实现的</p><ul><li>Document文档，表示的就是整个HTML网页文档</li><li>Object对象，表示将网页中的每一个部分都转换为一个对象</li><li>Model模型，表示对象之间的关系，这样方便我们获取对象。</li></ul></blockquote><blockquote><p><strong>BOM（Browser Object Model）浏览器对象模型</strong></p><ul><li>BOM 用于支持访问和操作浏览器的窗口，JS 通过操作 BOM，可以获取窗口的大小，窗口输入的地址，控制前进和后退，监听窗口大小的改变等</li></ul></blockquote><ol start="7"><li>JavaScript 为何称为脚本语言<blockquote><ul><li>所谓的脚本语言：是指不需要提前编译，运行的过程中边编译，边执行。</li><li>JS 本质上就是在运行过程中边编译，边执行的，JS 是由 JS 解释器（JS 引擎）来逐行进行解释并执行</li></ul></blockquote></li></ol><blockquote><p><strong>什么是 JS 解释器 ？</strong><br>这就需要我们了解浏览器的两大组成部分：渲染引擎 和 JavaScript 引擎</p><ul><li>渲染引擎：用来解析 HTML 与 CSS，俗称内核，比如 chrome 浏览器的 blink，老版本的 webkit</li><li>JS 引擎： 也称为 JS 解释器，用来读取网页中的 JavaScript 代码，对其处理后运行。比如 chrome 浏览器的 V8 引擎。<blockquote><p>浏览器本身并不会执行 JS 代码，而是通过内置 <strong>JavaScript 引擎（解释器）</strong>来编译和执行 JS 代码。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行。</p></blockquote></li></ul></blockquote><h3 id="二、javascript基础语法"><a href="#二、javascript基础语法" class="headerlink" title="二、javascript基础语法"></a>二、javascript基础语法</h3><ol><li>书写位置<blockquote><p><strong>行内式</strong></p><ul><li>直接写在标签上，有点类似行内样式，这种写法基本不用，只做了解。</li></ul><pre><code>&lt;div onclick=&quot;alert(&#39;主人，你好&#39;);&quot;&gt;点我&lt;/div&gt;&lt;a href=&quot;JavaScript:;&quot;&gt;禁止页面刷新&lt;/a&gt;</code></pre></blockquote></li></ol><blockquote><p><strong>内部js</strong></p><ul><li>JS 代码直接写在写在<script><strong>标签内部</strong></li><li><script>标签，可以写在`<head></head>`标签中，也可以写在`<body></body>`标签中</li><li><script>标签中的type属性表示将<script></script>之间的文本内容，在浏览器中要转换为 js 脚本执行，现在可以省略不写。</li></ul></blockquote><blockquote><p><strong>外部js</strong></p><ul><li>把 js 代码，单独保存在一个 js 文件中</li><li>通过<code>&lt;script&gt;</code>标签的 src 属性来加载 js 文件</li><li><code>&lt;script&gt;</code>标签可以写在 head 或 body 标签中</li><li>如果采用了外部 JS 的写法，则<code>&lt;script&gt;</code>标签中，不能再写 JS 代码，写了也不会生效</li></ul><pre><code>&lt;!--错误写法，如果src属性中引入了外部js文件，则&lt;script&gt;标签不能再写js代码--&gt;&lt;script src=&quot;js/demo.js&quot;&gt; alert(&#39;错误写法，弹窗不会弹出&#39;);&lt;/script&gt;</code></pre></blockquote><blockquote><blockquote><p>注意1：在实际的开发中，我们常用的就是外部 JS 这种写法，因为他有很多优点<br><strong>优点：</strong></p></blockquote><ul><li><p>结构彻底分离</p></li><li><p>多页面可以进行复用</p></li><li><p>后期好维护修改</p></li><li><p>浏览器可以根据特定的设置缓存所有外部 JS 文件，所以多个页面都用到同一个文件，那么这个文件只需要下载一次，页面加载速度更快。如果后续再打开网页，浏览器会直接从缓存中读取。</p></li></ul><p> <strong>唯一缺点：</strong></p><ul><li>增加请求数（外部文件），但相对上面的优点，完全可以忽略不计。<blockquote><p>提示：html文件是不会被缓存的！但css和js文件会被缓存，如果做了修改，就得重命名才能重新加载</p></blockquote></li></ul></blockquote><blockquote><blockquote><p>注意2：Javascrip 文件不能脱离 HTML 网页运行，只有在后面学到 Node.JS 时，JS 可以在 NodeJS 平台上独立运行。</p></blockquote></blockquote><ol start="2"><li>JS 注释<blockquote><ul><li>阿里巴巴js注释规范：<a href="https://github.com/airbnb/javascript#comments">https://github.com/airbnb/javascript#comments</a></li><li>百度js注释规范：<a href="https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md#user-content-24-%E6%B3%A8%E9%87%8A">https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md#user-content-24-%E6%B3%A8%E9%87%8A</a></li></ul></blockquote></li></ol><blockquote><p><strong>单行注释：</strong></p><ul><li><code>// ……</code></li><li>快捷键：<code>ctrl+/</code><br><strong>多行注释：</strong></li><li><code>/* */</code></li><li>快捷键<code>Alt + shift + a</code></li></ul></blockquote><ol start="3"><li><p>JavaScript 中的注意事项</p><blockquote><ul><li>严格区分<strong>大小写</strong></li><li>语句字符都要是<strong>英文</strong>状态下（字符串可以使用任意字符）</li><li>每条语句以<strong>分号（;）</strong>结尾<ul><li>如果不写分号，意味着由解析器来确定语句在哪里结尾。</li><li>加分号有助于在某些情况下提升性能，因为解析器会尝试在合适的位置补上分号以纠正语法错误</li><li>如果不加分号，在后期压缩代码时，有可能会造成语法错误</li><li>而且有些时候，浏览器会加错分号，所以在开发中分号必须写</li></ul></li><li>JS 中会忽略多个空格和换行<ul><li>可以利用空格和换行，对代码进行格式化，这样写出来的代码更美观</li></ul></li></ul></blockquote></li><li><p>JS 中的输入输出语句</p><blockquote><p><strong>alert('弹窗')</strong></p><ul><li>alert() 语句，会在页面打开时，弹出弹窗</li><li>alert()语句，会阻止程序的执行，他会在此代码执行确认后，才会接着执行后面的代码</li><li>可以用来调式代码</li></ul></blockquote></li></ol><blockquote><p>console.log('控制台输出内容')</p><ul><li>浏览器控制台打印输出信息</li><li>他<strong>不会</strong>打断程序运行</li><li>常用来调试代码</li><li>可以一次打印多条内容，每条内容间用<code>,</code>逗号隔开</li></ul></blockquote><blockquote><p>prompt('提示用户输入信息')</p><ul><li>浏览器弹出输入框，用户输入内容</li></ul></blockquote><blockquote><blockquote><p><code>alert</code>、<code>console.log</code>和<code>prompt</code> 中，如果输入的是<strong>数字、已声明的变量</strong>，则不用加引号；如果输入的是<strong>字符串</strong>，则要加上''单引号或""双引号包裹。</p></blockquote></blockquote><h3 id="三、javascript变量与字面量"><a href="#三、javascript变量与字面量" class="headerlink" title="三、javascript变量与字面量"></a>三、javascript变量与字面量</h3><ol><li>硬盘、内存、CPU 三者关系<blockquote><p>硬盘，内存，CPU 三者各自的作用</p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>硬盘</td><td>负责程序和数据的<strong>永久存储</strong>，断电数据不丢失的特点</td></tr><tr><td>内存</td><td>负责<strong>连接</strong>CPU和硬盘；存储<strong>临时</strong>使用的数据;保存从硬盘读取的数据，提供给 CPU 使用；保存 CPU 的一些临时执行结果，以便 CPU 下次使用或保存到硬盘；<strong>断电数据就会清空，丢失</strong></td></tr><tr><td>CPU</td><td>运行<strong>总指挥</strong>，负责发指令，数据处理与计算</td></tr></tbody></table></blockquote></li></ol><p><strong>他们三者之间如何工作的？</strong></p><blockquote><p>当我们要运行某个程序时：</p><ul><li>CPU首先接受到我们的命令，</li><li>然后它(CPU)告诉<strong>硬盘</strong>：我要运行存储在你那的程序，你把该程序送到<strong>内存</strong>去</li><li>CPU对<strong>内存</strong>说，我让硬盘把程序送到你这里来了，你保存一下。</li><li>等该程序被完整的送到内存之后。CPU就开始执行程序，可以进行一系列操作</li><li>当我们在编辑文档等程序时，如果没有<code>ctrl+s</code>，那么此时编辑的数据是存储在内存的，只有<code>ctrl+s</code>后才会保存到硬盘</li><li>因此，没有<code>ctrl+s</code>的数据，一旦断电就无法恢复，因为内存只能临时存储数据</li></ul></blockquote><p><strong>CPU 可以直接从硬盘中读取数据，为什么要在中间加一个内存呢？</strong></p><blockquote><ul><li>因为CPU的处理速度特别快，而硬盘的读取和存储数据的速度特别的慢</li><li>如果直接从硬盘读数据，而硬盘的速度跟上不 CPU 的速度，就会对 CPU 造成很大的浪费，同时我们操作电脑时，就会很卡。</li><li>而内存的数据就很快了，他可以跟上 CPU 的处理速度。</li><li>内存就是为了解决 cpu 和硬盘之间速度不匹配的冲突，内存是由电流实现的存取速度，相当快，不过断电就丢失。</li></ul></blockquote><p><strong>总结</strong></p><table><thead><tr><th>名称</th><th>作用</th><th>速度</th><th>类比</th></tr></thead><tbody><tr><td>硬盘</td><td>负责程序和数据的永久存储，断电数据不丢失的特点</td><td>很慢</td><td>大仓库</td></tr><tr><td>内存</td><td>负责连接CPU和硬盘；存储临时使用的数据；断电数据就会清空，丢失</td><td>很快，几乎硬盘的 100 倍</td><td>中转站</td></tr><tr><td>CPU</td><td>运行总指挥，负责发指令，数据处理与计算</td><td>很快，几乎硬盘的 100 倍</td><td>车间</td></tr></tbody></table><blockquote><blockquote><p>CPU，内存 决定你电脑运行的快慢，硬盘决定你可以放东西的多少 ！</p></blockquote></blockquote><ol start="2"><li><p>什么是变量</p><blockquote><ul><li>大白话：变量就是一个用来装东西的盒子，再往深里说，他就是用来存放数据的容器。</li><li>变量的本质： 变量是程序在内存中申请的一块用来存放数据的空间。</li></ul></blockquote></li><li><p>如何声明变量</p><blockquote><ul><li>在 js 中，使用<code>var</code>关键词来<strong>声明</strong>一个变量</li><li>a是自定义的<strong>变量名</strong></li><li>使用 var 关键字声明变量后，计算机会自动为变量分配<strong>内存空间</strong>，用来存储变量的值</li><li>变量声明后，就可以给变量<strong>赋值</strong>，<code>= </code>等号表示赋值</li></ul><pre><code>var a;a=&quot;小米&quot;</code></pre><ul><li>通过变量名就可以访问变量在内存中存储的值。</li><li>赋值后我们就可以使用他了，我们可以在控制台通过输出语句输出变量 a 的值</li></ul><pre><code>console.log(a);</code></pre></blockquote></li><li><p>变量的初始化</p><blockquote><p>我们在<strong>声明</strong>一个变量的<strong>同时</strong>为其<strong>赋值</strong>，称为变量的初始化</p><pre><code>var a=&quot;张三&quot;;concole.log(a);</code></pre></blockquote></li><li><p>更新变量的值</p><blockquote><ul><li>一个变量被重新赋值后，他之前的值就会被覆盖</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给变量name 重新赋值</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li><li><p>同时声明多个变量<br><strong>先声明后赋值：</strong></p><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">;</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>z<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li></ol><p><strong>声明的同时赋值</strong></p><blockquote><pre><code>var x=1,  y=2,  z=3;  console.log(x,y,z);</code></pre></blockquote><p><strong>声明过程可赋值，可不赋值</strong></p><blockquote><pre><code>var x,   y = 1,   z = 4;//在声明之后为x赋值 x = 2; console.log(x, y, z);</code></pre></blockquote><ol start="7"><li><p>声明变量的几种特殊情况</p><blockquote><ul><li>声明变量，但没有赋值，默认值为<code>undefined</code><blockquote><p>我们后期如果要判断一个变量是否成功赋值，我们就可以通过检测他的值是否是 undefined 来判断</p></blockquote></li><li>不声明变量,直接进行赋值</li></ul><pre><code>&lt;script&gt; x = 7; // 控制台输出得到的结果是 7 console.log(x);&lt;/script&gt;</code></pre><blockquote><p>这是 js 的一个语法特性，只需要了解就好，在实际开发中非常<strong>不推荐</strong>这样写。</p></blockquote><ul><li>直接输出一个不存在的变量</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token comment" spellcheck="true">// 控制台**会报错** z is not defined</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote></li><li><p>变量的命名（标识符）</p><blockquote><p>变量的命名必需要遵守一定的规则。</p><ul><li>标识符：在 js 中所有可以由我们自主命名的都可以称为标识符</li></ul></blockquote></li></ol><p><strong>标识符的命名规则</strong></p><blockquote><ul><li>只能由字母，数字，_下划线，$组成，但<strong>不能</strong>以数字开头</li><li>严格区分<strong>大小写</strong>，a 和 A 是两个不同的变量</li><li>不能使用<strong>关键字</strong>或<strong>保留字</strong>做为变量名</li></ul></blockquote><p><strong>关键字和保留字</strong></p><blockquote><ul><li>关键字：就是 JavaScript 语言本身已经使用的一些单词。这些单词具有特定的用途，用户自定义的标识符（名字）不能与关键字相同 。</li><li>保留字：就是 JavaScript 语本身没有使用，但是考虑后期随之着 JS 的发展，可能会使用的一些单词。这些单词建议用户不要使用。</li><li>以下是部分关键字和保留字：<table><thead><tr><th>abstract</th><th>arguments</th><th>boolean</th><th>break</th><th>byte</th></tr></thead><tbody><tr><td>case</td><td>catch</td><td>char</td><td>class*</td><td>const</td></tr><tr><td>continue</td><td>debugger</td><td>default</td><td>delete</td><td>do</td></tr><tr><td>double</td><td>else</td><td>enum*</td><td>eval</td><td>export*</td></tr><tr><td>extends*</td><td>false</td><td>final</td><td>finally</td><td>float</td></tr><tr><td>for</td><td>function</td><td>goto</td><td>if</td><td>implements</td></tr><tr><td>import*</td><td>in</td><td>instanceof</td><td>int</td><td>interface</td></tr><tr><td>let</td><td>long</td><td>native</td><td>new</td><td>null</td></tr><tr><td>package</td><td>private</td><td>protected</td><td>public</td><td>return</td></tr><tr><td>short</td><td>static</td><td>super*</td><td>switch</td><td>synchronized</td></tr><tr><td>this</td><td>throw</td><td>throws</td><td>transient</td><td>true</td></tr><tr><td>try</td><td>typeof</td><td>var</td><td>void</td><td>volatile</td></tr><tr><td>while</td><td>with</td><td>yield</td><td>eval</td><td>arguments</td></tr></tbody></table></li></ul></blockquote><ol start="9"><li>推荐两种优秀的命名法<br><strong>驼峰命名</strong>（最推荐）<blockquote><ul><li><strong>首个</strong>单词小写，其余每个单词开头字母大写<br><code>myFirstName 、myStudentCount 、getBoxColor、navList</code><blockquote><p>不建议使用全小写 myfirstname，可读性差</p></blockquote></li></ul></blockquote></li></ol><p><strong>C 语言风格</strong></p><blockquote><ul><li>所有单词全小写，单词之间用_下划线分隔<br><code>my_first_name 、 my_student_count</code></li></ul></blockquote><p>匈牙利命名法（了解即可）</p><blockquote><ul><li>基本原则是：变量名=属性+类型+对象描述</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// i 提示变量类型为 整型</span>iMyStudentCount<span class="token punctuation">;</span></code></pre></blockquote><ol start="10"><li>字面量<blockquote><p>可以理解为<strong>不可能发生改变</strong>的(固定)值。他就是他的字面意思。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token keyword">var</span> A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">var</span> A <span class="token operator">=</span> <span class="token string">"我爱你"</span><span class="token punctuation">;</span> <span class="token keyword">var</span> A <span class="token operator">=</span> <span class="token string">"优秀"</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ul><li>源代码解读<ul><li>上面代码中，1，'我爱你'，'优秀' 就是字面量。</li><li>A 是变量，A 可以表示 1，也可以表示'我爱你'，还可以表示'优秀'。</li><li>在实际开发中，我们都是<strong>通过变量来保存一个字面量</strong>，然后只需要在每次用到字面量的地方，调用下该变量就好</li></ul></li></ul></blockquote></li></ol><h3 id="四、综合案例"><a href="#四、综合案例" class="headerlink" title="四、综合案例"></a>四、综合案例</h3><ol><li><p>弹出用户输入的信息 </p><blockquote><p><strong>需求：</strong></p><ul><li>当用户打开浏览器时，弹出输入框，要求用户输入姓名，点击确认后，以弹窗形式，显示用户的姓名。<br><strong>实现思路：</strong></li><li>使用 prompt() 函数弹出输入框，让用户输入内容</li><li>要通过变量来接受 prompt() 函数的返回值</li><li>通过 alert()函数，显示结果</li></ul></blockquote></li><li><p>如何交换两变量的值</p><blockquote><p><strong>需求：</strong></p><ul><li>定义两个变量同时赋值，然后交换两个变量中的值。<br><strong>实现思路：</strong></li><li>这里我们可以用现实生活中的例子来解答这道题</li><li>首先定义两个变量 apple 和 pear，然后分别赋值"苹果"和"梨子"</li><li>我们把这两个变量想像成两个盘子，变量的值，想像成盘子中放入了苹果和梨子。</li><li>现在的需求就是要把苹果放到 pear 盘中去，把梨子放到苹果盘子中去。</li><li>所以我们需要再借助第三个盘子，再声明一个变量 desk，不赋值。相当于空盘子</li><li>然后把苹果放到空盘子中 desk 中，再把梨子放到苹果盘中，再把 desk 盘中的苹果放到梨子盘中，就 ok 了</li></ul></blockquote></li></ol><h3 id="五、处理报错和REPL环境"><a href="#五、处理报错和REPL环境" class="headerlink" title="五、处理报错和REPL环境"></a>五、处理报错和REPL环境</h3><ol><li><p>处理报错</p><blockquote><p>在初学 JS 的时候，我们经常会写错代码，造成控制台报错，初学者经常会遇到以下两种常见错误</p><ul><li>Uncaught SyntaxError：未捕获的语法错误,<ul><li>常见的是使用了中文符号</li></ul></li><li>Uncaught ReferenceError：引用错误<ul><li>常见的是：误把字符串当变量用，或找不到变量，变量未定义</li></ul></li></ul></blockquote></li><li><p>REPL 执行环境</p><blockquote><ul><li>REPL(Read-Eval-Print-Loop)：交互式解析器</li><li>在 REPL 环境下，可以<strong>定义和运行</strong>变量、函数、对象</li><li><code>console</code>控制台其实也是一个 REPL 环境，可以使用它<strong>临时测试</strong>表达式的值<img src="REPL.png"></li></ul></blockquote></li></ol><blockquote><p>在控制台书写代码后，按回车，就会进入上面四个流程：</p><ul><li>先<strong>读取</strong>代码，再<strong>执行</strong>，执行后把结果<strong>打印</strong>出来，然后又可以<strong>重复</strong>刚才的动作。</li><li>接着在控制台书写代码，然后回车，又会进入上面四个流程</li></ul></blockquote><h2 id="JS数据类型和类型转换"><a href="#JS数据类型和类型转换" class="headerlink" title="JS数据类型和类型转换"></a>JS数据类型和类型转换</h2><h3 id="一、数据类型简介和检测"><a href="#一、数据类型简介和检测" class="headerlink" title="一、数据类型简介和检测"></a>一、数据类型简介和检测</h3><ol><li><p>为什么需要数据类型</p><blockquote><ul><li>程序需要处理大量的不同数据，如果用同一种方式处理那肯定是处理不了的。所以在计算机中同样需要将数据分成不同类型，然后用不同的方式来处理和计算。</li><li>数据类型背后，隐藏的是编译器或者解释器对数据处理方式的定义。把数据分成不同的数据类型，然后用使用不同的处理方式</li></ul></blockquote></li><li><p>JS 中数据类型的分类</p><blockquote><p>7 种<strong>基本</strong>数据类型（值类型）</p><ul><li>String 字符串类型</li><li>Number 数字类型</li><li>Boolean 布尔类型</li><li>Null 类型</li><li>Undefined 未定义</li><li>Symbol 符号</li><li>BigInt 任意精度的整数<br><strong>引用数据</strong>类型（对象类型）</li><li>对象（Object）、数组（Array）、函数（Function）</li><li>还有两个特殊的对象：正则（RegExp）和日期（Date）。</li></ul></blockquote></li><li><p>变量的类型</p><blockquote><ul><li>在 JS 中，变量的数据类型是由变量中存储的值的数据类型来决定的。</li><li>同时 JS 是一种弱类型的语言，他不用提前声明变量的类型。</li><li>代码运行时，变量的数据类型是由JS引擎根据=右边变量的数据类型来判断的。</li><li>运行完毕之后，变量就确定了数据类型。</li><li>也就是说相同的变量在不同的时刻可以是不同的类型。</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时a是 string字符串类型</span> a <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时a就是 number 数字类型</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时a就是 boolean布尔型</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote></li><li><p>typeof 操作符</p><blockquote><p><code>typeof</code> 检测返回值的类型，然后 <code>console.log</code> 把值的类型在控制台输出。</p><ul><li>JS 有很多种数据类型，我们需要有一种手段来确定变量的数据类型，那么<code>typeof</code>运算符就可以做到。</li><li>使用 typeof 运算符可以检测值或者变量的类型。</li><li>用法：<ul><li>检测<strong>值</strong>类型 typeof 值; 或 typeof(值)</li><li>检测<strong>变量</strong>类型 typeof 变量名; 或 typeof(变量名)</li><li>如果 typeof 标测的是一个<strong>表达式</strong>，则一定要带上括号,如 typeof(2+'2');</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//值类型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">"艾编程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span><span class="token comment" spellcheck="true">//变量类型</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>   b <span class="token operator">=</span> <span class="token string">"艾编程"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// number</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span></code></pre><blockquote><p>注意区分变量和值：变量是不能用' '单引号或"" 双引号包裹的，用<code>&#39;&#39;</code>或<code>“”</code>包裹的是字符串</p></blockquote><ul><li>typeof的<strong>返回值类型</strong>是字符串类型</li></ul><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">typeof</span> 小米 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//string</span><span class="token comment" spellcheck="true">//注意：</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span></code></pre><ul><li>只要是通过输入框得到的值，typeof类型都是<code>string</code>字符串类型</li></ul><pre><code>&lt;script&gt; var age = prompt(&quot;请输入你的年龄&quot;); // 用户输入 18 console.log(typeof age);&lt;/script&gt;</code></pre></blockquote></li></ol><h3 id="二、5种基本数据类型"><a href="#二、5种基本数据类型" class="headerlink" title="二、5种基本数据类型"></a>二、5种基本数据类型</h3><blockquote><p>在接下的数据类型学习中，我们主要学习Number、String、Boolean、null、undefined 的 5 种基础数据类型<br>关于BigInt和Symbol在后面的 ES6 中，我们再来学习。</p></blockquote><h4 id="Number-数字类型"><a href="#Number-数字类型" class="headerlink" title="Number 数字类型"></a>Number 数字类型</h4><ol><li><p>什么是 Number 数字类型</p><blockquote><ul><li>所有数字都是 Number 类型，包括整数（正负数）和浮点数（小数）；</li><li>在表达小于 1 的数时，小数点前面的 0 可以去掉，比如 0.2可以写成.2</li></ul></blockquote></li><li><p>不同进制的数字</p><blockquote><p>不同进制在线转换工具：<a href="https://tool.lu/hexconvert/">https://tool.lu/hexconvert/</a></p></blockquote></li></ol><p><strong>二进制数</strong></p><blockquote><ul><li>二进制数以<code>0b</code>开头</li><li>二进制数字序列范围 0-1，逢 2 进 1</li></ul></blockquote><p><strong>八进制数</strong></p><blockquote><ul><li>八进制数值以<code>0</code>开头</li><li>八进制数字序列范围 0-7 ,逢 8 进 1</li></ul></blockquote><p><strong>十六进制数</strong></p><blockquote><ul><li>十六进制数以<code>0x</code>开头</li><li>十六进制序列范围 0-9 以及 A-F</li></ul></blockquote><p><strong>科学记数法</strong></p><blockquote><ul><li>对于非常大或非常小的数，我们可以用科学记数法来表示</li><li><code>e7</code>表示 <code>10</code> 的 7 次方，小数点<strong>向右</strong>移动 7 个点的位置</li><li><code>e-7</code>表示 <code>0.1</code> 的 7 次方，小数点<strong>向左</strong>移动 7 个点的位置</li></ul></blockquote><p><strong>数字中最大值和最小值</strong></p><blockquote><ul><li>由于内存的限制，js 中不支持表示这个世界上所有数值。js 中能表示的</li><li>最小数保存在 <code>Number.MIN_VALUE</code> 中</li><li>最大数保存在 <code>Number.MAX_VALUE</code> 中</li></ul></blockquote><p><strong>正无穷和负无穷大</strong></p><blockquote><ul><li>因为计算机内存限制，js 中不支持表示这个世界上所有数值。</li><li>如果计算的数值超出了 js 能表示正数范围，则会以 <code>Infinity</code> 正无穷表示</li><li>如果计算的数值超出了 js 能表示负数范围，则以<code>-Infinity</code> 负无穷表示<blockquote><p>非零数字除以<code>0</code>时，结果是<code>infinity</code>或<code>-infinity</code></p></blockquote></li></ul></blockquote><ol start="3"><li>NaN<blockquote><ul><li>NaN(Not a number) 不是一个数字</li><li>NaN 用 typeof 检测，得到的结果是 number，说明 NaN 是一个<strong>数字类型</strong></li><li>可以理解为 NaN <strong>不是数字</strong>的数字类型</li></ul></blockquote></li></ol><p><strong>NaN 的作用</strong></p><blockquote><ul><li>NaN 表示本来要返回的数值<strong>操作失败</strong>了</li><li>两个数值做运算，如果操作失败了，就会返回 NaN，而不是抛出错误</li><li>用 0 除任意数值<strong>在其他语言中</strong>通常都会导致错误，从而中止代码执行。<strong>但是在 js</strong> 中，不会，而是返回 NaN</li></ul></blockquote><p><strong>关于 NaN 的运算</strong></p><blockquote><ul><li>0 除以 0 的结果是 NaN</li><li>在数学运算中，如果得不到数字的结果，其结果往往是 NaN。</li><li>任何数与 NaN 做运算，都会得到 NaN，<strong>除了</strong>与<strong>字符串</strong>拼接。</li></ul><pre><code>&lt;script&gt; console.log(NaN + true + &quot;false&quot;);//NaN+true=NaN,NaN+字符串即拼接//结果为&quot;NaNfalse&quot;,typeof为string//字符串与任何类型拼接，得到的都是字符串类型&lt;/script&gt;</code></pre></blockquote><blockquote><ul><li>NaN 自己不与自己相等</li></ul><pre class=" language-js"><code class="language-js">script<span class="token operator">></span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NaN</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">-</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NaN</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">NaN</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NaN</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token number">NaN</span> <span class="token operator">+</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'NaN1'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote><p><strong>isNaN()</strong></p><blockquote><ul><li>这个函数接收一个参数，可以是<strong>任意</strong>数据类型，然后判断这个参数是否<strong>“不是数值”</strong></li><li>isNaN 会尝试把它<strong>个值转换为数值</strong>，如果转换成数值字成功，也会认为是数字，则结果也是 false<blockquote><p>特别注意：isNaN 并不是用来判断这个参数是不是NaN这个值<br>isNaN(NAN)结果是true</p></blockquote></li><li>如果参数是数值，则返回 false，否则返回 true</li></ul><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false  1是一个数字，所以返回false假的</span><span class="token comment" spellcheck="true">//特别注意："1"原本是字符串，但被转换成了数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false '1'被转成数字1，所以返回false</span></code></pre></blockquote><h4 id="String字符串类型"><a href="#String字符串类型" class="headerlink" title="String字符串类型"></a>String字符串类型</h4><blockquote><ul><li>符串就是 "人类的自然语言"</li><li>字符串要用引号包裹，<strong>双引号</strong>或者<strong>单引号</strong>均可</li></ul></blockquote><ol><li><p>分清数字和字符串</p><blockquote><ul><li>数字11和字符串'11'在语义上是不同的，前者表达一个数量，后者是一个文本</li></ul></blockquote></li><li><p>双引号 与 单引号嵌套</p><blockquote><ul><li>双引号里面可以嵌套''单引号，单引号也可以嵌套""双引号</li><li><strong>但</strong>双引号里不能直接嵌套双引号，单引号里也不能直接嵌套单引号</li><li>单引号或双引号，在匹配的时候，都是以就近原则来进行匹配的</li><li>推荐使用单引号内嵌套双引号</li></ul></blockquote></li><li><p>转义字符</p><blockquote><p>如果需要在字符串中使用特殊字符，可以用转义符 \ 转义</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td><code>\n</code></td><td>换行符， n 是 newline 的意思</td></tr><tr><td><code>\\</code></td><td>反斜杠<code> \</code></td></tr><tr><td><code>\&quot;</code></td><td><code>&#39;</code>单引号</td></tr><tr><td><code>\&quot;</code></td><td><code>&quot;</code>双引号</td></tr><tr><td><code>\t</code></td><td>tab 缩进</td></tr></tbody></table></blockquote></li><li><p>字符串的拼接</p><blockquote><ul><li><code>+ </code>号，可以用来拼接两个 或 多个字符串</li><li>字符串与<strong>任何</strong>类型拼接，得到的都是字符串</li><li>字符串与变量拼接时，变量不能添加引号</li></ul></blockquote></li><li><p>空字符串</p><blockquote><ul><li>空字符串，直按书写空的 ''单引号 或 ""双引号 表示空字符串</li><li>空字符中的空格会占一个字符</li><li>空字符串有什么用 ？<ul><li>可以用来转换数据类型</li><li>可以提前预设变量保存值为字符串类型，如果不设置为<code>&#39;&#39;</code>，有可能会出现错误的结果</li></ul></li></ul></blockquote></li><li><p>length 属性</p><blockquote><ul><li>通过 length 属性，可以获取整个字符串的长度</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"我就是我，不一样的花朵"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote></li></ol><h4 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h4><blockquote><ul><li>布尔值主要是用来做<strong>逻辑判断</strong></li><li>布尔类型只有两个值：true(真)和false（假），没有引号</li><li>如果给true和false加上<code>&quot;&quot;</code>双引号或<code>&#39;&#39;</code>单引号，那就变成了字符串了</li></ul></blockquote><h4 id="null-空类型"><a href="#null-空类型" class="headerlink" title="null 空类型"></a>null 空类型</h4><blockquote><ul><li>null 类型只有一个值，就是<code>null</code></li><li>null 表示一个<strong>空对象指针</strong></li><li>用typeof检测 null 的类型，得到的是<code>Object</code></li></ul></blockquote><blockquote><blockquote><p>虽然 typeof null 得到值为 Object,但是 null 是基本数据类型，这是一个历史遗留问题，如果要深究，那就只能用下面这段话来解释 (以下内容来自：你不知道的 JavaScript 上卷-103 页)</p></blockquote><ul><li>不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判断为 object 类型</li><li>null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回 "object"<blockquote><p>面试中会问到这个点，问这个问题的本质不是考这个点，因为没有意义，而是想通过这个点，看你平时学习是否研究底层，会阅读相关 JS 书籍。</p></blockquote></li></ul></blockquote><p><strong>null 的作用</strong></p><blockquote><ul><li>如果一个变量被声明后，<strong>将来</strong>是用来保存<strong>对象值</strong>的，那建议用 null 来初始化，不要使用其他值。</li><li>当我们需要将对象、数组、事件监听进行销毁时，我们就可以把他们设置为 null，只有把他们设置为 null 时，JS 垃圾回收器才会把他们当成垃圾，进行<strong>垃圾回收</strong></li></ul></blockquote><h4 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h4><blockquote><ul><li>undefined 类型，只有一个值，就是undefined</li><li>当声明一个变量，但是<strong>并不给变量赋值</strong>时，它的值就是<code>undefined</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token keyword">var</span> a<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a的值是undefined</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 变量a的类型是 undefined</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><blockquote><p>我们经常在调试中或报错中会发现有些值打印是 undefined，就说明这个变量定义了，没有赋值，或赋值不成功。</p></blockquote></blockquote><h3 id="三、数据类型转换"><a href="#三、数据类型转换" class="headerlink" title="三、数据类型转换"></a>三、数据类型转换</h3><blockquote><ul><li>JavaScript 是一种<strong>动态类型语言</strong>(dynamically typed language)。</li><li>这意味着你在声明变量时可以不必指定数据类型，而数据类型会在代码执行时会根据需要<strong>自动转换</strong>。</li><li>JS 中通常会有三种方式的数据类型转换<ul><li>其它类型 --> 数值</li><li>其它类型 --> 字符串</li><li>其它类型 --> 布尔值</li></ul></li></ul></blockquote><h4 id="其它类型转换为数字型"><a href="#其它类型转换为数字型" class="headerlink" title="其它类型转换为数字型"></a>其它类型转换为数字型</h4><blockquote><p>将其它数据类型转换为数字型，有以下 4 种方法</p><table><thead><tr><th>函数</th><th>说明</th><th>实例</th></tr></thead><tbody><tr><td>Number()函数 强制转换</td><td>将<strong>非数字类型</strong>转换成数字</td><td>Number(''); // 0 或 Number(' '); // 0</td></tr><tr><td>paresInt() 函数</td><td>将<strong>字符串</strong>转换为数字</td><td>parseInt('ab123'); // NaN 或 parseInt('200px'); // 200</td></tr><tr><td>parseFloat() 函数</td><td>将<strong>字符串</strong>转换为浮点数</td><td>parseFloat('3.14 元'); // 3.14 或 parseFloat('圆周率 3.14'); // NaN</td></tr><tr><td>（+ - * /） JS 隐式转换</td><td>利用算术运算隐式转换为数字型</td><td>-</td></tr></tbody></table></blockquote><ol><li><p>Number 函数</p><blockquote><p>Number()函数：用来将非数字类型转换成数字。</p><ul><li>''空字符串会转换成数字0</li><li>只有前后包含：空格、纯数字类字符串、2 进制或 16 进制表示的数字、科学记数表示法的<strong>字符串</strong>能转换成数字</li><li>其它会转换成 <code>NaN</code></li><li>以上规则，只针对基本数据类型而言</li><li>Number([]) 结果是 0</li><li>Number({})结果是 NaN</li></ul><pre><code>&lt;script&gt;Number(&quot;-12&quot;); // -12Number(&quot;2e3&quot;); // 2000Number(&quot;0b11&quot;); // 3Number(&quot;2021年&quot;); // NaNNumber(&quot;&quot;); // 0Number(&quot; &quot;); // 0Number(true); // 1Number(false); // 0Number(null); // 0Number(undefined); // NaN&lt;/script&gt;</code></pre></blockquote></li><li><p>parseInt(函数)</p><blockquote><ul><li>parseInt()函数，主要是将<strong>字符串类型</strong>转换为<strong>整数</strong>数字</li><li><strong>转换规则</strong><ul><li>从第一个非空字符开始转换，如果<strong>第一个字符</strong>不是数值、加号或减号，parseInt 立即返回 <code>NaN</code></li><li>这就意味着<strong>空字符串</strong>也会返回 <code>NaN</code>。</li><li>如果第一个非空字符是<strong>数值、加号、减号</strong>，则继续检测，直到字符串末尾，或碰到<strong>非数值字符</strong>，就停止。</li></ul></li><li>parseInt() 函数，<strong>不能</strong>识别二进制，八进制，<strong>但是</strong>他可以识别十六进制</li><li>parseInt() 函数，还有第二个参数，可以指定以什么进制数来进行转换parseInt() 函数,指定之后就可以进行转换,但仍然识别不了二、八进制</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0b10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0110"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 110</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0x14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0x14年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"2.3"</span> <span class="token operator">+</span> <span class="token string">"3.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0b1001"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//0</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote></li><li><p>parseFloat(函数)</p><blockquote><ul><li>他的转换原则 和 parseInt()函数一样，唯一两点区别在于：<ul><li>parseFloat() 函数，主要是将<strong>字符串类型</strong>转换为<strong>浮点数</strong></li><li>parseFloat( )函数，他<strong>不能</strong>识别进制数</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"3.14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.14</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"3.2.32"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.2</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"3.14元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.14</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"圆周率3.14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"0b10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"0110"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 110</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"0x14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote></li><li><p>JS 隐式转换 (+ - * /)</p><blockquote><ul><li>利用算术运算隐式将其它类型转换为数字</li><li>在单个字符串前面加上 +号，可以将字符串转成数字,多个字符串，是字符串拼接<br><code>typeof +&quot;1&quot;; // number</code></li></ul></blockquote></li></ol><h4 id="其它类型转换为字符串"><a href="#其它类型转换为字符串" class="headerlink" title="其它类型转换为字符串"></a>其它类型转换为字符串</h4><table><thead><tr><th>方法或函数</th><th>说明</th><th>实例</th></tr></thead><tbody><tr><td>String()函数 强制转换</td><td>其它类型转换字符串</td><td>String(0b10); // '2' 或 String(NaN); // 'NaN'</td></tr><tr><td>toString() 方法</td><td>数字和boolean类型转换为字符串0b10.toString(); // '2' 或 NaN.toString(); // 'NaN'</td><td></td></tr><tr><td>+ '' 空字符串拼接</td><td>所有类型与''空字符串拼接得到的都是字符串类型。</td><td>typeof (1 + ""); // 'string'</td></tr></tbody></table><blockquote><blockquote><p>以上方法或函数，将任何类型转换为字符串，都会转换成长得相同的字符串，除了科学记数法和非10进制数字会将其转换为 10 进制值的字符串</p></blockquote></blockquote><ol><li>String()函数<br><strong>数字转换字符串</strong><blockquote><pre><code>&lt;script&gt; String(123); // &#39;123&#39; String(2.14); // &#39;2.14&#39; String(2e4); // &#39;20000&#39; String(0b10); // &#39;2&#39; String(NaN); // &#39;NaN&#39; String(Infinity); //&#39; Infinity&#39;&lt;/script&gt;&gt;```</code></pre></blockquote></li></ol><p><strong>布尔值转换为字符串</strong></p><blockquote><pre><code>&lt;script&gt; String(true); // &#39;true&#39; String(false); // &#39;false&#39;&lt;/script&gt;</code></pre></blockquote><p><strong>undefined 和 null 转换为字符串</strong></p><blockquote><pre><code>&lt;script&gt; String(undefined); // &#39;undefined&#39; String(null); // &#39;null&#39;&lt;/script&gt;</code></pre></blockquote><ol start="2"><li>toString() 方法<br><strong>数字转换为字符串</strong><blockquote><pre><code>&lt;script&gt; (123).toString(); // &#39;123&#39; (2e4).toString(); // &#39;20000&#39; (0b10).toString(); //&#39;2&#39;; NaN.toString(); // &#39;NaN&#39; Infinity.toString(); // &#39;Infinity&#39;&lt;/script&gt;</code></pre></blockquote></li></ol><p><strong>boolean 类型转换为字符串</strong></p><blockquote><pre><code>&lt;script&gt; true.toString(); // &#39;true&#39; false.toString(); // &#39;false&#39;&lt;/script&gt;</code></pre><blockquote><p>null和undefined没有 toString()这个方法</p></blockquote></blockquote><ol start="3"><li><code>+ &#39;&#39;</code> 空字符串<blockquote><p>所有类型与<code>&#39;&#39;</code>空字符串拼接得到的都是字符串类型。</p><pre><code>&lt;script&gt; true + &quot;&quot;; // &#39;true&#39; false + &quot;&quot;; // &#39;false&#39; NaN + &quot;&quot;; // &#39;NaN&#39; 0 + &quot;&quot;; // &#39;0&#39; 0b10 + &quot;&quot;; // &#39;2&#39;&lt;/script&gt;</code></pre></blockquote></li></ol><h4 id="其他类型转boolean-布尔类型"><a href="#其他类型转boolean-布尔类型" class="headerlink" title="其他类型转boolean 布尔类型"></a>其他类型转boolean 布尔类型</h4><blockquote><p>其它数据类型转换成 Boolean 方法：</p><ul><li>方法一：调用Boolean()函数来实现</li><li>方法二：在一个数值或变量前加!!(两次取反)操作，也可以实现<br><strong>转换原则：</strong></li><li>代表空、否定的值会被转换为false。 如：''、0、NaN、null、undefined</li><li>除了上面列出的 5 个值，其它值字都转换为 true</li></ul></blockquote><p><strong>字符串转换为布尔类型</strong></p><blockquote><pre><code>&lt;script&gt; Boolean(&quot;&quot;); // false Boolean(&quot; &quot;); // true Boolean(&quot;NaN&quot;); // true Boolean(&quot;false&quot;); // true&lt;/script&gt;</code></pre></blockquote><p><strong>数字类型转换为布尔类型值</strong></p><blockquote><pre><code>&lt;script&gt; Boolean(NaN); // false Boolean(0); // false Boolean(Infinity); // true&lt;/script&gt;</code></pre></blockquote><p><strong>null 和 undefined 转换为布尔类型值</strong></p><blockquote><pre><code>&lt;script&gt; Boolean(null); // false Boolean(undefined); // false&lt;/script&gt;</code></pre></blockquote><h4 id="常见的类型转换"><a href="#常见的类型转换" class="headerlink" title="常见的类型转换"></a>常见的类型转换</h4><table><thead><tr><th>原始值</th><th>转换为 数字</th><th>转换为 字符串</th><th>转换为 布尔值</th></tr></thead><tbody><tr><td>false</td><td>0</td><td>"false"</td><td>false</td></tr><tr><td>true</td><td>1</td><td>"true"</td><td>true</td></tr><tr><td>0</td><td>0</td><td>"0"</td><td>false</td></tr><tr><td>"0"</td><td>0</td><td>"0"</td><td>true</td></tr><tr><td>''</td><td>0</td><td>''</td><td>false</td></tr><tr><td>' '</td><td>0</td><td>' '</td><td>true</td></tr><tr><td>"30"</td><td>30</td><td>"30"</td><td>true</td></tr><tr><td>null</td><td>0</td><td>"null"</td><td>false</td></tr><tr><td>undefined</td><td>NaN</td><td>"undefined"</td><td>false</td></tr><tr><td>NaN</td><td>NaN</td><td>"NaN"</td><td>false</td></tr><tr><td>Infinity</td><td>Infinity</td><td>"Infinity"</td><td>true</td></tr></tbody></table><h3 id="四、综合案例-1"><a href="#四、综合案例-1" class="headerlink" title="四、综合案例"></a>四、综合案例</h3><p><strong>简单计算器</strong></p><blockquote><p><strong>需求分析</strong>：</p><ul><li>当用户在浏览器打开页面时，弹出一输入框，要求用户输入数字，用户确认后，再弹出一输入框，再输入一个数字，确认后，最后弹出两次输入的数字之和。<br><strong>代码实现思路：</strong></li><li>使用 prompt() 函数弹出输入框，让用户输入两个数字</li><li>对用户输入两个数字进行<strong>加法运算</strong>，而由于用户输入的内容是字符串类型，所以必须<strong>先转为数字类型</strong>，才能做加法运算</li><li>最后用 alert() 显示结果，使用字符串拼接进行语句输出</li><li>程序虽小，却体现了普遍计算机程序的执行步骤：用户输入->计算机处理 -> 显示结果<blockquote><p>注意：</p><ul><li>通过输入框得到的值都是字符串类型</li><li>进行加法运算的值必须为<strong>数字类型</strong></li><li>减法不用进行类型转换（因为JS支持隐式类型转换）</li></ul></blockquote></li></ul></blockquote><h3 id="五、扩展知识"><a href="#五、扩展知识" class="headerlink" title="五、扩展知识"></a>五、扩展知识</h3><ol><li><p>Javascript 为何称为弱类型的动态脚本语言</p><blockquote><ul><li>在前面我们一直说，Javascript 是一种运行在客户端的脚本语言（Script 是脚本的意思）。</li><li>本质上 Javascript 是一种弱类型的动态脚本语言。接下来我们分别来解释下，何为<strong>弱类型</strong>，何为<strong>动态</strong>，何为<strong>脚本语言</strong>。<img src="语言类型.png"></li></ul></blockquote></li><li><p>何为<strong>动态</strong>语言和<strong>静态</strong>语言</p><blockquote><ul><li>在声明变量时，<strong>不需要</strong>确定变量类型的语言，称为动态语言。比如：Javascript，Python、Ruby、PHP等</li><li>在声明变量时，需要确定变量类型的语言，称为静态语言。比如 Java、C、C++ 、C# 等</li><li>JS 在声明变量声明时，并不需要确定变量的类型，其类型是在代码执行的过程中,由变量对应值的类型来动态决定的。所以 JS 在执行过程中，需要检查数据的类型。</li></ul></blockquote></li><li><p>何为<strong>弱</strong>类型语言和<strong>强</strong>类型语言</p><blockquote><ul><li>支持<strong>隐式类型</strong>转换的语言，称为 弱类型语言<ul><li>弱类型语言：C、C++、Javascript、PHP、VB、Perl</li></ul></li><li>不支持隐式类型转换的语言，称为 强类型语言<ul><li>强类型语言：C# 、Java 、Ruby、Python</li></ul></li></ul><pre><code>var a = &quot;4&quot;;var b = 1;console.log(a - b); //3</code></pre><ul><li>变量a是字符串，b是数字，a-b='4'-1，在这个过程中会<strong>自动</strong>把字符串'4'转换成数字4，然后再做运算。</li><li>这种在运算过程中会悄悄把数据类型转换的操作，叫<strong>隐式类型转换</strong>。</li></ul></blockquote></li><li><p>何为脚本语言</p><blockquote><ul><li>所谓的脚本语言：是指不需要<strong>提前编译</strong>，而是在运行的过程中边编译，边执行。</li><li>而 JS 本质上就是在运行过程中边编译，边执行的，JS 是由 <strong>JS 解释器（JS 引擎）</strong>来逐行进行解释并执行</li><li>所以 JS 也称为<strong>解释型</strong>语言。</li></ul></blockquote></li><li><p>编译型语言 和 解释性语言</p><blockquote><p><strong>编译器和解释器</strong></p><ul><li>之所以存在编译器和解释器，是因为机器不能直接理解我们所写的代码，所以在执行程序之前，需要将我们所写的代码“翻译”成机器能读懂的机器语言。</li><li>按语言的执行流程，可以把语言划分为编译型语言和解释型语言。<br><strong>编译型语言</strong></li><li>在程序<strong>执行之前</strong>，需要经过编译器的编译过程，并且编译之后会直接保留机器能读懂的二进制文件，这样每次运行程序时，都可以直接运行该二进制文件，而不需要再次重新编译了。比如 C/C++、GO 等都是编译型语言。<br><strong>解释型语言</strong></li><li>而由解释型语言编写的程序，在每次<strong>运行时</strong>都需要通过解释器对程序进行动态解释和执行。比如 Python、JavaScript 等都属于解释型语言。<blockquote><ul><li>大部分后端语言，都是编译型语言，也就是要先编译，再执行。而 JS 是解释型语言，一边编译一边执行。</li><li>编译型是一开始慢，后面快，而解释是刚开始快，但过程中是慢的。</li></ul></blockquote></li></ul></blockquote></li><li><p>什么是 JavaScript 解释器 ？</p><blockquote><p>要理解什么是解释器，就需要我们了解浏览器的两大组成部分：渲染引擎 和 JavaScript 引擎</p><ul><li>渲染引擎：用来解析 <strong>HTML 与 CSS</strong>，俗称内核，比如 chrome 浏览器的 blink，老板本的 webkit</li><li>JS 引擎：也称为 <strong>JS 解释器</strong>，用来读取网页中的 <strong>JavaScript 代码</strong>，对其处理后运行。比如 chrome 浏览器的 V8 引擎。<blockquote><ul><li>浏览器本身并不会执行 JS 代码，而是通过内置 JavaScript 引擎（解释器）来编译和执行 Js 代码。</li><li>JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行。</li></ul></blockquote></li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多终端响应式开发</title>
      <link href="/2023/11/30/%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
      <url>/2023/11/30/%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、什么是响应式布局"><a href="#一、什么是响应式布局" class="headerlink" title="一、什么是响应式布局"></a>一、什么是响应式布局</h3><blockquote><ul><li>响应式布局：只需要开发一套代码，就能使页面适应不同的屏幕 （一个网站兼容多种终端）</li><li>响应式设计原理：通过媒体查询来检测视口宽，针对不同视口宽做相应代码处理，来展现不同的布局和内容</li><li>流体布局和 rem&#x2F;vw 布局，只是针对移动端开发的，开发出来的网站在尺寸为（320 ~ 480px）之间的屏幕上显示，才能获得好的体验。并不能适应iPad和PC 端。</li><li>响应式布局开发出来的网站，在移动、ipad、PC 端都能有好的体验，能兼容不同的屏幕尺寸</li></ul></blockquote><h3 id="二、媒体查询的语法"><a href="#二、媒体查询的语法" class="headerlink" title="二、媒体查询的语法"></a>二、媒体查询的语法</h3><ol><li><p>什么是媒体查询</p><blockquote><ul><li>我们知道，一套 CSS 样式是很难适应不同大小的屏幕，所以我们需要针对不同的屏幕尺寸来书写不同的样式，这样我们写出来的页面就能在不同大小的屏幕上都正常显示。</li><li>媒体查询就是用来解决这个问题的，他能帮助我们检测不同屏幕的尺寸，然后针对不同屏幕尺寸，显示不同的样式。</li><li>一个完整的媒体查询语句，包含以下四个部分：<ul><li>@media 关键字</li><li>媒体类型</li><li>逻辑运算符</li><li>媒体特性</li></ul></li></ul><pre><code>&lt;style&gt;  /*  @media 媒体类型 逻辑操作符 (媒体特性) &#123;  ...css样式....;&#125; @media 是关键字：媒体查询 screen 媒体类型：屏幕设备 and 逻辑运算符：与 (多个条件同时满足) min-width 媒体特性：设备宽&gt;=400px以下整个媒体查询代码的含义：网页是在屏幕设备上显示，同时屏幕设备的宽&gt;=400px时，背景颜色变为红色。 */  @media screen and (min-width: 400px) &#123; body &#123;   background-color: red; &#125;  &#125;&lt;/style&gt;</code></pre></blockquote></li><li><p>媒体类型</p><blockquote><ul><li>媒体类型(Media types) 就是用来描述设备的一般类别，设备类别主要分为以下 4 种<table><thead><tr><th>媒体类型</th><th>说明</th></tr></thead><tbody><tr><td>all</td><td><strong>（默认值）</strong>适用于所有的设备</td></tr><tr><td>screen</td><td>适用于屏幕设备</td></tr><tr><td>print</td><td>适用于在打印预览模式下在屏幕上查看的分页材料和文档</td></tr><tr><td>speech</td><td>适用于语音合成器</td></tr><tr><td>如果媒体查询语句，只指定媒体类型，可以简写成如下:</td><td></td></tr><tr><td><code>@media 媒体类型 ｛ .... css样式..... ｝;</code></td><td></td></tr></tbody></table></li></ul></blockquote></li></ol><blockquote><p>要看到<strong>打印模式</strong>下效果，按以下步骤操作即可</p><ul><li>涉及到颜色一定要记得选彩色</li><li>在浏览器中右击 -&gt; 打印（点击进入） -&gt; 更多设置（点击）&gt;- <strong>背景图形</strong>（勾选上）<img src="打印模式.png"></li></ul></blockquote><ol><li>媒体特性<blockquote><ul><li>媒体特性（Media features）描述了 user agent、输出设备，或是浏览环境的具体特征。</li><li>媒体特性表达式是完全可选的</li><li>它负责测试这些特性或特征是否存在、值为多少。</li><li><strong>每条</strong>媒体特性表达式都必须用 括号（） 括起来。<br><strong>常用的媒体特性</strong><table><thead><tr><th>媒体特性</th><th>说明</th></tr></thead><tbody><tr><td>width</td><td>设备屏幕的宽</td></tr><tr><td>min-width</td><td>设备屏幕的最小宽(如min-width:400px;表示屏幕宽&gt;&#x3D;400px)</td></tr><tr><td>max-width</td><td>设备屏幕的最大宽(如max-width:1200px;表示屏幕宽&lt;&#x3D;1200px)</td></tr><tr><td>-webkit-device-pixel-ratio</td><td>设备像素比(dpr)的值（只有-webkit 内核的才支持）</td></tr><tr><td>-webkit-max-device-pixel-ratio</td><td>设备像素比(dpr)的最大值（只有-webkit 内核的才支持）</td></tr><tr><td>-webkit-min-device-pixel-ratio设备像素比(dpr)的最小值（只有-webkit 内核的才支持）</td><td></td></tr><tr><td>orientation</td><td>当前屏幕的方向，是横屏还竖屏</td></tr><tr><td>portrait: 表示竖屏(orientation : portrait;)</td><td></td></tr><tr><td>landscape:表示横屏 (orientation:landscape;)</td><td></td></tr></tbody></table></li></ul></blockquote></li></ol><blockquote><p><strong>写法</strong></p><ul><li>如果只指定媒体特性，写法如下：</li></ul><pre><code>@media （媒体特性） &#123;  ...css样式...;&#125;</code></pre><ul><li>如果同时指定媒体类型和媒体特性，中间需要有<strong>逻辑运算符</strong>，写法如下：</li></ul><pre><code>@media 媒体类型 逻辑运算符 （ 媒体特性） &#123;  .... css样式....;&#125;</code></pre><ul><li>多个媒体特性中间也要有<strong>逻辑操运算符</strong></li></ul><pre><code>@media 媒体类型 逻辑操运算符 （ 媒体特性） 逻辑操作符 （媒体特性） &#123;  .... css样式....;&#125;</code></pre></blockquote><ol start="4"><li>逻辑运算符<blockquote><ul><li>逻辑运算符（logical operators） not,and和only可用于联合构造复杂的媒体查询</li><li>您还可以通过用 ,（逗号） 分隔多个媒体查询，将它们组合为一个规则。</li></ul></blockquote></li></ol><blockquote><p><strong>and 运算符</strong></p><ul><li><code>and</code>操作符用于将多个媒体查询规则组合成单条媒体查询</li><li>当每个查询规则都为真时，则该条媒体查询为真</li><li>媒体类型为<code>all</code>时，不需要写<code>and</code></li></ul></blockquote><blockquote><p><strong>逗号逻辑运算符</strong></p><ul><li>逗号用于将多个媒体查询合并为一个规则</li><li>每个逗号前为一个<strong>独立</strong>的查询规则，逗号后为一个<strong>独立</strong>的查询规则</li><li>逗号分隔的每一个独立的查询规则中，只要有一个为true，则整个 media 语句返回true。</li><li>换句话说,逗号类似于js中的逻辑或or运算符</li></ul></blockquote><blockquote><p><strong>not运算符</strong></p><ul><li><code>not</code>运算符会反转整个媒体查询的含义</li><li>如果不满足这个条件则返回true，否则返回false</li><li>如果使用<code>not</code>运算符，则还必须指定媒体类型,并且写在媒体类型之前</li><li><code>not</code>只能用来否定整个媒体查询</li><li>如果出现在以逗号分隔的查询列表中，它将仅否定应用了该查询的特定查询，因此，它不会应用于以逗号分隔的媒体查询列表中的每个媒体查询</li></ul><pre><code>@media not screen and (min-width: 1000px), screen and (orientation: landscape) &#123;  body &#123;    background-color: red;  &#125;&#125;</code></pre><blockquote><p><code>not</code>只否定了<code>not screen and (min-width: 1000px)</code>，并不会否定逗号后面的<br>注意：<code>not</code>写在媒体类型之前，但是媒体类型和媒体特性中间必须写逻辑运算符</p></blockquote></blockquote><blockquote><p><strong>only 运算符</strong></p><ul><li>only 关键字，主要是为了兼容一些老版本的浏览器时，防止出错而加上的。</li><li>因旧版本的浏览器会将 screen and (max-width: 500px)简单地解释为screen，忽略查询的其余部分，并将其样式应用于所有屏幕</li><li>加上 only 后，就会正常的解释</li></ul></blockquote><h3 id="三、响应式断点和书写位置"><a href="#三、响应式断点和书写位置" class="headerlink" title="三、响应式断点和书写位置"></a>三、响应式断点和书写位置</h3><blockquote><ul><li>当我们需要为不同的屏幕尺寸来设置不同的样式时，我们就需要知道在什么屏幕尺寸下需要做出响应。</li><li>那这些不同的屏幕尺寸，就称为响应式断点(阈值)</li></ul></blockquote><ol><li>响应式断电(阈值)的设定<blockquote><ul><li>在实际的开发中，响应式断点是由公司根据项目来定的。</li><li>不过行业也会有一个标准的参考断点（Breakpoint），这里我们以 Bootstrap 框架内部的断点来给大家做讲解<table><thead><tr><th>屏幕大小</th><th>栅格布局中class名区分</th><th>断点（阈值）</th></tr></thead><tbody><tr><td>超小屏Extra small</td><td>-</td><td>&lt;576px</td></tr><tr><td>小屏 (Small)</td><td>-sm</td><td>576px ~ 768px （含等于）</td></tr><tr><td>中屏 (Medium)</td><td>-md</td><td>768px ~ 992px （含等于）</td></tr><tr><td>大屏 (Large)</td><td>-lg</td><td>992px ~ 1200px（含等于）</td></tr><tr><td>超大屏 (X-Large)</td><td>-xl</td><td>1200px ~ 1400px（含等于）</td></tr><tr><td>超大大屏(XX-Large)</td><td>-xxl</td><td>&gt;1400px</td></tr></tbody></table></li></ul></blockquote></li></ol><blockquote><ul><li>断点并不是完全固定，按上面的要求值来的。而是根据我们所写的项目，在对屏幕做调整时，如果觉得当前效果不符合我们的需求，需要通过设置新的断点来调整，就可以在此添加相应的断点。</li><li>以上断点是 Bootstrap 框架内部的断点，我们可以用来作为我们开发的标准来参考。</li></ul></blockquote><blockquote><pre class=" language-css"><code class="language-css">&lt;style>  <span class="token comment" spellcheck="true">/* 当屏幕宽小于576px时，以下代码生效 */</span>  body &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 当屏幕宽大于等于576px，小于768px时，以下代码生效 */</span>  <span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 576px<span class="token punctuation">)</span> &amp;#123<span class="token punctuation">;</span></span>    body &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> khaki<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 当屏幕宽大于等于768px，小于992px时，以下代码生效 */</span>  <span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span> &amp;#123<span class="token punctuation">;</span></span>    body &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&lt;/style></code></pre><ul><li>因为 css 选择器的权重相同时，写在后面的会覆盖写在前面的。所以不用书写具体的屏幕范围，不过要注意代码书写的位置</li></ul></blockquote><ol start="2"><li>媒体查询的代码书写位置<blockquote><p><strong>媒体查询的代码可以写在 style 标签中</strong></p></blockquote></li></ol><blockquote><p><strong>可以写在单独的 CSS 文件中,通过 link 标签引入</strong></p><ul><li>不过都要写在所有 CSS 样式的代码之后。</li><li>这样就能保证断点生效时，写在媒体查询中的代码能生效，不会被正常的样式所覆盖。</li></ul></blockquote><blockquote><p><strong>不同断点代码写入不同 css 文件中（不推荐）</strong></p><ul><li>通过 link 来引用，在 media 中来设置对应断点</li><li>在满足媒体查询条件时，对应的css文件生效</li></ul><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;a.css&quot; media=&quot;screen and (min-width:600px)&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;b.css&quot; media=&quot;screen and (min-width:1000px)&quot; /&gt;/* a.css文件内容 */body &#123;  background-color: skyblue;&#125;/* b.css文件内内容 */body &#123;  background-color: red;&#125;</code></pre></blockquote><h3 id="四、响应式两种适配方案"><a href="#四、响应式两种适配方案" class="headerlink" title="四、响应式两种适配方案"></a>四、响应式两种适配方案</h3><blockquote><p>在实际的响应式开发中，我们会有两种通用的适配方案</p><ul><li>PC 端优先（先考虑 PC 端，最后再考虑移动端）</li><li>移动端优先（先考虑移动端，最后再考虑 PC 端）</li></ul></blockquote><ol><li><p>PC端优先</p><blockquote><ul><li>从大尺寸开始写，先大后小</li><li>用<code>max-width</code></li></ul></blockquote></li><li><p>移动端优先</p><blockquote><ul><li>从小尺寸开始，先小后大</li><li>用<code>min-width</code></li></ul></blockquote></li></ol><h3 id="五、响应式栅格系统"><a href="#五、响应式栅格系统" class="headerlink" title="五、响应式栅格系统"></a>五、响应式栅格系统</h3><blockquote><p><strong>在实际开发中</strong></p><ul><li>要完美的实现响应式系统或网站的开发，就需要利用响应式栅格系统来帮助我们实现。</li><li>BootStrap 框架实现响应式布局的本质就是他的响应式栅格系统。</li><li>响应式栅格系统是：栅格布局和响应断点+响应式适配方案 3 者结合实现的一套响应式解决方案</li></ul></blockquote><ol><li><p>栅格布局</p><blockquote><ul><li>所谓的栅格布局，你可以简单理解为，要把一个页面或容器（如 div），分成多少份</li><li>然后设置其页面或容器中子元素占对应的份数</li><li>通常一个页面或容器会被分成：12 份，16 份，24 份</li><li>如果将网页（100%）分成 12 份，那对应不同份数所占的比例如下:<table><thead><tr><th>份数</th><th>占总份数的百分比%</th></tr></thead><tbody><tr><td>1</td><td>8.33333333%</td></tr><tr><td>2</td><td>16.6666667%</td></tr><tr><td>3</td><td>25%</td></tr><tr><td>4</td><td>33.33333333%</td></tr><tr><td>5</td><td>41.66666667%</td></tr><tr><td>6</td><td>50%</td></tr><tr><td>7</td><td>58.33333333%</td></tr><tr><td>8</td><td>66.6666667%</td></tr><tr><td>9</td><td>75%</td></tr><tr><td>10</td><td>83.33333333%</td></tr><tr><td>11</td><td>91.66666667%</td></tr><tr><td>12</td><td>100%</td></tr></tbody></table></li></ul></blockquote></li><li><p>栅格系统实现响应式布局</p><blockquote><ul><li>我们说响应式栅格系统是：栅格布局+响应断点+响应式适配方案3者结合实现的一套响应式解决方案</li><li>接下来我们来学习，如何利用前面学到的栅格布局，响应断点，响应式适配方案实现响应式布局。</li><li>我们可以按以下 5 个步骤来操作<ul><li>你打算将页面分成多少份 ？</li><li>确定响应断点有哪些 ？</li><li>确定响应式适配方案。PC端优先还是移动端优先？</li><li>在对应的响应断点下，书写对应的栅格布局样式。</li><li>对着设计稿开发，搭建整个响应式的框架。如果是以移动端优先，则对着移动端设计稿来开发，如果是 PC 端优先，则对着 PC 端设计稿来开发。<blockquote><p>但是在开发前，一定要分清版块的归属问题，也就那些版块是在一个父容器中。</p></blockquote></li></ul></li></ul></blockquote></li></ol><h3 id="五、响应式后台管理系统项目开发"><a href="#五、响应式后台管理系统项目开发" class="headerlink" title="五、响应式后台管理系统项目开发"></a>五、响应式后台管理系统项目开发</h3><blockquote><p><strong>确定栅格系统样式（media.css 样式）</strong></p><ul><li>将页面分成 12 份，确定栅格布局不同份数所点比例</li><li>确定项目对应的断点<ul><li>当视口宽大于 1400px 时，以正常效果显示</li><li>当视口宽 &lt;&#x3D; 1400px 时，左侧菜单缩放到 75px</li><li>当视口宽 &lt;&#x3D; 1300px 时，左侧菜单隐藏</li><li>当视口宽 &lt;&#x3D; 1200px 时，上面一行 4 列，变成 1 行 2 列</li><li>当视口宽 &lt;&#x3D; 992px 时，第二行的一行 2 列变 1 列，最下面的一行 3 列变成 1 行 2 列和 1 行 1 列</li><li>当视口宽 &lt;&#x3D; 768px 时，全部一行一列显示 ，同时上面的导航变成点击下拉菜单形式</li></ul></li><li>确定适配方案，以 PC 端优先</li></ul></blockquote><blockquote><p><strong>注意</strong></p><ul><li>要用怪异盒模型</li><li>echarts图表实现响应式缩放,在引用图表的<code>script</code>标签后面加上</li></ul><pre><code>window.addEventListener(&quot;resize&quot;,function()&#123;  mychart1.resize();&#125;);</code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 响应式开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端开发必备知识</title>
      <link href="/2023/11/30/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/11/30/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="一、什么是移动-Web、PC-web-和-web-App-开发？"><a href="#一、什么是移动-Web、PC-web-和-web-App-开发？" class="headerlink" title="一、什么是移动 Web、PC web 和 web App 开发？"></a>一、什么是移动 Web、PC web 和 web App 开发？</h3><blockquote><p><strong>什么是web开发？</strong></p><ul><li>简单理解为网页开发，主要使用HTML+CSS+Javascript编写，然后代码在浏览器中运行<br><strong>什么是移动 web开发和PC web 开发？</strong></li><li>本质上都是用HTML+CSS+Javascript来编写</li><li>只是移动web开发，代码是在手机、平板等浏览器中运行</li><li>而PC web开发，代码是在PC端浏览器中运行<br>什么是App开发</li><li>APP是application的缩写，指应用程序，一般指手机软件<table><thead><tr><th>APP 开发分类</th><th>说明</th></tr></thead><tbody><tr><td>Native APP</td><td>一般依托于操作系统，有很强的交互，是一个完整的 App，可拓展性强，需要用户下载安装使用。比如：基于操作系统的 IOS 开发和安卓开发</td></tr><tr><td>Web APP</td><td>应用程序在浏览器中运行，称为 Web APP</td></tr><tr><td>Hybrid APP(混合式 APP)</td><td>是<code>Native APP</code>和<code>Web APP</code>的混合体， 同时具有两者的特点。</td></tr></tbody></table></li></ul></blockquote><h3 id="二、移动-Web-与-PC-Web-开发区别？"><a href="#二、移动-Web-与-PC-Web-开发区别？" class="headerlink" title="二、移动 Web 与 PC Web 开发区别？"></a>二、移动 Web 与 PC Web 开发区别？</h3><blockquote><ul><li>移动 Web 与 PC Web <strong>最大的区别在于运行的终端设备不同</strong>。不同终端设备有不同特性，正是这些终端设备的不同特性，造成了移动 web 开发和 PC web 开发的不同。</li><li>具体的不同点有以下4个方面：<ul><li>屏幕大小不同</li><li>网络环境和设备性能不同</li><li>交互方式不同</li><li>兼容性不同</li></ul></li></ul></blockquote><ol><li><p>屏幕大小不同</p><blockquote><ul><li>我们都知道移动端的设备，如手机的屏幕大小相对 PC 端要小很多，所以针对 PC 端的那些布局在移动端肯定就不行了。所以我们需要专门针对移动端来做布局。</li><li>如果直接把 PC 端的网站在移动端打开，整个页面就会被压缩，压缩后就会看不清。  </li><li>常见的屏幕尺寸大小：<a href="http://shijuechuanda.com/screen/index.htm">http://shijuechuanda.com/screen/index.htm</a></li></ul></blockquote></li><li><p>交互方式不同</p><blockquote><ul><li>pc 端主要是用鼠标、键盘来实现交互</li><li>移动端主要是用手指来实现交互，所以我们在学移动端开发时，需要了解移动端的手机触摸事件。</li></ul></blockquote></li><li><p>网络环境和设备性能的不同</p><blockquote><ul><li>移动端的网络环境与 PC 端相比，无论是在网络下载速度还是在流量方面，都要比 PC 端差些。</li><li>PC 端的设备性能要比移动端的设备性能要强很多，所以我们在做移动端开发时，<strong>要更注重性能的优化</strong>，否则可能会带来较差的性能体验。</li></ul></blockquote></li><li><p>兼容性不同</p><blockquote><ul><li>移动端的兼容性要比 PC 端好的多，因为移动端相较 PC 端发展的要晚一些，所以国内的 UC、QQ、百度等手机浏览器都是根据 Webkit 修改过来的内核，所以 html5 的新特性在移动端我们可以放心大胆的使用。<table><thead><tr><th>PC 端常见浏览器</th><th>移动端常见浏览器</th></tr></thead><tbody><tr><td>谷歌浏览器、火狐浏览器、Edge 浏览器、360 浏览器、QQ 浏览器、搜狗浏览器 … 等</td><td>Safari 浏览器、UC 浏览器、QQ 浏览器、欧朋浏览器、百度手机浏览器、360 安全浏览器、谷歌浏览器、搜狗手机浏览器、猎豹浏览器 … 等</td></tr></tbody></table></li></ul></blockquote></li></ol><h3 id="三、什么是像素、分辨率、物理像素、逻辑像素、设备像素比？"><a href="#三、什么是像素、分辨率、物理像素、逻辑像素、设备像素比？" class="headerlink" title="三、什么是像素、分辨率、物理像素、逻辑像素、设备像素比？"></a>三、什么是像素、分辨率、物理像素、逻辑像素、设备像素比？</h3><ol><li>什么是像素<blockquote><ul><li>当我们把一张图片在 PS 放大 240 倍后，我们发现这张图其实是由许许多多的小方格拼凑起来。这一个个的小方格就被定义为一个单位，叫像素。只不过小方格本身很小，所以人肉眼看不出来。</li><li>1 个小方格为 1 像素大小，2 个小方格为 2 像素大小，那 n 个小方格就是 n 像素。</li></ul></blockquote></li></ol><blockquote><p><strong>图标尺寸 n * m 像素</strong></p><ul><li>比如图片大小是200 * 300像素，也就是说该 图片的宽有200个小方格，高有300个小方格， 那该图片一共占200 *300&#x3D;60000个小格子。</li></ul></blockquote><blockquote><p><strong>1像素（1个小方格）多大？</strong></p><ul><li>小方格的大小就是 1 像素，像素就像是厘米或毫米一样被定义好的单位，专门用于电子屏幕上描述图形尺寸的单位。</li><li>但像素不像厘米等长度单位一样有固定大小，像素没有固定大小，1 像素就是一个小方格。<strong>不同的分辨率下</strong>，1 像素（小方格）大小不一样</li></ul></blockquote><ol start="2"><li>什么是分辨率<blockquote><ul><li>各种设备的屏幕尺寸是以英寸为单位的。</li><li>英寸：是一个长度单位，是有固定大小的，1英寸&#x3D;2.54 厘米。</li><li>我们知道屏幕也是一个矩形，按正常我们应该也是用 长度 * 宽度 的形式来描述，为什么会用一个长度单位英寸来描述呢？是因为显示屏幕不是胡乱设计比例的，他是有固定的设计比例，如 16：9、4：3 等，因此屏幕给出<strong>斜对角线的大小</strong>，具体屏幕宽高就可以根据屏幕的设计比例计算出来。<ul><li>所以屏幕尺寸大小为 15.6 英寸，指的是屏幕斜对角线的大小</li></ul></li></ul></blockquote></li></ol><blockquote><p><strong>分辨率与屏幕的关系</strong></p><ul><li>比如屏幕宽有 n 个小方格，高有 m 个小方格，那屏幕的分辨率就是 n * m像素</li><li>屏幕是如何划分小方格？<ul><li>屏幕划分小方格就好比我们画表格一样，横着、竖着加线条，就划分成了一排排的小格子</li></ul></li><li>如何计算此时电脑划分出来的小格子的大小 ？<ul><li>通过屏幕给出的英寸大小，可以计算出屏幕的宽和高的大小</li><li>再通过宽和高及分辨率，就可以计算划出来的小方格的长和宽的大小</li><li>知道小方格的长和宽，就能计算出一个小格子的（面积）大小。</li></ul></li></ul></blockquote><blockquote><p><strong>分辨率大小影响什么？</strong></p><ol><li>分辨率影响图片清淅度，最终影响了我们的视觉</li></ol><ul><li>相同尺寸的屏幕下，分辨率越小，一个小方格(1物理像素)占据的空间越大，格子轮廓越明显，图片就越不清晰，体验感越差</li><li>由此可见，相同尺寸的图片，分辨率越高，图片显示的越清淅。</li></ul><ol start="2"><li>分辨率还影响图片展示效果，最终影响了我们的视觉</li></ol><ul><li>1像素的具体大小在不同的设备上是不一样的，屏幕大小相同，同一张图片:<ul><li>分辨率越高，划分的小格子数越多，1 像素占据的空间就会越小，图片显示出来的大小就越小，但是会越清晰，</li><li>分辨率越低，划分的小格子数越少，1 像素占据的空间就会越大，图片显示出来的大小就越大，但很模糊。</li></ul></li></ul></blockquote><ol start="3"><li>什么是物理像素与逻辑像素、设备像素比<blockquote><p><strong>物理像素（设备像素 dp）</strong></p><ul><li>在设备一生产出来后就确定的像素称作设备物理像素，也叫设备像素(device pixels),简称 dp。也就是我们前面讲到的显示屏幕划分出的物理小格子 ，1 个小格子就是一个物理像素。</li><li>所以尺寸大小一样时，分辨率越大，格子越小，1 个物理像素就越小，图片显示就越清淅。</li><li>设备生产出来后，尺寸是固定的，分辨率通常也是固定的，所以物理像素的大小是生产出来后就确定的，其大小是不能改变的。</li></ul></blockquote></li></ol><blockquote><p><strong>逻辑像素（CSS 像素）（设备独立像素 dip）</strong></p><ul><li>用于表示图片尺寸等，<strong>可时刻改变的像素</strong>称作逻辑像素，也叫设备独立像素(device independent pixels) ，简称 dip</li><li>也就是我们通常说的 CSS 像素，比如100px 、200px等</li><li>浏览器内的一切长度都是以 CSS 像素（逻辑像素）px为单位的。</li><li>为什么说逻辑像素是可以时刻改变的像素呢？<ul><li>是因为1px在屏幕上的具体显示大小，是由其所在的设备的<strong>设备像素比</strong>来决定的。</li></ul></li></ul></blockquote><blockquote><p><strong>设备像素比 (dpr)</strong></p><ul><li>设备像素比(devicePixelRatio)，简称 dpr，是指物理像素与逻辑像素的比例。</li><li>公式：<code>dpr = (在一个方向上)物理像素dp / 逻辑像素dip (没有缩放时)</code></li><li>物理像素dp与逻辑像素dip的显示关系<ul><li>当 dpr&#x3D;1 时，说明物理像素和逻辑像素是 1：1，此时一个物理像素显示一个逻辑像素</li><li>当 dpr&#x3D;2 时，说明物理像素是逻辑像素的 2 倍，此时<strong>2*2&#x3D;4</strong>个物理像素显示 1 个逻辑像素</li></ul></li><li>假设，以下两个手机的屏幕大小一样<ul><li>dpr&#x3D;1 的手机分辨率是2*4像素</li><li>dpr&#x3D;2 的手机分辨率是4*8像素</li></ul></li><li>现在1*1px的图片，在两台设备上显示效果如下：<ul><li>在dpr&#x3D;1 的设备上，则1个物理像素显示一个逻辑像素</li><li>在dpr&#x3D;2 的设备上，则4个物理像素显示一个逻辑像素<blockquote><p>注：</p></blockquote></li></ul></li><li>在一般的电脑上，设备像素是等于逻辑像素的，也就是dpr&#x3D;1.0,高分辨率的电脑上，二者不一定相等，浏览器提供一个接口可以查看二者的关系：</li><li>在 console 控制台输入 window.devicePixelRatio属性查看</li><li>dpr值，厂商在设备出厂时就已经进行设置，并且禁止用户进行更改</li></ul></blockquote><blockquote><p><strong>图片缩放，是在改变什么？</strong></p><ul><li>图片的缩放是在改变图片的<strong>逻辑像素</strong></li><li>一般情况下点开图片查看时是将图片的一个小格子(逻辑像素)对应到一个显示屏幕的小格子（物理像素）。</li><li>但图片在被放大或者缩小后，图片的像素小格子便不再是一一对应于显示屏幕的分辨率划分出的物理小格子了。<ul><li>图片放大 3 倍，其逻辑像素点也增为原来了3倍，此时 1 个逻辑像素占一个物理像素，但是因为逻辑像素为原来的 3 倍，那对应占的物理像素点也是原来的3倍。</li><li>此时相当于原来的一个图片小格子就占据3个物理小格子大小显示，因此图片就看起来放大了，甚至超出屏幕大小。</li><li>图片缩小到 0.5，则一个图片小格子就占据半个物理小格子，看起来就缩小了。</li></ul></li></ul></blockquote><ol><li><p>为什么要有物理像素和逻辑像素之分？</p><blockquote><ul><li>为什么不用物理像素表示图片的大小<ul><li>因为两个电脑尺寸完全一样，但分辨率不一样，看到的图片大小差别很大，这个体验非常不好。</li></ul></li><li>如果两台电脑的屏幕尺寸完全一样，一个分辨率是<code>1920 *1080</code>, 一个是<code>960 *540</code>,那么二者同时放一个<code>300* 300</code>的物理像素大小的图片，结果会怎么样？<ul><li>在高分辨率<code>1920 *1080</code>下1像素（小方格）要比低分辨率<code>960 *540</code> 1像素（小方格）要小很多，所以在 1920 *1080下看到的图片会很小，在960 *540 下看到的图片会很大。</li></ul></li></ul></blockquote></li><li><p>如何让相同尺寸屏幕下，不同分辨率，看同一图片效果差别不大？</p><blockquote><ul><li>实现的方法就是提高那些分辨率很高但是屏幕尺寸很小的设备的 dpr</li><li>分辨率很高，如果屏幕尺寸很小，则 1 个物理像素点会很小，那图片显示就会很小，提高 dpr 后，则 1px 逻辑像素会占用更多的设备像素点，这样图片看起来会更大些</li><li>例如 300 * 300 逻辑像素大小的图片，有屏幕尺寸相同的两个设备 A &#x2F; B<ul><li>A 的分辨率为 1920 * 1080，设置 A 的 dpr &#x3D;2，从而得到 4 个物理像素显示 1 个逻辑像素</li><li>B 的分辨率是 960 * 540 ，设置 B 的dpr &#x3D;1，从而得到 1 个物理像素显示 1 个逻辑像素</li><li>这样同一个图片在 B 设备中一个像素小格子占一个物理格子，在 A 设备中，因为 A 的物理小格子小，那就 4 个物理小格子显示 1 个逻辑像素，这样呈现的两个图片大小就看起来就一样大的了。<blockquote><p>这就是为什么相同尺寸的屏幕，其分辨率越高，对应的 dpr 往往会越大。</p></blockquote></li></ul></li></ul></blockquote></li><li><p>什么是标清屏和高清屏？</p><blockquote><ul><li>当设备的 dpr&#x3D;1 时，这个设备可以称为是标清屏</li><li>当设备的 dpr&gt;1 时，这个设备可以称为是高清屏</li><li>目前高清屏的 dpr 通常为 2，3 等。<blockquote><p>相同尺寸的屏幕，其分辨率越高，对应的 dpr 往往会越大,图像越高清</p></blockquote></li></ul></blockquote></li><li><p>移动开发为什么要使用 2 倍或 3 倍图？</p><blockquote><ul><li>思考题：标清屏中，1 个逻辑像素用一个物理像素显示，图片设计的效果正好和展示效果一样，在高清屏 dpr&#x3D;2 中，1 个逻辑像素用 4 个物理像素显示，图片到底是更清淅了，还是更模糊了？<ul><li>在高清屏中 1 个 CSS 像素点实际上由 4 个物理像素展示，1 分成 4，显然不够分，只能颜色近似选取,所以，图片感觉就会变的模糊了</li></ul></li><li>为了让移动端能够显示高清图效果，所以我们在设计的时候<ul><li>针对 dpr &#x3D; 2 的高清屏，专门设计 2 倍图来开发</li><li>针对 dpr &#x3D; 3 的高清屏，专门设计 3 倍图来开发<blockquote><p>比如: iPhone SE 的分辨率 750 * 1334，dpr &#x3D; 2，在水平方向上能显示的 CSS 像素为 375px,因此我们在设计稿时，就需要设计 2 倍图，即设计稿的宽为 750px，然后在实际开发时，按 750&#x2F;2 &#x3D; 375px 大小来开发。</p></blockquote></li></ul></li></ul></blockquote></li></ol><h3 id="四、viewport-视口设置"><a href="#四、viewport-视口设置" class="headerlink" title="四、viewport 视口设置"></a>四、viewport 视口设置</h3><ol><li><p>在 pc 端和移动端，网页中 html,body 的默认宽是多少 ？</p><blockquote><ul><li>pc 端（分辨率为<code>1920 * 1080</code>）下<ul><li>html 的默认宽为浏览器宽<code>1920px</code></li><li>body为块级元素，在设置 <code>margin: 0;</code>时，body的宽等于html宽<code>1920px</code><blockquote><p>在 PC 端，一个物理像素就等于 1 个 px 逻辑像素</p></blockquote></li></ul></li><li>移动端<ul><li>大部分手机浏览器的宽为<code>980px</code></li><li>手机端网页中 html 的默认宽等于浏览器宽为<code>980px</code></li><li>body 块级元素，在设置<code>margin: 0;</code>时，body的宽等于html 宽等于<code>980px</code></li></ul></li></ul></blockquote></li><li><p>如果把一个 PC 端的网站，在手机端显示打开，会看到什么样的效果？</p><blockquote><ul><li>当我们把 PC 端布局的页面(内容宽为 980px)，直接放在移动端来显示，会发现整体被压缩变小</li><li>原因：因为移动端的浏览器默认宽为 980px，而要把浏览器整个显示在 <code>iPhone SE</code>的屏幕下，而iPhone SE的可视宽只有375px，所以整个浏览器就会被压缩（缩放）到375px大小。则浏览器中的内容也要等比例压缩到到宽为 375px 的屏幕里。<ul><li>如果电脑端网站的宽<code>&gt; 980px</code>，则在移动端会出现水平滚动条，拖动滚动条可查看全部内容</li><li>如果电脑端网站的宽<code>&lt; 980px</code>，则在移动端并不能全屏展示，会在水平上留有空白</li></ul></li></ul></blockquote></li><li><p>为什么移动端 body 的默认宽为 980px</p><blockquote><ul><li>很早之前，电脑的分辨率比较低，写一个电脑端的网站基本都是在980px以内。为了让980px的网站可以在手机完美显示出来，浏览器开发商把浏览器的默认宽设置为了980px，也就是我们后面要提到的<strong>布局视口宽</strong>。</li><li>移动端是在这个布局视口来布局网页，所以移动端网页的html默认宽为980px，body是块级元素，在设置margin: 0;时，其宽会等于 html 的宽980px。</li><li>但是 PC 端的网页在移动那么小的屏幕里看时，会被压缩，所以需要通过双指来放大网页才能看得更清楚，本质上体验还是没有达到最佳状态。</li><li><strong>那如何才能让手机端看到的网页是最佳的状态呢？</strong><ul><li>那肯定要专门针对移动端的尺寸大小来设计和布局网页。但是移动端尺寸五花八门，没有办法把浏览器的大小固定到某个尺寸，这就有了接下来提出的viewport 视口的概念。</li></ul></li></ul></blockquote></li><li><p>视口分类</p><blockquote><p>在 PC 端，视口指的是浏览器的可视区域，其宽度和浏览器窗口的宽度保持一致。</p><ul><li>移动端涉及三个视口：布局视口(Layout Viewport)、视觉视口(Visual Viewport)、理想视口(Ideal Viewport)</li></ul></blockquote></li></ol><blockquote><p><strong>布局视口(Layout Viewport)</strong></p><ul><li>布局视口可以简单理解为移动端网页的宽度（浏览器宽），也就是我们在上面提到的 html、body 的默认宽为 980px。</li><li>默认我们是在这宽为 980px 的容器中来布局网页。<img src="布局视口.png"></li></ul></blockquote><blockquote><p><strong>视觉视口(Visual Viewport)</strong></p><ul><li>用户在默认情况下能看到的网站的区域</li><li>默认情况下浏览器大小会被压缩来适应视觉视口大小，所以默认情况下看到的内容大小要比实际小很多<img src="视觉视口.png"></li></ul></blockquote><blockquote><p><strong>理想视口(Ideal Viewport)</strong></p><ul><li>当<code>布局视口 = 视觉视口</code>时，就是我们期待的理想视口。</li><li>理想视口下，浏览器大小与视觉视口大小相等，内容不会被压缩）<img src="理想视口.png"></li></ul></blockquote><blockquote><ul><li>适配代码：<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</code></li><li>width&#x3D;device-width 表示布局视口&#x3D;设备视口（视觉视口）</li></ul></blockquote><ol start="5"><li>viewport的设置<blockquote><p>为了让移动端能正常的显示网页，我们通常会在网页的<head>标签中添加如下代码</p><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;/&gt;</code></pre><table><thead><tr><th>属性</th><th>值</th></tr></thead><tbody><tr><td>width</td><td>设置布局视口的宽</td></tr><tr><td>当 width&#x3D;device-width 时，即布局视口&#x3D;视觉视口，也就达到了我们想要的理想视口</td><td></td></tr><tr><td>initial-scale</td><td>设置页面的初始缩放值，为一个数字，可以带小数；值为 1，表示不缩放</td></tr><tr><td>minimum-scale</td><td>允许用户的最小缩放值，为一个数字，可以带小数</td></tr><tr><td>maximum-scale</td><td>允许用户的最大缩放值，为一个数字，可以带小数</td></tr><tr><td>height</td><td>设置 layout viewport 的高度，这个属性对我们并不重要，很少使用</td></tr><tr><td>user-scalable</td><td>是否允许用户进行缩放，值为”no”或”yes”, no 代表不允许，yes 代表允许</td></tr></tbody></table></blockquote></li></ol><blockquote><pre><code>/*JS 获取视口宽 */document.documentElement.clientWidth/* 获取屏幕尺寸 */screen.width</code></pre></blockquote><h3 id="五、真机查看"><a href="#五、真机查看" class="headerlink" title="五、真机查看"></a>五、真机查看</h3><ol><li><p>创建本地服务器</p><blockquote><p>通过 VSCode 来创建本地服务器，在VSCode通过<code>Open with Live Server</code>打开网页，在地址栏中就能看到类似以下的地址：<a href="http://127.0.0.1:5500/demo.html">http://127.0.0.1:5500/demo.html</a></p></blockquote></li><li><p>查看本机IP地址</p><blockquote><ul><li>在电脑的右下击输入 cmd,然后回车，就可以进到电脑的命令黑窗口</li><li>在命令黑窗口，输入 ipconfig ，然后回车，就能看到 IPv4 地址</li><li>我们将本地服务地址：<a href="http://127.0.0.1:5500/demo.html">http://127.0.0.1:5500/demo.html</a> 中的 <code>127.0.0.1</code>替换成 192.168.0.19(IPv4 地址)</li><li>修改完成后的最终地址：<a href="http://192.168.0.19:5500/demo.html">http://192.168.0.19:5500/demo.html</a> ，然后回车看在电脑端是否能正常访问到。</li></ul></blockquote></li><li><p>关闭防火墙</p><blockquote><ul><li>在电脑左下角，搜索 “ 控制面板 ” ，点击控制面板进入</li><li>点击系统和安全，进入</li><li>点击 windows Defender 防火墙</li><li>点击左边的启用或关闭 Windows Defender 防火墙</li><li>点击关闭防火墙</li></ul></blockquote></li><li><p>手机端访问地址</p><blockquote><ul><li>防火墙关闭后，要确保手机和电脑是在同一网络中<ul><li>方法一：电脑开热点，手机连电脑热点</li><li>方法二：电脑手机连同一无线网</li></ul></li><li>网络环境设置好了后，接下来只需在在手机端防问 <a href="http://192.168.0.19:5500/demo.html">http://192.168.0.19:5500/demo.html</a> 就可以正常访问了。</li><li>也可以把地址在草料网生成对应的二维码，手机直接扫二维码访问。</li></ul></blockquote></li></ol><h3 id="六、移动开发常用的单位"><a href="#六、移动开发常用的单位" class="headerlink" title="六、移动开发常用的单位"></a>六、移动开发常用的单位</h3><table><thead><tr><th>单位</th><th>说明</th></tr></thead><tbody><tr><td>px</td><td>绝对单位，当需要设置固定宽高时可用，也可用于设置字体大小</td></tr><tr><td>%</td><td>相对单位，可用来设置元素宽度，流体布局中会用到</td></tr><tr><td>em</td><td>相对单位，设置<strong>字体大小</strong>时，1em&#x3D;父元素字体大小；<strong>设置其它，比如宽、高等</strong>，1em&#x3D;自身字体的大小，比如之前讲的首行缩进。一般用来控制首行缩进，不用来布局</td></tr><tr><td>rem</td><td>rem(root element) 是相对于 html 的 font-size 的字体大小。1rem&#x3D;根元素（html）的字体大小，rem主要是用来做移动端布局</td></tr><tr><td>vw&#x2F;vh</td><td>相对单位，是视口单位，用来移动端布局，vw 用的多，vh 基本不用,1vw&#x3D;视口<strong>宽度</strong>的 1%，1vh&#x3D;视口<strong>高度</strong>的 1%</td></tr><tr><td>vmax</td><td>当前 vw 和 vh 中较大的一个值（竖屏时,100vmax&#x3D;100vh）</td></tr><tr><td>vmin</td><td>当前 vw 和 vh 中较小的一个值（竖屏时，100vmax&#x3D;100vw）</td></tr></tbody></table><h2 id="移动WebApp项目开发常用技术及标准、规范和最佳实践"><a href="#移动WebApp项目开发常用技术及标准、规范和最佳实践" class="headerlink" title="移动WebApp项目开发常用技术及标准、规范和最佳实践"></a>移动WebApp项目开发常用技术及标准、规范和最佳实践</h2><h3 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h3><ol><li>移动端与PC端有哪些不同？(上面有写)<blockquote><ul><li>屏幕大小不同</li><li>交互方式不同</li><li>网络环境和设备性能不同</li><li>兼容性不同</li></ul></blockquote></li></ol><blockquote><ul><li>因为屏幕大小的不同，所以造成我们在实际的移动端布局时，不能和 PC 端一样采用固定大小来布局，而需要自适应屏幕的宽。</li><li>移动端屏幕的常见可视区大小为<code>320-480px之间</code>，也就意味着我们在实际开发代码时，我们的页面宽在320-480px之间。</li><li>所以移动端开发，元素的宽肯定不能用px绝对定位写死，我们得采用<strong>相对单位</strong>来做开发。</li></ul></blockquote><ol start="2"><li><p>移动端常见的布局处理技术</p><blockquote><p><strong>移动端常见的5种布局技术如下：</strong></p><ul><li>流体布局</li><li>rem 和 vw 布局</li><li>响应式布局</li><li>Flex 弹性布局（工具）</li><li>Grid 网格布局（工具）<blockquote><ul><li>其中的流体布局、rem&#x2F;vw 布局、响应式布局是可以<strong>独立实现</strong>移动端页面的开发</li><li>Flex 弹性和 Grid 网格布局，并不能独立实现移动端布局的开发，他们更像是<strong>工具</strong>，配合流体布局、rem&#x2F;vw 布局、响应式布局来实现移动端页面的开发。</li></ul></blockquote></li></ul></blockquote></li><li><p>移动设计稿的标准与规范</p><blockquote><ul><li>京东视觉规范.pdf</li></ul></blockquote></li></ol><h3 id="二、流体布局"><a href="#二、流体布局" class="headerlink" title="二、流体布局"></a>二、流体布局</h3><blockquote><p>所谓的流体布局，也叫百分比%布局，本质上就是通过**%（百分比）<strong>和</strong>怪异盒子模型<strong>结合来实现</strong>元素的宽**相对视口缩放</p></blockquote><ol><li><p>搭建本项目的目录结构</p><blockquote><ul><li>首先新建项目文件夹 WebApp</li><li>在 WebApp 中新建 css、js、images 文件夹，分别用来存放 CSS、JS 文件和图片内容</li><li>在 CSS 中新建 reset.css、global.css、index.css 文件，分别用来存放重置默认样式、全局通用样式，首页样式</li><li>reset.css参考PC端重置样式<br>其它相关重要的重置样式介绍</li></ul><pre><code>/* 去掉点击的高亮显示效果 */-webkit-tap-highlight-color: transparent;/* 在移动端浏览器默认的外观在ios上加上这个属性才能给按扭和输入框自定义样式 */-webkit-appearance: none;/* 禁用长按页面时的弹出菜单 */img,a &#123; -webkit-touch-callout: none;&#125;/* 表单会有外轮廓 */input &#123; outline: none;&#125;/* 去掉图片下面的空隙 */vertical-align: top;</code></pre></blockquote></li><li><p>了解设计稿的整体标准和规范</p><blockquote><ul><li>将设计稿中的通用样式写在global.css文件中</li></ul></blockquote></li><li><p>新建 index.html 网页，进行首页开发</p><blockquote><ul><li>在当前根目录下新建<code>index.html</code>网页</li><li>做好viewport视口配置<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;</code></li><li>引用相关的 CSS 文件，注意引入文件的顺序</li></ul><pre><code>/* 重置样式 */css代码.../* 网站通用布局 */css代码.../* 通用模块 */css代码.../* 通用元件 */css代码.../* 通用响应式系统 */css代码...</code></pre></blockquote></li><li><p>网站整体（html）结构划分</p></li><li><p>每个版块开发</p><blockquote><ul><li>流体布局(%百分比 + 怪异盒子模型布局)：整个页面中会用到的所有元素，在最开始都需要设置为怪异盒子模型 。</li><li>由于一开始，我们并不清楚，页面可能会用到那些html元素，所以我们一开始可以用<code>*</code>来处理，等页面开发完，再把<code>*</code>换成对应的html标签。</li></ul></blockquote></li><li><p>iOS下tabbar底部留白与黑线遮挡问题</p><blockquote><p>要解决 IOS 下 tabbar 底部留白问题，我们需要先了解两个概念，安全区域和刘海区，案例如下：</p><pre><code>&lt;style&gt; html, body &#123;   margin: 0; &#125; .tabbar &#123;   width: 100%;   height: 100px;   background-color: red;   position: fixed;   z-index: 222;   bottom: 0; &#125;&lt;/style&gt;&lt;body&gt; &lt;footer class=&quot;tabbar&quot;&gt;&lt;/footer&gt;&lt;/body&gt;</code></pre><img src="安全区与刘海区.png">- 页面默认填充的是安全区域的高度，并不包括刘海区</blockquote></li></ol><blockquote><p><strong>那如何让页面高度填充到刘海区呢？</strong></p><ul><li>在viewport中添加viewport-fit&#x3D;cover</li></ul><pre><code>&lt;meta  name=&quot;viewport&quot;  content=&quot;width=device-width,viewport-fit=cover,initial-scale=1.0&quot;/&gt;`</code></pre></blockquote><blockquote><p><strong>而高度填充到刘海区后，tabbar的内容就会被底下的黑线给遮挡一小部分</strong></p><ul><li>方法一：<ul><li>添加以下代码的元素，不能是怪异盒子模型，否则元素自身高度会减少</li></ul></li></ul><pre><code>/* 兼容 IOS&lt;11.2 */padding-bottom: constant(safe-area-inset-bottom);/* 兼容 IOS&gt;11.2 */padding-bottom: env(safe-area-inset-bottom);</code></pre><ul><li>方法二：</li></ul><pre><code>/* 兼容 IOS&gt;11.2 */height: calc(50px+ constant(safe-area-inset-bottom));/* 兼容 IOS&gt;11.2 */height: calc(50px + env(safe-area-inset-bottom));</code></pre><blockquote><ul><li>100px 是 tabbar 原来的高度 </li><li>在实际开发中，我们一般是先 constant，再 env</li></ul></blockquote><ul><li>针对其它一些机型，不支持上面两种写法的，可以选择用CSS的<code>@supports</code></li></ul><pre><code>@supports not (constant(safe-area-inset-bottom)) &#123;  .tabbar &#123;    padding-bottom: 30px;  &#125;&#125;</code></pre></blockquote><ol start="7"><li>流体布局的布局思路与缺陷<blockquote><p><strong>（1） 流体布局思路</strong></p><ul><li>通过计算每个子元素占容器的比例，来平分父容器的整体大小。</li><li>所有子元素宽的百分比% 加起来要等于 100%。</li><li>然后通过给子元素设置对应的内边距来实现元素间的空隙。</li><li>为了保证给子元素添加内边距实现空隙时，不会造成元素宽度变宽，所有元素都设为 box-sizing: border-box;</li></ul></blockquote></li></ol><blockquote><p><strong>（2） 流体布局缺陷</strong></p><ul><li>只能实现图片和容器的宽高等比缩放，没有办法实现间距，字体大小的等比缩放</li><li>如果想实现对应的字体和间距在不同尺寸下，有所变化，可以与@media媒体查询结合来实现微调。</li></ul></blockquote><ol start="8"><li>从项目中学到的：<blockquote><ul><li><code>padding-bottom:100%;</code>：使高度等于宽度，宽度不包括<code>padding</code></li><li>页面缩放时，图片等比缩放&#x2F;避免图片尺寸不一：<ul><li>把图片的父盒子a标签改成块级元素，用<code>padding-bottom</code>固定宽高比例</li><li>使图片绝对定位于a标签，<code>top=0;left=0;</code>宽高100%,使用<code>object:cover;</code>等比缩放尺寸不一的图片；</li></ul></li><li>用@media实现文字在界面放大到一定宽度后的字体放大，响应式</li><li>流式布局因为是用百分比实现的，所以子元素所占的总百分比一定是百分之百，也就是把父元素全部分完；子元素之间的间隙，用padding实现，不能用margin</li><li>怪异盒模型下文字垂直居中的问题<ul><li>文字行高为18px,有1px边框时，标签行高就为20px，<code>line-height:18px</code>，不能惯性的设置为<code>line-height:20px</code>。</li></ul></li><li>媒体查询代码一定要放在样式的最后面</li><li>底部的tabbar导航的层级是最高的，并且内容区底部要设置padding≥tabbar的高度</li></ul></blockquote></li></ol><h3 id="二、移动端rem布局原理"><a href="#二、移动端rem布局原理" class="headerlink" title="二、移动端rem布局原理"></a>二、移动端rem布局原理</h3><ol><li><p>rem实现适配的原理</p><blockquote><p>假设我们现在要实现 750 * 400px 的 div，在 750px 宽的设备下，改用 rem 单位实现等比展现，那我们的 css 代码如何写呢 ？<br>假设此时1rem &#x3D; 10px，则对应 CSS 样式如下：</p><pre><code>div &#123;  /* 相当于将整个页面分成 75份  每一份大小为10px */  width: 75rem;  height: 40rem;&#125;</code></pre><p>如果以上 CSS 代码不变（将页面分成 75 份），要实现在不同大小屏幕上能等比缩放，我们来看下，对应的 rem 要设置为多少？</p><table><thead><tr><th>设备可视宽</th><th>750px</th><th>375px</th><th>540px</th></tr></thead><tbody><tr><td>1rem</td><td>大小</td><td>10px</td><td>5px</td></tr></tbody></table><ul><li>所以我们要用 rem 来开发移动端之前，需要思考，先将页面分成多少份？然后通过以下公式</li><li><code>1rem = 设备可视宽 / 对应份数</code></li><li>得到不同设备下 <code>1rem</code> 的大小<blockquote><p>在实际开发中，不同尺寸的手机屏幕下 1rem 的大小，是通过 js 来动态获取<strong>当前设备可视宽&#x2F;对应份数来实现</strong></p></blockquote></li></ul></blockquote></li><li><p>JS 动态实现不同设备下 1rem 的大小</p><blockquote><p>1rem&#x3D;（html）中 font-size 的大小，则我们只需要动态修改 html 的 font-size 的大小就可以</p></blockquote></li><li><p>px 单位如何转换为 rem</p><blockquote><p>在实际开发的时候，我们是以 750px 的设计稿为标准来开发的</p><ul><li>现在假设我将页面分成 10 份，那<code>1rem = 750px / 10 = 75px</code></li><li>那对应的 px 单位，转换成对应的 rem 单，计算公式：<code>?rem = 元素对应的px单位大小 / 1rem 大小</code></li><li>实际开发中我们并不会手动将px转换成对应rem单位，我们会用vscode的 <code>px to rem</code>插件来实现</li></ul></blockquote></li><li><p>px to rem 插件使用</p><blockquote><ul><li>参数配置：修改扩展设置，填写1rem的大小</li><li>快捷键：<code>alt+z</code></li><li>回到 html 页面，ctrl+A 选中所有 CSS 样式，然后按 Alt+Z，就会自动将 px 转成 rem 单位。</li></ul></blockquote></li><li><p>利用 rem 实现元素宽高等比缩放</p><blockquote><ul><li>将页面分成 10 份，通过 js 来实现不同视口下 1rem 的大小</li><li>利用 px to rem 插件，将 px 单位转换成对应 rem 单位</li><li>px to rem 插件中，1rem 大小设置为 75 （以 750px 设计稿开发）</li></ul></blockquote></li><li><p>总结：实际开发如何用 rem 做适配</p><blockquote><p>在实际开发中，我们会按以下步骤来实现开发</p><ul><li>1、要求设计师以 750px 宽，来设计移动端的设计稿；</li><li>2、我们按正常的 750px 的设计稿，以 px 单位来开发；</li><li>3、我们会假定将页面分成对应的份数，然后求得不同份数下的 1rem 的大小；<ul><li>如果在 750px 设备下，将页面分成 75 份，则 html 的 font-size 大小&#x3D;设备可视宽 (750) &#x2F; 75 &#x3D; 10px</li><li>如果在 750px 设备下，将页面分成 10 份，则 html 的 font-size 大小&#x3D;设备可视宽 (750) &#x2F; 10 &#x3D; 75px</li></ul></li><li>4、将 px 单位转换为对应的 rem 单位<ul><li>将 px 像素转换 rem 单,公式：?rem &#x3D; px值 &#x2F; 1rem大小得到最对应 rem 单位值</li><li>我们并不会手动一个一个去计算，而是利用 vscode 中的插件px to rem一次搞定</li><li>假定将页面分成 75 份，那就把px to rem插件中对应 1rem 大小设为 10</li><li>假定将页面分成 10 份，那就把px to rem插件中对应 1rem 大小设为 75</li><li>最后切换到 CSS 代码，ctrl+A选中所有代码，然后Alt+Z之后，就会自动把所有px单位，转换成对应vw单位。<blockquote><p>在实际开发中，我们是以 750px 的设计稿来开发，假定将页面分成 10 份，每 1rem &#x3D; 75px</p></blockquote></li></ul></li></ul></blockquote></li></ol><h3 id="四、移动端vw原理"><a href="#四、移动端vw原理" class="headerlink" title="四、移动端vw原理"></a>四、移动端vw原理</h3><ol><li><p>vw 的适配原理</p><blockquote><p>我们知道 100vw &#x3D; 视口宽，相当于把整个屏幕分成了 100 份，所以不同屏幕尺寸下，1vw 的大小如下</p><table><thead><tr><th>设备可视宽（屏幕宽）</th><th>1vw 大小</th></tr></thead><tbody><tr><td>750px</td><td>7.5px</td></tr><tr><td>680px</td><td>6.8px</td></tr><tr><td>480px</td><td>4.8px</td></tr><tr><td>375px</td><td>3.75px</td></tr></tbody></table><ul><li>上面表格中，不同屏幕尺寸下 1vw 的大小，不需要我们手动或通过 js 来计算，而是<strong>浏览自动会帮我转换</strong></li><li>其实你可以理解，如果用 rem 来实现，把页面分 100 份，不同屏幕下 1rem 的大小与对应的 1vw 的大小时一样。</li><li>唯一的区别，<code>1vw</code> 的大小是<strong>浏览器自动转换</strong>，而 <code>1rem</code> 的大小，需要通过<strong>js获取屏幕大小&#x2F;100</strong>来得到。</li></ul></blockquote></li><li><p>px 如何转换成对应 vw 单位</p><blockquote><p>我们同样以 750px 的设计稿为例，那 <code>1vw = 7.5px</code> ，则转换成对应 vw 单位，公式如下：</p><ul><li><code>? vw = 元素 px 大小 / 7.5</code></li></ul></blockquote></li><li><p>插件</p><blockquote><ul><li>我们不需要一个个手动将px转成vw，我们可以借助VScode的插件<code>px to vw</code>来实现。</li><li>px to vw的使用方法和上面讲到的px to rem是一样，唯 一的区别，就是在扩展设置时不一样，填写的是&#x3D;&#x3D;视口宽&#x3D;&#x3D;，而不是1vw的大小</li></ul></blockquote></li><li><p>实际开发如何用 vw 做适配</p><blockquote><p>在实际开发中，我们会按以下步骤来实现开发</p><ul><li>1、要求设计师以 750px 宽，来设计移动端的设计稿</li><li>2、我们按正常的 750px 的设计稿，以 px 单位来开发</li><li>3、将 px 单位转换为对应的 vw 单位<ul><li>将 px 像素转换 vw 单位，对应公式：?vw &#x3D; px值 &#x2F; 7.5</li><li>我们并不会手动一个一个去计算，而是利用 vscode 中的插件px to vw一次搞定</li><li>在 VSCode 中安装 px to vw 软件中，然后将“扩展设置” 中 Viewport Width 值设为 750</li><li>切换到 CSS 代码，ctrl+A选中所有代码，然后Alt+Z之后，就会自动把所有 px 单位，转换成对应 vw 单位</li></ul></li></ul></blockquote></li></ol><h3 id="五、移动端开发常见问题"><a href="#五、移动端开发常见问题" class="headerlink" title="五、移动端开发常见问题"></a>五、移动端开发常见问题</h3><ol><li><p>图片缩放</p><blockquote><p>效果：图片填充满当前区块，同时<strong>等比</strong>裁剪，<strong>居中显示</strong>在当前区块中</p><ul><li>在流体布局中<ul><li>父盒子利用<code>padding-bottom</code>保持宽高比</li><li>子盒子宽高100%+<code>object-fit:cover;</code></li></ul></li><li>在其他布局中<ul><li>父盒子宽高使用rem&#x2F;vw</li><li>子盒子宽高100%+<code>object-fit:cover;</code><br><strong>处理这个问题的意义</strong><br>在实际的网站上线后，数据都是从后台读取的，用户在上传图片尺寸时，并不一定会按照设计师设计的比例来上传，这样就会造成图片上传后，大小不一样。</li></ul></li><li>图片高度过小，会在下面留下空白，</li><li>图片高度过大，会有一部分下面的内容看不到</li><li>我们实际在设计一张图时，重要的内容会在中间显示，所以最理想的效果是让图片能水平垂直居中于容器中</li></ul></blockquote></li><li><p>背景图缩放</p><blockquote><ul><li>当背景图片的宽高比与容器的宽高比不一样时</li><li>我们希望不管容器宽高如何缩放，图片一直填充整个容器，然后水平垂直居中显示</li></ul><pre><code>&lt;style&gt;  body &#123; margin: 0;  &#125;  .box &#123; width: 100vw; height: 31.467vw; /* 背景图片  不重复  水平垂直居中显示 */ background: url(./images/banner1-@2x.png) no-repeat center; /* 背景图填充整个容器 */ background-size: cover;  &#125;&lt;/style&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre></blockquote></li><li><p>精灵图使用</p><blockquote><ul><li>精灵图采用的是 2 倍图</li><li>所以在处理精灵图时，我们需要通过 background-size: 50%; ，来将背景图片大小缩小一半</li><li>测量尺寸时，也需要按一半的大小来测量</li></ul></blockquote></li><li><p>元素正方形缩放</p><blockquote><p>元素在缩放过程中，元素的高始终等于宽，同时元素中的内容在元素中水平垂直居中</p><ul><li>利用padding-bottom:100%;来实现元素的高与元素宽一样大小，同时等比缩放</li><li>利用absolute 绝对定位与transform实现子项在容器中水平垂直居中</li></ul></blockquote></li></ol><blockquote><blockquote><p><strong>图片缩放总结</strong></p></blockquote><ul><li>只要涉及到图片缩放问题，最好将图片放在一个 html 标签中，然后设置 html 标签的宽高</li><li>html 标签的宽高，就是我们希望图片等比例缩放的展示区大小</li></ul></blockquote><ol start="5"><li>经典的 1 像素问题<blockquote><p>在面试中，经常会问到移动端 1px 的处理问题，那到底 1px 问题，是个什么问题呢 ？<br><strong>何为 1 像素问题</strong><br>为了更好的理解 1 像素问题，我们从两个方面来展开讲解</p><ul><li>PSD 设计稿</li><li>1px 实际显示的大小</li></ul></blockquote></li></ol><blockquote><p><strong>PSD 设计稿</strong></p><ul><li>我们的设计稿是以 750px 宽来设计的，而我们实际开发时，代码是按 375px 来的。</li><li>在 750px 设计稿中的 1px，按我们实际的开发代码来说，要折半，折成 0.5px 才对。</li><li><strong>但是</strong>不同手机上，不同浏览器对小数的处理是不一样的</li><li><code>0.5px</code>在一些老的 IOS 和 Android 设备上不支持，他会把<code>低于0.5px</code>当成0来处理，<code>&gt;= 0.5px</code>当成1px来显示。</li><li>IOS上会: 把<code>&gt;= 0.75px</code> 的当作 1px 来处理 ，<code>&lt;0.75</code> 当成0.5px来处理,<code>&lt; 0.5px</code>当成0来处理</li><li>而且IOS上，用 <code>height: 1px</code> 来代替 <code>border-bottom: 1px solid red;</code>测出的效果不同</li><li>具体不同的手机上，效果不一样，具体以真机测试为主</li><li>所以直接把代码折半，设置成 0.5px 显然是达不到目的。</li></ul></blockquote><blockquote><p><strong>1px 实际显示的大小</strong></p><ul><li>我们都知道 1px 在 dpr 不同时，其显示的大小不同</li><li>而在设计师眼中，他设计的 1px，就是当前设备能显示的最小方格（最细的那个线），也就是物理像素中的 1 像素。</li><li>因此， 1px 像素问题，本质上不是问题，如果公司觉得没有必要，也就不用处理。</li><li>如果公司认为就是要用设备能显示的最细的那个小方格显示，那我们就要处理这个问题</li></ul></blockquote><blockquote><p><strong>1px 像素解决方案</strong><br>关于 1px 像素的处理方案有很多，这里我们提供一个最优的解决方案给到大家 transform+伪元素来实现<br><strong>实现原理：</strong></p><ul><li>利用伪元素来绘制 1px 的线条,然后利用定位，把线条放在对应位置</li><li>利用 media 查询判断不同的设备像素比对线条进行缩放</li></ul><pre><code>&lt;style&gt;  .box &#123;    height: 50px;    margin: px auto;    position: relative;  &#125;  .border-1px::before &#123;    position: absolute;    content: &quot;&quot;;    height: 1px;    width: 100%;    background-color: red;    bottom: 0;    /* transform: scaleY(0.5); */    /* 变换原点 */    transform-origin: 50% 0%;  &#125;  /* dpr=2，需要缩放一半，即0.5 */  @media only screen and (-webkit-min-device-pixel-ratio: 2) &#123;    .border-1px:before &#123;      transform: scaleY(0.5);    &#125;  &#125;  /* dpr=3，需要缩放到1/3，即0.33 */  @media only screen and (-webkit-min-device-pixel-ratio: 3) &#123;    .border-1px:before &#123;      transform: scaleY(0.33);    &#125;  &#125;&lt;/style&gt;&lt;body&gt; &lt;div class=&quot;box border-1px&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre></blockquote><blockquote><blockquote><p>当然，也可以通过 js 来判断 dpr,然后给元素添加对应的 Class 名字，来实现</p></blockquote><pre><code>if (window.devicePixelRatio &amp;&amp; devicePixelRatio &gt;= 2) &#123;  document.querySelector(&quot;.box&quot;).className = &quot;border-1px&quot;;&#125;</code></pre></blockquote><h3 id="六-注意事项"><a href="#六-注意事项" class="headerlink" title="六. 注意事项"></a>六. 注意事项</h3><ol><li><p>布局</p><blockquote><ul><li>在流体布局中，因为用px单位，距离会写死，所以我们在蓝湖查看尺寸使用的是自定义，指定宽度为设计稿宽度的一半</li><li>而在rem中，我们在ios平台下布局，使用rem单位，所以直接用原始宽度，不用减半</li></ul></blockquote></li><li><p>swiper</p><blockquote><ul><li>引入<code>swiper-bundle.min.js</code>和<code>swiper-bundle.min.css</code>文件</li><li>添加HTML内容，删掉不需要用到的</li><li>给Swiper定义一个大小,swiper-6.8.4下，容器名是<code>swiper-container</code></li><li>初始化Swiper，删掉不需要用到的</li><li>设置slider容器能够同时显示的slides数量<code>slidesPerView: &#39;数字/auto&#39;</code></li><li>给容器设置一个id名，根据id名修改样式。每一个swoper对应一个id名</li></ul></blockquote></li><li><p>要实现图片自适应缩放，必须要给它加宽&#x2F;高</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex布局和Grid布局</title>
      <link href="/2023/11/30/Flex%E5%B8%83%E5%B1%80%E5%92%8CGrid%E5%B8%83%E5%B1%80/"/>
      <url>/2023/11/30/Flex%E5%B8%83%E5%B1%80%E5%92%8CGrid%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><ol><li><p>简介</p><blockquote><ul><li>布局的传统解决方案，基于盒子模型，依赖display属性+position属性。它对于那些特殊布局非常不方便，比如垂直居中就不容易实现</li><li>2009年，W3C提出了一种新的方案：Flex布局，可以简便、完整、响应式地实现各种布局页面。目前，他已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能，Flex布局将成为未来布局的首选方案</li></ul></blockquote></li><li><p>什么是flex布局？</p><blockquote><ul><li>flex(flexible box)，意为“弹性的盒子”，flex布局也称为flex弹性布局</li><li>任何一个HTML元素都可以指定为flex布局</li><li>flex布局是一种&#x3D;&#x3D;一维的&#x3D;&#x3D;布局模型，它给flexbox的子元素之间提供了强大的空间分布和对齐能力</li><li>之所以说flexbox是一种一维布局，是因为一个flexbox一次只能处理一个维度上的元素布局，一行或一列</li><li>在flex布局中，项目的float、clear和verticla-align属性将失效</li></ul></blockquote></li><li><p>什么是flex容器(flex container)？</p><blockquote><ul><li>凡是采用flex布局的元素，就称为flex容器</li><li>也就是设置了<code>display:flex;</code>或<code>display:inline-flex;</code>的元素称之为flex容器</li><li>布局有两种<ul><li><code>display:flex;</code>弹性布局，元素自身以块级元素显示</li><li><code>display:inline-flex</code>弹性布局，元素自身以行内块元素显示</li></ul></li></ul></blockquote></li><li><p>什么是flex项目(flex item)？</p><blockquote><ul><li>flex容器的所有子元素(仅指直接子元素，不包括孙元素及其后代的子元素)，自动成为容器成员，称为flex项目</li></ul></blockquote></li><li><p>什么是主轴，什么是交叉轴？</p><blockquote><ul><li>默认情况下，水平方向是主轴，垂直于主轴方向上的是交叉轴</li><li>flex项目默认沿主轴方向开始排列(即从左往右沿水平方向排列)</li><li>主轴的开始位置(与边框的交叉点)叫做<code>main start</code>，结束位置叫做<code>main end</code></li><li>交叉轴的开始位置叫做在<code>cross start</code>，结束位置叫做<code>cross end</code></li><li><strong>单个</strong>flex项目占据的主轴空间叫做<code>main size</code>(主轴尺寸)，占据的交叉轴空间叫做<code>cross size</code>(交叉尺寸)<img src="flex主轴交叉轴.png"></li></ul></blockquote></li><li><p>flex项目的默认表现形式</p><blockquote><p><strong>当flex容器和flex项目没有添加任何相关属性时，&#x3D;&#x3D;flex项目&#x3D;&#x3D;的默认表现形式如下：</strong></p><ul><li>子元素(项目)排列为一行(<code>flex-direction</code>属性的初始值是<code>row</code>)</li><li>子元素(项目)从主轴的起始线开始排列</li><li>子元素(项目)不会在主维度方向拉伸(放得下时不会拉伸)，但放不下时会缩小</li><li>子元素(项目)默认为行内块元素，不独占一行，但可以设置宽高；若没有设置宽度，则<strong>宽度</strong>由内容撑起</li><li>子元素(项目)没有设置高度时，被拉伸来填充交叉轴大小(单行时项目的高度等于容器高)</li><li><code>flex-basis</code>属性为<code>auto</code>(即元素的宽为自动)</li><li><code>flex-wrap</code>属性为<code>nowrap</code>(子项默认放不下时，不会<strong>换行</strong>)</li></ul></blockquote></li></ol><blockquote><p><strong>display:flex;</strong></p><ul><li>flex容器为块级元素，若没有设置宽高，则<strong>宽度</strong>自动填充父元素的宽度，<strong>高度</strong>由内容撑起</li></ul></blockquote><blockquote><p><strong>display:inline-flex;</strong></p><ul><li>flex容器为行内块元素，不独占一行，但可以设置宽高；若没有设置宽高，则<strong>宽高</strong>都由内容撑起</li></ul></blockquote><h3 id="二、flex容器属性"><a href="#二、flex容器属性" class="headerlink" title="二、flex容器属性"></a>二、flex容器属性</h3><ol><li><p>flex-direction设置主轴方向</p><blockquote><ul><li>默认主轴方向就是x轴，水平向右</li><li>默认交叉轴就是y轴，垂直向下<br><code>flex-direction:row;</code><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>row</td><td>(默认值)主轴为水平方向，起点在左端。(交叉轴在垂直方向，起点在元素上边框位置)</td></tr><tr><td>row-reverse</td><td>主轴为水平方向，起点在右端。(交叉轴在垂直方向，起点在元素上边框位置)</td></tr><tr><td>column</td><td>主轴在垂直方向，起点元素在上边框位置(交叉轴在水平方向，起点在左端)</td></tr><tr><td>column-reverse</td><td>主轴在垂直方向，起点在下沿(交叉轴在水平方向，起点在左端)</td></tr></tbody></table></li></ul></blockquote></li><li><p>flex-wrap项目如何换行</p><blockquote><ul><li>默认情况下，项目都在一条线上(轴线)上排列</li><li><code>flex-wrap</code>属性用来定义：如果项目在一条轴线上排不下时，如何换行<br><code>flex-wrap:nowrap;</code><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>nowrap</td><td>不换行(默认)</td></tr><tr><td>wrap</td><td>换行，第一行在上方(或第一列左边)</td></tr><tr><td>wrap-reverse</td><td>换行，第一行在下方(或第一列右边)</td></tr></tbody></table></li></ul></blockquote></li></ol><blockquote><table><thead><tr><th>主轴属性</th><th>主轴方向</th><th>wrap效果</th><th>wrap-reverse效果</th></tr></thead><tbody><tr><td><code>flex-direction:row;</code></td><td>水平，从左至右</td><td>第二行从上到下、从左至右排列</td><td>第二行从下到上、从左至右排列</td></tr><tr><td><code>flex-direction:row-reverse;</code></td><td>水平，从右到左</td><td>第二行从上到下、从右至左排列</td><td>第二行从下到上、从右到左排列</td></tr><tr><td><code>flex-direction:column;</code></td><td>垂直，从上到下</td><td>第二列从左到右、从上到下排列</td><td>第二列从右到左、从上到下排列</td></tr><tr><td><code>flex-direction:column-reverse;</code></td><td>垂直，从下到上</td><td>第二列从左到右、从下到上排列</td><td>第二列从右到左、从下到上排列</td></tr><tr><td><strong>总结：</strong></td><td></td><td></td><td></td></tr></tbody></table><ul><li>wrap：按照交叉轴方向start–&gt;end，主轴start–&gt;end方向换行</li><li>wrap-reverse：按照交叉轴方向end–&gt;start，主轴start–&gt;end方向换行</li><li>因此：wrap-reverse改变的是交叉轴的方向</li></ul></blockquote><ol start="3"><li><p>flex-flow 主轴方向和项目如何换行</p><blockquote><p><code>flex-flow</code>属性是<code>flex-direction</code>和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code><br><code>flex-flow:row nowrap;</code>第一个值规定主轴方向，第二个值规定项目如何换行</p></blockquote></li><li><p>justify-content 项目在<strong>主轴</strong>上对齐方式</p><blockquote><p><code>justify-content:flex-start;</code></p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>(默认值)，向主轴start方向对齐</td></tr><tr><td>flex-end</td><td>向主轴end方向对齐</td></tr><tr><td>center</td><td>居中</td></tr><tr><td>space-between</td><td>两端对齐，项目之间的间隔都相等,两端与项目之间不会有间隔</td></tr><tr><td>space-around</td><td>每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍(相当于加了左右外边距)</td></tr><tr><td>space-evenly</td><td>使每个元素之间和元素距离边距的距离都相等，但iphone的SE上不支持，会失效，基本不用</td></tr></tbody></table></blockquote></li><li><p>align-items 项目在<strong>交叉轴</strong>上对齐方式</p><blockquote><p><code>align-items</code>属性定义项目在<strong>交叉轴</strong>上如何对齐，<strong>只对单行有效</strong><br><code>align-items:stretch;</code></p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>stretch</td><td>(默认值)：如果项目未设置高度或设为auto，将占满整个容器</td></tr><tr><td>flex-start</td><td>与交叉轴的起点对齐</td></tr><tr><td>flex-end</td><td>与交叉轴的终点对齐</td></tr><tr><td>center</td><td>与交叉轴的中点对齐</td></tr><tr><td>baseline</td><td>向项目的第一行文字的X的中间对齐</td></tr></tbody></table></blockquote></li></ol><blockquote><p><strong>注意</strong></p><ul><li>默认情况下，项目如果没有设置高度或设为auto，其高度会自动拉伸到容器高度。<strong>原因是：</strong><code>align-items:stretch;</code>为默认值。</li><li><strong>但是在其他几种情况下</strong>(即align不为stretch时)，项目未设置高度，其高度就为内容大小，并不会拉伸。</li></ul></blockquote><blockquote><p><strong>当主轴放不下，允许换行时</strong></p><ul><li>当项目放不下，换行时，可以把每一行看做一个”新的flex容器”</li><li><code>align-items</code>控制项目在”每一个容器”的交叉轴上的对齐方式</li><li>行与行之间的间隔高度是相等的，由于每一行的最高项目高度不一样，所以每一个”新容器”所占高度也不一样</li><li>当前行容器占的高度&#x3D;当前行最高元素的高+行与行之间的间隔&#x3D;当前行最高元素的高+(容器高-每一所有行最高元素的高)&#x2F;行数</li></ul></blockquote><ol start="6"><li>align-content 多根轴线对齐方式(多行)<blockquote><p>该属性规定了<strong>多根轴线</strong>在<strong>交叉轴</strong>上的对齐方式<br>如果项目只有一根轴线，该属性不起作用(允许换行)</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>stretch</td><td>(默认值)：轴线占满整个交叉轴</td></tr><tr><td>flex-start</td><td>与交叉轴的起点对齐</td></tr><tr><td>flex-end</td><td>与交叉轴的终点对齐</td></tr><tr><td>center</td><td>与交叉轴的中点对齐</td></tr><tr><td>space-between</td><td>两端对齐，与交叉轴两端对齐，轴线之间的间隔平均分布</td></tr><tr><td>space-around</td><td>每个轴线两侧的间隔都相等(每行加外边距)。所以，轴线之间的间隔比轴线与边框的间隔大一倍</td></tr></tbody></table></blockquote></li></ol><blockquote><p><strong>注意！！！</strong><br>可换行时，<code>align-items</code>与<code>align-content</code>的区别</p><ul><li><code>align-items</code>控制单行，因此每行都是一个”新容器”，<code>align-items</code>控制每个新容器内项目在交叉轴上的对齐方式，每个容器之间都有等高的间隔</li><li><code>align-content</code>同时控制多行<ul><li>使用<code>stretch</code>、<code>space-between</code>、<code>space-around</code>时，每行的高度等于当前行最高的项目高度+等高的行间隔,</li></ul></li><li>使用<code>flex-start</code>、<code>flex-end</code>、<code>center</code>时，行与行之间没有间隔，统一成”一个容器”</li></ul></blockquote><h3 id="三、flex项目属性"><a href="#三、flex项目属性" class="headerlink" title="三、flex项目属性"></a>三、flex项目属性</h3><blockquote><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>order</td><td>属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0</td></tr><tr><td>align-self</td><td>单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性,默认值为auto，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</td></tr><tr><td>flex-grow</td><td>flex项<strong>主尺寸</strong>的flex增长系数。默认为0，即如果存在剩余空间，也不放大。</td></tr><tr><td>flex-shrink</td><td>flex项<strong>主尺寸</strong>的缩小比例，默认为1，即如果空间不足，该项目将缩小。</td></tr><tr><td>flex-basis</td><td>定义了在分配多余空间之前，项目占据的主轴空间（main size）</td></tr><tr><td>flex</td><td>flex属性是flex-grow, <code>flex-shrink</code>和<code>flex-basis</code>的简写默认值为:0 1 auto。后两个属性可选</td></tr></tbody></table></blockquote><ol><li><p>order项目的排列顺序</p><blockquote><ul><li><code>order</code>属性定义项目的排列顺序</li><li><code>order</code>属性值<code>&gt;0</code>的整数，数值越小，排列越靠前，默认为0<br><code>order:1;</code></li></ul></blockquote></li><li><p>align-self 单个项目交叉轴对齐方式</p><blockquote><ul><li><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性</li><li><code>align-self</code>的默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性</li><li>如果父元素没有设置<code>align-items</code>属性，则等同于<code>stretch</code>(项目未设置高度时)</li><li><code>align-self:flex-start;</code><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>auto</td><td>默认值，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code></td></tr><tr><td>stretch</td><td>如果项目未设置高度或设为<code>auto</code>，将占满整个容器的高度</td></tr><tr><td>flex-start</td><td>交叉轴的起点对齐</td></tr><tr><td>flex-end</td><td>交叉轴的终点对齐</td></tr><tr><td>center</td><td>交叉轴的中点对齐</td></tr><tr><td>baseline</td><td>项目的第一行文字的基线对齐</td></tr></tbody></table></li><li>当项目换行时，其<code>align-self</code>单个项目对齐方式，是相当于其所在的哪一行的轴线而言</li><li>在今日头条案例中，用到<code>align-self:flex-start;</code>，使行内块元素宽度不占满整行(不设宽度时)</li></ul></blockquote></li><li><p>flex-grow 项目主轴放大系数</p><blockquote><ul><li><code>flex-grow</code>设置flex项目<strong>主尺寸</strong>的flex增长系数</li><li>主尺寸是项目的宽度或高度，这取决于<code>flex-direction</code>值</li><li><code>flex-grow</code>属性，在flex容器有剩余空间时生效</li><li><code>剩余空间=flex容器宽大小-所有flex项目宽加起来的大小</code><blockquote><p>注：剩余空间的值一定要大于0的</p></blockquote></li><li><code>flex-grow</code>默认值为0，表示即使有剩余空间，也不增长(放大)</li><li><code>flex-grow</code>的值&gt;&#x3D;0的数字</li></ul></blockquote></li></ol><blockquote><p><strong>项目放大后尺寸计算方式</strong></p><ul><li>当所有项目的<code>flex-grow</code>值的总结加<code>&lt;1</code>时<ul><li>项目放大后宽 &#x3D; 项目原始宽 + 剩余空间*项目的<code>flex-grow</code>值</li></ul></li><li>当所有项目的<code>flex-grow</code>值的总和加起来<code>&gt;=1</code>时<ul><li>项目放大后宽&#x3D;项目原始宽+剩余空间*(flex-grow值)&#x2F;所有项目的flex-grow值总和</li></ul></li><li>当flex容器的剩余空间为0时，不管flex项目的<code>flex-grow</code>的值是多少，项目都不会放大(因为没有多余空间)</li></ul></blockquote><ol start="4"><li>flex-shrink项目主轴上缩放系数<blockquote><ul><li><code>flex-shrink</code>属性指定了flex元素的收缩规则</li><li>当所有项目宽度大于容器的时候才会收缩(默认主轴为水平方向)</li><li>flex项目收缩的大小是依据所有项目的<code>flex-shrink</code>值决定的</li><li><code>flex-shrink</code>的默认值为1，表示容器空间不足时，所有项目等比缩小</li><li>只有当flex容器设置了<code>flex-grow:nowrap;</code>时，才能看到效果</li><li>当<code>flex-shrink:0;</code>时，无论如何不缩放</li></ul></blockquote></li></ol><blockquote><p><strong>项目收缩后尺寸大小计算方式</strong></p><ul><li>当flex-shrink总和&lt;1时<ul><li><ol><li>计算溢出宽 &#x3D;所有项目宽之和-容器宽</li></ol></li><li><ol start="2"><li><strong>计算所有子项的总缩放宽 &#x3D;溢出宽</strong></li></ol></li><li><ol start="3"><li>当前项目缩放比例 &#x3D;(当前项目原始宽<code>*</code>flex-shrink值)&#x2F;所有项目(宽<code>*``flex-shrink</code>值)之和</li></ol></li><li><ol start="4"><li>项目收缩宽&#x3D;所有子项的总缩放宽<code>*</code>当前项目缩放比例</li></ol></li><li><ol start="5"><li>项目收缩后宽&#x3D;原始宽-收缩宽</li></ol></li></ul></li><li>当flex-shrink总和&gt;&#x3D;1时<ul><li><ol><li>计算溢出宽 &#x3D;所有项目宽之和-容器宽</li></ol></li><li><ol start="2"><li>计算所有子项的总缩放宽 &#x3D;溢出宽<code>*</code>所有项目<code>flex-shrink</code>值之和</li></ol></li><li><ol start="3"><li>当前项目缩放比例 &#x3D;(当前项目原始宽<code>*</code>flex-shrink值)&#x2F;所有项目(宽<code>*``flex-shrink</code>值)之和</li></ol></li><li><ol start="4"><li>项目收缩宽&#x3D;所有子项的总缩放宽<code>*</code>当前项目缩放比例</li></ol></li><li><ol start="5"><li>项目收缩后宽&#x3D;原始宽-收缩宽<blockquote><p>注：当项目的搜索框&gt;项目原始宽时，此计算方式无效</p></blockquote></li></ol></li></ul></li></ul></blockquote><ol start="5"><li><p>flex-basis分配剩余空间前，项目占据主轴空间大小(main size)</p><blockquote><ul><li><code>flex-basis</code>属性定义了<strong>在分配多余空间之前</strong>，项目占据的主轴空间</li><li>浏览器根据这个属性聚酸主轴是否有多余空间</li><li>它的默认值为<code>auto</code>，即项目的本来大小(如果有with，则缩放以width为参考)</li><li><code>flex-basis</code>的优先级要高于<code>width</code></li><li>特殊：<code>flex-basis:0%;</code>元素宽为0；</li></ul></blockquote></li><li><p>flex项目放大、缩小、空间占据</p><blockquote><ul><li><code>flex</code>属性是<code>flex-grow</code>、<code>fleex-shrink</code>和<code>flex-basis</code>的缩写</li><li>默认值为<code>0 1 auto</code>，也就是不放大，等比缩放，占主轴宽度为auto</li><li>特殊<ul><li><code>flex:auto;</code>：<code>flex:1 1 auto;</code></li><li><code>flex:none;</code>：<code>flex:0 0 auto;</code></li><li><code>flex:1</code>：<code>flex:1 1 0%;</code></li></ul></li></ul></blockquote></li></ol><h3 id="四、flex实战"><a href="#四、flex实战" class="headerlink" title="四、flex实战"></a>四、flex实战</h3><ol><li><p>元素水平垂直居中</p><blockquote><ul><li>弹性布局:<code>display:flex;</code></li><li>水平居中:<code>jusity-content:center;</code></li><li>垂直居中:<code>align-items:center;</code>.(不同情况下还可以使用<code>align-content</code>和<code>align-self</code>)</li></ul></blockquote></li><li><p>画骰子</p><blockquote><ul><li>1~6点</li></ul></blockquote></li><li><p>双飞翼布局</p><blockquote><ul><li>左右固定，中间自适应，最中间的内容放在第一位，有利于SEO搜索引擎优化</li><li>注意点<ul><li>容器设置<code>display:flex;</code>使项目以弹性布局方式排列</li><li>中间的项目写在最上面，但利用<code>order</code>改变排版顺序</li><li>中间的项目设置<code>flex-grow:1;</code>：使中间项目的充分占据容器剩余空间</li><li>左右项目固定宽度，<code>flex-grow</code>默认为0，因此不会分配容器的剩余空间</li></ul></li></ul></blockquote></li><li><p>flex怎么实现盒子1在最左边，23在最右边</p></li><li><p>星级评估</p><blockquote><ul><li>利用后续兄弟元素选择器，把主轴方向调转</li><li>伪元素实现实心星星：代码<code>content=&quot;\2605&quot;</code></li><li><code>hover</code>鼠标滑动变色</li></ul></blockquote></li><li><p>如何解决 flex 布局 7 个元素使用 space-between 最后一行两边分布的问题？</p><blockquote><ul><li>如果我们每一行显示的个数为 n，那我们可以最后一行子项的后面加上 n-2 个 span 元素，span 元素的宽度和其它子项元素宽度一样，但不用设置高度,高度设置为0,不对其他元素产生影响。</li><li><strong>为什么是添加n-2个span元素呢 ？</strong><ul><li>当最后一行只有 1 个子元素时，他会默认靠左，不用处理</li><li>当最后一行子元素正好时，我们就不用关心这个问题</li></ul></li></ul></blockquote></li></ol><h2 id="Grid布局"><a href="#Grid布局" class="headerlink" title="Grid布局"></a>Grid布局</h2><h3 id="一、基本概念-1"><a href="#一、基本概念-1" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><ol><li><p>什么是网格布局</p><blockquote><ul><li>grid网格布局是将容器分成了行和列，产生单元格，然后指定<strong>项目</strong>所在的单元格，可以看做是二维布局</li><li>grid比flex更加强大，flex更适合处理一维布局<img src="grid.png"></li></ul></blockquote></li><li><p>什么是grid容器和项目</p><blockquote><ul><li>与flex布局一样，采用网格布局的区域称为容器，其直接子元素称为项目</li><li>通过给元素添加<code>display:grid;</code>或<code>display:inline-grid;</code>来指定元素为grid网格布局<ul><li><code>display:grid;</code>元素自身以块级元素显示</li><li><code>display:inline-grid;</code>元素自身以行内块元素显示</li></ul></li><li>任何元素都可以指定为grid网格布局</li></ul></blockquote></li><li><p>什么是行、列、单元格</p><blockquote><ul><li>容器里面的水平区域称为行，垂直区域称为列</li><li>行和列交叉形成区域，称为单元格(cell)</li><li>正常情况下，<code>n</code>行和<code>m</code>列会产生<code>n*m</code>个单元格</li></ul></blockquote></li><li><p>什么是网线格</p><blockquote><ul><li>划分网格的线，称为”网线格”</li><li>水平网格线划分出行，垂直网格线划分出列</li><li>正常情况下,n行有<code>n+1</code>根水平网格线，m列有<code>m+1</code>根垂直网格线</li></ul></blockquote></li><li><p>什么是网格轨道</p><blockquote><ul><li>网格轨道是两条网格线之间的空间<img src="网格轨道.png"></li></ul></blockquote></li><li><p>什么是网格区域</p><blockquote><ul><li>网格区域是由网格中一个或多个单元格组成的一个矩形区域，有点类似与表格中的合并</li><li>也就是说，我们把grid容器划分成对应单元格后，可以对这些单元格做合并操作<img src="网格区域.png"></li></ul></blockquote></li><li><p>什么是网格间距</p><blockquote><ul><li>网格间距分为行间距和列间距</li><li>行与行的间隔，被称为行间距，列与列的间隔，被称为列间距。具体如下图所示<img src="网格间距.png"></li></ul></blockquote></li><li><p>什么是网格内容区域</p><blockquote><ul><li>Grid 容器的每一个子元素，被称为 Grid 项目。所有 Grid 项目看成一个整体，这个整体我们称为网格内容。<img src="网格内容.png"></li></ul></blockquote></li></ol><h3 id="二、grid-容器-属性"><a href="#二、grid-容器-属性" class="headerlink" title="二、grid&#x3D;&#x3D;容器&#x3D;&#x3D;属性"></a>二、grid&#x3D;&#x3D;容器&#x3D;&#x3D;属性</h3><blockquote><ul><li>当元素设置网格布局以后，项目的<code>float</code>、<code>display:inline-block</code>、<code>display:table-cell</code>、<code>vertical-align</code>、<code>column-*</code>等设置都将失效</li></ul></blockquote><ol><li>grid-template-rows、grid-template-columns属性<blockquote><p><strong>tips：</strong></p><ul><li><code>grid-template-rows</code>定义行及行高</li><li><code>grid-template-columns</code>定义列及列宽</li></ul></blockquote></li></ol><blockquote><p><strong>单位</strong></p><ol><li>绝对单位长度px</li></ol><ul><li>每行行高都是100px：<code>grid-template-rows:100px 100px;</code></li><li>每列列宽都是200px：<code>grid-template-column:200px 200px;</code></li></ul><ol start="2"><li>百分比单位</li></ol><ul><li>以容器宽高为基础。&#96;width:200px height:300px;</li><li><code>grid-template-rows:30% 70%;</code><ul><li>行高分别为：<code>300*30%</code> <code>300*70%</code>;</li></ul></li><li><code>grid-template-column:40% 60%;</code><ul><li>列宽分别为：<code>200*40%</code> <code>200*60%</code>;</li></ul></li></ul><ol start="3"><li>fr关键词</li></ol><ul><li><code>fr</code>关键字(fraction的缩写，片段)，表示比例关系</li><li>所有行&#x2F;列都用fr单位，则：<ul><li>每列宽&#x3D;容器宽 * (当前列fr值&#x2F;所有列fr值总和)</li><li>每行高&#x3D;容器高 * (当前列fr值&#x2F;所有列fr值总和)</li></ul></li><li>与绝对长度的单位结合使用,fr单位的行&#x2F;列，表示的是按比例分配剩余空间</li></ul></blockquote><blockquote><p><strong>repeat()函数</strong></p><ul><li>简化重复值</li><li>包括两个参数：repeat(重复次数，所重复的值)</li></ul><pre><code>/* 定义行，3行的行高都是100px */grid-template-rows: repeat(3, 100px);/* 定义了6行，第1，4行的高为50px 第2，5行的高为100px，第3，6行的高为80px */grid-template-rows: repeat(2, 50px 100px 80px);</code></pre></blockquote><blockquote><p><strong>auto-fill关键字</strong></p><ul><li>有时，单元格的大小是固定的，但是容器的大小不确定，如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用auto-fill关键字表示自动填充。</li><li><code>grid-template-columns: repeat(auto-fill, 100px);</code><ul><li>意思是每列宽度为100px，列数自动填充</li></ul></li></ul></blockquote><blockquote><p><strong>minmax</strong><br><code>minmax()</code>函数产生一个长度范围，表示长度就在这个范围内</p><ul><li>&#96;minmax(最小值,最大值)</li><li>可以与px、fr、百分比混用</li></ul></blockquote><blockquote><p><strong>auto关键词</strong></p><ul><li>auto关键词表示(列宽&#x2F;行高)由浏览器自己决定</li><li>auto 表示当对应单元格中的元素（如 div）在未设置宽度时，当前列宽为自动计算的宽</li><li>情况一：</li></ul><pre><code>容器设置：grid-template-columns: 100px auto 100px;而且auto对应的第二个项目**未设置列宽**</code></pre><ul><li>表示第二个单元格宽度自适应</li><li>情况二</li></ul><pre><code>容器设置：grid-template-columns: 100px auto 100px;而且auto对应的第二个项目**设置了列宽**</code></pre><ul><li>若item2的宽度<strong>大于</strong>单元格自动计算的宽，则单元格宽度由对应项目决定</li><li>若item2的宽度<strong>小于</strong>单元格自动计算的宽，则单元格宽度以自动计算的为主</li></ul></blockquote><blockquote><p><strong>网格线的名称</strong></p><ul><li>使用方括号，指定每一根网格线的名字，方便以后的引用。</li><li><code>grid-template-rows: [a1] 200px [a2];</code></li><li>需要注意的是n行有<code>n+1</code>条网格线</li></ul></blockquote><ol start="2"><li><p>row-gap、column-gap、gap属性</p><blockquote><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>row-gap</td><td>设置行与行的间隔(行间距)</td></tr><tr><td>column-gap</td><td>设置列与列的间距(列间距)</td></tr><tr><td>gap</td><td>是<code>row-gap</code>和<code>column-gap</code>的合并简写形式</td></tr></tbody></table><ul><li>属性值单位是绝对单位px或百分比</li><li>百分比单位是网格容器的百分比</li><li>gap后如果只写一个值，表示列间距和行间距一样大小</li></ul></blockquote></li><li><p>grid-template-areas属性</p><blockquote><ul><li>grid-template-areas属性用于指定<strong>网格区域</strong>，一个区域由单个或多个单元格组成</li><li>这个属性需要配合项目属性<code>grid-area</code>一起使用</li><li><code>grid-area:区域名</code>用于指定grid项目放在哪个区域</li><li>不需要利用的区域，则使用点<code>.</code>表示</li><li>区域的命名会影响到网格线，每个区域的起始网格线，会自动命名为<code>区域名-start</code>；终止网格线自动命名为<code>区域名-end</code></li><li>注意：”合并单元格”时，所形成的区域必须是矩形</li><li>使用方法：</li></ul><pre><code>.container&#123; grid-template-areas:&quot;a a c&quot;&quot;a a f&quot;&quot;g h i&quot;;  &#125;.grid-item1 &#123; /* 将项目放在区域a中 */ grid-area: a; background-color: skyblue;  &#125;</code></pre></blockquote></li><li><p>grid-auto-flow属性</p><blockquote><ul><li>它决定了项目在容器中的排列顺序，是”先行后列”，还是”先列后行”<table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>row</td><td>默认值，即先行后列，即项目默认从左往右，先天满第一行，再开始第二行</td></tr><tr><td>column</td><td>先列后行，即项目先从上往下填满第一列，再开始放第二列</td></tr><tr><td>row dense</td><td>某些项目指定位置以后，剩下的项目怎么自动放置。表示**”先行后列”**，并且尽可能紧密填满，尽量不出现空格</td></tr><tr><td>column dense</td><td>某些项目指定位置以后，剩下的项目怎么自动放置。表示**”先列后行”**，并且尽量填满空格</td></tr></tbody></table></li></ul></blockquote></li><li><p>grid-auto-columns和grid-auto-rows属性</p><blockquote><p><strong>什么是显示网格：</strong></p><ul><li>使用<code>grid-template-columns</code>和<code>grid-auto-rows</code>指定尺寸创建出来行和列形成的网格<br><strong>什么是隐藏网格</strong></li><li>是自动布局算法创建的额外的行或列形成的网格</li></ul></blockquote></li></ol><blockquote><ul><li><code>grid-auto-columns</code>：隐式创建的网格<strong>纵向</strong>轨道(track)的宽度。即设置隐式网格的<strong>宽度</strong></li><li><code>grid-auto-rows</code>：用于指定隐式创建的<strong>行</strong>轨道大小。即设置隐式网格的<strong>高度</strong></li><li><code>grid-auto-columns</code>与<code>grid-auto-rows</code>的写法与<code>grid-template-columns</code>和<code>grid-template-rows</code>完全相同。</li><li>但是！<code>grid-auto-columns</code>与<code>grid-auto-rows</code>不支持<code>repeat</code>写法</li><li>如果不指定<code>grid-auto-columns</code>与<code>grid-auto-rows</code>这两个属性，浏览器完全根据<strong>单元格内容的大小</strong>，决定新增网格的列宽或行高。</li><li>只有在“先行后列”：<code>grid-auto-flow:row;</code>的情况下，设置隐式行高<code>grid-auto-rows</code>才有用，此时的隐式列宽由<code>grid-template-columns</code>决定</li><li>类似的，只有在“先列后行”时，设置隐式列宽才有效；而隐式行高由<code>grid-template-rows</code>决定</li></ul></blockquote><ol start="6"><li><p>justify-items属性</p><blockquote><p>用来设置<strong>单元格内容</strong>的水平位置</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>stretch</td><td>(默认值)拉伸，占满单元格的整个宽度</td></tr><tr><td>start</td><td>与单元格最左边对齐</td></tr><tr><td>end</td><td>与单元格最右边对齐</td></tr><tr><td>center</td><td>单元格内水平居中对齐</td></tr></tbody></table></blockquote></li><li><p>align-items属性</p><blockquote><p>用来设置<strong>单元格内容</strong>的垂直对齐方式</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>stretch</td><td>(默认值)拉伸，占满单元格的整个高度</td></tr><tr><td>start</td><td>与单元格最上边对齐</td></tr><tr><td>end</td><td>与单元格最下边对齐</td></tr><tr><td>center</td><td>与单元格内垂直居中对齐</td></tr></tbody></table></blockquote></li><li><p>place-items属性</p><blockquote><p>它是<code>align-items</code>和<code>justify-items</code>属性的<strong>合并简写</strong>属性</p><ul><li><code>place-items:(垂直,水平)</code></li><li>如果只写一个值，则相当于两个值一样</li></ul></blockquote></li><li><p>justify-content属性</p><blockquote><p>设置<strong>整个内容区域</strong>在容器里面的<strong>水平</strong>位置</p><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>start</td><td>默认值，对齐容器的<strong>左</strong>边框</td></tr><tr><td>end</td><td>对齐容器的<strong>右</strong>边框</td></tr><tr><td>center</td><td>容器内部<strong>水平居中</strong>。</td></tr><tr><td>stretch</td><td>单元格大小没有指定时，<strong>拉伸</strong>宽占据整个网格容器。</td></tr><tr><td>space-around</td><td>每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</td></tr><tr><td>space-between</td><td>项目与项目的间隔相等，项目与容器边框之间没有间隔。</td></tr><tr><td>space-evenly</td><td>项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</td></tr></tbody></table><blockquote><p>注意：只有当单元格宽&#x2F;高为<code>auto</code>时，<code>justify-content:stretch;</code>拉伸才会生效</p></blockquote></blockquote></li><li><p>align-content属性</p><blockquote><p>是整个<strong>内容区域</strong>的<strong>垂直</strong>位置</p><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>start</td><td>默认值，对齐容器的起始边框</td></tr><tr><td>end</td><td>对齐容器的结束边框</td></tr><tr><td>center</td><td>容器内容垂直居中。</td></tr><tr><td>stretch</td><td>项目高度没有指定时，项目高度会被拉伸占据整个网格容器。</td></tr><tr><td>space-around</td><td>每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</td></tr><tr><td>space-between</td><td>项目与项目的间隔相等，项目与容器边框之间没有间隔。</td></tr><tr><td>space-evenly</td><td>项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</td></tr></tbody></table></blockquote></li><li><p>place-content属性</p><blockquote><ul><li><code>place-content</code>属性是<code>align-content</code>属性和<code>justify-content</code>属性的合并简写形式</li></ul></blockquote></li><li><p>grid-template和grid属性</p><blockquote><ul><li><code>grid-template</code>属性是<code>grid-template-rows</code>、<code>grid-template-columns</code>和<code>grid-template-areas</code>这三个属性的合并简写形式。</li><li>只定义行高和列宽<ul><li><code>grid-template:100px 200px/50px 100px;</code></li><li>行高分别为100px和200px，列宽分别为50px和100px</li></ul></li><li>定义行列，同时划分区域</li></ul><pre><code>grid-template:  &quot;a a b&quot; 50px  &quot;a a b&quot; 100px  &quot;c c c&quot; 50px / 100px 100px 100px;  /*定义行列和区域 3行 行高分别为 50px 100px 50px3列 列宽分别为 100px 100px 100px*/</code></pre></blockquote></li></ol><blockquote><ul><li><code>grid</code>属性是<code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code>、 <code>grid-auto-rows</code>、<code>grid-auto-columns</code>、<code>grid-auto-flow</code>这六个属性的合并简写形式。<ul><li>因为过于复杂，实际并不会用这种方式</li></ul></li></ul></blockquote><h3 id="三、grid-项目-的属性"><a href="#三、grid-项目-的属性" class="headerlink" title="三、grid&#x3D;&#x3D;项目&#x3D;&#x3D;的属性"></a>三、grid&#x3D;&#x3D;项目&#x3D;&#x3D;的属性</h3><ol><li>指定项目的位置<blockquote><ul><li>通过指定项目的四个边框的位置，四个边框分别定位在哪根网络线<table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>grid-column-start</td><td>项目左边框所在的垂直网格线</td></tr><tr><td>grid-column-end</td><td>项目右边框所在的垂直网格线</td></tr><tr><td>grid-row-start</td><td>项目上边框所在的水平网格线</td></tr><tr><td>grid-row-end</td><td>项目下边框所在的水平网格线</td></tr></tbody></table></li></ul></blockquote></li></ol><blockquote><ul><li>当项目只指定了4个属性中的一个，则其他未指定的会采用默认位置，并且一个项目只占一个单元格</li><li>项目的默认位置，由<code>grid-auto-flow</code>属性决定<ul><li>先行后列时，若未明确定位，则被指定项目会按前后顺序排列</li><li>先列后行时，若未明确定位，则被指定项目<strong>高于</strong>其前面的元素</li><li><code>row dense</code>表示 “先行后列”，并且尽可能紧密填满，尽量不出现空格。</li><li><code>column dense</code>表示”先列后行”，并且尽量填满空格</li></ul></li><li>指定方式(可混用)：<ul><li>数字：第几个网格线</li><li>名称：网格线名字</li><li>span关键字：表示跨越，后接数字表示跨越几个网格。不管是star还是end都是从默认的那个单元格开始算</li><li>auto关键字：表示自动放置，自动跨度或默认跨度为1</li></ul></li><li>如果项目发生重叠，通过<code>z-index</code>属性指定项目的重叠顺序</li></ul></blockquote><ol start="2"><li><p>grid-colum、grid-row属性</p><blockquote><ul><li><code>grid-column</code>是<code>grid-column-start</code>和<code>grid-column-end</code>的合并简写形式</li><li><code>grid-row</code>属性是<code>grid-row-start</code>属性和<code>grid-row-end</code>的合并简写形式</li><li>写法：<code>grid-column:1/3;</code>用<code>/</code>分隔</li></ul></blockquote></li><li><p>grid-area属性</p><blockquote><ul><li><code>grid-area</code>属性指定项目放在哪一个区域</li><li>配合<code>grid-template-areas</code>属性一起使用</li><li>特殊用法1：<ul><li><code>grid-area</code>属性还可用作<code>grid-row-start</code>、<code>grid-column-start</code>、<code>grid-row-end</code>、<code>grid-column-end</code>的合并简写形式，直接指定项目的位置。 </li><li><code>grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</code></li><li><code>grid-area:1/2/3/4;</code></li></ul></li><li>特殊用法2(栅格布局)：<ul><li>所谓的栅格布局，你可以简单理解为，要把一个页面或容器(如 div)，分成多少份：<code>grid-template-columns: repeat(12, 1fr);</code></li><li>然后设置其页面或容器中子元素占对应的份数：</li></ul></li></ul><pre><code>.col-3 &#123;   /* 宽为父容器3份宽 */ grid-area: auto/auto/auto/span 3; &lt;!-- 不指定起始线，只规定所跨越的单元格 --&gt;  &#125;</code></pre></blockquote></li><li><p>justify-self、align-self、place-self 属性</p><blockquote><ul><li><code>justify-self</code>设置单元格内容的水平位置</li><li><code>align-self</code>设置单元格内容的垂直位置</li><li><code>place-self</code>是align-self属性和justify-self属性的<strong>合并</strong>简写形式，如果省略第二个值，place-self属性会认为这两个值相等。<br><strong>justify-self 和 align-self 属性的取值相同，都可以是以下 4 个</strong><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>stretch</td><td>默认值，拉伸，占满单元格的整宽或高</td></tr><tr><td>start</td><td>（水平居左或垂直居上）</td></tr><tr><td>end</td><td>（水平居右或垂直居下）</td></tr><tr><td>center</td><td>水平居中，或垂直居中</td></tr></tbody></table></li></ul></blockquote></li></ol><h3 id="四、兼容性查询办法"><a href="#四、兼容性查询办法" class="headerlink" title="四、兼容性查询办法"></a>四、兼容性查询办法</h3><ol><li><p>不同浏览器的私有前缀</p><table><thead><tr><th>私有前缀</th><th>说明</th></tr></thead><tbody><tr><td>-moz-</td><td>火狐等使用 Mozilla 浏览器引擎的浏览器</td></tr><tr><td>-webkit-</td><td>Safari, 谷歌浏览器等使用 Webkit 引擎的浏览器</td></tr><tr><td>-o-</td><td>Opera 浏览器</td></tr><tr><td>-ms-</td><td>IE 浏览器 、Edge 浏览器</td></tr></tbody></table><blockquote><blockquote><p>对于私有属性的顺序要注意，标准写法要写到最后面，兼容性写法放在前面</p></blockquote></blockquote></li><li><p>兼容性查询</p><blockquote><p>查询不同 CSS 属性的兼容性，可以进入地址：<a href="https://caniuse.com/%E6%9F%A5%E8%AF%A2">https://caniuse.com/查询</a></p></blockquote></li></ol><h3 id="五、案例"><a href="#五、案例" class="headerlink" title="五、案例"></a>五、案例</h3><ol><li><p>Grid 网格布局（开发 360 图片展示效果）</p><blockquote><ul><li>grid-area</li><li>grid-column、grid-rows</li></ul></blockquote></li><li><p>小米商城</p><blockquote><ul><li>滑动菜单栏切换商品列表</li><li>在对应的菜单栏的写商品列表</li><li>利用position定位到菜单栏左侧</li><li>每一个商品列表的类名都可以一样，随列表内容而变化</li><li>商品栏宽度随商品数量扩大</li><li>网格布局：先列后行，设置一列六行，隐藏网格的列宽设置成所需列宽</li><li>每行行高为1份，自动生成，列宽固定</li></ul></blockquote></li></ol><blockquote><ul><li>图片与文字垂直对齐</li><li>给单元格设置弹性布局</li><li>利用<code>align-items:center;</code>实现垂直居中</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flex Grid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目开发必备基础知识</title>
      <link href="/2023/11/30/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/11/30/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="web前端项目开发规范和最佳实践"><a href="#web前端项目开发规范和最佳实践" class="headerlink" title="web前端项目开发规范和最佳实践"></a>web前端项目开发规范和最佳实践</h2><h3 id="一、CSS发展史与CSS模块划分"><a href="#一、CSS发展史与CSS模块划分" class="headerlink" title="一、CSS发展史与CSS模块划分"></a>一、CSS发展史与CSS模块划分</h3><h4 id="1-HTML的诞生"><a href="#1-HTML的诞生" class="headerlink" title="1. HTML的诞生"></a>1. HTML的诞生</h4><blockquote><p>1991年8月6日，万维网之父蒂姆·伯纳斯·李创建了人类有史以来的第一个网站(即：<a href="http://info.cern.ch),它没有样式,只有文字和图像两种./">http://info.cern.ch)，它没有样式，只有文字和图像两种。</a></p></blockquote><h4 id="2-css的诞生"><a href="#2-css的诞生" class="headerlink" title="2. css的诞生"></a>2. css的诞生</h4><blockquote><p>1994年哈肯·维姆·莱和伯特·波斯共同提出层叠样式表的概念</p><ul><li>css从此成为网页开发的标准之一，对于网页排版印刷、美感、亲和力有着深远的影响和意义</li><li>在这之后两年，W3C的css工作小组(即哈肯·维姆·莱团队)推出了css1.0规范以及后续的迭代版本</li></ul></blockquote><h4 id="3-css的版本"><a href="#3-css的版本" class="headerlink" title="3. css的版本"></a>3. css的版本</h4><blockquote><p>2015年左右，w3c的css工作小组为了能更好的维护和管理css的特性，该组织决定不再以css的版本号比如css1.0、css2.1等方式来管理css，而是将每个css功能特性拆分成独立的功能模块，并且以Level1、Level2、Level3等方式来管理<br>可以通过W3C官网或<a href="https://drafts.csswg.org/%E6%9F%A5%E7%9C%8B%E5%88%B0CSS%E6%A8%A1%E5%9D%97%E7%9A%84%E5%90%84%E7%A7%8DLevel%E7%89%88%E6%9C%AC">https://drafts.csswg.org/查看到CSS模块的各种Level版本</a></p></blockquote><h4 id="4-CSS的研究方向"><a href="#4-CSS的研究方向" class="headerlink" title="4. CSS的研究方向"></a>4. CSS的研究方向</h4><blockquote><p>大体上css的学习可以朝三个方向进行研究</p><ul><li>特效(动画、3D、渐变等)</li><li>工程化(sass、less、postcss等)</li><li>布局(flex、grid、响应式等)</li></ul></blockquote><h3 id="二、CSS文件划分及功能分类"><a href="#二、CSS文件划分及功能分类" class="headerlink" title="二、CSS文件划分及功能分类"></a>二、CSS文件划分及功能分类</h3><h4 id="1-CSS文件划分"><a href="#1-CSS文件划分" class="headerlink" title="1.CSS文件划分"></a>1.CSS文件划分</h4><blockquote><p>在中大型项目中，一般会对CSS进行文件划分，根据文件的性质和用途，大概分为</p><ul><li>公共型样式<ul><li>可命名为<code>global.css</code>或<code>common.css</code>等名字，主要包括网站通用样式编写。例如：重置默认样式reset、网站通用布局、通用模块和元件、通用响应式系统等</li></ul></li><li>特殊型样式<ul><li>特殊型样式主要是根据当前页面来决定的文件，只针对当前页面做出特殊处理的样式，例如只在首页中用到的样式可放置在<code>index.css</code>中，在登录页面中用到的样式可放置在<code>login.css</code>中</li></ul></li><li>皮肤型样式<ul><li>皮肤型样式是针对网站需要皮肤功能时，把颜色、背景等抽离出来放到文件中的形式，例如：<code>theme-orange.css</code></li></ul></li></ul></blockquote><h4 id="2-CSS功能分类"><a href="#2-CSS功能分类" class="headerlink" title="2. CSS功能分类"></a>2. CSS功能分类</h4><blockquote><p>文件中具体包括哪些常见功能呢？</p><ul><li>重置样式</li><li>网站通用布局</li><li>通用模块</li><li>通用元件</li><li>通用响应式系统</li></ul></blockquote><h4 id="3-重置样式"><a href="#3-重置样式" class="headerlink" title="3. 重置样式"></a>3. 重置样式</h4><blockquote><p>主要是去除默认样式和统一不同设备下的表现形态</p><ul><li>通常为<code>Reset CSS</code>和<code>Normalize CSS</code>代码的结合版本</li><li>我们将在接下来的项目开发中把二者结合成为了一个<code>reset.css</code>文件，并在项目中进行使用</li></ul></blockquote><h4 id="4-网站通用布局"><a href="#4-网站通用布局" class="headerlink" title="4. 网站通用布局"></a>4. 网站通用布局</h4><blockquote><p>主要指的是对网站中出现的大块结构进行排版</p><ul><li>例如：PC端中的菜单、内容的左右布局方案；移动端中的头部、列表、尾部的上中下布局方案</li></ul></blockquote><h4 id="5-通用模块"><a href="#5-通用模块" class="headerlink" title="5. 通用模块"></a>5. 通用模块</h4><blockquote><p>指的是网页中可以重复使用的较大整体，比如：</p><ul><li>导航</li><li>登录</li><li>注册</li><li>各种列表</li><li>评论</li><li>搜索等</li></ul></blockquote><h4 id="6-通用元件"><a href="#6-通用元件" class="headerlink" title="6. 通用元件"></a>6. 通用元件</h4><blockquote><p>指的是不可再分的较为小巧的个体，通常被重复使用与各种模块中，比如：</p><ul><li>按钮</li><li>输入框</li><li>loading</li><li>图标等</li></ul></blockquote><h4 id="7-通用响应式系统"><a href="#7-通用响应式系统" class="headerlink" title="7. 通用响应式系统"></a>7. 通用响应式系统</h4><blockquote><p>指的是在不同设备下要实现响应式布局，当满足了某个断点设定后调用的相应变化样式，比如：</p><ul><li>浮动添加</li><li>栅格生效</li><li>显示隐藏</li><li>版心宽度等</li></ul></blockquote><h3 id="三、标签默认样式及清除"><a href="#三、标签默认样式及清除" class="headerlink" title="三、标签默认样式及清除"></a>三、标签默认样式及清除</h3><h4 id="1-标签默认样式"><a href="#1-标签默认样式" class="headerlink" title="1. 标签默认样式"></a>1. 标签默认样式</h4><blockquote><p>一些HTML标签在浏览器中都会有默认样式</p><ul><li>开发时浏览器的默认样式可能会给我们带来多浏览器兼容性问题，影响开发效率，所以解决办法就是一开始就将浏览器的默认样式全部去掉，更准确说是通过重新定义标签样式覆盖浏览器的css默认属性</li><li>还有一种方式是用通配符选择器<code>*</code>，这是一种非常强大、最简单、最安全的方法，但是非常占用资源。</li><li>推荐以下3种Reset CSS学习<ul><li>雅虎 YUI Reset CSS</li><li>CSS Tools:Reset CSS<ul><li>通常在网页开发中，要去掉在这些影响尺寸和位置的默认样式及其他影响布局的默认值，可以参考它</li></ul></li><li>Normalize CSS<ul><li><code>Reset css</code>相对暴力，不管你有没有用，统统重置成一样的效果，而且影响的范围很大</li><li><code>Normalize css</code>比<code>Reset css</code>更加平和</li></ul></li></ul></li></ul><blockquote><p>创造<code>Normalize css</code> 有以下几个目的</p></blockquote><ul><li>保护有用的浏览器默认样式而不是完全去掉他们</li><li>一般化的样式：为大部分HTML元素提供</li><li>修复浏览器自身的bug并保证各浏览器的一致性</li><li>优化CSS可用行政：用一些小技巧</li><li>解释代码：用注释和详细的文档</li></ul></blockquote><h4 id="2-CSS重置样式最佳实践"><a href="#2-CSS重置样式最佳实践" class="headerlink" title="2. CSS重置样式最佳实践"></a>2. CSS重置样式最佳实践</h4><blockquote><p>在接下来的项目开发中，我们会采用<code>Normalize CSS</code>和<code>Reset CSS</code>结合代码，形成一个更加强大的方案。</p></blockquote><h3 id="四、CSS方法论"><a href="#四、CSS方法论" class="headerlink" title="四、CSS方法论"></a>四、CSS方法论</h3><h4 id="1-CSS方法论"><a href="#1-CSS方法论" class="headerlink" title="1. CSS方法论"></a>1. CSS方法论</h4><blockquote><ul><li>CSS方法论是一种面向CSS、由个人和组织设计、已被诸多项目检验且公认有效的最佳实践</li><li>这些方法论都会涉及结构化的命名约定，并且在阻止CSS时可提供相应的指南，从而提升代码的性能、可读性以及可维护性</li></ul></blockquote><h4 id="2-常见的CSS方法论"><a href="#2-常见的CSS方法论" class="headerlink" title="2. 常见的CSS方法论"></a>2. 常见的CSS方法论</h4><blockquote><ul><li>OOCSS</li><li>BEM</li><li>SMACSS</li><li>Atomic CSS</li></ul></blockquote><h5 id="OOCSS"><a href="#OOCSS" class="headerlink" title="OOCSS"></a>OOCSS</h5><blockquote><p>OOCSS(object-oriented css)是指向面对对象的CSS，由Nicole Sullivan在2009年提出，借鉴了面向对象编程的抽象思维</p><ul><li>其核心概念是采用模块化的实现方式，将CSS分解成可复用和继承的对象，也就是将关注点从页面转移到页面内的组件</li><li>包含两条核心原则：<ul><li>结构与皮肤分离，即不要将位置、尺寸等结构属性和字体、颜色等皮肤属性写在一个选择器中</li><li>内容与容器分离，即让对象的行为可预测，避免对位置的依赖，子元素即使离开了容器也应该能正确显示</li></ul></li><li>命名约定：<ul><li>在OOCSS中，类名既要能传递对象的用途，也要有通用性，例如mod、complex、pop等</li><li>如果将CSS类命名的太语义化，如<code>navigation-bar</code>,那么就会将其限制在导航栏，无法应用到网页的其他位置<br><strong>缺点</strong></li><li>虽然样式的粒度变小了，但同时会产生许多充满类的HTML元素</li><li>在避免特殊性冲突时，OOCSS选择的方案是放弃层叠，这样就无法最大程度地利用关系选择器的优势</li><li>为了让类能更通用，在命名时就得弱化语义</li></ul></li></ul></blockquote><h5 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h5><blockquote><p>国内很多大厂主要采用BEM+SMACSS这两种方法论的结合命名约定<br>BEM(block element modifier)是指块级元素修饰符，BEM分为三个部分：</p><ul><li>块是一个独立实体，最高级抽象，例如菜单、文本框等</li><li>元素是块的组成部分，被包含在块中，无法自成一体，例如菜单项、标题等</li><li>修饰符是块或元素的状态，可更改它们的外观或行为，例如高亮、选中等</li></ul></blockquote><blockquote><p><strong>要求</strong></p><ul><li>BEM中的块、元素和修饰符需要全部小写</li><li>名称中的单词用连字符<code>-</code>分隔</li><li>元素由双下划线<code>__</code>分隔</li><li>修饰符由双连字符<code>--</code>分隔</li><li>注意：块和元素都既不能是HTML元素名或ID，也不依赖其他块或元素</li></ul><pre><code>&lt;style&gt;  .form &#123;  &#125;  .form--theme-xmas &#123;  &#125;  .form__input &#123;  &#125;  .form__submit &#123;  &#125;  .form__submit--disabled &#123;  &#125;&lt;/style&gt;&lt;form class=&quot;form form--theme-xmas&quot;&gt;  &lt;input class=&quot;form__input&quot; type=&quot;text&quot; /&gt;  &lt;input class=&quot;form__submit form__submit--disabled&quot; type=&quot;submit&quot; /&gt;&lt;/form&gt;</code></pre><ul><li>在上面的代码中<ul><li><code>.form</code>是块</li><li><code>.form_input</code>和<code>.form_submit</code>是其元素</li><li><code>.form--theme-xmas</code>是其修饰符</li><li><code>.form__submit--disabled</code>是<code>.form__submit</code>的修饰符<blockquote><p>BEM的核心思想就是用这种命名约定来清晰的表达出类的含义以及其他类之间的关系</p></blockquote></li></ul></li></ul></blockquote><blockquote><p><strong>BEM的缺点</strong> </p><ul><li>BEM与OOCSS一样，也抛弃了层叠，因此也不能挖掘出关系选择器的潜力</li><li>CSS类名可能会比较长而且复杂</li><li>需要完善规则说明文档，否则HTML结构将难以阅读</li></ul></blockquote><h5 id="SMACSS"><a href="#SMACSS" class="headerlink" title="SMACSS"></a>SMACSS</h5><blockquote><p>SMACSS(scalable and modular architecture for css)是指可伸缩及模块化的CSS架构<br>由Jonathan Snook在2011年雅虎工作时提出，他在OOCSS和BEM的基础上添加了五种类别的组件的处理规则，具体如下：</p><ul><li>1、**基础(base)**是为HTML元素定义默认样式，可以包含属性、伪类等选择器</li><li>2、**布局(layout)**会将页面分为几部分，可作为高级容器包含一个或多个模块，例如左右分栏、栅格系统等</li><li>3、**模块(module)**又名对象或块，是可用的模块化部分，例如导航栏、产品列表等</li><li>4、**状态(state)**描述的是任一模块或布局在特定状态下的外观，例如隐藏、激活等</li><li>5、**主题(theme)**也就是换肤，描述了页面的外观，特克修改前面四个类别的样式，例如链接颜色、布局方式<blockquote><p>命名约定：推荐使用前缀来区分布局、模块、状态和主题，如下列</p></blockquote></li><li><code>l-</code>或<code>layout-</code>用作布局的前缀，例如：<code>.l-inline</code></li><li><code>m-</code>或模块自身的命名用作其前缀，例如<code>.m-profile</code>、<code>field</code></li><li><code>is-</code>用作状态的前缀，例如<code>.is-collapsed</code>、<code>.is-active</code></li><li><code>theme-</code>用作主题的前缀，例如：<code>.theme-a-background</code><blockquote><p>注意，由于<code>base</code>规则是直接作用于元素的，因此不需要前缀</p></blockquote></li></ul></blockquote><blockquote><p><strong>共享</strong><br>在实际开发中，不需要局限于某一CSS方法论，很多时候可以结合使用，共享模块化CSS的规则。例如遵循OOCSS的第一条分离原则，BEM的命名约定，以及SMACSS的分类前缀，具体如下所列：</p><ul><li>基础仍旧沿用SMACSS的规则，布局和模块使用SMACSS的前缀</li><li>子元素用双下划线(__)分隔，其状态前缀沿用<code>is-</code></li><li>修饰符也以<code>is-</code>为前缀，与模块组合时用双连字符(–)分隔</li><li>适当层叠，最好保持在一层<blockquote><p>任何软件设计都存在不完美的地方，CSS方法论也一样，比如：命名过长不易维护，HTML不够简洁等；<br>但它的优势也很明显，比如样式不容易冲突，尤其是复杂的样式结构</p></blockquote></li></ul></blockquote><h3 id="五、样式规范"><a href="#五、样式规范" class="headerlink" title="五、样式规范"></a>五、样式规范</h3><blockquote><ul><li>使用<strong>类选择器</strong>，放弃ID选择器：ID在一个页面的唯一性导致了如果以ID为选择器来写CSS，就无法重用。</li><li>命名应简约而不失语义：<strong>反对过长</strong>命名和<strong>没有语义</strong>的命名</li><li>相同语义的不同类命名：直接加数字或字母区分即可</li><li>防止污染和被污染：为了防止后代选择器污染，尽量采用<code>&gt;</code>方式，例如：<code>-m-nav&gt;li</code>，而不是<code>-m-nav li</code></li><li>最后一个值也以分号结尾：通常在大括号结束前的值可以省略分号，但是这样做会对修改、添加和维护工作带来不必要的失误和麻烦</li><li>省略值为0时的单位：为节省不必要的字节同时也方便阅读</li><li>根据属性的重要性按顺序书写：先显示定位布局类属性，后写盒模型等自身属性，最后是文本类及修饰类属性</li><li>CSS需要进行格式化和对齐处理：推荐vscode插件</li></ul></blockquote><h3 id="六、CSS命名规范"><a href="#六、CSS命名规范" class="headerlink" title="六、CSS命名规范"></a>六、CSS命名规范</h3><blockquote><ul><li>见css文件夹中的代码规范文档</li></ul></blockquote><h2 id="CSS还原UI设计"><a href="#CSS还原UI设计" class="headerlink" title="CSS还原UI设计"></a>CSS还原UI设计</h2><blockquote><p><strong>企业前端项目开发的真实流程</strong></p><ul><li>产品经理出原型图</li><li>交给UI设计师根据需求设计UI源文件</li><li>推送至墨刀&#x2F;蓝湖等协作设计开发平台</li><li>给到程序员开发布局网页</li></ul></blockquote><h3 id="一、长度单位与颜色分类"><a href="#一、长度单位与颜色分类" class="headerlink" title="一、长度单位与颜色分类"></a>一、长度单位与颜色分类</h3><h4 id="1-长度"><a href="#1-长度" class="headerlink" title="1. 长度"></a>1. 长度</h4><blockquote><p>CSS中使用的每个属性值都允许拥有一个或一组值</p><ul><li>CSS中有两种长度单位——绝对长度单位和相对长度单位</li></ul></blockquote><blockquote><p><strong>绝对长度单位</strong></p><ul><li>它们与其他任何东西都没有关系<table><thead><tr><th>单位</th><th>名称</th></tr></thead><tbody><tr><td>cm</td><td>厘米</td></tr><tr><td>mm</td><td>毫米</td></tr><tr><td>in</td><td>英寸</td></tr><tr><td>pt</td><td>点</td></tr><tr><td>px</td><td>像素</td></tr></tbody></table><blockquote><p>除px外，其他单位并不常用</p></blockquote></li></ul></blockquote><blockquote><p><strong>相对长度单位</strong></p><ul><li>相对长度单位相对于其他一些东西，比如父元素、视图端口大小</li><li>使用相对单位的好处是，经过一些仔细的规划，可以是文本或其他元素的大小与页面上的其他内容相对应<table><thead><tr><th>单位</th><th>名称</th></tr></thead><tbody><tr><td>em</td><td>在font-size中使用是相对于父元素的字体大小，在其他元素中使用是相对于自身字体的大小</td></tr><tr><td>ex</td><td>字符”x”的高度</td></tr><tr><td>ch</td><td>数字”0”的宽度</td></tr><tr><td>rem</td><td>根元素的字体大小</td></tr><tr><td>lh</td><td>元素的line-height</td></tr><tr><td>vw</td><td>视图宽度的1%</td></tr><tr><td>vh</td><td>视图高度的1%</td></tr><tr><td>vmin</td><td>视图较小尺寸的1%</td></tr><tr><td>vmax</td><td>试图大尺寸的1%</td></tr></tbody></table></li></ul></blockquote><h4 id="2-颜色"><a href="#2-颜色" class="headerlink" title="2. 颜色"></a>2. 颜色</h4><blockquote><ul><li>在css中，相同的颜色值可以在任何额地方使用</li><li>现代计算机的标准颜色系统是24位的，它允许通过不同的红绿蓝通道的组合显示大约1670万种不同的颜色</li></ul></blockquote><blockquote><p><strong>颜色关键词</strong></p><ul><li>颜色单词</li></ul></blockquote><blockquote><p><strong>RGB颜色</strong></p><ul><li>在CSS中，可以使用公式<code>rgb(red,green,blue)</code>将颜色指定为RGB值，每个参数定义到0到255之间的颜色强度</li><li>黑色:rgb(0,0,0)</li><li>白色:rgb(255,255,255)</li></ul></blockquote><blockquote><p><strong>RGBA值</strong></p><ul><li>RGBA颜色值是具有alpha通道的RGB颜色值的扩展，他指定了颜色的不透明度</li><li>RGBA颜色值指定为rgba(red,green,blue,alpha),alpha参数是结余0.0(完全透明)和1.0(完全不透明)之间的数字</li></ul></blockquote><blockquote><p><strong>HEX颜色</strong></p><ul><li>在CSS中，可以使用<code>#rrggbb</code>格式的十六进制指定颜色</li><li>其中rr、gg、bb是介于00和ff之间的十六进制值</li><li><code>#aabbcc</code>可以简写为<code>#abc</code></li></ul></blockquote><blockquote><p><strong>HSL颜色</strong></p><ul><li>在CSS中，可以使用色相、饱和度和明度来指定颜色，格式如<code>hsla(hue,saturation,lightness)</code></li><li>色相(hue)是色轮上从0到360的度数，0是红色，120是绿色，240是蓝色</li><li>饱和度(saturation)是一个百分比值，0%表示灰色阴影，100%是全色</li><li>亮度&#x2F;明度(lightness)也是百分比，0%是黑色，50%是既不明也不暗，100%是白色</li></ul></blockquote><h3 id="二、UI设计图的源文件种类"><a href="#二、UI设计图的源文件种类" class="headerlink" title="二、UI设计图的源文件种类"></a>二、UI设计图的源文件种类</h3><h4 id="1-什么是设计图源文件"><a href="#1-什么是设计图源文件" class="headerlink" title="1. 什么是设计图源文件"></a>1. 什么是设计图源文件</h4><blockquote><p>源文件是可以查看到图片所有的图层、通道、参考线、注解和颜色模式等信息，开发人员通过操作源文件，可以更加方便的控制图片，并快速的获取到图片信息 </p></blockquote><h4 id="2-常见的源文件"><a href="#2-常见的源文件" class="headerlink" title="2. 常见的源文件"></a>2. 常见的源文件</h4><blockquote><ul><li><code>.psd</code>格式源文件通过Photoshop工具制作</li><li><code>.sketch</code>格式源文件，通过<code>sketch</code>工具制作</li><li><code>.xd</code>格式源文件，通过XXD工具制作</li></ul></blockquote><h4 id="3-进行切图处理和信息获取的方式"><a href="#3-进行切图处理和信息获取的方式" class="headerlink" title="3. 进行切图处理和信息获取的方式"></a>3. 进行切图处理和信息获取的方式</h4><blockquote><p><strong>PS获取信息</strong></p><ul><li>打开PS–&gt;窗口–&gt;信息–&gt;通过查看面板获取信息</li><li>修改标尺单位：右击信息面板–&gt;打开面板选项设置<code>鼠标坐标</code>为像素</li><li>尺寸测量方式：<ul><li>矩形选框工具，按shift&#x2F;ctrl来扩大&#x2F;缩小所选中范围</li><li>移动工具：按住ctrl键鼠标触碰到需要量尺寸区尺寸的两个元素的边缘或者选中对应图层即可</li></ul></li><li>颜色值的获取<ul><li>吸管工具：吸取需要元素的颜色，点开拾色器&#x2F;前景色查看不同类型的颜色值</li></ul></li><li>文字相关属性的获取<ul><li>矩形选框工具：选中对应的文字图层–&gt;在字符面板查看即可<br><strong>PS切图</strong></li></ul></li><li>编辑–&gt;首选项–&gt;打开增效工具–&gt;勾选“启用生成器”</li><li>选择移动工具–&gt;点击需要切图的图片–&gt;<strong>修改图层的名字</strong>，并添加常见的<strong>图片后缀</strong>–&gt;按下回车键即可</li><li>在源文件根目录里自动生成了一个文件夹，里面就是所切图片</li><li>切2倍图：修改图层名称时，在名称前添加<code>200% 空格</code></li></ul></blockquote><blockquote><p><strong>蓝湖</strong></p><ul><li>登录蓝湖，下载photoshop插件，安装成功后启动PS–&gt;选择”窗口”–&gt;扩展功能–&gt;选择蓝湖即可</li><li>一般是设计师切图后，把源文件上传至蓝湖，开发者就能在蓝湖查看各种信息、下载素材</li></ul></blockquote><blockquote><p><strong>Pxcook</strong></p></blockquote><blockquote><p><strong>imgcook设计稿智能平台</strong></p><ul><li>网址：<a href="https://www.imgcook.com/">https://www.imgcook.com/</a>(opens new window)</li><li>目前此产品是阿里巴巴前端委员会智能化小组的服务化的内外落地产品</li><li>通过智能化技术一键生成可维护的前端代码</li><li>生成后的代码还是需要根据实际需求调整，在学习阶段可供参考</li></ul></blockquote><h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><blockquote><ul><li>蓝湖打开设计稿</li><li>准备图标库、字体文件夹、图片文件夹</li><li>基础文件：<ul><li>重置样式：global&#x2F;reset.css</li><li>基础样式：base.css</li><li>放样式的文件：index.css</li></ul></li><li>网页文件：index.html<ul><li>搭建网页框架</li><li>引入重置样式、基础样式、其他样式、字体文件</li></ul></li><li>自定义字体<ul><li>先把重置样式文件里设置默认字体的代码注释掉</li><li>在base.css文件里自定义字体,设置body样式<br>-使用@font-face引入字体文件</li></ul></li></ul><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span> &amp;#123<span class="token punctuation">;</span></span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*字体类型*/</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url()</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*引入字体文件*/</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意：ttf文件一定要加<code>format(&quot;ture&quot;)</code></p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS核心知识点（三）</title>
      <link href="/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="浮动、BFC规范、清除浮动的最佳实践"><a href="#浮动、BFC规范、清除浮动的最佳实践" class="headerlink" title="浮动、BFC规范、清除浮动的最佳实践"></a>浮动、BFC规范、清除浮动的最佳实践</h2><h3 id="一、实现CSS布局的几种策略"><a href="#一、实现CSS布局的几种策略" class="headerlink" title="一、实现CSS布局的几种策略"></a>一、实现CSS布局的几种策略</h3><blockquote><ul><li><strong>网页布局的本质是</strong>：用CSS来摆放盒子，把盒子摆放到页面对应位置。</li><li>CSS中提供了以下几种不同的CSS<strong>布局策略</strong>，来实现页面的布局<ul><li>正常布局流</li><li>浮动布局</li><li>定位布局</li><li>表格布局(<code>display:table;</code>)</li><li>响应式设计</li><li>弹性布局</li><li>网格布局</li><li>多列布局<blockquote><p>以上每种布局方式，都有自己的用途，也有各自的优缺点，相互辅助；通过理解各个布局方法的设计理念，我们能够找到构建理想网页需要的布局方案</p></blockquote></li></ul></li></ul></blockquote><h3 id="二、正常布局流"><a href="#二、正常布局流" class="headerlink" title="二、正常布局流"></a>二、正常布局流</h3><blockquote><p>概念：</p><ul><li>在不对页面进行任何布局控制时，浏览器默认的HTML布局方式</li><li>正常的布局流就是规定了。在默认情况下块级元素和内联元素的排版方式</li></ul></blockquote><ol><li><p>正常布局流中，块级元素的排列方式</p><blockquote><ul><li>块级盒子会从包含块的顶部开始，按序垂直排列</li><li>同级盒子间的垂直距离会由“margin”属性决定</li><li>相邻两个块级盒子之间的垂直距离会遵循外边距折叠原则</li></ul></blockquote></li><li><p>正常布局流中，内联元素排版方式</p><blockquote><ul><li>盒子会从包含块的顶部开始，按序水平排列</li><li>只有水平外边距(垂直方向无效)、边框和内边距会被保留</li><li>这些盒子可以以不同方式在垂直方向对齐：可以在底部对齐或顶部对齐，或者按文字底部进行对齐???</li></ul></blockquote></li></ol><blockquote><blockquote><p>注意：所有的HTML元素本质上都是一个盒子模型，并具有盒模型的结构和属性</p></blockquote></blockquote><h3 id="三、浮动布局"><a href="#三、浮动布局" class="headerlink" title="三、浮动布局"></a>三、浮动布局</h3><ol><li>浮动布局起源<blockquote><p><strong>最初</strong></p><ul><li>引入<code>float</code>属性是为了能让web开发人员实现简单的布局，包括在一列文本中浮动的图像，文字环绕在他的左边或右边</li><li>但web开发人员很快意识到，任何东西都可以浮动，而不仅仅是图像，所以浮动的使用范围扩大了</li></ul></blockquote></li><li>浮动是如何工作的<blockquote><ul><li>把一个元素”浮动”(float)起来，会改变该元素本身和在正常布局流(normal flow)中跟随它的其他元素的行为</li><li>这一元素会浮动到左侧或右侧，并且从正常布局流中移除，这时候其他的周围内容就会在这个被设置浮动的元素周围环绕</li><li><strong>简单理解</strong><br> 当元素添加浮动后，元素就会<strong>脱离文档流</strong>，按照指定方向(左右)发生移动，遇到父级边界或者相邻的浮动元素就会停下来，同时会影响到他后面元素的排版行为<ul><li>文档流：文档中可显示对象在排列时所占据的位置&#x2F;空间(在页面中占位置)</li><li>脱离文档流：元素相当于漂浮起来，不占据页面中的位置</li></ul></li></ul></blockquote></li><li>浮动的本质和要点<blockquote><ul><li>浮动的本质功能：用来实现并排</li><li>浮动使用要点：要浮动，并排的盒子<strong>都要</strong>设置浮动</li><li>父盒子要有足够的宽度，否则子盒子会掉下去</li></ul></blockquote></li><li>如何产生浮动<blockquote><ul><li>给需要浮动的元素添加float属性，对应值如下：<table><thead><tr><th>属性</th><th>值</th></tr></thead><tbody><tr><td><code>float</code></td><td>①<code>none</code>默认值，元素不浮动    ②<code>left</code>元素向左浮动    ③<code>right</code>元素向右浮动    ④<code>inherit</code>规定应该从父元素继承float属性的值(一般不用)</td></tr></tbody></table></li></ul></blockquote></li></ol><h3 id="四、元素浮动的特性"><a href="#四、元素浮动的特性" class="headerlink" title="四、元素浮动的特性"></a>四、元素浮动的特性</h3><ol><li>元素添加浮动后，脱离文档流<blockquote><p>同时会影响其后面的元素，但不影响它前面的元素</p></blockquote></li><li>如果父元素的宽度不够<blockquote><p>子元素在放不下的情况下会换行显示</p></blockquote></li><li>浮动的顺序贴靠特性<blockquote><p>子盒子会按顺序进行贴靠，如果没有足够空间，则会寻找前一个兄弟元素</p></blockquote></li><li>元素浮动后，具有行内块级元素特性<blockquote><ul><li>浮动的元素不再区分块级元素、行内元素，因为已经脱离了标准文档流</li><li>浮动后，任何标签都能设置宽高，但不独占一行</li></ul></blockquote></li><li>浮动的元素会造成父元素高度塌陷<blockquote><ul><li>当<strong>父元素没有设置高度</strong>、且子元素设置浮动时，父元素会形成高度塌陷</li><li>因为子元素浮动后不占据页面空间</li></ul></blockquote></li><li>浮动对文字的影响<blockquote><ul><li>会形成常见的文字环绕效果，其实现方式主要是将图片左&#x2F;右浮动</li><li>浮动后其相邻文字就会环绕图片排列</li><li>图片&#x2F;子盒子要放在文字前&#x2F;中间；若放在文字后，则没有环绕效果</li></ul></blockquote></li><li>使用浮动实现网页布局<blockquote><ul><li>垂直显示的盒子，不要设置浮动，只有并排显示的盒子才需要设置浮动</li><li>每个盒子都是独立存在的，盒子内部也可以继续使用浮动</li><li>注意点：<ul><li>先搭建好框架</li><li>使用语义化标签、进行注释</li><li>对最后一个盒子的处理<code>last-child</code></li><li>在实践中发现，ul的四个li，最靠近右边的是第一个,因为右浮动，从右往左排列</li></ul></li></ul></blockquote></li></ol><h3 id="五、BFC规范和浏览器差异"><a href="#五、BFC规范和浏览器差异" class="headerlink" title="五、BFC规范和浏览器差异"></a>五、BFC规范和浏览器差异</h3><blockquote><ul><li>BFC(Box Formatting Context，块级格式上下文)是页面上的一个隔离的独立容器</li><li>容器里的子元素和容器外的元素互不干扰</li><li>元素浮动的第五个特性：“父元不设高度，子元浮动，会造成父元素高度塌陷”，其原因就是这个盒子没有形成BFC</li></ul></blockquote><ol><li>创建BFC的方法<blockquote><ul><li>方法1：float的值不是<code>none</code><ul><li>缺点：该方法可以实现效果，但没有意义，不可能随意给盒子设置浮动</li></ul></li><li>方法2：position的值不是<code>static</code>或<code>relative</code><ul><li>缺点：该方法可以实现，但不靠谱</li></ul></li><li>方法3：display的值是<code>inline-block</code>、<code>flex</code>、<code>inline-flex</code><ul><li>缺点：该方法可以实现，但没有意义，因为不可能随意更改盒子类型</li></ul></li><li>方法4：<code>overflow:hidden;</code><ul><li>缺点：该方法可以实现，但不满足所有的场景，例如想要使溢出的元素显示的情况；</li><li>但这是非常好用的方法，比其他方式使用的更多</li></ul></li></ul></blockquote></li><li>BFC的其他作用<blockquote><ul><li>BFC可以取消盒子margin塌陷：<ul><li>方法1：既可以解决父子元素也可以解决兄弟元素的外边距塌陷</li><li>方法2：可以解决父子元素之间的塌陷，但兄弟元素无效</li><li>方法3：<code>inline-block</code>和<code>inline-flex</code>的效果和方法1一样，但转成行内块元素时，相邻的行内块元素会产生空白间隙。<code>flex</code>对兄弟元素无效，只能解决父子元素之间的塌陷</li><li>方法4：可以解决<strong>父子元素</strong>之间垂直方向外边距塌陷问题，但解决不了兄弟元素之间的塌陷</li></ul></li><li>BFC可以阻止元素被浮动元素覆盖</li></ul></blockquote></li><li>浏览器差异<blockquote><ul><li>IE6、7浏览器使用haslayout机制和BFC规范略有差异</li></ul></blockquote><ul><li>比如：IE浏览器可以使用zoom:1属性，让盒子拥有layout<blockquote><ul><li>如果要制作兼容到IE6、7的网页时，尽量让网页布局变得简单，内部有浮动的盒子要设置height属性，规范编程，就没有问题</li></ul></blockquote></li></ul></li></ol><h3 id="六、清除浮动"><a href="#六、清除浮动" class="headerlink" title="六、清除浮动"></a>六、清除浮动</h3><blockquote><ul><li>清除浮动：浮动一定要封闭到一个盒子中，否则就会对页面后续元素产生影响</li></ul></blockquote><ol><li>清除浮动方法1<blockquote><ul><li>给父盒子设置<code>clear:both;</code>属性</li><li><code>clear</code>表示清除浮动对自己的影响，<code>both</code>表示左右浮动全部清除</li><li>该方法不推荐。父盒子不会被撑起来。</li></ul></blockquote></li><li>清除浮动方法2<blockquote><ul><li>在两个父盒子之间”隔墙”隔一个携带<code>clear:both;</code>的盒子</li><li>可以清除浮动，但不能撑起盒子。而且新增一个div对页面有影响</li><li>不推荐</li></ul></blockquote></li><li>清除浮动方法3<blockquote><ul><li>原理是让内部有浮动的父盒子形成BFC，它就能关闭住内部的浮动</li><li>在创建BFC的四个方法中，最好的方法是<code>overflow:hidden;</code>，但这个方法有局限性</li><li>不能解决兄弟元素的外边距塌陷</li></ul></blockquote></li><li>清除浮动方法4——最佳方法<blockquote><ul><li>使用<code>::after</code>伪元素，给盒子添加最后一个子元素</li><li>给<code>::after</code>设置<code>clear:both</code></li><li>别忘了写<code>content=&quot;&quot;;</code></li><li><code>display:block</code>,伪元素默认是行内元素，所以要把它转化为块级元素。若不转换，则父元素不能被撑起来。</li><li>不能解决兄弟元素的外边距塌陷</li><li>强烈推荐</li></ul></blockquote></li></ol><h3 id="七、浮动实战应用"><a href="#七、浮动实战应用" class="headerlink" title="七、浮动实战应用"></a>七、浮动实战应用</h3><blockquote><ul><li>浮动的元素一般都会在其外边套一个标准流</li></ul></blockquote><ol><li>实现左右两列式布局</li><li>实现一行多列式布局</li><li>三列式布局，中间自适应<blockquote><ul><li>注意点：<ul><li>body里先写左右，再写中间。左右盒子各自浮动，再填充中间元素</li><li>用怪异盒模型保持内边距和边框不变</li><li>用外边距控制中间元素位置</li><li>用伪元素+clear:both来清除浮动</li></ul></li></ul></blockquote></li><li>多行多列式布局</li><li>实现整站结构布局</li><li>作业1：前端必会的三种CSS布局技术</li><li>作业2：酷狗音乐热门榜单</li><li>小米商城产品展示效果</li></ol><h2 id="CSS定位、层叠顺序、层叠上下文"><a href="#CSS定位、层叠顺序、层叠上下文" class="headerlink" title="CSS定位、层叠顺序、层叠上下文"></a>CSS定位、层叠顺序、层叠上下文</h2><blockquote><ul><li>CSS中利用position属性用于指定一个元素在文档中的定位方式。元素的定位方式有五种类型：<table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>static</code></td><td>没有定位，元素出现在正常的流中(默认值，可以忽略)</td></tr><tr><td><code>relative</code></td><td>相对定位，相对于自身正常位置进行位置的调整</td></tr><tr><td><code>absolute</code></td><td>绝对定位，相对于其最近的定位的父元素定位，进行位置的调整</td></tr><tr><td><code>fixed</code></td><td>固定定位，相对于浏览器窗口进行位置调整</td></tr><tr><td><code>sticky</code></td><td>粘性定位，是基于用户的滚动位置来定位</td></tr></tbody></table><blockquote><p><code>static</code>相当于元素没有加定位效果，如果元素加了定位，后面需要去掉，可以添加<code>position:static;</code>|</p></blockquote></li></ul></blockquote><h3 id="一、相对定位"><a href="#一、相对定位" class="headerlink" title="一、相对定位"></a>一、相对定位</h3><blockquote><p>盒子可以想对自己&#x3D;&#x3D;原来的位置&#x3D;&#x3D;进行调整，称之为相对定位</p><ul><li>给需要添加相对定位的元素，加上<code>position:relative;</code></li><li>元素的位置通过(位置描述词):<code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>属性进行位置调整</li><li>属性值可以是正数也可以是负数<table><thead><tr><th>定位的位置属性</th><th>描述</th></tr></thead><tbody><tr><td><code>top</code></td><td>向下移动</td></tr><tr><td><code>bottom</code></td><td>向上移动</td></tr><tr><td><code>left</code></td><td>向右移动</td></tr><tr><td><code>right</code></td><td>向左移动</td></tr><tr><td>值可以为负数</td><td>即往规定方向相反移动</td></tr></tbody></table></li></ul></blockquote><blockquote><p>相对定位的特点</p><ul><li>相对定位的元素，会在“老家留坑”，本质上仍然是在原来的位置，即:元素的初始位置占据的空间会被保留</li><li>只不过渲染在新的地方而已，渲染的图形可以比喻成影子，不会对页面其他元素产生任何影响</li></ul></blockquote><h3 id="二、相对定位应用场景"><a href="#二、相对定位应用场景" class="headerlink" title="二、相对定位应用场景"></a>二、相对定位应用场景</h3><blockquote><ul><li>用来微调元素自身的位置(案例1，2，3)</li><li>可以当做绝对定位的参考盒子(绝对定位中会讲到)</li><li>用来提升自身的层级</li></ul></blockquote><ol><li>鼠标滑动到元素，元素少量位置偏移动画 <img src="相对定位应用场景1.gif"></li><li>网站导航 <img src="相对定位场景2.png"></li><li>导航(鼠标滑动带过下划线)<blockquote><ul><li>鼠标滑过时，背景颜色和a标签的文字一起变化。其前提是a标签是&#x3D;&#x3D;块级元素&#x3D;&#x3D;</li><li>知识点：块级元素没有设置宽高时，将自动撑满父盒子，但并不是继承！！！ <img src="相对定位场景3.png"></li></ul></blockquote></li><li>水平进度条<blockquote><ul><li>右浮动实现元素从右往左开始排列成一行，第一个排在最后面，最后一个排在最左边</li><li>通过相对定位微调线条位置，使其与圆形在垂直方向对其</li><li>利用<code>~</code>后续兄弟选择器，来选择他后面的元素，修改样式 <img src="相对定位场景4.png"></li></ul></blockquote></li></ol><h3 id="三、绝对定位"><a href="#三、绝对定位" class="headerlink" title="三、绝对定位"></a>三、绝对定位</h3><blockquote><p>盒子可以在浏览器中以坐标进行位置精准描述，拥有自己的绝对位置</p><ul><li>给需要添加绝对定位的元素，加上<code>position:absolute;</code></li><li>元素的位置通过(位置描述词)：<code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>属性进行调整位置</li><li>属性值可以是正数或负数<table><thead><tr><th>定位的位置属性</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>到上边的距离</td></tr><tr><td>bottom</td><td>到下边的距离</td></tr><tr><td>left</td><td>到左边的距离</td></tr><tr><td>right</td><td>到右边的距离</td></tr></tbody></table></li></ul></blockquote><blockquote><p><strong>绝对定位元素8大特性：</strong></p><ol><li>绝对定位的元素，相对离自己最近的定位的父元素进行位置调整</li></ol><ul><li>若父元素未定位(没有<code>position: ;</code>)，则用祖先元素定位，绝对定位是相对于定位的祖先元素进行位置调整</li></ul><ol start="2"><li>如果没有定位的父元素，则相对body进行位置调整</li><li>元素完全脱离文档流，释放器原本所占据的空间</li></ol><ul><li>不会对其他元素造成任何干扰，而是对他们进行压盖</li><li>脱离文档流的方法：浮动、绝对定位、固定定位</li><li>使用绝对定位的元素将会是一种漂浮状态</li></ul><ol start="4"><li>元素的层级提升，会覆盖在其他元素上</li><li>行内元素加上定位后，会具有行内块元素特性，支持宽高设置</li><li><code>margin:auto;</code>水平居中失效，因为它变成了行内块元素</li><li>定位元素未设置宽高情况下，同时设置top和bottom会改变元素高，同时设置left、right会改变元素宽</li><li>在元素设置了宽高情况下，同时设置top与bottom，会以top值为主，bottom不生效；同时设置left与right，则以left为主，right不生效</li></ol><ul><li>top &gt; bottom,left &gt; right</li></ul></blockquote><blockquote><p><strong>使盒子水平、垂直居中</strong></p><ol><li>方法1：</li></ol><ul><li>垂直居中：top&#x3D; [父盒子高度-子盒占位高(content+padding+border+margin)]&#x2F;2</li><li>水平居中：left&#x3D;[父盒子宽度-子盒占位宽(content+padding+border+margin)]&#x2F;2</li></ul><ol start="2"><li>方法2：</li></ol><ul><li>垂直居中：top:50%，margin-top:<code>-</code>自己高度的一半</li><li>水平居中：left:50%,margin-left:<code>-</code>自己宽度的一半</li><li>记得用负号</li></ul></blockquote><blockquote><p><strong>应用场景</strong></p><ul><li>绝对定位用来制作<strong>压盖、遮罩</strong>效果</li><li>结合CSS精灵使用</li><li>结合JS实现动画</li><li>绝对定位应用非常多，灵活度也很高，靠经验积累</li></ul></blockquote><ol><li>绝对定位实现黑色半透明遮罩层<blockquote><p>注意：</p><ul><li>伪元素+.hover的写法：<code>.box:hover::after</code>，中间不用空格</li></ul></blockquote></li><li>绝对定位实现带三角的会话框<blockquote><p>注意：</p><ul><li>用<code>border-radius</code>使背景图片&#x2F;图片变成圆形</li></ul></blockquote></li></ol><h3 id="四、固定定位"><a href="#四、固定定位" class="headerlink" title="四、固定定位"></a>四、固定定位</h3><blockquote><p><strong>介绍</strong></p><ul><li>给需要添加固定定位的元素加上position:fixed;</li><li>元素的位置通过位置描述词：left、top、right、bottom属性进行位置调整</li><li>属性值可以是正数或负数</li><li>固定定位只能以页面为参考点，并没有绝对定位的参考点</li><li>固定定位脱离标准文档流</li><li>除了其位置是相对于浏览器窗口而言以外，其他与绝对定位的特性一致</li></ul></blockquote><blockquote><p><strong>应用场景</strong></p><blockquote><p>不管浏览器的滚动条如何滚动，元素始终相对于&#x3D;&#x3D;浏览器窗口&#x3D;&#x3D;的位置不变</p></blockquote><ol><li>固定定位实现返回顶部</li><li>常见的登录弹窗效果 我的疑问：</li></ol><ul><li>点击登录怎么跳出登录框？a标签的href是否可以链接它？<ul><li>目前学到的东西还做不到</li></ul></li><li>点击登录框的取消，怎么返回原页面<ul><li>目前学到的东西还做不到</li></ul></li><li>mask的尺寸问题，怎么全页面遮罩？绝对定位top&#x3D;0,left&#x3D;0？<ul><li>固定定位，四个方向距离都&#x3D;0</li></ul></li><li>登录框怎么垂直、水平居中在页面上，不论界面怎么缩放。<ul><li>固定定位</li></ul></li></ul><pre><code>position:fixed;top:50%left:50%transform:translate(-50%,-50%)</code></pre><ol start="3"><li>左右固定，中间自适应</li></ol></blockquote><h3 id="五、粘性定位"><a href="#五、粘性定位" class="headerlink" title="五、粘性定位"></a>五、粘性定位</h3><blockquote><blockquote><p>它的诞生就是为了实现字母排序显示效果(应用场景2)<br><strong>粘性定位解读：</strong></p></blockquote><ul><li>给需要的添加粘性定位的元素，加上position:sticky;</li><li>粘性定位可以看做是相对定位与固定定位的混合产物(这里的固定定位，并不是上面第四点的position:fixed;只是具有相似点)</li><li>当滚动高度小于元素所在位置时，元素以&#x3D;&#x3D;相对&#x3D;&#x3D;定位呈现</li><li>当滚动高度大于元素所在位置时，元素以&#x3D;&#x3D;固定&#x3D;&#x3D;定位呈现</li><li>当滚动高度大于(元素的父元素底部与浏览器高)时，元素相对于父元素定位，一起移走</li><li>粘性定位相对离他最近的一个拥有“滚动机制”的祖先元素(当该祖先的overflow是hidden、scroll、auto、overplay时)定位&#x3D;&#x3D;或者&#x3D;&#x3D;直接块级父元素定位<blockquote><p>注意：</p></blockquote></li><li>当body为最近”滚动机制”的祖先，此时要看到元素相对浏览器固定效果，元素的&#x3D;&#x3D;直接父元素&#x3D;&#x3D;高度一定要大于元素本身</li><li>当元素的父级拥有”滚动机制”，若有滚动条，则元素固定在父级元素的最顶部</li></ul></blockquote><ol><li>当body为最近滚动机制的祖先<blockquote><ul><li>使用粘性定位的元素，其父元素高度一定要大于它自身的高度</li><li>使用粘性定位的元素，其父元素高度一定要大于它自身的高度</li><li>当滚动高度小于元素所在位置时，该元素随滚动条一起移动，但相对位置不变</li><li>当元素所在位置&lt;滚动高度&lt;其父元素的底部，该元素固定在顶部，与body的距离&#x3D;设置的position值</li><li>当元素所在位置大于其父元素底部时，该元素底部与父元素底部重合后，一起移走</li></ul></blockquote></li><li>当父元素拥有滚动机制<blockquote><ul><li>父盒子具有overflow，且父盒子高度比它大</li><li>当滚动body的滚动条时，该盒子会整体随页面滑动</li><li>当滚动高度小于元素所在位置时，该元素随滚动条一起移动，但相对位置不变</li><li>当元素所在位置&lt;滚动高度&lt;其父元素的底部，该元素固定在顶部，与body的距离&#x3D;设置的position值</li><li>由于父盒子高度一定小于子元素总高度(不然不会出现滚动条)，所以元素所在位置不会大于其父元素底部</li></ul></blockquote></li></ol><blockquote><p><strong>粘性定位应用场景</strong></p><ol><li>头部和左侧吸顶盒效果</li></ol><ul><li>我自己做的存在的问题<ul><li>左边侧栏无法实现效果</li><li>右侧盒子的书写方式可以更简洁，用序号选择器</li></ul></li><li>看视频后的解决方式<ul><li>左右侧栏用一个盒子包裹起来，左右浮动</li><li>一定要消除浮动，不然父盒子高度塌陷就实现不了粘性定位</li><li>给父盒子加上外边距以保持与第二个盒子之间的距离</li><li>给右侧栏加:nth-child()控制颜色,偶数2n,奇数2n-1</li></ul></li></ul><ol start="2"><li>字母排序显示效果</li></ol><ul><li>注意：用定义列表dl dt dd</li></ul><ol start="3"><li>表格首行冻结</li></ol><ul><li>注意：<ul><li>使表格贴合父盒子：width: 100%;</li><li>将表格边框合并成单边框：border-collapse: collapse;</li></ul></li></ul></blockquote><h3 id="六、定位的总结"><a href="#六、定位的总结" class="headerlink" title="六、定位的总结"></a>六、定位的总结</h3><blockquote><table><thead><tr><th>定位类型</th><th>描述</th><th>应用场景</th></tr></thead><tbody><tr><td>相对定位relative</td><td>相对自身原来的位置占位，站着原来的位置</td><td>1.微调元素的位置，但还占据着原来的空间 2.只想提升元素的层级，但还是站着原来的空间</td></tr><tr><td>绝对定位absolute</td><td>相对离自己最近的定位的父元素定位，原来的位置被释放，相当于悬浮在页面中，会覆盖在其他元素的上面显示</td><td>1.一个元素想覆盖在另一个元素上 2.配合JS来实现动画效果</td></tr><tr><td>固定定位fixed</td><td>相对浏览器窗口进行定位</td><td>你想让一个元素相对浏览器的位置一直不动</td></tr><tr><td>粘性定位</td><td>相对离自己最近的拥有滚动机制的父元素定位，或，直接父元素定位</td><td>吸附效果、冻结效果</td></tr></tbody></table></blockquote><h3 id="七、z-index设置定位元素层叠顺序"><a href="#七、z-index设置定位元素层叠顺序" class="headerlink" title="七、z-index设置定位元素层叠顺序"></a>七、z-index设置定位元素层叠顺序</h3><blockquote><blockquote><p>定位的元素脱离了正常文档流，它相当于漂浮在文档上面。那如果有很多元素都用了定位，那如何确定这些元素的层叠顺序？&gt;&gt;z-index就是用来指定定位元素的堆叠顺序</p></blockquote></blockquote><blockquote><p>同一层叠上下文中z-index值的特性</p><ul><li>默认值是0</li><li>值可正可负</li><li>z-index值相同的元素，写在后面的会覆盖前面的</li><li>值越大，元素越在上面显示</li><li>只针对定位元素有效，对其他元素无效</li></ul></blockquote><h3 id="八、CSS中的层叠上下文"><a href="#八、CSS中的层叠上下文" class="headerlink" title="八、CSS中的层叠上下文"></a>八、CSS中的层叠上下文</h3><ol><li>什么是层叠上下文<blockquote><ul><li>它是一个HTML中的三维概念</li><li>在css2.1规范中有明确强调，每个css盒模型都是处在一个三维空间里面，他们分别处在平面的X轴、Y轴以及表示层叠的Z轴<img src="层叠上下文.png">>注意： </li><li>但并不是所有的盒子都会在Z轴发生层叠，默认情况下，HTML元素使沿XY轴平铺，元素默认从上到下、从左往右依次排列 </li><li>一旦发生堆叠，就能感受到Z轴的存在。不管有无层叠，Z轴都存在</li></ul></blockquote></li></ol><blockquote><p><strong>具象化解释：</strong></p><ul><li>body这个html根元素，天生具有上下文。它是爷爷，其他所有元素都同属于&#96;body&#96;&#96;这个层叠上下文。</li><li>在body中可以放普通元素，还可以放创建了层叠上下文的元素,就像爷爷可以有很多儿子。每个儿子，各自等级不同、先后顺序也不同；创建了层叠上下文的元素就像当了官，它比普通元素等级更高，而且官越高等级越高。</li><li>每个儿子还会生更多孩子，也就是爷爷的孙子。子凭父贵，父亲等级越高，它在孙子辈里等级就越高。</li><li>这里的爷爷、儿子、孙子等辈分是指不同的层叠上下文。与父盒子盒&#x2F;父元子元有区别</li></ul></blockquote><blockquote><ul><li>问题1：怎么当官？(怎么提高&#x2F;降低元素的等级) 原理<ul><li>在同一层叠上下文中，创建了层叠上下文的**&gt;**普通元素</li><li>在同一层叠上下文中，z-index值越高的官越大，未设置z-index的定位元素默认z-index&#x3D;0</li><li>在同一层叠上下文中，相同等级的元素，写在后面的比写在前面的大，后面的覆盖前面的 </li><li>方法<ul><li><ol><li>后出生(写在后面)</li></ol></li><li><ol start="2"><li>当官(创建层叠上下文)</li></ol></li><li><ol start="3"><li>提高官职(提高z-index的值)</li></ol></li></ul></li></ul></li></ul></blockquote><ol><li>创建层叠上下文的方法<blockquote><ul><li>天生的：body(又称为根层叠上下文)<ul><li>我们在写body中的HTML时，默认就是处在根层叠上下文中</li></ul></li><li>定位元素的传统层叠上下文(当官老办法，但限制于定位元素)<ul><li><code>position:relative/absolute</code>的定位元素，当其z-index的值不是auto的时候就会创建层叠上下文</li><li><code>position:fixed/sticky</code>的定位元素直接创建，不用管z-index的值</li></ul></li><li>CSS3时代的新方法(新时代新办法)<ul><li>z-index不是auto的flex项(父元素display:flex|&gt;   inline-flex)会创建层叠上下文</li><li>元素的opacity值不是1</li><li>元素的transform值不是none</li><li>元素的mix-blend-mode的值不是normal</li><li>元素filter值不是none</li><li>元素的isolation值是isolate</li><li>will-change指定的属性值为上面的任意一个</li><li>元素的-webkit-overflow-scrollin设为touch</li></ul></li></ul></blockquote></li></ol><blockquote><ul><li>问题2：普通元素分三六九等吗？怎么分？(普通元素的层级) <img src="层叠顺序.png">- ！！！首先在同一层叠上下文中，背景和边框<z-index=负数<普通元素<z-index=0的定位元素<z-index值为正数的定位元素- 普通元素： block块级元素==<==float浮动盒子==<==inline或line-block盒子>在爷爷面前是这套规矩，在儿子辈、孙子辈等每一个小社会也遵循这套规矩，只新增**子凭父贵**这一条规矩</li></ul></blockquote><ol><li>如何确定两个元素的层叠顺序<blockquote><ul><li>先确定它们父亲是谁(确定他们所在的层叠上下文)</li><li>如果是同一父亲，那就直接比较元素类型、先后顺序、z-index的值</li><li>如果不是同一父亲，那就比较父亲之间的官级大小，子凭父贵</li></ul></blockquote></li></ol><h3 id="九、阿里图标库-icon-font"><a href="#九、阿里图标库-icon-font" class="headerlink" title="九、阿里图标库-icon-font"></a>九、阿里图标库-icon-font</h3><blockquote><p>可以下载各种样式的图标 使用方法</p><ul><li>把每个图标直接下载到本地</li><li>加入购物车，添加至项目中下载压缩包(压缩包里会有使用方法)<ul><li>Unicode引用：<ul><li>把第一步中的url改成自己电脑的相对路径</li><li>在第二步复制的代码中.iconfont中修改颜色大小</li><li>在第三步的内容中填写自己想要的图标编码</li></ul></li><li>Font class引用：<ul><li>把第一步中的href地址改成自己电脑里的相对路径</li><li>修改第二步的类名，根据图标下的名字&#x2F;看iconfon.css</li><li>修改图标颜色、大小：首先这些已经设置过了，若要修改则需提高优先级</li></ul></li><li>symbol引用</li></ul></li></ul></blockquote><h3 id="十、综合实践"><a href="#十、综合实践" class="headerlink" title="十、综合实践"></a>十、综合实践</h3><ol><li>酷狗音乐精选歌单效果<blockquote><ul><li>a标签包裹全部元素</li><li>遮罩要放在最上面，position+::after就可以实现</li></ul></blockquote></li><li>小米商城右侧悬浮菜单</li><li>带左右按钮的自动轮播图效果布局</li><li>CSS实现二级导航下拉菜单<blockquote><ul><li>下拉菜单：用绝对定位</li><li>下拉菜单和导航栏的居中对齐：left:50%,margin-left:自身宽度的一半</li><li>鼠标放置效果：给导航栏的li设置:hover</li></ul></blockquote></li><li>CSS时间轴效果布局<blockquote><ul><li>时间轴布局重要！！！</li><li>限制宽度，利用左右浮动的盒子，设置左右边框样式来绘制时间轴</li><li>双引号样式：字体：Arial</li></ul></blockquote></li></ol><h2 id="margin负值的最佳实践"><a href="#margin负值的最佳实践" class="headerlink" title="margin负值的最佳实践"></a>margin负值的最佳实践</h2><h3 id="一、margin负值特性"><a href="#一、margin负值特性" class="headerlink" title="一、margin负值特性"></a>一、margin负值特性</h3><ul><li>margin-left设置负值时，元素自身向左移动，后面的元素也向左移动</li><li>margin-right设置负值时，自身不受影响，右边元素向左移动</li><li>margin-top设置负值时，元素自身向上移动，下面的元素也向上移</li><li>margin-bottom设置负值时，自身不受影响，下方元素向上移动<blockquote><p>right和bottom设置负值时，就像是在页面上减小了占位，后面的元素随之补上，但实际上占位并没有变</p></blockquote></li></ul><h3 id="二、margin塌陷时合并规则"><a href="#二、margin塌陷时合并规则" class="headerlink" title="二、margin塌陷时合并规则"></a>二、margin塌陷时合并规则</h3><ul><li>&#x3D;&#x3D;口诀&#x3D;&#x3D;：符号相同时，看绝对值，听老大的；符号不同时，相加减</li></ul><blockquote><p>介绍</p></blockquote><ul><li>margin重叠也叫塌陷、合并、床头</li><li>只针对垂直方向，不针对水平方向<br><strong>分两种情况</strong><ul><li>兄弟元素之间：上下外边距重叠</li><li>父子元素之间：上下外边距合并(父元未设置内边距和边框时)</li></ul></li><li>应用场景和最佳实践</li></ul><ol><li>等高布局-左右布局：不管做左边盒子中内容多少，其高度都会随右边的粉色盒子变高</li></ol><ul><li>给左边盒子，用&#x3D;&#x3D;正值&#x3D;&#x3D;pdding-bottom增加盒子高度，并且加相同值的&#x3D;&#x3D;负值&#x3D;&#x3D;的margin-bottom抵消内边距的占位</li><li>给父盒子加overflow-hidden</li></ul><ol start="2"><li>一行多列网格布局</li></ol><ul><li>margin-left:-1px;使边框重叠在一起</li></ul><ol start="3"><li>头像叠加效果</li></ol><ul><li>先让每个子盒向左移动负外边距</li><li>然后单独修改第一个盒子的左外边距</li></ul><ol start="4"><li>元素水平垂直居中</li></ol><ul><li>先利用绝对定位使子盒子移动父盒子宽高的一半</li><li>top:50%、left:50%</li><li>再利用负外边距使子盒反向移动自身宽高的一半</li><li>一定给父盒子加相对定位</li></ul><ol start="5"><li>圣杯布局</li></ol><h2 id="圆角、阴影、文本图像处理、CSS函数"><a href="#圆角、阴影、文本图像处理、CSS函数" class="headerlink" title="圆角、阴影、文本图像处理、CSS函数"></a>圆角、阴影、文本图像处理、CSS函数</h2><h3 id="一、圆角"><a href="#一、圆角" class="headerlink" title="一、圆角"></a>一、圆角</h3><ol><li>简介</li></ol><ul><li><p>border-radius用来设置元素的(4个方向)外边框1&#x2F;4圆角效果 </p><table><thead><tr><th>圆角类型</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>圆角边框</td><td>当使用一个半径时，确定一个圆，表示四个不同方向上边框圆角的半径大小</td><td>border-radius:50px;</td></tr><tr><td>椭圆边框</td><td>当使用两个半径时，确定一个椭圆；两个半径之间用&#x3D;&#x3D;反斜杠&#x3D;&#x3D;&#x2F;分隔，第一个值是水平半径，第二个值是垂直半径</td><td>border-radius:50px&#x2F;30px;</td></tr></tbody></table></li><li><p>圆角效果：是从边框四个角出发，根据半径得到圆心，与四条边相交，得到的1&#x2F;4圆角</p></li></ul><ol><li><p>圆的4种不同值写法：顺时针方向</p><table><thead><tr><th>属性值</th><th>举例</th><th>说明</th></tr></thead><tbody><tr><td>单值写法</td><td>border-radius:50px;</td><td>上右下左四个方向的圆角半径</td></tr><tr><td>双值写法</td><td>border-radius:30px 40px;</td><td>斜对角；第一个值：左上角和右下角；第二个值：右上角和左下角</td></tr><tr><td>三值写法</td><td>border-radius:30px 50px 80px;</td><td>分别表示：左上角，右上角和左下角，右下角；</td></tr><tr><td>四值写法</td><td>border:10px 20px 30px 40px;</td><td>分别表示：左上角，右上角，右下角，左下角</td></tr></tbody></table></li><li><p>椭圆的4种不同值的写法</p><table><thead><tr><th>属性值</th><th>举例</th><th>说明</th></tr></thead><tbody><tr><td>单值写法</td><td>border-radius:50px&#x2F;30px;</td><td>50px表示四个不同方向椭圆的水平半径，30px表示四个不同方向椭圆垂直半径</td></tr><tr><td>双值写法</td><td>border-radius:10px 20px&#x2F;30px 50px;</td><td>斜对角；左上角和右下角：水平半径10px，垂直半径30px；右上角和左下角：水平半径30px，垂直半径50px</td></tr><tr><td>三值写法</td><td>border-radius:30px 50px 60px&#x2F;20px 30px 50px;</td><td>分别表示：左上角30px&#x2F;20px，右上角和左下角50px&#x2F;30px，右下角60px&#x2F;50px；</td></tr><tr><td>四值写法</td><td>border:10px 20px 30px 40px&#x2F;40px 30px 20px 10px;</td><td>分别表示：左上角10px&#x2F;40px，右上角20px&#x2F;30px，右下角30px&#x2F;20px，左下角40px&#x2F;10px</td></tr></tbody></table></li><li><p>百分比表示法</p></li></ol><ul><li>百分比是相对于当前元素的&#x3D;&#x3D;可视宽高&#x3D;&#x3D;而言的</li><li>水平半径相当于元素的可视宽而言，水平半径&#x3D;(width+padding+border)*百分比</li><li>垂直半径相当于元素的可视高而言，垂直半径&#x3D;(height+padding+border)*百分比</li></ul><ol start="4"><li>单独设置四个方向圆角-小属性</li></ol><ul><li>此时，写一个值表示圆，写两个值表示椭圆，&#x3D;&#x3D;并且椭圆&#x3D;&#x3D;的两个值不需要用反斜杠分隔</li><li>先上下后左右</li><li>主要是用来层叠大属性的 <table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>border-top-left-radius</td><td>左上角</td></tr><tr><td>border-top-right-radius</td><td>右上角</td></tr><tr><td>border-bottom-left-radius</td><td>左下角</td></tr><tr><td>border-bottom-right-radius</td><td>右下角</td></tr></tbody></table></li></ul><pre><code>左上角椭圆：border-top-left-radius:30px 40px;右下角圆：border-bottom-right-radius:30px;</code></pre><h3 id="二、盒子阴影"><a href="#二、盒子阴影" class="headerlink" title="二、盒子阴影"></a>二、盒子阴影</h3><blockquote><p>box-shadow给盒子添加阴影效果，阴影是<strong>不占空间</strong>的</p></blockquote><ul><li>写法：<code>box-shadow:[inset] X偏移 Y偏移 模糊半径 [扩散半径] 颜色;</code>(右和上为正值方向)</li><li><code>[]</code>：表示这个值可以省略不写</li><li>inset:表示内阴影，当需要设置内阴影时，才添加</li><li>X偏移:阴影在x轴(水平)方向偏移量；正值表向右偏移，负值表向左偏移</li><li>Y偏移:阴影在Y轴(垂直)方向偏移量；正值表向上偏移，负值表向下偏移</li><li>模糊半径：值只能大于等于0，表示阴影的模糊半径</li><li>扩散半径：取正值表示阴影扩大，取负值表示阴影收缩。默认为0，此时阴影与元素同样大</li><li>颜色表示阴影的颜色</li></ul><ol><li>简单阴影</li></ol><ul><li><code>box-shadow:x偏移 y偏移 模糊量 颜色；</code></li></ul><ol start="2"><li>阴影扩展</li></ol><ul><li><code>box-shadow:x偏移 y偏移 模糊量 扩散半径 颜色；</code></li></ul><ol start="3"><li>内阴影</li></ol><ul><li><code>box-shadow:inset X偏移 Y偏移 模糊半径 扩散半径 颜色;</code></li></ul><ol start="4"><li>多个阴影</li></ol><ul><li>如果一个盒子有多个阴影，则每个阴影之间用<code>,</code>分隔</li><li>当阴影个数<code>&gt;1</code>时，阴影应用顺序为从前往后(z轴)，第一个指定阴影在最顶部显示</li><li>内阴影不管写在哪个位置，都会在外阴影上面</li></ul><ol start="5"><li>去掉阴影</li></ol><ul><li><code>box-shadow:none;</code></li></ul><ol start="6"><li>实战案例-纸张效果</li></ol><h3 id="三、文本阴影"><a href="#三、文本阴影" class="headerlink" title="三、文本阴影"></a>三、文本阴影</h3><ul><li><code>text-shadow</code>用来为文字添加阴影</li><li><code>text-shadow:X偏移 Y偏移 模糊半径 颜色;</code></li><li>多个阴影之间用逗号分隔</li><li>当阴影个数<code>&gt;1</code>时，阴影应用顺序从前到后，第一个指定阴影在最顶部显示</li></ul><h3 id="四、文本溢出显示省略号"><a href="#四、文本溢出显示省略号" class="headerlink" title="四、文本溢出显示省略号"></a>四、文本溢出显示省略号</h3><ol><li>单行文本溢出显示省略号</li></ol><ul><li>写法：</li></ul><pre><code>&lt;!-- 文字不换行 --&gt;white-space:nowrap;&lt;!-- 超出显示省略号 --&gt;text-overflow:ellipsis;&lt;!-- 超出部分隐藏 --&gt;overflow:hidden;</code></pre><ol start="2"><li>多行文本溢出显示省略号</li></ol><pre><code>&lt;!-- 超出部分隐藏 --&gt;overflow:hidden;&lt;!-- 超出显示省略号 --&gt;text-overflow:ellipsis;&lt;!-- 对象作为弹性盒子模型显示 --&gt;display:-webkit-box;&lt;!-- 快容器中的内容限制为指定行数 --&gt;-webkit-line-clamp:2;&lt;!-- 弹性盒子对象的子元素排列方式为竖排 --&gt;-webkit-box-orient:vertical;</code></pre><blockquote><p>注意：只有当元素的高&#x3D;<code>line-height</code>大小*<code>-webkit-line-clamp</code>时，才能显示出正确的效果</p></blockquote><ul><li>所以，一定要写行高，盒子高度根据行高和指定显示行数来设置，例如想让行高为25px的两行文字显示，则盒子高度为50px。</li></ul><h3 id="五、元素不透明度"><a href="#五、元素不透明度" class="headerlink" title="五、元素不透明度"></a>五、元素不透明度</h3><ul><li><p><code>opacity</code>指定了一个元素的不透明度</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>元素完全透明(即元素不可见)</td></tr><tr><td>0.0~1.0之间</td><td>元素半透明(元素背后的背景可见)</td></tr><tr><td>1</td><td>元素完全不透明(元素后面的背景不可见)</td></tr></tbody></table></li><li><p>如果超出0.0~1.0的范围，也会有效，但是会被解析为在取值范围内&#x3D;&#x3D;最靠近&#x3D;&#x3D;他的值|</p></li><li><p>可以用<code>opacity:0</code>隐藏一个元素，因为opacity会让这个元素及其子元素一起透明。</p></li><li><p>当<code>opacity</code>的属性值不为1时，元素会创建自己的层叠上下文</p></li></ul><blockquote><p>对比学习</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>visibility:hidden</code></td><td>隐藏元素，但元素还占着原有的空间，在DOM树中</td></tr><tr><td><code>display:none</code></td><td>元素隐藏，不站着原来的空间，不在DOM树中</td></tr><tr><td><code>background-color:rgba(0,0,0,0.1)</code></td><td>仅背景颜色透明，并不影响元素中的内容</td></tr><tr><td><code>opacity:0;</code></td><td>元素透明，连同其内容和子元素一起透明掉</td></tr><tr><td><code>overflow:hidden</code></td><td>内容超出部分隐藏，影响的是子元素</td></tr></tbody></table></blockquote><h3 id="六、filter滤镜-图片模糊"><a href="#六、filter滤镜-图片模糊" class="headerlink" title="六、filter滤镜-图片模糊"></a>六、filter滤镜-图片模糊</h3><blockquote><p><code>filter:blur()</code>函数用于将高斯模糊效果应用于元素(图像)</p></blockquote><ul><li>单位是px</li><li>可以利用<code>filter:blur</code>与<code>background-size</code>的结合来实现背景模糊效果<ul><li>将背景放大到150%，然后模糊。参考艾编程官网老师们的简介</li></ul></li></ul><h3 id="七、object-fit-图片裁剪"><a href="#七、object-fit-图片裁剪" class="headerlink" title="七、object-fit 图片裁剪"></a>七、object-fit 图片裁剪</h3><ul><li>指定&#x3D;&#x3D;可替换元素&#x3D;&#x3D;的内容应该如何适应到其使用的高度和宽度确定的框</li><li>典型的可替换元素包括：img、video、iframe、embed</li><li>这个效果类似于<code>background-size</code><ul><li>但<code>object-fit</code> 在对齐时，是从元素框中间向两边的方式来填充</li><li>而<code>background-size</code>默认是是从左上角向右下角来填充，如果想设置以中间向两边，需要设置<code>background-position:center</code></li></ul></li></ul><p>|属性值|描述|<br>|contain|被替换的内容将被缩放，<strong>保持元素的宽高比</strong>，<strong>全部</strong>填充在内容框内|<br>|cover|被替换的内容将被缩放，<strong>保持元素的宽高比****，</strong>填满**整个内容框|<br>|fill|默认效果，被替换的内容正好填充元素的内容框，内容可能会被拉伸或压缩变形|<br>|none|被替换的内容保持其原有的尺寸|<br>|scale-down|内容的尺寸与<code>none</code>或<code>contain</code>中的一个相同，取决于他们两个之间谁得到的对象尺寸会更小一些|</p><ul><li>应用：防止图片拉伸或挤压-用户头像<ul><li>父盒子设置宽高</li><li>图片宽高设置100%全适应</li><li>添加<code>object-fit:cover</code>来等比例裁剪图片尺寸</li></ul></li></ul><h3 id="八、防止拖拽文本域"><a href="#八、防止拖拽文本域" class="headerlink" title="八、防止拖拽文本域"></a>八、防止拖拽文本域</h3><ul><li>resize属性规定是否可让用户调整元素的尺寸</li><li><code>textarea</code>表示多行文本框，拖动它的右下角可调整尺寸</li><li>写法：<code>textarea:none;</code></li></ul><h3 id="九、calc函数"><a href="#九、calc函数" class="headerlink" title="九、calc函数"></a>九、calc函数</h3><ul><li>用于动态计算长度值</li><li>写法：<code>width:calc(100px + 200px);</code></li><li>使用要点：<ul><li>支持<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>运算</li><li>运算符前后都需要保留一个空格，否则不生效，<code>*</code>、<code>/</code>可以没有空格，但建议有</li><li>任何长度值都可以使用calc()函数进行计算</li><li>可以使用百分比、px、em、rem等单位</li><li>使用标准的数学运算优先级规则</li></ul></li></ul><h3 id="十、var函数"><a href="#十、var函数" class="headerlink" title="十、var函数"></a>十、var函数</h3><ol><li><code>:root</code>选择器</li></ol><ul><li>用于匹配文档的htmlm根元素</li><li>与html选择器的区别在于：<code>:root</code>选择器的优先级要高于html标签选择器</li></ul><ol start="2"><li>var函数解读</li></ol><ul><li>var函数用于插入自定义的属性值</li><li>如果一个属性值在<strong>多处</strong>被使用，该方法就很有用</li><li>自定义属性一定要以<code>--</code>开头</li><li>&#x3D;&#x3D;就近原则&#x3D;&#x3D;，自定义属性会沿着父元素一直往外找，以最近找到的为主</li><li>应用场景：<ul><li>通常自定义属性值是写在:root选择器中，并且:root选择器会放在css的最上面，这样所有选择器就能用到这个自定义变量属性</li></ul></li><li>写法：</li></ul><pre><code>:root&#123;    &lt;!-- 自定义属性 --&gt;    --font-color:red;&#125;h3&#123;    color:var(--font-color);&#125;</code></pre><h3 id="十一、专项案例训练"><a href="#十一、专项案例训练" class="headerlink" title="十一、专项案例训练"></a>十一、专项案例训练</h3><ol><li>CSS开发天猫登录注册页<blockquote><p>没想到的地方</p></blockquote></li></ol><ul><li>天猫logo和登录框放在一个盒子里居中</li><li>表单元素：<code>option</code>、<code>input</code></li><li>区号部分：<ul><li>select：背景为选择图标，字体颜色设置为透明，宽高设置为图标大小</li><li>option：字体颜色为黑色</li></ul></li></ul><pre><code>&lt;dix class=&quot;box&quot;&gt; &lt;i&gt;+86&lt;/i&gt; &lt;select name=&quot;&quot; id=&quot;&quot;&gt; &lt;option value=&quot;+86&quot;&gt;+86中国大陆&lt;/option&gt;&lt;/select&gt;&lt;/div&gt;</code></pre><ul><li><code>pointer-events:none;</code>：盒子不受指针、click的影响</li><li>span标签之间的间隙：父盒子font-size&#x3D;0；</li><li>有些地方可以用怪异盒模型</li><li>最后一行可以用<code>text-align:right</code>水平居右，还有<code>cursor:pointer</code></li></ul><blockquote><p>需要用到JS的地方</p></blockquote><ul><li>区号，i绑定ption的value</li><li>登录方式的切换</li></ul><ol start="2"><li>CSS表格布局(QQ音乐排行榜效果)<blockquote><p>老师做的：</p></blockquote></li></ol><ul><li>用table标签</li><li>边框处理：缩小边距——<code>border-spacing:0</code>,边框重合——<code>border-collapse:collapse</code></li><li>不同列单独设置：在table和tr之间写上下面的代码，span表示<strong>选多少列</strong>，class是各列的类名</li></ul><pre><code>&lt;table&gt;  &lt;colgroup&gt;    &lt;col span=&quot;&quot; class=&quot;&quot;&gt; &lt;/clogroup&gt;</code></pre><ul><li>滑动效果：歌名变色，出现三个按钮，歌曲介绍有省略号<ul><li>三个按钮用display</li><li>省略号：滑动之后宽度缩短，并用单行文本溢出省略代码</li></ul></li><li>第三列不能设置宽度，自适应。用right、left</li></ul><h2 id="transtion过渡动画与animation自定义动画"><a href="#transtion过渡动画与animation自定义动画" class="headerlink" title="transtion过渡动画与animation自定义动画"></a>transtion过渡动画与animation自定义动画</h2><h3 id="一、transition过渡动画"><a href="#一、transition过渡动画" class="headerlink" title="一、transition过渡动画"></a>一、transition过渡动画</h3><blockquote><p><strong>如何理解过渡动画？</strong></p></blockquote><ul><li>一个元素由A状态经过一段时间变化成B状态。我们只需要定义其开始和结束的状态</li><li>而它中间的状态会自己添加”补间动画”</li><li>以前，网页的特效基本都是由JS定时器实现的，现在追捕改为使用CSS3过渡</li><li>优点：动画更细腻，内存开销小</li><li>兼容性：移动PC都兼容，但是需要加上对应的浏览器前缀<br><strong>过渡动画何时发生？</strong></li><li>当属性值发生变化时，才会触发transition动画</li><li>transition动画主要与<code>:hover</code>配合，来实现鼠标滑动动画效果</li></ul><ol><li>基本语法<blockquote><p><code>transition:transition-property transition-duration [transition-timing-function] [transition-delay];</code></p><ul><li>后面两个可以省略不写</li></ul></blockquote></li></ol><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>transition-property</code></td><td>指定CSS属性的name，哪些属性要过渡</td></tr><tr><td><code>transition-duration</code></td><td>transition效果需要指定多少秒或毫秒才能完成，动画时间</td></tr><tr><td><code>transition-timing-function</code></td><td>指定transition效果的转速曲线，变化曲线</td></tr><tr><td><code>transition-delay</code></td><td>定义transition效果开始的时候(延迟时间)</td></tr></tbody></table><ol start="2"><li>可参与过渡的属性<blockquote><p><strong>可参与过渡的属性</strong></p></blockquote></li></ol><ul><li>所有数值类型的属性，都可参与过度</li><li>比如：width、height、left、top、border-radius、font-size、opacity </li><li>背景颜色和文字都可以被过渡</li><li>所有的变形(包括2D和3D)都能被过渡</li><li>在CSS中90%的属性都可以辈过渡<blockquote><p><strong>不能</strong>参与过渡动画的属性</p></blockquote></li><li>float和position</li><li>display无法过渡</li><li>font-family等</li></ul><ol start="3"><li>特殊属性：all</li></ol><ul><li>需要所有属性参与过渡，即定义为all</li><li>all不要随意使用，会引发效率问题，如果只需要某一个属性过渡，还是要指定特定的属性</li></ul><ol start="4"><li>定义多个过渡动画</li></ol><ul><li>多个过渡动画之间用<code>,</code>隔开</li></ul><ol start="5"><li>过渡的四个小属性<table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>transition-property</code></td><td>指定CSS属性的name，哪些属性要过渡</td></tr><tr><td><code>transition-duration</code></td><td>transition效果需要指定多少秒或毫秒才能完成，动画时间</td></tr><tr><td><code>transition-timing-function</code></td><td>指定transition效果的转速曲线，变化曲线</td></tr><tr><td><code>transition-delay</code></td><td>定义transition效果开始的时候(延迟时间)</td></tr></tbody></table></li></ol><ul><li>多个值之间用逗号隔开，没有指定的值，以属性第一个值为准</li></ul><ol start="6"><li>时间函数</li></ol><ul><li>时间函数(transition-timing-function),管理着动画在单位帧内播放的速度曲线<blockquote><p><strong>时间函数的预设值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>linear</code></td><td>规定以相同速度开始至结束的过渡效果cubic-bezier(0,0,1,1)</td></tr><tr><td><code>ease</code></td><td>规定慢速开始，然后变快，然后慢速结束的过渡效果(cubic-bezier(0.25,0.1,0.25,1))</td></tr><tr><td><code>ease-in</code></td><td>规定以慢速开始的过渡效果cubic-bezier(0.42,0,1,1)</td></tr><tr><td><code>ease-out</code></td><td>规定以慢速结束的过渡效果cubic-bezier(0,0,0.58,1)</td></tr><tr><td><code>ease-in-out</code></td><td>等于以慢速开始和结束的过渡效果cubic-bezier(0.42,0,0.58,1)</td></tr><tr><td><code>cubic-bezier(n,n,n,n)</code></td><td>在cubic-bezier函数中定义自己的值，0~1之间</td></tr></tbody></table></blockquote></li></ul><blockquote><p>贝塞尔曲线用法</p></blockquote><ul><li>官方网址上在线生成<a href="https://cubic-bezier.com/">https://cubic-bezier.com/</a></li><li>还可以在网页上右击审查元素，在代码的控制面板当中来调整贝塞尔曲线，来调节运动速度</li></ul><h3 id="二、transition过渡动画实战案例"><a href="#二、transition过渡动画实战案例" class="headerlink" title="二、transition过渡动画实战案例"></a>二、transition过渡动画实战案例</h3><ol><li>鼠标滑动，背景从透明到半透明效果</li><li>鼠标滑动，文字从下往上滑动效果</li></ol><ul><li>父盒子设置相对定位、overflow-hidden</li><li>用盒子装文字，设置绝对定位，鼠标滑动时bottom改变</li></ul><ol start="3"><li>商城右侧通栏导航</li></ol><ul><li>鼠标滑动后出现的框，在点击之前，宽度&#x3D;0，字体颜色为透明色</li></ul><h3 id="三、animation自定义动画"><a href="#三、animation自定义动画" class="headerlink" title="三、animation自定义动画"></a>三、animation自定义动画</h3><blockquote><p>步骤：先定义动画，再调用动画</p></blockquote><ol><li>动画的定义<blockquote><p><strong>使用<code>@keyframes</code>关键帧来定义动画</strong></p></blockquote></li></ol><ul><li>建动画的原理是，将一套CSS样式逐渐变化为另一套样式</li><li>在动画过程中，您可以多次更改CSS样式的设定</li><li>动画执行各阶段时间，可以通过百分比来规定改变发生的时间，或者通过关键词<code>from</code>和<code>to</code></li><li><code>from</code>和<code>to</code>等价于0%和100%,from和0%是动画的开始时间，to和100%是动画的结束时间</li><li>动画名是自己起的</li><li>写法</li></ul><pre><code>@keyframes 动画名&#123;&lt;!-- 起始状态 --&gt;from/0% &#123;样式&#125;&lt;!-- 结束状态 --&gt;to/100%&#123;样式&#125;&#125;</code></pre><ol start="2"><li>调用动画<blockquote><p>使用animation属性</p></blockquote></li></ol><ul><li>写法：</li><li>复合写法：<ul><li>简单版：</li><li><pre><code></code></pre></li><li>animation:动画名 动画完成时间 时间函数 延迟时间；</li><li><pre><code></code></pre></li><li>完整版：</li><li><pre><code></code></pre></li><li>animation:动画名 动画完成时间 时间函数 延迟时间 播放次数 是否反向播放 动画不播放或完成时状态 动画是否正在运行或已暂停；</li></ul></li><li>类似transition</li></ul><ol start="3"><li>多关键帧动画</li></ol><ul><li>用百分比分别表示动画执行的时间节点</li><li>设置多个时间节点，每个节点都可以设置不同状态</li></ul><ol start="4"><li>animation完整写法——小属性<table><thead><tr><th>属性</th><th>说明</th><th>属性值</th></tr></thead><tbody><tr><td><code>animation-name</code></td><td>指定应用的一系列动画名，即@keyframes定义的动画名</td><td>none表示不调用动画，动画名：由大小写敏感的字母a-z、数字0-9、下划线、短横线组成，不能以数字开头</td></tr><tr><td><code>animation-duration</code></td><td>指定动画周期时长，需要多少秒或毫秒完成</td><td>默认值为0s，表示无动画。时长单位为秒(s)&#x2F;毫秒(ms)</td></tr><tr><td><code>animation-timing-function</code></td><td>设置动画将如何完成一个周期</td><td>和transition一致的linear、ease、ease-in、ease-out、ease-in0out、贝塞尔函数；不一样的是steps(n,start&#x2F;end)</td></tr><tr><td><code>animation-delay</code></td><td>设置动画在启动前的延迟间隔时间</td><td>默认为0s，表示立即执行；时长单位为s&#x2F;ms</td></tr><tr><td><code>animation-iteration-count</code></td><td>定义动画的播放次数</td><td>n:一个数字，动画播放次数；<code>infinite</code>无限次播放</td></tr><tr><td><code>animation-direction</code></td><td>指定是否应该轮流反向播放动画</td><td><code>normal</code>:默认值，动画正常播放；<code>reverse</code>:动画反向播放，动画按步后退的效果；<code>alternate</code>:动画在奇数次正向播放，在偶数次反向播放；<code>alternate-reverse</code>:东湖在奇数次反向播放，在偶数次正向播放；</td></tr><tr><td><code>animation-fill-mode</code></td><td>规定当动画不播放时(动画完成时&#x2F;动画延迟未播放时)，要应用到的元素的样式</td><td><code>none</code>:默认值，动画在动画执行之前和之后不会应用任何样式到目标元素；<code>forwards</code>:在动画结束后，动画将停止在最后结束状态；<code>backwards</code>:在动画结束后，动画将停止在最开始的状态；<code>both</code>:动画遵循<code>forwards</code>和<code>backwards</code>的规则，也就是说，动画会在两个方向上扩展动画属性</td></tr><tr><td><code>animation-play-state</code></td><td>指定动画是否正在运行或已暂停</td><td><code>pause</code>:暂停动画；<code>running</code>:正在运行动画；</td></tr></tbody></table></li></ol><blockquote><p><code>animation-play-state</code>通常与<code>:hover</code>配合使用，当鼠标划上去时，可以暂停或开启动画</p></blockquote><ol start="5"><li>animation指定多组动画</li></ol><ul><li>用来指定一组或多组动画时，每组之间用逗号分隔</li></ul><ol start="6"><li>steps帧动画</li></ol><ul><li>steps定义一个动画从开始到结束，动画的<strong>每一帧</strong>中经历的步数</li><li>steps的特殊性：它设置的是<strong>每一步</strong>动画的跳跃步数，而不是整个动画的跳跃步数</li><li><code>start</code>:开始是在第一帧动画结束的位置</li><li><code>end</code>:开始是在第一帧动画开始的位置</li><li>盒子的右侧是起始点<blockquote><p>走路案例</p></blockquote></li><li>移动的是background-position</li></ul><ol start="7"><li>transition与animation的区别</li></ol><ul><li>1、transition是过渡，是样式值得变化过程，只有开始和结束；animation其实也叫关键帧，通过和@keyframe结合可以设置中间帧的状态</li><li>2、animation配合@keyframe可以不通过触发事件直接触发过程，而transition需要通过hover或者js事件来配合触发</li><li>3、animation可以设置很多的属性，比如循环次数、动画的结束状态等等，transition只能触发一次</li><li>4、animation可以结合@keyframe设置每一帧，但transition只有开始和结束这两帧</li></ul><h3 id="四、animationn-css动画库"><a href="#四、animationn-css动画库" class="headerlink" title="四、animationn.css动画库"></a>四、animationn.css动画库</h3><ol><li><p>是什么？</p><blockquote><ul><li>animation.css是非常强大的跨平台的预设css3动画库</li><li>内置了很多典型的css3动画，兼容性好，使用方便</li><li>英文网：<a href="http://animate.style/(%E8%8B%B1%E6%96%87%E7%BD%91%E6%9B%B4%E5%A5%BD)">http://animate.style/(英文网更好)</a></li></ul></blockquote></li><li><p>怎么用？</p></li></ol><ul><li>1、下载animate.css文件</li><li>2、在页面引入animate.css文件</li></ul><pre><code>&lt;!--引用时，要注意引用入的地址 --&gt;link rel=&quot;stylesheet&quot; href=&quot;./css/animate.css&quot; /&gt;</code></pre><ul><li>3、在网站的右侧选择想要的效果，复制其样式名</li><li>4、在需要应用的元素上加<code>.animate_animated</code>和需要的效果样式名</li></ul><pre><code>&lt;!-- 应用  bounce 这个样式效果 --&gt;&lt;div class=&quot;box animate__animated &gt;animate__bounce&quot;&gt;&lt;/div&gt;</code></pre><blockquote><p>注意：link要写在style前面</p></blockquote><h2 id="transform-2D与3D转换"><a href="#transform-2D与3D转换" class="headerlink" title="transform 2D与3D转换"></a>transform 2D与3D转换</h2><h3 id="一、transform属性"><a href="#一、transform属性" class="headerlink" title="一、transform属性"></a>一、transform属性</h3><ul><li>在CSS中，利用<code>transform</code>这个属性实现对元素的旋转、缩放、倾斜、平移</li><li>transform属性的值可以是<code>none</code>或一个或多个css变换函数</li><li>transform的值不是none时，元素会创建自己的层叠上下文</li></ul><ol><li><p>transform的2D变换函数</p><table><thead><tr><th>属性值</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>translate(x,y)</td><td>x,y为长度单位，可以是px也可以是百分比；x表示元素在x轴上的移动量，y表示元素在y轴上的移动量，如果y轴不写，默认为0</td><td>transform:translate(100px,200px)</td></tr><tr><td>translateX(x)</td><td>表示元素在平面x轴上的位移量</td><td>transform:translateX(300px)</td></tr><tr><td>translateY(y)</td><td>表示元素在平面Y轴上的位移量</td><td>transform:translateY(300px)</td></tr><tr><td>rotate(ax)</td><td>ax代表旋转的角度，正角表示顺时针旋转，负角表示逆时针旋转</td><td>transform:rotate(30deg)</td></tr><tr><td>scaleX(x)</td><td>x数字类型，表示元素在x轴上的缩放比</td><td>transform:scaleX(2)</td></tr><tr><td>scaleY(y)</td><td>y数字类型，表示元素在y轴上的缩放比</td><td>transform:scaleY(2)</td></tr><tr><td>scale(x,y)</td><td>当只有x没有y时，则y默认为x，元素在x,y轴上均匀缩放</td><td>transform:scale(2,3)</td></tr><tr><td>skew(ax,ay)</td><td>ax,ay各表示一个角度</td><td>transform:skew(30deg,30deg)</td></tr><tr><td>skewX(ax)</td><td>ax表示一个角度，表示沿着x横坐标扭曲元素的角度，形成水平拉伸效果</td><td>transform:skewX(30deg)</td></tr><tr><td>skewY(ay)</td><td>ay表示一个角度，表示沿着y纵坐标扭曲元素的角度，形成垂直拉伸效果</td><td>transform:skewY(30deg)</td></tr></tbody></table></li><li><p>transform的3D转换属性值</p><table><thead><tr><th>属性值</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>translateZ(z)</td><td>元素在3D空间z轴方向上的位移量</td><td>transform:translateZ(200px)</td></tr><tr><td>translate3d(x,y,z)</td><td>分别表示元素在x,y,z轴坐标上的位移量，该值不能使用百分比，如果使用会被认为是无效属性</td><td>transform:translate3d(50px,30px,50px)</td></tr><tr><td>rotateX(ax)</td><td>表示元素绕x轴旋转一定角度，ax表示度数，可以为正，也可以为负</td><td>transform:rotateX(30deg);</td></tr><tr><td>rotateY(ay)</td><td>表示元素绕Y轴旋转一定角度，ay表示度数，可以为正也可以为负</td><td>transform:rotateY(30deg);</td></tr><tr><td>rotateZ(az)</td><td>表示元素绕Z轴旋转一定角度，az表示度数，可以为正也可以为负</td><td>transform:rotateZ(30deg);</td></tr></tbody></table></li></ol><h3 id="二、2D转换"><a href="#二、2D转换" class="headerlink" title="二、2D转换"></a>二、2D转换</h3><ol><li>2D平面</li></ol><ul><li>下图这个x和y轴，就是基于2D平面图形，后期所有的2D动画特效都是在这个2D的平面上操作</li><li>注意事项：<ul><li>元素的左上角坐标为(0,0)</li><li>(0,0)坐标的右方，为x轴的正方向</li><li>(0,0)坐标的下方，为y轴的正方向<img src="2D.png"></li></ul></li></ul><ol><li>translate位移</li></ol><ul><li><p>css中通过给<code>transform</code>添加<code>translate(x,y)</code>、<code>translateX(x)</code>、<code>translateY(y)</code>来实现元素的水平或垂直位移</p></li><li><p><strong>translate(x,y)</strong></p></li><li><p>x和y是长度值length，可以是px，也可以是%百分比</p></li><li><p>x表示元素在x轴上的位移量，为正表示向右移动，为负表示向左移动</p></li><li><p>y表示元素在y轴上的位移量，为正表示向下移动，为负表示向上移动 </p></li><li><p>位移和相对定位非常像，位移也会”在老家留坑”，即会占据原来的位置 </p></li><li><p>同时不会对其他元素造成影响，相当于悬浮在其他元素上</p></li><li><p>创建了自己的层叠上下文</p></li><li><p>长度单位可以为px，也可以为百分比</p></li><li><p>x,y为百分比时，这个百分比是相对元素自身的可视宽高而言的</p></li><li><p>在标准盒子模型下</p><ul><li>水平位移：(width+左右padding+左右border)*x%</li><li>垂直位移：(width+左右padding+左右border)*y%</li></ul></li><li><p>特殊情况：y值不写，默认为0</p><ul><li><code>transform:translate(x)</code>&#x3D;<code>transform:translate(x,0)</code></li></ul></li><li><p><strong>translateX(x)与translateY(y)</strong></p></li><li><p><code>translateX(x)</code>实现元素在X轴的位移量</p></li><li><p><code>translateY(y)</code>实现元素在Y轴的位移量</p></li><li><p>本质上translate(x,y)是translateX与translateY两者的复合写法</p></li><li><p>transform后面如果跟多个变换函数，则各函数之间用<strong>空格</strong>隔开</p></li><li><p><strong>注意</strong></p></li></ul><pre><code>transform:translateX(10px);transform:transformY(10px);</code></pre><blockquote><p>这样写，后面的会覆盖前面的，只有transformY有效</p></blockquote><ul><li><p>正确写法是：<code>transform:translateX(10px) translateY(10px);</code> 用空格隔开</p></li><li><p><strong>translate与绝对定位结合实现元素水平垂直居中</strong></p></li><li><p>先利用绝对定位，<code>top:50%;left:50%;</code></p></li><li><p>再利用translate，&#96;transform:translate(-50%,-50%)</p></li><li><p>相比之前用的margin负值，可以不用知道盒子宽高，调整也不受影响</p></li></ul><ol start="3"><li>缩放scale</li></ol><ul><li><p>写法：<code>transform:scale(ax,ay)</code></p></li><li><p><strong>scale(x,y)</strong></p></li><li><p>xy可以用不带单位的数字或百分比表示，分别表示元素的宽高缩放比</p></li><li><p>值&gt;1：放大；值&lt;1：缩小</p></li><li><p>当只有x，没有y时，y默认为等于x，元素宽高同时均匀缩放</p></li><li><p>百分比是相对于元素的可视宽高而言的</p></li><li><p><strong>scaleX(x)与scaleY(y)</strong></p></li><li><p>本质上scale(x,y)是scaleX(x)与scaleY(y)的复合写法</p></li><li><p><code>transform:scale(x,y)</code>等于<code>transform:scaleX(x) scaleY(y)</code></p></li><li><p>可以利用transform-origin设置变换原点</p></li></ul><ol start="4"><li>斜切skew</li></ol><ul><li>实现元素斜切效果</li><li>写法：&#96;transform:skew(ax,ay)</li><li><code>skewX(ax)</code>:用于水平拉伸，使元素的每个点在水平方向上扭曲一定的角度</li><li><code>skewY(ay)</code>:用于垂直拉伸，使元素的每个点在垂直方向上扭曲一定的角度</li><li>ax,ay表示一个角度</li><li>单位为<code>deg</code>，正负数都可以</li><li>可以利用transform-origin设置变换原点</li></ul><ol start="5"><li>旋转rotate</li></ol><ul><li>元素旋转效果</li><li>写法<code>transform:rotate(ax)</code></li><li><code>ax</code>表示旋转的角度，正数表示顺时针，负数表示逆时针</li><li>单位是<code>deg</code></li><li>在三角形案例中可知，多次改变旋转角度，都是参考<strong>最初</strong>的视角，不是参考上一次旋转！</li><li>可以利用transform-origin设置变换原点</li></ul><ol start="6"><li>设置原点transform-origin</li></ol><ul><li>设置元素的变换原点</li><li>缩放、斜切、旋转都可以设置原点</li><li>默认值：<code>transform-origin:50% 50% 0;</code>，分别表示x,y,z轴，在2D转换中只需要前两个值</li><li>x,y的值可以是px、百分比、关键词</li><li>但z的值只能是px</li></ul><blockquote><p><strong>关键词</strong></p></blockquote><ul><li>类似于<code>background-position</code></li><li>(left,right)、(top,bottom)、center，这三组可以任意搭配<table><thead><tr><th>关键词</th><th>描述</th></tr></thead><tbody><tr><td>默认原点</td><td><code>transform-origin:center</code></td></tr><tr><td>left</td><td>原点为左边框中点，&#x3D;<code>left center</code></td></tr><tr><td>right</td><td>右边框中点，&#x3D;<code>right center</code></td></tr><tr><td>top</td><td>上边框中点，&#x3D;<code>top center</code></td></tr><tr><td>bottom</td><td>下边框中点，&#x3D;<code>bottom center</code></td></tr><tr><td>top left</td><td>原点为左上角，相当于坐标(0 0)</td></tr><tr><td>top right</td><td>元素右上角</td></tr><tr><td>bottom left</td><td>左下角</td></tr><tr><td>bottom right</td><td>右下角</td></tr></tbody></table></li></ul><blockquote><p><strong>数值表示法px</strong></p></blockquote><ul><li>y省略不写时，默认为元素的垂直中心点<blockquote><p><strong>百分比表示法</strong></p></blockquote></li><li>相对的是元素自身的可视宽高而言</li></ul><ol start="7"><li><p>2D转换综合写法顺序问题</p><blockquote><ul><li>同时使用多个变换，其多个变换函数之间用空格隔开</li><li>转换函数的顺序会影响转换的效果，比如先旋转会影响坐标轴方向</li><li>旋转之后，坐标轴也会跟着旋转，位移的方向就要按照旋转后的坐标轴来</li><li>所以当同时使用旋转和位移时，一定要注意书写顺序</li></ul></blockquote></li><li><p>使2D转换有动画效果<br><code>transition:transform 2s;</code></p><blockquote><ul><li>分清楚<code>transition</code>和<code>transform</code></li></ul></blockquote></li></ol><h3 id="2D转换实战应用"><a href="#2D转换实战应用" class="headerlink" title="2D转换实战应用"></a>2D转换实战应用</h3><ol><li><p>旋转的三角形</p><blockquote><p>注意点</p><ul><li>旋转的角度以最原始的状态为基准，而不是参考上一次旋转</li></ul></blockquote></li><li><p>QQ音乐效果</p><blockquote><ul><li>图片、按钮、遮罩层都有动画效果</li><li>隐藏元素的方式：opacity、rgba、display等</li></ul></blockquote></li></ol><h3 id="四、3D转换"><a href="#四、3D转换" class="headerlink" title="四、3D转换"></a>四、3D转换</h3><blockquote><p>在3D动画中，元素是围绕坐标x,y,z轴来变换的</p><ul><li>3D坐标图<img src="3D坐标图.png">- 元素左上角的坐标为(0,0,0)- x轴右边为正方向，y轴下方为正方向，z轴垂直电脑屏幕，射出屏幕的这头为正方向</li></ul></blockquote><ol><li>透视perspective<blockquote><p>没有<strong>透视定义</strong>，不成3D</p><ul><li>透视是指在平面上描绘物体的空间关系的方法或技术</li><li>要在平面上描绘物体的空间立体感，需要遵循透视原理中的近大远小规则</li></ul></blockquote></li></ol><blockquote><p><strong>视点</strong></p><ul><li>当我们站的越远，我们看到的物体就越小 </li><li>css3中3Dtransform透视点是在浏览器的前方<img src="视点.png"></li></ul></blockquote><blockquote><p><strong>perspective属性</strong></p><ul><li>在css3中，用<code>perspective</code>属性来设置透视距，即模拟人站在离屏幕多远的地方来看电脑上显示的元素</li><li>比如：<code>perspective:800px;</code>意思就是在离屏幕800px的地方看到这个元素</li><li>如果元素往z轴正方向移动，离我们越近，看到物体就越大</li><li>如果元素往z轴负方向移动，离我们越远，看到的物体就越小</li><li>注意：<code>perspective</code>这个属性要设置在父元素上面</li></ul></blockquote><ol><li><p>translate3D位移</p><blockquote><ul><li>**translateX(x)、translateY(y)**，与2D位移是一样的效果</li><li>**translateZ(z)**：<ul><li>表示垂直于电脑屏幕方向的位移量</li><li>必须配合<code>perspective</code>属性，用它来定义透视强度</li><li><code>translateZ=0</code>：图形大小正常显示</li><li><code>0 &lt; translateZ &lt; perspective值</code>：图形变大</li><li><code>translateZ &gt;= perspective</code>图片不见，相当于图片在你后面,你肯定是看不见的</li><li><code>translateZ &lt; 0</code>：图形变小</li></ul></li><li>translate3d(x,y,z)<ul><li>表示元素在x,y,z轴三个坐标上的位移量</li><li>z的值不能使用百分比，如使用则会被认为是无效属性</li></ul></li></ul></blockquote></li><li><p>rotate 3D旋转</p><blockquote><ul><li>css中通过给<code>transform</code>添加以下变换函数来实现3D旋转效果<table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>rotateX(ax)</td><td>表示元素绕x轴旋转一定的角度，ax表示度数，可正可负</td></tr><tr><td>rotateY(ay)</td><td>表示元素绕y轴旋转一定的角度，ay表示度数，可正可负</td></tr><tr><td>rotateZ(az)</td><td>表示元素绕z轴旋转一定的角度，az表示度数，可正可负</td></tr></tbody></table></li><li>旋转方向</li><li>左手法则：大拇指指向正方向，四指的方向就是旋转的方向<img src="3D旋转.png">>rotateZ(az)和2d转换rotate(ax)效果一样</li></ul></blockquote></li><li><p>transform-style</p><blockquote><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>flat</td><td>表示所有子元素在2D平面呈现</td></tr><tr><td>preserve-3D</td><td>表示所有子元素在3D空间中呈现</td></tr></tbody></table></blockquote></li></ol><h3 id="五、实战案例"><a href="#五、实战案例" class="headerlink" title="五、实战案例"></a>五、实战案例</h3><ol><li>飞行的火箭<blockquote><ul><li>火箭左上角和右下角方向来回移动</li><li>气流动画效果：旋转后坐标轴变化，线条沿Y轴上下移动，用opacity实现隐藏效果</li></ul></blockquote></li><li>创建3D导航<blockquote><ul><li>关键是改变旋转原点<code>transform-origin</code></li><li>给两个a标签加父盒子.container,鼠标滑动设置在父盒子上</li><li>第二个a标签的初始状态是x轴反方向旋转90度，这样就藏在了第一个盒子下面,而且！它的原点要设置在上边框的中点</li><li>点击父盒子时，往x轴的正方向翻转90度，旋转原点是3D盒子的中心<code>transform-origin:50% 50% 高度的一半</code></li><li>想要有立体效果：在父盒子上加<code>transform-style: preserve-3d;</code></li></ul></blockquote></li><li>翻书效果<blockquote><ul><li>每一页构建一个父盒子，里面放正反两面，点击父盒子翻页</li><li>改变原点为左边框中点</li><li>反面比正面里电脑更远才能显示：改变<code>translateZ(z)</code></li><li>每一页都比前一页层级更低：改变<code>z-index</code>，整本书需要用JS实现</li><li>反面翻过来仍正面显示：在父盒子翻转180度的基础上再翻转180度</li><li>每一页有正反面两面的立体效果：在每页父盒子设置<code>transform-style:preserve-3D</code></li><li>注意位移和旋转的顺序，旋转会改变方向</li></ul></blockquote></li><li>长方体<blockquote><ul><li>将六个面都放在父盒子之中，用绝对定位固定在同一位置；</li><li>父盒子要用3D</li><li>通过位移旋转来移动每个面，先移动再旋转更简单</li><li>左右面若想正面朝外，则移动到合适位置再改变原点旋转</li><li>给父盒子设置旋转动画可以看到3D效果</li></ul></blockquote></li><li>鼠标移入文字划入效果<blockquote><ul><li>没注意到的地方：<ul><li>需要换行的文字，左右间距用绝对定位设置</li></ul></li></ul></blockquote></li><li>鼠标悬停缩放动画<blockquote><ul><li>没考虑到的地方<ul><li>鼠标悬停时的遮罩：缩小0.8，有盒子阴影，白色边框<br>注意：</li><li>遮罩层原本和父盒子宽高一致，加上边框后会偏移</li><li>缩放时是居中缩放，所以遮罩层要向上向下移动边框宽度的距离</li></ul></li></ul></blockquote></li><li>鼠标移入旋转动画<blockquote><p>没想到的地方</p><ul><li>背景模糊：受上一案例影响，只想到用盒子阴影，但本案例并不适合，实际应该滤镜效果<code>filter</code><br>不一致的地方：</li><li>遮罩效果<ul><li>长方形旋转角度：遮罩盒子宽度等于父盒子对角线的长度(勾股定理)，高度自拟，<code>top=-50%</code>，转换原点改为左侧，然后旋转，可以在检查页面调试角度</li><li>旋转效果：原遮罩盒子高度为0，top&#x3D;0,left&#x3D;0;鼠标滑动后再设置效果</li></ul></li></ul></blockquote></li><li>loading动画<blockquote><ul><li>设置var函数：写在style里，或写在行内，用<code>style=--name:值</code>。var函数一定要以<code>--</code>开头，后面接属性名和属性值。</li><li>var与函数运算结合，一定要在外面套上<code>calc()</code></li><li>var函数与动画结合：<code>transform:rotate(calc(var(--i)*40deg))</code></li><li>小圆围成一个大圆：先把小圆都放在父盒子顶部中间，设置原点为父盒子中点，但一定是以起始位置的xy轴为起点<ul><li><code>transform-origin:15px 140px</code>，140px就是大圆的半径<img src="loading动画.png"></li></ul></li><li>小圆轮流亮起：设置延迟效果，也要用到var函数</li></ul></blockquote></li><li>吃豆豆动画效果<blockquote><ul><li>嘴巴咬合效果：两个长方形朝不同方向旋转，父盒子边框变成圆(我一点都没想到！！！)</li><li>豆豆移动效果：盒子阴影!!!+translate+animation</li><li>细节：<ul><li>豆豆和头部都使用定位，豆豆写在后面，所以在头部上面，需要提高头部的层级</li><li>豆豆的移动速度等于嘴巴张合一轮的时间(嘴巴动画要使用alternate)</li></ul></li></ul></blockquote></li><li>鼠标悬停 3D 旋转动画效果<blockquote><ul><li>注意点<ul><li>背面的文字和图片在旋转前就要设置<code>rotate(180deg)</code>，否则在鼠标悬停旋转180度后会恢复初始状态</li></ul></li></ul></blockquote></li><li>3D旋转木马效果<blockquote><ul><li>点击第二个盒子实现旋转效果，其父盒子设置视距，其子盒子放置图片。要想让谁的子盒子有3D效果，就给谁设置<code>transform-style</code></li><li>图片怎么实现环绕效果：用绝对定位使他们都处于中心，先旋转一定的角度，在往z轴的方向移动,var函数+rotateY+translateZ</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS核心知识点（二）</title>
      <link href="/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="CSS-display属性、背景属性、其他常用属性"><a href="#CSS-display属性、背景属性、其他常用属性" class="headerlink" title="CSS display属性、背景属性、其他常用属性"></a>CSS display属性、背景属性、其他常用属性</h2><h3 id="一、display属性"><a href="#一、display属性" class="headerlink" title="一、display属性"></a>一、display属性</h3><h4 id="display属性的作用"><a href="#display属性的作用" class="headerlink" title="display属性的作用"></a>display属性的作用</h4><blockquote><p><code>display</code>属性可以设置元素的<strong>内部</strong>和<strong>外部</strong>显示类型</p></blockquote><ul><li>外部显示类型：<ul><li>元素的外部显示类型有block块、inline内联等</li><li>外部显示类型将决定该元素在<strong>流式布局</strong>中的表现</li></ul></li><li>内部显示类型：<ul><li>内部显示类型flex布局、grid网格布局、流失布局等</li><li>元素的内部显示类型可以控制其子元素的布局方式</li></ul></li></ul><blockquote><p>流式布局(文档流或常规流)</p></blockquote><ul><li>它是指在对布局进行任何更改之前(默认情况下)，在页面上显示”块”和”内联”元素的方式</li><li>简单来说，它是一种排版方式，这种排版方式规定了块级和内联元素在页面中如何排版显示</li></ul><blockquote><p>流式布局中<strong>块级元素</strong>排版方式</p></blockquote><ul><li>块级盒子会从包含块的顶部开始，按序<strong>垂直</strong>排列</li><li>同级盒子间的垂直距离会由<code>margin</code>属性决定</li><li>相邻两个块级盒子之间的垂直间距会遵循外边距折叠原则被折叠</li></ul><blockquote><p>流式布局中<strong>内联元素</strong>排版方式</p></blockquote><ul><li>盒子会从包含块的顶部开始，按序<strong>水平</strong>排列</li><li>只有水平外边距、边框和内边距会被保留</li><li>这些盒子可以以不同方式在垂直方向上对齐：可以底部对齐或顶部对齐，或者按文字底部进行对齐</li></ul><h4 id="元素外部显示类型"><a href="#元素外部显示类型" class="headerlink" title="元素外部显示类型"></a>元素外部显示类型</h4><blockquote><p>display通过以下属性值来制定元素的显示类型</p></blockquote><ul><li>bolck 块级</li><li>inline-block 行内块</li><li>inline 行内</li></ul><blockquote><p>元素显示类型分为：块级和内联等<br>内联(行内)元素又分为：inline内联元素和inline-block行内块元素(可替换元素)</p></blockquote><ol><li>block块级元素</li></ol><ul><li>常见的块级元素有：<br><code>p</code>、<code>div</code>、<code>ul</code>、<code>ol</code>、<code>li</code>、<code>h</code>、<code>dl</code>等</li><li>块级元素的特点<ul><li>独占一行</li><li>可以设置宽高</li><li>在不设置宽高的情况下，宽默认为父元素内容区宽</li><li>一般来说块级元素里可以放任意元素，不过文字类元素标签内不能放其他块元素：<ul><li>p标签里不能放p和div标签</li><li>h1~h6标签里不能放p,div标签</li></ul></li></ul></li></ul><ol start="2"><li>inline-block行内块元素</li></ol><ul><li>以下元素具有行内块元素的特性，但本质上叫”可替换元素”(归类归到行内元素):<br> <code>img</code>、<code>表单类元素</code>、<code>video</code>、<code>audio</code>等</li><li>行内块元素的特点 <ul><li>相邻的行内块元素&#x2F;行内元素会在一行显示、放不下时会换行</li><li>相邻的行内块元素之间会有<strong>空白间隙</strong>(后面有案例解决这个问题)</li><li>元素默认宽为它本身内容宽</li><li>可设置width、height属性</li></ul></li></ul><ol start="3"><li>inline内联&#x2F;行内元素</li></ol><ul><li>常见的行内元素有：<code>a</code>、<code>strong</code>、<code>span</code>、<code>i</code>、<code>del</code>等</li><li>行内元素特点：<ul><li>相邻的行内元素会在一行显示，放不下时会换行显示</li><li>宽高的设置是无效的，其宽高随内容撑开</li><li>行内元素只能放文本或其他行内元素</li></ul></li><li>注意<ul><li><code>&lt;a&gt;</code>标签里不能再放<code>&lt;a&gt;</code>标签</li><li>但<code>&lt;a&gt;</code>标签里可以放块级元素</li><li>实际开发中，在某些情况下会把a标签转换为块级元素</li></ul></li></ul><blockquote><p>总结:三种元素类型对比</p><table><thead><tr><th>元素类型</th><th>排列方式</th><th>盒模型属性</th><th>内容</th></tr></thead><tbody><tr><td>块级block</td><td>独占一行</td><td>宽高有效</td><td>任意元素，p&#x2F;h特别</td></tr><tr><td>行内块line-block</td><td>不独占</td><td>可设置高</td><td>行内或行内块元素</td></tr><tr><td>内联inline</td><td>不独占</td><td>宽高设置无效</td><td>行内&#x2F;文本元素，a特别</td></tr></tbody></table></blockquote><ol start="4"><li>相互转换</li></ol><ul><li><code>display:block;</code>将元素转换为块级元素</li><li><code>diaplay:inline;</code>将元素转换为行内元素</li><li><code>display：inline-block</code>将元素转换为行内块</li></ul><ol start="5"><li>隐藏元素<table><thead><tr><th>属性</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>diaplay:none;</code></td><td>隐藏元素</td><td>可以将元素隐藏；只要父元素隐藏，子孙元素就没有任何办法可见。元素隐藏后不会占空间，就好比页面中没有加过这个元素</td></tr><tr><td><code>display:hidden：</code></td><td>隐藏元素</td><td>将元素隐藏；如果父元素隐藏，子孙元素会隐藏，但是给子孙加上<code>visibility:visible;</code>时，子孙可见；隐藏后仍占其位置，会留下空白区域。基本不用</td></tr></tbody></table></li></ol><ul><li>注：<code>display</code>除<code>none</code>以外的值，均为显示元素</li></ul><ol start="6"><li>常见大厂面试题</li></ol><ul><li><code>display:none;</code>和<code>visibility:hidden;</code>二者的区别？<table><thead><tr><th>区别</th><th>display:none;</th><th>visibility:hidden;</th></tr></thead><tbody><tr><td>空间占据性</td><td>不占空间</td><td>占空间</td></tr><tr><td>回流与渲染性</td><td>会产生回流与重绘</td><td>不会产生回流，只会产生重绘</td></tr><tr><td>对子孙元素的影响</td><td>子孙元素全部不可见，并没有任何办法可见</td><td>子孙元素全部不可见，但是加上<code>visibility:visible；</code>就可见</td></tr></tbody></table></li></ul><ol start="7"><li>去掉行内块元素默认的空白间隙<blockquote><p>产生间隙的原因</p></blockquote></li></ol><ul><li>元素被当成行内元素排版的时候，元素之间的空白符(空格&#x2F;回车、换行等)都会被浏览器处理</li><li>根据white-space的处理方式(默认为normal，合并多余空白)，原来HTML代码中的空白符被转换成了一个空白符，所以元素之间出现了空隙</li><li>这些元素之间的间距会随着字体的大小而变化</li></ul><blockquote><p>解决办法</p></blockquote><ul><li>给父元素加上<code>font-size:0px;</code>,给子元素重写<code>font-size</code></li><li>给元素添加<code>float</code></li><li>图片间的空隙，给图片添加<code>display:block;</code>变成块级元素后，独占一行，空白间隔消失;更好的办法是添加<code>vertical-align:top;</code></li></ul><h3 id="二、background背景属性"><a href="#二、background背景属性" class="headerlink" title="二、background背景属性"></a>二、background背景属性</h3><h4 id="background-color背景颜色"><a href="#background-color背景颜色" class="headerlink" title="background-color背景颜色"></a>background-color背景颜色</h4><ul><li>背景颜色可以用十六进制、rgb()、rgba()、英文单词表示</li><li>padding区域是有背景颜色的</li></ul><h4 id="background-image图片"><a href="#background-image图片" class="headerlink" title="background-image图片"></a>background-image图片</h4><ul><li>用于设置背景图片</li><li>图片路径要写在<code>url()</code>圆括号里，可以是相对路径，也可以是绝对路径</li><li>地址相对路径是从CSS样式的位置出发(特别注意外部样式)</li><li>写法：<code>background-image: url();</code></li></ul><h4 id="background-repeat重复"><a href="#background-repeat重复" class="headerlink" title="background-repeat重复"></a>background-repeat重复</h4><ul><li>用来设置背景图片的重复模式</li><li>属性值<table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>repeat;</code></td><td>x,y均平铺(默认)</td></tr><tr><td><code>repeat-x;</code></td><td>x平铺</td></tr><tr><td><code>repeat-y;</code></td><td>y平铺</td></tr><tr><td><code>no-repeat;</code></td><td>不平铺</td></tr></tbody></table></li></ul><h4 id="background-position-背景图片位置"><a href="#background-position-背景图片位置" class="headerlink" title="background-position 背景图片位置"></a>background-position 背景图片位置</h4><ul><li><p>用来控制背景图片在盒子中&#x3D;&#x3D;显示&#x3D;&#x3D;的开始位置</p></li><li><p>背景图片位置默认是从padding区开始计算，要将内边距算进去</p></li><li><p>写法：<code>background-position:  ;</code></p></li><li><p>位置表示法</p><table><thead><tr><th>写法</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>数值表达法(x y)</td><td>两个值</td><td>x：与盒子左边距离 y与盒子上边距离</td></tr><tr><td>数值表达法(x)</td><td>单个值</td><td>数值只表示x，垂直方向居中显示</td></tr><tr><td>百分比表达法(x% y%)</td><td>两个值</td><td>左偏移量&#x3D;(容器width+左右padding-背景图width)<code>*</code>百分比,上偏移量&#x3D;(容器height+上下padding-背景图height)<code>*</code>百分比</td></tr><tr><td>百分比表达法(x%)</td><td>单个值</td><td>该值表示x%，垂直方向水平居中</td></tr><tr><td>关键字表达法</td><td>两个值</td><td>垂直方向 水平方向</td></tr><tr><td>关键字表达法</td><td>单个值</td><td>center被省略</td></tr></tbody></table></li><li><p>负值情况：</p><ul><li>在数值和百分比表达法下，可以使用负值</li><li>右是水平的正方向，<strong>下是垂直的正方向</strong>。所以负值代表向左、向上移动</li></ul></li><li><p>关键词表达法<br>可以用<code>(top、bottom)</code>、<code>(center)</code>、<code>(left、right)</code>三组中的任意两个组的一个值进行组合，也可以用单个值</p><ul><li>单一关键字与对应组合关键字表示法<table><thead><tr><th>单一关键字</th><th>等价的组合关键字</th></tr></thead><tbody><tr><td>center</td><td>center center</td></tr><tr><td>top</td><td>top center或center top</td></tr><tr><td>bottom</td><td>bottom center或center bottom</td></tr><tr><td>left</td><td>left center或center left</td></tr><tr><td>right</td><td>right center或center right</td></tr></tbody></table></li></ul></li></ul><h4 id="background复合属性"><a href="#background复合属性" class="headerlink" title="background复合属性"></a>background复合属性</h4><blockquote><ul><li><code>background-color</code>、<code>background-image</code>、<code>background-repeat</code>、<code>background-position</code>可以进行合写</li><li>不包括background-size&#x2F;clip&#x2F;origin&#x2F;attachment!!!</li><li>合写用的非常多，而其中的单条一般用来进行层叠</li><li>写法：<br><code>background:red url() no-repeat 10px 20px;</code></li><li>复合写法中，省略未写的值会以默认值替代<ul><li>背景色默认为透明色</li><li>背景图片默认为没有</li><li>重复默认为左右平铺</li><li>图片位置默认为0% 0%</li></ul></li></ul></blockquote><h4 id="CSS精灵图"><a href="#CSS精灵图" class="headerlink" title="CSS精灵图"></a>CSS精灵图</h4><blockquote><ul><li>将多个小图标合并制作在一张图上</li><li>使用<code>background-position</code>属性单独显示其中一个</li><li>这样的技术叫做CSS精灵技术，也叫作CSS雪碧图</li><li>CSS精灵可以减少HTTP请求数，加快网页显示速度，但缺点也很明显：不方便测量，后期改动麻烦</li><li>适用于小图，大图不合适</li><li>使用Pxcook测量距离,注意正负值</li></ul></blockquote><h4 id="background-attachment-背景固定"><a href="#background-attachment-背景固定" class="headerlink" title="background-attachment 背景固定"></a>background-attachment 背景固定</h4><blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>scroll</code></td><td>默认值，背景图片相对于元素本身固定，但随页面滚动而滚动</td></tr><tr><td><code>fixed</code></td><td>背景相对于视口固定。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动</td></tr><tr><td><code>local</code></td><td>背景相对于元素的内容固定，如果一个元素拥有滚动机制，背景会随元素的内容滚动，同时背景图片随着页面的滚动而滚动</td></tr></tbody></table></blockquote><blockquote><ul><li>srcoll <img src="scroll.gif">背景图随页面滚动条移动，但不随元素内容移动</li><li>fixed <img src="fixed.gif">背景图固定在页面左上角，不随元素且不随页面滚动</li><li>local <img src="local.gif">背景图随页面一起滚动，也随元素内容滚动</li></ul></blockquote><h4 id="background-size背景尺寸"><a href="#background-size背景尺寸" class="headerlink" title="background-size背景尺寸"></a>background-size背景尺寸</h4><blockquote><p><code>backgroung-size: ;</code></p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>x y</td><td>分别表示背景图的宽高</td></tr><tr><td>x% y%</td><td>百分比是相对于盒子的宽高而言</td></tr><tr><td>x auto</td><td>x可以是数值也可以是百分比，auto是相对于宽来自动缩放</td></tr><tr><td>contain</td><td>背景图片智能改变尺寸以容纳到盒子里，把图片全部展示出来</td></tr><tr><td>cover</td><td>智能改变尺寸以撑满盒子，填充盒子的每个角落</td></tr></tbody></table></blockquote><h4 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h4><blockquote><ul><li>设置元素的背景(图片或颜色)是否延展到边框、内边距、内容<table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>border-box</td><td>默认值，背景绘制在边框方框内</td></tr><tr><td>padding-box</td><td>背景绘制在内边距方框内</td></tr><tr><td>content-box</td><td>背景绘制在内容方框内</td></tr><tr><td>text</td><td>背景被裁剪成文字的前景色</td></tr></tbody></table></li><li>使用text时，要将文字颜色设置为透明才能看到效果</li></ul></blockquote><pre class=" language-css"><code class="language-css"><span class="token number">.</span>box<span class="token number">4</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* background-image:linear-gradient(to right,red, blue, green); */</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(../../src/image/peakflower.webp)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 背景被裁剪成文字的前景色,可以用渐变或图片*/</span>    <span class="token property">background-clip</span><span class="token punctuation">:</span>text<span class="token punctuation">;</span>    <span class="token property">-webkit-background-clip</span><span class="token punctuation">:</span>text<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 除文字下的背景以外都隐藏 */</span>     <span class="token property">color</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 文字颜色设置为透明 */</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h4 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h4><blockquote><ul><li>背景图片的定位区域<table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>padding-box</td><td>背景图片的摆放以padding区域为参考(默认值)</td></tr><tr><td>border-box</td><td>背景图片的摆放以border区域为参考</td></tr><tr><td>content-box</td><td>背景图片的摆放以content区域为参考</td></tr></tbody></table></li></ul></blockquote><img src="origin.png"><h3 id="三、线性渐变"><a href="#三、线性渐变" class="headerlink" title="三、线性渐变"></a>三、线性渐变</h3><ul><li>在background-image属性下，创建线性渐变背景</li><li>用<code>,</code>分隔方向和不同颜色<br><code>background-image:linear-gradient(direction,color);</code><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>direction</code></td><td>指定渐变的方向</td></tr><tr><td><code>color</code></td><td>用于指定渐变的起止颜色</td></tr></tbody></table></li></ul><ol><li>方向</li></ol><ul><li>未设置角度：则默认从上而下渐变</li><li>用关键词来指定渐变方向<ul><li>to (top,bottom) (left,right)</li></ul></li><li>用度数来指定渐变方向,度数单位为deg,顺时间方向<br><code>background-image:linear-gradient(45deg,red,blue)</code></li></ul><ol start="2"><li>颜色</li></ol><ul><li>多个颜色值，可以用百分数定义纯净的该颜色的起始点，百分数写在颜色后面(颜色的分布范围是从前往起始点渗透)<br>background-img:linear-gradient(red 40%,blue 50%)&#96;</li><li>转换中点是指：两个颜色相互融合的交点</li><li>默认转换中点：两个颜色转换的中点</li><li>自定义转换中点：在两个颜色之间添加未标记的%，以指示颜色的中转位置<br><code>background-img:linear-gradient(red,40%,blue)</code></li><li>未设置0%和100%的终止色<ul><li>默认情况下，如果不带0%终止的颜色，则起始色为声明的第一个颜色</li><li>最后一种颜色将持续到100%标记，或者如果在最后一个没有声明长度时，则在100%标记处</li></ul></li></ul><pre><code>.box7 &#123;    background-image: linear-gradient(yellow,red,blue);    &#125;.box8 &#123;    background-image: linear-gradient(green 0%,20%，yellow ,red,blue,green100%);    &lt;!-- green 0%表示纯净的绿色在0%，但0%处是看不到的所以能看到的是更浅的绿色渗透出来,20%的地方是黄绿两色的转换中点 --&gt;    &#125;</code></pre><ul><li>没有颜色转换的情况<ul><li>纯净色的终止点就是转换中点</li></ul></li></ul><pre><code>.box &#123;    background-image: linear-gradient(yellow 20%,20%,red,blue);    &#125;</code></pre><ol start="3"><li>浏览器私有前缀<blockquote><p>不同浏览器有不同的私有前缀，用来对实验性质的CSS属性加以标识</p><table><thead><tr><th>浏览器</th><th>前缀</th></tr></thead><tbody><tr><td>Chrome浏览器</td><td><code>-webkit-</code></td></tr><tr><td>Firefox火狐</td><td><code>-moz-</code></td></tr><tr><td>IE、Edge</td><td><code>-ms-</code></td></tr><tr><td>欧朋</td><td><code>-o-</code></td></tr></tbody></table></blockquote></li></ol><pre><code>background-image:-webkit-linear-gradient(to top,gold,red)background-image:-moz-linear-gradient(to top,gold,red)background-image:-ms-linear-gradient(to top,gold,red)background-image:-o-linear-gradient(to top,gold,red)</code></pre><ol start="4"><li>渐变色工具<br><a href="https://c.runoob.com/more/gradients/#Omolon">https://c.runoob.com/more/gradients/#Omolon</a></li></ol><h3 id="四、径向渐变"><a href="#四、径向渐变" class="headerlink" title="四、径向渐变"></a>四、径向渐变</h3><blockquote><ul><li>盒子的background-image属性可以用radial-gradient()形式创建径向渐变背景图</li><li>径向渐变由其中心点、边缘形状轮廓、两个或多个色值结束点定义而成</li></ul></blockquote><ol><li>设置颜色节点<br><code>color 10%</code>：设置颜色转换中点<br><code>color,10%,</code>：设置颜色起始点</li><li>设置径向渐变的形状 shape<br><code>ellipse</code>表示椭圆形(默认)<br><code>circle</code>表示圆形</li><li>指定径向渐变中心位置 position<br><code>at 10px 20px</code></li><li>指定不同尺寸的大小<br>|值|描述|<br>|<code>fathest-corner</code>|(默认)：渐变的边缘形状与容器距离渐变中心点最远的一个角相交|<br>|<code>closest-corner</code>|渐变的边缘形状与容器距离渐变中心点最近的一个角相交(水平与垂直边相交)|<br>|<code>fathest-side</code>|与closest-side相反，边缘形状与容器距离渐变中心点最远的一边相切(或最远的垂直或水平边)|<br>|<code>closest-side</code>|圆形：渐变的边缘形状与容器距离渐变中心点最近的一边想切；椭圆：距离渐变中心点最近的垂直和水平边相切|<blockquote><ul><li>径向渐变-椭圆<img src="径向渐变-椭圆.png"></li><li>径向渐变-圆<img src="径向渐变-圆.png"></li><li>注意：<code>shape</code>、<code>position</code>、<code>尺寸的关键词</code>，彼此之间用&#x3D;&#x3D;空格&#x3D;&#x3D;分隔，但是与颜色之间用<code>,</code>分隔。</li></ul></blockquote></li></ol><h3 id="五、背景相关属性的补充"><a href="#五、背景相关属性的补充" class="headerlink" title="五、背景相关属性的补充"></a>五、背景相关属性的补充</h3><blockquote><ul><li><code>background-image/size/position/repeat</code>后面都可以设置多个值，每组值之间用<strong>逗号</strong>分隔<ul><li>每个属性之间用逗号分割的值，都按顺序<strong>一一对应</strong>，如果后面的值没有写，则以当前属性设置的<strong>第一组值</strong>为默认显示</li></ul></li><li>线性渐变&#x2F;径向渐变实质上是绘制背景图片，所以既可以和<code>url()</code>写在一起，又可以被&#96;size&#x2F;position&#x2F;repeat等属性控制</li></ul></blockquote><h3 id="六、其他常用属性"><a href="#六、其他常用属性" class="headerlink" title="六、其他常用属性"></a>六、其他常用属性</h3><h4 id="1-cursor鼠标样式"><a href="#1-cursor鼠标样式" class="headerlink" title="1.cursor鼠标样式"></a>1.cursor鼠标样式</h4><blockquote><ul><li>设置光标的类型，在鼠标指针悬停在元素上时显示相应样式</li><li>可以用属性值设置样式，也可以用图片设置光标样式(即用url自定义)</li><li>使用方式：<code>cursor:url(自定义图片地址),pointer;</code></li></ul></blockquote><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>需使用的自定义光标的URL.注释:请在此列表的末端始终定义一种普通的光标，一方没有由URL定义的可用光标</td></tr><tr><td>default</td><td>默认光标(通常是一个箭头)</td></tr><tr><td>auto</td><td>默认，浏览器设置的光标</td></tr><tr><td>crosshair</td><td>光标呈现为十字线</td></tr><tr><td>pointer</td><td>光标呈现为指示链接的指针(一只手)</td></tr><tr><td>move</td><td>此光标指示某对象可被移动,四个箭头</td></tr><tr><td>n-resize</td><td>此光标指示矩形框的边缘可被向上(向北)移动</td></tr><tr><td>s-resize</td><td>向下(南)</td></tr><tr><td>w-resize</td><td>向左(西)</td></tr><tr><td>e-resize</td><td>向右(东)</td></tr><tr><td>ne-resize</td><td>东北向</td></tr><tr><td>nw-resize</td><td>西北向</td></tr><tr><td>se-resize</td><td>东南向</td></tr><tr><td>sw-resize</td><td>西南向</td></tr><tr><td>text</td><td>此光标指示文本</td></tr><tr><td>wait</td><td>此光标指示程序正忙(转圈圈&#x2F;一只表&#x2F;沙漏)</td></tr><tr><td>help</td><td>此光标指示可用的帮助(一个问号或一个气球)</td></tr></tbody></table><blockquote><p>关于url这个值需要注意：</p></blockquote><ul><li>图片地址，在实际开发中一般为绝对路径</li><li>图片大小最好是<code>32*32</code>的大小(各浏览器支持大小不一，但32都ok)</li><li>图片格式，不同浏览器格式不一，可以是<code>png</code>、<code>svg</code>、<code>ico</code>、<code>cur</code>，一般以ico和cur为主</li><li>ico在线图标生成器：<code>https://www.bitbug.net/</code><ul><li>文件路径有中文时，可以从浏览器复制地址</li></ul></li></ul><h4 id="2-outline外轮廓"><a href="#2-outline外轮廓" class="headerlink" title="2.outline外轮廓"></a>2.outline外轮廓</h4><blockquote><p>用于设置元素周围的轮廓，其用法与borser属性一样</p><ul><li>语法：<code>outline:1px solid red;</code></li></ul></blockquote><blockquote><p>小属性：</p></blockquote><ul><li><code>outline-width</code>边框宽</li><li><code>outline-style</code>边框风格</li><li><code>outline-color</code>边框颜色</li></ul><blockquote><p><code>outline</code>与<code>border</code>的区别</p></blockquote><ul><li><code>outline</code>不占据空间，绘制于元素内容周围的轮廓，不参与盒子模型的占位计算，不会因为添加这个属性，而造成盒子占位空间变化</li><li><code>outline</code>没办法单独控制某一边效果，也就是没有<code>outline-left</code>等属性</li><li><code>border</code>参与盒子模型计算，会因为边框值的变化而造成盒子占位空间的变化</li></ul><blockquote><p>去掉表单元素默认的<code>outline</code>属性</p></blockquote><ul><li><code>outline</code>的值设置为<code>0</code>或<code>none</code>会移除元素的默认轮廓</li><li>表单元素为了增加其可访问性(聚焦提示)，都有默认的outline值.在点击该元素后会出现黑色的外轮廓<img src="outlin.png"></li></ul><pre><code> input &#123;    outline:none; &#125;</code></pre><h4 id="3-overflow超出部分隐藏"><a href="#3-overflow超出部分隐藏" class="headerlink" title="3.overflow超出部分隐藏"></a>3.overflow超出部分隐藏</h4><blockquote><p>该属性规定当内容一出元素框时该做什么</p></blockquote><ul><li>属性值<table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>默认值，内容溢出，会呈现在元素框之外</td></tr><tr><td>hidden</td><td>内容溢出，则溢出内容不可见</td></tr><tr><td>scroll</td><td>不管内容是否溢出，都会显示滚动条</td></tr><tr><td>auto</td><td>内容溢出，则显示滚动条以便查看其余内容；若不溢出，则不显示滚动条</td></tr><tr><td>inherit</td><td>规定应该从父元素继承<code>overflow</code>属性的值</td></tr></tbody></table></li></ul><blockquote><p>overflow-x和overflow-y</p></blockquote><ul><li>overflow-x:水平方向溢出设置</li><li>overflow-y:垂直方向溢出设置</li><li>注意：是里面的盒子宽&#x2F;高比外面大，才是出效果，overflow要设置在外面盒子的样式中</li></ul><h4 id="4-vertical-align属性"><a href="#4-vertical-align属性" class="headerlink" title="4.vertical-align属性"></a>4.vertical-align属性</h4><blockquote><p>指定<strong>行内元素、行内块元素、表格单元格元素</strong>的&#x3D;&#x3D;垂直&#x3D;&#x3D;对齐方式</p><ul><li>对<strong>块级元素</strong>是无效的<table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>baseline</td><td>使元素的基线与父元素的<strong>基线</strong>对齐</td></tr><tr><td>sub</td><td>使元素的基线与父元素的<strong>下标基线</strong>对齐</td></tr><tr><td>super</td><td>使元素的基线与父元素的<strong>上标基线</strong>对齐</td></tr><tr><td>text-top</td><td>使元素的<strong>顶部</strong>与父元素的<strong>字体顶部</strong>对齐</td></tr><tr><td>text-bottom</td><td>使元素的<strong>底部</strong>与父元素的<strong>字体底部</strong>对齐</td></tr><tr><td>middle</td><td>使元素的中部与父元素的基线加上父元素x-height(x高度)的一半对齐</td></tr><tr><td>数值(px)</td><td>使元素的基线对齐到与父元素的基线之上的给定长度，可以是负数</td></tr><tr><td>百分比</td><td>使元素的基线对齐到父元素的基线至上的给定百分比，该百分比是<code>line-height</code>属性的百分比，可以是负数</td></tr><tr><td>top</td><td>使元素及其后代元素的顶部与整行的顶部对齐</td></tr><tr><td>bottom</td><td>使元素及其后代元素的底部与整行的底部对齐</td></tr></tbody></table></li></ul></blockquote><blockquote><ul><li>小写字母x的下边缘线就是我们的基线</li><li>无论内容中有无x，都是以x下边缘为基线<img src="baseline.png"></li></ul></blockquote><blockquote><p>应用场景</p></blockquote><ul><li>用于控制文字与行内块元素或图片在垂直方向上的对齐方式</li><li>用于设置表格单元中内容的垂直对齐方式</li></ul><blockquote><p>对比</p></blockquote><ol><li>行文本&#x3D;&#x3D;垂直&#x3D;&#x3D;居中<br><code>line-height:盒子高度</code></li></ol><ul><li>对行内块元素无效</li></ul><ol start="2"><li>text-align属性</li></ol><ul><li>定义**行内内容(例如文字、图片、行内块元素)**相对于他的父元素的&#x3D;&#x3D;水平&#x3D;&#x3D;对齐方式</li></ul><ol start="3"><li>vertical-align属性</li></ol><ul><li>指定**行内元素、行内块元素、表格单元格元素的&#x3D;&#x3D;垂直&#x3D;&#x3D;对齐方式</li><li>对于块级元素无效</li></ul><h4 id="5-案例"><a href="#5-案例" class="headerlink" title="5.案例"></a>5.案例</h4><ol><li>常用的a标签布局按钮</li><li>水平居中的轮播图按钮</li><li>常见的产品展示效果-水壶</li><li>常见的分页导航</li><li>小米官网左侧菜单<blockquote><ul><li><code>:hover</code>：鼠标放上去之后变样式</li></ul></blockquote></li><li>精美的Tab选项卡菜单<blockquote><ul><li>圆角</li></ul></blockquote></li></ol><h2 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h2><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><ul><li>网页本质上是由一个个盒子模型拼凑而成，每个盒子里放置相关的图片、文字、视频等内容</li><li>所有HTML标签都可以看成矩形盒子，具有盒子模型结构</li><li>盒模型由四个部分组成，分别是:<code>content</code>、<code>padding</code>、<code>border</code>、<code>margin</code></li><li>盒模型有5个属性:宽<code>width</code>、高<code>height</code>、边框<code>boder</code>、内边距<code>padding</code>、外边距<code>margin</code><img src="盒子模型.png"></li><li>注:<code>width</code>、<code>height</code>不是盒子的总宽度，而是内容<code>content</code>的宽高</li></ul></blockquote><h4 id="2-width和height属性"><a href="#2-width和height属性" class="headerlink" title="2. width和height属性"></a>2. width和height属性</h4><blockquote><ul><li>width属性<ul><li>单位:px、移动端开发(百分比、rem等单位)</li><li>如果不设置width,块级元素会被撑满(但不意味着width可以继承，是无法继承的)，非块级元素只能被内容撑开</li><li>块级元素的宽度可以设置，非块级元素无效</li></ul></li><li>height属性<ul><li>如果不设置height属性，它将自动被其内容撑开，若没有内容，则height默认是0</li><li>块级元素的高度可以设置，非块级元素由内容撑开</li></ul></li><li>总结<ul><li>块级元素支持设置宽高，没有设置时，宽度自动撑满它的父元素；高度为内容高度，无内容时<strong>高度</strong>为0；</li><li>内联元素设置宽高无效，没有设置时，宽高由内容决定，无内容时<strong>宽高</strong>默认为0</li></ul></li></ul></blockquote><blockquote><table><thead><tr><th>类型</th><th>元素</th><th>性质</th></tr></thead><tbody><tr><td>块级元素</td><td>h1~h6、p、div、ul&#x2F;ol-li、dtdd、figure、figcaption、form、table、canvas、pre</td><td>独占一行、默认自上而下排列，可以设置宽高</td></tr><tr><td>内联元素&#x2F;行内元素</td><td>a、span、lable、strong、em、mark、datalist</td><td>不会自占一行，宽高由内容撑起</td></tr><tr><td>特殊内联元素&#x2F;行内块级元素&#x2F;可替换元素</td><td>img、audio、video、input、select-option、textarea</td><td>不独占一行，可以设置宽高</td></tr></tbody></table></blockquote><h4 id="3-border属性"><a href="#3-border属性" class="headerlink" title="3. border属性"></a>3. border属性</h4><blockquote><ul><li>三要素:线宽度、线型、线颜色<br> 写法：<code>border:2px solid red</code>;以空格分隔<ul><li>线型:<table><thead><tr><th>常见线型值</th><th>描述</th></tr></thead><tbody><tr><td>solid</td><td>实线</td></tr><tr><td>dashed</td><td>虚线</td></tr><tr><td>dotted</td><td>点状线</td></tr><tr><td>double</td><td>双边框</td></tr><tr><td>groove</td><td>定义3D凹槽边框，效果取决于border-color的值</td></tr><tr><td>ridge</td><td>定义3D垄状边框，效果取决于boder-color的值</td></tr><tr><td>inset</td><td>3D inset 边框，其效果取决于 border-color的值</td></tr><tr><td>outset</td><td>3D outset 边框，其效果取决于 border-color 的值</td></tr><tr><td>none</td><td>无边框</td></tr><tr><td>hidden</td><td>隐藏边框</td></tr></tbody></table></li></ul></li></ul></blockquote><blockquote><ul><li>三要素的小属性：</li><li>注：是为了层叠大属性用的，进行局部修改<table><thead><tr><th>小属性</th><th>描述</th></tr></thead><tbody><tr><td>border-width</td><td>线宽</td></tr><tr><td>border-style</td><td>线型</td></tr><tr><td>border-color</td><td>线颜色</td></tr></tbody></table></li></ul></blockquote><blockquote><ul><li>四个方向的边框<table><thead><tr><th>大属性</th><th>小属性</th><th>描述</th></tr></thead><tbody><tr><td>border-top</td><td>border-top-width&#x2F;style&#x2F;color</td><td>上边框</td></tr><tr><td>border-right</td><td>border-right-width&#x2F;style&#x2F;color</td><td>右边框</td></tr><tr><td>border-bottom</td><td>同上</td><td>下边框</td></tr><tr><td>border-left</td><td>同上</td><td>左边框</td></tr></tbody></table></li><li>去掉边框<br>去掉左边框：<code>border-left:none;</code></li></ul></blockquote><h4 id="4-border的应用场景"><a href="#4-border的应用场景" class="headerlink" title="4. border的应用场景"></a>4. border的应用场景</h4><blockquote><ul><li>制作三角形<ul><li>不输入文字，把宽高设置为0</li><li>边框会聚集成正方形，每一边都是一个三角形，只要把其他三边设置成<code>transparent</code>透明色就可以了</li></ul></li></ul><pre class=" language-css"><code class="language-css">div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">30</span>px solid transparent<span class="token punctuation">;</span> <span class="token property">border-top-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&lt;body> &lt;div>&lt;/div>&lt;/body></code></pre></blockquote><blockquote><ul><li>圆角属性border-radius<ul><li>该属性单位通常为<code>px</code>，表示圆角的半径</li><li>还可以使用百分比做单位，表示圆角起始于每条边的哪里</li><li>不输入文本内容，设置圆角</li><li>赋值方式：<ul><li>同时设置四个角<code>border-radius:20px;</code></li><li>单独设置四个角<code>border-radius:10px 20px 30px 40px;</code>分别代表“上右下左”</li><li>单独设置每一个角：小属性</li></ul></li></ul></li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>border-top-left-radius</code></td><td>左上角</td></tr><tr><td><code>border-top-right-radius</code></td><td>右上角</td></tr><tr><td><code>border-bottom-left-radius</code></td><td>左下角</td></tr><tr><td><code>border-bottom-right-radius</code></td><td>右下角</td></tr></tbody></table><pre><code>border-radius:50%; /*盒子为正方形时是圆*/border-radius:  px;/*圆，数值正方形宽度的一半*/border-radius: 50%;/*盒子为长方形时是椭圆*/</code></pre></blockquote><h4 id="5-padding内边距"><a href="#5-padding内边距" class="headerlink" title="5. padding内边距"></a>5. padding内边距</h4><blockquote><ul><li>padding是边框内壁到内容之间的距离</li></ul></blockquote><blockquote><ul><li>数值的写法，以空格分隔<table><thead><tr><th>数值</th><th>说明</th><th>示范</th></tr></thead><tbody><tr><td>四个数值</td><td>分别表示<code>上右下左</code></td><td><code>padding:10px 20px 30px 40px</code></td></tr><tr><td>&#x3D;&#x3D;三个数值&#x3D;&#x3D;</td><td>分别表示<code>上、左右、下</code></td><td><code>padding:10px 20px 30px</code></td></tr><tr><td>两个数值</td><td><code>上下、左右</code></td><td><code>padding:10px 20px</code></td></tr><tr><td>一个数值</td><td>四个边距相等</td><td><code>padding:10px;</code></td></tr></tbody></table></li><li>应用场景：如果需要设置父子间间距，即给父元素添加内边距来实现</li></ul></blockquote><blockquote><ul><li>小属性：四个方向可以分别设置，用来层叠大属性<table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>padding-top</code></td><td>上内边距</td></tr><tr><td><code>padding-right</code></td><td>右内边距</td></tr><tr><td><code>padding-bottom</code></td><td>下内边距&#96;</td></tr><tr><td><code>padding-left</code></td><td>左内边距</td></tr></tbody></table></li></ul></blockquote><blockquote><p><code>padding-bottom:100%;</code>可以使元素高度等于宽度</p></blockquote><h4 id="6-margin外边距"><a href="#6-margin外边距" class="headerlink" title="6. margin外边距"></a>6. margin外边距</h4><blockquote><ul><li>是盒子与其他盒子之间的距离</li><li>有四个方向可以分别设置</li></ul></blockquote><blockquote><ul><li>数值的写法与<code>padding</code>相同<table><thead><tr><th>数值</th><th>说明</th><th>示范</th></tr></thead><tbody><tr><td>四个数值</td><td>分别表示<code>上右下左</code></td><td><code>padding:10px 20px 30px 40px</code></td></tr><tr><td>&#x3D;&#x3D;三个数值&#x3D;&#x3D;</td><td>分别表示<code>上、左右、下</code></td><td><code>padding:10px 20px 30px</code></td></tr><tr><td>两个数值</td><td><code>上下、左右</code></td><td><code>padding:10px 20px</code></td></tr><tr><td>一个数值</td><td>四个边距相等</td><td><code>padding:10px;</code></td></tr></tbody></table></li></ul></blockquote><blockquote><ul><li>小属性：四个方向可以分别设置，用来层叠大属性<table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>margin-top</code></td><td>上外边距</td></tr><tr><td><code>margin-right</code></td><td>右外边距</td></tr><tr><td><code>margin-bottom</code></td><td>下外边距</td></tr><tr><td><code>margin-left</code></td><td>左外边距</td></tr></tbody></table><blockquote><p>注意：</p></blockquote></li><li>如果数值是百分比，则是以其&#x3D;&#x3D;父盒子的宽度&#x3D;&#x3D;为基础的，等于父盒子宽度的百分之几</li></ul></blockquote><blockquote><ul><li>margin的塌陷</li><li>又称为：外间距重叠&#x2F;外边距合并&#x2F;外边距穿透</li></ul><ol><li>兄弟元素之间，<strong>垂直</strong>方向：上下外边距出现塌陷</li></ol><ul><li>第一个元素的下外边距与第二个元素的上外边距会发生合并</li><li>margin不会叠加，只以大值为准</li><li>解决办法：<ul><li>任何一个元素加上<code>display:inline-block;</code></li><li>把外边距只加在其中一个元素上</li><li>任意一个元素margin换成对应的<code>padding</code>：把其中一个盒子外边距删除，然后套上透明色，内边距为原本的margin的盒子或者套上<code>padding-top</code>&#x3D;margin的盒子</li></ul></li></ul><ol start="2"><li>margin在<strong>水平</strong>方向上不会塌陷</li><li>父子元素之间，垂直方向：上外边距塌陷</li></ol><ul><li>当一个元素包含在另一元素中时，如果父元素没有设置内边距<strong>或</strong>边框把外边距分隔开，他们的上外边距也会发生塌陷(合并)</li><li>原本子元素设置margin后会与父元素的边框产生距离，但因为发生塌陷，所以父子元素上边框重叠，子元素的外边距穿透出去，与父元素的外边距合并</li><li>塌陷是最大值为主</li><li>解决办法：<ul><li>给父元素加上<code>overfiow:hidden</code>;但子元素超出的部分会被隐藏</li><li>给父元素添加<code>border</code>边框；但占位宽会多两像素</li><li>把子元素外边距删除，然后套上透明色，内边距为原本的margin的盒子或者套上<code>padding-top</code>&#x3D;margin的盒子</li><li>还有更多方法，学完浮动、定位后会讲解</li></ul></li><li>垂直或者父子元素的解决办法3：</li></ul><pre><code>&lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;&lt;div style=&quot;padding-top:30px;&quot;&gt;  &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre></blockquote><blockquote><ul><li>margin负值</li><li>讲完浮动后再学习</li></ul></blockquote><h4 id="7-去掉元素的默认样式"><a href="#7-去掉元素的默认样式" class="headerlink" title="7. 去掉元素的默认样式"></a>7. 去掉元素的默认样式</h4><blockquote><ul><li>网页中的元素为了展示元素本身的用途和结构，都会给元素添加默认的样式</li><li>常见的默认样式如下：<ul><li><code>body</code>的默认margin&#x3D;8px</li><li><code>ul</code>添加了默认的<code>padding</code>、<code>list-style</code>、<code>margin</code></li><li>a标签添加了默认的颜色、下划线</li><li>p标签有默认的<code>margin</code></li></ul></li><li>怎么做？<ul><li>用通配符选择器；实际工作中不使用<br><code>* &#123;margin:0;padding:0;&#125;</code></li><li>使用并集选择器，用<code>,</code>分隔</li></ul></li></ul><pre><code>body,ul,p &#123;    margin:0;padding:0;    &#125;</code></pre></blockquote><h4 id="8-盒子的水平居中"><a href="#8-盒子的水平居中" class="headerlink" title="8. 盒子的水平居中"></a>8. 盒子的水平居中</h4><blockquote><ul><li>将盒子的左右margin设置为<code>auto</code>，将盒子水平居中，只对块级元素有效</li><li><code>auto</code>用在上下外边距时没有用</li><li>文字、图片、行内块元素水平居中：<code>text-align:center</code></li><li>块级元素水平居中，是给元素自身加上<code>margin:0 auto;</code></li><li>盒子的垂直居中，需要使用绝对定位技术实现(后边会讲到)</li></ul></blockquote><h4 id="9-盒子模型占位计算"><a href="#9-盒子模型占位计算" class="headerlink" title="9. 盒子模型占位计算"></a>9. 盒子模型占位计算</h4><blockquote><ul><li>盒模型内容区大小：</li><li>在标准盒子模型中，决定了父元中的子元素能占据的最大宽高<ul><li>如果只有一个子元素，其宽度超过父元，就会溢出(对内联元素无效，因为内联元素不能设置宽高)</li><li>如果有多个子元素(行内元素、行内块元素)，子元的宽度加起来超过了父元，那么超过的那些子元就会换行显示。(块级元素本来就独占一行)</li></ul></li></ul></blockquote><blockquote><ul><li>盒模型可视宽高：在页面呈现效果的区域<ul><li>可视宽度：内容区宽度+左右内边距+左右边框</li><li>可视高度：内容区高度+上下内边距+上下边框</li></ul></li></ul></blockquote><blockquote><ul><li>实际占位宽高</li><li>决定了这个元素在父元素中的占据面积<ul><li>实际宽度：内容区宽度+左右内边距+左右边框左右外边距</li><li>实际高度：内容区高度+左右内边距+左右边框左右外边距</li></ul></li></ul></blockquote><h3 id="怪异盒模型-IE盒子模型，CSS3新增"><a href="#怪异盒模型-IE盒子模型，CSS3新增" class="headerlink" title="怪异盒模型(IE盒子模型，CSS3新增)"></a>怪异盒模型(IE盒子模型，CSS3新增)</h3><h4 id="1-盒模型分为两种"><a href="#1-盒模型分为两种" class="headerlink" title="1. 盒模型分为两种"></a>1. 盒模型分为两种</h4><blockquote><ul><li>标准盒模型：盒子大小会因为设置的内外边距和边框而变化，即：外扩</li><li>怪异盒模型：盒子的实际大小是设置的大小(width、height),不会因为内外边距、边框的大小而变化，即内缩</li><li>二者之间的区别：<ul><li>标准盒模型的width和height设置的是内容区；而在怪异盒模型中，width和height包括内容区、边框、内边距</li><li>尺寸计算公式不同</li></ul></li></ul></blockquote><h4 id="2-计算公式"><a href="#2-计算公式" class="headerlink" title="2.计算公式"></a>2.计算公式</h4><blockquote><ul><li>width&#x3D;内容区宽度+边框+内边距</li><li>height&#x3D;内容区高度+边框+内边距</li><li>在以上公式中，除内容区以外的都可以设置宽高，所以内容区的宽高可以反推计算</li></ul></blockquote><h4 id="3-盒模型转换"><a href="#3-盒模型转换" class="headerlink" title="3. 盒模型转换"></a>3. 盒模型转换</h4><blockquote><p>通过<code>box-sizing</code>属性切换盒子模型</p><ul><li><code>box-sizing:content-box;</code>是默认值，盒子以标准盒子模型特性来渲染</li><li><code>box-sizing:border-box;</code>使盒子以怪异盒子模型特性来渲染</li></ul></blockquote><h4 id="4-button-按钮"><a href="#4-button-按钮" class="headerlink" title="4. button 按钮"></a>4. button 按钮</h4><blockquote><ul><li><code>button</code>标签自带<code>box-sizing:border;</code>属性</li><li>所以<code>div</code>和<code>button</code>的大小是有差异的，button内缩，div外扩</li></ul></blockquote><h4 id="5-box-sizing应用场景"><a href="#5-box-sizing应用场景" class="headerlink" title="5. box-sizing应用场景"></a>5. box-sizing应用场景</h4><blockquote><ul><li><code>box-sizing</code>属性大量应用于移动网页制作中，因为它结合百分比布局、弹性布局等非常好用，在PC页面开发中使用较少</li><li>该属性兼容到IE9</li><li>若我们期望不管内容、边框、内边距大小如何变化，元素的可视宽高始终不变时，就可以给元素添加<code>box-sizing:border-box;</code>属性，以怪异盒模型来渲染</li><li>不管元素的占位宽如何变化，始终保持边框和内边距不变，希望通过改变内容区大小来达到目的</li><li>常见的响应式开发中、栅格系统等</li></ul></blockquote><h3 id="前端切图工具"><a href="#前端切图工具" class="headerlink" title="前端切图工具"></a>前端切图工具</h3><table><thead><tr><th>软件名称</th><th>功能</th><th>描述</th><th>官网下载地址</th></tr></thead><tbody><tr><td>Snipaste</td><td>截图+贴图</td><td>个人模仿他人效果可用</td><td><a href="https://zh.snipaste.com/">https://zh.snipaste.com/</a></td></tr><tr><td>PxCook</td><td>标注+代码生成(psd)</td><td>是一款连接设计师到开发者之间的协作工具</td><td><a href="https://www.fancynode.com.cn/pxcook/">https://www.fancynode.com.cn/pxcook/</a></td></tr><tr><td>Photoshop</td><td>专业的图片软件处理工具</td><td>实际企业开发设计软件</td><td><a href="https://www.adobe.com/cn/products/photoshop.html">https://www.adobe.com/cn/products/photoshop.html</a></td></tr><tr><td>蓝湖</td><td>产品设计协作平台</td><td>实际企业团队开发协作</td><td><a href="https://lanhuapp.com/">https://lanhuapp.com/</a></td></tr></tbody></table><h4 id="1-photoshop设计软件"><a href="#1-photoshop设计软件" class="headerlink" title="1.photoshop设计软件"></a>1.photoshop设计软件</h4><blockquote><p>助理老师破解版安装教程</p><ul><li>下载、解压压缩包</li><li>&#x3D;&#x3D;断网安装&#x3D;&#x3D;，断网后直接点击Set-up-exe进入安装，过程中不需要任何操作，等待5-10分钟即可</li><li>安装好后,通过window键打开</li><li>使用时，把对应的psd设计稿拖动到软件区域即可</li></ul></blockquote><h4 id="2-PxCook像素大厨"><a href="#2-PxCook像素大厨" class="headerlink" title="2.PxCook像素大厨"></a>2.PxCook像素大厨</h4><blockquote><ul><li>设计师可以免去繁琐的标注功能，前端工程师也可以更加直观的查看设计稿中的元素的内容，间距，尺寸和样式等</li><li>它还可以为工程师直接呈现选中元素的多平台样式代码和素材切图</li><li>官方使用教程：<a href="https://www.fancynode.com.cn/pxcook/docs?ids=qa/pay">https://www.fancynode.com.cn/pxcook/docs?ids=qa/pay</a></li></ul></blockquote><h4 id="3-PS与PxCook配合"><a href="#3-PS与PxCook配合" class="headerlink" title="3.PS与PxCook配合"></a>3.PS与PxCook配合</h4><blockquote><ul><li>设计师用PS设计稿设计好的PSD的效果图后，接下来的工作就是交给程序员来开发成网页</li><li>首先程序员需要把PSD设计稿按开发的需求标记qieytu切图，导出需要的图片素材</li></ul></blockquote><blockquote><ul><li>连接Pxcook和PS</li></ul><ol><li>打开PS–&gt;编辑–&gt;远程连接–&gt;启用远程连接–&gt;设置密码</li><li>打开Pxcook，点击右上角的小刀图标，输入密码，连接成功</li></ol></blockquote><blockquote><ul><li>标记切图：<ul><li>打开pxccok，建立新项目</li><li>将图片拖入PS–&gt;选择图层–&gt;窗口–&gt;扩展功能–&gt;pxccok切图–&gt;选择设备类型、分辨率、保存–&gt;导出到pxcook</li><li>在pxcook后，点击黑色区域，就可以看到PNG，点击保存</li></ul></li><li>分析效果图<ul><li>分析结构，上下结构&#x2F;左右结构</li><li>先拿到效果图，分析它的html结构</li><li>清除默认样式(样式初始化)</li><li>搭建html结构，再写CSS样式</li></ul></li><li>自定义切图的尺寸<ul><li>首先需要确保被标记的图层为图层组，若不是则需要打组</li><li>建立一个组，然后把所需的图层放入组内</li><li>在组内创建一个名为<code>@bounds</code>或<code>#</code>的·图层，通过矩形工具，在该图层内绘制一个举行来描述要切除切片的范围</li><li>打开扩展工具——pxccok标记为切图–&gt;保存–&gt;导入pxcook<br>注意：自定义切图导出到pxcook界面也是完整图，双击项目图，左边就会出现自定义切图<img src="自定义切图.png"></li></ul></li></ul></blockquote><h4 id="4-出现的问题"><a href="#4-出现的问题" class="headerlink" title="4.出现的问题"></a>4.出现的问题</h4><blockquote><ul><li>PS安装后打开时一直在加载中</li></ul><ol><li>打开编辑–&gt;首选项–&gt;常规–&gt;勾选”停用主页屏幕”<img src="PS停用主页屏幕.png"></li></ol><ul><li>PS扩展界面无法打开</li></ul><ol><li>打开注册器(在win中搜索注册器，或者按住快捷键”WIN+R”,输入”regedit”)</li><li>打开以下路径：”计算机\HKEY_CURRENT_USER\Software\Adobe\CSXS.9”</li><li>新建字符串值，输入名称”PlayerDebugMode”，值为”1”</li><li>重新打开PS即可</li></ol></blockquote><h2 id="CSS-三大特性：继承、层叠性、优先级"><a href="#CSS-三大特性：继承、层叠性、优先级" class="headerlink" title="CSS 三大特性：继承、层叠性、优先级"></a>CSS 三大特性：继承、层叠性、优先级</h2><blockquote><p>在实际的开发中，经常会遇到CSS应用时的冲突问题。比如本来应该产生效果的样式没有生效，或有时候不想要的效果硬实现了。<br>CSS三大特性：继承性、层叠性、优先级就是为解决这些问题而来的。</p></blockquote><h3 id="一、CSS继承性"><a href="#一、CSS继承性" class="headerlink" title="一、CSS继承性"></a>一、CSS继承性</h3><ul><li>CSS的继承性是指特定的CSS属性会向下传递到子孙元素。即祖先元素设置，后代元素即生效</li></ul><h4 id="CSS继承性遵循”就近原则”"><a href="#CSS继承性遵循”就近原则”" class="headerlink" title="CSS继承性遵循”就近原则”"></a>CSS继承性遵循”就近原则”</h4><blockquote><ul><li>如果元素自身没有设置某个具有可继承的属性，则会向他的父元素继承</li><li>如果父元素没有，则再往上继承父元素的父元素的这个属性，一层一层向上找，如果找不到，就以默认的样式显示</li></ul></blockquote><blockquote><p>如何查看元素的默认值?</p></blockquote><ul><li>要了解一个属性的默认值，可以把这个属性值设置为<code>initial</code>，然后审查元素，在computed&#x2F;styles面板中可以看到其默认值，如<code>color:initial</code></li></ul><h4 id="可继承和不可继承属性有哪些"><a href="#可继承和不可继承属性有哪些" class="headerlink" title="可继承和不可继承属性有哪些"></a>可继承和不可继承属性有哪些</h4><blockquote><p>可继承属性:<strong>文本相关的属性</strong>普遍具有继承性，只需要给祖先标签设置，即可在后代所有标签中生效</p></blockquote><ul><li>字体系列：font-size、font-family、font-style、font、font-weight</li><li>文本系列：color、text-align、text-indent、line-height、word-spacing、letter-spacing、text-transform</li><li>列表布局属性：list-style、list-style-type、list-style-image、list-style-image</li><li>光标属性：cursor光标显示为何种形态</li><li>元素可见性：visibility控制元素显示和隐藏</li></ul><blockquote><p>不可继承属性</p></blockquote><ul><li>盒子模型：display、margin、border、padding、height、min-height、max-height、width、min-width、max-width</li><li>定位相关：position、left、right、top、bottom、z-index</li><li>浮动：float、clear</li><li>其他：background、overflow、table-layout、vertical-align、page-break-after、page-bread-before、unicode-bidi</li></ul><h4 id="特殊情况："><a href="#特殊情况：" class="headerlink" title="特殊情况："></a>特殊情况：</h4><ul><li>a标签的color值默认不继承，它自带默认效果</li></ul><h4 id="line-height的继承性"><a href="#line-height的继承性" class="headerlink" title="line-height的继承性"></a>line-height的继承性</h4><blockquote><p><code>line-height</code>的值有三种单位，在继承时是有差异的</p><table><thead><tr><th>父元素line-height值</th><th>继承规则</th><th>子元素line-height值</th></tr></thead><tbody><tr><td>50px</td><td>直接继承该值</td><td>50px</td></tr><tr><td>2</td><td>直接继承该比例</td><td>2</td></tr><tr><td>200%</td><td>继承百分比<strong>计算后</strong>的值</td><td>40px</td></tr></tbody></table></blockquote><ul><li>数值表示法和百分比表示法是以<code>font-size</code>为依据的<img src="line-height.png"></li></ul><h4 id="body标签样式初始化"><a href="#body标签样式初始化" class="headerlink" title="body标签样式初始化"></a>body标签样式初始化</h4><blockquote><p>因为文字相关属性具有继承性，所以通常会设置<code>&lt;body&gt;</code>标签的字号、颜色、行高等，这样就能当做整个网页的默认样式了</p></blockquote><h4 id="设置继承性"><a href="#设置继承性" class="headerlink" title="设置继承性"></a>设置继承性</h4><blockquote><p>默认不继承的属性想要继承，可以把属性值设置为<code>inherit</code>，表示这个属性的值继承父元素的<br>扩展补充知识</p></blockquote><ul><li><code>initial</code>：设置属性值和浏览器默认样式相同</li><li><code>inherit</code>：设置属性值默认继承父元素</li><li><code>unset</code>：为以上两个值的组合；如果属性有继承性，则继承父元素，没有则为默认值(不设置也是这个效果)</li></ul><h3 id="二、CSS层叠性"><a href="#二、CSS层叠性" class="headerlink" title="二、CSS层叠性"></a>二、CSS层叠性</h3><blockquote><ul><li>层叠性是CSS的一个基本特征，它是一个定义了如何合并来自多个源(css规则)的属性值的算法</li><li>它在CSS中处于核心地位，CSS的全称：层叠样式表正式强调了这一点</li></ul></blockquote><h4 id="CSS层叠性解读"><a href="#CSS层叠性解读" class="headerlink" title="CSS层叠性解读"></a>CSS层叠性解读</h4><blockquote><ul><li>层叠性是指多个CSS规则可以作用于同一个标签，效果叠加，并不完全覆盖</li><li>CSS的层叠性有两层含义：<strong>叠加</strong>和<strong>覆盖</strong></li><li>不同选择器作用于同一元素，不同属性会<strong>叠加</strong>，相同属性会<strong>覆盖</strong></li><li>在覆盖时需要遵循两大原则：”就近原则”和”优先级”</li></ul></blockquote><h4 id="CSS的叠加原理"><a href="#CSS的叠加原理" class="headerlink" title="CSS的叠加原理"></a>CSS的叠加原理</h4><blockquote><ul><li>不同选择器作用于同一元素，不同属性会叠加作用于元素</li></ul></blockquote><h4 id="CSS的覆盖原则"><a href="#CSS的覆盖原则" class="headerlink" title="CSS的覆盖原则"></a>CSS的覆盖原则</h4><blockquote><p>就近原则</p></blockquote><ul><li>当两个或多个<strong>优先级相同</strong>的选择器作用到同一个元素时。如果出现相同的属性，则以写在后面的选择器中的属性为主</li></ul><blockquote><p>优先级</p></blockquote><ul><li>当两条或多条规则(选择器)作用到同一个元素，如果出现相同的属性，则以优先级高的为主</li></ul><h4 id="层叠性的冲突处理"><a href="#层叠性的冲突处理" class="headerlink" title="层叠性的冲突处理"></a>层叠性的冲突处理</h4><ul><li>不同CSS规则集同时作用于同一个标签，不同属性相互叠加，相同属性会覆盖</li><li>相同属性覆盖，首先需要计算选择器的权重，最后以选择器权重高的为主</li><li>如果选择器权重相同，则写在后面的会覆盖写在前面的</li><li>如果想要实现的效果，因为选择器权重低而不生效，则通过提高选择器权重来达到效果</li></ul><h3 id="三、CSS选择器优先级"><a href="#三、CSS选择器优先级" class="headerlink" title="三、CSS选择器优先级"></a>三、CSS选择器优先级</h3><ul><li>当多个CSS规则集同时作用于同一个HTML标签时，不同属性会叠加，但相同属性会发生覆盖</li><li>在发生覆盖时，浏览器通过选择器的优先级来判断以哪个选择器中的属性值为主，从而在该元素上应用这些属性值</li></ul><h4 id="单个选择器类型的权重"><a href="#单个选择器类型的权重" class="headerlink" title="单个选择器类型的权重"></a>单个选择器类型的权重</h4><ul><li><p>基础选择器：id选择器&gt;class选择器&gt;标签选择器&gt;通配符选择器</p></li><li><p>本质上不同类型的选择器有不同的分数值，分数值越高，选择器的权重越高</p><table><thead><tr><th>选择器的类型</th><th>实例</th><th>选择器权重</th><th>等级</th></tr></thead><tbody><tr><td>!important</td><td><code>div&#123;color:red!important;&#125;</code></td><td>无穷大</td><td>特级</td></tr><tr><td>行内样式(style属性中样式)</td><td><code>style=&#39;color:red&#39;;</code></td><td>1000</td><td>第一等级</td></tr><tr><td>id选择器</td><td>#id</td><td>0100</td><td>第二等级</td></tr><tr><td>class、伪类、属性选择器</td><td><code>.box</code>、<code>:hover</code>、<code>type=text</code></td><td>0010</td><td>第三等级</td></tr><tr><td>标签选择器、伪元素选择器</td><td><code>div1、</code>::after&#96;</td><td>0001</td><td>第四等级</td></tr><tr><td>通配符、子选择器、相邻选择器等</td><td><code>*</code>、<code>&gt;</code>、<code>+</code>、<code>~</code></td><td>0000</td><td></td></tr><tr><td>继承的样式</td><td></td><td>0000</td><td></td></tr></tbody></table></li><li><p>通配符<code>*</code>权重实际是要大于继承的样式的；因为只有在没有设置样式是才会继承或者使用默认样式</p></li></ul><h4 id="复杂选择器优先级计算"><a href="#复杂选择器优先级计算" class="headerlink" title="复杂选择器优先级计算"></a>复杂选择器优先级计算</h4><ul><li>优先级就是分配给指定的CSS声明的一个权重</li><li>选择器的优先级是由选择器中的每一种**选择器类型的数值(权值)**相加的最终结果来决定</li><li>一个选择器的优先级是有四个部分相加计算得来的(数值越大，代表选择器的优先级越高)<br><strong>以下是复杂选择器的权重计算规则</strong></li><li>这里的行内样式<code>&lt;p style=&quot;color:red&quot;&gt;&lt;/p&gt;</code>并不是选择器，但我们把它放在一起，是因为它会影响我们最终的结果<table><thead><tr><th>选择器</th><th>千位</th><th>百位</th><th>十位</th><th>个位</th><th>优先级</th></tr></thead><tbody><tr><td>行内样式</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1000</td></tr><tr><td><code>div p</code></td><td>0</td><td>0</td><td>0</td><td>2</td><td>0002</td></tr><tr><td><code>#box div p</code></td><td>0</td><td>1</td><td>0</td><td>2</td><td>0102</td></tr></tbody></table></li></ul><p>|<code>.box .item h3</code>|0|0|2|1|0021|<br>|<code>.box:hover p</code>|0|0|2|1|0021|</p><blockquote><p>注意事项：</p></blockquote><ul><li>在进行选择器权重计算时不允许进行<strong>进位</strong></li><li>例如，20个类选择器仅仅意味着20个十位，而不能视为两个百位；也就是说，无论多少个类选择器的权重叠加，都不会超过一个ID选择器</li><li>在比较选择器优先级时，从左往右比较，一位一位比较</li></ul><h4 id="important提升权重"><a href="#important提升权重" class="headerlink" title="!important提升权重"></a><code>!important</code>提升权重</h4><ul><li>当在一个样式声明中使用一个<code>!important</code>规则时，此声明将覆盖任何其他声明，只要CSS声明属性值后面带<code>!important</code>，就一定以它为主</li><li>从技术上讲，<code>!important</code>与优先级无关，但它与最终结果直接相关</li></ul><blockquote><p>注意：慎用<code>!important</code></p></blockquote><ul><li>因为这会带来样式的冲突，后面某个地方，需要重写这个样式时，会发现根本无效。一般你在利用第三方组件或css框架时，如果不能充下央视，那将会失去很多色彩</li><li>在某些情况下是一定要用的，比如在之前学的自定义字体时，<code>font-family</code>属性后面加了<code>!important</code>关键字</li></ul><h4 id="总结：CSS选择器优先级"><a href="#总结：CSS选择器优先级" class="headerlink" title="总结：CSS选择器优先级"></a>总结：CSS选择器优先级</h4><blockquote><p>首先要找到，有<strong>哪些选择器</strong>在控制标签元素的样式，然后按以下五步来分析</p></blockquote><ul><li>第一步：找有没有带<code>important</code>关键词的CSS声明，有就一定以他为主，没有看第二步</li><li>第二步：找有没有行内样式，有则以行内样式为主，没有看第三步</li><li>第三步：看选择器的优先级，优先级高的为主，如果优先级相同，则看第四步</li><li>第四步：优先级相同，以写在后面的为主。如果没有选择器作用于当前标签，则看第五步</li><li>看此CSS属性是否具有继承性，如果有，则继承父元素的样式，如果没有，则以默认样式显示</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS核心知识点（一）</title>
      <link href="/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/11/29/CSS%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="CSS基础认知"><a href="#CSS基础认知" class="headerlink" title="CSS基础认知"></a>CSS基础认知</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><blockquote><p>CSS又称层叠样式表，它是一种标记语言，而不是编程语言</p><p>作用：给html标签添加样式</p><p>CSS已经发展到CSS3，在最新版本3.0中，增加了大量功能，以前只能用JS才能实现的现在用CSS3也能做到</p><p>要清楚CSS3新增了哪些功能，与之前版本的不同在哪</p><p>web前端三大核心基础：</p></blockquote><table><thead><tr><th>分层</th><th>语言</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td>结构层</td><td>HTML</td><td>搭建结构、放置部件、描述语义</td><td>骨骼</td></tr><tr><td>样式层</td><td>CSS</td><td>美化页面，实现布局</td><td>皮肤</td></tr><tr><td>行为层</td><td>JavaScript</td><td>实现交互效果，数据收发、表单验证等</td><td>神经</td></tr></tbody></table><h3 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h3><h4 id="CSS规则集：选择器-声明块"><a href="#CSS规则集：选择器-声明块" class="headerlink" title="CSS规则集：选择器+声明块"></a>CSS规则集：选择器+声明块</h4><ul><li>选择器是指需要改变样式的html元素</li><li>声明块用<code>&#123;&#125;</code>包裹，里面有多条声明，每条声明块之间用<code>;</code>间隔</li><li>每条声明包含一个属性名称和一个值，以冒号分隔<ul><li>最后一条声明可以不写<code>;</code>，但为了统一标准，建议书写完整</li></ul></li></ul><h4 id="CSS样式的书写方式"><a href="#CSS样式的书写方式" class="headerlink" title="CSS样式的书写方式"></a>CSS样式的书写方式</h4><ul><li><strong>方式一</strong>：每一行一条声明，选择器与声明之间一个空格，冒号后面一个空格</li></ul><pre><code>p &#123;    color: red;    font-size: 20px;&#125;</code></pre><blockquote><p>开发中使用方式一，方便阅读和修改</p></blockquote><ul><li><strong>方式二</strong>：选择器和声明写在一行</li></ul><pre><code>p &#123;color: red;font-size: 20px;&#125;</code></pre><ul><li>项目上线时，会把CSS样式进行压缩，压缩后就是方式二的写法</li></ul><h4 id="CSS注释"><a href="#CSS注释" class="headerlink" title="CSS注释"></a>CSS注释</h4><ul><li>注释方式：<code>/* 注释 */</code></li><li>位置：只能放置在style里</li><li>快捷键：<code>ctrl+/</code></li></ul><blockquote><p>与html注释的区别：</p></blockquote><ul><li>写法：<code>&lt;!-- 注释--&gt;</code></li><li>能放置在html的任何位置</li></ul><h4 id="CSS的书写位置"><a href="#CSS的书写位置" class="headerlink" title="CSS的书写位置"></a>CSS的书写位置</h4><ul><li><strong>方式一</strong>：行内样式<ul><li>在标签中加入style属性</li></ul></li></ul><pre><code>&lt;h2 style=&quot;color: red&gt;行内样式&lt;/h2&gt;</code></pre><ul><li><strong>方式二</strong>：内嵌样式&#x2F;内部样式<ul><li>在<code>&lt;head&gt;&lt;/head&gt;</code>标签对中写style属性</li><li>在HTML5中，type可以不写</li></ul></li></ul><pre><code>&lt;head&gt;省略html框架&lt;style type=&quot;text/css&quot;&gt;h1 &#123;    color: bule;    font-size: 20px    &#125;&lt;/style&gt;&lt;/head&gt;</code></pre><ul><li><strong>方式三</strong>：外链样式&#x2F;外部样式<ul><li>新建一个<code>.css</code>文件，使用link标签引入到界面中</li><li>link标签要写在head中</li><li>优点：多个网页可以共用一个CSS样式文件</li></ul></li></ul><pre><code>&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;文件路径&quot;/&gt;&lt;/head&gt;</code></pre><blockquote><p>&#96;rel&#x3D;”stylesheet可以不写”</p></blockquote><ul><li><strong>方式四</strong>：导入式样式<ul><li>导入<code>.css</code>的文件</li><li>缺点：使用导入式的样式表，页面加载完成后才会加载样式；所以在CSS文件加载完成之前，网页就会呈现没有CSS样式的裸奔现象</li></ul></li></ul><pre><code>&lt;style&gt;    @import url(文件路径)&lt;/style&gt;</code></pre><ul><li>实际开发中很少用到</li></ul><blockquote><p>总结：CSS4 种书写位置特点与区别</p></blockquote><!-- |引入方式|书写位置|作用范围|优先级|使用场景||---|---|---|---|---||行内样式|css 样式写在标签的 style 属性中|当前标签|最高配合|JS 或特殊需求||内嵌样式|写在<style>标签中|当前页面|由书写位置和选择器优先级来共同决定|小案例 或 对网站首页首次打开速度要求很高的网页需要；如：百度、腾讯首页||外链样式|css 样式写在单独 css 文件中，通过 link 标签引入|多个页面|由书写位置和选择器优先级来共同决定|项目开发中高频使用||导入式样式|把@import 放在style标签中或 CSS 文件中，用于导入外部 CSS 样式文件|被导入的页面|最低|项目开发中几乎不用（用作了解即可）| --><h4 id="CSS样式的优先级"><a href="#CSS样式的优先级" class="headerlink" title="CSS样式的优先级"></a>CSS样式的优先级</h4><blockquote><p>&#x3D;&#x3D;行内样式&#x3D;&#x3D;的优先级最高</p><p>内联样式和外部样式优先级相同，按照&#x3D;&#x3D;就近原则&#x3D;&#x3D;渲染：渲染离标签更近的</p></blockquote><h3 id="三、CSS选择器"><a href="#三、CSS选择器" class="headerlink" title="三、CSS选择器"></a>三、CSS选择器</h3><h4 id="选择器分类"><a href="#选择器分类" class="headerlink" title="选择器分类"></a>选择器分类</h4><ul><li>传统 CSS2.1 选择器<ul><li>标签选择器和 id 选择器</li><li>class（类）选择器</li><li>复合选择器</li><li>伪类</li><li>CSS3 新增选择器</li></ul></li><li>元素关系选择器<ul><li>序号选择器</li><li>属性选择器</li><li>CSS3 新增伪类</li><li>伪元素</li></ul></li><li>层叠性和选择器权重计算</li></ul><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><ul><li>又称元素选择器&#x2F;类型选择器</li><li>直接使用&#x3D;&#x3D;元素的标签名&#x3D;&#x3D;当做选择器，将选择页面上的&#x3D;&#x3D;所有<strong>该种标签</strong>&#x3D;&#x3D;，无论位置深浅</li><li>作用：由于覆盖面非常大，所以适用于标签样式的初始化</li></ul><pre><code>ul&#123;  list-style:none;&#125;a &#123;  text-decoration:none;&#125;</code></pre><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><ul><li>id选择器是使用元素的id属性来选择特定元素</li><li>写法：<code>#+id名</code></li><li>作用:元素的id是唯一的，所以用于选择一个唯一的元素</li><li>id的正确命名规范：<ul><li>只能由字母、数字、下划线<code>_</code>、短横线<code>-</code>构成</li><li>不能以数字开头</li><li>区分大小写</li><li>最好多个单词之间以<code>-</code>分割</li></ul></li></ul><pre><code>&lt;style&gt;   #box1 &#123;       color:orange;   &#125;&lt;/style&gt;&lt;body&gt;   &lt;h3 id=&quot;box1&quot;&gt;三级标题&lt;/h3&gt;&lt;/body&gt;</code></pre><h4 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h4><ul><li>class属性表示”类名”</li><li>类名的命名规范与id相同</li><li>写法：<code>.+class名</code><ul><li>多个标签可以使用相同的类名</li><li>同一个标签可以属于多个类，类名之间用空格隔开</li></ul></li><li>原始类<ul><li>应用场景：组件化开发</li><li>在网页项目前，可以将所有的常用字号、文字、颜色、行高、外边距、内边距等设置为单独的类</li><li>HTML标签就可以”按需选择”它的类名，以快速添加样式</li></ul></li></ul><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><ul><li>可以作用于页面当中的所有元素</li><li>基本不用，对性能消耗过大</li><li>写法：<code>*</code></li></ul><pre><code>* &#123;  color:green;&#125;</code></pre><h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><table><thead><tr><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>后代选择器</td><td><code>.box .para</code></td><td>选择类名为box的标签 内部的类名为para的标签</td></tr><tr><td>交集选择器</td><td><code>li.para</code></td><td>选择既是li标签，也属于para类的标签</td></tr><tr><td>并集选择器</td><td><code>ul,ol</code></td><td>选择所有ul和ol标签</td></tr></tbody></table><ol><li>后代选择器</li></ol><ul><li>在CSS中，使用&#x3D;&#x3D;空格&#x3D;&#x3D;表示<code>后代</code>，不一定是“儿子”</li><li>后代选择器可以有很多空格，表示隔开好几代</li><li>会同时选择满足条件的子和孙</li></ul><ol start="2"><li>交集选择器</li></ol><ul><li>没有空格</li><li>选择同时满足多个条件的标签</li></ul><ol start="3"><li>并集选择器</li></ol><ul><li>也叫做<code>分组选择器</code>，逗号表示分组</li><li>同时选择多个标签</li></ul><ol start="4"><li>复合选择器：选择器可以任意搭配结合</li></ol><h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h4><blockquote><p>伪类是添加到选择器的描述性词语，指定要选择元素的特殊状态</p><p>超链接拥有四个特殊状态</p><table><thead><tr><th>伪类</th><th>描述</th></tr></thead><tbody><tr><td><code>a:link</code></td><td>没有被访问的超级链接</td></tr><tr><td><code>a:visited</code></td><td>已经被访问过的超级链接</td></tr><tr><td><code>a:hover</code></td><td>正在被鼠标悬停的超级链接</td></tr><tr><td><code>a:active</code></td><td>正在被激活的超级链接(按下按键，但还没有松开按键)</td></tr><tr><td><strong>爱恨准则</strong></td><td></td></tr></tbody></table></blockquote><ul><li>a标签的伪类书写，按照”爱恨准则”的顺序，否则会与伪类不生效</li><li>LOVE HATE:<code>:link</code>、<code>:visited</code>、<code>:hover</code>、<code>:active</code></li></ul><pre><code>&lt;style&gt;    /*      顺序不能乱 ，爱恨准则 LOVE HATE      :link  -&gt; :visited -&gt; :hover -&gt; :active    */    a:link &#123;      color:red;    &#125;    a:visited &#123;      color:blue;    &#125;    a:hover &#123;      color: green;    &#125;    a:active &#123;      color:yellow;    &#125;&lt;/style&gt;</code></pre><blockquote><p><strong>注</strong></p></blockquote><ul><li>遵守了爱恨准则，但<code>a:link</code>不生效，是因为之前访问过的网址会被浏览器记录，就会显示<code>a:visited</code>的样式(修改网址或清除浏览记录即可)</li><li>四个样式可以根据实际情况单独使用</li><li>伪类<code>:hover</code>不仅可以用在a标签上，还可以用在其他标签上</li></ul><h4 id="元素关系选择器"><a href="#元素关系选择器" class="headerlink" title="元素关系选择器"></a>元素关系选择器</h4><ul><li>子选择器<ul><li><code>.bov&gt;p &#123; &#125;</code></li><li>两个标签要为父子关系，当使用<code>&gt;</code>符号分割两个元素时，他只会匹配那些作为第一个元素的直接后代元素</li><li>从IE7开始兼容</li></ul></li><li>相邻兄弟选择器<ul><li><code>.bov+p&#123; &#125;</code></li><li>第二个元素紧跟在第一个元素之后，并且这两个元素都属于同一个父元素的子元素</li><li>只会选择紧跟着的一个，就算有两个相同元素在第一个元素后面</li><li>a+b即选择紧跟在a后面的第一个b</li><li>从IE7开始兼容</li></ul></li><li>通用兄弟选择器<ul><li><code>.box~p&#123; &#125;</code></li><li><code>a~b</code>表示选择a元素&#x3D;&#x3D;之后&#x3D;&#x3D;所有的同级b元素</li><li>a之前的b元素是选择不到的</li><li>从IE7开始兼容</li></ul></li></ul><h4 id="序号选择器"><a href="#序号选择器" class="headerlink" title="序号选择器"></a>序号选择器</h4><table><thead><tr><th>选择器</th><th>描述</th><th>兼容性</th></tr></thead><tbody><tr><td><code>:first-child</code></td><td>第一个子元素</td><td>IE7</td></tr><tr><td><code>:last-child</code></td><td>最后一个子元素</td><td>IE9</td></tr><tr><td><code>:nth-child(n)</code></td><td>第n个子元素</td><td>IE9</td></tr><tr><td><code>:nth-last-child(n)</code></td><td>倒数第n个子元素</td><td>IE9</td></tr><tr><td><code>:nth-of-type(n)</code></td><td>第n个某类型子元素</td><td>IE9</td></tr><tr><td><code>:nth-last-of-type(n)</code></td><td>倒数第n个某类型子元素</td><td>IE9</td></tr><tr><td><code>:only-child</code></td><td>选择没有任何兄弟元素的元素</td><td></td></tr></tbody></table><blockquote><p>注：</p></blockquote><ul><li>动态值写法：()可以写成<code>an+b</code>的形式也可以用关键词，<ul><li>n是自然数，从0开始计算</li><li>a,b必须是整数，可正可负</li><li>2n&#x3D;偶数&#x3D;even,2n+1&#x3D;奇数&#x3D;odds，</li></ul></li><li><code>nth-of-type(n)</code>和<code>nth-last-of-type(n)</code>键选择&#x3D;&#x3D;同种标签&#x3D;&#x3D;指定序号的子元素</li></ul><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><ul><li><p>写法：<code>标签[属性]</code></p><table><thead><tr><th>案例</th><th>描述</th><th>兼容性</th></tr></thead><tbody><tr><td><code>img[alt]</code></td><td>选择有alt属性的img标签</td><td>IE9</td></tr><tr><td><code>img[alt=&quot;icon&quot;]</code></td><td>选择alt属性是icon的img标签,属性里只能有icon这几个词</td><td>IE9</td></tr><tr><td><code>img[alt^=&quot;icon&quot;]</code></td><td>选择alt属性以icon开头的img标签,只有icon或者是以它开头都行</td><td>IE9</td></tr><tr><td><code>img[alt$=&quot;icon&quot;]</code></td><td>选择alt属性以icon结尾的img标签,只有icon或者以icon结尾的都行</td><td>IE9</td></tr><tr><td><code>img[alt*=&quot;icon&quot;]</code></td><td>选择alt属性中包含icon文字的img标签，sscion&#x2F;icon-c&#x2F;icon button都可以</td><td>IE9</td></tr><tr><td><code>img[alt~=&quot;icon&quot;]</code></td><td>选择alt属性中<strong>有空格隔开</strong>的icon字样的的img标签,只有icon属性&#x2F;有包含icon在内的多个属性值</td><td>IE9</td></tr><tr><td>&#96;img[alt</td><td>&#x3D;”icon”]&#96;</td><td>选择alt属性以<code>icon-</code>开头的img标签,只有icon属性&#x2F;以icon-开头的属性都行</td></tr></tbody></table></li><li><p>以上标签、属性、文字都可以替换</p></li><li><p>注：实际开发中用的很少，只做了解即可</p></li></ul><h4 id="CSS3新增伪类"><a href="#CSS3新增伪类" class="headerlink" title="CSS3新增伪类"></a>CSS3新增伪类</h4><table><thead><tr><th>伪类</th><th>描述</th></tr></thead><tbody><tr><td><code>:focus</code></td><td>选择当前获得焦点的表单元素</td></tr><tr><td><code>:checked</code></td><td>选择当前已经勾选的单选按钮或复选框</td></tr><tr><td><code>:empty</code></td><td>选择空标签</td></tr><tr><td><code>:enabled</code></td><td>选择当前有效的表单元素</td></tr><tr><td><code>:disabled</code></td><td>选择当前无效的表单元素</td></tr><tr><td><code>:root</code></td><td>选择根元素，即<code>&lt;html&gt;</code>标签</td></tr></tbody></table><blockquote><p><code>:focus</code>：</p></blockquote><ul><li>可修改当前获得焦点的表单元素样式</li><li>自带outline样式<blockquote><p><code>:checked</code></p></blockquote></li><li>可以用来修改复选框&#x2F;单选框样式(原样式优先级太高，用div模拟复选框&#x2F;单选框)，区别：单选框选中后不能取消</li><li>用label标签绑定复选框<code>input:checkbox</code>(&#x2F;单选框<code>input:radio</code>)、div.box、以及div下的div.item</li><li>设置新选择框.box的样式、.item:被选中后的样式</li><li>用<code>display:none</code>隐藏原选择框和.item</li><li><code>input:checked+ .box .item &#123;dispaly:block&#125;</code>表示被选中后，.box下的.item显示出来<blockquote><p><code>:empty</code>:只能是空内容，有空格的标签不会被选中</p></blockquote></li></ul><h4 id="CSS3新增伪元素"><a href="#CSS3新增伪元素" class="headerlink" title="CSS3新增伪元素"></a>CSS3新增伪元素</h4><ul><li>CSS3新增了”伪元素”特性，表示”虚拟动态创建的元素”</li><li>伪元素用双冒号<code>::</code>表示，IE8及以上兼容单冒号<code>:</code></li><li>语法：<code>element::before&#123; &#125;</code></li></ul><table><thead><tr><th>CSS3新增伪元素</th><th>描述</th></tr></thead><tbody><tr><td><code>::before</code></td><td>匹配选中的元素的第一个元素</td></tr><tr><td><code>::after</code></td><td>匹配选中元素的最后一个子元素</td></tr><tr><td><code>::selection</code></td><td>选择器匹配被用户选取的部分</td></tr><tr><td><code>::first-letter</code></td><td>会选中某元素中的第一行的第一个字母</td></tr><tr><td><code>::first-line</code></td><td>会选中某元素第一行的全部文字</td></tr><tr><td><code>::placeholder</code></td><td>自定义表单元素的占位文本样式</td></tr></tbody></table><blockquote><p><code>::before</code>和<code>::after</code></p></blockquote><ul><li><p>企业应用：各种小图标、CSS精灵图</p></li><li><p>这两个伪元素必须使用<code>content</code>属性表示其内容，绝对不能省掉</p></li><li><p>为选中的元素添加修饰性的内容，此元素默认为行内元素</p></li><li><p>第一种情况：给子元素&#x2F;没有子元素的盒子加，就是给对应标签的前&#x2F;后新增<code>content</code>内容及样式</p></li></ul><pre><code>&lt;div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;!-- 给这种情况加伪元素就算新增内容 --&gt;</code></pre><ul><li>第二种情况：给父元素加，就会新增一个行内元素及样式</li></ul><pre><code>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;!-- &gt;这种情况就是新增行内元素 --&gt;</code></pre><img src="weiyuansu.png"><blockquote><p><code>::selection</code></p></blockquote><ul><li>被选中的部分会改变样式</li><li>只能向<code>::selection</code>选择器应用少量的CSS属性:color、background、cursor以及outline<blockquote><p><code>::first-letter</code></p></blockquote></li><li>会选中某元素的第一行的第一个字母</li><li>必须是块级元素<blockquote><p><code>::first-line1</code></p></blockquote></li><li>会选中某元素的第一行的全部文字</li><li>必须是块级元素</li></ul><h4 id="CSS-选择器的权重计算"><a href="#CSS-选择器的权重计算" class="headerlink" title="CSS 选择器的权重计算"></a>CSS 选择器的权重计算</h4><ol><li>层叠性</li></ol><ul><li>CSS 全名叫 层叠式样式表 ，层叠性是它很重要的性质</li><li>层叠性：多个选择器可以同时作用于同一个标签，效果叠加</li></ul><ol start="2"><li>层叠性的冲突处理</li></ol><ul><li>多个选择器定义同一元素的冲突问题</li><li>CSS 有严密的处理冲突的规则</li><li>id 权重 &gt; class权重 &gt; 标签权重 &gt; 通配符权重</li></ul><ol start="3"><li>复杂选择器权重计算</li></ol><ul><li>复杂选择器可以通过（id的个数，class的个数，标签的个数）的形式，计算权重</li></ul><ol start="4"><li>!important 提升权重</li></ol><ul><li>如果我们需要将某个选择器的某条属性提升权重，可以在属性后边写上 <code>!important</code></li><li>实际企业中，不允许使用 <code>!important</code> ，因为这会带来不经意的样式冲突</li></ul><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><blockquote><p>开关按钮</p></blockquote><ul><li><code>input:checked</code>里面可以直接写按下开关后的样式</li><li>优化：用伪元素替代没有内容的标签</li></ul><h2 id="CSS文本属性、字体属性、列表属性"><a href="#CSS文本属性、字体属性、列表属性" class="headerlink" title="CSS文本属性、字体属性、列表属性"></a>CSS文本属性、字体属性、列表属性</h2><h3 id="一、CSS字体属性"><a href="#一、CSS字体属性" class="headerlink" title="一、CSS字体属性"></a>一、CSS字体属性</h3><h4 id="color属性"><a href="#color属性" class="headerlink" title="color属性"></a>color属性</h4><ul><li>可设置文本内容的字体颜色</li><li>color属性有四种表示法：</li></ul><blockquote><p><strong>英文单词表示法</strong></p></blockquote><ul><li>应用场景：仅用于学习和测试，工作中不常用</li></ul><pre><code>color:red;</code></pre><blockquote><p><strong>十六进制表示法</strong></p></blockquote><ul><li>设计图中标注的颜色通常为十六进制表示</li><li>每一种颜色分量都是0~255的数字，十六进制的ff就是十进制的255</li><li>如果颜色值是两两相同，并且有三对，<code>#aabbcc</code>的形式可以简写为<code>#abc</code></li><li>常用的十六进制表示法</li></ul><table><thead><tr><th>色值</th><th>描述</th></tr></thead><tbody><tr><td><code>#000</code></td><td>黑色</td></tr><tr><td><code>#fff</code></td><td>白色</td></tr><tr><td><code>#ccc</code>、<code>#333</code>、<code>#2f2f2f</code>、<code>#666</code>、<code>#ddd</code></td><td>灰色</td></tr></tbody></table><blockquote><p><strong>rgb()表示法</strong></p></blockquote><ul><li>rgb是红蓝绿三个单词的缩写</li><li>三个数字的范围是0~255,数字之间用<code>,</code>分隔</li></ul><pre><code>color:rgb(255,0,0);&lt;!-- 红色 --&gt;</code></pre><blockquote><p><strong>rgba()表示法</strong></p></blockquote><ul><li>前三个数字是颜色,范围是0~255</li><li>第四个参数是透明度，范围是0~1，值越大越不透明</li><li>rgba()表示法从IE9开始兼容</li></ul><pre><code>color: rgba(255,0,0,0.5)</code></pre><h4 id="font-size属性"><a href="#font-size属性" class="headerlink" title="font-size属性"></a>font-size属性</h4><ul><li>font-size属性用来设置文字的字号大小</li><li>单位通常为px(像素)、%(百分比)；移动端还会学习em、rem、vw、vh单位</li><li>网页文字正文默认为为16px，1em&#x3D;两个字符</li><li>浏览器最小支持12px字号</li><li><strong>面试题</strong>：如何在页面中设置小于12px的字体(学到动画时会讲)</li><li>百分比是相对于父元素的font-size而言</li></ul><pre><code>&lt;style&gt;.fon1 &#123;font-size:12px;&#125;.fon2 &#123;font-size:16px;&#125;div p &#123;font-size:50%;&#125;&lt;/style&gt;&lt;body&gt;    &lt;p&gt;这是一段默认大小的文字&lt;/p&gt;    &lt;p class=&quot;fon1&quot;&gt;字体大小为12px&lt;/p&gt;    &lt;div class=&quot;fot2&quot;&gt;        父元素为16px        &lt;p&gt;字体大小为父元素的50%&lt;/p&gt;    &lt;/div&gt;&lt;/body&gt;  </code></pre><h4 id="font-weight属性"><a href="#font-weight属性" class="headerlink" title="font-weight属性"></a>font-weight属性</h4><ul><li>用来设置字体的粗细程度</li><li>可以用属性值或者数字来设置大小</li><li>数字介于1~1000之间，数字越大，字体越粗</li><li>最终的粗细要在当前字体可行的精细范围之内</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>normal</code></td><td>正常粗细，与400等值</td></tr><tr><td><code>bold</code></td><td>加粗，与700等值</td></tr><tr><td><code>lighter</code></td><td>比从父元素继承来的值更细(处在字体可行的粗细值范围内)，大多数中文字体不支持</td></tr><tr><td><code>bolder</code></td><td>比从父元素继承来的值更粗(处于字体可行的粗细范围内)大多数中文字体不支持</td></tr></tbody></table><pre><code>&lt;style&gt;      .we1 &#123; font-weight: normal; &#125;      .we2 &#123;font-weight: bold; &#125;      .we3 &#123;font-weight: 500;&#125;      .we4 &#123;font-weight: lighter;&#125;      .we5 &#123;font-weight: bolder;&#125;  &lt;/style&gt;&lt;body&gt;    &lt;p class=&quot;we1&quot;&gt;正常粗细&lt;/p&gt;    &lt;p class=&quot;we2&quot;&gt;加粗文本&lt;/p&gt;    &lt;div class=&quot;we3&quot;&gt;        父元素为600        &lt;p class=&quot;we4&quot;&gt;比父元素更细&lt;/p&gt;        &lt;p class=&quot;we5&quot;&gt;比父元素更粗&lt;/p&gt;    &lt;/div&gt;&lt;/body&gt;</code></pre><h4 id="4-font-style属性"><a href="#4-font-style属性" class="headerlink" title="4.font-style属性"></a>4.font-style属性</h4><ul><li>设置字体的倾斜<table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>normal</code></td><td>取消倾斜，把默认倾斜的<code>i</code>、<code>em</code>等标签设置为不倾斜</td></tr><tr><td><code>italic</code></td><td>设置为倾斜字体(常用)，如果当前字体没有可用的斜体版本，会选用<code>oblique</code>替代</td></tr><tr><td><code>oblique</code></td><td>设置为倾斜字体，用常规字体模拟(不常用)</td></tr></tbody></table></li></ul><pre><code>&lt;style&gt;    .sty1 &#123;font-style: normal;&#125;    .sty2 &#123;font-style: italic;&#125;    .sty3 &#123;font-style: oblique;&#125;&lt;/style&gt;&lt;body&gt;    &lt;i&gt;这是一个默认倾斜字体&lt;/i&gt; &lt;br&gt;    &lt;i class=&quot;sty1&quot;&gt;把默认倾斜设置为不倾斜&lt;/i&gt;    &lt;p class=&quot;sty2&quot;&gt;italic下把不倾斜的设置为倾斜&lt;/p&gt;    &lt;p class=&quot;sty3&quot;&gt;oblique下把不倾斜设置为倾斜&lt;/p&gt;&lt;/body&gt;</code></pre><h4 id="font-family-字体类型"><a href="#font-family-字体类型" class="headerlink" title="font-family 字体类型"></a>font-family 字体类型</h4><ul><li>用于设置字体类型，浏览器默认字体为”微软雅黑”</li><li>可以设置多个字体类型，字体之间用<code>,</code>分隔，如果第一个字体浏览器不支持，则会往后找；若都不支持，则会使用默认字体；</li></ul><pre><code>font-family:&quot;Times New Rowman&quot;,Times,serif;</code></pre><blockquote><p>注：</p></blockquote><ul><li>中文字体要用<code>&quot;&quot;</code>包裹，英文字体中若有空格，也要用<code>&quot;&quot;</code>(不加也可以)</li><li>字体通常必须是用户计算机已经安装好的字体，所以设置为:”微软雅黑””宋体”较多</li><li>中文字体也可以用英文名</li></ul><table><thead><tr><th>中文字体名</th><th>英文字体名</th></tr></thead><tbody><tr><td>“微软雅黑”</td><td>“Microsoft Yahei”</td></tr><tr><td>“宋体”</td><td>“SimSun”</td></tr></tbody></table><h4 id="font-face自定义字体"><a href="#font-face自定义字体" class="headerlink" title="@font-face自定义字体"></a>@font-face自定义字体</h4><ul><li>用来设置用户电脑里没有的字体，用户浏览网页时会下载相关字体</li><li>准备工作<ul><li>必须自己定义新的字体(需要有字体文件)</li><li>用户加载网页时会同时下载字体文件</li><li>字体文件需要同时拥有五种格式的文件,因为根据操作系统和浏览器不同，有<code>eot</code>、<code>woff2</code>、<code>woff</code>、<code>ttf</code>、<code>svg</code></li></ul></li><li>如何定义字体</li></ul><pre><code>@font-face&#123;    font-family: ;/*字体类型*/    src: url();  /*引入字体类型*/&#125;</code></pre><ul><li>怎么做？<ul><li>获得字体文件：建议使用免费可商用的阿里巴巴普惠字体，地址：<a href="https://www.iconfont.cn/webfont">https://www.iconfont.cn/webfont</a></li><li>输入要定义的文字，选择字体，下载字体包</li><li>使用@font-face声明字体</li><li>定义使用webfont的样式</li><li>为文字加上对应样式<br>  注：可以直接复制demo的内容</li></ul></li></ul><pre><code>&lt;style&gt;  @font-face &#123;  &#125;&lt;!-- 使用font-face声明字体 --&gt;  .web-font &#123;  &#125;&lt;!-- 定义使用 webfont 的样式 --&gt;&lt;/style&gt;&lt;body&gt;&lt;p&gt;要定义的文字&lt;/p&gt;&lt;/body&gt;</code></pre><h3 id="二、CSS文本属性"><a href="#二、CSS文本属性" class="headerlink" title="二、CSS文本属性"></a>二、CSS文本属性</h3><h4 id="text-decoration属性-修饰线"><a href="#text-decoration属性-修饰线" class="headerlink" title="text-decoration属性-修饰线"></a>text-decoration属性-修饰线</h4><ul><li>用于设置文本的修饰线外观</li><li>text-decoration是以下四个属性的简写</li><li>可以写在一行，以空格分隔</li><li><strong>注</strong>：其他三个属性的前提是<code>line</code></li></ul><table><thead><tr><th>属性</th><th>属性值</th></tr></thead><tbody><tr><td>text-decoration-line</td><td>下划线<code>underline</code>、删除线<code>line-through</code>、没有修饰线<code>none</code></td></tr><tr><td>text-decoration-color</td><td>文本修饰的颜色</td></tr><tr><td>text-decoration-style</td><td>波浪线<code>wavy</code>、实线<code>solid</code>、虚线<code>dashed</code></td></tr><tr><td>text-decoration-thickness</td><td>文本修饰线的粗细</td></tr></tbody></table><pre><code>&lt;style&gt;    p &#123;text-decoration:underline red 5px;&#125;    div &#123;text-decoration:wavy underline purple 3px;&#125;    /*有underline才有wavy*/&lt;/style&gt;&lt;body&gt;    &lt;p&gt;有红色下划线的文本，下划线粗5px&lt;/p&gt;    &lt;div&gt;一行有紫色波浪线的文本，线粗3px&lt;/div&gt;&lt;/body&gt;</code></pre><h4 id="text-indent首行缩进"><a href="#text-indent首行缩进" class="headerlink" title="text-indent首行缩进"></a>text-indent首行缩进</h4><ul><li>定义首行文本内容之前的缩进量</li><li>常用单位是<code>em</code>、<code>2em</code>是两个字符的宽度</li><li>默认字符大小是16px，如果没有单独设置，那么2em&#x3D;32px</li></ul><pre><code>&lt;style&gt;        .line1 &#123;font-size:2em;&#125;        /*字体大小为32px*/        .line2 &#123;text-indent:2em;&#125;        /*首行缩进2em，也就是32px*/        .line3 &#123;font-size:2em;text-indent:2em;&#125;        /*字体大小为32px,首行缩进4em=64px*/&lt;/style&gt;&lt;body&gt;    &lt;p class=&quot;line1&quot;&gt;默认文本，设置字体大小是两字符&lt;/p&gt;    &lt;p class=&quot;line2&quot;&gt;首行缩进两字符&lt;/p&gt;    &lt;p class=&quot;line3&quot;&gt;首行缩进两字符，字体大小为两字符&lt;/p&gt;&lt;/body&gt;</code></pre><h4 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h4><ul><li><p>行高的测量方式</p><img src="测量行高.png"></li><li><p>①②是行高测量上的定义，&#x3D;&#x3D;③&#x3D;&#x3D;是行高的真实定义：文字所占空间高度的总高，文字在这个高度的垂直方向&#x3D;&#x3D;居中&#x3D;&#x3D;显示</p></li><li><p>主段落内容的行高至少应为<code>1.5</code></p></li><li><p>如果文字的大小要随页面的缩放而变化，请使用无单位的数值，以确保行高会等比例的缩放</p></li><li><p>行高的值</p></li></ul><table><thead><tr><th>单位</th><th>实例</th><th>说明</th></tr></thead><tbody><tr><td>px</td><td><code>line-height:30px;</code></td><td>行高为30px</td></tr><tr><td>数值表示法</td><td><code>line-height:2;</code></td><td>字号大小的两倍这是<strong>最推荐</strong>的写法，工作中常用倍数是<code>1.25,1.5,1.75</code></td></tr><tr><td>百分比表示法</td><td><code>line-height:200%;</code></td><td>字号大小的两倍</td></tr><tr><td>normal</td><td><code>line-height:normal</code>;</td><td>取决于客户端。桌面浏览器(包括Firefox)使用默认值，约为<code>1.2</code>，这取决于元素的<code>font-family</code></td></tr></tbody></table><pre><code>&lt;style&gt;     .p1 &#123;line-height:20px;          background-color:skyblue;&#125;      div &#123;line-height:40px;          background-color: red;          font-family:&quot;宋体&quot;&#125;      .p2 &#123;line-height: 3;          background-color: aqua;          font-family: &quot;微软雅黑&quot;;&#125;      .p3 &#123;line-heigt:normal;          background-color:coral;&#125;  &lt;/style&gt; &lt;body&gt; &lt;p class=&quot;p1&quot;&gt;设置行高为20px&lt;/p&gt;  &lt;div&gt;这是一行行高40px的宋体&lt;/div&gt;  &lt;p class=&quot;p2&quot;&gt;这是行高为3的微软雅黑&lt;/p&gt;  &lt;p class=&quot;p3&quot;&gt;行高为normal的文字&lt;/p&gt; &lt;/body&gt;</code></pre><h4 id="行文本垂直、水平居中"><a href="#行文本垂直、水平居中" class="headerlink" title="行文本垂直、水平居中"></a>行文本垂直、水平居中</h4><ul><li>行文本垂直居中<ul><li>设置**行高&#x3D;盒子高度(height)**，即可实现单行文本垂直居中</li><li>对行内块元素无效</li></ul></li></ul><pre><code>line-height: height的高度；</code></pre><ul><li>text-align属性<ul><li>定义<strong>行内内容</strong>(例如文字、图片、行内块元素)相对它的块父元素的对齐方式</li><li>注：块级元素不能用这个属性</li><li>常用属性值：<code>left</code>、<code>right</code>、<code>center</code></li></ul></li></ul><pre><code>&lt;style&gt;   .l &#123;text-align: left;&#125;   .c &#123;text-align:center;&#125;   .r &#123;text-align:right;&#125;&lt;/style&gt;&lt;body&gt;   &lt;p class=&quot;l&quot;&gt;这是居左文字&lt;/p&gt;   &lt;p class=&quot;c&quot;&gt;这是居中文字&lt;/p&gt;   &lt;p class=&quot;r&quot;&gt;这是居右文字&lt;/p&gt;&lt;/body&gt;</code></pre><h4 id="font合写属性"><a href="#font合写属性" class="headerlink" title="font合写属性"></a>font合写属性</h4><ul><li>font属性可以用来作为<code>font-style</code>、<code>font-weight</code>、<code>font-size</code>、<code>line-height</code>、<code>font-family</code>属性的合写</li><li>写法<ul><li>font属性连写时，必须设置<code>font-size</code>和<code>font-family</code>才能生效</li><li><code>font-style</code>和<code>font-weight</code>必须放在<code>font-size</code>之前</li><li>连写时任何未指定的值都将设置为其对应的初始值，所以即使没有写行高，也有默认行高1.2<br> -行高写在<code>fon-size</code>后面，用<code>/</code>分隔</li></ul></li></ul><pre><code>font:italic 20px/1.2 &quot;宋体&quot;;</code></pre><h4 id="word-spacing字间距"><a href="#word-spacing字间距" class="headerlink" title="word-spacing字间距"></a>word-spacing字间距</h4><ul><li>对中文无效，仅对英文单词有效<table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>正常的单词间距，有字体和&#x2F;或浏览器定义</td></tr><tr><td>长度</td><td>通过指定具体额外间距来增加字体的单词间距,可以是负数</td></tr></tbody></table></li></ul><h4 id="letter-spacing字符间距"><a href="#letter-spacing字符间距" class="headerlink" title="letter-spacing字符间距"></a>letter-spacing字符间距</h4><ul><li>用于设置文本字符的间距</li><li>对中文和英文都有效，单词会被分隔成一个个字母</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>正常的单词间距，有字体和&#x2F;或浏览器定义</td></tr><tr><td>长度</td><td>通过指定具体额外间距来增加字体的单词间距,可以是负数</td></tr></tbody></table><pre><code>&lt;style&gt;    .word1 &#123;word-spacing:normal;&#125;    .word2 &#123;word-spacing:-10px;&#125;    .letter1 &#123;letter-spacing:10px;&#125;    .letter2 &#123;letter-spacing:-10px;&#125;    .lo &#123;letter-spacing:10px;&#125;    &lt;/style&gt;&lt;body&gt;    &lt;p class=&quot;word1&quot;&gt;I love you ,我爱你,正常间距&lt;/p&gt;    &lt;p class=&quot;word2&quot;&gt;I love you ,我爱你,负间距&lt;/p&gt;    &lt;p class=&quot;letter1&quot;&gt;I love you ,我爱你,10Px间距&lt;/p&gt;    &lt;p class=&quot;letter2&quot;&gt;I love you ，我爱你，负间距&lt;/p&gt;    &lt;div&gt;I love you&lt;p class=&quot;lo&quot;&gt;我爱你&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><h3 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a>列表样式</h3><h4 id="list-style-type"><a href="#list-style-type" class="headerlink" title="list-style-type"></a>list-style-type</h4><ul><li>设置列表项标记的类型</li><li>实际开发中的一般会把前面的标记类型去掉，用做好的小图标替代</li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>无标记(去掉圆点)</td></tr><tr><td>disc</td><td>默认，实心圆</td></tr><tr><td>circle</td><td>空心圆</td></tr><tr><td>square</td><td>实心方块</td></tr><tr><td>decimal</td><td>数字</td></tr><tr><td>decimai-leading-zero</td><td>0开头的数字，01、02、03</td></tr><tr><td>lower-alpha</td><td>小写英文字母</td></tr><tr><td>upper-alpha</td><td>大写英文字母</td></tr><tr><td>……</td><td>标记的类型有20多项，但实际开发中几乎不用</td></tr></tbody></table><p><strong>联系之前在HTML学过的列表标签</strong>:</p><ul><li>注：<code>style=&quot;&quot;</code>等于写在<code>&lt;style&gt;</code>标签里</li></ul><table><thead><tr><th>html(已废弃)</th><th>CSS</th></tr></thead><tbody><tr><td><code>type=&quot;circle&quot;</code></td><td><code>style=&quot;list-style-type:circle&quot;</code></td></tr><tr><td><code>ol-li</code></td><td><code>list-type:decimal</code></td></tr></tbody></table><h4 id="2-list-style-image"><a href="#2-list-style-image" class="headerlink" title="2.list-style-image"></a>2.list-style-image</h4><ul><li>用来指定列表中的列表标记图像，几乎不用</li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>URL</td><td>图像的路径</td></tr><tr><td>none</td><td>默认，无图形被现实</td></tr><tr><td>inherit</td><td>规定从父元素继承该属性的值</td></tr></tbody></table><h4 id="3-list-style-position"><a href="#3-list-style-position" class="headerlink" title="3.list-style-position"></a>3.list-style-position</h4><ul><li>规定列表中列表项目标记的位置，几乎不用</li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>inside</td><td>列表标记项目放置在文本以内，环绕文本并根据标记对齐</td></tr><tr><td>outside</td><td>默认，标记位于文本的左侧、且放置在文本以外，环绕文本不根据标记对齐</td></tr><tr><td>inherit</td><td>规定从父元素继承该属性的值</td></tr></tbody></table><h4 id="4-list-style"><a href="#4-list-style" class="headerlink" title="4.list-style"></a>4.list-style</h4><ul><li>这是以上三个的综合写法</li></ul><pre><code>list-style:delcima-leading-zero outside;</code></pre><ul><li>实际开发中用的最多的是去掉标记:<code>list-style-type:none;</code>、<code>list-style:none;</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>onlineOrdering-applet</title>
      <link href="/2023/11/27/onlineOrdering-applet/"/>
      <url>/2023/11/27/onlineOrdering-applet/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><a href="https://github.com/hermiablog/onlineOrdering-applet">小程序链接</a></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="main.png" width="200"><img src="menu.png" width="200"><img src="cart.png" width="200"><img src="order.png" width="200"><img src="me.png" width="200"><h2 id="项目创建过程"><a href="#项目创建过程" class="headerlink" title="项目创建过程"></a>项目创建过程</h2><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>将项目的通用样式写在<code>app.wxss</code>中<blockquote><ul><li>在根目录<code>page</code>下设置主题色、字号、字体颜色等</li><li>注意：<code>page</code>要设置<code>min-height=100%;</code>才会占满屏幕</li></ul></blockquote></li><li>清除常用组件的自带样式<blockquote><ul><li>将外边距、内边距都设置为0</li><li>将组件都设置为怪异盒模型</li></ul></blockquote></li><li>新建<code>src</code>文件夹，用于存放不可动态获取的图片、图标</li><li>新建<code>component</code>文件夹，用于存放自定义组件</li><li>自定义<code>icon</code>组件，实现<code>icon</code>图标的复用<blockquote><ul><li>新建<code>iconfont</code>文件夹，保存图标<code>wxss</code>文件</li><li>单独存放有利于随时替换</li></ul></blockquote></li></ol><pre><code>order-online├─ .eslintrc.js├─ app.js├─ app.json├─ app.wxss├─ component│  └─ icon│     ├─ icon.js│     ├─ icon.json│     ├─ icon.wxml│     └─ icon.wxss├─ iconfont│  └─ iconfont.wxss├─ pages│  └─ index│     ├─ index.js│     ├─ index.json│     ├─ index.wxml│     └─ index.wxss├─ project.config.json├─ project.private.config.json├─ sitemap.json├─ src│  └─ icon│     ├─ cart.png│     ├─ index.png│     ├─ menu.png│     ├─ order.png│     ├─ selected-cart.png│     ├─ selected-index.png│     ├─ selected-menu.png│     ├─ selected-order.png│     ├─ selected-user.png│     ├─ takeBySelf.png│     ├─ user.png│     └─ waimai.png└─ utils   └─ util.js</code></pre><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><h4 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h4><ol><li>需要实现的效果</li></ol><ul><li>在顶部搜索框，输入产品名，可跳转到对应产品</li><li>选择取餐方式后，跳转到菜单页，并保存取餐方式</li><li>点击新品图片，可跳转到对应产品</li></ul><ol start="2"><li>难点</li></ol><ul><li><p>顶部导航与胶囊按钮对齐</p><blockquote><ul><li>自定义导航<code>navigation</code></li><li>实现不同机型和开发工具的适配</li></ul></blockquote></li><li><p>搜索后跳转到对应产品&#x3D;&#x3D;(需补充)&#x3D;&#x3D;</p></li></ul><h4 id="第一步：实现tabBar"><a href="#第一步：实现tabBar" class="headerlink" title="第一步：实现tabBar"></a>第一步：实现<code>tabBar</code></h4><ol><li>根据项目需要，确认使用原生<code>tabBar</code></li><li>创建对应页面的文件</li><li>下载<code>tabBar</code>图标，存放至<code>src/icon</code>文件夹</li><li>在<code>app.json</code>里进行配置</li></ol><h4 id="第二步：自定义导航栏，并处理兼容性"><a href="#第二步：自定义导航栏，并处理兼容性" class="headerlink" title="第二步：自定义导航栏，并处理兼容性"></a>第二步：自定义导航栏，并处理兼容性</h4><blockquote><p>参考微信开发者社区回答：<a href="https://developers.weixin.qq.com/community/develop/article/doc/000aa842274d58cb15f74f81f56013">https://developers.weixin.qq.com/community/develop/article/doc/000aa842274d58cb15f74f81f56013</a></p><ul><li>新建<code>navigation-bar</code>组件构建自定义导航栏</li><li>菜单页引入该组件</li></ul></blockquote><p><strong><code>navigation-bar</code>组件内：</strong></p><blockquote><p><strong>实现对齐和适配的思路：</strong></p><ul><li>正常来讲，<code>iOS</code>和<code>Android</code>下的胶囊按钮的位置以及大小都是相同且不变的，我们可以通过胶囊按钮的位置和大小再配合 <code>wx.getSystemInfo</code> 或者 <code>wx.getSystemInfoSync</code> 中得到的 <code>statusBarHeight</code> 来计算出导航栏的位置和大小。</li><li>顶部导航区，包括状态栏、导航栏(导航条+胶囊)，都设置固定定位</li></ul></blockquote><blockquote><p><strong>实现步骤：</strong></p></blockquote><ol><li><p>首先需要知道不同<code>iOS</code>和<code>Android</code>下的胶囊按钮的位置以及大小</p><blockquote><ul><li>根据开发者的文档可知(非官方数据，自己进行微调)：</li></ul><pre><code>// iOS  top 4px  right 7px  width 87px  height 32px// Android  top 8px  right 10px  width 95px  height 32px// 开发者工具模拟器（iOS）  top 6px  right 10px  width 87px  height 32px// 开发者工具模拟器（Android）  top 8px  right 10px  width 87px  height 32px</code></pre><ul><li>这里<code>top</code>的值是从 <code>statusBarHeight</code> 作为原点开始计算的</li><li>因此最终位置还得加上状态栏的高度</li></ul></blockquote></li><li><p>通过<code>wx.getSystemInfoSync</code>可以得到状态栏<code>statusBarHeight</code>的位置和宽高</p><blockquote><ul><li>状态栏的宽度也就是可使用窗口宽度(手机屏幕宽度)</li></ul></blockquote></li><li><p>计算导航条的位置和大小</p><blockquote><ul><li>导航条要和胶囊平齐，所以：</li><li>top&#x3D;胶囊的top<blockquote><p>把胶囊离右边框的距离作为导航条的内边距</p></blockquote></li><li>left&#x3D;0</li><li>宽度&#x3D;可使用窗口宽度-胶囊右边距-胶囊宽度-导航条内边距&#x3D;可使用窗口宽度-胶囊宽度-胶囊右边距*3<blockquote><p>注意：胶囊的top是以状态栏为原点，但导航条是以屏幕左上角为原点</p></blockquote></li><li>height&#x3D;胶囊的height</li></ul></blockquote></li><li><p>计算整个导航栏(导航条+胶囊)的位置和大小</p><blockquote><ul><li>top&#x3D;状态栏的高度</li><li>left&#x3D;0</li><li>宽度&#x3D;可使用窗口宽度</li><li>高度&#x3D;<code>胶囊的height+胶囊的上外边距*2</code>&#x3D;<code>(胶囊的top-状态栏高度)*2+胶囊的height</code></li></ul></blockquote></li><li><p>格式化</p><blockquote><ul><li>前面的得到的所有数据都是对象的形式</li><li>而在页面上设置样式时，要在标签里用<code>style=&quot;&quot;</code>的方式</li><li>所以要把对象格式的数据，转为成字符串</li></ul><pre><code>formatStyle(position) &#123;  //声明一个数组，存放遍历出来的数据，加px  let styles = []  for (let key in position) &#123; styles.push(`$&#123;key&#125;: $&#123;position[key]&#125;px;`)  &#125;  // 将数组转成字符串，把逗号替换成空格  return styles.join(&#39; &#39;)&#125;</code></pre><ul><li>因为<code>wx.getSystemInfoSync()</code>得到的可使用窗口宽度，单位是px</li></ul></blockquote></li></ol><h4 id="第三步：搜索框"><a href="#第三步：搜索框" class="headerlink" title="第三步：搜索框"></a>第三步：搜索框</h4><ul><li>提高顶部导航区的层级，否则就会被<code>swiper</code>覆盖</li><li>搜索图标的显隐：在输入时，搜索图标自动消失</li><li>给输入框绑定<code>bind:input</code>事件，在<code>data</code>里设置一个变量<code>iconShow</code>来控制图标的显隐</li></ul><h4 id="第四步：顶部的swiper与底部banner区"><a href="#第四步：顶部的swiper与底部banner区" class="headerlink" title="第四步：顶部的swiper与底部banner区"></a>第四步：顶部的<code>swiper</code>与底部<code>banner</code>区</h4><blockquote><ul><li><code>swiper</code>使用<code>swiper</code>与<code>swiper-item</code>结合实现</li><li><code>banner</code>区的跳转&#x3D;&#x3D;(需补充)&#x3D;&#x3D;</li></ul></blockquote><h4 id="第五步-取餐方式跳转"><a href="#第五步-取餐方式跳转" class="headerlink" title="第五步 取餐方式跳转"></a>第五步 取餐方式跳转</h4><ol><li>思路<blockquote><ul><li>选择取餐方式之后进入菜单页面</li><li>菜单页面会根据点进来的方式，显示外卖还是自取，所以从首页跳转到菜单页必须<strong>携带参数</strong></li><li>根据之前学习过的声明式导航和编程式导航可知，这两种方式在跳转到<code>tabBar</code>页面时，不能携带参数</li></ul></blockquote></li></ol><blockquote><blockquote><p>解决方案：<br><a href="https://developers.weixin.qq.com/community/develop/article/doc/00000453df06f07a5c8d91ef856c13">参考回答</a></p></blockquote><ul><li>全局变量：通过<code>App</code>全局对象存放全局变量</li><li>数据缓存：通过存储到数据缓存中。</li><li>事件通信：通过事件通信通道。</li><li><code>wx.reLaunch(Object object)</code>，<code>url</code>路径后可以带参数，参数与路径之间使用<code>?</code>分隔</li></ul></blockquote><h4 id="数据动态化"><a href="#数据动态化" class="headerlink" title="数据动态化"></a>数据动态化</h4><img src="./src/首页获取数据.png"><ol><li>单独配置发起网络请求的方法(全局可使用)</li></ol><ul><li><p>新建<code>config</code>文件</p><blockquote><ul><li>新建<code>api.js</code>文件，保存服务器接口根地址</li><li>新建<code>exception-message</code>文件，保存错误码字典</li></ul></blockquote></li><li><p>在<code>utils</code>文件夹中</p><blockquote><ul><li>新建<code>wxToPromise</code>文件，用于转换原生不支持<code>Promise</code>的官方<code>API</code></li><li>新建<code>http</code>文件<ul><li><code>request</code>方法：用于通过<code>wxToPromise</code>获得带有数据的<code>promise</code>对象，并进行错误信息比对</li><li><code>_showError</code>方法，如果发生请求错误，用于在页面展示错误信息</li></ul></li></ul></blockquote></li></ul><ol start="2"><li>新建<code>model</code>文件夹<blockquote><ul><li>新建<code>Home</code>类，用于获取首页数据</li></ul></blockquote></li></ol><h3 id="菜单页"><a href="#菜单页" class="headerlink" title="菜单页"></a>菜单页</h3><h4 id="基础准备-1"><a href="#基础准备-1" class="headerlink" title="基础准备"></a>基础准备</h4><ol><li>需要实现的效果</li></ol><ul><li>获取离自己最近的店及距离(需要申请<code>wx.getLocation</code>接口)</li><li>点击左侧菜单栏，可获取对应分类的产品</li><li>点击产品，可选择产品规格、数量等</li><li>加入购物车后，其他页面的变化</li></ul><ol start="2"><li>难点</li></ol><ul><li>左侧导航与右侧商品的关联</li><li>选品框：产品规格的选择、价格与数量联动、所选信息在其他页面上的使用</li></ul><blockquote><ul><li>取消整个页面的滚动条：在<code>json</code>中配置”disableScroll”: true&#96;</li></ul></blockquote><h4 id="数据动态化-1"><a href="#数据动态化-1" class="headerlink" title="数据动态化"></a>数据动态化</h4><ul><li>新建<code>Menu</code>模块，获取菜单页数据</li><li>其他与首页类似</li></ul><h4 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h4><ol><li>顶部</li></ol><ul><li>为了将它固定在顶部，不随页面滚动，使用粘性定位</li><li>右侧的取餐方式，根据参数选中，默认为外卖<blockquote><ul><li>创建变量<code>takeWayIndex</code>保存参数</li><li>在<code>onLoad</code>生命周期函数里通过<code>options</code>获取首页传来的参数</li><li>注意！：<strong>只有</strong>点击首页的选择框跳转，<code>options</code>才会获取参数，但，如果首次加载是直接点击<code>tabBar</code>到菜单页，那<code>options</code>就是一个空对象<code>&#123;&#125;</code></li><li>因此只在<code>options</code>不为空对象时，修改<code>takeWayIndex</code></li><li>要使用<code>(JSON.stringify(options) === &quot;&#123;&#125;&quot;)</code>进行判断；携带了参数时，<code>options</code>也是对象，所以不能通过数据类型判断</li></ul></blockquote></li></ul><ol start="2"><li>下方商品列表</li></ol><ul><li>为了实现竖向滚动，左右都设为<code>scroll-view</code></li><li>左侧分类及右侧<code>banner</code>：动态获取数据，列表渲染</li><li>左侧选中状态：<blockquote><ul><li>创建一个变量<code>navLeftIndex</code>表示当前选中分类的索引，</li><li>绑定点击事件，使用自定义属性将当前被点击的分类下标传入，修改<code>navLeftIndex</code>；</li><li>只有当<code>navLeftIndex===index</code>时，被选中样式才会生效</li><li>为了不让选中标识影响文字，我给每个分类都设置了<code>divider </code>，选中时，只改变颜色</li></ul></blockquote></li></ul><ol start="3"><li>右侧商品栏</li></ol><ul><li>顶部<code>banner</code></li><li>动态渲染商品列表</li></ul><ol start="4"><li>如何点击左侧分类，右侧获取对应商品</li></ol><ul><li>定义变量<code>navLeftIndex</code>保存左侧被点击分类的索引</li><li>左侧被点击时，通过自定义属性修改<code>navLeftIndex</code>变量</li><li>右侧产品在进行列表渲染，根据<code>navLeftIndex</code>获取商品数据</li></ul><h4 id="选品页"><a href="#选品页" class="headerlink" title="选品页"></a>选品页</h4><ol><li><p>基础准备</p><blockquote><ul><li>新建组件<code>product-detail</code>，作为点击商品列表时打开的选品页</li><li>父页面：菜单页</li><li>需引入的子组件：图标组件<code>icon</code>、数量组件<code>cartNum</code><ul><li>数量组件也引用了图标组件<code>icon</code></li></ul></li></ul></blockquote></li><li><p>难点：</p><blockquote><ul><li>获取所点击的产品数据，并列表渲染嵌套了三层的数据</li><li>规格选择</li><li>金额与数量的联动，以及在其他页面的使用</li><li>商品加入购物车后，对其他页面的影响</li></ul></blockquote></li><li><p>本页面需要实现的效果及方法</p></li></ol><ul><li><p>选品页的打开与关闭</p><blockquote><ul><li>在父页面定义一个变量<code>detailFlag</code>，作为开关，默认为<code>true</code>；通过属性绑定将<code>detailFlag</code>传给组件</li><li>当父页面的产品发生点击事件时，将<code>detailFlag</code>修改为<code>false</code></li><li>组件的父容器<code>container</code>通过<code>hidden</code>属性来控制显隐</li><li>组件页面的关闭按钮，在被点击时，将<code>detailFlag</code>修改为<code>true</code></li></ul></blockquote></li><li><p>页面数据的动态化</p><blockquote><ul><li>在父页面的产品被点击时，保存该产品的<code>id</code></li><li>在<code>Menu</code>模块里，写一个静态方法，获取商品详情数据，保存在<code>detailInfo</code>变量里</li><li>通过属性绑定将该商品的数据传给组件，这样组件接收到的数据就是每次点击的商品数据了</li><li>使用<code>Mustache</code>语法将数据绑定到页面</li><li>注意产品规格的数据渲染，可定义<code>wx:for-item=&quot;&quot;</code>来区分子项：<ul><li>产品数据的<code>specs</code>里有三个规格</li><li>不同规格下有对应id和<code>specsDesc</code></li><li><code>specsDesc</code>放置的是不同的选择项及其<code>id</code></li></ul></li></ul></blockquote></li><li><p>商品规格的选择</p><blockquote><p>我踩过的坑</p><ul><li>一开始我选择的是<code>navLeftIndex===index</code>的方法，发现每个规格都会同时选中同一个选项</li></ul></blockquote></li></ul><blockquote><p>解决办法：<br><img src="./src/选品页.png"></p></blockquote><blockquote><ul><li>选中条件：选项的<code>isActive</code>为<code>true</code>；</li><li>而<code>isActive</code>在接口里已经定义了，也有默认选项；因此，需要改变页面所渲染的数据<code>detailInfo</code></li><li>如何改变？<ul><li>在点击规格选项时，将当前选项的id、当前规格的id、当前规格的所有数据都传到<code>js</code>里</li><li>在点击事件的事件处理函数里，for循环遍历当前规格的所有数据，先将所有选项的<code>isActive</code>改为<code>false</code>，再根据选项id，将该选项的<code>isActive</code>改为<code>true</code></li><li>遍历<code>detailInfo</code>，根据当前规格的id找到该规格下的数据，替换成前面修改过的；再将修改后的<code>detailInfo</code>更新到页面中</li></ul></li></ul></blockquote><ul><li>商品金额与数量的联动<blockquote><ul><li>数量的增减使用的是另一个组件</li></ul></blockquote></li></ul><blockquote><p>先分析下逻辑</p><ul><li>在产品点击后，数量默认为最小值1，此时选品框里的金额，就等于产品的单价</li><li>当数量增减时，金额等于单价*数量</li></ul></blockquote><blockquote><p>思路：</p><ul><li>数量组件需要通过事件绑定的方式将数量传给选品组件</li><li>选品组件定义一个变量<code>num</code>保存从子组件接收的值</li><li>选品组件定义一个变量<code>totalMoney</code>保存金额，默认为0，使用三元运算，当它为0时，页面使用接口里的值</li><li>和数量组件绑定的事件处理函数中，根据传来的<code>num</code>修改金额<blockquote><p>这样金额就和数量绑定在了一起，但存在以下问题：</p></blockquote></li></ul></blockquote><blockquote><p>问题：</p><ul><li>关闭选品框后，再打开另一产品，金额和数量不变</li></ul><p>解决方法：</p><ul><li>在关闭按钮的点击事件中，将金额重置为0，这样页面就会使用原始数据；将数量重置为最小值</li></ul></blockquote><ul><li>数量组件的优化<blockquote><p><strong>优化1：</strong>当数量达到边界值时，不再改变，且颜色变灰，表示不能再点击</p><ul><li>去掉图标组件的默认颜色，只声明类型(否则替换不了颜色，优先级太高)</li><li>父组件如何改变子组件的样式类？使用外部样式类<ul><li>在子组件中的<code>js</code>文件里用<code>externalClasses</code>定义外部样式类名，并写入对应标签的<code>class</code>中</li><li>父组件就可以直接在标签中用<code>外部样式类名=&quot;类名&quot;</code>的方式定义样式</li><li>当数量超过临界值时，就改变样式</li></ul></li></ul></blockquote></li></ul><blockquote><p><strong>优化2</strong>：点击事件的触发</p><ul><li>尝试1：使用<code>pointer-events: none;</code>发现无效，确认是小程序不支持该属性</li><li>尝试2：定义一个变量<code>isHandleClick</code>作为开关<ul><li>只在<code>isHandleClick</code>为<code>true</code>时才能点击</li><li>当<code>num</code>超过某一边的边界值时，<code>isHandleClick</code>变为<code>false</code>，不能再点击了，但！另一边的按钮也同时不能点击了</li></ul></li><li>尝试3：定义两个变量：<code>isAddClick</code>和<code>isMinClick</code><ul><li>这两个变量分别控制增加和减少按钮</li><li>和前面一样，当关闭选品页时，变量要重置，因此把这两个变量定义在选品组件里，通过属性绑定的方式传给数量组件</li><li>在增减按钮的点击事件函数中，根据临界值修改变量</li></ul></li></ul></blockquote><h4 id="Storage本地存储"><a href="#Storage本地存储" class="headerlink" title="Storage本地存储"></a>Storage本地存储</h4><ul><li><p>商品在选品时，加入购物车后，其他页面要显示对应的商品信息</p></li><li><p>因此需要将加入购物车的商品信息存在本地存储中</p></li><li><p>统一封装storage</p><blockquote><ul><li>在<code>utils</code>文件夹里，创建<code>storage.js</code>文件</li></ul></blockquote></li></ul><pre><code>/** * 微信小程序标准版：统一封装的 storage 操作类 */class Storage &#123;  //类数组，通过[属性]的方式调用  types = &#123;    1: &#39;get&#39;, // get    2: &#39;set&#39;, // set    3: &#39;rm&#39; // rm  &#125;  /**   * 检验本地存储 key 是否合法   * @param &#123;String&#125; key | 要操作的键值   * @param &#123;Number&#125; type | 类型，是 get set rm    * @param &#123;Boolean&#125; emptyFlag | 是否判断为空情况，默认判断 true，false 为不判断   */  checkKeyType(key, type, emptyFlag = true) &#123;    if (typeof key != &#39;string&#39;) &#123;      throw new Error(`Storage $&#123;this.types[type]&#125; func: key must be string`)      return false    &#125;    if (emptyFlag) &#123;      let tmpKey = key.TrimStr()      if (tmpKey == &#39;&#39;) &#123;        throw new Error(`Storage $&#123;this.types[type]&#125; func: key can not be empty`)        return false      &#125;      return tmpKey;    &#125;    return key  &#125;  /**   * get方法 从本地缓存中获取指定key的值   * @param &#123;String&#125; key | 要操作的键值   * @param &#123;Boolean&#125; syncFlag | 同步状态，默认 false (异步)，true 为同步   */  get = (key, syncFlag = false) =&gt; &#123;    const tmpKey = this.checkKeyType(key, 1)    if (tmpKey) &#123;      const errMsg = &#39;Storage get: failed to get data&#39;      return new Promise((resolve, reject) =&gt; &#123;        if (syncFlag) &#123;          let res = wx.getStorageSync(tmpKey)          if (res) &#123;            resolve(JSON.parse(res))          &#125; else &#123;            reject(errMsg)          &#125;        &#125; else &#123;          wx.getStorage(&#123;            key: tmpKey,            success: (res) =&gt; &#123;              resolve(JSON.parse(res.data))            &#125;,            fail: (err) =&gt; &#123;              reject(errMsg)            &#125;          &#125;)        &#125;      &#125;)    &#125;  &#125;  /**   * 将数据保存在本地存储的指定key中 会覆盖掉原来该 key 对应的内容   * @param &#123;String&#125; key | 要操作的键值   * @param &#123;*&#125; data | 要存储的值，会转换为 JSON 串进行存储   * @param &#123;Boolean&#125; syncFlag | 同步状态，默认 false (异步)，true 为同步   */  set = (key, data, syncFlag) =&gt; &#123;    const tmpKey = this.checkKeyType(key, 2)    if (tmpKey) &#123;      const sucMsg = &#39;Storage set: set data successfully&#39;      const errMsg = &#39;Storage set: failed to set data&#39;      return new Promise((resolve, reject) =&gt; &#123;        let tmpData = JSON.stringify(data)        if (syncFlag) &#123;          try &#123;            wx.setStorageSync(tmpKey, tmpData)            resolve(sucMsg)          &#125; catch (err) &#123;            console.log(err)            reject(errMsg)          &#125;        &#125; else &#123;          wx.setStorage(&#123;            data: tmpData,            key: tmpKey,            success: () =&gt; &#123;              resolve(sucMsg)            &#125;,            fail: (err) =&gt; &#123;              console.log(err)              reject(errMsg)            &#125;          &#125;)        &#125;      &#125;)    &#125;  &#125;  /**   * 可以移除本地存储中指定key的数据 如果不指定则清除全部数据   * @param &#123;String&#125; key | 要操作的键值，为空则清空所有，有值则清空指定的值   * @param &#123;Boolean*&#125; syncFlag | 同步状态，默认 false (异步)，true 为同步   */  rm = (key = &#39;&#39;, syncFlag = false) =&gt; &#123;    let tmpKey = this.checkKeyType(key, 3, false)    tmpKey = tmpKey.TrimStr()    const sucMsg = &#39;Storage rm: rm data successfully&#39;    const errMsg = &#39;Storage rm: failed to rm data&#39;    return new Promise((resolve, reject) =&gt; &#123;      if (tmpKey == &#39;&#39;) &#123;        if (syncFlag) &#123;          try &#123;            wx.clearStorageSync()            resolve(sucMsg)          &#125; catch (err) &#123;            console.log(err)            reject(errMsg)          &#125;        &#125; else &#123;          wx.clearStorage(&#123;            success: (res) =&gt; &#123;              resolve(sucMsg)            &#125;,            fail: (err) =&gt; &#123;              console.log(err)              reject(errMsg)            &#125;          &#125;)        &#125;      &#125; else &#123;        if (syncFlag) &#123;          try &#123;            wx.removeStorageSync(tmpKey)            resolve(sucMsg)          &#125; catch (err) &#123;            console.log(err)            reject(errMsg)          &#125;        &#125; else &#123;          wx.removeStorage(&#123;            key: tmpKey,            success: () =&gt; &#123;              resolve(sucMsg)            &#125;,            fail: (err) =&gt; &#123;              console.log(err)              reject(errMsg)            &#125;          &#125;)        &#125;      &#125;    &#125;)  &#125;&#125;/** * 清除字符串前后的空格 */String.prototype.TrimStr = function () &#123;  return this.replace(/(^\s*)|(\s*$)/g, &#39;&#39;);&#125;export &#123;  Storage&#125;</code></pre><ul><li>使用：<blockquote><ul><li>在<code>app.js</code>顶部引入并注册 App 上</li></ul></blockquote></li></ul><pre><code>// app.jsimport &#123; Storage &#125; from &#39;./utils/storage&#39;const storage = new Storage();App(&#123;  storage,  getStorage: storage.get,  setStorage: storage.set,  rmStorage: storage.rm,...省略&#125;)</code></pre><blockquote><ul><li>在页面中使用</li></ul></blockquote><pre><code>// component/product-detail/product-detail.js//获取应用实例const app = getApp()Component(&#123;  //app打点的方式调用&#125;)</code></pre><h4 id="加入购物车-详情页"><a href="#加入购物车-详情页" class="headerlink" title="加入购物车(详情页)"></a>加入购物车(详情页)</h4><ol><li>实现效果</li></ol><ul><li>当用户选择商品数量，点击添加购物车后，能将该商品信息及选择数量保存在缓存中，使其他页面也能得到该数据</li><li>交互效果：弹出提示框，超过库存或添加成功</li><li>徽标：商品添加购物车后，购物车的tabBar部分会出现相应的数量</li></ul><ol start="2"><li>难点</li></ol><ul><li>相同的<code>key</code>保存的数据会被覆盖</li><li>数量组件、选品页面、购物车页面之间的数据传递</li></ul><ol start="3"><li>实现步骤</li></ol><ul><li><p>给<code>加入购物车按钮</code>添加点击事件</p></li><li><p>变量<code>selectNum</code>，用于保存当次选择的数量，即数量组件传过来的值</p></li><li><p>变量<code>numInCart</code>，用于当前产品已添加的总数</p><blockquote><ul><li>以上两个字段都要添加到<code>storage</code>里面，设置两个变量的目的在于：重复添加同一产品时，<code>numInCart</code>保存着上一次添加的数量，<code>selectNum</code>为本次添加的数量，需要相加后更新到<code>numInCart</code>中，作为总数</li></ul></blockquote></li><li><p>用<code>cartInfo</code>作为key值，在本地存储中保存购物数据</p></li><li><p>由于同一key的数据会被覆盖，而商品数据不止一条；因此，把商品数据都放入数组中，新数据<code>push</code>进数组</p></li><li><p>在更新<code>cartInfo</code>时，会遇到三种情况</p><blockquote><ul><li>第一种，第一次添加时，<code>storage</code>中没有<code>cartInfo</code>数据<ul><li>为<code>detailInfo</code>添加<code>numInCart</code>字段，表示添加商品的总数，就等于<code>selectNum</code></li><li>声明一个空数组，并将<code>detailInfo</code>存进数组</li><li>使用<code>setStorage</code>方法，将数组加入本地缓存</li></ul></li><li>第二种，<code>cartInfo</code>已经有该商品</li><li>第三种，<code>cartInfo</code>没有该商品</li></ul></blockquote></li><li><p>后面两种情况：</p><blockquote><ul><li>首先需要判断是否已经存过<ul><li>声明一个变量作为标志<code>isExist</code>，默认为<code>false</code>，表示缓存中没有该商品</li><li>获取缓存中的<code>cartInfo</code>，并进行遍历</li><li>将缓存中数据的id与当前商品的id进行对比，如果相等就将<code>isExist</code>修改为<code>true</code></li></ul></li><li><code>isExist</code>为<code>true</code>，存在同一产品：<ul><li>将两次添加的数量相加</li><li>判断库存，如果不超过库存，就添加进<code>storage</code>，超过了就提示</li></ul></li><li><code>isExist</code>为<code>false</code>，没存过：<ul><li>更新<code>numInCart</code></li><li>判断库存，如果不超过库存，就添加进<code>storage</code>，超过了就提示</li></ul></li></ul></blockquote></li></ul><ol start="4"><li>购物车的徽标<br><strong>效果：</strong></li></ol><ul><li>初始化时，并没有徽标</li><li>商品加入购物车后，徽标显示当前添加的商品数量(不是杯数)</li></ul><p><strong>什么时候更新徽标数据</strong></p><ul><li>用户在关闭详情页时，此时已成功加入购物车</li><li>整个小程序在启动时，需要先获取本地存储中是否有数据<blockquote><ul><li>当数据存储在本地缓存中指定的key中，除非用户主动删除或因存储空间原因被系统清理，否则数据都一直可用</li></ul></blockquote></li><li>切换到购物车页面时，要获取最新数据</li></ul><h3 id="购物车页面"><a href="#购物车页面" class="headerlink" title="购物车页面"></a>购物车页面</h3><h4 id="基础准备-2"><a href="#基础准备-2" class="headerlink" title="基础准备"></a>基础准备</h4><ul><li>数据来源：本地缓存<code>storage</code></li><li>效果：<blockquote><ul><li>展示已选择商品的名称、价格、规格、数量等信息</li><li>商品结算时，金额与数量之间的联动、跳转到订单页结算</li><li>滑动删除商品</li></ul></blockquote></li><li>难点<blockquote><ul><li>单选&#x2F;全选商品时，总金额与数量之间的逻辑处理</li></ul></blockquote></li></ul><h4 id="购物车布局"><a href="#购物车布局" class="headerlink" title="购物车布局"></a>购物车布局</h4><ol><li>商品列表布局<blockquote><ul><li>拿到<code>storage</code>里的数据，遍历数据</li><li>规格需要三层遍历，分隔线<code>/</code>用伪元素做</li><li>选择按钮：给商品数据添加<code>selected</code>字段，用<code>wx:if</code>和<code>wx:else</code>控制显隐</li></ul></blockquote></li></ol><p><strong>细节：</strong></p><blockquote><ul><li>用户可以直接在购物车页面修改数量，因此需要保存修改后的值，更新页面</li><li>当页面隐藏&#x2F;切换时，要获取购物车页面的最新数据，并更新到<code>cartInfo</code>中</li></ul></blockquote><ol><li><p>空购物车界面</p><blockquote><ul><li>单独封装成自定义组件，实现复用</li></ul></blockquote></li><li><p>底部提交订单栏和滑动删除按钮</p></li></ol><p><strong>布局实现：使用<code>vant</code>组件</strong></p><blockquote><ul><li>初始化<code>npm -y</code></li><li>安装npm包：<code>npm i @vant/weapp -S --production</code></li><li>将 <code>app.json</code> 中的 <code>&quot;style&quot;: &quot;v2&quot;</code> 去除</li><li>打开微信开发者工具，点击 工具 -&gt; 构建<code>npm</code></li><li>在页面的<code>json</code>文件中引入组件</li></ul></blockquote><pre><code>&quot;usingComponents&quot;: &#123;  &quot;van-swipe-cell&quot;: &quot;@vant/weapp/swipe-cell/index&quot;,  &quot;van-submit-bar&quot;: &quot;@vant/weapp/submit-bar/index&quot;&#125;</code></pre><blockquote><ul><li>根据对应文档使用组件</li></ul></blockquote><p><strong>底部提交订单栏——js逻辑</strong></p><ul><li>效果<blockquote><ul><li>点击全选，可实现全选&#x2F;全不选购物车中所有商品</li><li>总金额会随选中的商品及其数量的变化而变化</li><li>结算的数量由<code>selected</code>字段决定</li></ul></blockquote></li><li>思路：<blockquote><p><strong>全选</strong></p><ul><li>声明一个变量<code>selectedAll</code>，作为全选的标识，默认为<code>false</code>，即没有全选</li><li>在全选按钮的点击事件中<ul><li>如果<code>selectedAll</code>为<code>false</code>，那就遍历购物车中所有商品，将<code>selected</code>字段都修改成<code>true</code>；修改完之后，再将<code>selectedAll</code>改为<code>true</code>，也就是已经<strong>全选</strong>了</li><li>在下一次点击时，看到<code>selectedAll</code>为<code>true</code>，就将购物车中所有商品的<code>selected</code>字段都修改成<code>false</code>，再将<code>selectedAll</code>改为<code>false</code>，这样就能实现<strong>全不选</strong></li><li>更新总金额和选择数量</li></ul></li></ul><p><strong>单选</strong></p><ul><li>拿到当前点击的商品数据，添加<code>selected</code>字段，并且值为相反值<br><code> cartInfo[index].selected = !cartInfo[index].selected</code><ul><li><code>selected</code>默认为<code>false</code>，这样既添加了新字段，又实现了两次点击的值相反</li><li>更新总金额和选择数量<br>细节：</li></ul></li><li>选中商品的数量为0时，结算按钮为灰色，不能点击；用三元运算符控制</li></ul></blockquote></li></ul><blockquote><p><strong>总金额和选择数量</strong></p><ul><li>由于单选或全选时都要更新总金额，因此单独定义一个方法<code>_updataMoney</code></li><li>声明一个变量<code>payMoney</code>，保存总金额</li><li>每次调用该方法，都会将<code>cartInfo</code>遍历一次，计算所有<code>selected</code>等于<code>true</code>的数据的 <strong>总金额和数量</strong></li><li>定义一个变量<code>isSelectedAll</code>，作为全选标志，默认为<code>true</code><ul><li>在遍历<code>cartInfo</code>时，任一商品的<code>selected</code>等于<code>false</code>，<code>isSelectedAll</code>就变成<code>false</code>，表示没有全选，因此将<code>selectedAll</code>修改为<code>false</code></li><li>在遍历完之后，如果<code>isSelectedAll</code>仍为<code>true</code>，就表示单选了购物车中所有商品，此时全选按钮应该亮起，因此将<code>selectedAll</code>修改为<code>true</code></li></ul></li><li>更新<code>cartInfo</code>和本地缓存</li></ul></blockquote><p><strong>滑动删除</strong></p><blockquote><ul><li>根据文档，使用<code>vant</code>组件进行布局</li><li>给删除按钮添加点击事件，用自定义属性传递索引</li><li>根据索引，找到当前点击的商品数据，把它从<code>cartInfo</code>数组中删除</li><li>调用方法更新总金额</li><li>更新缓存</li></ul></blockquote><p><strong>去结算</strong></p><blockquote><ul><li>声明一个空对象<code>acountData</code>保存要传递给订单页的数据</li><li>在结算按钮的点击事件中，将所有被选中的商品保存到一个空数组中</li><li>将总金额和结算数组保存到<code>acountData</code>对象中</li><li>将<code>acountData</code>作为新的<code>key</code>存入本地缓存，订单页可以通过该<code>key</code>获取数据</li><li>跳转到订单页</li></ul></blockquote><h3 id="订单页"><a href="#订单页" class="headerlink" title="订单页"></a>订单页</h3><p><strong>效果</strong></p><ul><li>滑动&#x2F;点击切换tabs标签可查看不同状态的订单</li><li>付款</li></ul><p><strong>难点</strong></p><ul><li>通过<code>WXS</code>和节流函数优化频繁划动切换带来的性能问题</li><li>支付成功后，删除购物车中的商品</li></ul><p><strong>布局</strong></p><ul><li>顶部分类栏</li><li>加入购物车的商品动态渲染</li><li>空订单时的界面：复用组件</li></ul><h4 id="实现tabs标签的切换"><a href="#实现tabs标签的切换" class="headerlink" title="实现tabs标签的切换"></a>实现tabs标签的切换</h4><ol><li>原理</li></ol><ul><li>在点击&#x2F;滑动事件中，将目标索引传入js中，保存在<code>currentTabIndex</code>中，当<code>tabs</code>标签的索引等于<code>currentTabIndex</code>时，激活选中样式</li><li>最重要的是传入目标索引，点击切换比较简单</li></ul><ol start="2"><li><p>滑动切换<br><strong>思路</strong></p><blockquote><ul><li>在视图层<code>wxml、wxs</code>中处理<code>touchmove</code>事件，在处理完成之后，再将事件的结果传给逻辑层</li><li>控制灵敏度：计算手指触摸开始和结束的距离，当该距离在一定范围内时，再向逻辑层传递结果</li></ul></blockquote></li><li><p>节流优化</p></li></ol><ul><li>在接收滑动&#x2F;点击事件传来的<code>index</code>时，引入节流函数，控制执行频率</li></ul><h4 id="与购物车页面相关"><a href="#与购物车页面相关" class="headerlink" title="与购物车页面相关"></a>与购物车页面相关</h4><ol><li><p>点击结算之后删除商品</p><blockquote><ul><li>循环遍历加入本地缓存中的<code>acountList</code>数组，与<code>cartInfo</code>数据进行对比，删除相同数据，更新缓存和页面的<code>cartInfo</code></li></ul></blockquote></li><li><p><code>acountData</code>的调整</p><blockquote><ul><li>如果用户分几次结算商品，那么为了不覆盖前面的数据</li><li>应该先获取缓存中的商品数组和金额，然后将本次的商品<code>push</code>进去，计算总金额时也要加上前面的，最后更新缓存</li></ul></blockquote></li></ol><h3 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h3><ul><li><p>布局</p><blockquote><ul><li>创建两种状态的登录框</li><li>下方的列表在登录状态不同时，也应该不一样</li></ul></blockquote></li><li><p>开放能力</p><blockquote><ul><li>微信官方有在线客服和意见反馈的功能</li><li>将 <code>button</code> 组件 <code>open-type</code> 的值设置为 <code>contact</code>，当用户点击后就会进入客服会话</li><li>将 <code>button</code> 组件 <code>open-type</code> 的值设置为 <code>feedback</code>，当用户点击后就会打开“意见反馈”页面，用户可提交反馈内容并上传日志</li></ul></blockquote></li></ul><h4 id="授权登录——云开发"><a href="#授权登录——云开发" class="headerlink" title="授权登录——云开发"></a>授权登录——云开发</h4><p><strong>步骤：</strong></p><ul><li><p>使用<code>wx.getUserProfile</code>获取用户头像和昵称</p></li><li><p>创建云开发环境</p><blockquote><ul><li>在项目根目录 <code>project.config.json</code> 项目配置文件中，初始化配置云函数的文件夹的目录</li><li>在项目根目录中，新建 <code>cloud</code> 文件夹，并选择项目对应的环境</li></ul></blockquote></li><li><p>初始化</p><blockquote><ul><li>在云开发控制台中，创建数据表 <code>users</code> 用于存储用户信息</li><li>在 <code>cloud</code> 文件夹上右键 -&gt; 选择”新建 <code>Node.js</code> 云函数”，输入云函数名称 <code>login</code> 即可新建成功</li><li>在小程序 <code>app.js</code> 中初始化云函数</li><li>上传并部署云函数(每次修改云函数都要重新上传)</li><li>在微信端调用云函数，将<code>wx.getUserProfile</code>获取的用户头像和昵称等用户信息传给后端，用于生成用户账号</li></ul></blockquote></li><li><p>在<code>cloud/login/index.js</code>中编写根据<code>openId</code>查询用户信息的方法，根据查询返回的数组的长度来决定下一步是注册还是登录</p></li><li><p>注册用户账号</p><blockquote><ul><li>在 <code>cloud/login/index.js</code> 云函数中完成用户信息的注册，在数据库中新增用户数据</li><li>当用户注册成功后，根据 ID 快速查询当前用户的信息，并返回给前端</li><li>上传并部署云函数</li></ul></blockquote></li><li><p>实现登录逻辑</p><blockquote><ul><li>如果已经注册，就可以返回根据<code>openId</code>到的查询用户信息</li></ul></blockquote></li><li><p>小程序页面逻辑</p><blockquote><ul><li>获取登录后的数据，并将数据库中真实的用户信息同步到本地存储中，做数据的持久化</li><li>当页面切换时，实时获取最新的用户数据</li><li>注意：要在云开发控制台中，修改数据库的权限，选择所有用户可读</li></ul></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> applet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML及vscode</title>
      <link href="/2023/11/19/HTML%E5%8F%8Avscode/"/>
      <url>/2023/11/19/HTML%E5%8F%8Avscode/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><div class="markmap-container" style="height:400px">  <svg data="{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;HTML&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;定义&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;描述网页的语言 / 超文本标记语言&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;超出文本的限制：可使用img/audio/vedio等&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;超链接文本：实现文件间的跳转&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;html骨架&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;文档声明：!DOCTYPE&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;告诉浏览器的解析器，用什么规范来解析页面&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;语言类型：lang=&amp;quot;en&amp;quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;声明语言类型&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;网页配置：head&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;网页标题：title&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;meta：元标签&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[26,27]},&quot;v&quot;:&quot;声明网页字符编码集：charset&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[28,29]},&quot;v&quot;:&quot;UTF-8：全球语言&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[30,31]},&quot;v&quot;:&quot;gbk：汉语、英语、少量日韩&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[32,33]},&quot;v&quot;:&quot;ASCII：英语&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[34,35]},&quot;v&quot;:&quot;http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[36,37]},&quot;v&quot;:&quot;IE8及以上版本使用当前版本的最高级标准模式去渲染网页&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[38,39]},&quot;v&quot;:&quot;name&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[40,41]},&quot;v&quot;:&quot;移动端适配：viewport&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:11,&quot;p&quot;:{&quot;lines&quot;:[42,43]},&quot;v&quot;:&quot;宽度为设备实际宽度：width=device-width&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:11,&quot;p&quot;:{&quot;lines&quot;:[44,45]},&quot;v&quot;:&quot;不需要缩放：initial-scale=1.0&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[46,47]},&quot;v&quot;:&quot;网页关键词：key&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:9,&quot;p&quot;:{&quot;lines&quot;:[48,49]},&quot;v&quot;:&quot;网页描述：description&quot;}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[50,51]},&quot;v&quot;:&quot;网页内容：body&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[52,53]},&quot;v&quot;:&quot;HTML5优点/新特性&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[54,55]},&quot;v&quot;:&quot;形成了HTML5标准的文档声明，不再基于SGML&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[56,57]},&quot;v&quot;:&quot;新增了语义化标签&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[58,59]},&quot;v&quot;:&quot;支持多媒体：audio、vedio&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[60,61]},&quot;v&quot;:&quot;画布canvas可以绘制各种形状&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[62,63]},&quot;v&quot;:&quot;可以使用SOL数据库、支持存储离线数据：sessionStorage、localStorage&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[64,65]},&quot;v&quot;:&quot;新的文档属性：document.visibilityState&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[66,67]},&quot;v&quot;:&quot;支持定位、拖动和放置&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[68,69]},&quot;v&quot;:&quot;语义化&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[70,71]},&quot;v&quot;:&quot;概念&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[72,73]},&quot;v&quot;:&quot;使用有英文语义的标签&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[74,75]},&quot;v&quot;:&quot;作用/原因&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[76,77]},&quot;v&quot;:&quot;在没有样式的情况下，也能够看得懂网页框架&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[78,79]},&quot;v&quot;:&quot;爬虫依赖标签来确定上下文和关键词的权重，语义化有利于SEO优化&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[80,81]},&quot;v&quot;:&quot;国际化，各国开发者都能看得懂&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[82,83]},&quot;v&quot;:&quot;提供可维护性，减少差异&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[84,85]},&quot;v&quot;:&quot;有利于帮助辅助技术更好地转义网页，例如无障碍阅读&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[86,87]},&quot;v&quot;:&quot;html标签&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[88,89]},&quot;v&quot;:&quot;块级元素&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[90,91]},&quot;v&quot;:&quot;标题：h1~h6&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[92,93]},&quot;v&quot;:&quot;段落p&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[94,95]},&quot;v&quot;:&quot;div&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[96,97]},&quot;v&quot;:&quot;列表标签ul~li，ol~li&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[98,99]},&quot;v&quot;:&quot;定义列表dl dt dd&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[100,101]},&quot;v&quot;:&quot;表单form&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[102,103]},&quot;v&quot;:&quot;action属性：规定向何处发送数据&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[104,105]},&quot;v&quot;:&quot;methods属性：规定发送数据的HTTP方法&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[106,107]},&quot;v&quot;:&quot;行内块元素&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[108,109]},&quot;v&quot;:&quot;img&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[110,111]},&quot;v&quot;:&quot;gif：动画、布尔透明、无兼容问题&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[112,113]},&quot;v&quot;:&quot;jpg：失真压缩法，色彩丰富&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[114,115]},&quot;v&quot;:&quot;png：支持透明，高保真&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[116,117]},&quot;v&quot;:&quot;webp：文件小，动画，透明，兼容性相对不好&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[118,119]},&quot;v&quot;:&quot;svg：矢量图，体积小，动画&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[120,121]},&quot;v&quot;:&quot;audio&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[122,123]},&quot;v&quot;:&quot;vedio&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[124,125]},&quot;v&quot;:&quot;input(不同的type属性有不同作用)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[126,127]},&quot;v&quot;:&quot;text：单行文本&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[128,129]},&quot;v&quot;:&quot;radio：单选框&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[130,131]},&quot;v&quot;:&quot;checkbox：多选框&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[132,133]},&quot;v&quot;:&quot;button：按钮&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[134,135]},&quot;v&quot;:&quot;submit：提交&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[136,137]},&quot;v&quot;:&quot;password：密码&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[138,139]},&quot;v&quot;:&quot;reset：重置&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[140,141]},&quot;v&quot;:&quot;select&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[142,143]},&quot;v&quot;:&quot;option&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[144,145]},&quot;v&quot;:&quot;textarea&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[146,147]},&quot;v&quot;:&quot;行内元素&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[148,149]},&quot;v&quot;:&quot;a标签&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[150,151]},&quot;v&quot;:&quot;span&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[152,153]},&quot;v&quot;:&quot;label&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[154,155]},&quot;v&quot;:&quot;空白折叠现象&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[156,157]},&quot;v&quot;:&quot;多个换行或多个空格会被解析成一个空格&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[158,159]},&quot;v&quot;:&quot;转义符&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[160,161]},&quot;v&quot;:&quot;空格：&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[162,163]},&quot;v&quot;:&quot;&amp;amp;：&amp;amp;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[164,165]},&quot;v&quot;:&quot;版权符：©&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[166,167]},&quot;v&quot;:&quot;商标：®&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[168,169]},&quot;v&quot;:&quot;&amp;lt;：&amp;lt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[170,171]},&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;paragraph&quot;,&quot;d&quot;:7,&quot;p&quot;:{&quot;lines&quot;:[170,171]},&quot;v&quot;:&quot;：&amp;gt;&quot;}]}]}]}]}"></svg></div><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><h3 id="1、HTML是什么"><a href="#1、HTML是什么" class="headerlink" title="1、HTML是什么"></a>1、HTML是什么</h3><ul><li>HTML是用来描述网页的语言，又称“超文本标记语言”<blockquote><p>超文本有两层含义</p><ul><li>超出了文本的限制：他可以加入图片、视频、音频、链接等</li><li>超级链接文本：可以从一个文件跳转到另一个文件，与世界各地主机的文件相连</li></ul></blockquote></li></ul><h3 id="2、HTML骨架"><a href="#2、HTML骨架" class="headerlink" title="2、HTML骨架"></a>2、HTML骨架</h3><h4 id="文档声明DTD："><a href="#文档声明DTD：" class="headerlink" title="文档声明DTD："></a>文档声明DTD：</h4><pre><code>&lt;!DOCTYPE html&gt;</code></pre><blockquote><p>它并不是HTML标签，文档声明以下的都是HTML标签<br>作用：告诉浏览器的解析器使用HTML5的标准模式<br>HTML 4.01有三种声明：严格版、过渡版、框架版</p></blockquote><h4 id="声明语言类型"><a href="#声明语言类型" class="headerlink" title="声明语言类型"></a>声明语言类型</h4><pre><code>&lt;html lang=&quot;en&quot;&gt;</code></pre><blockquote><p>en：英语，zh：中文；网站有多国语言时修改</p></blockquote><h4 id="head标签"><a href="#head标签" class="headerlink" title="head标签"></a>head标签</h4><pre><code>&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;</code></pre><blockquote><p>head标签里面是对网页的配置</p></blockquote><h4 id="声明网页字符编码集"><a href="#声明网页字符编码集" class="headerlink" title="声明网页字符编码集"></a>声明网页字符编码集</h4><pre><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></pre><blockquote><p>meta是元标签，charset是字符集<br>在中国字符集有两种类型：”UTF-8”和”gb2312”</p></blockquote><table><thead><tr><th>字符集</th><th>涵盖字符</th><th>1个汉字的字节数</th><th>适用场景</th></tr></thead><tbody><tr><td>UTF-8</td><td>涵盖全球所有国家、民族的文字和大量图形字符</td><td>3</td><td>非汉字文字的网页</td></tr><tr><td>gb2312(gbk)</td><td>收录所有汉字字符、英语，少量韩文、日文、少量图形字符</td><td>2</td><td>只有汉语和英语的网页</td></tr><tr><td>ASCII</td><td>只有英文</td><td></td><td></td></tr><tr><td>ISO-8859-1</td><td>西欧字符</td><td></td><td></td></tr><tr><td>Unicode</td><td>世界通用</td><td></td><td>它只是符号集，并不是编码方式；具体编码方式包括UTF-8、UTF-16、UTF-32</td></tr></tbody></table><blockquote><p>由上表可以看出，gbk更加节省字节，有利于SEO优化<br>注意：VScode的设置要与此处一致，否则会乱码。且live serve插件不支持gbk</p></blockquote><h4 id="IE8及以上版本都使用当前版本所对应的最高级标准模式去渲染"><a href="#IE8及以上版本都使用当前版本所对应的最高级标准模式去渲染" class="headerlink" title="IE8及以上版本都使用当前版本所对应的最高级标准模式去渲染"></a>IE8及以上版本都使用当前版本所对应的最高级标准模式去渲染</h4><pre><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</code></pre><blockquote><p><code>X-UA-Compatible</code> 是IE8的专有meta属性，他告诉IE8采用何种IE版本去渲染网页<br>最佳兼容模式方案：</p></blockquote><pre><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt;</code></pre><blockquote><p><code>chrome=1</code>表示将允许站点在使用了谷歌浏览器内嵌框架的客户端渲染</p></blockquote><h4 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h4><ul><li>宽度为设备实际宽度，不需要缩放</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ul><li>keywords</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>关键词内容<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li>description</li></ul><pre><code>&lt;meta name=&quot;description&quot; content=&quot;描述的内容&quot;/&gt;</code></pre><h4 id="网页标题"><a href="#网页标题" class="headerlink" title="网页标题"></a>网页标题</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></code></pre><h4 id="body标签"><a href="#body标签" class="headerlink" title="body标签"></a>body标签</h4><blockquote><p>里面包括网页的头部、主要内容、页脚各个部分</p></blockquote><h3 id="3、浏览器内核"><a href="#3、浏览器内核" class="headerlink" title="3、浏览器内核"></a>3、浏览器内核</h3><table><thead><tr><th>浏览器</th><th>内核</th></tr></thead><tbody><tr><td>IE、世界之窗浏览器</td><td>Trident</td></tr><tr><td>Edge</td><td>WebKit</td></tr><tr><td>chrome&#x2F;opera</td><td>Blink</td></tr><tr><td>Firefox（火狐）</td><td>Gecko</td></tr><tr><td>Safari（苹果）</td><td>webkit</td></tr><tr><td>360、猎豹、2345浏览器</td><td>trident+blink</td></tr><tr><td>UC、搜狗、遨游、QQ浏览器</td><td>trident+webkit</td></tr></tbody></table><h2 id="二、HTML标签及属性"><a href="#二、HTML标签及属性" class="headerlink" title="二、HTML标签及属性"></a>二、HTML标签及属性</h2><h3 id="1、标题标签"><a href="#1、标题标签" class="headerlink" title="1、标题标签"></a>1、标题标签</h3><p>h1~h6</p><table><thead><tr><th>html写法</th><th>markdown写法</th></tr></thead><tbody><tr><td><h1>一级标题</h1></td><td># H1</td></tr><tr><td><h2>二级标题</h2></td><td>## H2</td></tr><tr><td><h3>三级标题</h3></td><td>### H3</td></tr><tr><td><h4>四级标题</h4></td><td>#### H4</td></tr><tr><td><h5>五级标题</h5></td><td>##### H5</td></tr><tr><td><h6>六级标题</h6></td><td>###### H6</td></tr></tbody></table><h3 id="2、段落标签"><a href="#2、段落标签" class="headerlink" title="2、段落标签"></a>2、段落标签</h3><pre><code>&lt;p&gt;段落&lt;/p&gt;</code></pre><h3 id="3、HTML5特性"><a href="#3、HTML5特性" class="headerlink" title="3、HTML5特性"></a>3、HTML5特性</h3><h4 id="空白折叠现象：多个换行和多个空格都会被折叠成一个空格"><a href="#空白折叠现象：多个换行和多个空格都会被折叠成一个空格" class="headerlink" title="空白折叠现象：多个换行和多个空格都会被折叠成一个空格"></a>空白折叠现象：多个换行和多个空格都会被折叠成一个空格</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>空白折叠现象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>文字之间   的  多个空格会被折叠成一个空格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>多个空行会被省略<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    标签内壁和文字之间的空格会被忽略<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>效果展示：</p><h3>空白折叠现象</h3><h3>文字之间   的  多个空格会被折叠成一个空格</h3><h3>多个空行会被省略</h3><p>    标签内壁和文字之间的空格会被忽略</p><h4 id="常用转义符"><a href="#常用转义符" class="headerlink" title="常用转义符"></a>常用转义符</h4><pre class=" language-html"><code class="language-html">空格：<span class="token entity" title="&nbsp;">&amp;nbsp;</span>小于号：<span class="token entity" title="&lt;">&amp;lt;</span>大于号：<span class="token entity" title="&gt;">&amp;gt;</span>&amp;符号：<span class="token entity" title="&amp;">&amp;amp;</span>单引号：<span class="token entity" title="&quot;">&amp;quot;</span>版权符：<span class="token entity" title="&copy;">&amp;copy;</span>已注册商标：<span class="token entity" title="&reg;">&amp;reg;</span></code></pre><p>效果展示：<br>空格：&nbsp;<br>小于号：&lt;<br>大于号：&gt;<br>&amp;符号：&amp;<br>单引号：&quot;<br>版权符：&copy;<br>已注册商标：&reg;</p><blockquote><p>注：千万不要忘了分号;</p></blockquote><h3 id="4、列表标签"><a href="#4、列表标签" class="headerlink" title="4、列表标签"></a>4、列表标签</h3><h4 id="无序列表：ul-li"><a href="#无序列表：ul-li" class="headerlink" title="无序列表：ul li"></a>无序列表：ul li</h4><ul>    <li>ul、li是一对父子标签，必须同时存在</li>    <li>ul中只能嵌套li，但是li可以嵌套任何标签</li>    <li>type属性：</li>        <ul>            <li>旧版本使用type="square/circle/disc"</li>            <li>在html5中用CSS定义其type属性 style="list-style-type:cicle/square/disc"</li>        </ul>    </li></ul><ul type="disc">    <li>默认样式：实心圆disc</li></ul><ul style="list-style-type:circle">    <li>空心圆：circle</li></ul><ul style="list-style-type:square">    <li>实心正方形：square</li></ul><blockquote><p>markdown语法：</p><ul><li>实心圆：减号-+空格</li><li>空心圆：tab+减号-+一个空格</li></ul></blockquote><h4 id="有序列表-ol-li"><a href="#有序列表-ol-li" class="headerlink" title="有序列表 ol li"></a>有序列表 ol li</h4><ol>    <li>ol li也是父子标签，ol只能嵌套li，但li可以嵌套任何标签</li>    <li>有顺序的列表</li>    <li>type属性：type="1/A/a/I/i"</li>        <ol type="1">            <li>Java</li>            <li>C++</li>            <li>python</li>        </ol>    <li>start属性：指定起始值</li>        <ol type="I" start="3">            <li>Java</li>            <li>C++</li>            <li>python</li>        </ol>    <li>reversed属性：倒序，直接填写该单词</li>        <ol type="A" start="3" reversed >            <li>Java</li>            <li>C++</li>            <li>python</li>        </ol></ol><blockquote><p>markdown中直接输入数字+.+一个空格<br>根据上下顺序编号，而不是输入的数字</p></blockquote><pre><code>1. first5. second3. third </code></pre><p>效果：</p><ol><li>first</li><li>second</li><li>third</li></ol><h4 id="定义列表-dl-dt-dd"><a href="#定义列表-dl-dt-dd" class="headerlink" title="定义列表 dl dt dd"></a>定义列表 dl dt dd</h4><dl>    <dt>定义项1</dt>    <dd>解释说明1</dd>    <dd>解释说明2</dd>    <dt>定义项2</dt>    <dd>解释说明1</dd></dl><dl>    <dt>定义项3</dt>    <dd>解释说明1</dd></dt><blockquote><ul><li>dt dl可交替出现，也可以不交替出现(此时放在不同的dl中)</li><li>应用场景可参考小米官网底部</li><li>markdown语法：第一行术语，第二行冒号+一个空格+定义<br>定义项<br>: 解释说明</li></ul></blockquote><h3 id="5、多媒体标签"><a href="#5、多媒体标签" class="headerlink" title="5、多媒体标签"></a>5、多媒体标签</h3><h4 id="图片标签img"><a href="#图片标签img" class="headerlink" title="图片标签img"></a>图片标签img</h4><ul><li>正确写法：</li></ul><pre><code>&lt;img src=&quot; &quot; alt=&quot; &quot; width=&quot; &quot; height=&quot; &quot;/&gt;</code></pre><img src="3.avif"/><blockquote><p>pc端以上四要素必须填写<br>移动端必须填写alt属性，且需要表现出图片的含义</p></blockquote><ul><li>alt属性：图片的文本描述</li><li>width、height属性：图片宽度高度</li><li>src图片路径：<ul><li>相对路径：从当前网页出发，找到图片的路径。.&#x2F;是当前目录；..&#x2F;是返回上一级目录。</li><li>绝对路径：图片的精确地址</li></ul></li></ul><blockquote><p>markdown语法：<code>![alt](图片路径)</code></p></blockquote><h4 id="超级链接a标签"><a href="#超级链接a标签" class="headerlink" title="超级链接a标签"></a>超级链接a标签</h4><ul><li>正确写法：</li></ul><pre><code>&lt;a herf=&quot;链接&quot; title=&quot;悬停文本&quot; target=&quot;网页跳转方式&quot;&gt;网页显示&lt;/a&gt;</code></pre><p><a href="https://www.baidu.com" title="百度知道" target="_self">百度一下</a></p><blockquote><p>a标签是网页之间跳转的方式<br>href属性：支持相对属性和绝对属性<br>title属性：悬停文本<br>target属性：网页跳转的方式</p><ul><li>_blank&#x2F;blank:在新窗口打开网页</li></ul></blockquote><ul><li><p>_self:默认，当前页面跳转</p></li><li><p>_parent:在父窗口中打开</p></li><li><p>_top:在当前窗体打开链接，并替换当前的整个窗体</p><blockquote><ul><li>下面三个标签在网页上看效果一样，但在框架页中效果不同</li></ul></blockquote></li><li><p>点击图片跳转网页：</p><a href="https://www.baidu.com" title="手机"><img src="1.jpg"></a></li><li><p>页面锚点</p></li></ul><blockquote><p>给B处设置id，A处a标签链接为该id，点击A处则会跳转至B处</p></blockquote><pre><code>&lt;a href=&quot;#id名&quot;&gt;名称&lt;/a&gt;&lt;p id=&quot; &quot;&gt;名称&lt;/p&gt;</code></pre><p>效果：<br><a href="#yyhbq">语义化标签</a></p><blockquote><p>markdown语法：<br><a href="#A%E5%A4%84%E5%90%8D%E7%A7%B0-id%E5%90%8D-id">A处</a><br>B处 {id名-id}</p></blockquote><p><a href="#7%E3%80%81%E8%A1%A8%E6%A0%BC%E6%A0%87%E7%AD%BE-bg-id">表格标签</a></p><ul><li>下载链接<blockquote><p>支持exe、zip、rar、word、excel等格式的文件<br>链接为文件地址</p></blockquote></li></ul><p><a href="D:\arry\30天计划\配件\前端学习资料-超链接.docx">前端学习资料</a></p><ul><li><p>邮件链接</p><blockquote><p>链接为mailto:邮箱地址<br><a href="1234@qq.com">给我发邮件</a></p></blockquote></li><li><p>电话链接</p><blockquote><p>链接为tel:电话号码<br><a href="1234">给我打电话</a></p></blockquote></li></ul><h4 id="音频标签audio"><a href="#音频标签audio" class="headerlink" title="音频标签audio"></a>音频标签audio</h4><ul><li>正确写法1：</li></ul><pre><code>&lt;audio controls src=&quot;路径&quot; autoplay loop&gt;提示语&lt;/audio&gt;</code></pre><p><audio controls src="D:\arry\30天计划\配件\音标篇004.mp3" autoplay loop>抱歉，您的浏览器不支持audio标签，请升级您的浏览器哦</audio></p><ul><li><p>controls：显示播放空间</p></li><li><p>src：文件路径</p></li><li><p>提示语：浏览器不兼容时的文字显示</p></li><li><p>autoplay：自动播放</p></li><li><p>loop：循环播放</p></li><li><p>正确写法2(加入source标签)：</p></li></ul><pre><code>&lt;audio controls&gt;    &lt;source src=&quot;音频.mp3&quot; type=&quot;audio/mpeg&quot; autoplay loop/&gt;    &lt;source src=&quot;音频.ogg&quot; type=&quot;audio/ogg&quot; autoplay loop/&gt;    &lt;source src=&quot;音频.wav&quot; type=&quot;audio/wav&quot; autoplay loop/&gt;抱歉，您的浏览器不支持audio标签，请升级您的浏览器哦&lt;/audio&gt;</code></pre><ul><li>source标签为媒体元素定义媒体资源</li></ul><blockquote><p>它给浏览器提供多种格式的文件，浏览器会选择其支持的格式进行播放；如果都支持则任选一个，默认是第一个。</p></blockquote><table><thead><tr><th>Format</th><th>MIME-type</th><th>说明</th></tr></thead><tbody><tr><td>MP3</td><td>audio&#x2F;mpeg</td><td>一种音频压缩技术，用来大幅度的降低音频数</td></tr><tr><td>Ogg</td><td>audio&#x2F;ogg</td><td>新的音频压缩技术，完全免费，无专利限制</td></tr><tr><td>Wav</td><td>audio&#x2F;wav</td><td>由微软公司开发，声音质量接近CD</td></tr><tr><td><audio controls></td><td></td><td></td></tr></tbody></table><pre><code>&lt;source src=&quot;D:\arry\30天计划\配件\音标篇004.mp3&quot; type=&quot;audio/mpeg&quot; autoplay loop&gt;</code></pre><p>抱歉，您的浏览器不支持audio标签，请升级您的浏览器哦<br></audio></p><h4 id="视频标签video"><a href="#视频标签video" class="headerlink" title="视频标签video"></a>视频标签video</h4><ul><li>正确写法1：</li></ul><pre><code>&lt;video controls src=&quot;D:\arry\30天计划\配件\mi.mp4&quot; autoplay loop&gt;抱歉，您的浏览器不支持audio标签，请升级您的浏览器哦&lt;/video&gt;</code></pre><p><video controls src="D:\arry\30天计划\配件\mi.mp4" autoplay loop>抱歉，您的浏览器不支持audio标签，请升级您的浏览器哦</video></p><ul><li>正确写法2(加入source标签)：</li></ul><pre><code>&lt;video controls&gt;    &lt;source src=&quot;文件.mp4&quot; type=&quot;video.mp4&quot;/&gt;    &lt;source src=&quot;文件.webm&quot; type=&quot;video.webm&quot;/&gt;    &lt;source src=&quot;文件.ogv&quot; type=&quot;video.ogv&quot;/&gt;    &lt;source src=&quot;文件.avi&quot; type=&quot;video.avi&quot;/&gt;&lt;/video&gt;</code></pre><table><thead><tr><th>Format</th><th>MIME-type</th><th>说明</th></tr></thead><tbody><tr><td>mp4</td><td>video&#x2F;mp4</td><td>mp4即mpeg4,使用H264视频解编码器和AAC音频解编码器</td></tr><tr><td>webm</td><td>video&#x2F;webm</td><td>使用VP8视频解编码器和Vorbis音频解编码器</td></tr><tr><td>ogv</td><td>video&#x2F;ogv</td><td>支持256色和RLE压缩，它对视频文件采用了一种有损压缩方式</td></tr><tr><td>avi</td><td>video&#x2F;avi</td><td>使用Theora视频解编码器和Vorbis音频解编码器</td></tr></tbody></table><blockquote><p>视频和音频一样使用autoplay、loop标签<br>markdown语法：<a href="%E8%B7%AF%E5%BE%84/%E7%BD%91%E5%9D%80/%E9%93%BE%E6%8E%A5">title</a></p><blockquote><p>效果：<a href="https://www.baidu.com/">title</a></p></blockquote></blockquote><h3 id="6、表单元素-form"><a href="#6、表单元素-form" class="headerlink" title="6、表单元素 form"></a>6、表单元素 form</h3><ul><li>作用：收集不同类型的用户输入</li><li>属性<ul><li>action:提交表单时，向何处发送表单数据</li><li>method:规定发送表单数据的HTTP方法</li></ul></li><li>元素</li></ul><table><thead><tr><th>作用</th><th>标签</th><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>单行文本框</td><td>input</td><td>type&#x3D;”text”</td><td>单标签</td></tr><tr><td></td><td>input</td><td>value&#x3D;””</td><td>文本框的值</td></tr><tr><td></td><td>input</td><td>placeholder&#x3D;””</td><td>提示文本</td></tr><tr><td></td><td>input</td><td>disabled</td><td>表示禁用</td></tr><tr><td>多行文本框</td><td>textarea</td><td>cols</td><td>定义行数</td></tr><tr><td></td><td>textarea</td><td>rows</td><td>定义列数</td></tr><tr><td>密码框</td><td>input</td><td>type&#x3D;”password”</td><td>会隐藏内容</td></tr><tr><td>lable标签</td><td>lable</td><td></td><td>用lable标签包裹单选按钮和文字，则文字与按钮绑定</td></tr><tr><td>按钮</td><td>input</td><td>type&#x3D;”button”</td><td>普通按钮</td></tr><tr><td></td><td>input</td><td>type&#x3D;”submit”</td><td>提交按钮</td></tr><tr><td></td><td>input</td><td>type&#x3D;”reset”</td><td>重置按钮</td></tr><tr><td>单选按钮</td><td>input</td><td>type&#x3D;”radio”</td><td></td></tr><tr><td></td><td>input</td><td>name&#x3D;”自定义名称”</td><td>name名称相同时互斥</td></tr><tr><td></td><td>input</td><td>value&#x3D;””</td><td>向服务器提交的值</td></tr><tr><td></td><td>input</td><td>checked</td><td>默认选中</td></tr><tr><td>复选框(多选)</td><td>input</td><td>type&#x3D;”checkbox”</td><td></td></tr><tr><td></td><td>input</td><td>name&#x3D;””</td><td>同组复选框name值相同</td></tr><tr><td></td><td>input</td><td>value\checked</td><td>与单选按钮相同</td></tr><tr><td>下拉菜单</td><td>select</td><td></td><td>包裹option</td></tr><tr><td></td><td>select</td><td>option</td><td>内部选项</td></tr></tbody></table><ul><li>以下是html5新增控件，兼容到IE9，手机端完全兼容<table><thead><tr><th>作用</th><th>标签</th><th>属性</th></tr></thead><tbody><tr><td>颜色选择</td><td>input</td><td>color</td></tr><tr><td>日期时间选择</td><td>input</td><td>date\time\datetime</td></tr><tr><td>电子邮件</td><td>input</td><td>email</td></tr><tr><td>文件选择</td><td>input</td><td>file</td></tr><tr><td>数字输入</td><td>input</td><td>number，可设置min、max</td></tr><tr><td>拖拽条</td><td>input</td><td>range，可设置min、max</td></tr><tr><td>搜索框</td><td>input</td><td>search</td></tr><tr><td>网址输入</td><td>input</td><td>url</td></tr><tr><td>备选框</td><td>input</td><td>datalist</td></tr></tbody></table></li><li>效果：<form>  <p>用户名：<input type="text" placeholder="真实姓名"/>  </p>  <p>年龄：<input type="text" value="22" disabled>  </p>  <p>  常住地址:  <textarea cols="100" rows="2"></textarea>  </p>  <p>请输入密码：<input type="password"/>  </p>  <p>性别：  <lable><input type="radio" name="sex"/>男</lable>  <lable><input type="radio" name="sex"/>女</lable>  <lable><input type="radio" name="sex"/>保密</lable>  </p>  <p>  爱好：  <lable><input type="checkbox" name="爱好">篮球</lable>  <lable><input type="checkbox" name="爱好">书画</lable>  <lable><input type="checkbox" name="爱好">游戏</lable>  </p>  <p>  省份：  <select>  <option value="湖南省">湖南省</option>  <option value="湖北省">湖北省</option>  <option value="海南省">海南省</option>  </select>  市区：  <select>  <option value="长沙市">长沙市</option>  <option value="湘潭市">湘潭市</option>  <option value="深圳市">深圳市</option>  </select>  </p>  <p>  <input type="button" value="这是一个普通按钮"><br>  <input type="submit">这个会跳转<br>  <input type="reset">  </p>  <p>颜色选择：<input type="color"></p>  <p>日期：<input type="date"></p>  <p>编程语言有：  <input type="text" list="language">  <datalist id="language">      <option value="JAVA">JAVA</option>      <option value="python">python</option>      <option value="c++">c++</option>  </p></form></li></ul><h3 id="7、表格标签-bg-id"><a href="#7、表格标签-bg-id" class="headerlink" title="7、表格标签 {bg-id}"></a>7、表格标签 {bg-id}</h3><ul><li>标签属性：<ul><li>border：表格的边框<blockquote><p>HTML的大部分table标签属性已被CSS替代</p></blockquote></li></ul></li><li>表格头部<ul><li>table定义表格</li><li>thead页眉</li><li>caption表格标题</li><li>tr表格的行</li><li>th定义表头</li></ul></li></ul><pre><code>&lt;table border=&quot;1&quot;&gt;    &lt;thead&gt;    &lt;caption&gt;版本规划任务分配表&lt;/caption&gt;    &lt;tr&gt;        &lt;th&gt;需求：V0.3版本规划&lt;/th&gt;        &lt;th&gt;优先级&lt;/th&gt;        &lt;th&gt;任务分解&lt;/th&gt;        &lt;th&gt;产品负责人&lt;/th&gt;    &lt;/tr&gt;    &lt;/thead&gt;&lt;/table&gt;</code></pre><p>-主体</p><ul><li>tbody表格的主体</li><li>tr表格的行</li><li>td表格的单元</li></ul><pre><code>&lt;tbody&gt;    &lt;tr&gt;    &lt;td&gt;功能模块&lt;/td&gt;    &lt;td&gt;具体事项&lt;/td&gt;    &lt;td&gt;3&lt;/td&gt;    &lt;td&gt;任务2&lt;/td&gt;    &lt;td&gt;熊二&lt;/td&gt;    &lt;/tr&gt;&lt;/tbody&gt;</code></pre><ul><li>尾部</li></ul><pre><code>&lt;tfoot&gt;</code></pre><ul><li>跨行跨列(合并单元格)-td或th标签的属性</li><li>colspan：跨列</li><li>rowspan：跨行</li><li>实战<table border="1">   <thead>  <caption>版本规划任务分配表</caption> <tr>  <th colspan="2">需求：V0.3版本规划</th>  <th>优先级</th>  <th>任务分解</th>  <th>产品负责人</th> </tr>  </thead>  <tbody> <tr>  <td rowspan="3">功能模块1</td>  <td>具体事项1</td>  <td>3</td>  <td>任务1</td>  <td rowspan="3">@熊二</td> </tr> <tr>  <td rowspan="2">具体事项2</td>  <td>4</td>  <td>任务2</td> </tr> <tr>  <td>1</td>  <td>任务3</td> </tr> <tfoot> <tr>  <td colspan="5">备注</td> </tr> <tr>  <td colspan="5">……</td> </tr> </tfoot>  </tbody></table></li></ul><blockquote><p>markdown语法：</p><ul><li>表头：管道符(|)+三个以上减号-</li><li>表格：管道符(|)<br>管道符不需要对齐<br>对齐方式：在减号旁添加冒号；居左：—，居中：—：，居右—：<br>可以在表格中添加：’’的代码(不能是代码块)、强调、链接<br>我的疑问：markdown怎么跨单元格</li></ul></blockquote><h3 id="8、语义化标签"><a href="#8、语义化标签" class="headerlink" title="8、语义化标签"></a>8、语义化标签</h3><h4 id="yyhbq">语义化标签</h4><ul><li><p>文本格式化标签</p><table><thead><tr><th>标签</th><th>说明</th><th>markdown写法</th></tr></thead><tbody><tr><td>b</td><td>粗体(已被CSS替代)</td><td><strong>粗体</strong></td></tr><tr><td>i</td><td>斜体(已被CSS替代)</td><td><em>斜体</em></td></tr><tr><td>u</td><td>下划线(已被CSS替代)</td><td><del>删除线</del></td></tr><tr><td>em</td><td>着重强调</td><td></td></tr><tr><td>strong</td><td>特别重要的文字</td><td></td></tr><tr><td>mark</td><td>高亮文本</td><td>&#x3D;&#x3D;高亮&#x3D;&#x3D;</td></tr><tr><td>sub</td><td>下标</td><td>H<del>2</del>O</td></tr><tr><td>sup</td><td>上标</td><td>X^2^</td></tr><tr><td>del</td><td>删除线</td><td></td></tr><tr><td>pre</td><td>预格式文本</td><td></td></tr><tr><td>figure</td><td>用以规定独立的流内容</td><td></td></tr><tr><td>figcaption</td><td>figure的标题</td><td></td></tr></tbody></table></li><li><p><code>pre</code>被包围在<code>&lt;pre&gt;</code>标签，元素中的文本通常会保留空格和换行符。<br>而文本也会呈现为等宽字体。</p></li></ul><pre><code>&lt;pre&gt;被包围在 pre 标签  元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。 &lt;/pre&gt;&lt;figure&gt;    &lt;figcaption&gt;小米家电&lt;/figcaption&gt;    &lt;img src=&quot;家电.webp&quot; &quot;width=20&quot;&gt;&lt;/figure&gt;&lt;figure&gt;    &lt;img src=&quot;&quot;&gt;    &lt;figcaption&gt;小米家电&lt;/figcaption&gt;&lt;/figure&gt;</code></pre><ul><li>HTML5区块标签<table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>span</td><td>文本中的区块标签</td></tr><tr><td>header</td><td>页头</td></tr><tr><td>nav</td><td>导航条</td></tr><tr><td>main</td><td>网页核心部分</td></tr><tr><td>article</td><td>文档的核心内容</td></tr><tr><td>section</td><td>文档的区域</td></tr><tr><td>aside</td><td>非必要内容：广告等</td></tr><tr><td>footer</td><td>页脚</td></tr></tbody></table></li></ul><pre><code>&lt;p&gt;商品价格：&lt;span&gt;苹果&lt;/span&gt;5元&lt;/p&gt;</code></pre><ul><li>网页的排版：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>网站logo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>网页的导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>广告栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>商品标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>商品信息1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>页脚<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span></code></pre><h3 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><table><thead><tr><th>写法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>‘’</td><td>原代码显示</td><td>单个代码、短语用</td></tr><tr><td>&#96;&#96;&#96;html</td><td>代码块</td><td>前后各三个，标注语言后会自动添加颜色</td></tr><tr><td>[数字&#x2F;单词]</td><td>脚注</td><td>添加注释和引用</td></tr><tr><td>-空格[空格]空格文字</td><td>待办事项</td><td>方框中加x是已完成，空格是未完成</td></tr><tr><td>表情符</td><td>表情</td><td>可以直接复制表情或者使用其简码</td></tr></tbody></table><blockquote><p>脚注的标识符可以标注数字或者英文单词<br>标注可以写在在除其他元素中的任何地方<br>英语[^1]  语文[^2]<br>[^1]:my footnote.<br>[^2]:hihihi</p></blockquote><pre><code>英语[^1]  [^1]:my footnote.</code></pre><blockquote><p>任务列表</p></blockquote><ul><li><input disabled="" type="checkbox"> 阅读</li><li><input checked="" disabled="" type="checkbox"> 运动</li></ul><pre><code>- [ ] 阅读- [x] 运动</code></pre><blockquote><p>表情</p><blockquote><p>😀</p></blockquote></blockquote><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><ul><li><p>自动url链接<br>   百度：<a href="http://www.baidu.com/">http://www.baidu.com</a></p></li><li><p>禁用url链接<br>  加上符号：<code>http://www.baidu.com</code></p></li><li><p>徽章</p><ul><li>格式：<a href="%E8%B6%85%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80"><img src="/%E5%9B%BE%E7%89%87%E6%BA%90%E5%9C%B0%E5%9D%80" alt="图片文字说明"></a></li><li>先获取在线徽章的地址，然后按照语言规则手动拼接</li><li><a href="https://github.com/snowdreams1006"><img src="https://img.shields.io/badge/github-snowdreams1006-brightgreen.svg" alt="github"></a></li></ul></li></ul><blockquote><p>徽章图形制作网站：<a href="https://shields.io/">https://shields.io/</a><br>相关知识点：<a href="https://segmentfault.com/search?q=%E5%BE%BD%E7%AB%A0">https://segmentfault.com/search?q=%E5%BE%BD%E7%AB%A0</a> </p></blockquote><h2 id="三、VScode基础配置"><a href="#三、VScode基础配置" class="headerlink" title="三、VScode基础配置"></a>三、VScode基础配置</h2><h3 id="1、下载：官网下载"><a href="#1、下载：官网下载" class="headerlink" title="1、下载：官网下载"></a>1、下载：官网下载</h3><h3 id="2、插件安装："><a href="#2、插件安装：" class="headerlink" title="2、插件安装："></a>2、插件安装：</h3><ul><li>简体中文语言包： chinese</li><li>图标：Material Icon Theme</li><li>通过编辑器打开默认浏览器：open in brower</li><li>开启本地服务，即时刷新：live server</li><li>自动修改标签对： auto rename tag</li><li>将代码生成一张图片：carbon-now-sh</li><li>格式化代码：prettier-code-formatter;打开设置中的save勾选保存时格式化文件</li></ul><h3 id="3、常用快捷键"><a href="#3、常用快捷键" class="headerlink" title="3、常用快捷键"></a>3、常用快捷键</h3><ul><li>单行注释：ctrl+&#x2F;</li><li>多行注释2：alt+shift+A</li><li>移动行：alt+up&#x2F;down</li><li>显示、隐藏目录栏：ctrl+b</li><li>控制台终端显示&#x2F;隐藏：ctrl+~</li><li>多行编辑：ctrl+alt+up&#x2F;down</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客介绍及搭建过程分享</title>
      <link href="/2023/11/16/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%88%86%E4%BA%AB/"/>
      <url>/2023/11/16/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><blockquote><p>写这篇文的目的</p></blockquote><ul><li>记录自己搭建过程，便于以后快速复用</li><li>总结经验和自己踩的坑，给其他小伙伴一些参考(由于是搭建后写的，所以没有参考图片)</li></ul><blockquote><p>介绍</p></blockquote><ul><li>初步效果参考我的博客：<a href="https://hermiablog.com/">hermia的个人博客</a></li><li>本博客基于Hexo框架，使用github托管</li><li>使用自定义域名：<code>hermiablog.com</code></li><li>hexo主题：<code>hexo-theme-matery</code></li></ul><blockquote><p>主题特性</p></blockquote><ul><li>简单漂亮，文章内容美观易读</li><li>Material Design 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 Banner 图片(我选的图片都很美，期待你的每天访问哦)</li><li>瀑布流式的博客文章列表（文章无特色图片时会有漂亮的图片代替）</li><li>时间轴式的归档页</li><li>词云的标签页和雷达图的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 MathJax</li><li>TOC 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li>Gitalk、Gitment、Valine 和 Disqus 评论模块（推荐使用 Gitalk）</li><li>集成了不蒜子统计、谷歌分析（Google Analytics）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能<ul><li>博客正在建设中，更多功能敬请期待….</li></ul></li></ul><blockquote><p>跟着本篇文章，你会实现：</p></blockquote><ul><li>使用<code>github用户名.github.io</code>&#x2F;自定义域名访问博客</li><li>设置自己喜欢的主题</li></ul><blockquote><p>软件准备</p></blockquote><ul><li>git</li><li>Node.js</li><li>任一编辑器</li><li>注意：命令行操作使用git，文件内容编辑使用vscode</li></ul><blockquote><p>参考官方文档</p></blockquote><ul><li><a href="https://docs.github.com/zh/pages">Github Pages文档</a></li><li><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></li></ul><h3 id="低配版：github域名-默认hexo主题"><a href="#低配版：github域名-默认hexo主题" class="headerlink" title="低配版：github域名+默认hexo主题"></a>低配版：github域名+默认hexo主题</h3><blockquote><p>步骤</p></blockquote><ul><li>新建本地仓库</li><li>安装hexo</li><li>创建github仓库</li><li>链接远程仓库</li><li>部署</li></ul><h4 id="新建本地仓库"><a href="#新建本地仓库" class="headerlink" title="新建本地仓库"></a>新建本地仓库</h4><blockquote><p>我的电脑里同时使用了gitee和github仓库，且使用了不同的用户名及邮箱，因此</p><ul><li>不能使用全局的用户名、邮箱配置</li><li>所以在使用SSH链接远程仓库时要单独配置</li></ul></blockquote><ul><li>首先在本地新建空文件夹myblog</li><li>注意：<strong>不要</strong>使用<code>git init</code>来初始化仓库</li><li>因为hexo安装必须在空文件夹</li></ul><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><ul><li>右击刚刚新建的文件夹myblog，点击Git Bash Here打开git窗口</li><li>输入<code>npm install -g hexo-cli</code>安装Hexo</li><li>验证是否安装成功<code>hexo -v</code></li><li>初始化Hexo：<code>hexo init</code></li><li>查看是否能在本地启动成功：<code>hexo s</code>；启动服务器，访问网址之后可以看到hexo的初始界面；停止服务器：<code>ctrl+c</code></li></ul><pre><code>npm install -g hexo-clihexo -vhexo inithexo s</code></pre><blockquote><p>Hexo相关目录文件</p></blockquote><ul><li>node_modules是node.js各种库的目录</li><li>public是生成的网页文件目录</li><li>scaffolds里面就三个文件，存储着新文章和新页面的初始设置</li><li>source是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件</li><li>themes存放着主题文件，一般也用不到。<ul><li>我们平时写文章只需要关注source&#x2F;_posts这个文件夹就行了</li></ul></li></ul><h4 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h4><blockquote><p>注意：仓库名必须是<code>用户名.github.io</code>，这有这样做，部署完之后才能使用<code>http://用户名.github.io</code>访问</p></blockquote><ul><li>打开<code>https://github.com/</code>，新建一个项目仓库</li><li>选择公开仓库和需要README文件</li><li>git仓库默认主分支名为main，建议修改为master，和本地仓库的主分支名相同</li></ul><h4 id="使用SSH密钥链接远程仓库"><a href="#使用SSH密钥链接远程仓库" class="headerlink" title="使用SSH密钥链接远程仓库"></a>使用SSH密钥链接远程仓库</h4><ul><li>回到本地仓库的git界面</li><li>绑定用户名和邮箱</li></ul><pre><code># 全局git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;# 局部git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;# 查看用用户名和邮箱信息是否配置成功git config  --list</code></pre><blockquote><ul><li>如果你和我一样有多个仓库，就去掉 –global</li><li>邮箱就是你github绑定的邮箱</li><li>检查是否配置成功</li></ul></blockquote><ul><li>创建SSH</li></ul><pre><code>ssh-keygen -t rsa -C 邮箱名</code></pre><blockquote><ul><li>后面是自己注册github的邮箱，然后敲三次回车</li></ul></blockquote><ul><li>接着就会发现<code>C:\Users\用户名</code>下多了一个.ssh目录，打开后有一个公钥，一个私钥。id_rsa.pub是公钥</li><li>我们需要打开它，复制里面的内容</li><li>打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，标题随意取，把刚刚复制id_rsa.pub里面的信息粘贴到钥匙框</li><li>在git bash输入<code>ssh -T git@github.com</code>；如果出现<code>...successfully...</code>就成功了</li></ul><h4 id="将hexo和GitHub关联"><a href="#将hexo和GitHub关联" class="headerlink" title="将hexo和GitHub关联"></a>将hexo和GitHub关联</h4><ul><li>打开本地仓库，博客文件夹，在根目录找到<code>_config.yml</code>文件，使用vscode或任一编辑器打开</li><li>修改配置：</li></ul><pre><code>deploy:  type: git  repository: github地址  branch: master</code></pre><blockquote><ul><li>获取repository：打开github仓库–&gt;Code–&gt;复制SSH地址填入即可</li><li>注意：hexo的所有文件，在修改时切记<strong>冒号后面有空格</strong>，否则报错</li></ul></blockquote><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><ul><li>安装deploy-git</li></ul><pre><code>npm install hexo-deployer-git --save</code></pre><ul><li>依次执行以下命令</li></ul><pre><code># 清除缓存文件 (db.json) 和已生成的静态文件 (public)hexo c# 生成静态文件hexo g# 部署网站hexo d</code></pre><blockquote><ul><li>注意：虽然我们使用的是git，但是<code>hexo d</code>会自动把文件传到github上；不需要再使用<code>git push</code>了</li></ul></blockquote><ul><li>完成以上步骤，你就可以使用xxx.github.io来访问你的博客啦</li><li>以后写文章，只需要以下命令</li></ul><pre><code>hexo new post &quot;文章标题&quot;hexo chexo ghexo d</code></pre><h4 id="如果你使用的是多仓库"><a href="#如果你使用的是多仓库" class="headerlink" title="如果你使用的是多仓库"></a>如果你使用的是多仓库</h4><ul><li>如果你出现<code>Please tell me who you are</code>报错</li><li>如果你和我一样使用多仓库，那么：<blockquote><ul><li>首先不要设置全局git用户名&#x2F;邮箱</li></ul></blockquote></li></ul><pre><code># 删除全局设置git config --global --unset user.namegit config --global --unset user.email</code></pre><blockquote><ul><li>打开博客文件夹，点击<code>.deploy_git</code>文件夹–&gt;点击窗口上的查看–&gt;显示隐藏目录</li><li>此时就会出现git的隐藏目录<code>.git</code></li><li>进去之后，打开<code>config</code>配置文件，添加以下内容，注意空格</li></ul></blockquote><pre><code>[user]email = your email name = your name</code></pre><h3 id="高配版：自定义域名-HTTPS加密协议-自定义主题"><a href="#高配版：自定义域名-HTTPS加密协议-自定义主题" class="headerlink" title="高配版：自定义域名+HTTPS加密协议+自定义主题"></a>高配版：自定义域名+HTTPS加密协议+自定义主题</h3><h4 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h4><ul><li>首先，自定义域名需要花钱买，华为云&#x2F;腾讯云&#x2F;阿里云都可以</li><li>购买之后需要解析域名</li><li>打开github仓库–&gt;点击setting–&gt;找到pages–&gt;拉到Custom domain处，填写你购买的域名</li><li>此时项目根目录会自动生成CNAME文件</li></ul><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="git——多仓库配置"><a href="#git——多仓库配置" class="headerlink" title="git——多仓库配置"></a>git——多仓库配置</h4><blockquote><p>!!!首先 多仓库配置 绝对不要把用户名及邮箱设置为全局</p></blockquote><ul><li>git安装后，点击文件夹–&gt;右击 git bash here打开</li><li>初始化本地仓库</li></ul><pre><code>git init</code></pre><ul><li>设置用户名和有效</li></ul><pre><code>git config  user.name &quot;你的名字（一定要是英文的）&quot;git config  user.email &quot;你的邮箱&quot;# 查看用用户名和邮箱信息是否配置成功git config --global --list# 删除全局设置git config --global --unset user.namegit config --global --unset user.email</code></pre><blockquote><p>添加SSH公钥</p></blockquote><ul><li>创建SSH密钥对</li></ul><pre><code>ssh-keygen -t rsa -C 邮箱名</code></pre><ul><li>如果不需要设置密码，可以直接按Enter键</li><li>之后就会在用户主目录下的<code>.ssh</code>文件夹中生成以下两个文件：</li></ul><pre><code>id_rsaid_rsa.pub</code></pre><ul><li>其中id_rsa为私钥，id_rsa.pub为公钥</li><li>因为有两个仓库，所有有两份，因此需要在<code>.ssh</code>文件夹中分开命名<ul><li>gitee仓库的密钥：id_rsa_gitee和id._rsa_gitee.pub</li><li>github仓库的密钥：id_rsa_github和id._rsa_github.pub</li></ul></li><li>将自定义路径的私钥添加到ssh秘钥搜索列表中</li></ul><pre><code>//连接认证agent（身份验证代理）ssh-agent bash//修改私钥路径ssh-add ~/.ssh/id_rsa_github</code></pre><ul><li>将公钥内容粘贴到自己github&#x2F;Gitee的设置中<ul><li>用记事本打开id._rsa.pub文件，复制内容</li><li>登录自己的github或gitee，在个人设置中找到“安全设置”–“ssh公钥”，标题自定，将公钥粘贴进去</li></ul></li><li>测试本机能否与github&#x2F;gitee使用ssh通信</li></ul><pre><code>ssh -T git@gitee.com//或ssh -T git@github.com</code></pre><ul><li><p>ssh返回 “……successfully ……”，这表示可以与远程愉快的通信了 </p></li><li><p>本地仓库与GitHub远程仓库进行关联</p></li></ul><pre><code>git remote add origin 远程仓库地址(HTTP/SSH)</code></pre><h4 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h4><ul><li>在本地新建README文件</li></ul><pre><code>touch README.md</code></pre><ul><li><p>git add README.md命令，将刚刚新建的文件添加到暂存区中</p></li><li><p>git status命令来检测当前git仓库的状态</p></li><li><p>git commit -m “XXX”命令，将暂存区中的更改保存到版本库中，并对本次的更改添加注释</p></li><li><p>git status命令来检测当前git仓库的状态</p></li><li><p>git log，查看你的版本库</p></li><li><p>将本地的master分支改名为main：<code>git branch -m master main</code>；将github仓库下载到本地时，第一次提交要用<code>git push -u origin main</code>，前提是本地要有main分支</p></li><li><p>创建新分支：git branch 分支名</p></li><li><p>查看所有分支：git branch</p></li><li><p>切换分支：git checkout 分支名</p></li><li><p>push到远程仓库上面：git push origin 分支名</p></li><li><p>git branch -r 查看远程分支</p></li><li><p>git branch -a 查看本地仓库和远程分支（a是all的简写）</p></li></ul><blockquote><p>在分支上新建文件</p></blockquote><ul><li>切换到需要提交的分支上面 git checkout hexo</li><li>在hexo分支上新建文件 touch blogDesc.md</li><li>修改文档 vim blogDesc.md</li><li>编辑 i </li><li>保存 esc :wq</li><li>提交到分支上面<ul><li>git add 文件名&#x2F;.()</li><li>git commit -m “描述”</li><li>git push -u origin hexo</li></ul></li><li>切换到主分支上面<ul><li>git checkout master</li></ul></li><li>将本地分支和合并到本地主分支上<ul><li>git merge hexo</li></ul></li><li>远程到仓库<ul><li>git pull origin main</li></ul></li></ul><blockquote><p>删除分支</p></blockquote><ul><li>查看所有的分支<ul><li>git branch -a</li></ul></li><li>删除远程分支<ul><li>git push origin –delete hello</li></ul></li><li>删除本地分支<ul><li>git branch -D hello</li></ul></li></ul><blockquote><p>远程分支操作</p></blockquote><ul><li>从远程仓库中,把对应的远程分支下载到本地仓库中,保持本地分支和远程分支名称相同</li></ul><pre><code>#从远程仓库中,把对应的远程分支下载到本地仓库中,并把下载的本地分支进行重命名git checkout -b 本地分支的名称 远程仓库名称/远程分支名称</code></pre><ul><li>将本地分支推送到远程仓库</li></ul><pre><code># -u 表示把本地分支和远程分支进行关联,只在第一次推送的时候需要带-u参数git push -u 远程仓库的名称 本地分支的名称:远程分支的名称</code></pre><ul><li>拉取远程分支的最新代码</li></ul><pre><code>#从远程仓库,拉取当前分支最新的代码,保持当前分支的代码和远程分支代码一致git pull</code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>新建文章 hexo new post 标题</li><li>部署</li></ul><pre><code>#清理之前的生成hexo c# 生成静态网站hexo g#开启本地服务 ctrl+c 停止hexo s#上传到githubhexo d</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
